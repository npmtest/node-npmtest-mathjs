{"/home/travis/build/npmtest/node-npmtest-mathjs/test.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/test.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":1,"12":1,"13":1,"14":1,"15":2,"16":2,"17":2,"18":2,"19":1,"20":1,"21":2,"22":2,"23":2,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":2,"37":2,"38":1,"39":2,"40":2,"41":1,"42":2,"43":2,"44":1,"45":1,"46":1,"47":1,"48":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[1,1],"5":[1,1],"6":[1,1],"7":[1,1],"8":[1,1],"9":[1,1,1],"10":[1,1],"11":[1,1],"12":[1,1],"13":[1,1],"14":[1,1],"15":[1,1]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":1,"7":1,"8":2,"9":2,"10":2,"11":1},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}},"4":{"name":"(anonymous_4)","line":61,"loc":{"start":{"line":61,"column":5},"end":{"line":61,"column":17}}},"5":{"name":"(anonymous_5)","line":82,"loc":{"start":{"line":82,"column":5},"end":{"line":82,"column":17}}},"6":{"name":"(anonymous_6)","line":102,"loc":{"start":{"line":102,"column":83},"end":{"line":105,"column":10}},"skip":true},"7":{"name":"(anonymous_7)","line":113,"loc":{"start":{"line":113,"column":77},"end":{"line":116,"column":10}},"skip":true},"8":{"name":"(anonymous_8)","line":127,"loc":{"start":{"line":127,"column":77},"end":{"line":130,"column":10}},"skip":true},"9":{"name":"(anonymous_9)","line":138,"loc":{"start":{"line":138,"column":83},"end":{"line":141,"column":10}},"skip":true},"10":{"name":"(anonymous_10)","line":149,"loc":{"start":{"line":149,"column":79},"end":{"line":152,"column":10}},"skip":true},"11":{"name":"(anonymous_11)","line":160,"loc":{"start":{"line":160,"column":75},"end":{"line":163,"column":10}},"skip":true}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":175,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":56,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":40,"column":8},"end":{"line":53,"column":9}},"11":{"start":{"line":43,"column":12},"end":{"line":46,"column":14}},"12":{"start":{"line":47,"column":12},"end":{"line":47,"column":18}},"13":{"start":{"line":50,"column":12},"end":{"line":51,"column":46}},"14":{"start":{"line":52,"column":12},"end":{"line":52,"column":18}},"15":{"start":{"line":55,"column":8},"end":{"line":55,"column":35}},"16":{"start":{"line":61,"column":4},"end":{"line":63,"column":9}},"17":{"start":{"line":62,"column":8},"end":{"line":62,"column":15}},"18":{"start":{"line":64,"column":4},"end":{"line":77,"column":5}},"19":{"start":{"line":70,"column":8},"end":{"line":70,"column":14}},"20":{"start":{"line":76,"column":8},"end":{"line":76,"column":14}},"21":{"start":{"line":82,"column":4},"end":{"line":84,"column":9}},"22":{"start":{"line":83,"column":8},"end":{"line":83,"column":15}},"23":{"start":{"line":85,"column":4},"end":{"line":174,"column":5}},"24":{"start":{"line":92,"column":8},"end":{"line":94,"column":63}},"25":{"start":{"line":95,"column":8},"end":{"line":95,"column":14}},"26":{"start":{"line":102,"column":8},"end":{"line":111,"column":10},"skip":true},"27":{"start":{"line":109,"column":12},"end":{"line":109,"column":55},"skip":true},"28":{"start":{"line":110,"column":12},"end":{"line":110,"column":48},"skip":true},"29":{"start":{"line":113,"column":8},"end":{"line":125,"column":10},"skip":true},"30":{"start":{"line":120,"column":12},"end":{"line":120,"column":76},"skip":true},"31":{"start":{"line":121,"column":12},"end":{"line":121,"column":73},"skip":true},"32":{"start":{"line":122,"column":12},"end":{"line":122,"column":74},"skip":true},"33":{"start":{"line":123,"column":12},"end":{"line":123,"column":25},"skip":true},"34":{"start":{"line":124,"column":12},"end":{"line":124,"column":45},"skip":true},"35":{"start":{"line":127,"column":8},"end":{"line":136,"column":10},"skip":true},"36":{"start":{"line":134,"column":12},"end":{"line":134,"column":25},"skip":true},"37":{"start":{"line":135,"column":12},"end":{"line":135,"column":45},"skip":true},"38":{"start":{"line":138,"column":8},"end":{"line":147,"column":10},"skip":true},"39":{"start":{"line":145,"column":12},"end":{"line":145,"column":25},"skip":true},"40":{"start":{"line":146,"column":12},"end":{"line":146,"column":48},"skip":true},"41":{"start":{"line":149,"column":8},"end":{"line":158,"column":10},"skip":true},"42":{"start":{"line":156,"column":12},"end":{"line":156,"column":25},"skip":true},"43":{"start":{"line":157,"column":12},"end":{"line":157,"column":46},"skip":true},"44":{"start":{"line":160,"column":8},"end":{"line":169,"column":10},"skip":true},"45":{"start":{"line":167,"column":12},"end":{"line":167,"column":94},"skip":true},"46":{"start":{"line":168,"column":12},"end":{"line":168,"column":48},"skip":true},"47":{"start":{"line":172,"column":8},"end":{"line":172,"column":35},"skip":true},"48":{"start":{"line":173,"column":8},"end":{"line":173,"column":14},"skip":true}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":40,"type":"switch","locations":[{"start":{"line":42,"column":8},"end":{"line":47,"column":18}},{"start":{"line":49,"column":8},"end":{"line":52,"column":18}}]},"5":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":16},"end":{"line":44,"column":44}},{"start":{"line":44,"column":48},"end":{"line":44,"column":66}}]},"6":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":21},"end":{"line":50,"column":49}},{"start":{"line":50,"column":53},"end":{"line":50,"column":72}}]},"7":{"line":64,"type":"switch","locations":[{"start":{"line":69,"column":4},"end":{"line":70,"column":14}},{"start":{"line":75,"column":4},"end":{"line":76,"column":14}}]},"8":{"line":85,"type":"switch","locations":[{"start":{"line":90,"column":4},"end":{"line":95,"column":14}},{"start":{"line":101,"column":4},"end":{"line":173,"column":14},"skip":true}]},"9":{"line":92,"type":"binary-expr","locations":[{"start":{"line":92,"column":18},"end":{"line":92,"column":32}},{"start":{"line":93,"column":12},"end":{"line":93,"column":53}},{"start":{"line":94,"column":12},"end":{"line":94,"column":61}}]},"10":{"line":102,"type":"binary-expr","locations":[{"start":{"line":102,"column":45},"end":{"line":102,"column":79},"skip":true},{"start":{"line":102,"column":83},"end":{"line":111,"column":9},"skip":true}]},"11":{"line":113,"type":"binary-expr","locations":[{"start":{"line":113,"column":42},"end":{"line":113,"column":73},"skip":true},{"start":{"line":113,"column":77},"end":{"line":125,"column":9},"skip":true}]},"12":{"line":127,"type":"binary-expr","locations":[{"start":{"line":127,"column":42},"end":{"line":127,"column":73},"skip":true},{"start":{"line":127,"column":77},"end":{"line":136,"column":9},"skip":true}]},"13":{"line":138,"type":"binary-expr","locations":[{"start":{"line":138,"column":45},"end":{"line":138,"column":79},"skip":true},{"start":{"line":138,"column":83},"end":{"line":147,"column":9},"skip":true}]},"14":{"line":149,"type":"binary-expr","locations":[{"start":{"line":149,"column":43},"end":{"line":149,"column":75},"skip":true},{"start":{"line":149,"column":79},"end":{"line":158,"column":9},"skip":true}]},"15":{"line":160,"type":"binary-expr","locations":[{"start":{"line":160,"column":41},"end":{"line":160,"column":71},"skip":true},{"start":{"line":160,"column":75},"end":{"line":169,"column":9},"skip":true}]}},"code":["/* istanbul instrument in package npmtest_mathjs */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        switch (local.modeJs) {","        // re-init local from window.local","        case 'browser':","            local = local.global.utility2.objectSetDefault(","                local.global.utility2_rollup || local.global.local,","                local.global.utility2","            );","            break;","        // re-init local from example.js","        case 'node':","            local = (local.global.utility2_rollup || require('utility2'))","                .requireExampleJsFromReadme();","            break;","        }","        // export local","        local.global.local = local;","    }());","","","","    // run shared js-env code - function","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - function","    case 'browser':","        break;","","","","    // run node js-env code - function","    case 'node':","        break;","    }","","","","    // run shared js-env code - post-init","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - post-init","    case 'browser':","        // run tests","        local.nop(local.modeTest &&","            document.querySelector('#testRunButton1') &&","            document.querySelector('#testRunButton1').click());","        break;","","","","    // run node js-env code - post-init","    /* istanbul ignore next */","    case 'node':","        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApidoc's default handling-behavior-behavior","         */","            options = { modulePathList: module.paths };","            local.buildApidoc(options, onError);","        };","","        local.testCase_buildApp_default = local.testCase_buildApp_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApp's default handling-behavior-behavior","         */","            local.testCase_buildReadme_default(options, local.onErrorThrow);","            local.testCase_buildLib_default(options, local.onErrorThrow);","            local.testCase_buildTest_default(options, local.onErrorThrow);","            options = [];","            local.buildApp(options, onError);","        };","","        local.testCase_buildLib_default = local.testCase_buildLib_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildLib's default handling-behavior","         */","            options = {};","            local.buildLib(options, onError);","        };","","        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildReadme's default handling-behavior-behavior","         */","            options = {};","            local.buildReadme(options, onError);","        };","","        local.testCase_buildTest_default = local.testCase_buildTest_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildTest's default handling-behavior","         */","            options = {};","            local.buildTest(options, onError);","        };","","        local.testCase_webpage_default = local.testCase_webpage_default || function (","            options,","            onError","        ) {","        /*","         * this function will test webpage's default handling-behavior","         */","            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };","            local.browserTest(options, onError);","        };","","        // run test-server","        local.testRunServer(local);","        break;","    }","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"40":2,"43":1,"47":1,"50":1,"52":1,"55":2,"61":2,"62":2,"64":2,"70":1,"76":1,"82":2,"83":2,"85":2,"92":1,"95":1,"102":1,"109":1,"110":1,"113":1,"120":1,"121":1,"122":1,"123":1,"124":1,"127":1,"134":2,"135":2,"138":1,"145":2,"146":2,"149":1,"156":2,"157":2,"160":1,"167":1,"168":1,"172":1,"173":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/lib.npmtest_mathjs.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/lib.npmtest_mathjs.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":1,"15":1,"16":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1]},"f":{"1":2,"2":2,"3":2},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":53,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":52,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":41,"column":8},"end":{"line":41,"column":54}},"11":{"start":{"line":43,"column":8},"end":{"line":43,"column":51}},"12":{"start":{"line":45,"column":8},"end":{"line":51,"column":9}},"13":{"start":{"line":46,"column":12},"end":{"line":46,"column":57}},"14":{"start":{"line":48,"column":12},"end":{"line":48,"column":35}},"15":{"start":{"line":49,"column":12},"end":{"line":49,"column":49}},"16":{"start":{"line":50,"column":12},"end":{"line":50,"column":43}}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":16},"end":{"line":41,"column":44}},{"start":{"line":41,"column":48},"end":{"line":41,"column":53}}]},"5":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":8},"end":{"line":45,"column":8}},{"start":{"line":45,"column":8},"end":{"line":45,"column":8}}]}},"code":["/* istanbul instrument in package npmtest_mathjs */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || local;","        // init lib","        local.local = local.npmtest_mathjs = local;","        // init exports","        if (local.modeJs === 'browser') {","            local.global.utility2_npmtest_mathjs = local;","        } else {","            module.exports = local;","            module.exports.__dirname = __dirname;","            module.exports.module = module;","        }","    }());","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"41":2,"43":2,"45":2,"46":1,"48":1,"49":1,"50":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/example.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/example.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":2,"15":2,"16":2,"17":2,"18":2,"19":0,"20":2,"21":1,"22":1,"23":1,"24":1,"25":1,"26":0,"27":0,"28":1,"29":1,"30":2,"31":0,"32":0,"33":0,"34":1,"35":2,"36":2,"37":2,"38":2,"39":2,"40":2,"41":0,"42":2,"43":2,"44":2,"45":1,"46":3,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":0,"58":1,"59":6,"60":6,"61":1,"62":2,"63":0,"64":2,"65":1,"66":1,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1],"6":[1,1],"7":[2,0],"8":[2,1,1,1,1,1],"9":[0,2,0],"10":[1,1],"11":[2,1,1],"12":[1,0],"13":[0,2],"14":[2,0,0,0,0,0,0],"15":[0,2],"16":[2,0],"17":[1,1],"18":[0,1],"19":[1,2,0,2],"20":[1,0],"21":[1,1],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":2,"9":3,"10":1,"11":6,"12":0},"fnMap":{"1":{"name":"(anonymous_1)","line":26,"loc":{"start":{"line":26,"column":1},"end":{"line":26,"column":13}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":5},"end":{"line":33,"column":17}}},"3":{"name":"(anonymous_3)","line":37,"loc":{"start":{"line":37,"column":24},"end":{"line":37,"column":36}}},"4":{"name":"(anonymous_4)","line":69,"loc":{"start":{"line":69,"column":31},"end":{"line":69,"column":48}},"skip":true},"5":{"name":"(anonymous_5)","line":78,"loc":{"start":{"line":78,"column":26},"end":{"line":78,"column":45}},"skip":true},"6":{"name":"(anonymous_6)","line":123,"loc":{"start":{"line":123,"column":33},"end":{"line":123,"column":48}},"skip":true},"7":{"name":"(anonymous_7)","line":125,"loc":{"start":{"line":125,"column":27},"end":{"line":125,"column":39}},"skip":true},"8":{"name":"(anonymous_8)","line":133,"loc":{"start":{"line":133,"column":59},"end":{"line":133,"column":74}},"skip":true},"9":{"name":"(anonymous_9)","line":143,"loc":{"start":{"line":143,"column":45},"end":{"line":143,"column":62}},"skip":true},"10":{"name":"(anonymous_10)","line":144,"loc":{"start":{"line":144,"column":73},"end":{"line":144,"column":92}},"skip":true},"11":{"name":"(anonymous_11)","line":272,"loc":{"start":{"line":272,"column":51},"end":{"line":272,"column":77}},"skip":true},"12":{"name":"(anonymous_12)","line":314,"loc":{"start":{"line":314,"column":32},"end":{"line":314,"column":61}},"skip":true}},"statementMap":{"1":{"start":{"line":26,"column":0},"end":{"line":325,"column":5}},"2":{"start":{"line":28,"column":4},"end":{"line":28,"column":14}},"3":{"start":{"line":33,"column":4},"end":{"line":60,"column":9}},"4":{"start":{"line":35,"column":8},"end":{"line":35,"column":19}},"5":{"start":{"line":37,"column":8},"end":{"line":49,"column":13}},"6":{"start":{"line":38,"column":12},"end":{"line":48,"column":13}},"7":{"start":{"line":39,"column":16},"end":{"line":42,"column":30}},"8":{"start":{"line":44,"column":16},"end":{"line":47,"column":27}},"9":{"start":{"line":51,"column":8},"end":{"line":53,"column":21}},"10":{"start":{"line":55,"column":8},"end":{"line":57,"column":45}},"11":{"start":{"line":59,"column":8},"end":{"line":59,"column":35}},"12":{"start":{"line":61,"column":4},"end":{"line":324,"column":5}},"13":{"start":{"line":69,"column":8},"end":{"line":121,"column":10},"skip":true},"14":{"start":{"line":70,"column":12},"end":{"line":88,"column":13},"skip":true},"15":{"start":{"line":76,"column":16},"end":{"line":87,"column":19},"skip":true},"16":{"start":{"line":79,"column":20},"end":{"line":86,"column":21},"skip":true},"17":{"start":{"line":82,"column":24},"end":{"line":82,"column":43},"skip":true},"18":{"start":{"line":83,"column":24},"end":{"line":83,"column":30},"skip":true},"19":{"start":{"line":85,"column":24},"end":{"line":85,"column":49},"skip":true},"20":{"start":{"line":89,"column":12},"end":{"line":107,"column":13},"skip":true},"21":{"start":{"line":92,"column":16},"end":{"line":102,"column":17},"skip":true},"22":{"start":{"line":93,"column":20},"end":{"line":93,"column":86},"skip":true},"23":{"start":{"line":94,"column":20},"end":{"line":95,"column":45},"skip":true},"24":{"start":{"line":96,"column":20},"end":{"line":96,"column":42},"skip":true},"25":{"start":{"line":97,"column":20},"end":{"line":97,"column":48},"skip":true},"26":{"start":{"line":100,"column":20},"end":{"line":100,"column":85},"skip":true},"27":{"start":{"line":101,"column":20},"end":{"line":101,"column":96},"skip":true},"28":{"start":{"line":103,"column":16},"end":{"line":103,"column":22},"skip":true},"29":{"start":{"line":106,"column":16},"end":{"line":106,"column":22},"skip":true},"30":{"start":{"line":108,"column":12},"end":{"line":120,"column":13},"skip":true},"31":{"start":{"line":114,"column":16},"end":{"line":119,"column":17},"skip":true},"32":{"start":{"line":116,"column":20},"end":{"line":116,"column":78},"skip":true},"33":{"start":{"line":118,"column":20},"end":{"line":118,"column":53},"skip":true},"34":{"start":{"line":123,"column":8},"end":{"line":141,"column":11},"skip":true},"35":{"start":{"line":124,"column":12},"end":{"line":124,"column":54},"skip":true},"36":{"start":{"line":125,"column":12},"end":{"line":140,"column":14},"skip":true},"37":{"start":{"line":126,"column":16},"end":{"line":126,"column":28},"skip":true},"38":{"start":{"line":127,"column":16},"end":{"line":127,"column":69},"skip":true},"39":{"start":{"line":128,"column":16},"end":{"line":128,"column":75},"skip":true},"40":{"start":{"line":129,"column":16},"end":{"line":131,"column":17},"skip":true},"41":{"start":{"line":130,"column":20},"end":{"line":130,"column":27},"skip":true},"42":{"start":{"line":133,"column":16},"end":{"line":137,"column":36},"skip":true},"43":{"start":{"line":134,"column":20},"end":{"line":136,"column":55},"skip":true},"44":{"start":{"line":139,"column":16},"end":{"line":139,"column":57},"skip":true},"45":{"start":{"line":143,"column":8},"end":{"line":147,"column":11},"skip":true},"46":{"start":{"line":144,"column":12},"end":{"line":146,"column":15},"skip":true},"47":{"start":{"line":145,"column":16},"end":{"line":145,"column":70},"skip":true},"48":{"start":{"line":149,"column":8},"end":{"line":149,"column":31},"skip":true},"49":{"start":{"line":150,"column":8},"end":{"line":150,"column":14},"skip":true},"50":{"start":{"line":158,"column":8},"end":{"line":158,"column":31},"skip":true},"51":{"start":{"line":160,"column":8},"end":{"line":160,"column":33},"skip":true},"52":{"start":{"line":161,"column":8},"end":{"line":161,"column":37},"skip":true},"53":{"start":{"line":162,"column":8},"end":{"line":162,"column":35},"skip":true},"54":{"start":{"line":164,"column":8},"end":{"line":164,"column":50},"skip":true},"55":{"start":{"line":166,"column":8},"end":{"line":256,"column":2},"skip":true},"56":{"start":{"line":258,"column":8},"end":{"line":286,"column":9},"skip":true},"57":{"start":{"line":259,"column":12},"end":{"line":269,"column":14},"skip":true},"58":{"start":{"line":271,"column":12},"end":{"line":285,"column":19},"skip":true},"59":{"start":{"line":274,"column":20},"end":{"line":274,"column":35},"skip":true},"60":{"start":{"line":275,"column":20},"end":{"line":284,"column":21},"skip":true},"61":{"start":{"line":277,"column":24},"end":{"line":277,"column":64},"skip":true},"62":{"start":{"line":279,"column":24},"end":{"line":279,"column":40},"skip":true},"63":{"start":{"line":281,"column":24},"end":{"line":281,"column":40},"skip":true},"64":{"start":{"line":283,"column":24},"end":{"line":283,"column":39},"skip":true},"65":{"start":{"line":288,"column":8},"end":{"line":290,"column":9},"skip":true},"66":{"start":{"line":289,"column":12},"end":{"line":289,"column":18},"skip":true},"67":{"start":{"line":291,"column":8},"end":{"line":293,"column":54},"skip":true},"68":{"start":{"line":294,"column":8},"end":{"line":301,"column":37},"skip":true},"69":{"start":{"line":302,"column":8},"end":{"line":302,"column":82},"skip":true},"70":{"start":{"line":305,"column":8},"end":{"line":307,"column":9},"skip":true},"71":{"start":{"line":306,"column":12},"end":{"line":306,"column":82},"skip":true},"72":{"start":{"line":309,"column":8},"end":{"line":311,"column":9},"skip":true},"73":{"start":{"line":310,"column":12},"end":{"line":310,"column":18},"skip":true},"74":{"start":{"line":312,"column":8},"end":{"line":312,"column":54},"skip":true},"75":{"start":{"line":313,"column":8},"end":{"line":313,"column":69},"skip":true},"76":{"start":{"line":314,"column":8},"end":{"line":322,"column":36},"skip":true},"77":{"start":{"line":315,"column":12},"end":{"line":315,"column":61},"skip":true},"78":{"start":{"line":316,"column":12},"end":{"line":319,"column":13},"skip":true},"79":{"start":{"line":317,"column":16},"end":{"line":317,"column":75},"skip":true},"80":{"start":{"line":318,"column":16},"end":{"line":318,"column":23},"skip":true},"81":{"start":{"line":320,"column":12},"end":{"line":320,"column":38},"skip":true},"82":{"start":{"line":321,"column":12},"end":{"line":321,"column":27},"skip":true},"83":{"start":{"line":323,"column":8},"end":{"line":323,"column":14},"skip":true}},"branchMap":{"1":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":23},"end":{"line":39,"column":62}},{"start":{"line":40,"column":20},"end":{"line":40,"column":70}},{"start":{"line":41,"column":20},"end":{"line":41,"column":71}},{"start":{"line":42,"column":20},"end":{"line":42,"column":29}}]},"2":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":23},"end":{"line":44,"column":37}},{"start":{"line":45,"column":20},"end":{"line":45,"column":61}},{"start":{"line":46,"column":20},"end":{"line":46,"column":70}},{"start":{"line":47,"column":20},"end":{"line":47,"column":26}}]},"3":{"line":51,"type":"cond-expr","locations":[{"start":{"line":52,"column":14},"end":{"line":52,"column":20}},{"start":{"line":53,"column":14},"end":{"line":53,"column":20}}]},"4":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":16},"end":{"line":55,"column":44}},{"start":{"line":55,"column":49},"end":{"line":57,"column":43}}]},"5":{"line":55,"type":"cond-expr","locations":[{"start":{"line":56,"column":14},"end":{"line":56,"column":50}},{"start":{"line":57,"column":14},"end":{"line":57,"column":43}}]},"6":{"line":61,"type":"switch","locations":[{"start":{"line":68,"column":4},"end":{"line":150,"column":14},"skip":true},{"start":{"line":156,"column":4},"end":{"line":323,"column":14},"skip":true}]},"7":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true},{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true}]},"8":{"line":70,"type":"binary-expr","locations":[{"start":{"line":70,"column":16},"end":{"line":70,"column":22},"skip":true},{"start":{"line":70,"column":27},"end":{"line":70,"column":32},"skip":true},{"start":{"line":71,"column":20},"end":{"line":71,"column":39},"skip":true},{"start":{"line":72,"column":20},"end":{"line":72,"column":49},"skip":true},{"start":{"line":73,"column":20},"end":{"line":73,"column":58},"skip":true},{"start":{"line":74,"column":20},"end":{"line":74,"column":69},"skip":true}]},"9":{"line":79,"type":"switch","locations":[{"start":{"line":80,"column":20},"end":{"line":80,"column":33},"skip":true},{"start":{"line":81,"column":20},"end":{"line":83,"column":30},"skip":true},{"start":{"line":84,"column":20},"end":{"line":85,"column":49},"skip":true}]},"10":{"line":89,"type":"switch","locations":[{"start":{"line":90,"column":12},"end":{"line":103,"column":22},"skip":true},{"start":{"line":105,"column":12},"end":{"line":106,"column":22},"skip":true}]},"11":{"line":89,"type":"binary-expr","locations":[{"start":{"line":89,"column":20},"end":{"line":89,"column":25},"skip":true},{"start":{"line":89,"column":29},"end":{"line":89,"column":48},"skip":true},{"start":{"line":89,"column":52},"end":{"line":89,"column":74},"skip":true}]},"12":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true},{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true}]},"13":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true},{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true}]},"14":{"line":108,"type":"binary-expr","locations":[{"start":{"line":108,"column":16},"end":{"line":108,"column":61},"skip":true},{"start":{"line":108,"column":66},"end":{"line":108,"column":72},"skip":true},{"start":{"line":108,"column":77},"end":{"line":108,"column":82},"skip":true},{"start":{"line":109,"column":20},"end":{"line":109,"column":39},"skip":true},{"start":{"line":110,"column":20},"end":{"line":110,"column":49},"skip":true},{"start":{"line":111,"column":20},"end":{"line":111,"column":58},"skip":true},{"start":{"line":112,"column":20},"end":{"line":112,"column":68},"skip":true}]},"15":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true},{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true}]},"16":{"line":134,"type":"cond-expr","locations":[{"start":{"line":135,"column":26},"end":{"line":135,"column":29},"skip":true},{"start":{"line":136,"column":26},"end":{"line":136,"column":54},"skip":true}]},"17":{"line":164,"type":"binary-expr","locations":[{"start":{"line":164,"column":27},"end":{"line":164,"column":43},"skip":true},{"start":{"line":164,"column":47},"end":{"line":164,"column":49},"skip":true}]},"18":{"line":258,"type":"if","locations":[{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true},{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true}]},"19":{"line":275,"type":"switch","locations":[{"start":{"line":276,"column":20},"end":{"line":277,"column":64},"skip":true},{"start":{"line":278,"column":20},"end":{"line":279,"column":40},"skip":true},{"start":{"line":280,"column":20},"end":{"line":281,"column":40},"skip":true},{"start":{"line":282,"column":20},"end":{"line":283,"column":39},"skip":true}]},"20":{"line":288,"type":"if","locations":[{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true},{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true}]},"21":{"line":288,"type":"binary-expr","locations":[{"start":{"line":288,"column":12},"end":{"line":288,"column":40},"skip":true},{"start":{"line":288,"column":44},"end":{"line":288,"column":67},"skip":true}]},"22":{"line":292,"type":"binary-expr","locations":[{"start":{"line":292,"column":12},"end":{"line":292,"column":50},"skip":true},{"start":{"line":293,"column":12},"end":{"line":293,"column":53},"skip":true}]},"23":{"line":295,"type":"binary-expr","locations":[{"start":{"line":295,"column":12},"end":{"line":295,"column":64},"skip":true},{"start":{"line":296,"column":12},"end":{"line":301,"column":36},"skip":true}]},"24":{"line":302,"type":"binary-expr","locations":[{"start":{"line":302,"column":43},"end":{"line":302,"column":75},"skip":true},{"start":{"line":302,"column":79},"end":{"line":302,"column":81},"skip":true}]},"25":{"line":305,"type":"if","locations":[{"start":{"line":305,"column":8},"end":{"line":305,"column":8},"skip":true},{"start":{"line":305,"column":8},"end":{"line":305,"column":8},"skip":true}]},"26":{"line":309,"type":"if","locations":[{"start":{"line":309,"column":8},"end":{"line":309,"column":8},"skip":true},{"start":{"line":309,"column":8},"end":{"line":309,"column":8},"skip":true}]},"27":{"line":312,"type":"binary-expr","locations":[{"start":{"line":312,"column":27},"end":{"line":312,"column":43},"skip":true},{"start":{"line":312,"column":47},"end":{"line":312,"column":53},"skip":true}]},"28":{"line":316,"type":"if","locations":[{"start":{"line":316,"column":12},"end":{"line":316,"column":12},"skip":true},{"start":{"line":316,"column":12},"end":{"line":316,"column":12},"skip":true}]}},"code":["/*","example.js","","quickstart example","","instruction","    1. save this script as example.js","    2. run the shell command:","        $ npm install npmtest-mathjs && PORT=8081 node example.js","    3. play with the browser-demo on http://127.0.0.1:8081","*/","","","","/* istanbul instrument in package npmtest_mathjs */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || (local.modeJs === 'browser'","            ? local.global.utility2_npmtest_mathjs","            : global.utility2_moduleExports);","        // export local","        local.global.local = local;","    }());","    switch (local.modeJs) {","","","","    // post-init","    // run browser js-env code - post-init","    /* istanbul ignore next */","    case 'browser':","        local.testRunBrowser = function (event) {","            if (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('onreset'))) {","                // reset output","                Array.from(","                    document.querySelectorAll('body > .resettable')","                ).forEach(function (element) {","                    switch (element.tagName) {","                    case 'INPUT':","                    case 'TEXTAREA':","                        element.value = '';","                        break;","                    default:","                        element.textContent = '';","                    }","                });","            }","            switch (event && event.currentTarget && event.currentTarget.id) {","            case 'testRunButton1':","                // show tests","                if (document.querySelector('#testReportDiv1').style.display === 'none') {","                    document.querySelector('#testReportDiv1').style.display = 'block';","                    document.querySelector('#testRunButton1').textContent =","                        'hide internal test';","                    local.modeTest = true;","                    local.testRunDefault(local);","                // hide tests","                } else {","                    document.querySelector('#testReportDiv1').style.display = 'none';","                    document.querySelector('#testRunButton1').textContent = 'run internal test';","                }","                break;","            // custom-case","            default:","                break;","            }","            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('oneval')))) {","                // try to eval input-code","                try {","                    /*jslint evil: true*/","                    eval(document.querySelector('#inputTextareaEval1').value);","                } catch (errorCaught) {","                    console.error(errorCaught.stack);","                }","            }","        };","        // log stderr and stdout to #outputTextareaStdout1","        ['error', 'log'].forEach(function (key) {","            console[key + '_original'] = console[key];","            console[key] = function () {","                var element;","                console[key + '_original'].apply(console, arguments);","                element = document.querySelector('#outputTextareaStdout1');","                if (!element) {","                    return;","                }","                // append text to #outputTextareaStdout1","                element.value += Array.from(arguments).map(function (arg) {","                    return typeof arg === 'string'","                        ? arg","                        : JSON.stringify(arg, null, 4);","                }).join(' ') + '\\n';","                // scroll textarea to bottom","                element.scrollTop = element.scrollHeight;","            };","        });","        // init event-handling","        ['change', 'click', 'keyup'].forEach(function (event) {","            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {","                element.addEventListener(event, local.testRunBrowser);","            });","        });","        // run tests","        local.testRunBrowser();","        break;","","","","    // run node js-env code - post-init","    /* istanbul ignore next */","    case 'node':","        // export local","        module.exports = local;","        // require modules","        local.fs = require('fs');","        local.http = require('http');","        local.url = require('url');","        // init assets","        local.assetsDict = local.assetsDict || {};","        /* jslint-ignore-begin */","        local.assetsDict['/assets.index.template.html'] = '\\","<!doctype html>\\n\\","<html lang=\"en\">\\n\\","<head>\\n\\","<meta charset=\"UTF-8\">\\n\\","<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\","<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\","<style>\\n\\","/*csslint\\n\\","    box-sizing: false,\\n\\","    universal-selector: false\\n\\","*/\\n\\","* {\\n\\","    box-sizing: border-box;\\n\\","}\\n\\","body {\\n\\","    background: #dde;\\n\\","    font-family: Arial, Helvetica, sans-serif;\\n\\","    margin: 2rem;\\n\\","}\\n\\","body > * {\\n\\","    margin-bottom: 1rem;\\n\\","}\\n\\",".utility2FooterDiv {\\n\\","    margin-top: 20px;\\n\\","    text-align: center;\\n\\","}\\n\\","</style>\\n\\","<style>\\n\\","/*csslint\\n\\","*/\\n\\","textarea {\\n\\","    font-family: monospace;\\n\\","    height: 10rem;\\n\\","    width: 100%;\\n\\","}\\n\\","textarea[readonly] {\\n\\","    background: #ddd;\\n\\","}\\n\\","</style>\\n\\","</head>\\n\\","<body>\\n\\","<!-- utility2-comment\\n\\","<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\","utility2-comment -->\\n\\","<h1>\\n\\","<!-- utility2-comment\\n\\","    <a\\n\\","        {{#if env.npm_package_homepage}}\\n\\","        href=\"{{env.npm_package_homepage}}\"\\n\\","        {{/if env.npm_package_homepage}}\\n\\","        target=\"_blank\"\\n\\","    >\\n\\","utility2-comment -->\\n\\","        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\","<!-- utility2-comment\\n\\","    </a>\\n\\","utility2-comment -->\\n\\","</h1>\\n\\","<h3>{{env.npm_package_description}}</h3>\\n\\","<!-- utility2-comment\\n\\","<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\","<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\","<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\","utility2-comment -->\\n\\","\\n\\","\\n\\","\\n\\","<label>stderr and stdout</label>\\n\\","<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\","<!-- utility2-comment\\n\\","{{#if isRollup}}\\n\\","<script src=\"assets.app.js\"></script>\\n\\","{{#unless isRollup}}\\n\\","utility2-comment -->\\n\\","<script src=\"assets.utility2.rollup.js\"></script>\\n\\","<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\","<script src=\"assets.npmtest_mathjs.rollup.js\"></script>\\n\\","<script src=\"assets.example.js\"></script>\\n\\","<script src=\"assets.test.js\"></script>\\n\\","<!-- utility2-comment\\n\\","{{/if isRollup}}\\n\\","utility2-comment -->\\n\\","<div class=\"utility2FooterDiv\">\\n\\","    [ this app was created with\\n\\","    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\","    ]\\n\\","</div>\\n\\","</body>\\n\\","</html>\\n\\","';","        /* jslint-ignore-end */","        if (local.templateRender) {","            local.assetsDict['/'] = local.templateRender(","                local.assetsDict['/assets.index.template.html'],","                {","                    env: local.objectSetDefault(local.env, {","                        npm_package_description: 'the greatest app in the world!',","                        npm_package_name: 'my-app',","                        npm_package_nameAlias: 'my_app',","                        npm_package_version: '0.0.1'","                    })","                }","            );","        } else {","            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']","                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {","                    // jslint-hack","                    String(match0);","                    switch (match1) {","                    case 'npm_package_description':","                        return 'the greatest app in the world!';","                    case 'npm_package_name':","                        return 'my-app';","                    case 'npm_package_nameAlias':","                        return 'my_app';","                    case 'npm_package_version':","                        return '0.0.1';","                    }","                });","        }","        // run the cli","        if (local.global.utility2_rollup || module !== require.main) {","            break;","        }","        local.assetsDict['/assets.example.js'] =","            local.assetsDict['/assets.example.js'] ||","            local.fs.readFileSync(__filename, 'utf8');","        local.assetsDict['/assets.npmtest_mathjs.rollup.js'] =","            local.assetsDict['/assets.npmtest_mathjs.rollup.js'] ||","            local.fs.readFileSync(","                // buildCustomOrg-hack","                local.npmtest_mathjs.__dirname +","                    '/lib.npmtest_mathjs.js',","                'utf8'","            ).replace((/^#!/), '//');","        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';","        // if $npm_config_timeout_exit exists,","        // then exit this process after $npm_config_timeout_exit ms","        if (Number(process.env.npm_config_timeout_exit)) {","            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));","        }","        // start server","        if (local.global.utility2_serverHttp1) {","            break;","        }","        process.env.PORT = process.env.PORT || '8081';","        console.error('server starting on port ' + process.env.PORT);","        local.http.createServer(function (request, response) {","            request.urlParsed = local.url.parse(request.url);","            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {","                response.end(local.assetsDict[request.urlParsed.pathname]);","                return;","            }","            response.statusCode = 404;","            response.end();","        }).listen(process.env.PORT);","        break;","    }","}());",""],"l":{"26":2,"28":2,"33":2,"35":2,"37":2,"38":2,"39":2,"44":1,"51":2,"55":2,"59":2,"61":2,"69":1,"70":2,"76":2,"79":2,"82":2,"83":2,"85":1,"89":2,"92":1,"93":1,"94":1,"96":1,"97":1,"100":1,"101":1,"103":1,"106":1,"108":2,"114":1,"116":1,"118":1,"123":1,"124":2,"125":2,"126":2,"127":2,"128":2,"129":2,"130":1,"133":2,"134":2,"139":2,"143":1,"144":3,"145":1,"149":1,"150":1,"158":1,"160":1,"161":1,"162":1,"164":1,"166":1,"258":1,"259":1,"271":1,"274":6,"275":6,"277":1,"279":2,"281":1,"283":2,"288":1,"289":1,"291":1,"294":1,"302":1,"305":1,"306":1,"309":1,"310":1,"312":1,"313":1,"314":1,"315":1,"316":1,"317":1,"318":1,"320":1,"321":1,"323":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1},"b":{},"f":{"1":1},"fnMap":{"1":{"name":"create","line":26,"loc":{"start":{"line":26,"column":0},"end":{"line":26,"column":25}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":29}},"2":{"start":{"line":26,"column":0},"end":{"line":35,"column":1}},"3":{"start":{"line":28,"column":2},"end":{"line":28,"column":33}},"4":{"start":{"line":29,"column":2},"end":{"line":29,"column":23}},"5":{"start":{"line":32,"column":2},"end":{"line":32,"column":35}},"6":{"start":{"line":34,"column":2},"end":{"line":34,"column":14}},"7":{"start":{"line":38,"column":0},"end":{"line":38,"column":26}}},"branchMap":{},"code":["var core = require('./core');","","/**"," * math.js factory function. Creates a new instance of math.js"," *"," * @param {Object} [config] Available configuration options:"," *                            {number} epsilon"," *                              Minimum relative difference between two"," *                              compared values, used by all comparison functions."," *                            {string} matrix"," *                              A string 'matrix' (default) or 'array'."," *                            {string} number"," *                              A string 'number' (default), 'bignumber', or"," *                              'fraction'"," *                            {number} precision"," *                              The number of significant digits for BigNumbers."," *                              Not applicable for Numbers."," *                            {boolean} predictable"," *                              Predictable output type of functions. When true,"," *                              output type depends only on the input types. When"," *                              false (default), output type can vary depending"," *                              on input values. For example `math.sqrt(-4)`"," *                              returns `complex('2i')` when predictable is false, and"," *                              returns `NaN` when true."," */","function create (config) {","  // create a new math.js instance","  var math = core.create(config);","  math.create = create;","","  // import data types, functions, constants, expression parser, etc.","  math['import'](require('./lib'));","","  return math;","}","","// return a new instance of math.js","module.exports = create();",""],"l":{"1":1,"26":1,"28":1,"29":1,"32":1,"34":1,"38":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/core.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/core.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":44}}},"branchMap":{},"code":["module.exports = require('./lib/core/core');"],"l":{"1":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/core/core.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/core/core.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":18,"18":0,"19":18,"20":18,"21":18,"22":13,"23":6,"24":7,"25":13,"26":13,"27":5,"28":18,"29":1,"30":1,"31":1,"32":1,"33":0,"34":1},"b":{"1":[0,1],"2":[0,18],"3":[13,5],"4":[6,7],"5":[0,1]},"f":{"1":1,"2":18},"fnMap":{"1":{"name":"create","line":37,"loc":{"start":{"line":37,"column":17},"end":{"line":37,"column":43}}},"2":{"name":"load","line":92,"loc":{"start":{"line":92,"column":2},"end":{"line":92,"column":26}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":55}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":38}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":44}},"4":{"start":{"line":5,"column":0},"end":{"line":5,"column":49}},"5":{"start":{"line":6,"column":0},"end":{"line":6,"column":49}},"6":{"start":{"line":37,"column":0},"end":{"line":132,"column":2}},"7":{"start":{"line":39,"column":2},"end":{"line":42,"column":3}},"8":{"start":{"line":40,"column":4},"end":{"line":41,"column":72}},"9":{"start":{"line":45,"column":2},"end":{"line":45,"column":21}},"10":{"start":{"line":46,"column":2},"end":{"line":46,"column":21}},"11":{"start":{"line":49,"column":2},"end":{"line":49,"column":31}},"12":{"start":{"line":50,"column":2},"end":{"line":50,"column":17}},"13":{"start":{"line":51,"column":2},"end":{"line":54,"column":4}},"14":{"start":{"line":57,"column":2},"end":{"line":57,"column":46}},"15":{"start":{"line":60,"column":2},"end":{"line":83,"column":4}},"16":{"start":{"line":92,"column":2},"end":{"line":119,"column":3}},"17":{"start":{"line":93,"column":4},"end":{"line":95,"column":5}},"18":{"start":{"line":94,"column":6},"end":{"line":94,"column":95}},"19":{"start":{"line":97,"column":4},"end":{"line":97,"column":43}},"20":{"start":{"line":98,"column":4},"end":{"line":98,"column":17}},"21":{"start":{"line":99,"column":4},"end":{"line":116,"column":5}},"22":{"start":{"line":101,"column":6},"end":{"line":107,"column":7}},"23":{"start":{"line":103,"column":8},"end":{"line":103,"column":79}},"24":{"start":{"line":106,"column":8},"end":{"line":106,"column":73}},"25":{"start":{"line":110,"column":6},"end":{"line":110,"column":30}},"26":{"start":{"line":111,"column":6},"end":{"line":111,"column":31}},"27":{"start":{"line":115,"column":6},"end":{"line":115,"column":34}},"28":{"start":{"line":118,"column":4},"end":{"line":118,"column":20}},"29":{"start":{"line":122,"column":2},"end":{"line":122,"column":39}},"30":{"start":{"line":123,"column":2},"end":{"line":123,"column":39}},"31":{"start":{"line":124,"column":2},"end":{"line":124,"column":62}},"32":{"start":{"line":127,"column":2},"end":{"line":129,"column":3}},"33":{"start":{"line":128,"column":4},"end":{"line":128,"column":25}},"34":{"start":{"line":131,"column":2},"end":{"line":131,"column":14}}},"branchMap":{"1":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":2},"end":{"line":39,"column":2}},{"start":{"line":39,"column":2},"end":{"line":39,"column":2}}]},"2":{"line":93,"type":"if","locations":[{"start":{"line":93,"column":4},"end":{"line":93,"column":4}},{"start":{"line":93,"column":4},"end":{"line":93,"column":4}}]},"3":{"line":99,"type":"if","locations":[{"start":{"line":99,"column":4},"end":{"line":99,"column":4}},{"start":{"line":99,"column":4},"end":{"line":99,"column":4}}]},"4":{"line":101,"type":"if","locations":[{"start":{"line":101,"column":6},"end":{"line":101,"column":6}},{"start":{"line":101,"column":6},"end":{"line":101,"column":6}}]},"5":{"line":127,"type":"if","locations":[{"start":{"line":127,"column":2},"end":{"line":127,"column":2}},{"start":{"line":127,"column":2},"end":{"line":127,"column":2}}]}},"code":["var isFactory = require('./../utils/object').isFactory;","var typedFactory = require('./typed');","var emitter = require('./../utils/emitter');","","var importFactory = require('./function/import');","var configFactory = require('./function/config');","","/**"," * Math.js core. Creates a new, empty math.js instance"," * @param {Object} [options] Available options:"," *                            {number} epsilon"," *                              Minimum relative difference between two"," *                              compared values, used by all comparison functions."," *                            {string} matrix"," *                              A string 'Matrix' (default) or 'Array'."," *                            {string} number"," *                              A string 'number' (default), 'BigNumber', or 'Fraction'"," *                            {number} precision"," *                              The number of significant digits for BigNumbers."," *                              Not applicable for Numbers."," *                            {boolean} predictable"," *                              Predictable output type of functions. When true,"," *                              output type depends only on the input types. When"," *                              false (default), output type can vary depending"," *                              on input values. For example `math.sqrt(-4)`"," *                              returns `complex('2i')` when predictable is false, and"," *                              returns `NaN` when true."," *                            {string} randomSeed"," *                              Random seed for seeded pseudo random number generator."," *                              Set to null to randomly seed."," * @returns {Object} Returns a bare-bone math.js instance containing"," *                   functions:"," *                   - `import` to add new functions"," *                   - `config` to change configuration"," *                   - `on`, `off`, `once`, `emit` for events"," */","exports.create = function create (options) {","  // simple test for ES5 support","  if (typeof Object.create !== 'function') {","    throw new Error('ES5 not supported by this JavaScript engine. ' +","    'Please load the es5-shim and es5-sham library for compatibility.');","  }","","  // cached factories and instances","  var factories = [];","  var instances = [];","","  // create a namespace for the mathjs instance, and attach emitter functions","  var math = emitter.mixin({});","  math.type = {};","  math.expression = {","    transform: {},","    mathWithTransform: {}","  };","","  // create a new typed instance","  math.typed = typedFactory.create(math.type);","","  // create configuration options. These are private","  var _config = {","    // minimum relative difference between two compared values,","    // used by all comparison functions","    epsilon: 1e-12,","","    // type of default matrix output. Choose 'matrix' (default) or 'array'","    matrix: 'Matrix',","","    // type of default number output. Choose 'number' (default) 'BigNumber', or 'Fraction","    number: 'number',","","    // number of significant digits in BigNumbers","    precision: 64,","","    // predictable output type of functions. When true, output type depends only","    // on the input types. When false (default), output type can vary depending","    // on input values. For example `math.sqrt(-4)` returns `complex('2i')` when","    // predictable is false, and returns `NaN` when true.","    predictable: false,","","    // random seed for seeded pseudo random number generation","    // null = randomly seed","    randomSeed: null","  };","","  /**","   * Load a function or data type from a factory.","   * If the function or data type already exists, the existing instance is","   * returned.","   * @param {{type: string, name: string, factory: Function}} factory","   * @returns {*}","   */","  function load (factory) {","    if (!isFactory(factory)) {","      throw new Error('Factory object with properties `type`, `name`, and `factory` expected');","    }","","    var index = factories.indexOf(factory);","    var instance;","    if (index === -1) {","      // doesn't yet exist","      if (factory.math === true) {","        // pass with math namespace","        instance = factory.factory(math.type, _config, load, math.typed, math);","      }","      else {","        instance = factory.factory(math.type, _config, load, math.typed);","      }","","      // append to the cache","      factories.push(factory);","      instances.push(instance);","    }","    else {","      // already existing function, return the cached instance","      instance = instances[index];","    }","","    return instance;","  }","","  // load the import and config functions","  math['import'] = load(importFactory);","  math['config'] = load(configFactory);","  math.expression.mathWithTransform['config'] = math['config']","","  // apply options","  if (options) {","    math.config(options);","  }","","  return math;","};",""],"l":{"1":1,"2":1,"3":1,"5":1,"6":1,"37":1,"39":1,"40":0,"45":1,"46":1,"49":1,"50":1,"51":1,"57":1,"60":1,"92":1,"93":18,"94":0,"97":18,"98":18,"99":18,"101":13,"103":6,"106":7,"110":13,"111":13,"115":5,"118":18,"122":1,"123":1,"124":1,"127":1,"128":0,"131":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/utils/object.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/utils/object.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1,"28":0,"29":0,"30":0,"31":0,"32":1,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":1,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":1,"70":627,"71":627,"72":627,"73":627,"74":0,"75":1,"76":627,"77":627,"78":627,"79":627,"80":6,"81":4,"82":4,"83":6,"84":0,"85":0,"86":0,"87":1,"88":48,"89":48,"90":48,"91":48,"92":74,"93":74,"94":3,"95":74,"96":48,"97":1,"98":267},"b":{"1":[0,0],"2":[0,0,0,0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[627,0],"32":[627,0],"33":[4,2],"34":[48,0],"35":[3,71],"36":[267,267]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":627,"7":0,"8":627,"9":6,"10":0,"11":48,"12":267},"fnMap":{"1":{"name":"clone","line":14,"loc":{"start":{"line":14,"column":16},"end":{"line":14,"column":34}}},"2":{"name":"(anonymous_2)","line":30,"loc":{"start":{"line":30,"column":17},"end":{"line":30,"column":34}}},"3":{"name":"(anonymous_3)","line":58,"loc":{"start":{"line":58,"column":17},"end":{"line":58,"column":32}}},"4":{"name":"deepExtend","line":73,"loc":{"start":{"line":73,"column":21},"end":{"line":73,"column":48}}},"5":{"name":"deepEqual","line":107,"loc":{"start":{"line":107,"column":20},"end":{"line":107,"column":46}}},"6":{"name":"(anonymous_6)","line":153,"loc":{"start":{"line":153,"column":28},"end":{"line":153,"column":40}}},"7":{"name":"(anonymous_7)","line":157,"loc":{"start":{"line":157,"column":44},"end":{"line":157,"column":56}}},"8":{"name":"(anonymous_8)","line":175,"loc":{"start":{"line":175,"column":15},"end":{"line":175,"column":43}}},"9":{"name":"(anonymous_9)","line":180,"loc":{"start":{"line":180,"column":11},"end":{"line":180,"column":23}}},"10":{"name":"(anonymous_10)","line":188,"loc":{"start":{"line":188,"column":11},"end":{"line":188,"column":28}}},"11":{"name":"(anonymous_11)","line":210,"loc":{"start":{"line":210,"column":19},"end":{"line":210,"column":42}}},"12":{"name":"(anonymous_12)","line":239,"loc":{"start":{"line":239,"column":20},"end":{"line":239,"column":38}}}},"statementMap":{"1":{"start":{"line":14,"column":0},"end":{"line":50,"column":2}},"2":{"start":{"line":15,"column":2},"end":{"line":15,"column":22}},"3":{"start":{"line":18,"column":2},"end":{"line":21,"column":3}},"4":{"start":{"line":20,"column":4},"end":{"line":20,"column":13}},"5":{"start":{"line":24,"column":2},"end":{"line":26,"column":3}},"6":{"start":{"line":25,"column":4},"end":{"line":25,"column":21}},"7":{"start":{"line":29,"column":2},"end":{"line":33,"column":3}},"8":{"start":{"line":30,"column":4},"end":{"line":32,"column":7}},"9":{"start":{"line":31,"column":6},"end":{"line":31,"column":26}},"10":{"start":{"line":35,"column":2},"end":{"line":35,"column":61}},"11":{"start":{"line":35,"column":30},"end":{"line":35,"column":61}},"12":{"start":{"line":36,"column":2},"end":{"line":36,"column":61}},"13":{"start":{"line":36,"column":30},"end":{"line":36,"column":61}},"14":{"start":{"line":37,"column":2},"end":{"line":37,"column":62}},"15":{"start":{"line":37,"column":30},"end":{"line":37,"column":62}},"16":{"start":{"line":38,"column":2},"end":{"line":38,"column":59}},"17":{"start":{"line":38,"column":30},"end":{"line":38,"column":59}},"18":{"start":{"line":39,"column":2},"end":{"line":39,"column":44}},"19":{"start":{"line":39,"column":35},"end":{"line":39,"column":44}},"20":{"start":{"line":40,"column":2},"end":{"line":40,"column":69}},"21":{"start":{"line":40,"column":28},"end":{"line":40,"column":69}},"22":{"start":{"line":43,"column":2},"end":{"line":43,"column":13}},"23":{"start":{"line":44,"column":2},"end":{"line":48,"column":3}},"24":{"start":{"line":45,"column":4},"end":{"line":47,"column":5}},"25":{"start":{"line":46,"column":6},"end":{"line":46,"column":29}},"26":{"start":{"line":49,"column":2},"end":{"line":49,"column":11}},"27":{"start":{"line":58,"column":0},"end":{"line":65,"column":2}},"28":{"start":{"line":59,"column":2},"end":{"line":63,"column":3}},"29":{"start":{"line":60,"column":4},"end":{"line":62,"column":5}},"30":{"start":{"line":61,"column":6},"end":{"line":61,"column":24}},"31":{"start":{"line":64,"column":2},"end":{"line":64,"column":11}},"32":{"start":{"line":73,"column":0},"end":{"line":99,"column":2}},"33":{"start":{"line":75,"column":2},"end":{"line":77,"column":3}},"34":{"start":{"line":76,"column":4},"end":{"line":76,"column":66}},"35":{"start":{"line":79,"column":2},"end":{"line":97,"column":3}},"36":{"start":{"line":80,"column":4},"end":{"line":96,"column":5}},"37":{"start":{"line":81,"column":6},"end":{"line":95,"column":7}},"38":{"start":{"line":82,"column":8},"end":{"line":84,"column":9}},"39":{"start":{"line":83,"column":10},"end":{"line":83,"column":23}},"40":{"start":{"line":85,"column":8},"end":{"line":90,"column":9}},"41":{"start":{"line":86,"column":10},"end":{"line":86,"column":39}},"42":{"start":{"line":89,"column":10},"end":{"line":89,"column":28}},"43":{"start":{"line":91,"column":13},"end":{"line":95,"column":7}},"44":{"start":{"line":92,"column":8},"end":{"line":92,"column":70}},"45":{"start":{"line":94,"column":8},"end":{"line":94,"column":26}},"46":{"start":{"line":98,"column":2},"end":{"line":98,"column":11}},"47":{"start":{"line":107,"column":0},"end":{"line":147,"column":2}},"48":{"start":{"line":108,"column":2},"end":{"line":108,"column":19}},"49":{"start":{"line":109,"column":2},"end":{"line":146,"column":3}},"50":{"start":{"line":110,"column":4},"end":{"line":112,"column":5}},"51":{"start":{"line":111,"column":6},"end":{"line":111,"column":19}},"52":{"start":{"line":114,"column":4},"end":{"line":116,"column":5}},"53":{"start":{"line":115,"column":6},"end":{"line":115,"column":19}},"54":{"start":{"line":118,"column":4},"end":{"line":122,"column":5}},"55":{"start":{"line":119,"column":6},"end":{"line":121,"column":7}},"56":{"start":{"line":120,"column":8},"end":{"line":120,"column":21}},"57":{"start":{"line":123,"column":4},"end":{"line":123,"column":16}},"58":{"start":{"line":125,"column":7},"end":{"line":146,"column":3}},"59":{"start":{"line":126,"column":4},"end":{"line":128,"column":5}},"60":{"start":{"line":127,"column":6},"end":{"line":127,"column":19}},"61":{"start":{"line":130,"column":4},"end":{"line":135,"column":5}},"62":{"start":{"line":132,"column":6},"end":{"line":134,"column":7}},"63":{"start":{"line":133,"column":8},"end":{"line":133,"column":21}},"64":{"start":{"line":136,"column":4},"end":{"line":141,"column":5}},"65":{"start":{"line":138,"column":6},"end":{"line":140,"column":7}},"66":{"start":{"line":139,"column":8},"end":{"line":139,"column":21}},"67":{"start":{"line":142,"column":4},"end":{"line":142,"column":16}},"68":{"start":{"line":145,"column":4},"end":{"line":145,"column":47}},"69":{"start":{"line":153,"column":0},"end":{"line":163,"column":2}},"70":{"start":{"line":155,"column":2},"end":{"line":160,"column":16}},"71":{"start":{"line":156,"column":4},"end":{"line":159,"column":5}},"72":{"start":{"line":157,"column":6},"end":{"line":157,"column":62}},"73":{"start":{"line":158,"column":6},"end":{"line":158,"column":18}},"74":{"start":{"line":162,"column":2},"end":{"line":162,"column":15}},"75":{"start":{"line":175,"column":0},"end":{"line":201,"column":2}},"76":{"start":{"line":176,"column":2},"end":{"line":200,"column":3}},"77":{"start":{"line":177,"column":4},"end":{"line":177,"column":30}},"78":{"start":{"line":178,"column":4},"end":{"line":178,"column":15}},"79":{"start":{"line":179,"column":4},"end":{"line":195,"column":7}},"80":{"start":{"line":181,"column":8},"end":{"line":184,"column":9}},"81":{"start":{"line":182,"column":10},"end":{"line":182,"column":24}},"82":{"start":{"line":183,"column":10},"end":{"line":183,"column":33}},"83":{"start":{"line":185,"column":8},"end":{"line":185,"column":22}},"84":{"start":{"line":189,"column":8},"end":{"line":189,"column":23}},"85":{"start":{"line":190,"column":8},"end":{"line":190,"column":31}},"86":{"start":{"line":199,"column":4},"end":{"line":199,"column":24}},"87":{"start":{"line":210,"column":0},"end":{"line":225,"column":2}},"88":{"start":{"line":211,"column":2},"end":{"line":211,"column":19}},"89":{"start":{"line":213,"column":2},"end":{"line":222,"column":3}},"90":{"start":{"line":214,"column":4},"end":{"line":214,"column":32}},"91":{"start":{"line":215,"column":4},"end":{"line":221,"column":5}},"92":{"start":{"line":216,"column":6},"end":{"line":216,"column":26}},"93":{"start":{"line":217,"column":6},"end":{"line":219,"column":7}},"94":{"start":{"line":218,"column":8},"end":{"line":218,"column":23}},"95":{"start":{"line":220,"column":6},"end":{"line":220,"column":22}},"96":{"start":{"line":224,"column":2},"end":{"line":224,"column":13}},"97":{"start":{"line":239,"column":0},"end":{"line":241,"column":2}},"98":{"start":{"line":240,"column":2},"end":{"line":240,"column":56}}},"branchMap":{"1":{"line":18,"type":"if","locations":[{"start":{"line":18,"column":2},"end":{"line":18,"column":2}},{"start":{"line":18,"column":2},"end":{"line":18,"column":2}}]},"2":{"line":18,"type":"binary-expr","locations":[{"start":{"line":18,"column":6},"end":{"line":18,"column":23}},{"start":{"line":18,"column":27},"end":{"line":18,"column":44}},{"start":{"line":18,"column":48},"end":{"line":18,"column":66}},{"start":{"line":19,"column":6},"end":{"line":19,"column":16}},{"start":{"line":19,"column":20},"end":{"line":19,"column":35}}]},"3":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":2},"end":{"line":24,"column":2}},{"start":{"line":24,"column":2},"end":{"line":24,"column":2}}]},"4":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":2},"end":{"line":29,"column":2}},{"start":{"line":29,"column":2},"end":{"line":29,"column":2}}]},"5":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":2},"end":{"line":35,"column":2}},{"start":{"line":35,"column":2},"end":{"line":35,"column":2}}]},"6":{"line":36,"type":"if","locations":[{"start":{"line":36,"column":2},"end":{"line":36,"column":2}},{"start":{"line":36,"column":2},"end":{"line":36,"column":2}}]},"7":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":2},"end":{"line":37,"column":2}},{"start":{"line":37,"column":2},"end":{"line":37,"column":2}}]},"8":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":2},"end":{"line":38,"column":2}},{"start":{"line":38,"column":2},"end":{"line":38,"column":2}}]},"9":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":2},"end":{"line":39,"column":2}},{"start":{"line":39,"column":2},"end":{"line":39,"column":2}}]},"10":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":6},"end":{"line":39,"column":7}},{"start":{"line":39,"column":11},"end":{"line":39,"column":33}}]},"11":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":2},"end":{"line":40,"column":2}},{"start":{"line":40,"column":2},"end":{"line":40,"column":2}}]},"12":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":4},"end":{"line":45,"column":4}},{"start":{"line":45,"column":4},"end":{"line":45,"column":4}}]},"13":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":4},"end":{"line":60,"column":4}},{"start":{"line":60,"column":4},"end":{"line":60,"column":4}}]},"14":{"line":75,"type":"if","locations":[{"start":{"line":75,"column":2},"end":{"line":75,"column":2}},{"start":{"line":75,"column":2},"end":{"line":75,"column":2}}]},"15":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":4},"end":{"line":80,"column":4}},{"start":{"line":80,"column":4},"end":{"line":80,"column":4}}]},"16":{"line":81,"type":"if","locations":[{"start":{"line":81,"column":6},"end":{"line":81,"column":6}},{"start":{"line":81,"column":6},"end":{"line":81,"column":6}}]},"17":{"line":81,"type":"binary-expr","locations":[{"start":{"line":81,"column":10},"end":{"line":81,"column":17}},{"start":{"line":81,"column":21},"end":{"line":81,"column":51}}]},"18":{"line":82,"type":"if","locations":[{"start":{"line":82,"column":8},"end":{"line":82,"column":8}},{"start":{"line":82,"column":8},"end":{"line":82,"column":8}}]},"19":{"line":85,"type":"if","locations":[{"start":{"line":85,"column":8},"end":{"line":85,"column":8}},{"start":{"line":85,"column":8},"end":{"line":85,"column":8}}]},"20":{"line":91,"type":"if","locations":[{"start":{"line":91,"column":13},"end":{"line":91,"column":13}},{"start":{"line":91,"column":13},"end":{"line":91,"column":13}}]},"21":{"line":109,"type":"if","locations":[{"start":{"line":109,"column":2},"end":{"line":109,"column":2}},{"start":{"line":109,"column":2},"end":{"line":109,"column":2}}]},"22":{"line":110,"type":"if","locations":[{"start":{"line":110,"column":4},"end":{"line":110,"column":4}},{"start":{"line":110,"column":4},"end":{"line":110,"column":4}}]},"23":{"line":114,"type":"if","locations":[{"start":{"line":114,"column":4},"end":{"line":114,"column":4}},{"start":{"line":114,"column":4},"end":{"line":114,"column":4}}]},"24":{"line":119,"type":"if","locations":[{"start":{"line":119,"column":6},"end":{"line":119,"column":6}},{"start":{"line":119,"column":6},"end":{"line":119,"column":6}}]},"25":{"line":125,"type":"if","locations":[{"start":{"line":125,"column":7},"end":{"line":125,"column":7}},{"start":{"line":125,"column":7},"end":{"line":125,"column":7}}]},"26":{"line":126,"type":"if","locations":[{"start":{"line":126,"column":4},"end":{"line":126,"column":4}},{"start":{"line":126,"column":4},"end":{"line":126,"column":4}}]},"27":{"line":126,"type":"binary-expr","locations":[{"start":{"line":126,"column":8},"end":{"line":126,"column":24}},{"start":{"line":126,"column":28},"end":{"line":126,"column":50}}]},"28":{"line":132,"type":"if","locations":[{"start":{"line":132,"column":6},"end":{"line":132,"column":6}},{"start":{"line":132,"column":6},"end":{"line":132,"column":6}}]},"29":{"line":138,"type":"if","locations":[{"start":{"line":138,"column":6},"end":{"line":138,"column":6}},{"start":{"line":138,"column":6},"end":{"line":138,"column":6}}]},"30":{"line":145,"type":"binary-expr","locations":[{"start":{"line":145,"column":12},"end":{"line":145,"column":33}},{"start":{"line":145,"column":39},"end":{"line":145,"column":45}}]},"31":{"line":156,"type":"if","locations":[{"start":{"line":156,"column":4},"end":{"line":156,"column":4}},{"start":{"line":156,"column":4},"end":{"line":156,"column":4}}]},"32":{"line":176,"type":"if","locations":[{"start":{"line":176,"column":2},"end":{"line":176,"column":2}},{"start":{"line":176,"column":2},"end":{"line":176,"column":2}}]},"33":{"line":181,"type":"if","locations":[{"start":{"line":181,"column":8},"end":{"line":181,"column":8}},{"start":{"line":181,"column":8},"end":{"line":181,"column":8}}]},"34":{"line":213,"type":"if","locations":[{"start":{"line":213,"column":2},"end":{"line":213,"column":2}},{"start":{"line":213,"column":2},"end":{"line":213,"column":2}}]},"35":{"line":217,"type":"if","locations":[{"start":{"line":217,"column":6},"end":{"line":217,"column":6}},{"start":{"line":217,"column":6},"end":{"line":217,"column":6}}]},"36":{"line":240,"type":"binary-expr","locations":[{"start":{"line":240,"column":9},"end":{"line":240,"column":15}},{"start":{"line":240,"column":19},"end":{"line":240,"column":55}}]}},"code":["'use strict';","","/**"," * Clone an object"," *"," *     clone(x)"," *"," * Can clone any primitive type, array, and object."," * If x has a function clone, this function will be invoked to clone the object."," *"," * @param {*} x"," * @return {*} clone"," */","exports.clone = function clone(x) {","  var type = typeof x;","","  // immutable primitive types","  if (type === 'number' || type === 'string' || type === 'boolean' ||","      x === null || x === undefined) {","    return x;","  }","","  // use clone function of the object when available","  if (typeof x.clone === 'function') {","    return x.clone();","  }","","  // array","  if (Array.isArray(x)) {","    return x.map(function (value) {","      return clone(value);","    });","  }","","  if (x instanceof Number)    return new Number(x.valueOf());","  if (x instanceof String)    return new String(x.valueOf());","  if (x instanceof Boolean)   return new Boolean(x.valueOf());","  if (x instanceof Date)      return new Date(x.valueOf());","  if (x && x.isBigNumber === true) return x; // bignumbers are immutable","  if (x instanceof RegExp)  throw new TypeError('Cannot clone ' + x);  // TODO: clone a RegExp","","  // object","  var m = {};","  for (var key in x) {","    if (x.hasOwnProperty(key)) {","      m[key] = clone(x[key]);","    }","  }","  return m;","};","","/**"," * Extend object a with the properties of object b"," * @param {Object} a"," * @param {Object} b"," * @return {Object} a"," */","exports.extend = function(a, b) {","  for (var prop in b) {","    if (b.hasOwnProperty(prop)) {","      a[prop] = b[prop];","    }","  }","  return a;","};","","/**"," * Deep extend an object a with the properties of object b"," * @param {Object} a"," * @param {Object} b"," * @returns {Object}"," */","exports.deepExtend = function deepExtend (a, b) {","  // TODO: add support for Arrays to deepExtend","  if (Array.isArray(b)) {","    throw new TypeError('Arrays are not supported by deepExtend');","  }","","  for (var prop in b) {","    if (b.hasOwnProperty(prop)) {","      if (b[prop] && b[prop].constructor === Object) {","        if (a[prop] === undefined) {","          a[prop] = {};","        }","        if (a[prop].constructor === Object) {","          deepExtend(a[prop], b[prop]);","        }","        else {","          a[prop] = b[prop];","        }","      } else if (Array.isArray(b[prop])) {","        throw new TypeError('Arrays are not supported by deepExtend');","      } else {","        a[prop] = b[prop];","      }","    }","  }","  return a;","};","","/**"," * Deep test equality of all fields in two pairs of arrays or objects."," * @param {Array | Object} a"," * @param {Array | Object} b"," * @returns {boolean}"," */","exports.deepEqual = function deepEqual (a, b) {","  var prop, i, len;","  if (Array.isArray(a)) {","    if (!Array.isArray(b)) {","      return false;","    }","","    if (a.length != b.length) {","      return false;","    }","","    for (i = 0, len = a.length; i < len; i++) {","      if (!exports.deepEqual(a[i], b[i])) {","        return false;","      }","    }","    return true;","  }","  else if (a instanceof Object) {","    if (Array.isArray(b) || !(b instanceof Object)) {","      return false;","    }","","    for (prop in a) {","      //noinspection JSUnfilteredForInLoop","      if (!exports.deepEqual(a[prop], b[prop])) {","        return false;","      }","    }","    for (prop in b) {","      //noinspection JSUnfilteredForInLoop","      if (!exports.deepEqual(a[prop], b[prop])) {","        return false;","      }","    }","    return true;","  }","  else {","    return (typeof a === typeof b) && (a == b);","  }","};","","/**"," * Test whether the current JavaScript engine supports Object.defineProperty"," * @returns {boolean} returns true if supported"," */","exports.canDefineProperty = function () {","  // test needed for broken IE8 implementation","  try {","    if (Object.defineProperty) {","      Object.defineProperty({}, 'x', { get: function () {} });","      return true;","    }","  } catch (e) {}","","  return false;","};","","/**"," * Attach a lazy loading property to a constant."," * The given function `fn` is called once when the property is first requested."," * On older browsers (<IE8), the function will fall back to direct evaluation"," * of the properties value."," * @param {Object} object   Object where to add the property"," * @param {string} prop     Property name"," * @param {Function} fn     Function returning the property value. Called"," *                          without arguments."," */","exports.lazy = function (object, prop, fn) {","  if (exports.canDefineProperty()) {","    var _uninitialized = true;","    var _value;","    Object.defineProperty(object, prop, {","      get: function () {","        if (_uninitialized) {","          _value = fn();","          _uninitialized = false;","        }","        return _value;","      },","","      set: function (value) {","        _value = value;","        _uninitialized = false;","      },","","      configurable: true,","      enumerable: true","    });","  }","  else {","    // fall back to immediate evaluation","    object[prop] = fn();","  }","};","","/**"," * Traverse a path into an object."," * When a namespace is missing, it will be created"," * @param {Object} object"," * @param {string} path   A dot separated string like 'name.space'"," * @return {Object} Returns the object at the end of the path"," */","exports.traverse = function(object, path) {","  var obj = object;","","  if (path) {","    var names = path.split('.');","    for (var i = 0; i < names.length; i++) {","      var name = names[i];","      if (!(name in obj)) {","        obj[name] = {};","      }","      obj = obj[name];","    }","  }","","  return obj;","};","","/**"," * Test whether an object is a factory. a factory has fields:"," *"," * - factory: function (type: Object, config: Object, load: function, typed: function [, math: Object])   (required)"," * - name: string (optional)"," * - path: string    A dot separated path (optional)"," * - math: boolean   If true (false by default), the math namespace is passed"," *                   as fifth argument of the factory function"," *"," * @param {*} object"," * @returns {boolean}"," */","exports.isFactory = function (object) {","  return object && typeof object.factory === 'function';","};",""],"l":{"14":1,"15":0,"18":0,"20":0,"24":0,"25":0,"29":0,"30":0,"31":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"43":0,"44":0,"45":0,"46":0,"49":0,"58":1,"59":0,"60":0,"61":0,"64":0,"73":1,"75":0,"76":0,"79":0,"80":0,"81":0,"82":0,"83":0,"85":0,"86":0,"89":0,"91":0,"92":0,"94":0,"98":0,"107":1,"108":0,"109":0,"110":0,"111":0,"114":0,"115":0,"118":0,"119":0,"120":0,"123":0,"125":0,"126":0,"127":0,"130":0,"132":0,"133":0,"136":0,"138":0,"139":0,"142":0,"145":0,"153":1,"155":627,"156":627,"157":627,"158":627,"162":0,"175":1,"176":627,"177":627,"178":627,"179":627,"181":6,"182":4,"183":4,"185":6,"189":0,"190":0,"199":0,"210":1,"211":48,"213":48,"214":48,"215":48,"216":74,"217":74,"218":3,"220":74,"224":48,"239":1,"240":267}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/core/typed.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/core/typed.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":1,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0]},"f":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0},"fnMap":{"1":{"name":"(anonymous_1)","line":5,"loc":{"start":{"line":5,"column":18},"end":{"line":5,"column":30}}},"2":{"name":"create","line":17,"loc":{"start":{"line":17,"column":17},"end":{"line":17,"column":39}}},"3":{"name":"(anonymous_3)","line":27,"loc":{"start":{"line":27,"column":37},"end":{"line":27,"column":50}}},"4":{"name":"(anonymous_4)","line":28,"loc":{"start":{"line":28,"column":37},"end":{"line":28,"column":50}}},"5":{"name":"(anonymous_5)","line":29,"loc":{"start":{"line":29,"column":37},"end":{"line":29,"column":50}}},"6":{"name":"(anonymous_6)","line":30,"loc":{"start":{"line":30,"column":37},"end":{"line":30,"column":50}}},"7":{"name":"(anonymous_7)","line":31,"loc":{"start":{"line":31,"column":37},"end":{"line":31,"column":50}}},"8":{"name":"(anonymous_8)","line":32,"loc":{"start":{"line":32,"column":37},"end":{"line":32,"column":50}}},"9":{"name":"(anonymous_9)","line":34,"loc":{"start":{"line":34,"column":37},"end":{"line":34,"column":50}}},"10":{"name":"(anonymous_10)","line":35,"loc":{"start":{"line":35,"column":37},"end":{"line":35,"column":50}}},"11":{"name":"(anonymous_11)","line":36,"loc":{"start":{"line":36,"column":37},"end":{"line":36,"column":50}}},"12":{"name":"(anonymous_12)","line":37,"loc":{"start":{"line":37,"column":37},"end":{"line":37,"column":50}}},"13":{"name":"(anonymous_13)","line":38,"loc":{"start":{"line":38,"column":37},"end":{"line":38,"column":50}}},"14":{"name":"(anonymous_14)","line":39,"loc":{"start":{"line":39,"column":37},"end":{"line":39,"column":50}}},"15":{"name":"(anonymous_15)","line":40,"loc":{"start":{"line":40,"column":37},"end":{"line":40,"column":50}}},"16":{"name":"(anonymous_16)","line":41,"loc":{"start":{"line":41,"column":37},"end":{"line":41,"column":50}}},"17":{"name":"(anonymous_17)","line":42,"loc":{"start":{"line":42,"column":37},"end":{"line":42,"column":50}}},"18":{"name":"(anonymous_18)","line":43,"loc":{"start":{"line":43,"column":37},"end":{"line":43,"column":50}}},"19":{"name":"(anonymous_19)","line":44,"loc":{"start":{"line":44,"column":37},"end":{"line":44,"column":50}}},"20":{"name":"(anonymous_20)","line":45,"loc":{"start":{"line":45,"column":37},"end":{"line":45,"column":50}}},"21":{"name":"(anonymous_21)","line":46,"loc":{"start":{"line":46,"column":37},"end":{"line":46,"column":50}}},"22":{"name":"(anonymous_22)","line":47,"loc":{"start":{"line":47,"column":37},"end":{"line":47,"column":50}}},"23":{"name":"(anonymous_23)","line":49,"loc":{"start":{"line":49,"column":37},"end":{"line":49,"column":50}}},"24":{"name":"(anonymous_24)","line":50,"loc":{"start":{"line":50,"column":37},"end":{"line":50,"column":50}}},"25":{"name":"(anonymous_25)","line":51,"loc":{"start":{"line":51,"column":37},"end":{"line":51,"column":50}}},"26":{"name":"(anonymous_26)","line":52,"loc":{"start":{"line":52,"column":37},"end":{"line":52,"column":50}}},"27":{"name":"(anonymous_27)","line":53,"loc":{"start":{"line":53,"column":37},"end":{"line":53,"column":50}}},"28":{"name":"(anonymous_28)","line":54,"loc":{"start":{"line":54,"column":47},"end":{"line":54,"column":60}}},"29":{"name":"(anonymous_29)","line":55,"loc":{"start":{"line":55,"column":47},"end":{"line":55,"column":60}}},"30":{"name":"(anonymous_30)","line":56,"loc":{"start":{"line":56,"column":47},"end":{"line":56,"column":60}}},"31":{"name":"(anonymous_31)","line":57,"loc":{"start":{"line":57,"column":47},"end":{"line":57,"column":60}}},"32":{"name":"(anonymous_32)","line":58,"loc":{"start":{"line":58,"column":47},"end":{"line":58,"column":60}}},"33":{"name":"(anonymous_33)","line":59,"loc":{"start":{"line":59,"column":47},"end":{"line":59,"column":60}}},"34":{"name":"(anonymous_34)","line":60,"loc":{"start":{"line":60,"column":47},"end":{"line":60,"column":60}}},"35":{"name":"(anonymous_35)","line":61,"loc":{"start":{"line":61,"column":47},"end":{"line":61,"column":60}}},"36":{"name":"(anonymous_36)","line":62,"loc":{"start":{"line":62,"column":47},"end":{"line":62,"column":60}}},"37":{"name":"(anonymous_37)","line":70,"loc":{"start":{"line":70,"column":15},"end":{"line":70,"column":28}}},"38":{"name":"(anonymous_38)","line":82,"loc":{"start":{"line":82,"column":15},"end":{"line":82,"column":28}}},"39":{"name":"(anonymous_39)","line":88,"loc":{"start":{"line":88,"column":15},"end":{"line":88,"column":28}}},"40":{"name":"(anonymous_40)","line":94,"loc":{"start":{"line":94,"column":15},"end":{"line":94,"column":28}}},"41":{"name":"(anonymous_41)","line":100,"loc":{"start":{"line":100,"column":15},"end":{"line":100,"column":28}}},"42":{"name":"(anonymous_42)","line":107,"loc":{"start":{"line":107,"column":15},"end":{"line":107,"column":28}}},"43":{"name":"(anonymous_43)","line":113,"loc":{"start":{"line":113,"column":15},"end":{"line":113,"column":28}}},"44":{"name":"(anonymous_44)","line":131,"loc":{"start":{"line":131,"column":15},"end":{"line":131,"column":28}}},"45":{"name":"(anonymous_45)","line":141,"loc":{"start":{"line":141,"column":15},"end":{"line":141,"column":28}}},"46":{"name":"(anonymous_46)","line":152,"loc":{"start":{"line":152,"column":15},"end":{"line":152,"column":28}}},"47":{"name":"(anonymous_47)","line":163,"loc":{"start":{"line":163,"column":15},"end":{"line":163,"column":28}}},"48":{"name":"(anonymous_48)","line":174,"loc":{"start":{"line":174,"column":15},"end":{"line":174,"column":28}}},"49":{"name":"(anonymous_49)","line":180,"loc":{"start":{"line":180,"column":15},"end":{"line":180,"column":28}}},"50":{"name":"(anonymous_50)","line":186,"loc":{"start":{"line":186,"column":15},"end":{"line":186,"column":28}}},"51":{"name":"(anonymous_51)","line":192,"loc":{"start":{"line":192,"column":15},"end":{"line":192,"column":28}}},"52":{"name":"(anonymous_52)","line":198,"loc":{"start":{"line":198,"column":15},"end":{"line":198,"column":27}}},"53":{"name":"(anonymous_53)","line":204,"loc":{"start":{"line":204,"column":15},"end":{"line":204,"column":27}}},"54":{"name":"(anonymous_54)","line":210,"loc":{"start":{"line":210,"column":15},"end":{"line":210,"column":27}}},"55":{"name":"(anonymous_55)","line":216,"loc":{"start":{"line":216,"column":15},"end":{"line":216,"column":27}}},"56":{"name":"(anonymous_56)","line":222,"loc":{"start":{"line":222,"column":15},"end":{"line":222,"column":32}}},"57":{"name":"(anonymous_57)","line":229,"loc":{"start":{"line":229,"column":15},"end":{"line":229,"column":33}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":46}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":49}},"3":{"start":{"line":5,"column":0},"end":{"line":10,"column":2}},"4":{"start":{"line":8,"column":2},"end":{"line":8,"column":37}},"5":{"start":{"line":9,"column":2},"end":{"line":9,"column":23}},"6":{"start":{"line":17,"column":0},"end":{"line":236,"column":2}},"7":{"start":{"line":21,"column":2},"end":{"line":21,"column":28}},"8":{"start":{"line":26,"column":2},"end":{"line":63,"column":4}},"9":{"start":{"line":27,"column":52},"end":{"line":27,"column":81}},"10":{"start":{"line":28,"column":52},"end":{"line":28,"column":76}},"11":{"start":{"line":29,"column":52},"end":{"line":29,"column":78}},"12":{"start":{"line":30,"column":52},"end":{"line":30,"column":77}},"13":{"start":{"line":31,"column":52},"end":{"line":31,"column":73}},"14":{"start":{"line":32,"column":52},"end":{"line":32,"column":81}},"15":{"start":{"line":34,"column":52},"end":{"line":34,"column":75}},"16":{"start":{"line":35,"column":52},"end":{"line":35,"column":80}},"17":{"start":{"line":36,"column":52},"end":{"line":36,"column":81}},"18":{"start":{"line":37,"column":52},"end":{"line":37,"column":74}},"19":{"start":{"line":38,"column":52},"end":{"line":38,"column":74}},"20":{"start":{"line":39,"column":52},"end":{"line":39,"column":82}},"21":{"start":{"line":40,"column":52},"end":{"line":40,"column":78}},"22":{"start":{"line":41,"column":52},"end":{"line":41,"column":73}},"23":{"start":{"line":42,"column":52},"end":{"line":42,"column":82}},"24":{"start":{"line":43,"column":52},"end":{"line":43,"column":77}},"25":{"start":{"line":44,"column":52},"end":{"line":44,"column":79}},"26":{"start":{"line":45,"column":52},"end":{"line":45,"column":81}},"27":{"start":{"line":46,"column":52},"end":{"line":46,"column":70}},"28":{"start":{"line":47,"column":52},"end":{"line":47,"column":75}},"29":{"start":{"line":49,"column":52},"end":{"line":49,"column":81}},"30":{"start":{"line":50,"column":52},"end":{"line":50,"column":81}},"31":{"start":{"line":51,"column":52},"end":{"line":51,"column":79}},"32":{"start":{"line":52,"column":52},"end":{"line":52,"column":84}},"33":{"start":{"line":53,"column":52},"end":{"line":53,"column":81}},"34":{"start":{"line":54,"column":62},"end":{"line":54,"column":101}},"35":{"start":{"line":55,"column":62},"end":{"line":55,"column":88}},"36":{"start":{"line":56,"column":62},"end":{"line":56,"column":93}},"37":{"start":{"line":57,"column":62},"end":{"line":57,"column":88}},"38":{"start":{"line":58,"column":62},"end":{"line":58,"column":94}},"39":{"start":{"line":59,"column":62},"end":{"line":59,"column":88}},"40":{"start":{"line":60,"column":62},"end":{"line":60,"column":88}},"41":{"start":{"line":61,"column":62},"end":{"line":61,"column":89}},"42":{"start":{"line":62,"column":62},"end":{"line":62,"column":83}},"43":{"start":{"line":66,"column":2},"end":{"line":233,"column":4}},"44":{"start":{"line":72,"column":8},"end":{"line":76,"column":9}},"45":{"start":{"line":73,"column":10},"end":{"line":75,"column":64}},"46":{"start":{"line":77,"column":8},"end":{"line":77,"column":37}},"47":{"start":{"line":83,"column":8},"end":{"line":83,"column":38}},"48":{"start":{"line":89,"column":8},"end":{"line":89,"column":22}},"49":{"start":{"line":95,"column":8},"end":{"line":95,"column":49}},"50":{"start":{"line":101,"column":8},"end":{"line":102,"column":104}},"51":{"start":{"line":108,"column":8},"end":{"line":108,"column":48}},"52":{"start":{"line":114,"column":8},"end":{"line":118,"column":9}},"53":{"start":{"line":115,"column":10},"end":{"line":117,"column":66}},"54":{"start":{"line":119,"column":8},"end":{"line":119,"column":36}},"55":{"start":{"line":132,"column":8},"end":{"line":132,"column":26}},"56":{"start":{"line":133,"column":8},"end":{"line":135,"column":9}},"57":{"start":{"line":134,"column":10},"end":{"line":134,"column":68}},"58":{"start":{"line":136,"column":8},"end":{"line":136,"column":17}},"59":{"start":{"line":142,"column":8},"end":{"line":147,"column":9}},"60":{"start":{"line":143,"column":10},"end":{"line":143,"column":39}},"61":{"start":{"line":146,"column":10},"end":{"line":146,"column":69}},"62":{"start":{"line":153,"column":8},"end":{"line":158,"column":9}},"63":{"start":{"line":154,"column":10},"end":{"line":154,"column":38}},"64":{"start":{"line":157,"column":10},"end":{"line":157,"column":68}},"65":{"start":{"line":164,"column":8},"end":{"line":169,"column":9}},"66":{"start":{"line":165,"column":10},"end":{"line":165,"column":37}},"67":{"start":{"line":168,"column":10},"end":{"line":168,"column":67}},"68":{"start":{"line":175,"column":8},"end":{"line":175,"column":18}},"69":{"start":{"line":181,"column":8},"end":{"line":181,"column":38}},"70":{"start":{"line":187,"column":8},"end":{"line":187,"column":37}},"71":{"start":{"line":193,"column":8},"end":{"line":193,"column":18}},"72":{"start":{"line":199,"column":8},"end":{"line":199,"column":17}},"73":{"start":{"line":205,"column":8},"end":{"line":205,"column":22}},"74":{"start":{"line":211,"column":8},"end":{"line":211,"column":37}},"75":{"start":{"line":217,"column":8},"end":{"line":217,"column":36}},"76":{"start":{"line":224,"column":8},"end":{"line":224,"column":43}},"77":{"start":{"line":230,"column":8},"end":{"line":230,"column":32}},"78":{"start":{"line":235,"column":2},"end":{"line":235,"column":15}}},"branchMap":{"1":{"line":28,"type":"binary-expr","locations":[{"start":{"line":28,"column":59},"end":{"line":28,"column":60}},{"start":{"line":28,"column":64},"end":{"line":28,"column":75}}]},"2":{"line":29,"type":"binary-expr","locations":[{"start":{"line":29,"column":59},"end":{"line":29,"column":60}},{"start":{"line":29,"column":64},"end":{"line":29,"column":77}}]},"3":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":59},"end":{"line":30,"column":60}},{"start":{"line":30,"column":64},"end":{"line":30,"column":76}}]},"4":{"line":31,"type":"binary-expr","locations":[{"start":{"line":31,"column":59},"end":{"line":31,"column":60}},{"start":{"line":31,"column":64},"end":{"line":31,"column":72}}]},"5":{"line":34,"type":"binary-expr","locations":[{"start":{"line":34,"column":59},"end":{"line":34,"column":60}},{"start":{"line":34,"column":64},"end":{"line":34,"column":74}}]},"6":{"line":35,"type":"binary-expr","locations":[{"start":{"line":35,"column":59},"end":{"line":35,"column":60}},{"start":{"line":35,"column":64},"end":{"line":35,"column":79}}]},"7":{"line":36,"type":"binary-expr","locations":[{"start":{"line":36,"column":59},"end":{"line":36,"column":60}},{"start":{"line":36,"column":64},"end":{"line":36,"column":80}}]},"8":{"line":37,"type":"binary-expr","locations":[{"start":{"line":37,"column":59},"end":{"line":37,"column":60}},{"start":{"line":37,"column":64},"end":{"line":37,"column":73}}]},"9":{"line":38,"type":"binary-expr","locations":[{"start":{"line":38,"column":59},"end":{"line":38,"column":60}},{"start":{"line":38,"column":64},"end":{"line":38,"column":73}}]},"10":{"line":40,"type":"binary-expr","locations":[{"start":{"line":40,"column":59},"end":{"line":40,"column":60}},{"start":{"line":40,"column":64},"end":{"line":40,"column":77}}]},"11":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":59},"end":{"line":41,"column":60}},{"start":{"line":41,"column":64},"end":{"line":41,"column":72}}]},"12":{"line":49,"type":"binary-expr","locations":[{"start":{"line":49,"column":59},"end":{"line":49,"column":60}},{"start":{"line":49,"column":64},"end":{"line":49,"column":80}}]},"13":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":59},"end":{"line":50,"column":60}},{"start":{"line":50,"column":64},"end":{"line":50,"column":80}}]},"14":{"line":51,"type":"binary-expr","locations":[{"start":{"line":51,"column":59},"end":{"line":51,"column":60}},{"start":{"line":51,"column":64},"end":{"line":51,"column":78}}]},"15":{"line":52,"type":"binary-expr","locations":[{"start":{"line":52,"column":59},"end":{"line":52,"column":60}},{"start":{"line":52,"column":64},"end":{"line":52,"column":83}}]},"16":{"line":53,"type":"binary-expr","locations":[{"start":{"line":53,"column":59},"end":{"line":53,"column":60}},{"start":{"line":53,"column":64},"end":{"line":53,"column":80}}]},"17":{"line":54,"type":"binary-expr","locations":[{"start":{"line":54,"column":69},"end":{"line":54,"column":70}},{"start":{"line":54,"column":74},"end":{"line":54,"column":100}}]},"18":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":69},"end":{"line":55,"column":70}},{"start":{"line":55,"column":74},"end":{"line":55,"column":87}}]},"19":{"line":56,"type":"binary-expr","locations":[{"start":{"line":56,"column":69},"end":{"line":56,"column":70}},{"start":{"line":56,"column":74},"end":{"line":56,"column":92}}]},"20":{"line":57,"type":"binary-expr","locations":[{"start":{"line":57,"column":69},"end":{"line":57,"column":70}},{"start":{"line":57,"column":74},"end":{"line":57,"column":87}}]},"21":{"line":58,"type":"binary-expr","locations":[{"start":{"line":58,"column":69},"end":{"line":58,"column":70}},{"start":{"line":58,"column":74},"end":{"line":58,"column":93}}]},"22":{"line":59,"type":"binary-expr","locations":[{"start":{"line":59,"column":69},"end":{"line":59,"column":70}},{"start":{"line":59,"column":74},"end":{"line":59,"column":87}}]},"23":{"line":60,"type":"binary-expr","locations":[{"start":{"line":60,"column":69},"end":{"line":60,"column":70}},{"start":{"line":60,"column":74},"end":{"line":60,"column":87}}]},"24":{"line":61,"type":"binary-expr","locations":[{"start":{"line":61,"column":69},"end":{"line":61,"column":70}},{"start":{"line":61,"column":74},"end":{"line":61,"column":88}}]},"25":{"line":62,"type":"binary-expr","locations":[{"start":{"line":62,"column":69},"end":{"line":62,"column":70}},{"start":{"line":62,"column":74},"end":{"line":62,"column":82}}]},"26":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":8},"end":{"line":72,"column":8}},{"start":{"line":72,"column":8},"end":{"line":72,"column":8}}]},"27":{"line":114,"type":"if","locations":[{"start":{"line":114,"column":8},"end":{"line":114,"column":8}},{"start":{"line":114,"column":8},"end":{"line":114,"column":8}}]},"28":{"line":133,"type":"if","locations":[{"start":{"line":133,"column":8},"end":{"line":133,"column":8}},{"start":{"line":133,"column":8},"end":{"line":133,"column":8}}]}},"code":["var typedFunction = require('typed-function');","var digits = require('./../utils/number').digits;","","// returns a new instance of typed-function","var createTyped = function () {","  // initially, return the original instance of typed-function","  // consecutively, return a new instance from typed.create.","  createTyped = typedFunction.create;","  return typedFunction;","};","","/**"," * Factory function for creating a new typed instance"," * @param {Object} type   Object with data types like Complex and BigNumber"," * @returns {Function}"," */","exports.create = function create(type) {","  // TODO: typed-function must be able to silently ignore signatures with unknown data types","","  // get a new instance of typed-function","  var typed = createTyped();","","  // define all types. The order of the types determines in which order function","  // arguments are type-checked (so for performance it's important to put the","  // most used types first).","  typed.types = [","    { name: 'number',          test: function (x) { return typeof x === 'number' } },","    { name: 'Complex',         test: function (x) { return x && x.isComplex } },","    { name: 'BigNumber',       test: function (x) { return x && x.isBigNumber } },","    { name: 'Fraction',        test: function (x) { return x && x.isFraction } },","    { name: 'Unit',            test: function (x) { return x && x.isUnit } },","    { name: 'string',          test: function (x) { return typeof x === 'string' } },","    { name: 'Array',           test: Array.isArray },","    { name: 'Matrix',          test: function (x) { return x && x.isMatrix } },","    { name: 'DenseMatrix',     test: function (x) { return x && x.isDenseMatrix } },","    { name: 'SparseMatrix',    test: function (x) { return x && x.isSparseMatrix } },","    { name: 'Range',           test: function (x) { return x && x.isRange } },","    { name: 'Index',           test: function (x) { return x && x.isIndex } },","    { name: 'boolean',         test: function (x) { return typeof x === 'boolean' } },","    { name: 'ResultSet',       test: function (x) { return x && x.isResultSet } },","    { name: 'Help',            test: function (x) { return x && x.isHelp } },","    { name: 'function',        test: function (x) { return typeof x === 'function'} },","    { name: 'Date',            test: function (x) { return x instanceof Date } },","    { name: 'RegExp',          test: function (x) { return x instanceof RegExp } },","    { name: 'Object',          test: function (x) { return typeof x === 'object' } },","    { name: 'null',            test: function (x) { return x === null } },","    { name: 'undefined',       test: function (x) { return x === undefined } },","    ","    { name: 'OperatorNode',    test: function (x) { return x && x.isOperatorNode } },","    { name: 'ConstantNode',    test: function (x) { return x && x.isConstantNode } },","    { name: 'SymbolNode',      test: function (x) { return x && x.isSymbolNode } },","    { name: 'ParenthesisNode', test: function (x) { return x && x.isParenthesisNode } },","    { name: 'FunctionNode',    test: function (x) { return x && x.isFunctionNode } },","    { name: 'FunctionAssignmentNode',    test: function (x) { return x && x.isFunctionAssignmentNode } },","    { name: 'ArrayNode',                 test: function (x) { return x && x.isArrayNode } },","    { name: 'AssignmentNode',            test: function (x) { return x && x.isAssignmentNode } },","    { name: 'BlockNode',                 test: function (x) { return x && x.isBlockNode } },","    { name: 'ConditionalNode',           test: function (x) { return x && x.isConditionalNode } },","    { name: 'IndexNode',                 test: function (x) { return x && x.isIndexNode } },","    { name: 'RangeNode',                 test: function (x) { return x && x.isRangeNode } },","    { name: 'UpdateNode',                test: function (x) { return x && x.isUpdateNode } },","    { name: 'Node',                      test: function (x) { return x && x.isNode } }","  ];","","  // TODO: add conversion from BigNumber to number?","  typed.conversions = [","    {","      from: 'number',","      to: 'BigNumber',","      convert: function (x) {","        // note: conversion from number to BigNumber can fail if x has >15 digits","        if (digits(x) > 15) {","          throw new TypeError('Cannot implicitly convert a number with >15 significant digits to BigNumber ' +","          '(value: ' + x + '). ' +","          'Use function bignumber(x) to convert to BigNumber.');","        }","        return new type.BigNumber(x);","      }","    }, {","      from: 'number',","      to: 'Complex',","      convert: function (x) {","        return new type.Complex(x, 0);","      }","    }, {","      from: 'number',","      to: 'string',","      convert: function (x) {","        return x + '';","      }","    }, {","      from: 'BigNumber',","      to: 'Complex',","      convert: function (x) {","        return new type.Complex(x.toNumber(), 0);","      }","    }, {","      from: 'Fraction',","      to: 'BigNumber',","      convert: function (x) {","        throw new TypeError('Cannot implicitly convert a Fraction to BigNumber or vice versa. ' +","            'Use function bignumber(x) to convert to BigNumber or fraction(x) to convert to Fraction.');","      }","    }, {","      from: 'Fraction',","      to: 'Complex',","      convert: function (x) {","        return new type.Complex(x.valueOf(), 0);","      }","    }, {","      from: 'number',","      to: 'Fraction',","      convert: function (x) {","        if (digits(x) > 15) {","          throw new TypeError('Cannot implicitly convert a number with >15 significant digits to Fraction ' +","              '(value: ' + x + '). ' +","              'Use function fraction(x) to convert to Fraction.');","        }","        return new type.Fraction(x);","      }","    }, {","    // FIXME: add conversion from Fraction to number, for example for `sqrt(fraction(1,3))`","    //  from: 'Fraction',","    //  to: 'number',","    //  convert: function (x) {","    //    return x.valueOf();","    //  }","    //}, {","      from: 'string',","      to: 'number',","      convert: function (x) {","        var n = Number(x);","        if (isNaN(n)) {","          throw new Error('Cannot convert \"' + x + '\" to a number');","        }","        return n;","      }","    }, {","      from: 'string',","      to: 'BigNumber',","      convert: function (x) {","        try {","          return new type.BigNumber(x);","        }","        catch (err) {","          throw new Error('Cannot convert \"' + x + '\" to BigNumber');","        }","      }","    }, {","      from: 'string',","      to: 'Fraction',","      convert: function (x) {","        try {","          return new type.Fraction(x);","        }","        catch (err) {","          throw new Error('Cannot convert \"' + x + '\" to Fraction');","        }","      }","    }, {","      from: 'string',","      to: 'Complex',","      convert: function (x) {","        try {","          return new type.Complex(x);","        }","        catch (err) {","          throw new Error('Cannot convert \"' + x + '\" to Complex');","        }","      }","    }, {","      from: 'boolean',","      to: 'number',","      convert: function (x) {","        return +x;","      }","    }, {","      from: 'boolean',","      to: 'BigNumber',","      convert: function (x) {","        return new type.BigNumber(+x);","      }","    }, {","      from: 'boolean',","      to: 'Fraction',","      convert: function (x) {","        return new type.Fraction(+x);","      }","    }, {","      from: 'boolean',","      to: 'string',","      convert: function (x) {","        return +x;","      }","    }, {","      from: 'null',","      to: 'number',","      convert: function () {","        return 0;","      }","    }, {","      from: 'null',","      to: 'string',","      convert: function () {","        return 'null';","      }","    }, {","      from: 'null',","      to: 'BigNumber',","      convert: function () {","        return new type.BigNumber(0);","      }","    }, {","      from: 'null',","      to: 'Fraction',","      convert: function () {","        return new type.Fraction(0);","      }","    }, {","      from: 'Array',","      to: 'Matrix',","      convert: function (array) {","        // TODO: how to decide on the right type of matrix to create?","        return new type.DenseMatrix(array);","      }","    }, {","      from: 'Matrix',","      to: 'Array',","      convert: function (matrix) {","        return matrix.valueOf();","      }","    }","  ];","","  return typed;","};",""],"l":{"1":1,"2":1,"5":1,"8":1,"9":1,"17":1,"21":1,"26":1,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"66":1,"72":0,"73":0,"77":0,"83":0,"89":0,"95":0,"101":0,"108":0,"114":0,"115":0,"119":0,"132":0,"133":0,"134":0,"136":0,"142":0,"143":0,"146":0,"153":0,"154":0,"157":0,"164":0,"165":0,"168":0,"175":0,"181":0,"187":0,"193":0,"199":0,"205":0,"211":0,"217":0,"224":0,"230":0,"235":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/utils/number.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/utils/number.js","s":{"1":1,"2":0,"3":1,"4":0,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":1,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":1,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":1,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":1,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":1,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":1,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":1,"142":0,"143":0,"144":0,"145":0,"146":1,"147":0,"148":1,"149":1,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0},"b":{"1":[0,0],"2":[1,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0,0,0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[1,0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":19},"end":{"line":12,"column":35}}},"2":{"name":"(anonymous_2)","line":21,"loc":{"start":{"line":21,"column":20},"end":{"line":21,"column":36}}},"3":{"name":"(anonymous_3)","line":33,"loc":{"start":{"line":33,"column":28},"end":{"line":33,"column":40}}},"4":{"name":"(anonymous_4)","line":112,"loc":{"start":{"line":112,"column":17},"end":{"line":112,"column":42}}},"5":{"name":"(anonymous_5)","line":164,"loc":{"start":{"line":164,"column":42},"end":{"line":164,"column":54}}},"6":{"name":"(anonymous_6)","line":182,"loc":{"start":{"line":182,"column":22},"end":{"line":182,"column":39}}},"7":{"name":"(anonymous_7)","line":198,"loc":{"start":{"line":198,"column":22},"end":{"line":198,"column":39}}},"8":{"name":"(anonymous_8)","line":205,"loc":{"start":{"line":205,"column":11},"end":{"line":205,"column":24}}},"9":{"name":"(anonymous_9)","line":228,"loc":{"start":{"line":228,"column":24},"end":{"line":228,"column":52}}},"10":{"name":"(anonymous_10)","line":272,"loc":{"start":{"line":272,"column":18},"end":{"line":272,"column":46}}},"11":{"name":"(anonymous_11)","line":309,"loc":{"start":{"line":309,"column":24},"end":{"line":309,"column":52}}},"12":{"name":"(anonymous_12)","line":341,"loc":{"start":{"line":341,"column":22},"end":{"line":341,"column":59}}},"13":{"name":"(anonymous_13)","line":391,"loc":{"start":{"line":391,"column":22},"end":{"line":391,"column":50}}},"14":{"name":"zeros","line":434,"loc":{"start":{"line":434,"column":0},"end":{"line":434,"column":23}}},"15":{"name":"(anonymous_15)","line":453,"loc":{"start":{"line":453,"column":17},"end":{"line":453,"column":33}}},"16":{"name":"(anonymous_16)","line":475,"loc":{"start":{"line":475,"column":22},"end":{"line":475,"column":46}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":14,"column":2}},"2":{"start":{"line":13,"column":2},"end":{"line":13,"column":35}},"3":{"start":{"line":21,"column":0},"end":{"line":26,"column":2}},"4":{"start":{"line":22,"column":2},"end":{"line":24,"column":14}},"5":{"start":{"line":33,"column":0},"end":{"line":43,"column":2}},"6":{"start":{"line":34,"column":2},"end":{"line":42,"column":3}},"7":{"start":{"line":35,"column":4},"end":{"line":35,"column":13}},"8":{"start":{"line":37,"column":7},"end":{"line":42,"column":3}},"9":{"start":{"line":38,"column":4},"end":{"line":38,"column":14}},"10":{"start":{"line":41,"column":4},"end":{"line":41,"column":13}},"11":{"start":{"line":112,"column":0},"end":{"line":174,"column":2}},"12":{"start":{"line":113,"column":2},"end":{"line":116,"column":3}},"13":{"start":{"line":115,"column":4},"end":{"line":115,"column":26}},"14":{"start":{"line":119,"column":2},"end":{"line":127,"column":3}},"15":{"start":{"line":120,"column":4},"end":{"line":120,"column":22}},"16":{"start":{"line":122,"column":7},"end":{"line":127,"column":3}},"17":{"start":{"line":123,"column":4},"end":{"line":123,"column":23}},"18":{"start":{"line":125,"column":7},"end":{"line":127,"column":3}},"19":{"start":{"line":126,"column":4},"end":{"line":126,"column":17}},"20":{"start":{"line":130,"column":2},"end":{"line":130,"column":24}},"21":{"start":{"line":131,"column":2},"end":{"line":131,"column":28}},"22":{"start":{"line":133,"column":2},"end":{"line":146,"column":3}},"23":{"start":{"line":135,"column":4},"end":{"line":137,"column":5}},"24":{"start":{"line":136,"column":6},"end":{"line":136,"column":34}},"25":{"start":{"line":140,"column":4},"end":{"line":145,"column":5}},"26":{"start":{"line":141,"column":6},"end":{"line":141,"column":26}},"27":{"start":{"line":143,"column":9},"end":{"line":145,"column":5}},"28":{"start":{"line":144,"column":6},"end":{"line":144,"column":36}},"29":{"start":{"line":149,"column":2},"end":{"line":173,"column":3}},"30":{"start":{"line":151,"column":6},"end":{"line":151,"column":47}},"31":{"start":{"line":154,"column":6},"end":{"line":154,"column":53}},"32":{"start":{"line":157,"column":6},"end":{"line":157,"column":53}},"33":{"start":{"line":160,"column":6},"end":{"line":168,"column":13}},"34":{"start":{"line":165,"column":12},"end":{"line":165,"column":38}},"35":{"start":{"line":166,"column":12},"end":{"line":166,"column":33}},"36":{"start":{"line":167,"column":12},"end":{"line":167,"column":53}},"37":{"start":{"line":171,"column":6},"end":{"line":172,"column":55}},"38":{"start":{"line":182,"column":0},"end":{"line":219,"column":2}},"39":{"start":{"line":184,"column":2},"end":{"line":184,"column":86}},"40":{"start":{"line":185,"column":2},"end":{"line":187,"column":3}},"41":{"start":{"line":186,"column":4},"end":{"line":186,"column":53}},"42":{"start":{"line":189,"column":2},"end":{"line":189,"column":30}},"43":{"start":{"line":190,"column":2},"end":{"line":190,"column":30}},"44":{"start":{"line":191,"column":2},"end":{"line":191,"column":49}},"45":{"start":{"line":193,"column":2},"end":{"line":193,"column":32}},"46":{"start":{"line":194,"column":2},"end":{"line":194,"column":61}},"47":{"start":{"line":196,"column":2},"end":{"line":207,"column":9}},"48":{"start":{"line":200,"column":8},"end":{"line":200,"column":33}},"49":{"start":{"line":201,"column":8},"end":{"line":201,"column":18}},"50":{"start":{"line":206,"column":8},"end":{"line":206,"column":27}},"51":{"start":{"line":209,"column":2},"end":{"line":212,"column":3}},"52":{"start":{"line":210,"column":4},"end":{"line":210,"column":25}},"53":{"start":{"line":211,"column":4},"end":{"line":211,"column":15}},"54":{"start":{"line":214,"column":2},"end":{"line":218,"column":4}},"55":{"start":{"line":228,"column":0},"end":{"line":264,"column":2}},"56":{"start":{"line":229,"column":2},"end":{"line":231,"column":3}},"57":{"start":{"line":230,"column":4},"end":{"line":230,"column":25}},"58":{"start":{"line":233,"column":2},"end":{"line":233,"column":75}},"59":{"start":{"line":235,"column":2},"end":{"line":235,"column":27}},"60":{"start":{"line":236,"column":2},"end":{"line":236,"column":31}},"61":{"start":{"line":239,"column":2},"end":{"line":239,"column":75}},"62":{"start":{"line":242,"column":2},"end":{"line":242,"column":55}},"63":{"start":{"line":245,"column":2},"end":{"line":245,"column":94}},"64":{"start":{"line":245,"column":39},"end":{"line":245,"column":94}},"65":{"start":{"line":248,"column":2},"end":{"line":248,"column":37}},"66":{"start":{"line":250,"column":2},"end":{"line":250,"column":21}},"67":{"start":{"line":253,"column":2},"end":{"line":253,"column":38}},"68":{"start":{"line":253,"column":25},"end":{"line":253,"column":38}},"69":{"start":{"line":257,"column":2},"end":{"line":257,"column":46}},"70":{"start":{"line":258,"column":2},"end":{"line":258,"column":67}},"71":{"start":{"line":260,"column":2},"end":{"line":262,"column":52}},"72":{"start":{"line":263,"column":2},"end":{"line":263,"column":28}},"73":{"start":{"line":272,"column":0},"end":{"line":300,"column":2}},"74":{"start":{"line":273,"column":2},"end":{"line":275,"column":3}},"75":{"start":{"line":274,"column":4},"end":{"line":274,"column":25}},"76":{"start":{"line":277,"column":2},"end":{"line":277,"column":45}},"77":{"start":{"line":278,"column":2},"end":{"line":278,"column":92}},"78":{"start":{"line":279,"column":2},"end":{"line":279,"column":31}},"79":{"start":{"line":280,"column":2},"end":{"line":280,"column":31}},"80":{"start":{"line":283,"column":2},"end":{"line":283,"column":32}},"81":{"start":{"line":284,"column":2},"end":{"line":286,"column":3}},"82":{"start":{"line":285,"column":4},"end":{"line":285,"column":39}},"83":{"start":{"line":289,"column":2},"end":{"line":292,"column":3}},"84":{"start":{"line":290,"column":4},"end":{"line":290,"column":32}},"85":{"start":{"line":291,"column":4},"end":{"line":291,"column":10}},"86":{"start":{"line":295,"column":2},"end":{"line":297,"column":3}},"87":{"start":{"line":296,"column":4},"end":{"line":296,"column":43}},"88":{"start":{"line":299,"column":2},"end":{"line":299,"column":35}},"89":{"start":{"line":309,"column":0},"end":{"line":329,"column":1}},"90":{"start":{"line":310,"column":2},"end":{"line":312,"column":3}},"91":{"start":{"line":311,"column":4},"end":{"line":311,"column":25}},"92":{"start":{"line":315,"column":2},"end":{"line":315,"column":40}},"93":{"start":{"line":316,"column":2},"end":{"line":316,"column":74}},"94":{"start":{"line":317,"column":2},"end":{"line":317,"column":31}},"95":{"start":{"line":318,"column":2},"end":{"line":318,"column":27}},"96":{"start":{"line":321,"column":2},"end":{"line":323,"column":3}},"97":{"start":{"line":322,"column":4},"end":{"line":322,"column":46}},"98":{"start":{"line":326,"column":2},"end":{"line":326,"column":24}},"99":{"start":{"line":327,"column":2},"end":{"line":328,"column":36}},"100":{"start":{"line":341,"column":0},"end":{"line":381,"column":1}},"101":{"start":{"line":342,"column":2},"end":{"line":344,"column":3}},"102":{"start":{"line":343,"column":4},"end":{"line":343,"column":25}},"103":{"start":{"line":347,"column":2},"end":{"line":347,"column":78}},"104":{"start":{"line":348,"column":2},"end":{"line":348,"column":78}},"105":{"start":{"line":350,"column":2},"end":{"line":350,"column":40}},"106":{"start":{"line":351,"column":2},"end":{"line":351,"column":51}},"107":{"start":{"line":352,"column":2},"end":{"line":380,"column":3}},"108":{"start":{"line":354,"column":4},"end":{"line":354,"column":51}},"109":{"start":{"line":357,"column":4},"end":{"line":357,"column":76}},"110":{"start":{"line":358,"column":4},"end":{"line":358,"column":33}},"111":{"start":{"line":359,"column":4},"end":{"line":359,"column":29}},"112":{"start":{"line":362,"column":4},"end":{"line":364,"column":5}},"113":{"start":{"line":363,"column":6},"end":{"line":363,"column":48}},"114":{"start":{"line":368,"column":4},"end":{"line":369,"column":60}},"115":{"start":{"line":372,"column":4},"end":{"line":372,"column":28}},"116":{"start":{"line":374,"column":4},"end":{"line":374,"column":28}},"117":{"start":{"line":375,"column":4},"end":{"line":377,"column":5}},"118":{"start":{"line":376,"column":6},"end":{"line":376,"column":32}},"119":{"start":{"line":379,"column":4},"end":{"line":379,"column":37}},"120":{"start":{"line":391,"column":0},"end":{"line":427,"column":2}},"121":{"start":{"line":393,"column":2},"end":{"line":397,"column":3}},"122":{"start":{"line":398,"column":2},"end":{"line":398,"column":31}},"123":{"start":{"line":401,"column":2},"end":{"line":405,"column":3}},"124":{"start":{"line":402,"column":4},"end":{"line":402,"column":17}},"125":{"start":{"line":403,"column":4},"end":{"line":403,"column":23}},"126":{"start":{"line":404,"column":4},"end":{"line":404,"column":16}},"127":{"start":{"line":407,"column":2},"end":{"line":424,"column":3}},"128":{"start":{"line":408,"column":4},"end":{"line":408,"column":60}},"129":{"start":{"line":410,"column":4},"end":{"line":423,"column":5}},"130":{"start":{"line":411,"column":6},"end":{"line":411,"column":28}},"131":{"start":{"line":412,"column":6},"end":{"line":412,"column":13}},"132":{"start":{"line":413,"column":6},"end":{"line":422,"column":7}},"133":{"start":{"line":414,"column":8},"end":{"line":414,"column":16}},"134":{"start":{"line":415,"column":8},"end":{"line":419,"column":9}},"135":{"start":{"line":416,"column":10},"end":{"line":416,"column":23}},"136":{"start":{"line":417,"column":10},"end":{"line":417,"column":29}},"137":{"start":{"line":418,"column":10},"end":{"line":418,"column":14}},"138":{"start":{"line":420,"column":8},"end":{"line":420,"column":12}},"139":{"start":{"line":421,"column":8},"end":{"line":421,"column":15}},"140":{"start":{"line":426,"column":2},"end":{"line":426,"column":17}},"141":{"start":{"line":434,"column":0},"end":{"line":440,"column":1}},"142":{"start":{"line":435,"column":2},"end":{"line":435,"column":15}},"143":{"start":{"line":436,"column":2},"end":{"line":438,"column":3}},"144":{"start":{"line":437,"column":4},"end":{"line":437,"column":16}},"145":{"start":{"line":439,"column":2},"end":{"line":439,"column":13}},"146":{"start":{"line":453,"column":0},"end":{"line":459,"column":2}},"147":{"start":{"line":454,"column":2},"end":{"line":458,"column":13}},"148":{"start":{"line":464,"column":0},"end":{"line":464,"column":78}},"149":{"start":{"line":475,"column":0},"end":{"line":506,"column":2}},"150":{"start":{"line":477,"column":2},"end":{"line":479,"column":3}},"151":{"start":{"line":478,"column":4},"end":{"line":478,"column":18}},"152":{"start":{"line":482,"column":2},"end":{"line":484,"column":3}},"153":{"start":{"line":483,"column":4},"end":{"line":483,"column":16}},"154":{"start":{"line":487,"column":2},"end":{"line":489,"column":3}},"155":{"start":{"line":488,"column":4},"end":{"line":488,"column":17}},"156":{"start":{"line":492,"column":2},"end":{"line":502,"column":3}},"157":{"start":{"line":494,"column":4},"end":{"line":494,"column":31}},"158":{"start":{"line":495,"column":4},"end":{"line":501,"column":5}},"159":{"start":{"line":496,"column":6},"end":{"line":496,"column":18}},"160":{"start":{"line":500,"column":6},"end":{"line":500,"column":66}},"161":{"start":{"line":505,"column":2},"end":{"line":505,"column":15}}},"branchMap":{"1":{"line":22,"type":"cond-expr","locations":[{"start":{"line":23,"column":9},"end":{"line":23,"column":35}},{"start":{"line":24,"column":8},"end":{"line":24,"column":13}}]},"2":{"line":33,"type":"binary-expr","locations":[{"start":{"line":33,"column":15},"end":{"line":33,"column":24}},{"start":{"line":33,"column":28},"end":{"line":43,"column":1}}]},"3":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":2},"end":{"line":34,"column":2}},{"start":{"line":34,"column":2},"end":{"line":34,"column":2}}]},"4":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":7},"end":{"line":37,"column":7}},{"start":{"line":37,"column":7},"end":{"line":37,"column":7}}]},"5":{"line":113,"type":"if","locations":[{"start":{"line":113,"column":2},"end":{"line":113,"column":2}},{"start":{"line":113,"column":2},"end":{"line":113,"column":2}}]},"6":{"line":119,"type":"if","locations":[{"start":{"line":119,"column":2},"end":{"line":119,"column":2}},{"start":{"line":119,"column":2},"end":{"line":119,"column":2}}]},"7":{"line":122,"type":"if","locations":[{"start":{"line":122,"column":7},"end":{"line":122,"column":7}},{"start":{"line":122,"column":7},"end":{"line":122,"column":7}}]},"8":{"line":125,"type":"if","locations":[{"start":{"line":125,"column":7},"end":{"line":125,"column":7}},{"start":{"line":125,"column":7},"end":{"line":125,"column":7}}]},"9":{"line":133,"type":"if","locations":[{"start":{"line":133,"column":2},"end":{"line":133,"column":2}},{"start":{"line":133,"column":2},"end":{"line":133,"column":2}}]},"10":{"line":135,"type":"if","locations":[{"start":{"line":135,"column":4},"end":{"line":135,"column":4}},{"start":{"line":135,"column":4},"end":{"line":135,"column":4}}]},"11":{"line":140,"type":"if","locations":[{"start":{"line":140,"column":4},"end":{"line":140,"column":4}},{"start":{"line":140,"column":4},"end":{"line":140,"column":4}}]},"12":{"line":143,"type":"if","locations":[{"start":{"line":143,"column":9},"end":{"line":143,"column":9}},{"start":{"line":143,"column":9},"end":{"line":143,"column":9}}]},"13":{"line":149,"type":"switch","locations":[{"start":{"line":150,"column":4},"end":{"line":151,"column":47}},{"start":{"line":153,"column":4},"end":{"line":154,"column":53}},{"start":{"line":156,"column":4},"end":{"line":157,"column":53}},{"start":{"line":159,"column":4},"end":{"line":168,"column":13}},{"start":{"line":170,"column":4},"end":{"line":172,"column":55}}]},"14":{"line":161,"type":"binary-expr","locations":[{"start":{"line":161,"column":41},"end":{"line":161,"column":48}},{"start":{"line":161,"column":52},"end":{"line":161,"column":71}}]},"15":{"line":167,"type":"cond-expr","locations":[{"start":{"line":167,"column":38},"end":{"line":167,"column":48}},{"start":{"line":167,"column":51},"end":{"line":167,"column":52}}]},"16":{"line":185,"type":"if","locations":[{"start":{"line":185,"column":2},"end":{"line":185,"column":2}},{"start":{"line":185,"column":2},"end":{"line":185,"column":2}}]},"17":{"line":191,"type":"binary-expr","locations":[{"start":{"line":191,"column":32},"end":{"line":191,"column":40}},{"start":{"line":191,"column":44},"end":{"line":191,"column":47}}]},"18":{"line":194,"type":"cond-expr","locations":[{"start":{"line":194,"column":30},"end":{"line":194,"column":37}},{"start":{"line":194,"column":42},"end":{"line":194,"column":59}}]},"19":{"line":209,"type":"if","locations":[{"start":{"line":209,"column":2},"end":{"line":209,"column":2}},{"start":{"line":209,"column":2},"end":{"line":209,"column":2}}]},"20":{"line":229,"type":"if","locations":[{"start":{"line":229,"column":2},"end":{"line":229,"column":2}},{"start":{"line":229,"column":2},"end":{"line":229,"column":2}}]},"21":{"line":229,"type":"binary-expr","locations":[{"start":{"line":229,"column":6},"end":{"line":229,"column":18}},{"start":{"line":229,"column":22},"end":{"line":229,"column":38}}]},"22":{"line":239,"type":"cond-expr","locations":[{"start":{"line":239,"column":29},"end":{"line":239,"column":30}},{"start":{"line":239,"column":34},"end":{"line":239,"column":73}}]},"23":{"line":239,"type":"cond-expr","locations":[{"start":{"line":239,"column":42},"end":{"line":239,"column":59}},{"start":{"line":239,"column":62},"end":{"line":239,"column":73}}]},"24":{"line":242,"type":"cond-expr","locations":[{"start":{"line":242,"column":34},"end":{"line":242,"column":35}},{"start":{"line":242,"column":38},"end":{"line":242,"column":54}}]},"25":{"line":245,"type":"if","locations":[{"start":{"line":245,"column":2},"end":{"line":245,"column":2}},{"start":{"line":245,"column":2},"end":{"line":245,"column":2}}]},"26":{"line":258,"type":"cond-expr","locations":[{"start":{"line":258,"column":46},"end":{"line":258,"column":60}},{"start":{"line":258,"column":64},"end":{"line":258,"column":66}}]},"27":{"line":262,"type":"cond-expr","locations":[{"start":{"line":262,"column":22},"end":{"line":262,"column":25}},{"start":{"line":262,"column":28},"end":{"line":262,"column":30}}]},"28":{"line":273,"type":"if","locations":[{"start":{"line":273,"column":2},"end":{"line":273,"column":2}},{"start":{"line":273,"column":2},"end":{"line":273,"column":2}}]},"29":{"line":273,"type":"binary-expr","locations":[{"start":{"line":273,"column":6},"end":{"line":273,"column":18}},{"start":{"line":273,"column":22},"end":{"line":273,"column":38}}]},"30":{"line":278,"type":"binary-expr","locations":[{"start":{"line":278,"column":75},"end":{"line":278,"column":84}},{"start":{"line":278,"column":88},"end":{"line":278,"column":89}}]},"31":{"line":283,"type":"binary-expr","locations":[{"start":{"line":283,"column":16},"end":{"line":283,"column":25}},{"start":{"line":283,"column":29},"end":{"line":283,"column":30}}]},"32":{"line":284,"type":"if","locations":[{"start":{"line":284,"column":2},"end":{"line":284,"column":2}},{"start":{"line":284,"column":2},"end":{"line":284,"column":2}}]},"33":{"line":289,"type":"if","locations":[{"start":{"line":289,"column":2},"end":{"line":289,"column":2}},{"start":{"line":289,"column":2},"end":{"line":289,"column":2}}]},"34":{"line":295,"type":"if","locations":[{"start":{"line":295,"column":2},"end":{"line":295,"column":2}},{"start":{"line":295,"column":2},"end":{"line":295,"column":2}}]},"35":{"line":296,"type":"cond-expr","locations":[{"start":{"line":296,"column":31},"end":{"line":296,"column":35}},{"start":{"line":296,"column":38},"end":{"line":296,"column":41}}]},"36":{"line":310,"type":"if","locations":[{"start":{"line":310,"column":2},"end":{"line":310,"column":2}},{"start":{"line":310,"column":2},"end":{"line":310,"column":2}}]},"37":{"line":310,"type":"binary-expr","locations":[{"start":{"line":310,"column":6},"end":{"line":310,"column":18}},{"start":{"line":310,"column":22},"end":{"line":310,"column":38}}]},"38":{"line":316,"type":"cond-expr","locations":[{"start":{"line":316,"column":28},"end":{"line":316,"column":65}},{"start":{"line":316,"column":68},"end":{"line":316,"column":73}}]},"39":{"line":321,"type":"if","locations":[{"start":{"line":321,"column":2},"end":{"line":321,"column":2}},{"start":{"line":321,"column":2},"end":{"line":321,"column":2}}]},"40":{"line":327,"type":"cond-expr","locations":[{"start":{"line":327,"column":49},"end":{"line":327,"column":65}},{"start":{"line":327,"column":69},"end":{"line":327,"column":71}}]},"41":{"line":328,"type":"cond-expr","locations":[{"start":{"line":328,"column":22},"end":{"line":328,"column":25}},{"start":{"line":328,"column":28},"end":{"line":328,"column":30}}]},"42":{"line":342,"type":"if","locations":[{"start":{"line":342,"column":2},"end":{"line":342,"column":2}},{"start":{"line":342,"column":2},"end":{"line":342,"column":2}}]},"43":{"line":342,"type":"binary-expr","locations":[{"start":{"line":342,"column":6},"end":{"line":342,"column":18}},{"start":{"line":342,"column":22},"end":{"line":342,"column":38}}]},"44":{"line":347,"type":"cond-expr","locations":[{"start":{"line":347,"column":57},"end":{"line":347,"column":70}},{"start":{"line":347,"column":73},"end":{"line":347,"column":77}}]},"45":{"line":347,"type":"binary-expr","locations":[{"start":{"line":347,"column":15},"end":{"line":347,"column":22}},{"start":{"line":347,"column":26},"end":{"line":347,"column":53}}]},"46":{"line":348,"type":"cond-expr","locations":[{"start":{"line":348,"column":57},"end":{"line":348,"column":70}},{"start":{"line":348,"column":73},"end":{"line":348,"column":77}}]},"47":{"line":348,"type":"binary-expr","locations":[{"start":{"line":348,"column":15},"end":{"line":348,"column":22}},{"start":{"line":348,"column":26},"end":{"line":348,"column":53}}]},"48":{"line":352,"type":"if","locations":[{"start":{"line":352,"column":2},"end":{"line":352,"column":2}},{"start":{"line":352,"column":2},"end":{"line":352,"column":2}}]},"49":{"line":352,"type":"binary-expr","locations":[{"start":{"line":352,"column":6},"end":{"line":352,"column":17}},{"start":{"line":352,"column":21},"end":{"line":352,"column":33}}]},"50":{"line":357,"type":"cond-expr","locations":[{"start":{"line":357,"column":30},"end":{"line":357,"column":67}},{"start":{"line":357,"column":70},"end":{"line":357,"column":75}}]},"51":{"line":362,"type":"if","locations":[{"start":{"line":362,"column":4},"end":{"line":362,"column":4}},{"start":{"line":362,"column":4},"end":{"line":362,"column":4}}]},"52":{"line":369,"type":"cond-expr","locations":[{"start":{"line":369,"column":32},"end":{"line":369,"column":52}},{"start":{"line":369,"column":55},"end":{"line":369,"column":56}}]},"53":{"line":374,"type":"cond-expr","locations":[{"start":{"line":374,"column":22},"end":{"line":374,"column":23}},{"start":{"line":374,"column":26},"end":{"line":374,"column":27}}]},"54":{"line":375,"type":"if","locations":[{"start":{"line":375,"column":4},"end":{"line":375,"column":4}},{"start":{"line":375,"column":4},"end":{"line":375,"column":4}}]},"55":{"line":407,"type":"if","locations":[{"start":{"line":407,"column":2},"end":{"line":407,"column":2}},{"start":{"line":407,"column":2},"end":{"line":407,"column":2}}]},"56":{"line":410,"type":"if","locations":[{"start":{"line":410,"column":4},"end":{"line":410,"column":4}},{"start":{"line":410,"column":4},"end":{"line":410,"column":4}}]},"57":{"line":415,"type":"if","locations":[{"start":{"line":415,"column":8},"end":{"line":415,"column":8}},{"start":{"line":415,"column":8},"end":{"line":415,"column":8}}]},"58":{"line":464,"type":"binary-expr","locations":[{"start":{"line":464,"column":22},"end":{"line":464,"column":36}},{"start":{"line":464,"column":40},"end":{"line":464,"column":77}}]},"59":{"line":477,"type":"if","locations":[{"start":{"line":477,"column":2},"end":{"line":477,"column":2}},{"start":{"line":477,"column":2},"end":{"line":477,"column":2}}]},"60":{"line":482,"type":"if","locations":[{"start":{"line":482,"column":2},"end":{"line":482,"column":2}},{"start":{"line":482,"column":2},"end":{"line":482,"column":2}}]},"61":{"line":487,"type":"if","locations":[{"start":{"line":487,"column":2},"end":{"line":487,"column":2}},{"start":{"line":487,"column":2},"end":{"line":487,"column":2}}]},"62":{"line":487,"type":"binary-expr","locations":[{"start":{"line":487,"column":6},"end":{"line":487,"column":14}},{"start":{"line":487,"column":18},"end":{"line":487,"column":26}}]},"63":{"line":492,"type":"if","locations":[{"start":{"line":492,"column":2},"end":{"line":492,"column":2}},{"start":{"line":492,"column":2},"end":{"line":492,"column":2}}]},"64":{"line":492,"type":"binary-expr","locations":[{"start":{"line":492,"column":5},"end":{"line":492,"column":16}},{"start":{"line":492,"column":20},"end":{"line":492,"column":31}}]},"65":{"line":495,"type":"if","locations":[{"start":{"line":495,"column":4},"end":{"line":495,"column":4}},{"start":{"line":495,"column":4},"end":{"line":495,"column":4}}]}},"code":["'use strict';","","/**"," * @typedef {{sign: '+' | '-' | '', coefficients: number[], exponent: number}} SplitValue"," */","","/**"," * Test whether value is a number"," * @param {*} value"," * @return {boolean} isNumber"," */","exports.isNumber = function(value) {","  return typeof value === 'number';","};","","/**"," * Check if a number is integer"," * @param {number | boolean} value"," * @return {boolean} isInteger"," */","exports.isInteger = function(value) {","  return isFinite(value)","      ? (value == Math.round(value))","      : false;","  // Note: we use ==, not ===, as we can have Booleans as well","};","","/**"," * Calculate the sign of a number"," * @param {number} x"," * @returns {*}"," */","exports.sign = Math.sign || function(x) {","  if (x > 0) {","    return 1;","  }","  else if (x < 0) {","    return -1;","  }","  else {","    return 0;","  }","};","","/**"," * Convert a number to a formatted string representation."," *"," * Syntax:"," *"," *    format(value)"," *    format(value, options)"," *    format(value, precision)"," *    format(value, fn)"," *"," * Where:"," *"," *    {number} value   The value to be formatted"," *    {Object} options An object with formatting options. Available options:"," *                     {string} notation"," *                         Number notation. Choose from:"," *                         'fixed'          Always use regular number notation."," *                                          For example '123.40' and '14000000'"," *                         'exponential'    Always use exponential notation."," *                                          For example '1.234e+2' and '1.4e+7'"," *                         'engineering'    Always use engineering notation."," *                                          For example '123.4e+0' and '14.0e+6'"," *                         'auto' (default) Regular number notation for numbers"," *                                          having an absolute value between"," *                                          `lower` and `upper` bounds, and uses"," *                                          exponential notation elsewhere."," *                                          Lower bound is included, upper bound"," *                                          is excluded."," *                                          For example '123.4' and '1.4e7'."," *                     {number} precision   A number between 0 and 16 to round"," *                                          the digits of the number."," *                                          In case of notations 'exponential' and"," *                                          'auto', `precision` defines the total"," *                                          number of significant digits returned"," *                                          and is undefined by default."," *                                          In case of notation 'fixed',"," *                                          `precision` defines the number of"," *                                          significant digits after the decimal"," *                                          point, and is 0 by default."," *                     {Object} exponential An object containing two parameters,"," *                                          {number} lower and {number} upper,"," *                                          used by notation 'auto' to determine"," *                                          when to return exponential notation."," *                                          Default values are `lower=1e-3` and"," *                                          `upper=1e5`."," *                                          Only applicable for notation `auto`."," *    {Function} fn    A custom formatting function. Can be used to override the"," *                     built-in notations. Function `fn` is called with `value` as"," *                     parameter and must return a string. Is useful for example to"," *                     format all values inside a matrix in a particular way."," *"," * Examples:"," *"," *    format(6.4);                                        // '6.4'"," *    format(1240000);                                    // '1.24e6'"," *    format(1/3);                                        // '0.3333333333333333'"," *    format(1/3, 3);                                     // '0.333'"," *    format(21385, 2);                                   // '21000'"," *    format(12.071, {notation: 'fixed'});                // '12'"," *    format(2.3,    {notation: 'fixed', precision: 2});  // '2.30'"," *    format(52.8,   {notation: 'exponential'});          // '5.28e+1'"," *    format(12345678, {notation: 'engineering'});        // '12.345678e+6'"," *"," * @param {number} value"," * @param {Object | Function | number} [options]"," * @return {string} str The formatted value"," */","exports.format = function(value, options) {","  if (typeof options === 'function') {","    // handle format(value, fn)","    return options(value);","  }","","  // handle special cases","  if (value === Infinity) {","    return 'Infinity';","  }","  else if (value === -Infinity) {","    return '-Infinity';","  }","  else if (isNaN(value)) {","    return 'NaN';","  }","","  // default values for options","  var notation = 'auto';","  var precision = undefined;","","  if (options) {","    // determine notation from options","    if (options.notation) {","      notation = options.notation;","    }","","    // determine precision from options","    if (exports.isNumber(options)) {","      precision = options;","    }","    else if (options.precision) {","      precision = options.precision;","    }","  }","","  // handle the various notations","  switch (notation) {","    case 'fixed':","      return exports.toFixed(value, precision);","","    case 'exponential':","      return exports.toExponential(value, precision);","","    case 'engineering':","      return exports.toEngineering(value, precision);","","    case 'auto':","      return exports","          .toPrecision(value, precision, options && options.exponential)","","          // remove trailing zeros after the decimal point","          .replace(/((\\.\\d*?)(0+))($|e)/, function () {","            var digits = arguments[2];","            var e = arguments[4];","            return (digits !== '.') ? digits + e : e;","          });","","    default:","      throw new Error('Unknown notation \"' + notation + '\". ' +","          'Choose \"auto\", \"exponential\", or \"fixed\".');","  }","};","","/**"," * Split a number into sign, coefficients, and exponent"," * @param {number | string} value"," * @return {SplitValue}"," *              Returns an object containing sign, coefficients, and exponent"," */","exports.splitNumber = function (value) {","  // parse the input value","  var match = String(value).toLowerCase().match(/^0*?(-?)(\\d+\\.?\\d*)(e([+-]?\\d+))?$/);","  if (!match) {","    throw new SyntaxError('Invalid number ' + value);","  }","","  var sign         = match[1];","  var digits       = match[2];","  var exponent     = parseFloat(match[4] || '0');","","  var dot = digits.indexOf('.');","  exponent += (dot !== -1) ? (dot - 1) : (digits.length - 1);","","  var coefficients = digits","      .replace('.', '')  // remove the dot (must be removed before removing leading zeros)","      .replace(/^0*/, function (zeros) {","        // remove leading zeros, add their count to the exponent","        exponent -= zeros.length;","        return '';","      })","      .replace(/0*$/, '') // remove trailing zeros","      .split('')","      .map(function (d) {","        return parseInt(d);","      });","","  if (coefficients.length === 0) {","    coefficients.push(0);","    exponent++;","  }","","  return {","    sign: sign,","    coefficients: coefficients,","    exponent: exponent","  };","};","","","/**"," * Format a number in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'"," * @param {number | string} value"," * @param {number} [precision=0]        Optional number of decimals after the"," *                                      decimal point. Zero by default."," */","exports.toEngineering = function (value, precision) {","  if (isNaN(value) || !isFinite(value)) {","    return String(value);","  }","  ","  var rounded = exports.roundDigits(exports.splitNumber(value), precision);","","  var e = rounded.exponent;","  var c = rounded.coefficients;","","  // find nearest lower multiple of 3 for exponent","  var newExp = e % 3 === 0 ? e : (e < 0 ? (e - 3) - (e % 3) : e - (e % 3));","","  // concatenate coefficients with necessary zeros","  var significandsDiff = e >= 0 ? e : Math.abs(newExp);","","  // add zeros if necessary (for ex: 1e+8)","  if (c.length - 1 < significandsDiff) c = c.concat(zeros(significandsDiff - (c.length - 1)));","","  // find difference in exponents","  var expDiff = Math.abs(e - newExp);","","  var decimalIdx = 1;","","  // push decimal index over by expDiff times","  while (--expDiff >= 0) decimalIdx++;","","  // if all coefficient values are zero after the decimal point, don't add a decimal value.","  // otherwise concat with the rest of the coefficients","  var decimals = c.slice(decimalIdx).join('');","  var decimalVal = decimals.match(/[1-9]/) ? ('.' + decimals) : '';","","  var str = c.slice(0, decimalIdx).join('') +","      decimalVal +","      'e' + (e >= 0 ? '+' : '') + newExp.toString();","  return rounded.sign + str;","};","","/**"," * Format a number with fixed notation."," * @param {number | string} value"," * @param {number} [precision=0]        Optional number of decimals after the"," *                                      decimal point. Zero by default."," */","exports.toFixed = function (value, precision) {","  if (isNaN(value) || !isFinite(value)) {","    return String(value);","  }","","  var splitValue = exports.splitNumber(value)","  var rounded = exports.roundDigits(splitValue, splitValue.exponent + 1 + (precision || 0));","  var c = rounded.coefficients;","  var p = rounded.exponent + 1; // exponent may have changed","","  // append zeros if needed","  var pp = p + (precision || 0);","  if (c.length < pp) {","    c = c.concat(zeros(pp - c.length));","  }","","  // prepend zeros if needed","  if (p < 0) {","    c = zeros(-p + 1).concat(c);","    p = 1;","  }","","  // insert a dot if needed","  if (precision) {","    c.splice(p, 0, (p === 0) ? '0.' : '.');","  }","","  return rounded.sign + c.join('');","};","","/**"," * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'"," * @param {number | string} value"," * @param {number} [precision]  Number of digits in formatted output."," *                              If not provided, the maximum available digits"," *                              is used."," */","exports.toExponential = function (value, precision) {","  if (isNaN(value) || !isFinite(value)) {","    return String(value);","  }","","  // round if needed, else create a clone","  var split = exports.splitNumber(value)","  var rounded = precision ? exports.roundDigits(split, precision) : split;","  var c = rounded.coefficients;","  var e = rounded.exponent;","","  // append zeros if needed","  if (c.length < precision) {","    c = c.concat(zeros(precision - c.length));","  }","","  // format as `C.CCCe+EEE` or `C.CCCe-EEE`","  var first = c.shift();","  return rounded.sign + first + (c.length > 0 ? ('.' + c.join('')) : '') +","      'e' + (e >= 0 ? '+' : '') + e;","}","","/**"," * Format a number with a certain precision"," * @param {number | string} value"," * @param {number} [precision=undefined] Optional number of digits."," * @param {{lower: number | undefined, upper: number | undefined}} [options]"," *                                       By default:"," *                                         lower = 1e-3 (excl)"," *                                         upper = 1e+5 (incl)"," * @return {string}"," */","exports.toPrecision = function (value, precision, options) {","  if (isNaN(value) || !isFinite(value)) {","    return String(value);","  }","","  // determine lower and upper bound for exponential notation.","  var lower = (options && options.lower !== undefined) ? options.lower : 1e-3;","  var upper = (options && options.upper !== undefined) ? options.upper : 1e+5;","","  var split = exports.splitNumber(value)","  var abs = Math.abs(Math.pow(10, split.exponent));","  if (abs < lower || abs >= upper) {","    // exponential notation","    return exports.toExponential(value, precision);","  }","  else {","    var rounded = precision ? exports.roundDigits(split, precision) : split;","    var c = rounded.coefficients;","    var e = rounded.exponent;","","    // append trailing zeros","    if (c.length < precision) {","      c = c.concat(zeros(precision - c.length));","    }","","    // append trailing zeros","    // TODO: simplify the next statement","    c = c.concat(zeros(e - c.length + 1 +","        (c.length < precision ? precision - c.length : 0)));","","    // prepend zeros","    c = zeros(-e).concat(c);","","    var dot = e > 0 ? e : 0;","    if (dot < c.length - 1) {","      c.splice(dot + 1, 0, '.');","    }","","    return rounded.sign + c.join('');","  }","}","","/**"," * Round the number of digits of a number *"," * @param {SplitValue} split       A value split with .splitNumber(value)"," * @param {number} precision  A positive integer"," * @return {SplitValue}"," *              Returns an object containing sign, coefficients, and exponent"," *              with rounded digits"," */","exports.roundDigits = function (split, precision) {","  // create a clone","  var rounded = {","    sign: split.sign,","    coefficients: split.coefficients,","    exponent: split.exponent","  }","  var c = rounded.coefficients;","","  // prepend zeros if needed","  while (precision <= 0) {","    c.unshift(0);","    rounded.exponent++;","    precision++;","  }","","  if (c.length > precision) {","    var removed = c.splice(precision, c.length - precision);","","    if (removed[0] >= 5) {","      var i = precision - 1;","      c[i]++;","      while (c[i] === 10) {","        c.pop();","        if (i === 0) {","          c.unshift(0);","          rounded.exponent++;","          i++;","        }","        i--;","        c[i]++;","      }","    }","  }","","  return rounded;","};","","/**"," * Create an array filled with zeros."," * @param {number} length"," * @return {Array}"," */","function zeros(length) {","  var arr = [];","  for (var i = 0; i < length; i++) {","    arr.push(0);","  }","  return arr;","}","","/**"," * Count the number of significant digits of a number."," *"," * For example:"," *   2.34 returns 3"," *   0.0034 returns 2"," *   120.5e+30 returns 4"," *"," * @param {number} value"," * @return {number} digits   Number of significant digits"," */","exports.digits = function(value) {","  return value","      .toExponential()","      .replace(/e.*$/, '')          // remove exponential notation","      .replace( /^0\\.?0*|\\./, '')   // remove decimal point and leading zeros","      .length","};","","/**"," * Minimum number added to one that makes the result different than one"," */","exports.DBL_EPSILON = Number.EPSILON || 2.2204460492503130808472633361816E-16;","","/**"," * Compares two floating point numbers."," * @param {number} x          First value to compare"," * @param {number} y          Second value to compare"," * @param {number} [epsilon]  The maximum relative difference between x and y"," *                            If epsilon is undefined or null, the function will"," *                            test whether x and y are exactly equal."," * @return {boolean} whether the two numbers are nearly equal","*/","exports.nearlyEqual = function(x, y, epsilon) {","  // if epsilon is null or undefined, test whether x and y are exactly equal","  if (epsilon == null) {","    return x == y;","  }","","  // use \"==\" operator, handles infinities","  if (x == y) {","    return true;","  }","","  // NaN","  if (isNaN(x) || isNaN(y)) {","    return false;","  }","","  // at this point x and y should be finite","  if(isFinite(x) && isFinite(y)) {","    // check numbers are very close, needed when comparing numbers near zero","    var diff = Math.abs(x - y);","    if (diff < exports.DBL_EPSILON) {","      return true;","    }","    else {","      // use relative error","      return diff <= Math.max(Math.abs(x), Math.abs(y)) * epsilon;","    }","  }","","  // Infinite and Number or negative Infinite and positive Infinite cases","  return false;","};",""],"l":{"12":1,"13":0,"21":1,"22":0,"33":1,"34":0,"35":0,"37":0,"38":0,"41":0,"112":1,"113":0,"115":0,"119":0,"120":0,"122":0,"123":0,"125":0,"126":0,"130":0,"131":0,"133":0,"135":0,"136":0,"140":0,"141":0,"143":0,"144":0,"149":0,"151":0,"154":0,"157":0,"160":0,"165":0,"166":0,"167":0,"171":0,"182":1,"184":0,"185":0,"186":0,"189":0,"190":0,"191":0,"193":0,"194":0,"196":0,"200":0,"201":0,"206":0,"209":0,"210":0,"211":0,"214":0,"228":1,"229":0,"230":0,"233":0,"235":0,"236":0,"239":0,"242":0,"245":0,"248":0,"250":0,"253":0,"257":0,"258":0,"260":0,"263":0,"272":1,"273":0,"274":0,"277":0,"278":0,"279":0,"280":0,"283":0,"284":0,"285":0,"289":0,"290":0,"291":0,"295":0,"296":0,"299":0,"309":1,"310":0,"311":0,"315":0,"316":0,"317":0,"318":0,"321":0,"322":0,"326":0,"327":0,"341":1,"342":0,"343":0,"347":0,"348":0,"350":0,"351":0,"352":0,"354":0,"357":0,"358":0,"359":0,"362":0,"363":0,"368":0,"372":0,"374":0,"375":0,"376":0,"379":0,"391":1,"393":0,"398":0,"401":0,"402":0,"403":0,"404":0,"407":0,"408":0,"410":0,"411":0,"412":0,"413":0,"414":0,"415":0,"416":0,"417":0,"418":0,"420":0,"421":0,"426":0,"434":1,"435":0,"436":0,"437":0,"439":0,"453":1,"454":0,"464":1,"475":1,"477":0,"478":0,"482":0,"483":0,"487":0,"488":0,"492":0,"494":0,"495":0,"496":0,"500":0,"505":0}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/utils/emitter.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/utils/emitter.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1},"b":{},"f":{"1":1},"fnMap":{"1":{"name":"(anonymous_1)","line":8,"loc":{"start":{"line":8,"column":16},"end":{"line":8,"column":31}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":38}},"2":{"start":{"line":8,"column":0},"end":{"line":19,"column":2}},"3":{"start":{"line":10,"column":2},"end":{"line":10,"column":30}},"4":{"start":{"line":13,"column":2},"end":{"line":13,"column":38}},"5":{"start":{"line":14,"column":2},"end":{"line":14,"column":39}},"6":{"start":{"line":15,"column":2},"end":{"line":15,"column":40}},"7":{"start":{"line":16,"column":2},"end":{"line":16,"column":40}},"8":{"start":{"line":18,"column":2},"end":{"line":18,"column":13}}},"branchMap":{},"code":["var Emitter = require('tiny-emitter');","","/**"," * Extend given object with emitter functions `on`, `off`, `once`, `emit`"," * @param {Object} obj"," * @return {Object} obj"," */","exports.mixin = function (obj) {","  // create event emitter","  var emitter = new Emitter();","","  // bind methods to obj (we don't want to expose the emitter.e Array...)","  obj.on   = emitter.on.bind(emitter);","  obj.off  = emitter.off.bind(emitter);","  obj.once = emitter.once.bind(emitter);","  obj.emit = emitter.emit.bind(emitter);","","  return obj;","};",""],"l":{"1":1,"8":1,"10":1,"13":1,"14":1,"15":1,"16":1,"18":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/core/function/import.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/core/function/import.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":249,"8":249,"9":0,"10":249,"11":1,"12":249,"13":217,"14":32,"15":32,"16":248,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":1,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":1,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":1,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":1,"67":217,"68":214,"69":214,"70":214,"71":214,"72":214,"73":10,"74":10,"75":0,"76":10,"77":0,"78":0,"79":0,"80":10,"81":10,"82":0,"83":0,"84":214,"85":211,"86":211,"87":202,"88":202,"89":3,"90":3,"91":3,"92":3,"93":214,"94":3,"95":1,"96":0,"97":1,"98":10,"99":1,"100":1,"101":1,"102":1,"103":1,"104":1},"b":{"1":[0,249],"2":[249,248],"3":[1,248],"4":[217,32],"5":[32,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[214,3],"26":[48,166],"27":[0,214],"28":[0,10],"29":[10,10],"30":[0,10],"31":[10,0],"32":[0,0],"33":[10,0],"34":[10,0],"35":[0,0],"36":[211,3],"37":[202,9],"38":[202,0],"39":[3,0],"40":[3,0],"41":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"42":[10,0]},"f":{"1":1,"2":249,"3":248,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":217,"11":10,"12":0,"13":10},"fnMap":{"1":{"name":"factory","line":8,"loc":{"start":{"line":8,"column":0},"end":{"line":8,"column":51}}},"2":{"name":"math_import","line":56,"loc":{"start":{"line":56,"column":2},"end":{"line":56,"column":40}}},"3":{"name":"(anonymous_3)","line":71,"loc":{"start":{"line":71,"column":21},"end":{"line":71,"column":38}}},"4":{"name":"_import","line":106,"loc":{"start":{"line":106,"column":2},"end":{"line":106,"column":41}}},"5":{"name":"resolver","line":125,"loc":{"start":{"line":125,"column":32},"end":{"line":125,"column":52}}},"6":{"name":"resolver","line":134,"loc":{"start":{"line":134,"column":32},"end":{"line":134,"column":52}}},"7":{"name":"_importTransform","line":145,"loc":{"start":{"line":145,"column":2},"end":{"line":145,"column":42}}},"8":{"name":"_wrap","line":168,"loc":{"start":{"line":168,"column":2},"end":{"line":168,"column":22}}},"9":{"name":"wrapper","line":169,"loc":{"start":{"line":169,"column":18},"end":{"line":169,"column":38}}},"10":{"name":"_importFactory","line":191,"loc":{"start":{"line":191,"column":2},"end":{"line":191,"column":44}}},"11":{"name":"(anonymous_11)","line":198,"loc":{"start":{"line":198,"column":21},"end":{"line":198,"column":33}}},"12":{"name":"isSupportedType","line":259,"loc":{"start":{"line":259,"column":2},"end":{"line":259,"column":35}}},"13":{"name":"isTypedFunction","line":278,"loc":{"start":{"line":278,"column":2},"end":{"line":278,"column":32}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":46}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":56}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":54}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":59}},"5":{"start":{"line":8,"column":0},"end":{"line":290,"column":1}},"6":{"start":{"line":56,"column":2},"end":{"line":97,"column":3}},"7":{"start":{"line":57,"column":4},"end":{"line":57,"column":31}},"8":{"start":{"line":58,"column":4},"end":{"line":60,"column":5}},"9":{"start":{"line":59,"column":6},"end":{"line":59,"column":52}},"10":{"start":{"line":62,"column":4},"end":{"line":64,"column":5}},"11":{"start":{"line":63,"column":6},"end":{"line":63,"column":19}},"12":{"start":{"line":66,"column":4},"end":{"line":96,"column":5}},"13":{"start":{"line":67,"column":6},"end":{"line":67,"column":38}},"14":{"start":{"line":70,"column":9},"end":{"line":96,"column":5}},"15":{"start":{"line":71,"column":6},"end":{"line":73,"column":9}},"16":{"start":{"line":72,"column":8},"end":{"line":72,"column":36}},"17":{"start":{"line":75,"column":9},"end":{"line":96,"column":5}},"18":{"start":{"line":77,"column":6},"end":{"line":90,"column":7}},"19":{"start":{"line":78,"column":8},"end":{"line":89,"column":9}},"20":{"start":{"line":79,"column":10},"end":{"line":79,"column":35}},"21":{"start":{"line":80,"column":10},"end":{"line":88,"column":11}},"22":{"start":{"line":81,"column":12},"end":{"line":81,"column":42}},"23":{"start":{"line":83,"column":15},"end":{"line":88,"column":11}},"24":{"start":{"line":84,"column":12},"end":{"line":84,"column":44}},"25":{"start":{"line":87,"column":12},"end":{"line":87,"column":40}},"26":{"start":{"line":93,"column":6},"end":{"line":95,"column":7}},"27":{"start":{"line":94,"column":8},"end":{"line":94,"column":66}},"28":{"start":{"line":106,"column":2},"end":{"line":143,"column":3}},"29":{"start":{"line":108,"column":4},"end":{"line":111,"column":5}},"30":{"start":{"line":110,"column":6},"end":{"line":110,"column":27}},"31":{"start":{"line":113,"column":4},"end":{"line":129,"column":5}},"32":{"start":{"line":114,"column":6},"end":{"line":121,"column":7}},"33":{"start":{"line":116,"column":8},"end":{"line":116,"column":46}},"34":{"start":{"line":120,"column":8},"end":{"line":120,"column":41}},"35":{"start":{"line":123,"column":6},"end":{"line":123,"column":25}},"36":{"start":{"line":124,"column":6},"end":{"line":124,"column":36}},"37":{"start":{"line":125,"column":6},"end":{"line":127,"column":9}},"38":{"start":{"line":126,"column":8},"end":{"line":126,"column":21}},"39":{"start":{"line":128,"column":6},"end":{"line":128,"column":13}},"40":{"start":{"line":131,"column":4},"end":{"line":138,"column":5}},"41":{"start":{"line":132,"column":6},"end":{"line":132,"column":25}},"42":{"start":{"line":133,"column":6},"end":{"line":133,"column":36}},"43":{"start":{"line":134,"column":6},"end":{"line":136,"column":9}},"44":{"start":{"line":135,"column":8},"end":{"line":135,"column":21}},"45":{"start":{"line":137,"column":6},"end":{"line":137,"column":13}},"46":{"start":{"line":140,"column":4},"end":{"line":142,"column":5}},"47":{"start":{"line":141,"column":6},"end":{"line":141,"column":70}},"48":{"start":{"line":145,"column":2},"end":{"line":159,"column":3}},"49":{"start":{"line":146,"column":4},"end":{"line":158,"column":5}},"50":{"start":{"line":147,"column":6},"end":{"line":147,"column":56}},"51":{"start":{"line":148,"column":6},"end":{"line":150,"column":7}},"52":{"start":{"line":149,"column":8},"end":{"line":149,"column":65}},"53":{"start":{"line":154,"column":6},"end":{"line":154,"column":44}},"54":{"start":{"line":155,"column":6},"end":{"line":157,"column":7}},"55":{"start":{"line":156,"column":8},"end":{"line":156,"column":55}},"56":{"start":{"line":168,"column":2},"end":{"line":183,"column":3}},"57":{"start":{"line":169,"column":4},"end":{"line":176,"column":6}},"58":{"start":{"line":170,"column":6},"end":{"line":170,"column":20}},"59":{"start":{"line":171,"column":6},"end":{"line":174,"column":7}},"60":{"start":{"line":172,"column":8},"end":{"line":172,"column":31}},"61":{"start":{"line":173,"column":8},"end":{"line":173,"column":39}},"62":{"start":{"line":175,"column":6},"end":{"line":175,"column":34}},"63":{"start":{"line":178,"column":4},"end":{"line":180,"column":5}},"64":{"start":{"line":179,"column":6},"end":{"line":179,"column":39}},"65":{"start":{"line":182,"column":4},"end":{"line":182,"column":19}},"66":{"start":{"line":191,"column":2},"end":{"line":251,"column":3}},"67":{"start":{"line":192,"column":4},"end":{"line":250,"column":5}},"68":{"start":{"line":193,"column":6},"end":{"line":193,"column":30}},"69":{"start":{"line":194,"column":6},"end":{"line":194,"column":63}},"70":{"start":{"line":195,"column":6},"end":{"line":195,"column":73}},"71":{"start":{"line":196,"column":6},"end":{"line":196,"column":82}},"72":{"start":{"line":198,"column":6},"end":{"line":224,"column":8}},"73":{"start":{"line":199,"column":8},"end":{"line":199,"column":37}},"74":{"start":{"line":200,"column":8},"end":{"line":203,"column":9}},"75":{"start":{"line":201,"column":10},"end":{"line":202,"column":99}},"76":{"start":{"line":205,"column":8},"end":{"line":215,"column":9}},"77":{"start":{"line":206,"column":10},"end":{"line":212,"column":11}},"78":{"start":{"line":211,"column":12},"end":{"line":211,"column":49}},"79":{"start":{"line":214,"column":10},"end":{"line":214,"column":26}},"80":{"start":{"line":217,"column":8},"end":{"line":219,"column":9}},"81":{"start":{"line":218,"column":10},"end":{"line":218,"column":26}},"82":{"start":{"line":221,"column":8},"end":{"line":223,"column":9}},"83":{"start":{"line":222,"column":10},"end":{"line":222,"column":74}},"84":{"start":{"line":226,"column":6},"end":{"line":242,"column":7}},"85":{"start":{"line":227,"column":8},"end":{"line":227,"column":40}},"86":{"start":{"line":229,"column":8},"end":{"line":233,"column":9}},"87":{"start":{"line":230,"column":10},"end":{"line":232,"column":11}},"88":{"start":{"line":231,"column":12},"end":{"line":231,"column":68}},"89":{"start":{"line":236,"column":8},"end":{"line":236,"column":37}},"90":{"start":{"line":237,"column":8},"end":{"line":241,"column":9}},"91":{"start":{"line":238,"column":10},"end":{"line":240,"column":11}},"92":{"start":{"line":239,"column":12},"end":{"line":239,"column":65}},"93":{"start":{"line":244,"column":6},"end":{"line":244,"column":56}},"94":{"start":{"line":249,"column":6},"end":{"line":249,"column":20}},"95":{"start":{"line":259,"column":2},"end":{"line":271,"column":3}},"96":{"start":{"line":260,"column":4},"end":{"line":270,"column":53}},"97":{"start":{"line":278,"column":2},"end":{"line":280,"column":3}},"98":{"start":{"line":279,"column":4},"end":{"line":279,"column":73}},"99":{"start":{"line":283,"column":2},"end":{"line":287,"column":4}},"100":{"start":{"line":289,"column":2},"end":{"line":289,"column":21}},"101":{"start":{"line":292,"column":0},"end":{"line":292,"column":20}},"102":{"start":{"line":293,"column":0},"end":{"line":293,"column":24}},"103":{"start":{"line":294,"column":0},"end":{"line":294,"column":26}},"104":{"start":{"line":295,"column":0},"end":{"line":295,"column":20}}},"branchMap":{"1":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":4},"end":{"line":58,"column":4}},{"start":{"line":58,"column":4},"end":{"line":58,"column":4}}]},"2":{"line":58,"type":"binary-expr","locations":[{"start":{"line":58,"column":8},"end":{"line":58,"column":17}},{"start":{"line":58,"column":21},"end":{"line":58,"column":30}}]},"3":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":4},"end":{"line":62,"column":4}},{"start":{"line":62,"column":4},"end":{"line":62,"column":4}}]},"4":{"line":66,"type":"if","locations":[{"start":{"line":66,"column":4},"end":{"line":66,"column":4}},{"start":{"line":66,"column":4},"end":{"line":66,"column":4}}]},"5":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":9},"end":{"line":70,"column":9}},{"start":{"line":70,"column":9},"end":{"line":70,"column":9}}]},"6":{"line":75,"type":"if","locations":[{"start":{"line":75,"column":9},"end":{"line":75,"column":9}},{"start":{"line":75,"column":9},"end":{"line":75,"column":9}}]},"7":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":8},"end":{"line":78,"column":8}},{"start":{"line":78,"column":8},"end":{"line":78,"column":8}}]},"8":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":10},"end":{"line":80,"column":10}},{"start":{"line":80,"column":10},"end":{"line":80,"column":10}}]},"9":{"line":83,"type":"if","locations":[{"start":{"line":83,"column":15},"end":{"line":83,"column":15}},{"start":{"line":83,"column":15},"end":{"line":83,"column":15}}]},"10":{"line":93,"type":"if","locations":[{"start":{"line":93,"column":6},"end":{"line":93,"column":6}},{"start":{"line":93,"column":6},"end":{"line":93,"column":6}}]},"11":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":4},"end":{"line":108,"column":4}},{"start":{"line":108,"column":4},"end":{"line":108,"column":4}}]},"12":{"line":108,"type":"binary-expr","locations":[{"start":{"line":108,"column":8},"end":{"line":108,"column":20}},{"start":{"line":108,"column":24},"end":{"line":108,"column":51}}]},"13":{"line":113,"type":"if","locations":[{"start":{"line":113,"column":4},"end":{"line":113,"column":4}},{"start":{"line":113,"column":4},"end":{"line":113,"column":4}}]},"14":{"line":113,"type":"binary-expr","locations":[{"start":{"line":113,"column":8},"end":{"line":113,"column":35}},{"start":{"line":113,"column":39},"end":{"line":113,"column":61}}]},"15":{"line":114,"type":"if","locations":[{"start":{"line":114,"column":6},"end":{"line":114,"column":6}},{"start":{"line":114,"column":6},"end":{"line":114,"column":6}}]},"16":{"line":131,"type":"if","locations":[{"start":{"line":131,"column":4},"end":{"line":131,"column":4}},{"start":{"line":131,"column":4},"end":{"line":131,"column":4}}]},"17":{"line":131,"type":"binary-expr","locations":[{"start":{"line":131,"column":8},"end":{"line":131,"column":32}},{"start":{"line":131,"column":36},"end":{"line":131,"column":52}}]},"18":{"line":140,"type":"if","locations":[{"start":{"line":140,"column":4},"end":{"line":140,"column":4}},{"start":{"line":140,"column":4},"end":{"line":140,"column":4}}]},"19":{"line":146,"type":"if","locations":[{"start":{"line":146,"column":4},"end":{"line":146,"column":4}},{"start":{"line":146,"column":4},"end":{"line":146,"column":4}}]},"20":{"line":146,"type":"binary-expr","locations":[{"start":{"line":146,"column":8},"end":{"line":146,"column":13}},{"start":{"line":146,"column":17},"end":{"line":146,"column":54}}]},"21":{"line":148,"type":"if","locations":[{"start":{"line":148,"column":6},"end":{"line":148,"column":6}},{"start":{"line":148,"column":6},"end":{"line":148,"column":6}}]},"22":{"line":155,"type":"if","locations":[{"start":{"line":155,"column":6},"end":{"line":155,"column":6}},{"start":{"line":155,"column":6},"end":{"line":155,"column":6}}]},"23":{"line":173,"type":"binary-expr","locations":[{"start":{"line":173,"column":18},"end":{"line":173,"column":21}},{"start":{"line":173,"column":25},"end":{"line":173,"column":38}}]},"24":{"line":178,"type":"if","locations":[{"start":{"line":178,"column":4},"end":{"line":178,"column":4}},{"start":{"line":178,"column":4},"end":{"line":178,"column":4}}]},"25":{"line":192,"type":"if","locations":[{"start":{"line":192,"column":4},"end":{"line":192,"column":4}},{"start":{"line":192,"column":4},"end":{"line":192,"column":4}}]},"26":{"line":195,"type":"cond-expr","locations":[{"start":{"line":195,"column":37},"end":{"line":195,"column":65}},{"start":{"line":195,"column":68},"end":{"line":195,"column":72}}]},"27":{"line":196,"type":"cond-expr","locations":[{"start":{"line":196,"column":54},"end":{"line":196,"column":69}},{"start":{"line":196,"column":72},"end":{"line":196,"column":81}}]},"28":{"line":200,"type":"if","locations":[{"start":{"line":200,"column":8},"end":{"line":200,"column":8}},{"start":{"line":200,"column":8},"end":{"line":200,"column":8}}]},"29":{"line":200,"type":"binary-expr","locations":[{"start":{"line":200,"column":12},"end":{"line":200,"column":20}},{"start":{"line":200,"column":24},"end":{"line":200,"column":64}}]},"30":{"line":205,"type":"if","locations":[{"start":{"line":205,"column":8},"end":{"line":205,"column":8}},{"start":{"line":205,"column":8},"end":{"line":205,"column":8}}]},"31":{"line":205,"type":"binary-expr","locations":[{"start":{"line":205,"column":12},"end":{"line":205,"column":37}},{"start":{"line":205,"column":41},"end":{"line":205,"column":66}}]},"32":{"line":206,"type":"if","locations":[{"start":{"line":206,"column":10},"end":{"line":206,"column":10}},{"start":{"line":206,"column":10},"end":{"line":206,"column":10}}]},"33":{"line":217,"type":"if","locations":[{"start":{"line":217,"column":8},"end":{"line":217,"column":8}},{"start":{"line":217,"column":8},"end":{"line":217,"column":8}}]},"34":{"line":217,"type":"binary-expr","locations":[{"start":{"line":217,"column":12},"end":{"line":217,"column":34}},{"start":{"line":217,"column":38},"end":{"line":217,"column":54}}]},"35":{"line":221,"type":"if","locations":[{"start":{"line":221,"column":8},"end":{"line":221,"column":8}},{"start":{"line":221,"column":8},"end":{"line":221,"column":8}}]},"36":{"line":226,"type":"if","locations":[{"start":{"line":226,"column":6},"end":{"line":226,"column":6}},{"start":{"line":226,"column":6},"end":{"line":226,"column":6}}]},"37":{"line":229,"type":"if","locations":[{"start":{"line":229,"column":8},"end":{"line":229,"column":8}},{"start":{"line":229,"column":8},"end":{"line":229,"column":8}}]},"38":{"line":230,"type":"if","locations":[{"start":{"line":230,"column":10},"end":{"line":230,"column":10}},{"start":{"line":230,"column":10},"end":{"line":230,"column":10}}]},"39":{"line":237,"type":"if","locations":[{"start":{"line":237,"column":8},"end":{"line":237,"column":8}},{"start":{"line":237,"column":8},"end":{"line":237,"column":8}}]},"40":{"line":238,"type":"if","locations":[{"start":{"line":238,"column":10},"end":{"line":238,"column":10}},{"start":{"line":238,"column":10},"end":{"line":238,"column":10}}]},"41":{"line":260,"type":"binary-expr","locations":[{"start":{"line":260,"column":11},"end":{"line":260,"column":39}},{"start":{"line":261,"column":11},"end":{"line":261,"column":37}},{"start":{"line":262,"column":11},"end":{"line":262,"column":37}},{"start":{"line":263,"column":11},"end":{"line":263,"column":38}},{"start":{"line":264,"column":11},"end":{"line":264,"column":26}},{"start":{"line":265,"column":12},"end":{"line":265,"column":18}},{"start":{"line":265,"column":22},"end":{"line":265,"column":44}},{"start":{"line":266,"column":12},"end":{"line":266,"column":18}},{"start":{"line":266,"column":22},"end":{"line":266,"column":47}},{"start":{"line":267,"column":12},"end":{"line":267,"column":18}},{"start":{"line":267,"column":22},"end":{"line":267,"column":49}},{"start":{"line":268,"column":12},"end":{"line":268,"column":18}},{"start":{"line":268,"column":22},"end":{"line":268,"column":48}},{"start":{"line":269,"column":12},"end":{"line":269,"column":18}},{"start":{"line":269,"column":22},"end":{"line":269,"column":46}},{"start":{"line":270,"column":12},"end":{"line":270,"column":18}},{"start":{"line":270,"column":22},"end":{"line":270,"column":52}}]},"42":{"line":279,"type":"binary-expr","locations":[{"start":{"line":279,"column":11},"end":{"line":279,"column":35}},{"start":{"line":279,"column":39},"end":{"line":279,"column":72}}]}},"code":["'use strict';","","var lazy = require('../../utils/object').lazy;","var isFactory = require('../../utils/object').isFactory;","var traverse = require('../../utils/object').traverse;","var ArgumentsError = require('../../error/ArgumentsError');","","function factory (type, config, load, typed, math) {","  /**","   * Import functions from an object or a module","   *","   * Syntax:","   *","   *    math.import(object)","   *    math.import(object, options)","   *","   * Where:","   *","   * - `object: Object`","   *   An object with functions to be imported.","   * - `options: Object` An object with import options. Available options:","   *   - `override: boolean`","   *     If true, existing functions will be overwritten. False by default.","   *   - `silent: boolean`","   *     If true, the function will not throw errors on duplicates or invalid","   *     types. False by default.","   *   - `wrap: boolean`","   *     If true, the functions will be wrapped in a wrapper function","   *     which converts data types like Matrix to primitive data types like Array.","   *     The wrapper is needed when extending math.js with libraries which do not","   *     support these data type. False by default.","   *","   * Examples:","   *","   *    // define new functions and variables","   *    math.import({","   *      myvalue: 42,","   *      hello: function (name) {","   *        return 'hello, ' + name + '!';","   *      }","   *    });","   *","   *    // use the imported function and variable","   *    math.myvalue * 2;               // 84","   *    math.hello('user');             // 'hello, user!'","   *","   *    // import the npm module 'numbers'","   *    // (must be installed first with `npm install numbers`)","   *    math.import(require('numbers'), {wrap: true});","   *","   *    math.fibonacci(7); // returns 13","   *","   * @param {Object | Array} object   Object with functions to be imported.","   * @param {Object} [options]        Import options.","   */","  function math_import(object, options) {","    var num = arguments.length;","    if (num !== 1 && num !== 2) {","      throw new ArgumentsError('import', num, 1, 2);","    }","","    if (!options) {","      options = {};","    }","","    if (isFactory(object)) {","      _importFactory(object, options);","    }","    // TODO: allow a typed-function with name too","    else if (Array.isArray(object)) {","      object.forEach(function (entry) {","        math_import(entry, options);","      });","    }","    else if (typeof object === 'object') {","      // a map with functions","      for (var name in object) {","        if (object.hasOwnProperty(name)) {","          var value = object[name];","          if (isSupportedType(value)) {","            _import(name, value, options);","          }","          else if (isFactory(object)) {","            _importFactory(object, options);","          }","          else {","            math_import(value, options);","          }","        }","      }","    }","    else {","      if (!options.silent) {","        throw new TypeError('Factory, Object, or Array expected');","      }","    }","  }","","  /**","   * Add a property to the math namespace and create a chain proxy for it.","   * @param {string} name","   * @param {*} value","   * @param {Object} options  See import for a description of the options","   * @private","   */","  function _import(name, value, options) {","    // TODO: refactor this function, it's to complicated and contains duplicate code","    if (options.wrap && typeof value === 'function') {","      // create a wrapper around the function","      value = _wrap(value);","    }","","    if (isTypedFunction(math[name]) && isTypedFunction(value)) {","      if (options.override) {","        // give the typed function the right name","        value = typed(name, value.signatures);","      }","      else {","        // merge the existing and typed function","        value = typed(math[name], value);","      }","","      math[name] = value;","      _importTransform(name, value);","      math.emit('import', name, function resolver() {","        return value;","      });","      return;","    }","","    if (math[name] === undefined || options.override) {","      math[name] = value;","      _importTransform(name, value);","      math.emit('import', name, function resolver() {","        return value;","      });","      return;","    }","","    if (!options.silent) {","      throw new Error('Cannot import \"' + name + '\": already exists');","    }","  }","","  function _importTransform (name, value) {","    if (value && typeof value.transform === 'function') {","      math.expression.transform[name] = value.transform;","      if (!unsafe[name]) {","        math.expression.mathWithTransform[name] = value.transform","      }","    }","    else {","      // remove existing transform","      delete math.expression.transform[name]","      if (!unsafe[name]) {","        math.expression.mathWithTransform[name] = value","      }","    }","  }","","  /**","   * Create a wrapper a round an function which converts the arguments","   * to their primitive values (like convert a Matrix to Array)","   * @param {Function} fn","   * @return {Function} Returns the wrapped function","   * @private","   */","  function _wrap (fn) {","    var wrapper = function wrapper () {","      var args = [];","      for (var i = 0, len = arguments.length; i < len; i++) {","        var arg = arguments[i];","        args[i] = arg && arg.valueOf();","      }","      return fn.apply(math, args);","    };","","    if (fn.transform) {","      wrapper.transform = fn.transform;","    }","","    return wrapper;","  }","","  /**","   * Import an instance of a factory into math.js","   * @param {{factory: Function, name: string, path: string, math: boolean}} factory","   * @param {Object} options  See import for a description of the options","   * @private","   */","  function _importFactory(factory, options) {","    if (typeof factory.name === 'string') {","      var name = factory.name;","      var existingTransform = name in math.expression.transform","      var namespace = factory.path ? traverse(math, factory.path) : math;","      var existing = namespace.hasOwnProperty(name) ? namespace[name] : undefined;","","      var resolver = function () {","        var instance = load(factory);","        if (instance && typeof instance.transform === 'function') {","          throw new Error('Transforms cannot be attached to factory functions. ' +","              'Please create a separate function for it with exports.path=\"expression.transform\"');","        }","","        if (isTypedFunction(existing) && isTypedFunction(instance)) {","          if (options.override) {","            // replace the existing typed function (nothing to do)","          }","          else {","            // merge the existing and new typed function","            instance = typed(existing, instance);","          }","","          return instance;","        }","","        if (existing === undefined || options.override) {","          return instance;","        }","","        if (!options.silent) {","          throw new Error('Cannot import \"' + name + '\": already exists');","        }","      };","","      if (factory.lazy !== false) {","        lazy(namespace, name, resolver);","","        if (!existingTransform) {","          if (!unsafe[name]) {","            lazy(math.expression.mathWithTransform, name, resolver);","          }","        }","      }","      else {","        namespace[name] = resolver();","        if (!existingTransform) {","          if (!unsafe[name]) {","            math.expression.mathWithTransform[name] = resolver();","          }","        }","      }","","      math.emit('import', name, resolver, factory.path);","    }","    else {","      // unnamed factory.","      // no lazy loading","      load(factory);","    }","  }","","  /**","   * Check whether given object is a type which can be imported","   * @param {Function | number | string | boolean | null | Unit | Complex} object","   * @return {boolean}","   * @private","   */","  function isSupportedType(object) {","    return typeof object === 'function'","        || typeof object === 'number'","        || typeof object === 'string'","        || typeof object === 'boolean'","        || object === null","        || (object && object.isUnit === true)","        || (object && object.isComplex === true)","        || (object && object.isBigNumber === true)","        || (object && object.isFraction === true)","        || (object && object.isMatrix === true)","        || (object && Array.isArray(object) === true)","  }","","  /**","   * Test whether a given thing is a typed-function","   * @param {*} fn","   * @return {boolean} Returns true when `fn` is a typed-function","   */","  function isTypedFunction (fn) {","    return typeof fn === 'function' && typeof fn.signatures === 'object';","  }","","  // namespaces not available in the parser for safety reasons","  var unsafe = {","    'expression': true,","    'type': true,","    'error': true","  };","","  return math_import;","}","","exports.math = true; // request access to the math namespace as 5th argument of the factory function","exports.name = 'import';","exports.factory = factory;","exports.lazy = true;",""],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"56":1,"57":249,"58":249,"59":0,"62":249,"63":1,"66":249,"67":217,"70":32,"71":32,"72":248,"75":0,"77":0,"78":0,"79":0,"80":0,"81":0,"83":0,"84":0,"87":0,"93":0,"94":0,"106":1,"108":0,"110":0,"113":0,"114":0,"116":0,"120":0,"123":0,"124":0,"125":0,"126":0,"128":0,"131":0,"132":0,"133":0,"134":0,"135":0,"137":0,"140":0,"141":0,"145":1,"146":0,"147":0,"148":0,"149":0,"154":0,"155":0,"156":0,"168":1,"169":0,"170":0,"171":0,"172":0,"173":0,"175":0,"178":0,"179":0,"182":0,"191":1,"192":217,"193":214,"194":214,"195":214,"196":214,"198":214,"199":10,"200":10,"201":0,"205":10,"206":0,"211":0,"214":0,"217":10,"218":10,"221":0,"222":0,"226":214,"227":211,"229":211,"230":202,"231":202,"236":3,"237":3,"238":3,"239":3,"244":214,"249":3,"259":1,"260":0,"278":1,"279":10,"283":1,"289":1,"292":1,"293":1,"294":1,"295":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/error/ArgumentsError.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/error/ArgumentsError.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1,"11":1,"12":1,"13":1,"14":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"ArgumentsError","line":12,"loc":{"start":{"line":12,"column":0},"end":{"line":12,"column":45}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":27,"column":1}},"2":{"start":{"line":13,"column":2},"end":{"line":15,"column":3}},"3":{"start":{"line":14,"column":4},"end":{"line":14,"column":78}},"4":{"start":{"line":17,"column":2},"end":{"line":17,"column":15}},"5":{"start":{"line":18,"column":2},"end":{"line":18,"column":21}},"6":{"start":{"line":19,"column":2},"end":{"line":19,"column":17}},"7":{"start":{"line":20,"column":2},"end":{"line":20,"column":17}},"8":{"start":{"line":22,"column":2},"end":{"line":24,"column":67}},"9":{"start":{"line":26,"column":2},"end":{"line":26,"column":35}},"10":{"start":{"line":29,"column":0},"end":{"line":29,"column":39}},"11":{"start":{"line":30,"column":0},"end":{"line":30,"column":45}},"12":{"start":{"line":31,"column":0},"end":{"line":31,"column":49}},"13":{"start":{"line":32,"column":0},"end":{"line":32,"column":49}},"14":{"start":{"line":34,"column":0},"end":{"line":34,"column":32}}},"branchMap":{"1":{"line":13,"type":"if","locations":[{"start":{"line":13,"column":2},"end":{"line":13,"column":2}},{"start":{"line":13,"column":2},"end":{"line":13,"column":2}}]},"2":{"line":24,"type":"cond-expr","locations":[{"start":{"line":24,"column":35},"end":{"line":24,"column":44}},{"start":{"line":24,"column":48},"end":{"line":24,"column":50}}]}},"code":["'use strict';","","/**"," * Create a syntax error with the message:"," *     'Wrong number of arguments in function <fn> (<count> provided, <min>-<max> expected)'"," * @param {string} fn     Function name"," * @param {number} count  Actual argument count"," * @param {number} min    Minimum required argument count"," * @param {number} [max]  Maximum required argument count"," * @extends Error"," */","function ArgumentsError(fn, count, min, max) {","  if (!(this instanceof ArgumentsError)) {","    throw new SyntaxError('Constructor must be called with the new operator');","  }","","  this.fn = fn;","  this.count = count;","  this.min = min;","  this.max = max;","","  this.message = 'Wrong number of arguments in function ' + fn +","      ' (' + count + ' provided, ' +","      min + ((max != undefined) ? ('-' + max) : '') + ' expected)';","","  this.stack = (new Error()).stack;","}","","ArgumentsError.prototype = new Error();","ArgumentsError.prototype.constructor = Error;","ArgumentsError.prototype.name = 'ArgumentsError';","ArgumentsError.prototype.isArgumentsError = true;","","module.exports = ArgumentsError;",""],"l":{"12":1,"13":0,"14":0,"17":0,"18":0,"19":0,"20":0,"22":0,"26":0,"29":1,"30":1,"31":1,"32":1,"34":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/core/function/config.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/core/function/config.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1,"17":1,"18":1,"19":1,"20":0,"21":1,"22":0,"23":0,"24":1,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":1,"32":1,"33":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":51}}},"2":{"name":"_config","line":43,"loc":{"start":{"line":43,"column":2},"end":{"line":43,"column":28}}},"3":{"name":"contains","line":81,"loc":{"start":{"line":81,"column":0},"end":{"line":81,"column":32}}},"4":{"name":"findIndex","line":91,"loc":{"start":{"line":91,"column":0},"end":{"line":91,"column":33}}},"5":{"name":"(anonymous_5)","line":93,"loc":{"start":{"line":93,"column":11},"end":{"line":93,"column":24}}},"6":{"name":"validateOption","line":105,"loc":{"start":{"line":105,"column":0},"end":{"line":105,"column":47}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":43}},"2":{"start":{"line":5,"column":0},"end":{"line":73,"column":1}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":35}},"4":{"start":{"line":7,"column":2},"end":{"line":7,"column":51}},"5":{"start":{"line":43,"column":2},"end":{"line":66,"column":3}},"6":{"start":{"line":44,"column":4},"end":{"line":65,"column":5}},"7":{"start":{"line":45,"column":6},"end":{"line":45,"column":38}},"8":{"start":{"line":48,"column":6},"end":{"line":48,"column":48}},"9":{"start":{"line":49,"column":6},"end":{"line":49,"column":48}},"10":{"start":{"line":52,"column":6},"end":{"line":52,"column":41}},"11":{"start":{"line":54,"column":6},"end":{"line":54,"column":38}},"12":{"start":{"line":56,"column":6},"end":{"line":56,"column":42}},"13":{"start":{"line":59,"column":6},"end":{"line":59,"column":47}},"14":{"start":{"line":61,"column":6},"end":{"line":61,"column":18}},"15":{"start":{"line":64,"column":6},"end":{"line":64,"column":34}},"16":{"start":{"line":69,"column":2},"end":{"line":69,"column":26}},"17":{"start":{"line":70,"column":2},"end":{"line":70,"column":26}},"18":{"start":{"line":72,"column":2},"end":{"line":72,"column":17}},"19":{"start":{"line":81,"column":0},"end":{"line":83,"column":1}},"20":{"start":{"line":82,"column":2},"end":{"line":82,"column":36}},"21":{"start":{"line":91,"column":0},"end":{"line":97,"column":1}},"22":{"start":{"line":92,"column":2},"end":{"line":96,"column":35}},"23":{"start":{"line":94,"column":8},"end":{"line":94,"column":31}},"24":{"start":{"line":105,"column":0},"end":{"line":120,"column":1}},"25":{"start":{"line":106,"column":2},"end":{"line":119,"column":3}},"26":{"start":{"line":107,"column":4},"end":{"line":107,"column":49}},"27":{"start":{"line":108,"column":4},"end":{"line":118,"column":5}},"28":{"start":{"line":111,"column":6},"end":{"line":111,"column":155}},"29":{"start":{"line":113,"column":6},"end":{"line":113,"column":36}},"30":{"start":{"line":117,"column":6},"end":{"line":117,"column":176}},"31":{"start":{"line":122,"column":0},"end":{"line":122,"column":24}},"32":{"start":{"line":123,"column":0},"end":{"line":123,"column":20}},"33":{"start":{"line":124,"column":0},"end":{"line":124,"column":26}}},"branchMap":{"1":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":4},"end":{"line":44,"column":4}},{"start":{"line":44,"column":4},"end":{"line":44,"column":4}}]},"2":{"line":106,"type":"if","locations":[{"start":{"line":106,"column":2},"end":{"line":106,"column":2}},{"start":{"line":106,"column":2},"end":{"line":106,"column":2}}]},"3":{"line":106,"type":"binary-expr","locations":[{"start":{"line":106,"column":6},"end":{"line":106,"column":33}},{"start":{"line":106,"column":37},"end":{"line":106,"column":69}}]},"4":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":4},"end":{"line":108,"column":4}},{"start":{"line":108,"column":4},"end":{"line":108,"column":4}}]}},"code":["'use strict';","","var object = require('../../utils/object');","","function factory (type, config, load, typed, math) {","  var MATRIX = ['Matrix', 'Array'];                   // valid values for option matrix","  var NUMBER = ['number', 'BigNumber', 'Fraction'];   // valid values for option number","","  /**","   * Set configuration options for math.js, and get current options.","   * Will emit a 'config' event, with arguments (curr, prev, changes).","   *","   * Syntax:","   *","   *     math.config(config: Object): Object","   *","   * Examples:","   *","   *     math.config().number;                // outputs 'number'","   *     math.eval('0.4');                    // outputs number 0.4","   *     math.config({number: 'Fraction'});","   *     math.eval('0.4');                    // outputs Fraction 2/5","   *","   * @param {Object} [options] Available options:","   *                            {number} epsilon","   *                              Minimum relative difference between two","   *                              compared values, used by all comparison functions.","   *                            {string} matrix","   *                              A string 'Matrix' (default) or 'Array'.","   *                            {string} number","   *                              A string 'number' (default), 'BigNumber', or 'Fraction'","   *                            {number} precision","   *                              The number of significant digits for BigNumbers.","   *                              Not applicable for Numbers.","   *                            {string} parenthesis","   *                              How to display parentheses in LaTeX and string","   *                              output.","   *                            {string} randomSeed","   *                              Random seed for seeded pseudo random number generator.","   *                              Set to null to randomly seed.","   * @return {Object} Returns the current configuration","   */","  function _config(options) {","    if (options) {","      var prev = object.clone(config);","","      // validate some of the options","      validateOption(options, 'matrix', MATRIX);","      validateOption(options, 'number', NUMBER);","","      // merge options","      object.deepExtend(config, options);","","      var curr = object.clone(config);","","      var changes = object.clone(options);","","      // emit 'config' event","      math.emit('config', curr, prev, changes);","","      return curr;","    }","    else {","      return object.clone(config);","    }","  }","","  // attach the valid options to the function so they can be extended","  _config.MATRIX = MATRIX;","  _config.NUMBER = NUMBER;","","  return _config;","}","","/**"," * Test whether an Array contains a specific item."," * @param {Array.<string>} array"," * @param {string} item"," * @return {boolean}"," */","function contains (array, item) {","  return array.indexOf(item) !== -1;","}","","/**"," * Find a string in an array. Case insensitive search"," * @param {Array.<string>} array"," * @param {string} item"," * @return {number} Returns the index when found. Returns -1 when not found"," */","function findIndex (array, item) {","  return array","      .map(function (i) {","        return i.toLowerCase();","      })","      .indexOf(item.toLowerCase());","}","","/**"," * Validate an option"," * @param {Object} options         Object with options"," * @param {string} name            Name of the option to validate"," * @param {Array.<string>} values  Array with valid values for this option"," */","function validateOption(options, name, values) {","  if (options[name] !== undefined && !contains(values, options[name])) {","    var index = findIndex(values, options[name]);","    if (index !== -1) {","      // right value, wrong casing","      // TODO: lower case values are deprecated since v3, remove this warning some day.","      console.warn('Warning: Wrong casing for configuration option \"' + name + '\", should be \"' + values[index] + '\" instead of \"' + options[name] + '\".');","","      options[name] = values[index]; // change the option to the right casing","    }","    else {","      // unknown value","      console.warn('Warning: Unknown value \"' + options[name] + '\" for configuration option \"' + name + '\". Available options: ' + values.map(JSON.stringify).join(', ') + '.');","    }","  }","}","","exports.name = 'config';","exports.math = true; // request the math namespace as fifth argument","exports.factory = factory;",""],"l":{"3":1,"5":1,"6":1,"7":1,"43":1,"44":0,"45":0,"48":0,"49":0,"52":0,"54":0,"56":0,"59":0,"61":0,"64":0,"69":1,"70":1,"72":1,"81":1,"82":0,"91":1,"92":0,"94":0,"105":1,"106":0,"107":0,"108":0,"111":0,"113":0,"117":0,"122":1,"123":1,"124":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/index.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":8,"column":2}}},"branchMap":{},"code":["module.exports = [","  require('./type'),        // data types (Matrix, Complex, Unit, ...)","  require('./constants'),   // constants","  require('./expression'),  // expression parsing","  require('./function'),    // functions","  require('./json'),        // serialization utility (math.json.reviver)","  require('./error')        // errors","];",""],"l":{"1":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/index.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":12,"column":2}}},"branchMap":{},"code":["module.exports = [","  require('./bignumber'),","  require('./boolean'),","  require('./chain'),","  require('./complex'),","  require('./fraction'),","  require('./matrix'),","  require('./number'),","  require('./resultset'),","  require('./string'),","  require('./unit')","];",""],"l":{"1":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/bignumber/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/bignumber/index.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":7,"column":2}}},"branchMap":{},"code":["module.exports = [","  // type","  require('./BigNumber'),","","  // construction function","  require('./function/bignumber')","];",""],"l":{"1":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/bignumber/BigNumber.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/bignumber/BigNumber.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":1,"15":1,"16":1,"17":1},"b":{"1":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"factory","line":3,"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":51}}},"2":{"name":"(anonymous_2)","line":18,"loc":{"start":{"line":18,"column":31},"end":{"line":18,"column":43}}},"3":{"name":"(anonymous_3)","line":31,"loc":{"start":{"line":31,"column":23},"end":{"line":31,"column":39}}},"4":{"name":"(anonymous_4)","line":36,"loc":{"start":{"line":36,"column":20},"end":{"line":36,"column":42}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":36}},"2":{"start":{"line":3,"column":0},"end":{"line":43,"column":1}},"3":{"start":{"line":4,"column":2},"end":{"line":4,"column":63}},"4":{"start":{"line":9,"column":2},"end":{"line":9,"column":41}},"5":{"start":{"line":10,"column":2},"end":{"line":10,"column":41}},"6":{"start":{"line":18,"column":2},"end":{"line":23,"column":4}},"7":{"start":{"line":19,"column":4},"end":{"line":22,"column":6}},"8":{"start":{"line":31,"column":2},"end":{"line":33,"column":4}},"9":{"start":{"line":32,"column":4},"end":{"line":32,"column":37}},"10":{"start":{"line":36,"column":2},"end":{"line":40,"column":5}},"11":{"start":{"line":37,"column":4},"end":{"line":39,"column":5}},"12":{"start":{"line":38,"column":6},"end":{"line":38,"column":54}},"13":{"start":{"line":42,"column":2},"end":{"line":42,"column":19}},"14":{"start":{"line":45,"column":0},"end":{"line":45,"column":27}},"15":{"start":{"line":46,"column":0},"end":{"line":46,"column":22}},"16":{"start":{"line":47,"column":0},"end":{"line":47,"column":26}},"17":{"start":{"line":48,"column":0},"end":{"line":48,"column":20}}},"branchMap":{"1":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":4},"end":{"line":37,"column":4}},{"start":{"line":37,"column":4},"end":{"line":37,"column":4}}]}},"code":["var Decimal = require('decimal.js');","","function factory (type, config, load, typed, math) {","  var BigNumber = Decimal.clone({precision: config.precision});","","  /**","   * Attach type information","   */","  BigNumber.prototype.type = 'BigNumber';","  BigNumber.prototype.isBigNumber = true;","","  /**","   * Get a JSON representation of a BigNumber containing","   * type information","   * @returns {Object} Returns a JSON object structured as:","   *                   `{\"mathjs\": \"BigNumber\", \"value\": \"0.2\"}`","   */","  BigNumber.prototype.toJSON = function () {","    return {","      mathjs: 'BigNumber',","      value: this.toString()","    };","  };","","  /**","   * Instantiate a BigNumber from a JSON object","   * @param {Object} json  a JSON object structured as:","   *                       `{\"mathjs\": \"BigNumber\", \"value\": \"0.2\"}`","   * @return {BigNumber}","   */","  BigNumber.fromJSON = function (json) {","    return new BigNumber(json.value);","  };","","  // listen for changed in the configuration, automatically apply changed precision","  math.on('config', function (curr, prev) {","    if (curr.precision !== prev.precision) {","      BigNumber.config({ precision: curr.precision });","    }","  });","","  return BigNumber;","}","","exports.name = 'BigNumber';","exports.path = 'type';","exports.factory = factory;","exports.math = true; // request access to the math namespace"],"l":{"1":1,"3":1,"4":0,"9":0,"10":0,"18":0,"19":0,"31":0,"32":0,"36":0,"37":0,"38":0,"42":0,"45":1,"46":1,"47":1,"48":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/bignumber/function/bignumber.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/bignumber/function/bignumber.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1,"11":1,"12":1,"13":1},"b":{},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":32,"loc":{"start":{"line":32,"column":8},"end":{"line":32,"column":20}}},"3":{"name":"(anonymous_3)","line":36,"loc":{"start":{"line":36,"column":14},"end":{"line":36,"column":27}}},"4":{"name":"(anonymous_4)","line":41,"loc":{"start":{"line":41,"column":14},"end":{"line":41,"column":27}}},"5":{"name":"(anonymous_5)","line":45,"loc":{"start":{"line":45,"column":17},"end":{"line":45,"column":30}}},"6":{"name":"(anonymous_6)","line":50,"loc":{"start":{"line":50,"column":16},"end":{"line":50,"column":29}}},"7":{"name":"(anonymous_7)","line":54,"loc":{"start":{"line":54,"column":22},"end":{"line":54,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":59}},"2":{"start":{"line":5,"column":0},"end":{"line":65,"column":1}},"3":{"start":{"line":31,"column":2},"end":{"line":57,"column":5}},"4":{"start":{"line":33,"column":6},"end":{"line":33,"column":35}},"5":{"start":{"line":38,"column":6},"end":{"line":38,"column":40}},"6":{"start":{"line":42,"column":6},"end":{"line":42,"column":35}},"7":{"start":{"line":47,"column":6},"end":{"line":47,"column":15}},"8":{"start":{"line":51,"column":6},"end":{"line":51,"column":46}},"9":{"start":{"line":55,"column":6},"end":{"line":55,"column":35}},"10":{"start":{"line":59,"column":2},"end":{"line":62,"column":4}},"11":{"start":{"line":64,"column":2},"end":{"line":64,"column":19}},"12":{"start":{"line":67,"column":0},"end":{"line":67,"column":27}},"13":{"start":{"line":68,"column":0},"end":{"line":68,"column":26}}},"branchMap":{},"code":["'use strict';","","var deepMap = require('../../../utils/collection/deepMap');","","function factory (type, config, load, typed) {","  /**","   * Create a BigNumber, which can store numbers with arbitrary precision.","   * When a matrix is provided, all elements will be converted to BigNumber.","   *","   * Syntax:","   *","   *    math.bignumber(x)","   *","   * Examples:","   *","   *    0.1 + 0.2;                                  // returns number 0.30000000000000004","   *    math.bignumber(0.1) + math.bignumber(0.2);  // returns BigNumber 0.3","   *","   *","   *    7.2e500;                                    // returns number Infinity","   *    math.bignumber('7.2e500');                  // returns BigNumber 7.2e500","   *","   * See also:","   *","   *    boolean, complex, index, matrix, string, unit","   *","   * @param {number | string | Fraction | BigNumber | Array | Matrix | boolean | null} [value]  Value for the big number,","   *                                                    0 by default.","   * @returns {BigNumber} The created bignumber","   */","  var bignumber = typed('bignumber', {","    '': function () {","      return new type.BigNumber(0);","    },","","    'number': function (x) {","      // convert to string to prevent errors in case of >15 digits","      return new type.BigNumber(x + '');","    },","","    'string': function (x) {","      return new type.BigNumber(x);","    },","","    'BigNumber': function (x) {","      // we assume a BigNumber is immutable","      return x;","    },","","    'Fraction': function (x) {","      return new type.BigNumber(x.n).div(x.d);","    },","","    'Array | Matrix': function (x) {","      return deepMap(x, bignumber);","    }","  });","","  bignumber.toTex = {","    0: '0',","    1: '\\\\left(${args[0]}\\\\right)'","  };","","  return bignumber;","}","","exports.name = 'bignumber';","exports.factory = factory;",""],"l":{"3":1,"5":1,"31":1,"33":0,"38":0,"42":0,"47":0,"51":0,"55":0,"59":1,"64":1,"67":1,"68":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/utils/collection/deepMap.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/utils/collection/deepMap.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"deepMap","line":15,"loc":{"start":{"line":15,"column":17},"end":{"line":15,"column":62}}},"2":{"name":"(anonymous_2)","line":18,"loc":{"start":{"line":18,"column":21},"end":{"line":18,"column":34}}}},"statementMap":{"1":{"start":{"line":15,"column":0},"end":{"line":25,"column":2}},"2":{"start":{"line":16,"column":2},"end":{"line":24,"column":3}},"3":{"start":{"line":18,"column":4},"end":{"line":20,"column":7}},"4":{"start":{"line":19,"column":6},"end":{"line":19,"column":45}},"5":{"start":{"line":23,"column":4},"end":{"line":23,"column":27}}},"branchMap":{"1":{"line":16,"type":"if","locations":[{"start":{"line":16,"column":2},"end":{"line":16,"column":2}},{"start":{"line":16,"column":2},"end":{"line":16,"column":2}}]},"2":{"line":16,"type":"binary-expr","locations":[{"start":{"line":16,"column":6},"end":{"line":16,"column":11}},{"start":{"line":16,"column":16},"end":{"line":16,"column":47}}]}},"code":["'use strict';","","/**"," * Execute the callback function element wise for each element in array and any"," * nested array"," * Returns an array with the results"," * @param {Array | Matrix} array"," * @param {Function} callback   The callback is called with two parameters:"," *                              value1 and value2, which contain the current"," *                              element of both arrays."," * @param {boolean} [skipZeros] Invoke callback function for non-zero values only."," *"," * @return {Array | Matrix} res"," */","module.exports = function deepMap(array, callback, skipZeros) {","  if (array && (typeof array.map === 'function')) {","    // TODO: replace array.map with a for loop to improve performance","    return array.map(function (x) {","      return deepMap(x, callback, skipZeros);","    });","  }","  else {","    return callback(array);","  }","};",""],"l":{"15":1,"16":0,"18":0,"19":0,"23":0}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/boolean.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/boolean.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":1,"20":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":34,"loc":{"start":{"line":34,"column":8},"end":{"line":34,"column":20}}},"3":{"name":"(anonymous_3)","line":38,"loc":{"start":{"line":38,"column":15},"end":{"line":38,"column":28}}},"4":{"name":"(anonymous_4)","line":42,"loc":{"start":{"line":42,"column":14},"end":{"line":42,"column":27}}},"5":{"name":"(anonymous_5)","line":46,"loc":{"start":{"line":46,"column":17},"end":{"line":46,"column":30}}},"6":{"name":"(anonymous_6)","line":50,"loc":{"start":{"line":50,"column":14},"end":{"line":50,"column":27}}},"7":{"name":"(anonymous_7)","line":69,"loc":{"start":{"line":69,"column":22},"end":{"line":69,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":55}},"2":{"start":{"line":5,"column":0},"end":{"line":75,"column":1}},"3":{"start":{"line":33,"column":2},"end":{"line":72,"column":5}},"4":{"start":{"line":35,"column":6},"end":{"line":35,"column":19}},"5":{"start":{"line":39,"column":6},"end":{"line":39,"column":15}},"6":{"start":{"line":43,"column":6},"end":{"line":43,"column":17}},"7":{"start":{"line":47,"column":6},"end":{"line":47,"column":25}},"8":{"start":{"line":52,"column":6},"end":{"line":52,"column":34}},"9":{"start":{"line":53,"column":6},"end":{"line":58,"column":7}},"10":{"start":{"line":54,"column":8},"end":{"line":54,"column":20}},"11":{"start":{"line":56,"column":11},"end":{"line":58,"column":7}},"12":{"start":{"line":57,"column":8},"end":{"line":57,"column":21}},"13":{"start":{"line":61,"column":6},"end":{"line":61,"column":26}},"14":{"start":{"line":62,"column":6},"end":{"line":64,"column":7}},"15":{"start":{"line":63,"column":8},"end":{"line":63,"column":21}},"16":{"start":{"line":66,"column":6},"end":{"line":66,"column":65}},"17":{"start":{"line":70,"column":6},"end":{"line":70,"column":30}},"18":{"start":{"line":74,"column":2},"end":{"line":74,"column":14}},"19":{"start":{"line":77,"column":0},"end":{"line":77,"column":25}},"20":{"start":{"line":78,"column":0},"end":{"line":78,"column":26}}},"branchMap":{"1":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":6},"end":{"line":53,"column":6}},{"start":{"line":53,"column":6},"end":{"line":53,"column":6}}]},"2":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":11},"end":{"line":56,"column":11}},{"start":{"line":56,"column":11},"end":{"line":56,"column":11}}]},"3":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":6},"end":{"line":62,"column":6}},{"start":{"line":62,"column":6},"end":{"line":62,"column":6}}]},"4":{"line":62,"type":"binary-expr","locations":[{"start":{"line":62,"column":10},"end":{"line":62,"column":17}},{"start":{"line":62,"column":21},"end":{"line":62,"column":32}}]}},"code":["'use strict';","","var deepMap = require('./../utils/collection/deepMap');","","function factory (type, config, load, typed) {","  /**","   * Create a boolean or convert a string or number to a boolean.","   * In case of a number, `true` is returned for non-zero numbers, and `false` in","   * case of zero.","   * Strings can be `'true'` or `'false'`, or can contain a number.","   * When value is a matrix, all elements will be converted to boolean.","   *","   * Syntax:","   *","   *    math.boolean(x)","   *","   * Examples:","   *","   *    math.boolean(0);     // returns false","   *    math.boolean(1);     // returns true","   *    math.boolean(-3);     // returns true","   *    math.boolean('true');     // returns true","   *    math.boolean('false');     // returns false","   *    math.boolean([1, 0, 1, 1]);     // returns [true, false, true, true]","   *","   * See also:","   *","   *    bignumber, complex, index, matrix, string, unit","   *","   * @param {string | number | boolean | Array | Matrix | null} value  A value of any type","   * @return {boolean | Array | Matrix} The boolean value","   */","  var bool = typed('bool', {","    '': function () {","      return false;","    },","","    'boolean': function (x) {","      return x;","    },","","    'number': function (x) {","      return !!x;","    },","","    'BigNumber': function (x) {","      return !x.isZero();","    },","","    'string': function (x) {","      // try case insensitive","      var lcase = x.toLowerCase();","      if (lcase === 'true') {","        return true;","      }","      else if (lcase === 'false') {","        return false;","      }","","      // test whether value is a valid number","      var num = Number(x);","      if (x != '' && !isNaN(num)) {","        return !!num;","      }","","      throw new Error('Cannot convert \"' + x + '\" to a boolean');","    },","","    'Array | Matrix': function (x) {","      return deepMap(x, bool);","    }","  });","","  return bool;","}","","exports.name = 'boolean';","exports.factory = factory;",""],"l":{"3":1,"5":1,"33":1,"35":0,"39":0,"43":0,"47":0,"52":0,"53":0,"54":0,"56":0,"57":0,"61":0,"62":0,"63":0,"66":0,"70":0,"74":1,"77":1,"78":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/chain/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/chain/index.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":7,"column":2}}},"branchMap":{},"code":["module.exports = [","  // type","  require('./Chain'),","","  // construction function","  require('./function/chain')","];",""],"l":{"1":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/chain/Chain.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/chain/Chain.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1,"11":1,"12":1,"13":0,"14":1,"15":0,"16":1,"17":0,"18":1,"19":12,"20":10,"21":1,"22":164,"23":0,"24":0,"25":0,"26":0,"27":1,"28":10,"29":0,"30":0,"31":0,"32":0,"33":1,"34":1,"35":0,"36":1,"37":12,"38":12,"39":1,"40":1,"41":211,"42":164,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[10,2],"5":[0,0],"6":[0,1],"7":[12,0],"8":[164,47]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":12,"7":164,"8":0,"9":10,"10":0,"11":1,"12":211},"fnMap":{"1":{"name":"factory","line":6,"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":51}}},"2":{"name":"Chain","line":25,"loc":{"start":{"line":25,"column":2},"end":{"line":25,"column":25}}},"3":{"name":"(anonymous_3)","line":49,"loc":{"start":{"line":49,"column":25},"end":{"line":49,"column":37}}},"4":{"name":"(anonymous_4)","line":58,"loc":{"start":{"line":58,"column":28},"end":{"line":58,"column":40}}},"5":{"name":"(anonymous_5)","line":66,"loc":{"start":{"line":66,"column":29},"end":{"line":66,"column":41}}},"6":{"name":"createProxy","line":77,"loc":{"start":{"line":77,"column":2},"end":{"line":77,"column":33}}},"7":{"name":"createLazyProxy","line":90,"loc":{"start":{"line":90,"column":2},"end":{"line":90,"column":43}}},"8":{"name":"outerResolver","line":91,"loc":{"start":{"line":91,"column":32},"end":{"line":91,"column":57}}},"9":{"name":"chainify","line":107,"loc":{"start":{"line":107,"column":2},"end":{"line":107,"column":25}}},"10":{"name":"(anonymous_10)","line":108,"loc":{"start":{"line":108,"column":11},"end":{"line":108,"column":23}}},"11":{"name":"(anonymous_11)","line":132,"loc":{"start":{"line":132,"column":22},"end":{"line":132,"column":44}}},"12":{"name":"(anonymous_12)","line":151,"loc":{"start":{"line":151,"column":20},"end":{"line":151,"column":52}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":50}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":46}},"3":{"start":{"line":6,"column":0},"end":{"line":159,"column":1}},"4":{"start":{"line":25,"column":2},"end":{"line":36,"column":3}},"5":{"start":{"line":26,"column":4},"end":{"line":28,"column":5}},"6":{"start":{"line":27,"column":6},"end":{"line":27,"column":80}},"7":{"start":{"line":30,"column":4},"end":{"line":35,"column":5}},"8":{"start":{"line":31,"column":6},"end":{"line":31,"column":31}},"9":{"start":{"line":34,"column":6},"end":{"line":34,"column":25}},"10":{"start":{"line":41,"column":2},"end":{"line":41,"column":33}},"11":{"start":{"line":42,"column":2},"end":{"line":42,"column":33}},"12":{"start":{"line":49,"column":2},"end":{"line":51,"column":4}},"13":{"start":{"line":50,"column":4},"end":{"line":50,"column":22}},"14":{"start":{"line":58,"column":2},"end":{"line":60,"column":4}},"15":{"start":{"line":59,"column":4},"end":{"line":59,"column":22}},"16":{"start":{"line":66,"column":2},"end":{"line":68,"column":4}},"17":{"start":{"line":67,"column":4},"end":{"line":67,"column":30}},"18":{"start":{"line":77,"column":2},"end":{"line":81,"column":3}},"19":{"start":{"line":78,"column":4},"end":{"line":80,"column":5}},"20":{"start":{"line":79,"column":6},"end":{"line":79,"column":43}},"21":{"start":{"line":90,"column":2},"end":{"line":99,"column":3}},"22":{"start":{"line":91,"column":4},"end":{"line":98,"column":7}},"23":{"start":{"line":92,"column":6},"end":{"line":92,"column":26}},"24":{"start":{"line":93,"column":6},"end":{"line":95,"column":7}},"25":{"start":{"line":94,"column":8},"end":{"line":94,"column":28}},"26":{"start":{"line":97,"column":6},"end":{"line":97,"column":23}},"27":{"start":{"line":107,"column":2},"end":{"line":116,"column":3}},"28":{"start":{"line":108,"column":4},"end":{"line":115,"column":5}},"29":{"start":{"line":109,"column":6},"end":{"line":109,"column":30}},"30":{"start":{"line":110,"column":6},"end":{"line":112,"column":7}},"31":{"start":{"line":111,"column":8},"end":{"line":111,"column":35}},"32":{"start":{"line":114,"column":6},"end":{"line":114,"column":43}},"33":{"start":{"line":132,"column":2},"end":{"line":145,"column":4}},"34":{"start":{"line":133,"column":4},"end":{"line":144,"column":5}},"35":{"start":{"line":135,"column":6},"end":{"line":135,"column":30}},"36":{"start":{"line":139,"column":6},"end":{"line":143,"column":7}},"37":{"start":{"line":140,"column":8},"end":{"line":142,"column":9}},"38":{"start":{"line":141,"column":10},"end":{"line":141,"column":40}},"39":{"start":{"line":148,"column":2},"end":{"line":148,"column":26}},"40":{"start":{"line":151,"column":2},"end":{"line":156,"column":5}},"41":{"start":{"line":152,"column":4},"end":{"line":155,"column":5}},"42":{"start":{"line":154,"column":6},"end":{"line":154,"column":38}},"43":{"start":{"line":158,"column":2},"end":{"line":158,"column":15}},"44":{"start":{"line":161,"column":0},"end":{"line":161,"column":23}},"45":{"start":{"line":162,"column":0},"end":{"line":162,"column":22}},"46":{"start":{"line":163,"column":0},"end":{"line":163,"column":26}},"47":{"start":{"line":164,"column":0},"end":{"line":164,"column":20}},"48":{"start":{"line":165,"column":0},"end":{"line":165,"column":21}}},"branchMap":{"1":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":4},"end":{"line":26,"column":4}},{"start":{"line":26,"column":4},"end":{"line":26,"column":4}}]},"2":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":4},"end":{"line":30,"column":4}},{"start":{"line":30,"column":4},"end":{"line":30,"column":4}}]},"3":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":8},"end":{"line":30,"column":13}},{"start":{"line":30,"column":17},"end":{"line":30,"column":30}}]},"4":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":4},"end":{"line":78,"column":4}},{"start":{"line":78,"column":4},"end":{"line":78,"column":4}}]},"5":{"line":93,"type":"if","locations":[{"start":{"line":93,"column":6},"end":{"line":93,"column":6}},{"start":{"line":93,"column":6},"end":{"line":93,"column":6}}]},"6":{"line":133,"type":"if","locations":[{"start":{"line":133,"column":4},"end":{"line":133,"column":4}},{"start":{"line":133,"column":4},"end":{"line":133,"column":4}}]},"7":{"line":140,"type":"if","locations":[{"start":{"line":140,"column":8},"end":{"line":140,"column":8}},{"start":{"line":140,"column":8},"end":{"line":140,"column":8}}]},"8":{"line":152,"type":"if","locations":[{"start":{"line":152,"column":4},"end":{"line":152,"column":4}},{"start":{"line":152,"column":4},"end":{"line":152,"column":4}}]}},"code":["'use strict';","","var format = require('../../utils/string').format;","var lazy = require('../../utils/object').lazy;","","function factory (type, config, load, typed, math) {","  /**","   * @constructor Chain","   * Wrap any value in a chain, allowing to perform chained operations on","   * the value.","   *","   * All methods available in the math.js library can be called upon the chain,","   * and then will be evaluated with the value itself as first argument.","   * The chain can be closed by executing chain.done(), which will return","   * the final value.","   *","   * The Chain has a number of special functions:","   * - done()             Finalize the chained operation and return the","   *                      chain's value.","   * - valueOf()          The same as done()","   * - toString()         Returns a string representation of the chain's value.","   *","   * @param {*} [value]","   */","  function Chain (value) {","    if (!(this instanceof Chain)) {","      throw new SyntaxError('Constructor must be called with the new operator');","    }","","    if (value && value.isChain) {","      this.value = value.value;","    }","    else {","      this.value = value;","    }","  }","","  /**","   * Attach type information","   */","  Chain.prototype.type = 'Chain';","  Chain.prototype.isChain = true;","","  /**","   * Close the chain. Returns the final value.","   * Does the same as method valueOf()","   * @returns {*} value","   */","  Chain.prototype.done = function () {","    return this.value;","  };","","  /**","   * Close the chain. Returns the final value.","   * Does the same as method done()","   * @returns {*} value","   */","  Chain.prototype.valueOf = function () {","    return this.value;","  };","","  /**","   * Get a string representation of the value in the chain","   * @returns {string}","   */","  Chain.prototype.toString = function () {","    return format(this.value);","  };","","  /**","   * Create a proxy method for the chain","   * @param {string} name","   * @param {Function} fn      The function to be proxied","   *                           If fn is no function, it is silently ignored.","   * @private","   */","  function createProxy(name, fn) {","    if (typeof fn === 'function') {","      Chain.prototype[name] = chainify(fn);","    }","  }","","  /**","   * Create a proxy method for the chain","   * @param {string} name","   * @param {function} resolver   The function resolving with the","   *                              function to be proxied","   * @private","   */","  function createLazyProxy(name, resolver) {","    lazy(Chain.prototype, name, function outerResolver() {","      var fn = resolver();","      if (typeof fn === 'function') {","        return chainify(fn);","      }","","      return undefined; // if not a function, ignore","    });","  }","","  /**","   * Make a function chainable","   * @param {function} fn","   * @return {Function} chain function","   * @private","   */","  function chainify (fn) {","    return function () {","      var args = [this.value];  // `this` will be the context of a Chain instance","      for (var i = 0; i < arguments.length; i++) {","        args[i + 1] = arguments[i];","      }","","      return new Chain(fn.apply(fn, args));","    }","  }","","  /**","   * Create a proxy for a single method, or an object with multiple methods.","   * Example usage:","   *","   *   Chain.createProxy('add', function add (x, y) {...});","   *   Chain.createProxy({","   *     add:      function add (x, y) {...},","   *     subtract: function subtract (x, y) {...}","   *   }","   *","   * @param {string | Object} arg0   A name (string), or an object with","   *                                 functions","   * @param {*} [arg1]               A function, when arg0 is a name","   */","  Chain.createProxy = function (arg0, arg1) {","    if (typeof arg0 === 'string') {","      // createProxy(name, value)","      createProxy(arg0, arg1);","    }","    else {","      // createProxy(values)","      for (var prop in arg0) {","        if (arg0.hasOwnProperty(prop)) {","          createProxy(prop, arg0[prop]);","        }","      }","    }","  };","","  // create proxy for everything that is in math.js","  Chain.createProxy(math);","","  // register on the import event, automatically add a proxy for every imported function.","  math.on('import', function (name, resolver, path) {","    if (path === undefined) {","      // an imported function (not a data type or something special)","      createLazyProxy(name, resolver);","    }","  });","","  return Chain;","}","","exports.name = 'Chain';","exports.path = 'type';","exports.factory = factory;","exports.math = true;  // require providing the math namespace as 5th argument","exports.lazy = false; // we need to register a listener on the import events, so no lazy loading",""],"l":{"3":1,"4":1,"6":1,"25":1,"26":0,"27":0,"30":0,"31":0,"34":0,"41":1,"42":1,"49":1,"50":0,"58":1,"59":0,"66":1,"67":0,"77":1,"78":12,"79":10,"90":1,"91":164,"92":0,"93":0,"94":0,"97":0,"107":1,"108":10,"109":0,"110":0,"111":0,"114":0,"132":1,"133":1,"135":0,"139":1,"140":12,"141":12,"148":1,"151":1,"152":211,"154":164,"158":1,"161":1,"162":1,"163":1,"164":1,"165":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/utils/string.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/utils/string.js","s":{"1":1,"2":1,"3":1,"4":0,"5":1,"6":0,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":1,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":11,"loc":{"start":{"line":11,"column":19},"end":{"line":11,"column":35}}},"2":{"name":"(anonymous_2)","line":20,"loc":{"start":{"line":20,"column":19},"end":{"line":20,"column":42}}},"3":{"name":"(anonymous_3)","line":61,"loc":{"start":{"line":61,"column":17},"end":{"line":61,"column":42}}},"4":{"name":"formatArray","line":127,"loc":{"start":{"line":127,"column":0},"end":{"line":127,"column":38}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":46}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":62}},"3":{"start":{"line":11,"column":0},"end":{"line":13,"column":2}},"4":{"start":{"line":12,"column":2},"end":{"line":12,"column":35}},"5":{"start":{"line":20,"column":0},"end":{"line":24,"column":2}},"6":{"start":{"line":21,"column":2},"end":{"line":21,"column":42}},"7":{"start":{"line":22,"column":2},"end":{"line":22,"column":24}},"8":{"start":{"line":23,"column":2},"end":{"line":23,"column":49}},"9":{"start":{"line":61,"column":0},"end":{"line":115,"column":2}},"10":{"start":{"line":62,"column":2},"end":{"line":64,"column":3}},"11":{"start":{"line":63,"column":4},"end":{"line":63,"column":40}},"12":{"start":{"line":66,"column":2},"end":{"line":68,"column":3}},"13":{"start":{"line":67,"column":4},"end":{"line":67,"column":43}},"14":{"start":{"line":70,"column":2},"end":{"line":79,"column":3}},"15":{"start":{"line":71,"column":4},"end":{"line":78,"column":5}},"16":{"start":{"line":73,"column":6},"end":{"line":73,"column":49}},"17":{"start":{"line":77,"column":6},"end":{"line":77,"column":30}},"18":{"start":{"line":81,"column":2},"end":{"line":83,"column":3}},"19":{"start":{"line":82,"column":4},"end":{"line":82,"column":39}},"20":{"start":{"line":85,"column":2},"end":{"line":87,"column":3}},"21":{"start":{"line":86,"column":4},"end":{"line":86,"column":29}},"22":{"start":{"line":89,"column":2},"end":{"line":91,"column":3}},"23":{"start":{"line":90,"column":4},"end":{"line":90,"column":60}},"24":{"start":{"line":93,"column":2},"end":{"line":112,"column":3}},"25":{"start":{"line":94,"column":4},"end":{"line":111,"column":5}},"26":{"start":{"line":95,"column":6},"end":{"line":95,"column":35}},"27":{"start":{"line":97,"column":9},"end":{"line":111,"column":5}},"28":{"start":{"line":99,"column":6},"end":{"line":99,"column":30}},"29":{"start":{"line":102,"column":6},"end":{"line":102,"column":23}},"30":{"start":{"line":104,"column":6},"end":{"line":108,"column":7}},"31":{"start":{"line":105,"column":8},"end":{"line":107,"column":9}},"32":{"start":{"line":106,"column":10},"end":{"line":106,"column":80}},"33":{"start":{"line":110,"column":6},"end":{"line":110,"column":44}},"34":{"start":{"line":114,"column":2},"end":{"line":114,"column":23}},"35":{"start":{"line":127,"column":0},"end":{"line":143,"column":1}},"36":{"start":{"line":128,"column":2},"end":{"line":142,"column":3}},"37":{"start":{"line":129,"column":4},"end":{"line":129,"column":18}},"38":{"start":{"line":130,"column":4},"end":{"line":130,"column":27}},"39":{"start":{"line":131,"column":4},"end":{"line":136,"column":5}},"40":{"start":{"line":132,"column":6},"end":{"line":134,"column":7}},"41":{"start":{"line":133,"column":8},"end":{"line":133,"column":20}},"42":{"start":{"line":135,"column":6},"end":{"line":135,"column":44}},"43":{"start":{"line":137,"column":4},"end":{"line":137,"column":15}},"44":{"start":{"line":138,"column":4},"end":{"line":138,"column":15}},"45":{"start":{"line":141,"column":4},"end":{"line":141,"column":42}}},"branchMap":{"1":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":2},"end":{"line":62,"column":2}},{"start":{"line":62,"column":2},"end":{"line":62,"column":2}}]},"2":{"line":66,"type":"if","locations":[{"start":{"line":66,"column":2},"end":{"line":66,"column":2}},{"start":{"line":66,"column":2},"end":{"line":66,"column":2}}]},"3":{"line":66,"type":"binary-expr","locations":[{"start":{"line":66,"column":6},"end":{"line":66,"column":11}},{"start":{"line":66,"column":15},"end":{"line":66,"column":41}}]},"4":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":2},"end":{"line":70,"column":2}},{"start":{"line":70,"column":2},"end":{"line":70,"column":2}}]},"5":{"line":70,"type":"binary-expr","locations":[{"start":{"line":70,"column":6},"end":{"line":70,"column":11}},{"start":{"line":70,"column":15},"end":{"line":70,"column":40}}]},"6":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":4},"end":{"line":71,"column":4}},{"start":{"line":71,"column":4},"end":{"line":71,"column":4}}]},"7":{"line":71,"type":"binary-expr","locations":[{"start":{"line":71,"column":8},"end":{"line":71,"column":16}},{"start":{"line":71,"column":20},"end":{"line":71,"column":50}}]},"8":{"line":81,"type":"if","locations":[{"start":{"line":81,"column":2},"end":{"line":81,"column":2}},{"start":{"line":81,"column":2},"end":{"line":81,"column":2}}]},"9":{"line":85,"type":"if","locations":[{"start":{"line":85,"column":2},"end":{"line":85,"column":2}},{"start":{"line":85,"column":2},"end":{"line":85,"column":2}}]},"10":{"line":89,"type":"if","locations":[{"start":{"line":89,"column":2},"end":{"line":89,"column":2}},{"start":{"line":89,"column":2},"end":{"line":89,"column":2}}]},"11":{"line":90,"type":"cond-expr","locations":[{"start":{"line":90,"column":26},"end":{"line":90,"column":46}},{"start":{"line":90,"column":49},"end":{"line":90,"column":59}}]},"12":{"line":93,"type":"if","locations":[{"start":{"line":93,"column":2},"end":{"line":93,"column":2}},{"start":{"line":93,"column":2},"end":{"line":93,"column":2}}]},"13":{"line":93,"type":"binary-expr","locations":[{"start":{"line":93,"column":6},"end":{"line":93,"column":11}},{"start":{"line":93,"column":15},"end":{"line":93,"column":40}}]},"14":{"line":94,"type":"if","locations":[{"start":{"line":94,"column":4},"end":{"line":94,"column":4}},{"start":{"line":94,"column":4},"end":{"line":94,"column":4}}]},"15":{"line":97,"type":"if","locations":[{"start":{"line":97,"column":9},"end":{"line":97,"column":9}},{"start":{"line":97,"column":9},"end":{"line":97,"column":9}}]},"16":{"line":97,"type":"binary-expr","locations":[{"start":{"line":97,"column":13},"end":{"line":97,"column":18}},{"start":{"line":97,"column":22},"end":{"line":97,"column":56}}]},"17":{"line":105,"type":"if","locations":[{"start":{"line":105,"column":8},"end":{"line":105,"column":8}},{"start":{"line":105,"column":8},"end":{"line":105,"column":8}}]},"18":{"line":128,"type":"if","locations":[{"start":{"line":128,"column":2},"end":{"line":128,"column":2}},{"start":{"line":128,"column":2},"end":{"line":128,"column":2}}]},"19":{"line":132,"type":"if","locations":[{"start":{"line":132,"column":6},"end":{"line":132,"column":6}},{"start":{"line":132,"column":6},"end":{"line":132,"column":6}}]}},"code":["'use strict';","","var formatNumber = require('./number').format;","var formatBigNumber = require('./bignumber/formatter').format;","","/**"," * Test whether value is a string"," * @param {*} value"," * @return {boolean} isString"," */","exports.isString = function(value) {","  return typeof value === 'string';","};","","/**"," * Check if a text ends with a certain string."," * @param {string} text"," * @param {string} search"," */","exports.endsWith = function(text, search) {","  var start = text.length - search.length;","  var end = text.length;","  return (text.substring(start, end) === search);","};","","/**"," * Format a value of any type into a string."," *"," * Usage:"," *     math.format(value)"," *     math.format(value, precision)"," *"," * When value is a function:"," *"," * - When the function has a property `syntax`, it returns this"," *   syntax description."," * - In other cases, a string `'function'` is returned."," *"," * When `value` is an Object:"," *"," * - When the object contains a property `format` being a function, this"," *   function is invoked as `value.format(options)` and the result is returned."," * - When the object has its own `toString` method, this method is invoked"," *   and the result is returned."," * - In other cases the function will loop over all object properties and"," *   return JSON object notation like '{\"a\": 2, \"b\": 3}'."," *"," * Example usage:"," *     math.format(2/7);                // '0.2857142857142857'"," *     math.format(math.pi, 3);         // '3.14'"," *     math.format(new Complex(2, 3));  // '2 + 3i'"," *     math.format('hello');            // '\"hello\"'"," *"," * @param {*} value             Value to be stringified"," * @param {Object | number | Function} [options]  Formatting options. See"," *                                                lib/utils/number:format for a"," *                                                description of the available"," *                                                options."," * @return {string} str"," */","exports.format = function(value, options) {","  if (typeof value === 'number') {","    return formatNumber(value, options);","  }","","  if (value && value.isBigNumber === true) {","    return formatBigNumber(value, options);","  }","","  if (value && value.isFraction === true) {","    if (!options || options.fraction !== 'decimal') {","      // output as ratio, like '1/3'","      return (value.s * value.n) + '/' + value.d;","    }","    else {","      // output as decimal, like '0.(3)'","      return value.toString();","    }","  }","","  if (Array.isArray(value)) {","    return formatArray(value, options);","  }","","  if (exports.isString(value)) {","    return '\"' + value + '\"';","  }","","  if (typeof value === 'function') {","    return value.syntax ? String(value.syntax) : 'function';","  }","","  if (value && typeof value === 'object') {","    if (typeof value.format === 'function') {","      return value.format(options);","    }","    else if (value && value.toString() !== {}.toString()) {","      // this object has a non-native toString method, use that one","      return value.toString();","    }","    else {","      var entries = [];","","      for (var key in value) {","        if (value.hasOwnProperty(key)) {","          entries.push('\"' + key + '\": ' + exports.format(value[key], options));","        }","      }","","      return '{' + entries.join(', ') + '}';","    }","  }","","  return String(value);","};","","/**"," * Recursively format an n-dimensional matrix"," * Example output: \"[[1, 2], [3, 4]]\""," * @param {Array} array"," * @param {Object | number | Function} [options]  Formatting options. See"," *                                                lib/utils/number:format for a"," *                                                description of the available"," *                                                options."," * @returns {string} str"," */","function formatArray (array, options) {","  if (Array.isArray(array)) {","    var str = '[';","    var len = array.length;","    for (var i = 0; i < len; i++) {","      if (i != 0) {","        str += ', ';","      }","      str += formatArray(array[i], options);","    }","    str += ']';","    return str;","  }","  else {","    return exports.format(array, options);","  }","}",""],"l":{"3":1,"4":1,"11":1,"12":0,"20":1,"21":0,"22":0,"23":0,"61":1,"62":0,"63":0,"66":0,"67":0,"70":0,"71":0,"73":0,"77":0,"81":0,"82":0,"85":0,"86":0,"89":0,"90":0,"93":0,"94":0,"95":0,"97":0,"99":0,"102":0,"104":0,"105":0,"106":0,"110":0,"114":0,"127":1,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"135":0,"137":0,"138":0,"141":0}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/utils/bignumber/formatter.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/utils/bignumber/formatter.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":1,"40":0,"41":0,"42":0,"43":1,"44":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0,0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":65,"loc":{"start":{"line":65,"column":17},"end":{"line":65,"column":43}}},"2":{"name":"(anonymous_2)","line":144,"loc":{"start":{"line":144,"column":48},"end":{"line":144,"column":60}}},"3":{"name":"(anonymous_3)","line":164,"loc":{"start":{"line":164,"column":24},"end":{"line":164,"column":52}}},"4":{"name":"(anonymous_4)","line":179,"loc":{"start":{"line":179,"column":18},"end":{"line":179,"column":46}}}},"statementMap":{"1":{"start":{"line":65,"column":0},"end":{"line":154,"column":2}},"2":{"start":{"line":66,"column":2},"end":{"line":69,"column":3}},"3":{"start":{"line":68,"column":4},"end":{"line":68,"column":26}},"4":{"start":{"line":72,"column":2},"end":{"line":74,"column":3}},"5":{"start":{"line":73,"column":4},"end":{"line":73,"column":76}},"6":{"start":{"line":77,"column":2},"end":{"line":77,"column":24}},"7":{"start":{"line":78,"column":2},"end":{"line":78,"column":28}},"8":{"start":{"line":80,"column":2},"end":{"line":93,"column":3}},"9":{"start":{"line":82,"column":4},"end":{"line":84,"column":5}},"10":{"start":{"line":83,"column":6},"end":{"line":83,"column":34}},"11":{"start":{"line":87,"column":4},"end":{"line":92,"column":5}},"12":{"start":{"line":88,"column":6},"end":{"line":88,"column":26}},"13":{"start":{"line":90,"column":9},"end":{"line":92,"column":5}},"14":{"start":{"line":91,"column":6},"end":{"line":91,"column":36}},"15":{"start":{"line":96,"column":2},"end":{"line":153,"column":3}},"16":{"start":{"line":98,"column":6},"end":{"line":98,"column":47}},"17":{"start":{"line":101,"column":6},"end":{"line":101,"column":53}},"18":{"start":{"line":106,"column":6},"end":{"line":106,"column":23}},"19":{"start":{"line":107,"column":6},"end":{"line":107,"column":22}},"20":{"start":{"line":108,"column":6},"end":{"line":115,"column":7}},"21":{"start":{"line":109,"column":8},"end":{"line":111,"column":9}},"22":{"start":{"line":110,"column":10},"end":{"line":110,"column":44}},"23":{"start":{"line":112,"column":8},"end":{"line":114,"column":9}},"24":{"start":{"line":113,"column":10},"end":{"line":113,"column":44}},"25":{"start":{"line":118,"column":6},"end":{"line":121,"column":8}},"26":{"start":{"line":123,"column":6},"end":{"line":126,"column":9}},"27":{"start":{"line":129,"column":6},"end":{"line":129,"column":37}},"28":{"start":{"line":129,"column":26},"end":{"line":129,"column":37}},"29":{"start":{"line":132,"column":6},"end":{"line":132,"column":14}},"30":{"start":{"line":133,"column":6},"end":{"line":133,"column":28}},"31":{"start":{"line":134,"column":6},"end":{"line":141,"column":7}},"32":{"start":{"line":136,"column":8},"end":{"line":136,"column":61}},"33":{"start":{"line":140,"column":8},"end":{"line":140,"column":54}},"34":{"start":{"line":144,"column":6},"end":{"line":148,"column":9}},"35":{"start":{"line":145,"column":8},"end":{"line":145,"column":34}},"36":{"start":{"line":146,"column":8},"end":{"line":146,"column":29}},"37":{"start":{"line":147,"column":8},"end":{"line":147,"column":49}},"38":{"start":{"line":151,"column":6},"end":{"line":152,"column":55}},"39":{"start":{"line":164,"column":0},"end":{"line":171,"column":2}},"40":{"start":{"line":165,"column":2},"end":{"line":170,"column":3}},"41":{"start":{"line":166,"column":4},"end":{"line":166,"column":46}},"42":{"start":{"line":169,"column":4},"end":{"line":169,"column":33}},"43":{"start":{"line":179,"column":0},"end":{"line":183,"column":2}},"44":{"start":{"line":180,"column":2},"end":{"line":180,"column":39}}},"branchMap":{"1":{"line":66,"type":"if","locations":[{"start":{"line":66,"column":2},"end":{"line":66,"column":2}},{"start":{"line":66,"column":2},"end":{"line":66,"column":2}}]},"2":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":2},"end":{"line":72,"column":2}},{"start":{"line":72,"column":2},"end":{"line":72,"column":2}}]},"3":{"line":73,"type":"cond-expr","locations":[{"start":{"line":73,"column":27},"end":{"line":73,"column":32}},{"start":{"line":73,"column":36},"end":{"line":73,"column":74}}]},"4":{"line":73,"type":"cond-expr","locations":[{"start":{"line":73,"column":50},"end":{"line":73,"column":60}},{"start":{"line":73,"column":63},"end":{"line":73,"column":74}}]},"5":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":2},"end":{"line":80,"column":2}},{"start":{"line":80,"column":2},"end":{"line":80,"column":2}}]},"6":{"line":82,"type":"if","locations":[{"start":{"line":82,"column":4},"end":{"line":82,"column":4}},{"start":{"line":82,"column":4},"end":{"line":82,"column":4}}]},"7":{"line":87,"type":"if","locations":[{"start":{"line":87,"column":4},"end":{"line":87,"column":4}},{"start":{"line":87,"column":4},"end":{"line":87,"column":4}}]},"8":{"line":90,"type":"if","locations":[{"start":{"line":90,"column":9},"end":{"line":90,"column":9}},{"start":{"line":90,"column":9},"end":{"line":90,"column":9}}]},"9":{"line":96,"type":"switch","locations":[{"start":{"line":97,"column":4},"end":{"line":98,"column":47}},{"start":{"line":100,"column":4},"end":{"line":101,"column":53}},{"start":{"line":103,"column":4},"end":{"line":148,"column":9}},{"start":{"line":150,"column":4},"end":{"line":152,"column":55}}]},"10":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":6},"end":{"line":108,"column":6}},{"start":{"line":108,"column":6},"end":{"line":108,"column":6}}]},"11":{"line":108,"type":"binary-expr","locations":[{"start":{"line":108,"column":10},"end":{"line":108,"column":17}},{"start":{"line":108,"column":21},"end":{"line":108,"column":40}}]},"12":{"line":109,"type":"if","locations":[{"start":{"line":109,"column":8},"end":{"line":109,"column":8}},{"start":{"line":109,"column":8},"end":{"line":109,"column":8}}]},"13":{"line":112,"type":"if","locations":[{"start":{"line":112,"column":8},"end":{"line":112,"column":8}},{"start":{"line":112,"column":8},"end":{"line":112,"column":8}}]},"14":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":6},"end":{"line":129,"column":6}},{"start":{"line":129,"column":6},"end":{"line":129,"column":6}}]},"15":{"line":134,"type":"if","locations":[{"start":{"line":134,"column":6},"end":{"line":134,"column":6}},{"start":{"line":134,"column":6},"end":{"line":134,"column":6}}]},"16":{"line":134,"type":"binary-expr","locations":[{"start":{"line":134,"column":10},"end":{"line":134,"column":24}},{"start":{"line":134,"column":28},"end":{"line":134,"column":41}}]},"17":{"line":147,"type":"cond-expr","locations":[{"start":{"line":147,"column":34},"end":{"line":147,"column":44}},{"start":{"line":147,"column":47},"end":{"line":147,"column":48}}]},"18":{"line":165,"type":"if","locations":[{"start":{"line":165,"column":2},"end":{"line":165,"column":2}},{"start":{"line":165,"column":2},"end":{"line":165,"column":2}}]},"19":{"line":180,"type":"binary-expr","locations":[{"start":{"line":180,"column":23},"end":{"line":180,"column":32}},{"start":{"line":180,"column":36},"end":{"line":180,"column":37}}]}},"code":["/**"," * Convert a BigNumber to a formatted string representation."," *"," * Syntax:"," *"," *    format(value)"," *    format(value, options)"," *    format(value, precision)"," *    format(value, fn)"," *"," * Where:"," *"," *    {number} value   The value to be formatted"," *    {Object} options An object with formatting options. Available options:"," *                     {string} notation"," *                         Number notation. Choose from:"," *                         'fixed'          Always use regular number notation."," *                                          For example '123.40' and '14000000'"," *                         'exponential'    Always use exponential notation."," *                                          For example '1.234e+2' and '1.4e+7'"," *                         'auto' (default) Regular number notation for numbers"," *                                          having an absolute value between"," *                                          `lower` and `upper` bounds, and uses"," *                                          exponential notation elsewhere."," *                                          Lower bound is included, upper bound"," *                                          is excluded."," *                                          For example '123.4' and '1.4e7'."," *                     {number} precision   A number between 0 and 16 to round"," *                                          the digits of the number."," *                                          In case of notations 'exponential' and"," *                                          'auto', `precision` defines the total"," *                                          number of significant digits returned"," *                                          and is undefined by default."," *                                          In case of notation 'fixed',"," *                                          `precision` defines the number of"," *                                          significant digits after the decimal"," *                                          point, and is 0 by default."," *                     {Object} exponential An object containing two parameters,"," *                                          {number} lower and {number} upper,"," *                                          used by notation 'auto' to determine"," *                                          when to return exponential notation."," *                                          Default values are `lower=1e-3` and"," *                                          `upper=1e5`."," *                                          Only applicable for notation `auto`."," *    {Function} fn    A custom formatting function. Can be used to override the"," *                     built-in notations. Function `fn` is called with `value` as"," *                     parameter and must return a string. Is useful for example to"," *                     format all values inside a matrix in a particular way."," *"," * Examples:"," *"," *    format(6.4);                                        // '6.4'"," *    format(1240000);                                    // '1.24e6'"," *    format(1/3);                                        // '0.3333333333333333'"," *    format(1/3, 3);                                     // '0.333'"," *    format(21385, 2);                                   // '21000'"," *    format(12.071, {notation: 'fixed'});                // '12'"," *    format(2.3,    {notation: 'fixed', precision: 2});  // '2.30'"," *    format(52.8,   {notation: 'exponential'});          // '5.28e+1'"," *"," * @param {BigNumber} value"," * @param {Object | Function | number} [options]"," * @return {string} str The formatted value"," */","exports.format = function (value, options) {","  if (typeof options === 'function') {","    // handle format(value, fn)","    return options(value);","  }","","  // handle special cases","  if (!value.isFinite()) {","    return value.isNaN() ? 'NaN' : (value.gt(0) ? 'Infinity' : '-Infinity');","  }","","  // default values for options","  var notation = 'auto';","  var precision = undefined;","","  if (options !== undefined) {","    // determine notation from options","    if (options.notation) {","      notation = options.notation;","    }","","    // determine precision from options","    if (typeof options === 'number') {","      precision = options;","    }","    else if (options.precision) {","      precision = options.precision;","    }","  }","","  // handle the various notations","  switch (notation) {","    case 'fixed':","      return exports.toFixed(value, precision);","","    case 'exponential':","      return exports.toExponential(value, precision);","","    case 'auto':","      // determine lower and upper bound for exponential notation.","      // TODO: implement support for upper and lower to be BigNumbers themselves","      var lower = 1e-3;","      var upper = 1e5;","      if (options && options.exponential) {","        if (options.exponential.lower !== undefined) {","          lower = options.exponential.lower;","        }","        if (options.exponential.upper !== undefined) {","          upper = options.exponential.upper;","        }","      }","","      // adjust the configuration of the BigNumber constructor (yeah, this is quite tricky...)","      var oldConfig = {","        toExpNeg: value.constructor.toExpNeg,","        toExpPos: value.constructor.toExpPos","      };","","      value.constructor.config({","        toExpNeg: Math.round(Math.log(lower) / Math.LN10),","        toExpPos: Math.round(Math.log(upper) / Math.LN10)","      });","","      // handle special case zero","      if (value.isZero()) return '0';","","      // determine whether or not to output exponential notation","      var str;","      var abs = value.abs();","      if (abs.gte(lower) && abs.lt(upper)) {","        // normal number notation","        str = value.toSignificantDigits(precision).toFixed();","      }","      else {","        // exponential notation","        str = exports.toExponential(value, precision);","      }","","      // remove trailing zeros after the decimal point","      return str.replace(/((\\.\\d*?)(0+))($|e)/, function () {","        var digits = arguments[2];","        var e = arguments[4];","        return (digits !== '.') ? digits + e : e;","      });","","    default:","      throw new Error('Unknown notation \"' + notation + '\". ' +","          'Choose \"auto\", \"exponential\", or \"fixed\".');","  }","};","","/**"," * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'"," * @param {BigNumber} value"," * @param {number} [precision]  Number of digits in formatted output."," *                              If not provided, the maximum available digits"," *                              is used."," * @returns {string} str"," */","exports.toExponential = function (value, precision) {","  if (precision !== undefined) {","    return value.toExponential(precision - 1); // Note the offset of one","  }","  else {","    return value.toExponential();","  }","};","","/**"," * Format a number with fixed notation."," * @param {BigNumber} value"," * @param {number} [precision=0]        Optional number of decimals after the"," *                                      decimal point. Zero by default."," */","exports.toFixed = function (value, precision) {","  return value.toFixed(precision || 0);","  // Note: the (precision || 0) is needed as the toFixed of BigNumber has an","  // undefined default precision instead of 0.","};",""],"l":{"65":1,"66":0,"68":0,"72":0,"73":0,"77":0,"78":0,"80":0,"82":0,"83":0,"87":0,"88":0,"90":0,"91":0,"96":0,"98":0,"101":0,"106":0,"107":0,"108":0,"109":0,"110":0,"112":0,"113":0,"118":0,"123":0,"129":0,"132":0,"133":0,"134":0,"136":0,"140":0,"144":0,"145":0,"146":0,"147":0,"151":0,"164":1,"165":0,"166":0,"169":0,"179":1,"180":0}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/chain/function/chain.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/chain/function/chain.js","s":{"1":1,"2":0,"3":0,"4":0,"5":1,"6":1},"b":{},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"factory","line":3,"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}}},"2":{"name":"(anonymous_2)","line":40,"loc":{"start":{"line":40,"column":8},"end":{"line":40,"column":19}}},"3":{"name":"(anonymous_3)","line":44,"loc":{"start":{"line":44,"column":11},"end":{"line":44,"column":27}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":48,"column":1}},"2":{"start":{"line":39,"column":2},"end":{"line":47,"column":5}},"3":{"start":{"line":41,"column":6},"end":{"line":41,"column":30}},"4":{"start":{"line":45,"column":6},"end":{"line":45,"column":35}},"5":{"start":{"line":50,"column":0},"end":{"line":50,"column":23}},"6":{"start":{"line":51,"column":0},"end":{"line":51,"column":26}}},"branchMap":{},"code":["'use strict';","","function factory (type, config, load, typed) {","  /**","   * Wrap any value in a chain, allowing to perform chained operations on","   * the value.","   *","   * All methods available in the math.js library can be called upon the chain,","   * and then will be evaluated with the value itself as first argument.","   * The chain can be closed by executing `chain.done()`, which returns","   * the final value.","   *","   * The chain has a number of special functions:","   *","   * - `done()`     Finalize the chain and return the chain's value.","   * - `valueOf()`  The same as `done()`","   * - `toString()` Executes `math.format()` onto the chain's value, returning","   *                a string representation of the value.","   *","   * Syntax:","   *","   *    math.chain(value)","   *","   * Examples:","   *","   *     math.chain(3)","   *         .add(4)","   *         .subtract(2)","   *         .done();     // 5","   *","   *     math.chain( [[1, 2], [3, 4]] )","   *         .subset(math.index(0, 0), 8)","   *         .multiply(3)","   *         .done();     // [[24, 6], [9, 12]]","   *","   * @param {*} [value]   A value of any type on which to start a chained operation.","   * @return {math.type.Chain} The created chain","   */","  return typed('chain', {","    '': function() {","      return new type.Chain();","    },","","    'any': function(value) {","      return new type.Chain(value);","    }","  });","}","","exports.name = 'chain';","exports.factory = factory;",""],"l":{"3":1,"39":0,"41":0,"45":0,"50":1,"51":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/complex/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/complex/index.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":7,"column":2}}},"branchMap":{},"code":["module.exports = [","  // type","  require('./Complex'),","","  // construction function","  require('./function/complex')","];",""],"l":{"1":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/complex/Complex.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/complex/Complex.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":1,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":1,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":1,"56":1,"57":0,"58":1,"59":1,"60":0,"61":0,"62":1,"63":1,"64":1,"65":1,"66":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0,0],"18":[0,0],"19":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":51}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":29},"end":{"line":19,"column":41}}},"3":{"name":"(anonymous_3)","line":32,"loc":{"start":{"line":32,"column":30},"end":{"line":32,"column":42}}},"4":{"name":"(anonymous_4)","line":48,"loc":{"start":{"line":48,"column":29},"end":{"line":48,"column":48}}},"5":{"name":"(anonymous_5)","line":109,"loc":{"start":{"line":109,"column":22},"end":{"line":109,"column":38}}},"6":{"name":"(anonymous_6)","line":152,"loc":{"start":{"line":152,"column":21},"end":{"line":152,"column":37}}},"7":{"name":"(anonymous_7)","line":160,"loc":{"start":{"line":160,"column":20},"end":{"line":160,"column":42}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":36}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":50}},"3":{"start":{"line":3,"column":0},"end":{"line":3,"column":54}},"4":{"start":{"line":5,"column":0},"end":{"line":167,"column":1}},"5":{"start":{"line":10,"column":2},"end":{"line":10,"column":37}},"6":{"start":{"line":11,"column":2},"end":{"line":11,"column":37}},"7":{"start":{"line":19,"column":2},"end":{"line":25,"column":4}},"8":{"start":{"line":20,"column":4},"end":{"line":24,"column":6}},"9":{"start":{"line":32,"column":2},"end":{"line":37,"column":4}},"10":{"start":{"line":33,"column":4},"end":{"line":36,"column":6}},"11":{"start":{"line":48,"column":2},"end":{"line":96,"column":4}},"12":{"start":{"line":49,"column":4},"end":{"line":49,"column":17}},"13":{"start":{"line":50,"column":4},"end":{"line":50,"column":21}},"14":{"start":{"line":51,"column":4},"end":{"line":51,"column":21}},"15":{"start":{"line":52,"column":4},"end":{"line":52,"column":41}},"16":{"start":{"line":53,"column":4},"end":{"line":53,"column":41}},"17":{"start":{"line":56,"column":4},"end":{"line":56,"column":85}},"18":{"start":{"line":57,"column":4},"end":{"line":65,"column":5}},"19":{"start":{"line":58,"column":6},"end":{"line":58,"column":45}},"20":{"start":{"line":59,"column":6},"end":{"line":61,"column":7}},"21":{"start":{"line":60,"column":8},"end":{"line":60,"column":15}},"22":{"start":{"line":62,"column":6},"end":{"line":64,"column":7}},"23":{"start":{"line":63,"column":8},"end":{"line":63,"column":15}},"24":{"start":{"line":67,"column":4},"end":{"line":94,"column":5}},"25":{"start":{"line":69,"column":6},"end":{"line":69,"column":18}},"26":{"start":{"line":70,"column":11},"end":{"line":94,"column":5}},"27":{"start":{"line":72,"column":6},"end":{"line":78,"column":7}},"28":{"start":{"line":73,"column":8},"end":{"line":73,"column":18}},"29":{"start":{"line":74,"column":13},"end":{"line":78,"column":7}},"30":{"start":{"line":75,"column":8},"end":{"line":75,"column":19}},"31":{"start":{"line":77,"column":8},"end":{"line":77,"column":26}},"32":{"start":{"line":81,"column":6},"end":{"line":93,"column":7}},"33":{"start":{"line":82,"column":8},"end":{"line":86,"column":9}},"34":{"start":{"line":83,"column":10},"end":{"line":83,"column":31}},"35":{"start":{"line":85,"column":10},"end":{"line":85,"column":44}},"36":{"start":{"line":88,"column":8},"end":{"line":92,"column":9}},"37":{"start":{"line":89,"column":10},"end":{"line":89,"column":31}},"38":{"start":{"line":91,"column":10},"end":{"line":91,"column":57}},"39":{"start":{"line":95,"column":4},"end":{"line":95,"column":15}},"40":{"start":{"line":109,"column":2},"end":{"line":139,"column":4}},"41":{"start":{"line":110,"column":4},"end":{"line":138,"column":5}},"42":{"start":{"line":112,"column":8},"end":{"line":112,"column":31}},"43":{"start":{"line":113,"column":8},"end":{"line":115,"column":9}},"44":{"start":{"line":114,"column":10},"end":{"line":114,"column":30}},"45":{"start":{"line":116,"column":8},"end":{"line":116,"column":78}},"46":{"start":{"line":119,"column":8},"end":{"line":120,"column":31}},"47":{"start":{"line":121,"column":8},"end":{"line":134,"column":9}},"48":{"start":{"line":122,"column":10},"end":{"line":125,"column":11}},"49":{"start":{"line":124,"column":12},"end":{"line":124,"column":38}},"50":{"start":{"line":127,"column":10},"end":{"line":129,"column":11}},"51":{"start":{"line":128,"column":12},"end":{"line":128,"column":49}},"52":{"start":{"line":131,"column":10},"end":{"line":131,"column":72}},"53":{"start":{"line":133,"column":10},"end":{"line":133,"column":59}},"54":{"start":{"line":137,"column":8},"end":{"line":137,"column":81}},"55":{"start":{"line":142,"column":2},"end":{"line":142,"column":57}},"56":{"start":{"line":152,"column":2},"end":{"line":154,"column":4}},"57":{"start":{"line":153,"column":4},"end":{"line":153,"column":29}},"58":{"start":{"line":157,"column":2},"end":{"line":157,"column":35}},"59":{"start":{"line":160,"column":2},"end":{"line":164,"column":5}},"60":{"start":{"line":161,"column":4},"end":{"line":163,"column":5}},"61":{"start":{"line":162,"column":6},"end":{"line":162,"column":37}},"62":{"start":{"line":166,"column":2},"end":{"line":166,"column":17}},"63":{"start":{"line":169,"column":0},"end":{"line":169,"column":25}},"64":{"start":{"line":170,"column":0},"end":{"line":170,"column":22}},"65":{"start":{"line":171,"column":0},"end":{"line":171,"column":26}},"66":{"start":{"line":172,"column":0},"end":{"line":172,"column":20}}},"branchMap":{"1":{"line":56,"type":"cond-expr","locations":[{"start":{"line":56,"column":40},"end":{"line":56,"column":47}},{"start":{"line":56,"column":50},"end":{"line":56,"column":84}}]},"2":{"line":56,"type":"cond-expr","locations":[{"start":{"line":56,"column":60},"end":{"line":56,"column":77}},{"start":{"line":56,"column":80},"end":{"line":56,"column":84}}]},"3":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":4},"end":{"line":57,"column":4}},{"start":{"line":57,"column":4},"end":{"line":57,"column":4}}]},"4":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":6},"end":{"line":59,"column":6}},{"start":{"line":59,"column":6},"end":{"line":59,"column":6}}]},"5":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":6},"end":{"line":62,"column":6}},{"start":{"line":62,"column":6},"end":{"line":62,"column":6}}]},"6":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":4},"end":{"line":67,"column":4}},{"start":{"line":67,"column":4},"end":{"line":67,"column":4}}]},"7":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":11},"end":{"line":70,"column":11}},{"start":{"line":70,"column":11},"end":{"line":70,"column":11}}]},"8":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":6},"end":{"line":72,"column":6}},{"start":{"line":72,"column":6},"end":{"line":72,"column":6}}]},"9":{"line":74,"type":"if","locations":[{"start":{"line":74,"column":13},"end":{"line":74,"column":13}},{"start":{"line":74,"column":13},"end":{"line":74,"column":13}}]},"10":{"line":81,"type":"if","locations":[{"start":{"line":81,"column":6},"end":{"line":81,"column":6}},{"start":{"line":81,"column":6},"end":{"line":81,"column":6}}]},"11":{"line":82,"type":"if","locations":[{"start":{"line":82,"column":8},"end":{"line":82,"column":8}},{"start":{"line":82,"column":8},"end":{"line":82,"column":8}}]},"12":{"line":88,"type":"if","locations":[{"start":{"line":88,"column":8},"end":{"line":88,"column":8}},{"start":{"line":88,"column":8},"end":{"line":88,"column":8}}]},"13":{"line":110,"type":"switch","locations":[{"start":{"line":111,"column":6},"end":{"line":116,"column":78}},{"start":{"line":118,"column":6},"end":{"line":134,"column":9}},{"start":{"line":136,"column":6},"end":{"line":137,"column":81}}]},"14":{"line":113,"type":"if","locations":[{"start":{"line":113,"column":8},"end":{"line":113,"column":8}},{"start":{"line":113,"column":8},"end":{"line":113,"column":8}}]},"15":{"line":121,"type":"if","locations":[{"start":{"line":121,"column":8},"end":{"line":121,"column":8}},{"start":{"line":121,"column":8},"end":{"line":121,"column":8}}]},"16":{"line":122,"type":"if","locations":[{"start":{"line":122,"column":10},"end":{"line":122,"column":10}},{"start":{"line":122,"column":10},"end":{"line":122,"column":10}}]},"17":{"line":122,"type":"binary-expr","locations":[{"start":{"line":122,"column":14},"end":{"line":122,"column":17}},{"start":{"line":122,"column":21},"end":{"line":122,"column":31}},{"start":{"line":122,"column":35},"end":{"line":122,"column":55}}]},"18":{"line":127,"type":"if","locations":[{"start":{"line":127,"column":10},"end":{"line":127,"column":10}},{"start":{"line":127,"column":10},"end":{"line":127,"column":10}}]},"19":{"line":161,"type":"if","locations":[{"start":{"line":161,"column":4},"end":{"line":161,"column":4}},{"start":{"line":161,"column":4},"end":{"line":161,"column":4}}]}},"code":["var Complex = require('complex.js');","var format = require('../../utils/number').format;","var isNumber = require('../../utils/number').isNumber;","","function factory (type, config, load, typed, math) {","","  /**","   * Attach type information","   */","  Complex.prototype.type = 'Complex';","  Complex.prototype.isComplex = true;","","","  /**","   * Get a JSON representation of the complex number","   * @returns {Object} Returns a JSON object structured as:","   *                   `{\"mathjs\": \"Complex\", \"re\": 2, \"im\": 3}`","   */","  Complex.prototype.toJSON = function () {","    return {","      mathjs: 'Complex',","      re: this.re,","      im: this.im","    };","  };","","  /*","   * Return the value of the complex number in polar notation","   * The angle phi will be set in the interval of [-pi, pi].","   * @return {{r: number, phi: number}} Returns and object with properties r and phi.","   */","  Complex.prototype.toPolar = function () {","    return {","      r: this.abs(),","      phi: this.arg()","    };","  };","","  /**","   * Get a string representation of the complex number,","   * with optional formatting options.","   * @param {Object | number | Function} [options]  Formatting options. See","   *                                                lib/utils/number:format for a","   *                                                description of the available","   *                                                options.","   * @return {string} str","   */","  Complex.prototype.format = function (options) {","    var str = '';","    var im = this.im;","    var re = this.re;","    var strRe = format(this.re, options);","    var strIm = format(this.im, options);","","    // round either re or im when smaller than the configured precision","    var precision = isNumber(options) ? options : options ? options.precision : null;","    if (precision !== null) {","      var epsilon = Math.pow(10, -precision);","      if (Math.abs(re / im) < epsilon) {","        re = 0;","      }","      if (Math.abs(im / re) < epsilon) {","        im = 0;","      }","    }","","    if (im == 0) {","      // real value","      str = strRe;","    } else if (re == 0) {","      // purely complex value","      if (im == 1) {","        str = 'i';","      } else if (im == -1) {","        str = '-i';","      } else {","        str = strIm + 'i';","      }","    } else {","      // complex value","      if (im > 0) {","        if (im == 1) {","          str = strRe + ' + i';","        } else {","          str = strRe + ' + ' + strIm + 'i';","        }","      } else {","        if (im == -1) {","          str = strRe + ' - i';","        } else {","          str = strRe + ' - ' + strIm.substring(1) + 'i';","        }","      }","    }","    return str;","  };","","  /**","   * Create a complex number from polar coordinates","   *","   * Usage:","   *","   *     Complex.fromPolar(r: number, phi: number) : Complex","   *     Complex.fromPolar({r: number, phi: number}) : Complex","   *","   * @param {*} args...","   * @return {Complex}","   */","  Complex.fromPolar = function (args) {","    switch (arguments.length) {","      case 1:","        var arg = arguments[0];","        if (typeof arg === 'object') {","          return Complex(arg);","        }","        throw new TypeError('Input has to be an object with r and phi keys.');","","      case 2:","        var r = arguments[0],","            phi = arguments[1];","        if (isNumber(r)) {","          if (phi && phi.isUnit && phi.hasBase('ANGLE')) {","            // convert unit to a number in radians","            phi = phi.toNumber('rad');","          }","","          if (isNumber(phi)) {","            return new Complex({r: r, phi: phi});","          }","","          throw new TypeError('Phi is not a number nor an angle unit.');","        } else {","          throw new TypeError('Radius r is not a number.');","        }","","      default:","        throw new SyntaxError('Wrong number of arguments in function fromPolar');","    }","  };","","","  Complex.prototype.valueOf = Complex.prototype.toString;","","  /**","   * Create a Complex number from a JSON object","   * @param {Object} json  A JSON Object structured as","   *                       {\"mathjs\": \"Complex\", \"re\": 2, \"im\": 3}","   *                       All properties are optional, default values","   *                       for `re` and `im` are 0.","   * @return {Complex} Returns a new Complex number","   */","  Complex.fromJSON = function (json) {","    return new Complex(json);","  };","","  // apply the current epsilon","  Complex.EPSILON = config.epsilon;","","  // listen for changed in the configuration, automatically apply changed epsilon","  math.on('config', function (curr, prev) {","    if (curr.epsilon !== prev.epsilon) {","      Complex.EPSILON = curr.epsilon;","    }","  });","","  return Complex;","}","","exports.name = 'Complex';","exports.path = 'type';","exports.factory = factory;","exports.math = true; // request access to the math namespace",""],"l":{"1":1,"2":1,"3":1,"5":1,"10":1,"11":1,"19":1,"20":0,"32":1,"33":0,"48":1,"49":0,"50":0,"51":0,"52":0,"53":0,"56":0,"57":0,"58":0,"59":0,"60":0,"62":0,"63":0,"67":0,"69":0,"70":0,"72":0,"73":0,"74":0,"75":0,"77":0,"81":0,"82":0,"83":0,"85":0,"88":0,"89":0,"91":0,"95":0,"109":1,"110":0,"112":0,"113":0,"114":0,"116":0,"119":0,"121":0,"122":0,"124":0,"127":0,"128":0,"131":0,"133":0,"137":0,"142":1,"152":1,"153":0,"157":1,"160":1,"161":0,"162":0,"166":1,"169":1,"170":1,"171":1,"172":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/complex/function/complex.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/complex/function/complex.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":1,"20":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":47,"loc":{"start":{"line":47,"column":8},"end":{"line":47,"column":20}}},"3":{"name":"(anonymous_3)","line":51,"loc":{"start":{"line":51,"column":14},"end":{"line":51,"column":27}}},"4":{"name":"(anonymous_4)","line":55,"loc":{"start":{"line":55,"column":22},"end":{"line":55,"column":40}}},"5":{"name":"(anonymous_5)","line":60,"loc":{"start":{"line":60,"column":28},"end":{"line":60,"column":46}}},"6":{"name":"(anonymous_6)","line":64,"loc":{"start":{"line":64,"column":15},"end":{"line":64,"column":28}}},"7":{"name":"(anonymous_7)","line":68,"loc":{"start":{"line":68,"column":14},"end":{"line":68,"column":27}}},"8":{"name":"(anonymous_8)","line":72,"loc":{"start":{"line":72,"column":14},"end":{"line":72,"column":27}}},"9":{"name":"(anonymous_9)","line":84,"loc":{"start":{"line":84,"column":22},"end":{"line":84,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":59}},"2":{"start":{"line":5,"column":0},"end":{"line":97,"column":1}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":46}},"4":{"start":{"line":46,"column":2},"end":{"line":87,"column":5}},"5":{"start":{"line":48,"column":6},"end":{"line":48,"column":31}},"6":{"start":{"line":52,"column":6},"end":{"line":52,"column":36}},"7":{"start":{"line":56,"column":6},"end":{"line":56,"column":38}},"8":{"start":{"line":61,"column":6},"end":{"line":61,"column":60}},"9":{"start":{"line":65,"column":6},"end":{"line":65,"column":23}},"10":{"start":{"line":69,"column":6},"end":{"line":69,"column":29}},"11":{"start":{"line":73,"column":6},"end":{"line":75,"column":7}},"12":{"start":{"line":74,"column":8},"end":{"line":74,"column":44}},"13":{"start":{"line":77,"column":6},"end":{"line":79,"column":7}},"14":{"start":{"line":78,"column":8},"end":{"line":78,"column":35}},"15":{"start":{"line":81,"column":6},"end":{"line":81,"column":100}},"16":{"start":{"line":85,"column":6},"end":{"line":85,"column":33}},"17":{"start":{"line":89,"column":2},"end":{"line":94,"column":4}},"18":{"start":{"line":96,"column":2},"end":{"line":96,"column":17}},"19":{"start":{"line":99,"column":0},"end":{"line":99,"column":25}},"20":{"start":{"line":100,"column":0},"end":{"line":100,"column":26}}},"branchMap":{"1":{"line":73,"type":"if","locations":[{"start":{"line":73,"column":6},"end":{"line":73,"column":6}},{"start":{"line":73,"column":6},"end":{"line":73,"column":6}}]},"2":{"line":73,"type":"binary-expr","locations":[{"start":{"line":73,"column":9},"end":{"line":73,"column":18}},{"start":{"line":73,"column":22},"end":{"line":73,"column":31}}]},"3":{"line":77,"type":"if","locations":[{"start":{"line":77,"column":6},"end":{"line":77,"column":6}},{"start":{"line":77,"column":6},"end":{"line":77,"column":6}}]},"4":{"line":77,"type":"binary-expr","locations":[{"start":{"line":77,"column":10},"end":{"line":77,"column":18}},{"start":{"line":77,"column":22},"end":{"line":77,"column":32}}]}},"code":["'use strict';","","var deepMap = require('../../../utils/collection/deepMap');","","function factory (type, config, load, typed) {","  var latex = require('../../../utils/latex');","","  /**","   * Create a complex value or convert a value to a complex value.","   *","   * Syntax:","   *","   *     math.complex()                           // creates a complex value with zero","   *                                              // as real and imaginary part.","   *     math.complex(re : number, im : string)   // creates a complex value with provided","   *                                              // values for real and imaginary part.","   *     math.complex(re : number)                // creates a complex value with provided","   *                                              // real value and zero imaginary part.","   *     math.complex(complex : Complex)          // clones the provided complex value.","   *     math.complex(arg : string)               // parses a string into a complex value.","   *     math.complex(array : Array)              // converts the elements of the array","   *                                              // or matrix element wise into a","   *                                              // complex value.","   *     math.complex({re: number, im: number})   // creates a complex value with provided","   *                                              // values for real an imaginary part.","   *     math.complex({r: number, phi: number})   // creates a complex value with provided","   *                                              // polar coordinates","   *","   * Examples:","   *","   *    var a = math.complex(3, -4);     // a = Complex 3 - 4i","   *    a.re = 5;                        // a = Complex 5 - 4i","   *    var i = a.im;                    // Number -4;","   *    var b = math.complex('2 + 6i');  // Complex 2 + 6i","   *    var c = math.complex();          // Complex 0 + 0i","   *    var d = math.add(a, b);          // Complex 5 + 2i","   *","   * See also:","   *","   *    bignumber, boolean, index, matrix, number, string, unit","   *","   * @param {* | Array | Matrix} [args]","   *            Arguments specifying the real and imaginary part of the complex number","   * @return {Complex | Array | Matrix} Returns a complex value","   */","  var complex = typed('complex', {","    '': function () {","      return type.Complex.ZERO;","    },","","    'number': function (x) {","      return new type.Complex(x, 0);","    },","","    'number, number': function (re, im) {","      return new type.Complex(re, im);","    },","","    // TODO: this signature should be redundant","    'BigNumber, BigNumber': function (re, im) {","      return new type.Complex(re.toNumber(), im.toNumber());","    },","","    'Complex': function (x) {","      return x.clone();","    },","","    'string': function (x) {","      return type.Complex(x); // for example '2 + 3i'","    },","","    'Object': function (x) {","      if('re' in x && 'im' in x) {","        return new type.Complex(x.re, x.im);","      }","","      if ('r' in x && 'phi' in x) {","        return new type.Complex(x);","      }","","      throw new Error('Expected object with either properties re and im, or properties r and phi.');","    },","","    'Array | Matrix': function (x) {","      return deepMap(x, complex);","    }","  });","","  complex.toTex = {","    0: '0',","    1: '\\\\left(${args[0]}\\\\right)',","    2: '\\\\left(\\\\left(${args[0]}\\\\right)+'","      + latex.symbols['i'] + '\\\\cdot\\\\left(${args[1]}\\\\right)\\\\right)'","  };","","  return complex;","}","","exports.name = 'complex';","exports.factory = factory;",""],"l":{"3":1,"5":1,"6":0,"46":0,"48":0,"52":0,"56":0,"61":0,"65":0,"69":0,"73":0,"74":0,"77":0,"78":0,"81":0,"85":0,"89":0,"96":0,"99":1,"100":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/fraction/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/fraction/index.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":7,"column":2}}},"branchMap":{},"code":["module.exports = [","  // type","  require('./Fraction'),","","  // construction function","  require('./function/fraction')","];",""],"l":{"1":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/fraction/Fraction.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/fraction/Fraction.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":1,"7":0,"8":1,"9":0,"10":1,"11":1,"12":1},"b":{},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":14,"loc":{"start":{"line":14,"column":28},"end":{"line":14,"column":40}}},"2":{"name":"(anonymous_2)","line":28,"loc":{"start":{"line":28,"column":20},"end":{"line":28,"column":36}}},"3":{"name":"factory","line":33,"loc":{"start":{"line":33,"column":0},"end":{"line":33,"column":45}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":38}},"2":{"start":{"line":6,"column":0},"end":{"line":6,"column":37}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":37}},"4":{"start":{"line":14,"column":0},"end":{"line":20,"column":2}},"5":{"start":{"line":15,"column":2},"end":{"line":19,"column":4}},"6":{"start":{"line":28,"column":0},"end":{"line":30,"column":2}},"7":{"start":{"line":29,"column":2},"end":{"line":29,"column":28}},"8":{"start":{"line":33,"column":0},"end":{"line":35,"column":1}},"9":{"start":{"line":34,"column":2},"end":{"line":34,"column":18}},"10":{"start":{"line":37,"column":0},"end":{"line":37,"column":26}},"11":{"start":{"line":38,"column":0},"end":{"line":38,"column":22}},"12":{"start":{"line":39,"column":0},"end":{"line":39,"column":26}}},"branchMap":{},"code":["var Fraction = require('fraction.js');","","/**"," * Attach type information"," */","Fraction.prototype.type = 'Fraction';","Fraction.prototype.isFraction = true;","","/**"," * Get a JSON representation of a Fraction containing type information"," * @returns {Object} Returns a JSON object structured as:"," *                   `{\"mathjs\": \"Fraction\", \"n\": 3, \"d\": 8}`"," */","Fraction.prototype.toJSON = function () {","  return {","    mathjs: 'Fraction',","    n: this.s * this.n,","    d: this.d","  };","};","","/**"," * Instantiate a Fraction from a JSON object"," * @param {Object} json  a JSON object structured as:"," *                       `{\"mathjs\": \"Fraction\", \"n\": 3, \"d\": 8}`"," * @return {BigNumber}"," */","Fraction.fromJSON = function (json) {","  return new Fraction(json);","};","","","function factory (type, config, load, typed) {","  return Fraction;","}","","exports.name = 'Fraction';","exports.path = 'type';","exports.factory = factory;",""],"l":{"1":1,"6":1,"7":1,"14":1,"15":0,"28":1,"29":0,"33":1,"34":0,"37":1,"38":1,"39":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/fraction/function/fraction.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/fraction/function/fraction.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":1,"15":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":32,"loc":{"start":{"line":32,"column":14},"end":{"line":32,"column":27}}},"3":{"name":"(anonymous_3)","line":40,"loc":{"start":{"line":40,"column":14},"end":{"line":40,"column":27}}},"4":{"name":"(anonymous_4)","line":44,"loc":{"start":{"line":44,"column":22},"end":{"line":44,"column":56}}},"5":{"name":"(anonymous_5)","line":48,"loc":{"start":{"line":48,"column":17},"end":{"line":48,"column":30}}},"6":{"name":"(anonymous_6)","line":52,"loc":{"start":{"line":52,"column":16},"end":{"line":52,"column":29}}},"7":{"name":"(anonymous_7)","line":56,"loc":{"start":{"line":56,"column":14},"end":{"line":56,"column":27}}},"8":{"name":"(anonymous_8)","line":60,"loc":{"start":{"line":60,"column":22},"end":{"line":60,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":59}},"2":{"start":{"line":5,"column":0},"end":{"line":66,"column":1}},"3":{"start":{"line":31,"column":2},"end":{"line":63,"column":5}},"4":{"start":{"line":33,"column":6},"end":{"line":35,"column":7}},"5":{"start":{"line":34,"column":8},"end":{"line":34,"column":68}},"6":{"start":{"line":37,"column":6},"end":{"line":37,"column":34}},"7":{"start":{"line":41,"column":6},"end":{"line":41,"column":34}},"8":{"start":{"line":45,"column":6},"end":{"line":45,"column":55}},"9":{"start":{"line":49,"column":6},"end":{"line":49,"column":45}},"10":{"start":{"line":53,"column":6},"end":{"line":53,"column":15}},"11":{"start":{"line":57,"column":6},"end":{"line":57,"column":34}},"12":{"start":{"line":61,"column":6},"end":{"line":61,"column":34}},"13":{"start":{"line":65,"column":2},"end":{"line":65,"column":18}},"14":{"start":{"line":68,"column":0},"end":{"line":68,"column":26}},"15":{"start":{"line":69,"column":0},"end":{"line":69,"column":26}}},"branchMap":{"1":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":6},"end":{"line":33,"column":6}},{"start":{"line":33,"column":6},"end":{"line":33,"column":6}}]},"2":{"line":33,"type":"binary-expr","locations":[{"start":{"line":33,"column":10},"end":{"line":33,"column":22}},{"start":{"line":33,"column":26},"end":{"line":33,"column":34}}]}},"code":["'use strict';","","var deepMap = require('../../../utils/collection/deepMap');","","function factory (type, config, load, typed) {","  /**","   * Create a fraction convert a value to a fraction.","   *","   * Syntax:","   *     math.fraction(numerator, denominator)","   *     math.fraction({n: numerator, d: denominator})","   *     math.fraction(matrix: Array | Matrix)         Turn all matrix entries","   *                                                   into fractions","   *","   * Examples:","   *","   *     math.fraction(1, 3);","   *     math.fraction('2/3');","   *     math.fraction({n: 2, d: 3});","   *     math.fraction([0.2, 0.25, 1.25]);","   *","   * See also:","   *","   *    bignumber, number, string, unit","   *","   * @param {number | string | Fraction | BigNumber | Array | Matrix} [args]","   *            Arguments specifying the numerator and denominator of","   *            the fraction","   * @return {Fraction | Array | Matrix} Returns a fraction","   */","  var fraction = typed('fraction', {","    'number': function (x) {","      if (!isFinite(x) || isNaN(x)) {","        throw new Error(x + ' cannot be represented as a fraction');","      }","","      return new type.Fraction(x);","    },","","    'string': function (x) {","      return new type.Fraction(x);","    },","","    'number, number': function (numerator, denominator) {","      return new type.Fraction(numerator, denominator);","    },","","    'BigNumber': function (x) {","      return new type.Fraction(x.toString());","    },","","    'Fraction': function (x) {","      return x; // fractions are immutable","    },","","    'Object': function (x) {","      return new type.Fraction(x);","    },","","    'Array | Matrix': function (x) {","      return deepMap(x, fraction);","    }","  });","","  return fraction;","}","","exports.name = 'fraction';","exports.factory = factory;",""],"l":{"3":1,"5":1,"31":0,"33":0,"34":0,"37":0,"41":0,"45":0,"49":0,"53":0,"57":0,"61":0,"65":0,"68":1,"69":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/matrix/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/matrix/index.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":16,"column":2}}},"branchMap":{},"code":["module.exports = [","  // types","  require('./Matrix'),","  require('./DenseMatrix'),","  require('./SparseMatrix'),","  require('./Spa'),","  require('./FibonacciHeap'),","  require('./ImmutableDenseMatrix'),","  require('./MatrixIndex'),","  require('./Range'),","","  // construction functions","  require('./function/index'),","  require('./function/matrix'),","  require('./function/sparse')","];",""],"l":{"1":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/matrix/Matrix.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/matrix/Matrix.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":2,"7":0,"8":1,"9":1,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":1,"19":0,"20":1,"21":0,"22":1,"23":0,"24":1,"25":0,"26":1,"27":0,"28":1,"29":0,"30":1,"31":0,"32":1,"33":0,"34":1,"35":0,"36":1,"37":0,"38":1,"39":0,"40":1,"41":0,"42":1,"43":0,"44":1,"45":0,"46":1,"47":0,"48":1,"49":0,"50":1,"51":1,"52":1,"53":1},"b":{"1":[0,2],"2":[0,0],"3":[0,0]},"f":{"1":1,"2":2,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0},"fnMap":{"1":{"name":"factory","line":9,"loc":{"start":{"line":9,"column":0},"end":{"line":9,"column":45}}},"2":{"name":"Matrix","line":30,"loc":{"start":{"line":30,"column":2},"end":{"line":30,"column":20}}},"3":{"name":"(anonymous_3)","line":49,"loc":{"start":{"line":49,"column":19},"end":{"line":49,"column":37}}},"4":{"name":"(anonymous_4)","line":76,"loc":{"start":{"line":76,"column":29},"end":{"line":76,"column":41}}},"5":{"name":"(anonymous_5)","line":89,"loc":{"start":{"line":89,"column":30},"end":{"line":89,"column":42}}},"6":{"name":"(anonymous_6)","line":99,"loc":{"start":{"line":99,"column":28},"end":{"line":99,"column":54}}},"7":{"name":"(anonymous_7)","line":116,"loc":{"start":{"line":116,"column":28},"end":{"line":116,"column":72}}},"8":{"name":"(anonymous_8)","line":126,"loc":{"start":{"line":126,"column":25},"end":{"line":126,"column":42}}},"9":{"name":"(anonymous_9)","line":140,"loc":{"start":{"line":140,"column":25},"end":{"line":140,"column":63}}},"10":{"name":"(anonymous_10)","line":157,"loc":{"start":{"line":157,"column":28},"end":{"line":157,"column":58}}},"11":{"name":"(anonymous_11)","line":171,"loc":{"start":{"line":171,"column":29},"end":{"line":171,"column":59}}},"12":{"name":"(anonymous_12)","line":180,"loc":{"start":{"line":180,"column":27},"end":{"line":180,"column":39}}},"13":{"name":"(anonymous_13)","line":189,"loc":{"start":{"line":189,"column":26},"end":{"line":189,"column":37}}},"14":{"name":"(anonymous_14)","line":204,"loc":{"start":{"line":204,"column":25},"end":{"line":204,"column":56}}},"15":{"name":"(anonymous_15)","line":215,"loc":{"start":{"line":215,"column":29},"end":{"line":215,"column":49}}},"16":{"name":"(anonymous_16)","line":224,"loc":{"start":{"line":224,"column":29},"end":{"line":224,"column":41}}},"17":{"name":"(anonymous_17)","line":233,"loc":{"start":{"line":233,"column":29},"end":{"line":233,"column":41}}},"18":{"name":"(anonymous_18)","line":246,"loc":{"start":{"line":246,"column":28},"end":{"line":246,"column":47}}},"19":{"name":"(anonymous_19)","line":255,"loc":{"start":{"line":255,"column":30},"end":{"line":255,"column":42}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":40}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":25}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":31}},"4":{"start":{"line":9,"column":0},"end":{"line":262,"column":1}},"5":{"start":{"line":30,"column":2},"end":{"line":34,"column":3}},"6":{"start":{"line":31,"column":4},"end":{"line":33,"column":5}},"7":{"start":{"line":32,"column":6},"end":{"line":32,"column":80}},"8":{"start":{"line":39,"column":2},"end":{"line":39,"column":35}},"9":{"start":{"line":40,"column":2},"end":{"line":40,"column":35}},"10":{"start":{"line":49,"column":2},"end":{"line":63,"column":4}},"11":{"start":{"line":51,"column":4},"end":{"line":53,"column":5}},"12":{"start":{"line":52,"column":6},"end":{"line":52,"column":59}},"13":{"start":{"line":56,"column":4},"end":{"line":56,"column":46}},"14":{"start":{"line":57,"column":4},"end":{"line":59,"column":5}},"15":{"start":{"line":58,"column":6},"end":{"line":58,"column":76}},"16":{"start":{"line":62,"column":4},"end":{"line":62,"column":23}},"17":{"start":{"line":66,"column":2},"end":{"line":66,"column":23}},"18":{"start":{"line":76,"column":2},"end":{"line":79,"column":4}},"19":{"start":{"line":78,"column":4},"end":{"line":78,"column":67}},"20":{"start":{"line":89,"column":2},"end":{"line":92,"column":4}},"21":{"start":{"line":91,"column":4},"end":{"line":91,"column":68}},"22":{"start":{"line":99,"column":2},"end":{"line":101,"column":4}},"23":{"start":{"line":100,"column":4},"end":{"line":100,"column":66}},"24":{"start":{"line":116,"column":2},"end":{"line":119,"column":4}},"25":{"start":{"line":118,"column":4},"end":{"line":118,"column":66}},"26":{"start":{"line":126,"column":2},"end":{"line":129,"column":4}},"27":{"start":{"line":128,"column":4},"end":{"line":128,"column":63}},"28":{"start":{"line":140,"column":2},"end":{"line":143,"column":4}},"29":{"start":{"line":142,"column":4},"end":{"line":142,"column":63}},"30":{"start":{"line":157,"column":2},"end":{"line":160,"column":4}},"31":{"start":{"line":159,"column":4},"end":{"line":159,"column":66}},"32":{"start":{"line":171,"column":2},"end":{"line":174,"column":4}},"33":{"start":{"line":173,"column":4},"end":{"line":173,"column":67}},"34":{"start":{"line":180,"column":2},"end":{"line":183,"column":4}},"35":{"start":{"line":182,"column":4},"end":{"line":182,"column":65}},"36":{"start":{"line":189,"column":2},"end":{"line":192,"column":4}},"37":{"start":{"line":191,"column":4},"end":{"line":191,"column":64}},"38":{"start":{"line":204,"column":2},"end":{"line":207,"column":4}},"39":{"start":{"line":206,"column":4},"end":{"line":206,"column":63}},"40":{"start":{"line":215,"column":2},"end":{"line":218,"column":4}},"41":{"start":{"line":217,"column":4},"end":{"line":217,"column":67}},"42":{"start":{"line":224,"column":2},"end":{"line":227,"column":4}},"43":{"start":{"line":226,"column":4},"end":{"line":226,"column":67}},"44":{"start":{"line":233,"column":2},"end":{"line":236,"column":4}},"45":{"start":{"line":235,"column":4},"end":{"line":235,"column":67}},"46":{"start":{"line":246,"column":2},"end":{"line":249,"column":4}},"47":{"start":{"line":248,"column":4},"end":{"line":248,"column":66}},"48":{"start":{"line":255,"column":2},"end":{"line":258,"column":4}},"49":{"start":{"line":257,"column":4},"end":{"line":257,"column":68}},"50":{"start":{"line":261,"column":2},"end":{"line":261,"column":16}},"51":{"start":{"line":264,"column":0},"end":{"line":264,"column":24}},"52":{"start":{"line":265,"column":0},"end":{"line":265,"column":22}},"53":{"start":{"line":266,"column":0},"end":{"line":266,"column":26}}},"branchMap":{"1":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":4},"end":{"line":31,"column":4}},{"start":{"line":31,"column":4},"end":{"line":31,"column":4}}]},"2":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":4},"end":{"line":51,"column":4}},{"start":{"line":51,"column":4},"end":{"line":51,"column":4}}]},"3":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":4},"end":{"line":57,"column":4}},{"start":{"line":57,"column":4},"end":{"line":57,"column":4}}]}},"code":["'use strict';","","var util = require('../../utils/index');","","var string = util.string;","","var isString = string.isString;","","function factory (type, config, load, typed) {","  /**","   * @constructor Matrix","   *","   * A Matrix is a wrapper around an Array. A matrix can hold a multi dimensional","   * array. A matrix can be constructed as:","   *     var matrix = math.matrix(data)","   *","   * Matrix contains the functions to resize, get and set values, get the size,","   * clone the matrix and to convert the matrix to a vector, array, or scalar.","   * Furthermore, one can iterate over the matrix using map and forEach.","   * The internal Array of the Matrix can be accessed using the function valueOf.","   *","   * Example usage:","   *     var matrix = math.matrix([[1, 2], [3, 4]]);","   *     matix.size();              // [2, 2]","   *     matrix.resize([3, 2], 5);","   *     matrix.valueOf();          // [[1, 2], [3, 4], [5, 5]]","   *     matrix.subset([1,2])       // 3 (indexes are zero-based)","   *","   */","  function Matrix() {","    if (!(this instanceof Matrix)) {","      throw new SyntaxError('Constructor must be called with the new operator');","    }","  }","","  /**","   * Attach type information","   */","  Matrix.prototype.type = 'Matrix';","  Matrix.prototype.isMatrix = true;","","  /**","   * Get the Matrix storage constructor for the given format.","   *","   * @param {string} format       The Matrix storage format.","   *","   * @return {Function}           The Matrix storage constructor.","   */","  Matrix.storage = function (format) {","    // check storage format is a string","    if (!isString(format)) {","      throw new TypeError('format must be a string value');","    }","","    // get storage format constructor","    var constructor = Matrix._storage[format];","    if (!constructor) {","      throw new SyntaxError('Unsupported matrix storage format: ' + format);","    }","","    // return storage constructor","    return constructor;","  };","","  // a map with all constructors for all storage types","  Matrix._storage = {};","","  /**","   * Get the storage format used by the matrix.","   *","   * Usage:","   *     var format = matrix.storage()                   // retrieve storage format","   *","   * @return {string}           The storage format.","   */","  Matrix.prototype.storage = function () {","    // must be implemented by each of the Matrix implementations","    throw new Error('Cannot invoke storage on a Matrix interface');","  };","  ","  /**","   * Get the datatype of the data stored in the matrix.","   *","   * Usage:","   *     var format = matrix.datatype()                   // retrieve matrix datatype","   *","   * @return {string}           The datatype.","   */","  Matrix.prototype.datatype = function () {","    // must be implemented by each of the Matrix implementations","    throw new Error('Cannot invoke datatype on a Matrix interface');","  };","","  /**","   * Create a new Matrix With the type of the current matrix instance","   * @param {Array | Object} data","   * @param {string} [datatype]","   */","  Matrix.prototype.create = function (data, datatype) {","    throw new Error('Cannot invoke create on a Matrix interface');","  };","","  /**","   * Get a subset of the matrix, or replace a subset of the matrix.","   *","   * Usage:","   *     var subset = matrix.subset(index)               // retrieve subset","   *     var value = matrix.subset(index, replacement)   // replace subset","   *","   * @param {Index} index","   * @param {Array | Matrix | *} [replacement]","   * @param {*} [defaultValue=0]      Default value, filled in on new entries when","   *                                  the matrix is resized. If not provided,","   *                                  new matrix elements will be filled with zeros.","   */","  Matrix.prototype.subset = function (index, replacement, defaultValue) {","    // must be implemented by each of the Matrix implementations","    throw new Error('Cannot invoke subset on a Matrix interface');","  };","","  /**","   * Get a single element from the matrix.","   * @param {number[]} index   Zero-based index","   * @return {*} value","   */","  Matrix.prototype.get = function (index) {","    // must be implemented by each of the Matrix implementations","    throw new Error('Cannot invoke get on a Matrix interface');","  };","","  /**","   * Replace a single element in the matrix.","   * @param {number[]} index   Zero-based index","   * @param {*} value","   * @param {*} [defaultValue]        Default value, filled in on new entries when","   *                                  the matrix is resized. If not provided,","   *                                  new matrix elements will be left undefined.","   * @return {Matrix} self","   */","  Matrix.prototype.set = function (index, value, defaultValue) {","    // must be implemented by each of the Matrix implementations","    throw new Error('Cannot invoke set on a Matrix interface');","  };","","  /**","   * Resize the matrix to the given size. Returns a copy of the matrix when ","   * `copy=true`, otherwise return the matrix itself (resize in place).","   *","   * @param {number[]} size           The new size the matrix should have.","   * @param {*} [defaultValue=0]      Default value, filled in on new entries.","   *                                  If not provided, the matrix elements will","   *                                  be filled with zeros.","   * @param {boolean} [copy]          Return a resized copy of the matrix","   *","   * @return {Matrix}                 The resized matrix","   */","  Matrix.prototype.resize = function (size, defaultValue) {","    // must be implemented by each of the Matrix implementations","    throw new Error('Cannot invoke resize on a Matrix interface');","  };","","  /**","   * Reshape the matrix to the given size. Returns a copy of the matrix when","   * `copy=true`, otherwise return the matrix itself (reshape in place).","   *","   * @param {number[]} size           The new size the matrix should have.","   * @param {boolean} [copy]          Return a reshaped copy of the matrix","   *","   * @return {Matrix}                 The reshaped matrix","   */","  Matrix.prototype.reshape = function (size, defaultValue) {","    // must be implemented by each of the Matrix implementations","    throw new Error('Cannot invoke reshape on a Matrix interface');","  };","","  /**","   * Create a clone of the matrix","   * @return {Matrix} clone","   */","  Matrix.prototype.clone = function () {","    // must be implemented by each of the Matrix implementations","    throw new Error('Cannot invoke clone on a Matrix interface');","  };","","  /**","   * Retrieve the size of the matrix.","   * @returns {number[]} size","   */","  Matrix.prototype.size = function() {","    // must be implemented by each of the Matrix implementations","    throw new Error('Cannot invoke size on a Matrix interface');","  };","","  /**","   * Create a new matrix with the results of the callback function executed on","   * each entry of the matrix.","   * @param {Function} callback   The callback function is invoked with three","   *                              parameters: the value of the element, the index","   *                              of the element, and the Matrix being traversed.","   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.","   *","   * @return {Matrix} matrix","   */","  Matrix.prototype.map = function (callback, skipZeros) {","    // must be implemented by each of the Matrix implementations","    throw new Error('Cannot invoke map on a Matrix interface');","  };","","  /**","   * Execute a callback function on each entry of the matrix.","   * @param {Function} callback   The callback function is invoked with three","   *                              parameters: the value of the element, the index","   *                              of the element, and the Matrix being traversed.","   */","  Matrix.prototype.forEach = function (callback) {","    // must be implemented by each of the Matrix implementations","    throw new Error('Cannot invoke forEach on a Matrix interface');","  };","","  /**","   * Create an Array with a copy of the data of the Matrix","   * @returns {Array} array","   */","  Matrix.prototype.toArray = function () {","    // must be implemented by each of the Matrix implementations","    throw new Error('Cannot invoke toArray on a Matrix interface');","  };","","  /**","   * Get the primitive value of the Matrix: a multidimensional array","   * @returns {Array} array","   */","  Matrix.prototype.valueOf = function () {","    // must be implemented by each of the Matrix implementations","    throw new Error('Cannot invoke valueOf on a Matrix interface');","  };","","  /**","   * Get a string representation of the matrix, with optional formatting options.","   * @param {Object | number | Function} [options]  Formatting options. See","   *                                                lib/utils/number:format for a","   *                                                description of the available","   *                                                options.","   * @returns {string} str","   */","  Matrix.prototype.format = function (options) {","    // must be implemented by each of the Matrix implementations","    throw new Error('Cannot invoke format on a Matrix interface');","  };","","  /**","   * Get a string representation of the matrix","   * @returns {string} str","   */","  Matrix.prototype.toString = function () {","    // must be implemented by each of the Matrix implementations","    throw new Error('Cannot invoke toString on a Matrix interface');","  };","   ","  // exports","  return Matrix;","}","","exports.name = 'Matrix';","exports.path = 'type';","exports.factory = factory;",""],"l":{"3":1,"5":1,"7":1,"9":1,"30":1,"31":2,"32":0,"39":1,"40":1,"49":1,"51":0,"52":0,"56":0,"57":0,"58":0,"62":0,"66":1,"76":1,"78":0,"89":1,"91":0,"99":1,"100":0,"116":1,"118":0,"126":1,"128":0,"140":1,"142":0,"157":1,"159":0,"171":1,"173":0,"180":1,"182":0,"189":1,"191":0,"204":1,"206":0,"215":1,"217":0,"224":1,"226":0,"233":1,"235":0,"246":1,"248":0,"255":1,"257":0,"261":1,"264":1,"265":1,"266":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/utils/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/utils/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":35}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":42}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":44}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":37}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":37}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":37}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":35}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":39}}},"branchMap":{},"code":["'use strict';","","exports.array = require('./array');","exports['boolean'] = require('./boolean');","exports['function'] = require('./function');","exports.number = require('./number');","exports.object = require('./object');","exports.string = require('./string');","exports.types = require('./types');","exports.emitter = require('./emitter');",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/utils/array.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/utils/array.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":1,"29":0,"30":0,"31":0,"32":0,"33":0,"34":1,"35":0,"36":0,"37":0,"38":0,"39":1,"40":1,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":1,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":1,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":1,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":1,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":1,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":1,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":1,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":1,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},"fnMap":{"1":{"name":"(anonymous_1)","line":18,"loc":{"start":{"line":18,"column":15},"end":{"line":18,"column":28}}},"2":{"name":"_validate","line":38,"loc":{"start":{"line":38,"column":0},"end":{"line":38,"column":37}}},"3":{"name":"(anonymous_3)","line":74,"loc":{"start":{"line":74,"column":19},"end":{"line":74,"column":41}}},"4":{"name":"(anonymous_4)","line":94,"loc":{"start":{"line":94,"column":24},"end":{"line":94,"column":48}}},"5":{"name":"(anonymous_5)","line":115,"loc":{"start":{"line":115,"column":17},"end":{"line":115,"column":53}}},"6":{"name":"(anonymous_6)","line":127,"loc":{"start":{"line":127,"column":15},"end":{"line":127,"column":32}}},"7":{"name":"_resize","line":150,"loc":{"start":{"line":150,"column":0},"end":{"line":150,"column":50}}},"8":{"name":"(anonymous_8)","line":214,"loc":{"start":{"line":214,"column":18},"end":{"line":214,"column":41}}},"9":{"name":"(anonymous_9)","line":218,"loc":{"start":{"line":218,"column":16},"end":{"line":218,"column":31}}},"10":{"name":"(anonymous_10)","line":219,"loc":{"start":{"line":219,"column":22},"end":{"line":219,"column":44}}},"11":{"name":"_reshape","line":266,"loc":{"start":{"line":266,"column":0},"end":{"line":266,"column":32}}},"12":{"name":"(anonymous_12)","line":289,"loc":{"start":{"line":289,"column":18},"end":{"line":289,"column":40}}},"13":{"name":"_squeeze","line":321,"loc":{"start":{"line":321,"column":0},"end":{"line":321,"column":37}}},"14":{"name":"(anonymous_14)","line":351,"loc":{"start":{"line":351,"column":20},"end":{"line":351,"column":55}}},"15":{"name":"_unsqueeze","line":379,"loc":{"start":{"line":379,"column":0},"end":{"line":379,"column":39}}},"16":{"name":"(anonymous_16)","line":402,"loc":{"start":{"line":402,"column":18},"end":{"line":402,"column":34}}},"17":{"name":"callback","line":409,"loc":{"start":{"line":409,"column":16},"end":{"line":409,"column":41}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":33}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":33}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":33}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":31}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":56}},"6":{"start":{"line":9,"column":0},"end":{"line":9,"column":48}},"7":{"start":{"line":18,"column":0},"end":{"line":27,"column":2}},"8":{"start":{"line":19,"column":2},"end":{"line":19,"column":13}},"9":{"start":{"line":21,"column":2},"end":{"line":24,"column":3}},"10":{"start":{"line":22,"column":4},"end":{"line":22,"column":21}},"11":{"start":{"line":23,"column":4},"end":{"line":23,"column":13}},"12":{"start":{"line":26,"column":2},"end":{"line":26,"column":11}},"13":{"start":{"line":38,"column":0},"end":{"line":65,"column":1}},"14":{"start":{"line":39,"column":2},"end":{"line":39,"column":8}},"15":{"start":{"line":40,"column":2},"end":{"line":40,"column":25}},"16":{"start":{"line":42,"column":2},"end":{"line":44,"column":3}},"17":{"start":{"line":43,"column":4},"end":{"line":43,"column":45}},"18":{"start":{"line":46,"column":2},"end":{"line":64,"column":3}},"19":{"start":{"line":48,"column":4},"end":{"line":48,"column":26}},"20":{"start":{"line":49,"column":4},"end":{"line":55,"column":5}},"21":{"start":{"line":50,"column":6},"end":{"line":50,"column":27}},"22":{"start":{"line":51,"column":6},"end":{"line":53,"column":7}},"23":{"start":{"line":52,"column":8},"end":{"line":52,"column":68}},"24":{"start":{"line":54,"column":6},"end":{"line":54,"column":41}},"25":{"start":{"line":59,"column":4},"end":{"line":63,"column":5}},"26":{"start":{"line":60,"column":6},"end":{"line":62,"column":7}},"27":{"start":{"line":61,"column":8},"end":{"line":61,"column":68}},"28":{"start":{"line":74,"column":0},"end":{"line":86,"column":2}},"29":{"start":{"line":75,"column":2},"end":{"line":75,"column":36}},"30":{"start":{"line":76,"column":2},"end":{"line":85,"column":3}},"31":{"start":{"line":78,"column":4},"end":{"line":80,"column":5}},"32":{"start":{"line":79,"column":6},"end":{"line":79,"column":48}},"33":{"start":{"line":84,"column":4},"end":{"line":84,"column":30}},"34":{"start":{"line":94,"column":0},"end":{"line":101,"column":2}},"35":{"start":{"line":95,"column":2},"end":{"line":97,"column":3}},"36":{"start":{"line":96,"column":4},"end":{"line":96,"column":75}},"37":{"start":{"line":98,"column":2},"end":{"line":100,"column":3}},"38":{"start":{"line":99,"column":4},"end":{"line":99,"column":40}},"39":{"start":{"line":104,"column":0},"end":{"line":104,"column":27}},"40":{"start":{"line":115,"column":0},"end":{"line":139,"column":2}},"41":{"start":{"line":119,"column":2},"end":{"line":121,"column":3}},"42":{"start":{"line":120,"column":4},"end":{"line":120,"column":42}},"43":{"start":{"line":122,"column":2},"end":{"line":124,"column":3}},"44":{"start":{"line":123,"column":4},"end":{"line":123,"column":59}},"45":{"start":{"line":127,"column":2},"end":{"line":132,"column":5}},"46":{"start":{"line":128,"column":4},"end":{"line":131,"column":5}},"47":{"start":{"line":129,"column":6},"end":{"line":130,"column":49}},"48":{"start":{"line":135,"column":2},"end":{"line":135,"column":70}},"49":{"start":{"line":136,"column":2},"end":{"line":136,"column":41}},"50":{"start":{"line":138,"column":2},"end":{"line":138,"column":15}},"51":{"start":{"line":150,"column":0},"end":{"line":202,"column":1}},"52":{"start":{"line":151,"column":2},"end":{"line":151,"column":8}},"53":{"start":{"line":152,"column":2},"end":{"line":152,"column":11}},"54":{"start":{"line":153,"column":2},"end":{"line":153,"column":28}},"55":{"start":{"line":154,"column":2},"end":{"line":154,"column":25}},"56":{"start":{"line":155,"column":2},"end":{"line":155,"column":40}},"57":{"start":{"line":158,"column":2},"end":{"line":158,"column":24}},"58":{"start":{"line":160,"column":2},"end":{"line":201,"column":3}},"59":{"start":{"line":162,"column":4},"end":{"line":162,"column":26}},"60":{"start":{"line":165,"column":4},"end":{"line":173,"column":5}},"61":{"start":{"line":167,"column":6},"end":{"line":167,"column":22}},"62":{"start":{"line":168,"column":6},"end":{"line":171,"column":7}},"63":{"start":{"line":169,"column":8},"end":{"line":169,"column":22}},"64":{"start":{"line":170,"column":8},"end":{"line":170,"column":24}},"65":{"start":{"line":172,"column":6},"end":{"line":172,"column":49}},"66":{"start":{"line":176,"column":4},"end":{"line":183,"column":5}},"67":{"start":{"line":178,"column":6},"end":{"line":178,"column":16}},"68":{"start":{"line":179,"column":6},"end":{"line":179,"column":22}},"69":{"start":{"line":182,"column":6},"end":{"line":182,"column":49}},"70":{"start":{"line":189,"column":4},"end":{"line":193,"column":5}},"71":{"start":{"line":190,"column":6},"end":{"line":192,"column":7}},"72":{"start":{"line":191,"column":8},"end":{"line":191,"column":31}},"73":{"start":{"line":195,"column":4},"end":{"line":200,"column":5}},"74":{"start":{"line":197,"column":6},"end":{"line":199,"column":7}},"75":{"start":{"line":198,"column":8},"end":{"line":198,"column":32}},"76":{"start":{"line":214,"column":0},"end":{"line":254,"column":2}},"77":{"start":{"line":215,"column":2},"end":{"line":215,"column":41}},"78":{"start":{"line":216,"column":2},"end":{"line":216,"column":15}},"79":{"start":{"line":218,"column":2},"end":{"line":222,"column":4}},"80":{"start":{"line":219,"column":4},"end":{"line":221,"column":7}},"81":{"start":{"line":220,"column":6},"end":{"line":220,"column":25}},"82":{"start":{"line":224,"column":2},"end":{"line":226,"column":3}},"83":{"start":{"line":225,"column":4},"end":{"line":225,"column":42}},"84":{"start":{"line":228,"column":2},"end":{"line":230,"column":3}},"85":{"start":{"line":229,"column":4},"end":{"line":229,"column":68}},"86":{"start":{"line":232,"column":2},"end":{"line":243,"column":3}},"87":{"start":{"line":233,"column":4},"end":{"line":233,"column":43}},"88":{"start":{"line":235,"column":4},"end":{"line":241,"column":5}},"89":{"start":{"line":236,"column":6},"end":{"line":240,"column":8}},"90":{"start":{"line":242,"column":4},"end":{"line":242,"column":12}},"91":{"start":{"line":245,"column":2},"end":{"line":251,"column":3}},"92":{"start":{"line":246,"column":4},"end":{"line":250,"column":6}},"93":{"start":{"line":253,"column":2},"end":{"line":253,"column":18}},"94":{"start":{"line":266,"column":0},"end":{"line":280,"column":1}},"95":{"start":{"line":267,"column":2},"end":{"line":267,"column":23}},"96":{"start":{"line":268,"column":2},"end":{"line":268,"column":8}},"97":{"start":{"line":270,"column":2},"end":{"line":275,"column":3}},"98":{"start":{"line":271,"column":4},"end":{"line":273,"column":5}},"99":{"start":{"line":272,"column":6},"end":{"line":272,"column":49}},"100":{"start":{"line":274,"column":4},"end":{"line":274,"column":25}},"101":{"start":{"line":276,"column":2},"end":{"line":278,"column":3}},"102":{"start":{"line":277,"column":4},"end":{"line":277,"column":54}},"103":{"start":{"line":279,"column":2},"end":{"line":279,"column":21}},"104":{"start":{"line":289,"column":0},"end":{"line":311,"column":2}},"105":{"start":{"line":290,"column":2},"end":{"line":290,"column":38}},"106":{"start":{"line":293,"column":2},"end":{"line":296,"column":3}},"107":{"start":{"line":294,"column":4},"end":{"line":294,"column":21}},"108":{"start":{"line":295,"column":4},"end":{"line":295,"column":14}},"109":{"start":{"line":299,"column":2},"end":{"line":299,"column":22}},"110":{"start":{"line":300,"column":2},"end":{"line":302,"column":3}},"111":{"start":{"line":301,"column":4},"end":{"line":301,"column":11}},"112":{"start":{"line":305,"column":2},"end":{"line":308,"column":3}},"113":{"start":{"line":306,"column":4},"end":{"line":306,"column":37}},"114":{"start":{"line":307,"column":4},"end":{"line":307,"column":20}},"115":{"start":{"line":310,"column":2},"end":{"line":310,"column":15}},"116":{"start":{"line":321,"column":0},"end":{"line":337,"column":1}},"117":{"start":{"line":322,"column":2},"end":{"line":322,"column":12}},"118":{"start":{"line":324,"column":2},"end":{"line":334,"column":3}},"119":{"start":{"line":325,"column":4},"end":{"line":325,"column":23}},"120":{"start":{"line":326,"column":4},"end":{"line":328,"column":5}},"121":{"start":{"line":327,"column":6},"end":{"line":327,"column":48}},"122":{"start":{"line":331,"column":4},"end":{"line":333,"column":5}},"123":{"start":{"line":332,"column":6},"end":{"line":332,"column":23}},"124":{"start":{"line":336,"column":2},"end":{"line":336,"column":15}},"125":{"start":{"line":351,"column":0},"end":{"line":369,"column":2}},"126":{"start":{"line":352,"column":2},"end":{"line":352,"column":38}},"127":{"start":{"line":355,"column":2},"end":{"line":360,"column":3}},"128":{"start":{"line":356,"column":4},"end":{"line":359,"column":5}},"129":{"start":{"line":357,"column":6},"end":{"line":357,"column":22}},"130":{"start":{"line":358,"column":6},"end":{"line":358,"column":19}},"131":{"start":{"line":363,"column":2},"end":{"line":363,"column":37}},"132":{"start":{"line":364,"column":2},"end":{"line":366,"column":3}},"133":{"start":{"line":365,"column":4},"end":{"line":365,"column":14}},"134":{"start":{"line":368,"column":2},"end":{"line":368,"column":15}},"135":{"start":{"line":379,"column":0},"end":{"line":395,"column":1}},"136":{"start":{"line":380,"column":2},"end":{"line":380,"column":12}},"137":{"start":{"line":382,"column":2},"end":{"line":392,"column":3}},"138":{"start":{"line":383,"column":4},"end":{"line":383,"column":23}},"139":{"start":{"line":384,"column":4},"end":{"line":386,"column":5}},"140":{"start":{"line":385,"column":6},"end":{"line":385,"column":50}},"141":{"start":{"line":389,"column":4},"end":{"line":391,"column":5}},"142":{"start":{"line":390,"column":6},"end":{"line":390,"column":22}},"143":{"start":{"line":394,"column":2},"end":{"line":394,"column":15}},"144":{"start":{"line":402,"column":0},"end":{"line":419,"column":2}},"145":{"start":{"line":403,"column":2},"end":{"line":406,"column":3}},"146":{"start":{"line":405,"column":4},"end":{"line":405,"column":17}},"147":{"start":{"line":407,"column":2},"end":{"line":407,"column":16}},"148":{"start":{"line":409,"column":2},"end":{"line":416,"column":5}},"149":{"start":{"line":410,"column":4},"end":{"line":415,"column":5}},"150":{"start":{"line":411,"column":6},"end":{"line":411,"column":30}},"151":{"start":{"line":414,"column":6},"end":{"line":414,"column":23}},"152":{"start":{"line":418,"column":2},"end":{"line":418,"column":14}},"153":{"start":{"line":426,"column":0},"end":{"line":426,"column":32}}},"branchMap":{"1":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":2},"end":{"line":42,"column":2}},{"start":{"line":42,"column":2},"end":{"line":42,"column":2}}]},"2":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":2},"end":{"line":46,"column":2}},{"start":{"line":46,"column":2},"end":{"line":46,"column":2}}]},"3":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":6},"end":{"line":51,"column":6}},{"start":{"line":51,"column":6},"end":{"line":51,"column":6}}]},"4":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":6},"end":{"line":60,"column":6}},{"start":{"line":60,"column":6},"end":{"line":60,"column":6}}]},"5":{"line":76,"type":"if","locations":[{"start":{"line":76,"column":2},"end":{"line":76,"column":2}},{"start":{"line":76,"column":2},"end":{"line":76,"column":2}}]},"6":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":4},"end":{"line":78,"column":4}},{"start":{"line":78,"column":4},"end":{"line":78,"column":4}}]},"7":{"line":95,"type":"if","locations":[{"start":{"line":95,"column":2},"end":{"line":95,"column":2}},{"start":{"line":95,"column":2},"end":{"line":95,"column":2}}]},"8":{"line":95,"type":"binary-expr","locations":[{"start":{"line":95,"column":6},"end":{"line":95,"column":29}},{"start":{"line":95,"column":33},"end":{"line":95,"column":57}}]},"9":{"line":98,"type":"if","locations":[{"start":{"line":98,"column":2},"end":{"line":98,"column":2}},{"start":{"line":98,"column":2},"end":{"line":98,"column":2}}]},"10":{"line":98,"type":"binary-expr","locations":[{"start":{"line":98,"column":6},"end":{"line":98,"column":15}},{"start":{"line":98,"column":20},"end":{"line":98,"column":46}},{"start":{"line":98,"column":50},"end":{"line":98,"column":65}}]},"11":{"line":119,"type":"if","locations":[{"start":{"line":119,"column":2},"end":{"line":119,"column":2}},{"start":{"line":119,"column":2},"end":{"line":119,"column":2}}]},"12":{"line":119,"type":"binary-expr","locations":[{"start":{"line":119,"column":6},"end":{"line":119,"column":27}},{"start":{"line":119,"column":31},"end":{"line":119,"column":51}}]},"13":{"line":122,"type":"if","locations":[{"start":{"line":122,"column":2},"end":{"line":122,"column":2}},{"start":{"line":122,"column":2},"end":{"line":122,"column":2}}]},"14":{"line":128,"type":"if","locations":[{"start":{"line":128,"column":4},"end":{"line":128,"column":4}},{"start":{"line":128,"column":4},"end":{"line":128,"column":4}}]},"15":{"line":128,"type":"binary-expr","locations":[{"start":{"line":128,"column":8},"end":{"line":128,"column":31}},{"start":{"line":128,"column":35},"end":{"line":128,"column":59}},{"start":{"line":128,"column":63},"end":{"line":128,"column":72}}]},"16":{"line":135,"type":"cond-expr","locations":[{"start":{"line":135,"column":53},"end":{"line":135,"column":65}},{"start":{"line":135,"column":68},"end":{"line":135,"column":69}}]},"17":{"line":160,"type":"if","locations":[{"start":{"line":160,"column":2},"end":{"line":160,"column":2}},{"start":{"line":160,"column":2},"end":{"line":160,"column":2}}]},"18":{"line":168,"type":"if","locations":[{"start":{"line":168,"column":6},"end":{"line":168,"column":6}},{"start":{"line":168,"column":6},"end":{"line":168,"column":6}}]},"19":{"line":195,"type":"if","locations":[{"start":{"line":195,"column":4},"end":{"line":195,"column":4}},{"start":{"line":195,"column":4},"end":{"line":195,"column":4}}]},"20":{"line":224,"type":"if","locations":[{"start":{"line":224,"column":2},"end":{"line":224,"column":2}},{"start":{"line":224,"column":2},"end":{"line":224,"column":2}}]},"21":{"line":224,"type":"binary-expr","locations":[{"start":{"line":224,"column":6},"end":{"line":224,"column":27}},{"start":{"line":224,"column":31},"end":{"line":224,"column":52}}]},"22":{"line":228,"type":"if","locations":[{"start":{"line":228,"column":2},"end":{"line":228,"column":2}},{"start":{"line":228,"column":2},"end":{"line":228,"column":2}}]},"23":{"line":235,"type":"if","locations":[{"start":{"line":235,"column":4},"end":{"line":235,"column":4}},{"start":{"line":235,"column":4},"end":{"line":235,"column":4}}]},"24":{"line":245,"type":"if","locations":[{"start":{"line":245,"column":2},"end":{"line":245,"column":2}},{"start":{"line":245,"column":2},"end":{"line":245,"column":2}}]},"25":{"line":270,"type":"if","locations":[{"start":{"line":270,"column":2},"end":{"line":270,"column":2}},{"start":{"line":270,"column":2},"end":{"line":270,"column":2}}]},"26":{"line":271,"type":"if","locations":[{"start":{"line":271,"column":4},"end":{"line":271,"column":4}},{"start":{"line":271,"column":4},"end":{"line":271,"column":4}}]},"27":{"line":290,"type":"binary-expr","locations":[{"start":{"line":290,"column":10},"end":{"line":290,"column":14}},{"start":{"line":290,"column":18},"end":{"line":290,"column":37}}]},"28":{"line":293,"type":"binary-expr","locations":[{"start":{"line":293,"column":9},"end":{"line":293,"column":29}},{"start":{"line":293,"column":33},"end":{"line":293,"column":51}}]},"29":{"line":305,"type":"if","locations":[{"start":{"line":305,"column":2},"end":{"line":305,"column":2}},{"start":{"line":305,"column":2},"end":{"line":305,"column":2}}]},"30":{"line":324,"type":"if","locations":[{"start":{"line":324,"column":2},"end":{"line":324,"column":2}},{"start":{"line":324,"column":2},"end":{"line":324,"column":2}}]},"31":{"line":352,"type":"binary-expr","locations":[{"start":{"line":352,"column":10},"end":{"line":352,"column":14}},{"start":{"line":352,"column":18},"end":{"line":352,"column":37}}]},"32":{"line":355,"type":"if","locations":[{"start":{"line":355,"column":2},"end":{"line":355,"column":2}},{"start":{"line":355,"column":2},"end":{"line":355,"column":2}}]},"33":{"line":382,"type":"if","locations":[{"start":{"line":382,"column":2},"end":{"line":382,"column":2}},{"start":{"line":382,"column":2},"end":{"line":382,"column":2}}]},"34":{"line":403,"type":"if","locations":[{"start":{"line":403,"column":2},"end":{"line":403,"column":2}},{"start":{"line":403,"column":2},"end":{"line":403,"column":2}}]},"35":{"line":410,"type":"if","locations":[{"start":{"line":410,"column":4},"end":{"line":410,"column":4}},{"start":{"line":410,"column":4},"end":{"line":410,"column":4}}]}},"code":["'use strict';","","var number = require('./number');","var string = require('./string');","var object = require('./object');","var types = require('./types');","","var DimensionError = require('../error/DimensionError');","var IndexError = require('../error/IndexError');","","/**"," * Calculate the size of a multi dimensional array."," * This function checks the size of the first entry, it does not validate"," * whether all dimensions match. (use function `validate` for that)"," * @param {Array} x"," * @Return {Number[]} size"," */","exports.size = function (x) {","  var s = [];","","  while (Array.isArray(x)) {","    s.push(x.length);","    x = x[0];","  }","","  return s;","};","","/**"," * Recursively validate whether each element in a multi dimensional array"," * has a size corresponding to the provided size array."," * @param {Array} array    Array to be validated"," * @param {number[]} size  Array with the size of each dimension"," * @param {number} dim   Current dimension"," * @throws DimensionError"," * @private"," */","function _validate(array, size, dim) {","  var i;","  var len = array.length;","","  if (len != size[dim]) {","    throw new DimensionError(len, size[dim]);","  }","","  if (dim < size.length - 1) {","    // recursively validate each child array","    var dimNext = dim + 1;","    for (i = 0; i < len; i++) {","      var child = array[i];","      if (!Array.isArray(child)) {","        throw new DimensionError(size.length - 1, size.length, '<');","      }","      _validate(array[i], size, dimNext);","    }","  }","  else {","    // last dimension. none of the childs may be an array","    for (i = 0; i < len; i++) {","      if (Array.isArray(array[i])) {","        throw new DimensionError(size.length + 1, size.length, '>');","      }","    }","  }","}","","/**"," * Validate whether each element in a multi dimensional array has"," * a size corresponding to the provided size array."," * @param {Array} array    Array to be validated"," * @param {number[]} size  Array with the size of each dimension"," * @throws DimensionError"," */","exports.validate = function(array, size) {","  var isScalar = (size.length == 0);","  if (isScalar) {","    // scalar","    if (Array.isArray(array)) {","      throw new DimensionError(array.length, 0);","    }","  }","  else {","    // array","    _validate(array, size, 0);","  }","};","","/**"," * Test whether index is an integer number with index >= 0 and index < length"," * when length is provided"," * @param {number} index    Zero-based index"," * @param {number} [length] Length of the array"," */","exports.validateIndex = function(index, length) {","  if (!number.isNumber(index) || !number.isInteger(index)) {","    throw new TypeError('Index must be an integer (value: ' + index + ')');","  }","  if (index < 0 || (typeof length === 'number' && index >= length)) {","    throw new IndexError(index, length);","  }","};","","// a constant used to specify an undefined defaultValue","exports.UNINITIALIZED = {};","","/**"," * Resize a multi dimensional array. The resized array is returned."," * @param {Array} array         Array to be resized"," * @param {Array.<number>} size Array with the size of each dimension"," * @param {*} [defaultValue=0]  Value to be filled in in new entries,"," *                              zero by default. To leave new entries undefined,"," *                              specify array.UNINITIALIZED as defaultValue"," * @return {Array} array         The resized array"," */","exports.resize = function(array, size, defaultValue) {","  // TODO: add support for scalars, having size=[] ?","","  // check the type of the arguments","  if (!Array.isArray(array) || !Array.isArray(size)) {","    throw new TypeError('Array expected');","  }","  if (size.length === 0) {","    throw new Error('Resizing to scalar is not supported');","  }","","  // check whether size contains positive integers","  size.forEach(function (value) {","    if (!number.isNumber(value) || !number.isInteger(value) || value < 0) {","      throw new TypeError('Invalid size, must contain positive integers ' +","          '(size: ' + string.format(size) + ')');","    }","  });","","  // recursively resize the array","  var _defaultValue = (defaultValue !== undefined) ? defaultValue : 0;","  _resize(array, size, 0, _defaultValue);","","  return array;","};","","/**"," * Recursively resize a multi dimensional array"," * @param {Array} array         Array to be resized"," * @param {number[]} size       Array with the size of each dimension"," * @param {number} dim          Current dimension"," * @param {*} [defaultValue]    Value to be filled in in new entries,"," *                              undefined by default."," * @private"," */","function _resize (array, size, dim, defaultValue) {","  var i;","  var elem;","  var oldLen = array.length;","  var newLen = size[dim];","  var minLen = Math.min(oldLen, newLen);","","  // apply new length","  array.length = newLen;","","  if (dim < size.length - 1) {","    // non-last dimension","    var dimNext = dim + 1;","","    // resize existing child arrays","    for (i = 0; i < minLen; i++) {","      // resize child array","      elem = array[i];","      if (!Array.isArray(elem)) {","        elem = [elem]; // add a dimension","        array[i] = elem;","      }","      _resize(elem, size, dimNext, defaultValue);","    }","","    // create new child arrays","    for (i = minLen; i < newLen; i++) {","      // get child array","      elem = [];","      array[i] = elem;","","      // resize new child array","      _resize(elem, size, dimNext, defaultValue);","    }","  }","  else {","    // last dimension","","    // remove dimensions of existing values","    for (i = 0; i < minLen; i++) {","      while (Array.isArray(array[i])) {","        array[i] = array[i][0];","      }","    }","","    if(defaultValue !== exports.UNINITIALIZED) {","      // fill new elements with the default value","      for (i = minLen; i < newLen; i++) {","        array[i] = defaultValue;","      }","    }","  }","}","","/**"," * Re-shape a multi dimensional array to fit the specified dimensions"," * @param {Array} array           Array to be reshaped"," * @param {Array.<number>} sizes  List of sizes for each dimension"," * @returns {Array}               Array whose data has been formatted to fit the"," *                                specified dimensions"," *"," * @throws {DimensionError}       If the product of the new dimension sizes does"," *                                not equal that of the old ones"," */","exports.reshape = function(array, sizes) {","  var flatArray = exports.flatten(array);","  var newArray;","","  var product = function (arr) {","    return arr.reduce(function (prev, curr) {","      return prev * curr;","    });","  };","","  if (!Array.isArray(array) || !Array.isArray(sizes)) {","    throw new TypeError('Array expected');","  }","","  if (sizes.length === 0) {","    throw new DimensionError(0, product(exports.size(array)), '!=');","  }","","  try {","    newArray  = _reshape(flatArray, sizes);","  } catch (e) {","    if (e instanceof DimensionError) {","      throw new DimensionError(","        product(sizes),","        product(exports.size(array)),","        '!='","      );","    }","    throw e;","  }","","  if (flatArray.length > 0) {","    throw new DimensionError(","      product(sizes),","      product(exports.size(array)),","      '!='","    );","  }","","  return newArray;","};","","/**"," * Recursively re-shape a multi dimensional array to fit the specified dimensions"," * @param {Array} array           Array to be reshaped"," * @param {Array.<number>} sizes  List of sizes for each dimension"," * @returns {Array}               Array whose data has been formatted to fit the"," *                                specified dimensions"," *"," * @throws {DimensionError}       If the product of the new dimension sizes does"," *                                not equal that of the old ones"," */","function _reshape(array, sizes) {","  var accumulator = [];","  var i;","","  if (sizes.length === 0) {","    if (array.length === 0) {","      throw new DimensionError(null, null, '!=');","    }","    return array.shift();","  }","  for (i = 0; i < sizes[0]; i += 1) {","    accumulator.push(_reshape(array, sizes.slice(1)));","  }","  return accumulator;","}","","","/**"," * Squeeze a multi dimensional array"," * @param {Array} array"," * @param {Array} [size]"," * @returns {Array} returns the array itself"," */","exports.squeeze = function(array, size) {","  var s = size || exports.size(array);","","  // squeeze outer dimensions","  while (Array.isArray(array) && array.length === 1) {","    array = array[0];","    s.shift();","  }","","  // find the first dimension to be squeezed","  var dims = s.length;","  while (s[dims - 1] === 1) {","    dims--;","  }","","  // squeeze inner dimensions","  if (dims < s.length) {","    array = _squeeze(array, dims, 0);","    s.length = dims;","  }","","  return array;","};","","/**"," * Recursively squeeze a multi dimensional array"," * @param {Array} array"," * @param {number} dims Required number of dimensions"," * @param {number} dim  Current dimension"," * @returns {Array | *} Returns the squeezed array"," * @private"," */","function _squeeze (array, dims, dim) {","  var i, ii;","","  if (dim < dims) {","    var next = dim + 1;","    for (i = 0, ii = array.length; i < ii; i++) {","      array[i] = _squeeze(array[i], dims, next);","    }","  }","  else {","    while (Array.isArray(array)) {","      array = array[0];","    }","  }","","  return array;","}","","/**"," * Unsqueeze a multi dimensional array: add dimensions when missing"," * "," * Paramter `size` will be mutated to match the new, unqueezed matrix size."," * "," * @param {Array} array"," * @param {number} dims     Desired number of dimensions of the array"," * @param {number} [outer]  Number of outer dimensions to be added"," * @param {Array} [size]    Current size of array."," * @returns {Array} returns the array itself"," * @private"," */","exports.unsqueeze = function(array, dims, outer, size) {","  var s = size || exports.size(array);","","  // unsqueeze outer dimensions","  if (outer) {","    for (var i = 0; i < outer; i++) {","      array = [array];","      s.unshift(1);","    }","  }","","  // unsqueeze inner dimensions","  array = _unsqueeze(array, dims, 0);","  while (s.length < dims) {","    s.push(1);","  }","","  return array;","};","","/**"," * Recursively unsqueeze a multi dimensional array"," * @param {Array} array"," * @param {number} dims Required number of dimensions"," * @param {number} dim  Current dimension"," * @returns {Array | *} Returns the squeezed array"," * @private"," */","function _unsqueeze (array, dims, dim) {","  var i, ii;","","  if (Array.isArray(array)) {","    var next = dim + 1;","    for (i = 0, ii = array.length; i < ii; i++) {","      array[i] = _unsqueeze(array[i], dims, next);","    }","  }","  else {","    for (var d = dim; d < dims; d++) {","      array = [array];","    }","  }","","  return array;","}","/**"," * Flatten a multi dimensional array, put all elements in a one dimensional"," * array"," * @param {Array} array   A multi dimensional array"," * @return {Array}        The flattened array (1 dimensional)"," */","exports.flatten = function(array) {","  if (!Array.isArray(array)) {","    //if not an array, return as is","    return array;","  }","  var flat = [];","","  array.forEach(function callback(value) {","    if (Array.isArray(value)) {","      value.forEach(callback);  //traverse through sub-arrays recursively","    }","    else {","      flat.push(value);","    }","  });","","  return flat;","};","","/**"," * Test whether an object is an array"," * @param {*} value"," * @return {boolean} isArray"," */","exports.isArray = Array.isArray;",""],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"9":1,"18":1,"19":0,"21":0,"22":0,"23":0,"26":0,"38":1,"39":0,"40":0,"42":0,"43":0,"46":0,"48":0,"49":0,"50":0,"51":0,"52":0,"54":0,"59":0,"60":0,"61":0,"74":1,"75":0,"76":0,"78":0,"79":0,"84":0,"94":1,"95":0,"96":0,"98":0,"99":0,"104":1,"115":1,"119":0,"120":0,"122":0,"123":0,"127":0,"128":0,"129":0,"135":0,"136":0,"138":0,"150":1,"151":0,"152":0,"153":0,"154":0,"155":0,"158":0,"160":0,"162":0,"165":0,"167":0,"168":0,"169":0,"170":0,"172":0,"176":0,"178":0,"179":0,"182":0,"189":0,"190":0,"191":0,"195":0,"197":0,"198":0,"214":1,"215":0,"216":0,"218":0,"219":0,"220":0,"224":0,"225":0,"228":0,"229":0,"232":0,"233":0,"235":0,"236":0,"242":0,"245":0,"246":0,"253":0,"266":1,"267":0,"268":0,"270":0,"271":0,"272":0,"274":0,"276":0,"277":0,"279":0,"289":1,"290":0,"293":0,"294":0,"295":0,"299":0,"300":0,"301":0,"305":0,"306":0,"307":0,"310":0,"321":1,"322":0,"324":0,"325":0,"326":0,"327":0,"331":0,"332":0,"336":0,"351":1,"352":0,"355":0,"356":0,"357":0,"358":0,"363":0,"364":0,"365":0,"368":0,"379":1,"380":0,"382":0,"383":0,"384":0,"385":0,"389":0,"390":0,"394":0,"402":1,"403":0,"405":0,"407":0,"409":0,"410":0,"411":0,"414":0,"418":0,"426":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/utils/types.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/utils/types.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":1,"23":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"(anonymous_1)","line":26,"loc":{"start":{"line":26,"column":15},"end":{"line":26,"column":27}}},"2":{"name":"(anonymous_2)","line":52,"loc":{"start":{"line":52,"column":19},"end":{"line":52,"column":32}}}},"statementMap":{"1":{"start":{"line":26,"column":0},"end":{"line":44,"column":2}},"2":{"start":{"line":27,"column":2},"end":{"line":27,"column":22}},"3":{"start":{"line":29,"column":2},"end":{"line":39,"column":3}},"4":{"start":{"line":30,"column":4},"end":{"line":30,"column":44}},"5":{"start":{"line":30,"column":30},"end":{"line":30,"column":44}},"6":{"start":{"line":31,"column":4},"end":{"line":31,"column":47}},"7":{"start":{"line":31,"column":30},"end":{"line":31,"column":47}},"8":{"start":{"line":32,"column":4},"end":{"line":32,"column":46}},"9":{"start":{"line":32,"column":30},"end":{"line":32,"column":46}},"10":{"start":{"line":33,"column":4},"end":{"line":33,"column":46}},"11":{"start":{"line":33,"column":30},"end":{"line":33,"column":46}},"12":{"start":{"line":34,"column":4},"end":{"line":34,"column":45}},"13":{"start":{"line":34,"column":30},"end":{"line":34,"column":45}},"14":{"start":{"line":35,"column":4},"end":{"line":35,"column":44}},"15":{"start":{"line":35,"column":30},"end":{"line":35,"column":44}},"16":{"start":{"line":36,"column":4},"end":{"line":36,"column":46}},"17":{"start":{"line":36,"column":30},"end":{"line":36,"column":46}},"18":{"start":{"line":38,"column":4},"end":{"line":38,"column":20}},"19":{"start":{"line":41,"column":2},"end":{"line":41,"column":48}},"20":{"start":{"line":41,"column":30},"end":{"line":41,"column":48}},"21":{"start":{"line":43,"column":2},"end":{"line":43,"column":14}},"22":{"start":{"line":52,"column":0},"end":{"line":54,"column":2}},"23":{"start":{"line":53,"column":2},"end":{"line":53,"column":50}}},"branchMap":{"1":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":2},"end":{"line":29,"column":2}},{"start":{"line":29,"column":2},"end":{"line":29,"column":2}}]},"2":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":4},"end":{"line":30,"column":4}},{"start":{"line":30,"column":4},"end":{"line":30,"column":4}}]},"3":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":4},"end":{"line":31,"column":4}},{"start":{"line":31,"column":4},"end":{"line":31,"column":4}}]},"4":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":4},"end":{"line":32,"column":4}},{"start":{"line":32,"column":4},"end":{"line":32,"column":4}}]},"5":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":4},"end":{"line":33,"column":4}},{"start":{"line":33,"column":4},"end":{"line":33,"column":4}}]},"6":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":4},"end":{"line":34,"column":4}},{"start":{"line":34,"column":4},"end":{"line":34,"column":4}}]},"7":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":4},"end":{"line":35,"column":4}},{"start":{"line":35,"column":4},"end":{"line":35,"column":4}}]},"8":{"line":36,"type":"if","locations":[{"start":{"line":36,"column":4},"end":{"line":36,"column":4}},{"start":{"line":36,"column":4},"end":{"line":36,"column":4}}]},"9":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":2},"end":{"line":41,"column":2}},{"start":{"line":41,"column":2},"end":{"line":41,"column":2}}]},"10":{"line":53,"type":"binary-expr","locations":[{"start":{"line":53,"column":12},"end":{"line":53,"column":13}},{"start":{"line":53,"column":17},"end":{"line":53,"column":27}},{"start":{"line":53,"column":32},"end":{"line":53,"column":48}}]}},"code":["'use strict';","","/**"," * Determine the type of a variable"," *"," *     type(x)"," *"," * The following types are recognized:"," *"," *     'undefined'"," *     'null'"," *     'boolean'"," *     'number'"," *     'string'"," *     'Array'"," *     'Function'"," *     'Date'"," *     'RegExp'"," *     'Object'"," *"," * @param {*} x"," * @return {string} Returns the name of the type. Primitive types are lower case,"," *                  non-primitive types are upper-camel-case."," *                  For example 'number', 'string', 'Array', 'Date'."," */","exports.type = function(x) {","  var type = typeof x;","","  if (type === 'object') {","    if (x === null)           return 'null';","    if (x instanceof Boolean) return 'boolean';","    if (x instanceof Number)  return 'number';","    if (x instanceof String)  return 'string';","    if (Array.isArray(x))     return 'Array';","    if (x instanceof Date)    return 'Date';","    if (x instanceof RegExp)  return 'RegExp';","","    return 'Object';","  }","","  if (type === 'function')    return 'Function';","","  return type;","};","","/**"," * Test whether a value is a scalar"," * @param x"," * @return {boolean} Returns true when x is a scalar, returns false when"," *                   x is a Matrix or Array."," */","exports.isScalar = function (x) {","  return !((x && x.isMatrix) || Array.isArray(x));","};",""],"l":{"26":1,"27":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"38":0,"41":0,"43":0,"52":1,"53":0}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/error/DimensionError.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/error/DimensionError.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1,"10":1,"11":1,"12":1,"13":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"DimensionError","line":12,"loc":{"start":{"line":12,"column":0},"end":{"line":12,"column":52}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":28,"column":1}},"2":{"start":{"line":13,"column":2},"end":{"line":15,"column":3}},"3":{"start":{"line":14,"column":4},"end":{"line":14,"column":78}},"4":{"start":{"line":17,"column":2},"end":{"line":17,"column":25}},"5":{"start":{"line":18,"column":2},"end":{"line":18,"column":27}},"6":{"start":{"line":19,"column":2},"end":{"line":19,"column":27}},"7":{"start":{"line":21,"column":2},"end":{"line":25,"column":10}},"8":{"start":{"line":27,"column":2},"end":{"line":27,"column":35}},"9":{"start":{"line":30,"column":0},"end":{"line":30,"column":44}},"10":{"start":{"line":31,"column":0},"end":{"line":31,"column":50}},"11":{"start":{"line":32,"column":0},"end":{"line":32,"column":49}},"12":{"start":{"line":33,"column":0},"end":{"line":33,"column":49}},"13":{"start":{"line":35,"column":0},"end":{"line":35,"column":32}}},"branchMap":{"1":{"line":13,"type":"if","locations":[{"start":{"line":13,"column":2},"end":{"line":13,"column":2}},{"start":{"line":13,"column":2},"end":{"line":13,"column":2}}]},"2":{"line":22,"type":"cond-expr","locations":[{"start":{"line":22,"column":32},"end":{"line":22,"column":61}},{"start":{"line":22,"column":65},"end":{"line":22,"column":71}}]},"3":{"line":23,"type":"binary-expr","locations":[{"start":{"line":23,"column":13},"end":{"line":23,"column":26}},{"start":{"line":23,"column":30},"end":{"line":23,"column":34}}]},"4":{"line":24,"type":"cond-expr","locations":[{"start":{"line":24,"column":34},"end":{"line":24,"column":65}},{"start":{"line":24,"column":69},"end":{"line":24,"column":77}}]}},"code":["'use strict';","","/**"," * Create a range error with the message:"," *     'Dimension mismatch (<actual size> != <expected size>)'"," * @param {number | number[]} actual        The actual size"," * @param {number | number[]} expected      The expected size"," * @param {string} [relation='!=']          Optional relation between actual"," *                                          and expected size: '!=', '<', etc."," * @extends RangeError"," */","function DimensionError(actual, expected, relation) {","  if (!(this instanceof DimensionError)) {","    throw new SyntaxError('Constructor must be called with the new operator');","  }","","  this.actual   = actual;","  this.expected = expected;","  this.relation = relation;","","  this.message = 'Dimension mismatch (' +","      (Array.isArray(actual) ? ('[' + actual.join(', ') + ']') : actual) +","      ' ' + (this.relation || '!=') + ' ' +","      (Array.isArray(expected) ? ('[' + expected.join(', ') + ']') : expected) +","      ')';","","  this.stack = (new Error()).stack;","}","","DimensionError.prototype = new RangeError();","DimensionError.prototype.constructor = RangeError;","DimensionError.prototype.name = 'DimensionError';","DimensionError.prototype.isDimensionError = true;","","module.exports = DimensionError;",""],"l":{"12":1,"13":0,"14":0,"17":0,"18":0,"19":0,"21":0,"27":0,"30":1,"31":1,"32":1,"33":1,"35":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/error/IndexError.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/error/IndexError.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1,"17":1,"18":1,"19":1,"20":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"IndexError","line":13,"loc":{"start":{"line":13,"column":0},"end":{"line":13,"column":37}}}},"statementMap":{"1":{"start":{"line":13,"column":0},"end":{"line":39,"column":1}},"2":{"start":{"line":14,"column":2},"end":{"line":16,"column":3}},"3":{"start":{"line":15,"column":4},"end":{"line":15,"column":78}},"4":{"start":{"line":18,"column":2},"end":{"line":18,"column":21}},"5":{"start":{"line":19,"column":2},"end":{"line":26,"column":3}},"6":{"start":{"line":20,"column":4},"end":{"line":20,"column":17}},"7":{"start":{"line":21,"column":4},"end":{"line":21,"column":19}},"8":{"start":{"line":24,"column":4},"end":{"line":24,"column":19}},"9":{"start":{"line":25,"column":4},"end":{"line":25,"column":19}},"10":{"start":{"line":28,"column":2},"end":{"line":36,"column":3}},"11":{"start":{"line":29,"column":4},"end":{"line":29,"column":80}},"12":{"start":{"line":31,"column":7},"end":{"line":36,"column":3}},"13":{"start":{"line":32,"column":4},"end":{"line":32,"column":86}},"14":{"start":{"line":35,"column":4},"end":{"line":35,"column":61}},"15":{"start":{"line":38,"column":2},"end":{"line":38,"column":35}},"16":{"start":{"line":41,"column":0},"end":{"line":41,"column":40}},"17":{"start":{"line":42,"column":0},"end":{"line":42,"column":46}},"18":{"start":{"line":43,"column":0},"end":{"line":43,"column":41}},"19":{"start":{"line":44,"column":0},"end":{"line":44,"column":41}},"20":{"start":{"line":46,"column":0},"end":{"line":46,"column":28}}},"branchMap":{"1":{"line":14,"type":"if","locations":[{"start":{"line":14,"column":2},"end":{"line":14,"column":2}},{"start":{"line":14,"column":2},"end":{"line":14,"column":2}}]},"2":{"line":19,"type":"if","locations":[{"start":{"line":19,"column":2},"end":{"line":19,"column":2}},{"start":{"line":19,"column":2},"end":{"line":19,"column":2}}]},"3":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":2},"end":{"line":28,"column":2}},{"start":{"line":28,"column":2},"end":{"line":28,"column":2}}]},"4":{"line":28,"type":"binary-expr","locations":[{"start":{"line":28,"column":6},"end":{"line":28,"column":28}},{"start":{"line":28,"column":32},"end":{"line":28,"column":53}}]},"5":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":7},"end":{"line":31,"column":7}},{"start":{"line":31,"column":7},"end":{"line":31,"column":7}}]},"6":{"line":31,"type":"binary-expr","locations":[{"start":{"line":31,"column":11},"end":{"line":31,"column":33}},{"start":{"line":31,"column":37},"end":{"line":31,"column":59}}]}},"code":["'use strict';","","/**"," * Create a range error with the message:"," *     'Index out of range (index < min)'"," *     'Index out of range (index < max)'"," *"," * @param {number} index     The actual index"," * @param {number} [min=0]   Minimum index (included)"," * @param {number} [max]     Maximum index (excluded)"," * @extends RangeError"," */","function IndexError(index, min, max) {","  if (!(this instanceof IndexError)) {","    throw new SyntaxError('Constructor must be called with the new operator');","  }","","  this.index = index;","  if (arguments.length < 3) {","    this.min = 0;","    this.max = min;","  }","  else {","    this.min = min;","    this.max = max;","  }","","  if (this.min !== undefined && this.index < this.min) {","    this.message = 'Index out of range (' + this.index + ' < ' + this.min + ')';","  }","  else if (this.max !== undefined && this.index >= this.max) {","    this.message = 'Index out of range (' + this.index + ' > ' + (this.max - 1) + ')';","  }","  else {","    this.message = 'Index out of range (' + this.index + ')';","  }","","  this.stack = (new Error()).stack;","}","","IndexError.prototype = new RangeError();","IndexError.prototype.constructor = RangeError;","IndexError.prototype.name = 'IndexError';","IndexError.prototype.isIndexError = true;","","module.exports = IndexError;",""],"l":{"13":1,"14":0,"15":0,"18":0,"19":0,"20":0,"21":0,"24":0,"25":0,"28":0,"29":0,"31":0,"32":0,"35":0,"38":0,"41":1,"42":1,"43":1,"44":1,"46":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/utils/boolean.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/utils/boolean.js","s":{"1":1,"2":0},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":8,"loc":{"start":{"line":8,"column":20},"end":{"line":8,"column":36}}}},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":10,"column":2}},"2":{"start":{"line":9,"column":2},"end":{"line":9,"column":35}}},"branchMap":{},"code":["'use strict';","","/**"," * Test whether value is a boolean"," * @param {*} value"," * @return {boolean} isBoolean"," */","exports.isBoolean = function(value) {","  return typeof value == 'boolean';","};",""],"l":{"8":1,"9":0}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/utils/function.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/utils/function.js","s":{"1":1,"2":4,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1,"13":0,"14":0,"15":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":4,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":14,"loc":{"start":{"line":14,"column":18},"end":{"line":14,"column":39}}},"2":{"name":"memoize","line":15,"loc":{"start":{"line":15,"column":9},"end":{"line":15,"column":28}}},"3":{"name":"(anonymous_3)","line":39,"loc":{"start":{"line":39,"column":27},"end":{"line":39,"column":41}}},"4":{"name":"(anonymous_4)","line":41,"loc":{"start":{"line":41,"column":14},"end":{"line":41,"column":41}}}},"statementMap":{"1":{"start":{"line":14,"column":0},"end":{"line":31,"column":2}},"2":{"start":{"line":15,"column":2},"end":{"line":30,"column":4}},"3":{"start":{"line":16,"column":4},"end":{"line":18,"column":5}},"4":{"start":{"line":17,"column":6},"end":{"line":17,"column":25}},"5":{"start":{"line":20,"column":4},"end":{"line":20,"column":18}},"6":{"start":{"line":21,"column":4},"end":{"line":23,"column":5}},"7":{"start":{"line":22,"column":6},"end":{"line":22,"column":29}},"8":{"start":{"line":25,"column":4},"end":{"line":25,"column":60}},"9":{"start":{"line":26,"column":4},"end":{"line":28,"column":5}},"10":{"start":{"line":27,"column":6},"end":{"line":27,"column":54}},"11":{"start":{"line":29,"column":4},"end":{"line":29,"column":31}},"12":{"start":{"line":39,"column":0},"end":{"line":45,"column":2}},"13":{"start":{"line":40,"column":2},"end":{"line":44,"column":13}},"14":{"start":{"line":42,"column":8},"end":{"line":42,"column":61}},"15":{"start":{"line":43,"column":8},"end":{"line":43,"column":37}}},"branchMap":{"1":{"line":16,"type":"if","locations":[{"start":{"line":16,"column":4},"end":{"line":16,"column":4}},{"start":{"line":16,"column":4},"end":{"line":16,"column":4}}]},"2":{"line":25,"type":"cond-expr","locations":[{"start":{"line":25,"column":24},"end":{"line":25,"column":36}},{"start":{"line":25,"column":39},"end":{"line":25,"column":59}}]},"3":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":4},"end":{"line":26,"column":4}},{"start":{"line":26,"column":4},"end":{"line":26,"column":4}}]},"4":{"line":40,"type":"binary-expr","locations":[{"start":{"line":40,"column":21},"end":{"line":40,"column":34}},{"start":{"line":40,"column":38},"end":{"line":40,"column":40}}]},"5":{"line":42,"type":"binary-expr","locations":[{"start":{"line":42,"column":21},"end":{"line":42,"column":42}},{"start":{"line":42,"column":46},"end":{"line":42,"column":48}}]}},"code":["// function utils","","/*"," * Memoize a given function by caching the computed result."," * The cache of a memoized function can be cleared by deleting the `cache`"," * property of the function."," *"," * @param {function} fn                     The function to be memoized."," *                                          Must be a pure function."," * @param {function(args: Array)} [hasher]  A custom hash builder."," *                                          Is JSON.stringify by default."," * @return {function}                       Returns the memoized function"," */","exports.memoize = function(fn, hasher) {","  return function memoize() {","    if (typeof memoize.cache !== 'object') {","      memoize.cache = {};","    }","","    var args = [];","    for (var i = 0; i < arguments.length; i++) {","      args[i] = arguments[i];","    }","","    var hash = hasher ? hasher(args) : JSON.stringify(args);","    if (!(hash in memoize.cache)) {","      return memoize.cache[hash] = fn.apply(fn, args);","    }","    return memoize.cache[hash];","  };","};","","/**"," * Find the maximum number of arguments expected by a typed function."," * @param {function} fn   A typed function"," * @return {number} Returns the maximum number of expected arguments."," *                  Returns -1 when no signatures where found on the function."," */","exports.maxArgumentCount = function (fn) {","  return Object.keys(fn.signatures || {})","      .reduce(function (args, signature) {","        var count = (signature.match(/,/g) || []).length + 1;","        return Math.max(args, count);","      }, -1);","};",""],"l":{"14":1,"15":4,"16":0,"17":0,"20":0,"21":0,"22":0,"25":0,"26":0,"27":0,"29":0,"39":1,"40":0,"42":0,"43":0}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/matrix/DenseMatrix.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/matrix/DenseMatrix.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":1,"42":1,"43":1,"44":1,"45":0,"46":1,"47":0,"48":1,"49":0,"50":1,"51":0,"52":0,"53":0,"54":0,"55":1,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":1,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":1,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":1,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":1,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":1,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":1,"152":0,"153":0,"154":0,"155":0,"156":1,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":1,"166":0,"167":0,"168":0,"169":0,"170":1,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":1,"182":0,"183":0,"184":1,"185":0,"186":1,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":1,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":1,"203":0,"204":1,"205":0,"206":1,"207":0,"208":1,"209":0,"210":1,"211":0,"212":1,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":1,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0,"270":0,"271":0,"272":0,"273":0,"274":1,"275":0,"276":1,"277":0,"278":0,"279":0,"280":0,"281":0,"282":0,"283":0,"284":0,"285":1,"286":0,"287":0,"288":0,"289":1,"290":0,"291":0,"292":0,"293":0,"294":0,"295":0,"296":0,"297":1,"298":1,"299":1,"300":1,"301":1,"302":1,"303":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0,0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0,0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0],"70":[0,0],"71":[0,0],"72":[0,0],"73":[0,0],"74":[0,0],"75":[0,0,0,0],"76":[0,0],"77":[0,0],"78":[0,0],"79":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0},"fnMap":{"1":{"name":"factory","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":45}}},"2":{"name":"DenseMatrix","line":25,"loc":{"start":{"line":25,"column":2},"end":{"line":25,"column":39}}},"3":{"name":"(anonymous_3)","line":91,"loc":{"start":{"line":91,"column":34},"end":{"line":91,"column":46}}},"4":{"name":"(anonymous_4)","line":104,"loc":{"start":{"line":104,"column":35},"end":{"line":104,"column":47}}},"5":{"name":"(anonymous_5)","line":114,"loc":{"start":{"line":114,"column":33},"end":{"line":114,"column":59}}},"6":{"name":"(anonymous_6)","line":132,"loc":{"start":{"line":132,"column":33},"end":{"line":132,"column":77}}},"7":{"name":"(anonymous_7)","line":153,"loc":{"start":{"line":153,"column":30},"end":{"line":153,"column":47}}},"8":{"name":"(anonymous_8)","line":183,"loc":{"start":{"line":183,"column":30},"end":{"line":183,"column":68}}},"9":{"name":"(anonymous_9)","line":192,"loc":{"start":{"line":192,"column":25},"end":{"line":192,"column":38}}},"10":{"name":"_get","line":220,"loc":{"start":{"line":220,"column":2},"end":{"line":220,"column":32}}},"11":{"name":"_getSubmatrix","line":262,"loc":{"start":{"line":262,"column":2},"end":{"line":262,"column":50}}},"12":{"name":"(anonymous_12)","line":267,"loc":{"start":{"line":267,"column":23},"end":{"line":267,"column":36}}},"13":{"name":"(anonymous_13)","line":272,"loc":{"start":{"line":272,"column":23},"end":{"line":272,"column":36}}},"14":{"name":"_set","line":291,"loc":{"start":{"line":291,"column":2},"end":{"line":291,"column":57}}},"15":{"name":"(anonymous_15)","line":350,"loc":{"start":{"line":350,"column":33},"end":{"line":350,"column":46}}},"16":{"name":"_setSubmatrix","line":374,"loc":{"start":{"line":374,"column":2},"end":{"line":374,"column":61}}},"17":{"name":"(anonymous_17)","line":379,"loc":{"start":{"line":379,"column":20},"end":{"line":379,"column":51}}},"18":{"name":"(anonymous_18)","line":385,"loc":{"start":{"line":385,"column":20},"end":{"line":385,"column":51}}},"19":{"name":"(anonymous_19)","line":405,"loc":{"start":{"line":405,"column":33},"end":{"line":405,"column":69}}},"20":{"name":"(anonymous_20)","line":416,"loc":{"start":{"line":416,"column":16},"end":{"line":416,"column":54}}},"21":{"name":"(anonymous_21)","line":448,"loc":{"start":{"line":448,"column":34},"end":{"line":448,"column":56}}},"22":{"name":"_fit","line":465,"loc":{"start":{"line":465,"column":2},"end":{"line":465,"column":44}}},"23":{"name":"(anonymous_23)","line":494,"loc":{"start":{"line":494,"column":32},"end":{"line":494,"column":44}}},"24":{"name":"(anonymous_24)","line":508,"loc":{"start":{"line":508,"column":31},"end":{"line":508,"column":42}}},"25":{"name":"(anonymous_25)","line":522,"loc":{"start":{"line":522,"column":30},"end":{"line":522,"column":50}}},"26":{"name":"(anonymous_26)","line":525,"loc":{"start":{"line":525,"column":18},"end":{"line":525,"column":42}}},"27":{"name":"(anonymous_27)","line":527,"loc":{"start":{"line":527,"column":25},"end":{"line":527,"column":45}}},"28":{"name":"(anonymous_28)","line":550,"loc":{"start":{"line":550,"column":34},"end":{"line":550,"column":54}}},"29":{"name":"(anonymous_29)","line":553,"loc":{"start":{"line":553,"column":18},"end":{"line":553,"column":42}}},"30":{"name":"(anonymous_30)","line":555,"loc":{"start":{"line":555,"column":22},"end":{"line":555,"column":42}}},"31":{"name":"(anonymous_31)","line":571,"loc":{"start":{"line":571,"column":34},"end":{"line":571,"column":46}}},"32":{"name":"(anonymous_32)","line":580,"loc":{"start":{"line":580,"column":34},"end":{"line":580,"column":46}}},"33":{"name":"(anonymous_33)","line":593,"loc":{"start":{"line":593,"column":33},"end":{"line":593,"column":52}}},"34":{"name":"(anonymous_34)","line":602,"loc":{"start":{"line":602,"column":35},"end":{"line":602,"column":47}}},"35":{"name":"(anonymous_35)","line":611,"loc":{"start":{"line":611,"column":33},"end":{"line":611,"column":45}}},"36":{"name":"(anonymous_36)","line":628,"loc":{"start":{"line":628,"column":35},"end":{"line":628,"column":47}}},"37":{"name":"(anonymous_37)","line":681,"loc":{"start":{"line":681,"column":25},"end":{"line":681,"column":75}}},"38":{"name":"(anonymous_38)","line":688,"loc":{"start":{"line":688,"column":20},"end":{"line":688,"column":33}}},"39":{"name":"(anonymous_39)","line":742,"loc":{"start":{"line":742,"column":15},"end":{"line":742,"column":28}}},"40":{"name":"(anonymous_40)","line":756,"loc":{"start":{"line":756,"column":15},"end":{"line":756,"column":28}}},"41":{"name":"(anonymous_41)","line":763,"loc":{"start":{"line":763,"column":15},"end":{"line":763,"column":27}}},"42":{"name":"(anonymous_42)","line":803,"loc":{"start":{"line":803,"column":25},"end":{"line":803,"column":41}}},"43":{"name":"(anonymous_43)","line":816,"loc":{"start":{"line":816,"column":35},"end":{"line":816,"column":51}}},"44":{"name":"(anonymous_44)","line":841,"loc":{"start":{"line":841,"column":26},"end":{"line":841,"column":48}}},"45":{"name":"preprocess","line":855,"loc":{"start":{"line":855,"column":2},"end":{"line":855,"column":28}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":40}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":59}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":25}},"4":{"start":{"line":7,"column":0},"end":{"line":7,"column":23}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":25}},"6":{"start":{"line":9,"column":0},"end":{"line":9,"column":25}},"7":{"start":{"line":11,"column":0},"end":{"line":11,"column":28}},"8":{"start":{"line":12,"column":0},"end":{"line":12,"column":31}},"9":{"start":{"line":13,"column":0},"end":{"line":13,"column":33}},"10":{"start":{"line":14,"column":0},"end":{"line":14,"column":31}},"11":{"start":{"line":16,"column":0},"end":{"line":16,"column":40}},"12":{"start":{"line":18,"column":0},"end":{"line":875,"column":1}},"13":{"start":{"line":19,"column":2},"end":{"line":19,"column":41}},"14":{"start":{"line":25,"column":2},"end":{"line":72,"column":3}},"15":{"start":{"line":26,"column":4},"end":{"line":27,"column":80}},"16":{"start":{"line":27,"column":6},"end":{"line":27,"column":80}},"17":{"start":{"line":28,"column":4},"end":{"line":29,"column":55}},"18":{"start":{"line":29,"column":6},"end":{"line":29,"column":55}},"19":{"start":{"line":31,"column":4},"end":{"line":71,"column":5}},"20":{"start":{"line":33,"column":6},"end":{"line":44,"column":7}},"21":{"start":{"line":35,"column":8},"end":{"line":35,"column":46}},"22":{"start":{"line":36,"column":8},"end":{"line":36,"column":46}},"23":{"start":{"line":37,"column":8},"end":{"line":37,"column":52}},"24":{"start":{"line":41,"column":8},"end":{"line":41,"column":36}},"25":{"start":{"line":42,"column":8},"end":{"line":42,"column":33}},"26":{"start":{"line":43,"column":8},"end":{"line":43,"column":52}},"27":{"start":{"line":46,"column":9},"end":{"line":71,"column":5}},"28":{"start":{"line":48,"column":6},"end":{"line":48,"column":29}},"29":{"start":{"line":49,"column":6},"end":{"line":49,"column":29}},"30":{"start":{"line":50,"column":6},"end":{"line":50,"column":49}},"31":{"start":{"line":52,"column":9},"end":{"line":71,"column":5}},"32":{"start":{"line":54,"column":6},"end":{"line":54,"column":36}},"33":{"start":{"line":56,"column":6},"end":{"line":56,"column":42}},"34":{"start":{"line":58,"column":6},"end":{"line":58,"column":45}},"35":{"start":{"line":60,"column":6},"end":{"line":60,"column":32}},"36":{"start":{"line":62,"column":9},"end":{"line":71,"column":5}},"37":{"start":{"line":64,"column":6},"end":{"line":64,"column":86}},"38":{"start":{"line":68,"column":6},"end":{"line":68,"column":22}},"39":{"start":{"line":69,"column":6},"end":{"line":69,"column":23}},"40":{"start":{"line":70,"column":6},"end":{"line":70,"column":32}},"41":{"start":{"line":74,"column":2},"end":{"line":74,"column":39}},"42":{"start":{"line":79,"column":2},"end":{"line":79,"column":45}},"43":{"start":{"line":80,"column":2},"end":{"line":80,"column":45}},"44":{"start":{"line":91,"column":2},"end":{"line":93,"column":4}},"45":{"start":{"line":92,"column":4},"end":{"line":92,"column":19}},"46":{"start":{"line":104,"column":2},"end":{"line":106,"column":4}},"47":{"start":{"line":105,"column":4},"end":{"line":105,"column":26}},"48":{"start":{"line":114,"column":2},"end":{"line":116,"column":4}},"49":{"start":{"line":115,"column":4},"end":{"line":115,"column":43}},"50":{"start":{"line":132,"column":2},"end":{"line":145,"column":4}},"51":{"start":{"line":133,"column":4},"end":{"line":144,"column":5}},"52":{"start":{"line":135,"column":8},"end":{"line":135,"column":33}},"53":{"start":{"line":140,"column":8},"end":{"line":140,"column":60}},"54":{"start":{"line":143,"column":8},"end":{"line":143,"column":59}},"55":{"start":{"line":153,"column":2},"end":{"line":171,"column":4}},"56":{"start":{"line":154,"column":4},"end":{"line":155,"column":44}},"57":{"start":{"line":155,"column":6},"end":{"line":155,"column":44}},"58":{"start":{"line":156,"column":4},"end":{"line":157,"column":64}},"59":{"start":{"line":157,"column":6},"end":{"line":157,"column":64}},"60":{"start":{"line":160,"column":4},"end":{"line":161,"column":45}},"61":{"start":{"line":161,"column":6},"end":{"line":161,"column":45}},"62":{"start":{"line":163,"column":4},"end":{"line":163,"column":26}},"63":{"start":{"line":164,"column":4},"end":{"line":168,"column":5}},"64":{"start":{"line":165,"column":6},"end":{"line":165,"column":29}},"65":{"start":{"line":166,"column":6},"end":{"line":166,"column":42}},"66":{"start":{"line":167,"column":6},"end":{"line":167,"column":27}},"67":{"start":{"line":170,"column":4},"end":{"line":170,"column":16}},"68":{"start":{"line":183,"column":2},"end":{"line":211,"column":4}},"69":{"start":{"line":184,"column":4},"end":{"line":185,"column":44}},"70":{"start":{"line":185,"column":6},"end":{"line":185,"column":44}},"71":{"start":{"line":186,"column":4},"end":{"line":187,"column":69}},"72":{"start":{"line":187,"column":6},"end":{"line":187,"column":69}},"73":{"start":{"line":189,"column":4},"end":{"line":189,"column":23}},"74":{"start":{"line":192,"column":4},"end":{"line":194,"column":7}},"75":{"start":{"line":193,"column":6},"end":{"line":193,"column":19}},"76":{"start":{"line":195,"column":4},"end":{"line":195,"column":35}},"77":{"start":{"line":198,"column":4},"end":{"line":198,"column":26}},"78":{"start":{"line":199,"column":4},"end":{"line":203,"column":5}},"79":{"start":{"line":200,"column":6},"end":{"line":200,"column":25}},"80":{"start":{"line":201,"column":6},"end":{"line":201,"column":42}},"81":{"start":{"line":202,"column":6},"end":{"line":202,"column":27}},"82":{"start":{"line":206,"column":4},"end":{"line":206,"column":38}},"83":{"start":{"line":207,"column":4},"end":{"line":207,"column":40}},"84":{"start":{"line":208,"column":4},"end":{"line":208,"column":26}},"85":{"start":{"line":210,"column":4},"end":{"line":210,"column":16}},"86":{"start":{"line":220,"column":2},"end":{"line":249,"column":3}},"87":{"start":{"line":221,"column":4},"end":{"line":223,"column":5}},"88":{"start":{"line":222,"column":6},"end":{"line":222,"column":43}},"89":{"start":{"line":225,"column":4},"end":{"line":225,"column":36}},"90":{"start":{"line":226,"column":4},"end":{"line":248,"column":5}},"91":{"start":{"line":228,"column":6},"end":{"line":228,"column":37}},"92":{"start":{"line":232,"column":6},"end":{"line":232,"column":30}},"93":{"start":{"line":233,"column":6},"end":{"line":235,"column":7}},"94":{"start":{"line":234,"column":8},"end":{"line":234,"column":67}},"95":{"start":{"line":238,"column":6},"end":{"line":238,"column":28}},"96":{"start":{"line":239,"column":6},"end":{"line":239,"column":28}},"97":{"start":{"line":240,"column":6},"end":{"line":243,"column":7}},"98":{"start":{"line":241,"column":8},"end":{"line":241,"column":47}},"99":{"start":{"line":242,"column":8},"end":{"line":242,"column":47}},"100":{"start":{"line":247,"column":6},"end":{"line":247,"column":99}},"101":{"start":{"line":262,"column":2},"end":{"line":277,"column":3}},"102":{"start":{"line":263,"column":4},"end":{"line":263,"column":33}},"103":{"start":{"line":264,"column":4},"end":{"line":264,"column":37}},"104":{"start":{"line":266,"column":4},"end":{"line":276,"column":5}},"105":{"start":{"line":267,"column":6},"end":{"line":269,"column":19}},"106":{"start":{"line":268,"column":8},"end":{"line":268,"column":23}},"107":{"start":{"line":272,"column":6},"end":{"line":275,"column":19}},"108":{"start":{"line":273,"column":8},"end":{"line":273,"column":28}},"109":{"start":{"line":274,"column":8},"end":{"line":274,"column":58}},"110":{"start":{"line":291,"column":2},"end":{"line":362,"column":3}},"111":{"start":{"line":292,"column":4},"end":{"line":294,"column":5}},"112":{"start":{"line":293,"column":6},"end":{"line":293,"column":43}},"113":{"start":{"line":297,"column":4},"end":{"line":298,"column":36}},"114":{"start":{"line":301,"column":4},"end":{"line":301,"column":14}},"115":{"start":{"line":302,"column":4},"end":{"line":308,"column":5}},"116":{"start":{"line":303,"column":6},"end":{"line":303,"column":31}},"117":{"start":{"line":304,"column":6},"end":{"line":304,"column":38}},"118":{"start":{"line":307,"column":6},"end":{"line":307,"column":36}},"119":{"start":{"line":310,"column":4},"end":{"line":359,"column":5}},"120":{"start":{"line":314,"column":6},"end":{"line":316,"column":7}},"121":{"start":{"line":315,"column":8},"end":{"line":315,"column":47}},"122":{"start":{"line":318,"column":6},"end":{"line":318,"column":55}},"123":{"start":{"line":324,"column":6},"end":{"line":326,"column":7}},"124":{"start":{"line":325,"column":8},"end":{"line":325,"column":73}},"125":{"start":{"line":328,"column":6},"end":{"line":342,"column":7}},"126":{"start":{"line":330,"column":8},"end":{"line":330,"column":18}},"127":{"start":{"line":331,"column":8},"end":{"line":331,"column":22}},"128":{"start":{"line":332,"column":8},"end":{"line":334,"column":9}},"129":{"start":{"line":333,"column":10},"end":{"line":333,"column":14}},"130":{"start":{"line":335,"column":8},"end":{"line":338,"column":9}},"131":{"start":{"line":336,"column":10},"end":{"line":336,"column":18}},"132":{"start":{"line":337,"column":10},"end":{"line":337,"column":14}},"133":{"start":{"line":341,"column":8},"end":{"line":341,"column":75}},"134":{"start":{"line":345,"column":6},"end":{"line":347,"column":7}},"135":{"start":{"line":346,"column":8},"end":{"line":346,"column":52}},"136":{"start":{"line":350,"column":6},"end":{"line":352,"column":9}},"137":{"start":{"line":351,"column":8},"end":{"line":351,"column":21}},"138":{"start":{"line":353,"column":6},"end":{"line":353,"column":39}},"139":{"start":{"line":356,"column":6},"end":{"line":357,"column":18}},"140":{"start":{"line":358,"column":6},"end":{"line":358,"column":64}},"141":{"start":{"line":361,"column":4},"end":{"line":361,"column":18}},"142":{"start":{"line":374,"column":2},"end":{"line":390,"column":3}},"143":{"start":{"line":375,"column":4},"end":{"line":376,"column":37}},"144":{"start":{"line":378,"column":4},"end":{"line":389,"column":5}},"145":{"start":{"line":379,"column":6},"end":{"line":382,"column":9}},"146":{"start":{"line":380,"column":8},"end":{"line":380,"column":33}},"147":{"start":{"line":381,"column":8},"end":{"line":381,"column":49}},"148":{"start":{"line":385,"column":6},"end":{"line":388,"column":9}},"149":{"start":{"line":386,"column":8},"end":{"line":386,"column":33}},"150":{"start":{"line":387,"column":8},"end":{"line":387,"column":85}},"151":{"start":{"line":405,"column":2},"end":{"line":414,"column":4}},"152":{"start":{"line":407,"column":4},"end":{"line":408,"column":44}},"153":{"start":{"line":408,"column":6},"end":{"line":408,"column":44}},"154":{"start":{"line":411,"column":4},"end":{"line":411,"column":39}},"155":{"start":{"line":413,"column":4},"end":{"line":413,"column":42}},"156":{"start":{"line":416,"column":2},"end":{"line":432,"column":4}},"157":{"start":{"line":418,"column":4},"end":{"line":426,"column":5}},"158":{"start":{"line":420,"column":6},"end":{"line":420,"column":27}},"159":{"start":{"line":422,"column":6},"end":{"line":424,"column":7}},"160":{"start":{"line":423,"column":8},"end":{"line":423,"column":17}},"161":{"start":{"line":425,"column":6},"end":{"line":425,"column":15}},"162":{"start":{"line":428,"column":4},"end":{"line":428,"column":33}},"163":{"start":{"line":429,"column":4},"end":{"line":429,"column":74}},"164":{"start":{"line":431,"column":4},"end":{"line":431,"column":18}},"165":{"start":{"line":448,"column":2},"end":{"line":454,"column":4}},"166":{"start":{"line":449,"column":4},"end":{"line":449,"column":39}},"167":{"start":{"line":451,"column":4},"end":{"line":451,"column":43}},"168":{"start":{"line":452,"column":4},"end":{"line":452,"column":28}},"169":{"start":{"line":453,"column":4},"end":{"line":453,"column":13}},"170":{"start":{"line":465,"column":2},"end":{"line":487,"column":3}},"171":{"start":{"line":466,"column":4},"end":{"line":467,"column":24}},"172":{"start":{"line":470,"column":4},"end":{"line":473,"column":5}},"173":{"start":{"line":471,"column":6},"end":{"line":471,"column":22}},"174":{"start":{"line":472,"column":6},"end":{"line":472,"column":21}},"175":{"start":{"line":476,"column":4},"end":{"line":481,"column":5}},"176":{"start":{"line":477,"column":6},"end":{"line":480,"column":7}},"177":{"start":{"line":478,"column":8},"end":{"line":478,"column":29}},"178":{"start":{"line":479,"column":8},"end":{"line":479,"column":23}},"179":{"start":{"line":483,"column":4},"end":{"line":486,"column":5}},"180":{"start":{"line":485,"column":6},"end":{"line":485,"column":45}},"181":{"start":{"line":494,"column":2},"end":{"line":501,"column":4}},"182":{"start":{"line":495,"column":4},"end":{"line":499,"column":7}},"183":{"start":{"line":500,"column":4},"end":{"line":500,"column":13}},"184":{"start":{"line":508,"column":2},"end":{"line":510,"column":4}},"185":{"start":{"line":509,"column":4},"end":{"line":509,"column":31}},"186":{"start":{"line":522,"column":2},"end":{"line":541,"column":4}},"187":{"start":{"line":524,"column":4},"end":{"line":524,"column":18}},"188":{"start":{"line":525,"column":4},"end":{"line":534,"column":6}},"189":{"start":{"line":526,"column":6},"end":{"line":533,"column":7}},"190":{"start":{"line":527,"column":8},"end":{"line":529,"column":11}},"191":{"start":{"line":528,"column":10},"end":{"line":528,"column":49}},"192":{"start":{"line":532,"column":8},"end":{"line":532,"column":42}},"193":{"start":{"line":536,"column":4},"end":{"line":540,"column":7}},"194":{"start":{"line":550,"column":2},"end":{"line":564,"column":4}},"195":{"start":{"line":552,"column":4},"end":{"line":552,"column":18}},"196":{"start":{"line":553,"column":4},"end":{"line":562,"column":6}},"197":{"start":{"line":554,"column":6},"end":{"line":561,"column":7}},"198":{"start":{"line":555,"column":8},"end":{"line":557,"column":11}},"199":{"start":{"line":556,"column":10},"end":{"line":556,"column":42}},"200":{"start":{"line":560,"column":8},"end":{"line":560,"column":35}},"201":{"start":{"line":563,"column":4},"end":{"line":563,"column":28}},"202":{"start":{"line":571,"column":2},"end":{"line":573,"column":4}},"203":{"start":{"line":572,"column":4},"end":{"line":572,"column":36}},"204":{"start":{"line":580,"column":2},"end":{"line":582,"column":4}},"205":{"start":{"line":581,"column":4},"end":{"line":581,"column":22}},"206":{"start":{"line":593,"column":2},"end":{"line":595,"column":4}},"207":{"start":{"line":594,"column":4},"end":{"line":594,"column":46}},"208":{"start":{"line":602,"column":2},"end":{"line":604,"column":4}},"209":{"start":{"line":603,"column":4},"end":{"line":603,"column":37}},"210":{"start":{"line":611,"column":2},"end":{"line":618,"column":4}},"211":{"start":{"line":612,"column":4},"end":{"line":617,"column":6}},"212":{"start":{"line":628,"column":2},"end":{"line":668,"column":4}},"213":{"start":{"line":630,"column":4},"end":{"line":642,"column":5}},"214":{"start":{"line":632,"column":6},"end":{"line":633,"column":25}},"215":{"start":{"line":633,"column":8},"end":{"line":633,"column":25}},"216":{"start":{"line":635,"column":6},"end":{"line":637,"column":7}},"217":{"start":{"line":636,"column":8},"end":{"line":636,"column":74}},"218":{"start":{"line":641,"column":6},"end":{"line":641,"column":12}},"219":{"start":{"line":644,"column":4},"end":{"line":644,"column":31}},"220":{"start":{"line":645,"column":4},"end":{"line":645,"column":30}},"221":{"start":{"line":648,"column":4},"end":{"line":648,"column":29}},"222":{"start":{"line":649,"column":4},"end":{"line":649,"column":32}},"223":{"start":{"line":652,"column":4},"end":{"line":652,"column":53}},"224":{"start":{"line":655,"column":4},"end":{"line":655,"column":18}},"225":{"start":{"line":658,"column":4},"end":{"line":660,"column":5}},"226":{"start":{"line":659,"column":6},"end":{"line":659,"column":49}},"227":{"start":{"line":663,"column":4},"end":{"line":667,"column":7}},"228":{"start":{"line":681,"column":2},"end":{"line":793,"column":4}},"229":{"start":{"line":682,"column":4},"end":{"line":683,"column":60}},"230":{"start":{"line":683,"column":6},"end":{"line":683,"column":60}},"231":{"start":{"line":684,"column":4},"end":{"line":685,"column":66}},"232":{"start":{"line":685,"column":6},"end":{"line":685,"column":66}},"233":{"start":{"line":688,"column":4},"end":{"line":699,"column":7}},"234":{"start":{"line":690,"column":6},"end":{"line":693,"column":7}},"235":{"start":{"line":692,"column":8},"end":{"line":692,"column":25}},"236":{"start":{"line":695,"column":6},"end":{"line":697,"column":7}},"237":{"start":{"line":696,"column":8},"end":{"line":696,"column":65}},"238":{"start":{"line":698,"column":6},"end":{"line":698,"column":15}},"239":{"start":{"line":702,"column":4},"end":{"line":714,"column":5}},"240":{"start":{"line":704,"column":6},"end":{"line":705,"column":25}},"241":{"start":{"line":705,"column":8},"end":{"line":705,"column":25}},"242":{"start":{"line":707,"column":6},"end":{"line":709,"column":7}},"243":{"start":{"line":708,"column":8},"end":{"line":708,"column":74}},"244":{"start":{"line":713,"column":6},"end":{"line":713,"column":12}},"245":{"start":{"line":716,"column":4},"end":{"line":719,"column":5}},"246":{"start":{"line":718,"column":6},"end":{"line":718,"column":59}},"247":{"start":{"line":721,"column":4},"end":{"line":721,"column":31}},"248":{"start":{"line":722,"column":4},"end":{"line":722,"column":30}},"249":{"start":{"line":725,"column":4},"end":{"line":725,"column":23}},"250":{"start":{"line":726,"column":4},"end":{"line":726,"column":26}},"251":{"start":{"line":729,"column":4},"end":{"line":729,"column":53}},"252":{"start":{"line":732,"column":4},"end":{"line":732,"column":15}},"253":{"start":{"line":735,"column":4},"end":{"line":767,"column":5}},"254":{"start":{"line":737,"column":6},"end":{"line":740,"column":7}},"255":{"start":{"line":739,"column":8},"end":{"line":739,"column":54}},"256":{"start":{"line":742,"column":6},"end":{"line":745,"column":8}},"257":{"start":{"line":744,"column":8},"end":{"line":744,"column":24}},"258":{"start":{"line":747,"column":9},"end":{"line":767,"column":5}},"259":{"start":{"line":749,"column":6},"end":{"line":749,"column":28}},"260":{"start":{"line":751,"column":6},"end":{"line":754,"column":7}},"261":{"start":{"line":753,"column":8},"end":{"line":753,"column":49}},"262":{"start":{"line":756,"column":6},"end":{"line":759,"column":8}},"263":{"start":{"line":758,"column":8},"end":{"line":758,"column":30}},"264":{"start":{"line":763,"column":6},"end":{"line":766,"column":8}},"265":{"start":{"line":765,"column":8},"end":{"line":765,"column":21}},"266":{"start":{"line":770,"column":4},"end":{"line":773,"column":5}},"267":{"start":{"line":772,"column":6},"end":{"line":772,"column":95}},"268":{"start":{"line":776,"column":4},"end":{"line":776,"column":18}},"269":{"start":{"line":779,"column":4},"end":{"line":786,"column":5}},"270":{"start":{"line":781,"column":6},"end":{"line":781,"column":52}},"271":{"start":{"line":783,"column":6},"end":{"line":785,"column":7}},"272":{"start":{"line":784,"column":8},"end":{"line":784,"column":47}},"273":{"start":{"line":789,"column":4},"end":{"line":792,"column":7}},"274":{"start":{"line":803,"column":2},"end":{"line":805,"column":4}},"275":{"start":{"line":804,"column":4},"end":{"line":804,"column":33}},"276":{"start":{"line":816,"column":2},"end":{"line":833,"column":4}},"277":{"start":{"line":818,"column":4},"end":{"line":820,"column":5}},"278":{"start":{"line":819,"column":6},"end":{"line":819,"column":61}},"279":{"start":{"line":822,"column":4},"end":{"line":824,"column":5}},"280":{"start":{"line":823,"column":6},"end":{"line":823,"column":66}},"281":{"start":{"line":826,"column":4},"end":{"line":826,"column":36}},"282":{"start":{"line":827,"column":4},"end":{"line":827,"column":36}},"283":{"start":{"line":830,"column":4},"end":{"line":830,"column":44}},"284":{"start":{"line":832,"column":4},"end":{"line":832,"column":16}},"285":{"start":{"line":841,"column":2},"end":{"line":846,"column":4}},"286":{"start":{"line":843,"column":4},"end":{"line":843,"column":21}},"287":{"start":{"line":844,"column":4},"end":{"line":844,"column":22}},"288":{"start":{"line":845,"column":4},"end":{"line":845,"column":17}},"289":{"start":{"line":855,"column":2},"end":{"line":867,"column":3}},"290":{"start":{"line":856,"column":4},"end":{"line":864,"column":5}},"291":{"start":{"line":857,"column":6},"end":{"line":857,"column":25}},"292":{"start":{"line":858,"column":6},"end":{"line":863,"column":7}},"293":{"start":{"line":859,"column":8},"end":{"line":859,"column":35}},"294":{"start":{"line":861,"column":11},"end":{"line":863,"column":7}},"295":{"start":{"line":862,"column":8},"end":{"line":862,"column":45}},"296":{"start":{"line":866,"column":4},"end":{"line":866,"column":16}},"297":{"start":{"line":870,"column":2},"end":{"line":870,"column":43}},"298":{"start":{"line":871,"column":2},"end":{"line":871,"column":48}},"299":{"start":{"line":874,"column":2},"end":{"line":874,"column":21}},"300":{"start":{"line":877,"column":0},"end":{"line":877,"column":29}},"301":{"start":{"line":878,"column":0},"end":{"line":878,"column":22}},"302":{"start":{"line":879,"column":0},"end":{"line":879,"column":26}},"303":{"start":{"line":880,"column":0},"end":{"line":880,"column":21}}},"branchMap":{"1":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":4},"end":{"line":26,"column":4}},{"start":{"line":26,"column":4},"end":{"line":26,"column":4}}]},"2":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":4},"end":{"line":28,"column":4}},{"start":{"line":28,"column":4},"end":{"line":28,"column":4}}]},"3":{"line":28,"type":"binary-expr","locations":[{"start":{"line":28,"column":8},"end":{"line":28,"column":16}},{"start":{"line":28,"column":20},"end":{"line":28,"column":39}}]},"4":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":4},"end":{"line":31,"column":4}},{"start":{"line":31,"column":4},"end":{"line":31,"column":4}}]},"5":{"line":31,"type":"binary-expr","locations":[{"start":{"line":31,"column":8},"end":{"line":31,"column":12}},{"start":{"line":31,"column":16},"end":{"line":31,"column":38}}]},"6":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":6},"end":{"line":33,"column":6}},{"start":{"line":33,"column":6},"end":{"line":33,"column":6}}]},"7":{"line":37,"type":"binary-expr","locations":[{"start":{"line":37,"column":25},"end":{"line":37,"column":33}},{"start":{"line":37,"column":37},"end":{"line":37,"column":51}}]},"8":{"line":43,"type":"binary-expr","locations":[{"start":{"line":43,"column":25},"end":{"line":43,"column":33}},{"start":{"line":43,"column":37},"end":{"line":43,"column":51}}]},"9":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":9},"end":{"line":46,"column":9}},{"start":{"line":46,"column":9},"end":{"line":46,"column":9}}]},"10":{"line":46,"type":"binary-expr","locations":[{"start":{"line":46,"column":13},"end":{"line":46,"column":17}},{"start":{"line":46,"column":21},"end":{"line":46,"column":39}},{"start":{"line":46,"column":43},"end":{"line":46,"column":61}}]},"11":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":23},"end":{"line":50,"column":31}},{"start":{"line":50,"column":35},"end":{"line":50,"column":48}}]},"12":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":9},"end":{"line":52,"column":9}},{"start":{"line":52,"column":9},"end":{"line":52,"column":9}}]},"13":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":9},"end":{"line":62,"column":9}},{"start":{"line":62,"column":9},"end":{"line":62,"column":9}}]},"14":{"line":133,"type":"switch","locations":[{"start":{"line":134,"column":6},"end":{"line":135,"column":33}},{"start":{"line":138,"column":6},"end":{"line":138,"column":13}},{"start":{"line":139,"column":6},"end":{"line":140,"column":60}},{"start":{"line":142,"column":6},"end":{"line":143,"column":59}}]},"15":{"line":154,"type":"if","locations":[{"start":{"line":154,"column":4},"end":{"line":154,"column":4}},{"start":{"line":154,"column":4},"end":{"line":154,"column":4}}]},"16":{"line":156,"type":"if","locations":[{"start":{"line":156,"column":4},"end":{"line":156,"column":4}},{"start":{"line":156,"column":4},"end":{"line":156,"column":4}}]},"17":{"line":184,"type":"if","locations":[{"start":{"line":184,"column":4},"end":{"line":184,"column":4}},{"start":{"line":184,"column":4},"end":{"line":184,"column":4}}]},"18":{"line":186,"type":"if","locations":[{"start":{"line":186,"column":4},"end":{"line":186,"column":4}},{"start":{"line":186,"column":4},"end":{"line":186,"column":4}}]},"19":{"line":221,"type":"if","locations":[{"start":{"line":221,"column":4},"end":{"line":221,"column":4}},{"start":{"line":221,"column":4},"end":{"line":221,"column":4}}]},"20":{"line":221,"type":"binary-expr","locations":[{"start":{"line":221,"column":8},"end":{"line":221,"column":14}},{"start":{"line":221,"column":18},"end":{"line":221,"column":40}}]},"21":{"line":226,"type":"if","locations":[{"start":{"line":226,"column":4},"end":{"line":226,"column":4}},{"start":{"line":226,"column":4},"end":{"line":226,"column":4}}]},"22":{"line":233,"type":"if","locations":[{"start":{"line":233,"column":6},"end":{"line":233,"column":6}},{"start":{"line":233,"column":6},"end":{"line":233,"column":6}}]},"23":{"line":266,"type":"if","locations":[{"start":{"line":266,"column":4},"end":{"line":266,"column":4}},{"start":{"line":266,"column":4},"end":{"line":266,"column":4}}]},"24":{"line":292,"type":"if","locations":[{"start":{"line":292,"column":4},"end":{"line":292,"column":4}},{"start":{"line":292,"column":4},"end":{"line":292,"column":4}}]},"25":{"line":292,"type":"binary-expr","locations":[{"start":{"line":292,"column":8},"end":{"line":292,"column":14}},{"start":{"line":292,"column":18},"end":{"line":292,"column":40}}]},"26":{"line":302,"type":"if","locations":[{"start":{"line":302,"column":4},"end":{"line":302,"column":4}},{"start":{"line":302,"column":4},"end":{"line":302,"column":4}}]},"27":{"line":302,"type":"binary-expr","locations":[{"start":{"line":302,"column":8},"end":{"line":302,"column":17}},{"start":{"line":302,"column":21},"end":{"line":302,"column":48}}]},"28":{"line":310,"type":"if","locations":[{"start":{"line":310,"column":4},"end":{"line":310,"column":4}},{"start":{"line":310,"column":4},"end":{"line":310,"column":4}}]},"29":{"line":314,"type":"if","locations":[{"start":{"line":314,"column":6},"end":{"line":314,"column":6}},{"start":{"line":314,"column":6},"end":{"line":314,"column":6}}]},"30":{"line":324,"type":"if","locations":[{"start":{"line":324,"column":6},"end":{"line":324,"column":6}},{"start":{"line":324,"column":6},"end":{"line":324,"column":6}}]},"31":{"line":328,"type":"if","locations":[{"start":{"line":328,"column":6},"end":{"line":328,"column":6}},{"start":{"line":328,"column":6},"end":{"line":328,"column":6}}]},"32":{"line":332,"type":"binary-expr","locations":[{"start":{"line":332,"column":15},"end":{"line":332,"column":29}},{"start":{"line":332,"column":33},"end":{"line":332,"column":47}}]},"33":{"line":345,"type":"if","locations":[{"start":{"line":345,"column":6},"end":{"line":345,"column":6}},{"start":{"line":345,"column":6},"end":{"line":345,"column":6}}]},"34":{"line":378,"type":"if","locations":[{"start":{"line":378,"column":4},"end":{"line":378,"column":4}},{"start":{"line":378,"column":4},"end":{"line":378,"column":4}}]},"35":{"line":407,"type":"if","locations":[{"start":{"line":407,"column":4},"end":{"line":407,"column":4}},{"start":{"line":407,"column":4},"end":{"line":407,"column":4}}]},"36":{"line":411,"type":"cond-expr","locations":[{"start":{"line":411,"column":19},"end":{"line":411,"column":31}},{"start":{"line":411,"column":34},"end":{"line":411,"column":38}}]},"37":{"line":418,"type":"if","locations":[{"start":{"line":418,"column":4},"end":{"line":418,"column":4}},{"start":{"line":418,"column":4},"end":{"line":418,"column":4}}]},"38":{"line":449,"type":"cond-expr","locations":[{"start":{"line":449,"column":19},"end":{"line":449,"column":31}},{"start":{"line":449,"column":34},"end":{"line":449,"column":38}}]},"39":{"line":477,"type":"if","locations":[{"start":{"line":477,"column":6},"end":{"line":477,"column":6}},{"start":{"line":477,"column":6},"end":{"line":477,"column":6}}]},"40":{"line":483,"type":"if","locations":[{"start":{"line":483,"column":4},"end":{"line":483,"column":4}},{"start":{"line":483,"column":4},"end":{"line":483,"column":4}}]},"41":{"line":526,"type":"if","locations":[{"start":{"line":526,"column":6},"end":{"line":526,"column":6}},{"start":{"line":526,"column":6},"end":{"line":526,"column":6}}]},"42":{"line":554,"type":"if","locations":[{"start":{"line":554,"column":6},"end":{"line":554,"column":6}},{"start":{"line":554,"column":6},"end":{"line":554,"column":6}}]},"43":{"line":630,"type":"if","locations":[{"start":{"line":630,"column":4},"end":{"line":630,"column":4}},{"start":{"line":630,"column":4},"end":{"line":630,"column":4}}]},"44":{"line":632,"type":"if","locations":[{"start":{"line":632,"column":6},"end":{"line":632,"column":6}},{"start":{"line":632,"column":6},"end":{"line":632,"column":6}}]},"45":{"line":635,"type":"if","locations":[{"start":{"line":635,"column":6},"end":{"line":635,"column":6}},{"start":{"line":635,"column":6},"end":{"line":635,"column":6}}]},"46":{"line":635,"type":"binary-expr","locations":[{"start":{"line":635,"column":10},"end":{"line":635,"column":22}},{"start":{"line":635,"column":26},"end":{"line":635,"column":39}}]},"47":{"line":644,"type":"cond-expr","locations":[{"start":{"line":644,"column":25},"end":{"line":644,"column":26}},{"start":{"line":644,"column":29},"end":{"line":644,"column":30}}]},"48":{"line":645,"type":"cond-expr","locations":[{"start":{"line":645,"column":23},"end":{"line":645,"column":25}},{"start":{"line":645,"column":28},"end":{"line":645,"column":29}}]},"49":{"line":682,"type":"if","locations":[{"start":{"line":682,"column":4},"end":{"line":682,"column":4}},{"start":{"line":682,"column":4},"end":{"line":682,"column":4}}]},"50":{"line":684,"type":"if","locations":[{"start":{"line":684,"column":4},"end":{"line":684,"column":4}},{"start":{"line":684,"column":4},"end":{"line":684,"column":4}}]},"51":{"line":690,"type":"if","locations":[{"start":{"line":690,"column":6},"end":{"line":690,"column":6}},{"start":{"line":690,"column":6},"end":{"line":690,"column":6}}]},"52":{"line":690,"type":"binary-expr","locations":[{"start":{"line":690,"column":10},"end":{"line":690,"column":11}},{"start":{"line":690,"column":15},"end":{"line":690,"column":37}}]},"53":{"line":695,"type":"if","locations":[{"start":{"line":695,"column":6},"end":{"line":695,"column":6}},{"start":{"line":695,"column":6},"end":{"line":695,"column":6}}]},"54":{"line":695,"type":"binary-expr","locations":[{"start":{"line":695,"column":10},"end":{"line":695,"column":22}},{"start":{"line":695,"column":26},"end":{"line":695,"column":39}},{"start":{"line":695,"column":43},"end":{"line":695,"column":48}}]},"55":{"line":702,"type":"if","locations":[{"start":{"line":702,"column":4},"end":{"line":702,"column":4}},{"start":{"line":702,"column":4},"end":{"line":702,"column":4}}]},"56":{"line":704,"type":"if","locations":[{"start":{"line":704,"column":6},"end":{"line":704,"column":6}},{"start":{"line":704,"column":6},"end":{"line":704,"column":6}}]},"57":{"line":704,"type":"binary-expr","locations":[{"start":{"line":704,"column":10},"end":{"line":704,"column":11}},{"start":{"line":704,"column":15},"end":{"line":704,"column":37}}]},"58":{"line":707,"type":"if","locations":[{"start":{"line":707,"column":6},"end":{"line":707,"column":6}},{"start":{"line":707,"column":6},"end":{"line":707,"column":6}}]},"59":{"line":707,"type":"binary-expr","locations":[{"start":{"line":707,"column":10},"end":{"line":707,"column":22}},{"start":{"line":707,"column":26},"end":{"line":707,"column":39}}]},"60":{"line":716,"type":"if","locations":[{"start":{"line":716,"column":4},"end":{"line":716,"column":4}},{"start":{"line":716,"column":4},"end":{"line":716,"column":4}}]},"61":{"line":716,"type":"binary-expr","locations":[{"start":{"line":716,"column":8},"end":{"line":716,"column":20}},{"start":{"line":716,"column":24},"end":{"line":716,"column":42}}]},"62":{"line":721,"type":"cond-expr","locations":[{"start":{"line":721,"column":25},"end":{"line":721,"column":26}},{"start":{"line":721,"column":29},"end":{"line":721,"column":30}}]},"63":{"line":722,"type":"cond-expr","locations":[{"start":{"line":722,"column":23},"end":{"line":722,"column":25}},{"start":{"line":722,"column":28},"end":{"line":722,"column":29}}]},"64":{"line":735,"type":"if","locations":[{"start":{"line":735,"column":4},"end":{"line":735,"column":4}},{"start":{"line":735,"column":4},"end":{"line":735,"column":4}}]},"65":{"line":737,"type":"if","locations":[{"start":{"line":737,"column":6},"end":{"line":737,"column":6}},{"start":{"line":737,"column":6},"end":{"line":737,"column":6}}]},"66":{"line":747,"type":"if","locations":[{"start":{"line":747,"column":9},"end":{"line":747,"column":9}},{"start":{"line":747,"column":9},"end":{"line":747,"column":9}}]},"67":{"line":747,"type":"binary-expr","locations":[{"start":{"line":747,"column":13},"end":{"line":747,"column":18}},{"start":{"line":747,"column":22},"end":{"line":747,"column":45}}]},"68":{"line":751,"type":"if","locations":[{"start":{"line":751,"column":6},"end":{"line":751,"column":6}},{"start":{"line":751,"column":6},"end":{"line":751,"column":6}}]},"69":{"line":751,"type":"binary-expr","locations":[{"start":{"line":751,"column":10},"end":{"line":751,"column":25}},{"start":{"line":751,"column":29},"end":{"line":751,"column":40}}]},"70":{"line":770,"type":"if","locations":[{"start":{"line":770,"column":4},"end":{"line":770,"column":4}},{"start":{"line":770,"column":4},"end":{"line":770,"column":4}}]},"71":{"line":772,"type":"cond-expr","locations":[{"start":{"line":772,"column":69},"end":{"line":772,"column":90}},{"start":{"line":772,"column":93},"end":{"line":772,"column":94}}]},"72":{"line":772,"type":"binary-expr","locations":[{"start":{"line":772,"column":22},"end":{"line":772,"column":31}},{"start":{"line":772,"column":35},"end":{"line":772,"column":65}}]},"73":{"line":779,"type":"if","locations":[{"start":{"line":779,"column":4},"end":{"line":779,"column":4}},{"start":{"line":779,"column":4},"end":{"line":779,"column":4}}]},"74":{"line":818,"type":"if","locations":[{"start":{"line":818,"column":4},"end":{"line":818,"column":4}},{"start":{"line":818,"column":4},"end":{"line":818,"column":4}}]},"75":{"line":818,"type":"binary-expr","locations":[{"start":{"line":818,"column":8},"end":{"line":818,"column":20}},{"start":{"line":818,"column":24},"end":{"line":818,"column":37}},{"start":{"line":818,"column":41},"end":{"line":818,"column":53}},{"start":{"line":818,"column":57},"end":{"line":818,"column":70}}]},"76":{"line":822,"type":"if","locations":[{"start":{"line":822,"column":4},"end":{"line":822,"column":4}},{"start":{"line":822,"column":4},"end":{"line":822,"column":4}}]},"77":{"line":858,"type":"if","locations":[{"start":{"line":858,"column":6},"end":{"line":858,"column":6}},{"start":{"line":858,"column":6},"end":{"line":858,"column":6}}]},"78":{"line":861,"type":"if","locations":[{"start":{"line":861,"column":11},"end":{"line":861,"column":11}},{"start":{"line":861,"column":11},"end":{"line":861,"column":11}}]},"79":{"line":861,"type":"binary-expr","locations":[{"start":{"line":861,"column":15},"end":{"line":861,"column":19}},{"start":{"line":861,"column":23},"end":{"line":861,"column":45}}]}},"code":["'use strict';","","var util = require('../../utils/index');","var DimensionError = require('../../error/DimensionError');","","var string = util.string;","var array = util.array;","var object = util.object;","var number = util.number;","","var isArray = Array.isArray;","var isNumber = number.isNumber;","var isInteger = number.isInteger;","var isString = string.isString;","","var validateIndex = array.validateIndex;","","function factory (type, config, load, typed) {","  var Matrix = load(require('./Matrix')); // force loading Matrix (do not use via type.Matrix)","","  /**","   * Dense Matrix implementation. A regular, dense matrix, supporting multi-dimensional matrices. This is the default matrix type.","   * @class DenseMatrix","   */","  function DenseMatrix(data, datatype) {","    if (!(this instanceof DenseMatrix))","      throw new SyntaxError('Constructor must be called with the new operator');","    if (datatype && !isString(datatype))","      throw new Error('Invalid datatype: ' + datatype);","","    if (data && data.isMatrix === true) {","      // check data is a DenseMatrix","      if (data.type === 'DenseMatrix') {","        // clone data & size","        this._data = object.clone(data._data);","        this._size = object.clone(data._size);","        this._datatype = datatype || data._datatype;","      }","      else {","        // build data from existing matrix","        this._data = data.toArray();","        this._size = data.size();","        this._datatype = datatype || data._datatype;","      }","    }","    else if (data && isArray(data.data) && isArray(data.size)) {","      // initialize fields from JSON representation","      this._data = data.data;","      this._size = data.size;","      this._datatype = datatype || data.datatype;","    }","    else if (isArray(data)) {","      // replace nested Matrices with Arrays","      this._data = preprocess(data);","      // get the dimensions of the array","      this._size = array.size(this._data);","      // verify the dimensions of the array, TODO: compute size while processing array","      array.validate(this._data, this._size);","      // data type unknown","      this._datatype = datatype;","    }","    else if (data) {","      // unsupported type","      throw new TypeError('Unsupported type of data (' + util.types.type(data) + ')');","    }","    else {","      // nothing provided","      this._data = [];","      this._size = [0];","      this._datatype = datatype;","    }","  }","  ","  DenseMatrix.prototype = new Matrix();","","  /**","   * Attach type information","   */","  DenseMatrix.prototype.type = 'DenseMatrix';","  DenseMatrix.prototype.isDenseMatrix = true;","","  /**","   * Get the storage format used by the matrix.","   *","   * Usage:","   *     var format = matrix.storage()                   // retrieve storage format","   *","   * @memberof DenseMatrix","   * @return {string}           The storage format.","   */","  DenseMatrix.prototype.storage = function () {","    return 'dense';","  };","","  /**","   * Get the datatype of the data stored in the matrix.","   *","   * Usage:","   *     var format = matrix.datatype()                   // retrieve matrix datatype","   *","   * @memberof DenseMatrix","   * @return {string}           The datatype.","   */","  DenseMatrix.prototype.datatype = function () {","    return this._datatype;","  };","","  /**","   * Create a new DenseMatrix","   * @memberof DenseMatrix","   * @param {Array} data","   * @param {string} [datatype]","   */","  DenseMatrix.prototype.create = function (data, datatype) {","    return new DenseMatrix(data, datatype);","  };","","  /**","   * Get a subset of the matrix, or replace a subset of the matrix.","   *","   * Usage:","   *     var subset = matrix.subset(index)               // retrieve subset","   *     var value = matrix.subset(index, replacement)   // replace subset","   *","   * @memberof DenseMatrix","   * @param {Index} index","   * @param {Array | DenseMatrix | *} [replacement]","   * @param {*} [defaultValue=0]      Default value, filled in on new entries when","   *                                  the matrix is resized. If not provided,","   *                                  new matrix elements will be filled with zeros.","   */","  DenseMatrix.prototype.subset = function (index, replacement, defaultValue) {","    switch (arguments.length) {","      case 1:","        return _get(this, index);","","        // intentional fall through","      case 2:","      case 3:","        return _set(this, index, replacement, defaultValue);","","      default:","        throw new SyntaxError('Wrong number of arguments');","    }","  };","  ","  /**","   * Get a single element from the matrix.","   * @memberof DenseMatrix","   * @param {number[]} index   Zero-based index","   * @return {*} value","   */","  DenseMatrix.prototype.get = function (index) {","    if (!isArray(index))","      throw new TypeError('Array expected');","    if (index.length != this._size.length)","      throw new DimensionError(index.length, this._size.length);","","    // check index","    for (var x = 0; x < index.length; x++)","      validateIndex(index[x], this._size[x]);","","    var data = this._data;","    for (var i = 0, ii = index.length; i < ii; i++) {","      var index_i = index[i];","      validateIndex(index_i, data.length);","      data = data[index_i];","    }","","    return data;","  };","  ","  /**","   * Replace a single element in the matrix.","   * @memberof DenseMatrix","   * @param {number[]} index   Zero-based index","   * @param {*} value","   * @param {*} [defaultValue]        Default value, filled in on new entries when","   *                                  the matrix is resized. If not provided,","   *                                  new matrix elements will be left undefined.","   * @return {DenseMatrix} self","   */","  DenseMatrix.prototype.set = function (index, value, defaultValue) {","    if (!isArray(index))","      throw new TypeError('Array expected');","    if (index.length < this._size.length)","      throw new DimensionError(index.length, this._size.length, '<');","","    var i, ii, index_i;","","    // enlarge matrix when needed","    var size = index.map(function (i) {","      return i + 1;","    });","    _fit(this, size, defaultValue);","","    // traverse over the dimensions","    var data = this._data;","    for (i = 0, ii = index.length - 1; i < ii; i++) {","      index_i = index[i];","      validateIndex(index_i, data.length);","      data = data[index_i];","    }","","    // set new value","    index_i = index[index.length - 1];","    validateIndex(index_i, data.length);","    data[index_i] = value;","","    return this;","  };","  ","  /**","   * Get a submatrix of this matrix","   * @memberof DenseMatrix","   * @param {DenseMatrix} matrix","   * @param {Index} index   Zero-based index","   * @private","   */","  function _get (matrix, index) {","    if (!index || index.isIndex !== true) {","      throw new TypeError('Invalid index');","    }","","    var isScalar = index.isScalar();","    if (isScalar) {","      // return a scalar","      return matrix.get(index.min());","    }","    else {","      // validate dimensions","      var size = index.size();","      if (size.length != matrix._size.length) {","        throw new DimensionError(size.length, matrix._size.length);","      }","","      // validate if any of the ranges in the index is out of range","      var min = index.min();","      var max = index.max();","      for (var i = 0, ii = matrix._size.length; i < ii; i++) {","        validateIndex(min[i], matrix._size[i]);","        validateIndex(max[i], matrix._size[i]);","      }","","      // retrieve submatrix","      // TODO: more efficient when creating an empty matrix and setting _data and _size manually","      return new DenseMatrix(_getSubmatrix(matrix._data, index, size.length, 0), matrix._datatype);","    }","  }","  ","  /**","   * Recursively get a submatrix of a multi dimensional matrix.","   * Index is not checked for correct number or length of dimensions.","   * @memberof DenseMatrix","   * @param {Array} data","   * @param {Index} index","   * @param {number} dims   Total number of dimensions","   * @param {number} dim    Current dimension","   * @return {Array} submatrix","   * @private","   */","  function _getSubmatrix (data, index, dims, dim) {","    var last = (dim == dims - 1);","    var range = index.dimension(dim);","","    if (last) {","      return range.map(function (i) {","        return data[i];","      }).valueOf();","    }","    else {","      return range.map(function (i) {","        var child = data[i];","        return _getSubmatrix(child, index, dims, dim + 1);","      }).valueOf();","    }","  }","  ","  /**","   * Replace a submatrix in this matrix","   * Indexes are zero-based.","   * @memberof DenseMatrix","   * @param {DenseMatrix} matrix","   * @param {Index} index","   * @param {DenseMatrix | Array | *} submatrix","   * @param {*} defaultValue          Default value, filled in on new entries when","   *                                  the matrix is resized.","   * @return {DenseMatrix} matrix","   * @private","   */","  function _set (matrix, index, submatrix, defaultValue) {","    if (!index || index.isIndex !== true) {","      throw new TypeError('Invalid index');","    }","","    // get index size and check whether the index contains a single value","    var iSize = index.size(),","        isScalar = index.isScalar();","","    // calculate the size of the submatrix, and convert it into an Array if needed","    var sSize;","    if (submatrix && submatrix.isMatrix === true) {","      sSize = submatrix.size();","      submatrix = submatrix.valueOf();","    }","    else {","      sSize = array.size(submatrix);","    }","","    if (isScalar) {","      // set a scalar","","      // check whether submatrix is a scalar","      if (sSize.length !== 0) {","        throw new TypeError('Scalar expected');","      }","","      matrix.set(index.min(), submatrix, defaultValue);","    }","    else {","      // set a submatrix","","      // validate dimensions","      if (iSize.length < matrix._size.length) {","        throw new DimensionError(iSize.length, matrix._size.length, '<');","      }","","      if (sSize.length < iSize.length) {","        // calculate number of missing outer dimensions","        var i = 0;","        var outer = 0;","        while (iSize[i] === 1 && sSize[i] === 1) {","          i++;","        }","        while (iSize[i] === 1) {","          outer++;","          i++;","        }","","        // unsqueeze both outer and inner dimensions","        submatrix = array.unsqueeze(submatrix, iSize.length, outer, sSize);","      }","","      // check whether the size of the submatrix matches the index size","      if (!object.deepEqual(iSize, sSize)) {","        throw new DimensionError(iSize, sSize, '>');","      }","","      // enlarge matrix when needed","      var size = index.max().map(function (i) {","        return i + 1;","      });","      _fit(matrix, size, defaultValue);","","      // insert the sub matrix","      var dims = iSize.length,","          dim = 0;","      _setSubmatrix (matrix._data, index, submatrix, dims, dim);","    }","","    return matrix;","  }","  ","  /**","   * Replace a submatrix of a multi dimensional matrix.","   * @memberof DenseMatrix","   * @param {Array} data","   * @param {Index} index","   * @param {Array} submatrix","   * @param {number} dims   Total number of dimensions","   * @param {number} dim","   * @private","   */","  function _setSubmatrix (data, index, submatrix, dims, dim) {","    var last = (dim == dims - 1),","        range = index.dimension(dim);","","    if (last) {","      range.forEach(function (dataIndex, subIndex) {","        validateIndex(dataIndex);","        data[dataIndex] = submatrix[subIndex[0]];","      });","    }","    else {","      range.forEach(function (dataIndex, subIndex) {","        validateIndex(dataIndex);","        _setSubmatrix(data[dataIndex], index, submatrix[subIndex[0]], dims, dim + 1);","      });","    }","  }","  ","  /**","   * Resize the matrix to the given size. Returns a copy of the matrix when","   * `copy=true`, otherwise return the matrix itself (resize in place).","   *","   * @memberof DenseMatrix","   * @param {number[]} size           The new size the matrix should have.","   * @param {*} [defaultValue=0]      Default value, filled in on new entries.","   *                                  If not provided, the matrix elements will","   *                                  be filled with zeros.","   * @param {boolean} [copy]          Return a resized copy of the matrix","   *","   * @return {Matrix}                 The resized matrix","   */","  DenseMatrix.prototype.resize = function (size, defaultValue, copy) {","    // validate arguments","    if (!isArray(size))","      throw new TypeError('Array expected');","","    // matrix to resize","    var m = copy ? this.clone() : this;","    // resize matrix","    return _resize(m, size, defaultValue);","  };","  ","  var _resize = function (matrix, size, defaultValue) {","    // check size","    if (size.length === 0) {","      // first value in matrix","      var v = matrix._data;","      // go deep","      while (isArray(v)) {","        v = v[0];","      }","      return v;","    }","    // resize matrix","    matrix._size = size.slice(0); // copy the array","    matrix._data = array.resize(matrix._data, matrix._size, defaultValue);","    // return matrix","    return matrix;","  };","","  /**","   * Reshape the matrix to the given size. Returns a copy of the matrix when","   * `copy=true`, otherwise return the matrix itself (reshape in place).","   *","   * NOTE: This might be better suited to copy by default, instead of modifying","   *       in place. For now, it operates in place to remain consistent with","   *       resize().","   *","   * @memberof DenseMatrix","   * @param {number[]} size           The new size the matrix should have.","   * @param {boolean} [copy]          Return a reshaped copy of the matrix","   *","   * @return {Matrix}                 The reshaped matrix","   */","  DenseMatrix.prototype.reshape = function (size, copy) {","    var m = copy ? this.clone() : this;","","    m._data = array.reshape(m._data, size);","    m._size = size.slice(0);","    return m;","  };","  ","  /**","   * Enlarge the matrix when it is smaller than given size.","   * If the matrix is larger or equal sized, nothing is done.","   * @memberof DenseMatrix","   * @param {DenseMatrix} matrix           The matrix to be resized","   * @param {number[]} size","   * @param {*} defaultValue          Default value, filled in on new entries.","   * @private","   */","  function _fit(matrix, size, defaultValue) {","    var newSize = matrix._size.slice(0), // copy the array","        changed = false;","","    // add dimensions when needed","    while (newSize.length < size.length) {","      newSize.push(0);","      changed = true;","    }","","    // enlarge size when needed","    for (var i = 0, ii = size.length; i < ii; i++) {","      if (size[i] > newSize[i]) {","        newSize[i] = size[i];","        changed = true;","      }","    }","","    if (changed) {","      // resize only when size is changed","      _resize(matrix, newSize, defaultValue);","    }","  }","  ","  /**","   * Create a clone of the matrix","   * @memberof DenseMatrix","   * @return {DenseMatrix} clone","   */","  DenseMatrix.prototype.clone = function () {","    var m = new DenseMatrix({","      data: object.clone(this._data),","      size: object.clone(this._size),","      datatype: this._datatype","    });","    return m;","  };","  ","  /**","   * Retrieve the size of the matrix.","   * @memberof DenseMatrix","   * @returns {number[]} size","   */","  DenseMatrix.prototype.size = function() {","    return this._size.slice(0); // return a clone of _size","  };","  ","  /**","   * Create a new matrix with the results of the callback function executed on","   * each entry of the matrix.","   * @memberof DenseMatrix","   * @param {Function} callback   The callback function is invoked with three","   *                              parameters: the value of the element, the index","   *                              of the element, and the Matrix being traversed.","   *","   * @return {DenseMatrix} matrix","   */","  DenseMatrix.prototype.map = function (callback) {","    // matrix instance","    var me = this;","    var recurse = function (value, index) {","      if (isArray(value)) {","        return value.map(function (child, i) {","          return recurse(child, index.concat(i));","        });","      }","      else {","        return callback(value, index, me);","      }","    };","    // return dense format","    return new DenseMatrix({","      data: recurse(this._data, []),","      size: object.clone(this._size),","      datatype: this._datatype","    });","  };","  ","  /**","   * Execute a callback function on each entry of the matrix.","   * @memberof DenseMatrix","   * @param {Function} callback   The callback function is invoked with three","   *                              parameters: the value of the element, the index","   *                              of the element, and the Matrix being traversed.","   */","  DenseMatrix.prototype.forEach = function (callback) {","    // matrix instance","    var me = this;","    var recurse = function (value, index) {","      if (isArray(value)) {","        value.forEach(function (child, i) {","          recurse(child, index.concat(i));","        });","      }","      else {","        callback(value, index, me);","      }","    };","    recurse(this._data, []);","  };","  ","  /**","   * Create an Array with a copy of the data of the DenseMatrix","   * @memberof DenseMatrix","   * @returns {Array} array","   */","  DenseMatrix.prototype.toArray = function () {","    return object.clone(this._data);","  };","  ","  /**","   * Get the primitive value of the DenseMatrix: a multidimensional array","   * @memberof DenseMatrix","   * @returns {Array} array","   */","  DenseMatrix.prototype.valueOf = function () {","    return this._data;","  };","  ","  /**","   * Get a string representation of the matrix, with optional formatting options.","   * @memberof DenseMatrix","   * @param {Object | number | Function} [options]  Formatting options. See","   *                                                lib/utils/number:format for a","   *                                                description of the available","   *                                                options.","   * @returns {string} str","   */","  DenseMatrix.prototype.format = function (options) {","    return string.format(this._data, options);","  };","  ","  /**","   * Get a string representation of the matrix","   * @memberof DenseMatrix","   * @returns {string} str","   */","  DenseMatrix.prototype.toString = function () {","    return string.format(this._data);","  };","  ","  /**","   * Get a JSON representation of the matrix","   * @memberof DenseMatrix","   * @returns {Object}","   */","  DenseMatrix.prototype.toJSON = function () {","    return {","      mathjs: 'DenseMatrix',","      data: this._data,","      size: this._size,","      datatype: this._datatype","    };","  };","  ","  /**","   * Get the kth Matrix diagonal.","   *","   * @memberof DenseMatrix","   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.","   *","   * @returns {Array}                      The array vector with the diagonal values.","   */","  DenseMatrix.prototype.diagonal = function(k) {","    // validate k if any","    if (k) {","      // convert BigNumber to a number","      if (k.isBigNumber === true)","        k = k.toNumber();","      // is must be an integer","      if (!isNumber(k) || !isInteger(k)) {","        throw new TypeError ('The parameter k must be an integer number');","      }","    }","    else {","      // default value","      k = 0;","    }","","    var kSuper = k > 0 ? k : 0;","    var kSub = k < 0 ? -k : 0;","","    // rows & columns","    var rows = this._size[0];","    var columns = this._size[1];","","    // number diagonal values","    var n = Math.min(rows - kSub, columns -  kSuper);","    ","    // x is a matrix get diagonal from matrix","    var data = [];","    ","    // loop rows","    for (var i = 0; i < n; i++) {","      data[i] = this._data[i + kSub][i + kSuper];","    }","","    // create DenseMatrix","    return new DenseMatrix({","      data: data,","      size: [n],","      datatype: this._datatype","    });","  };","  ","  /**","   * Create a diagonal matrix.","   *","   * @memberof DenseMatrix","   * @param {Array} size                   The matrix size.","   * @param {number | Array} value          The values for the diagonal.","   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will be filled in.","   * @param {number} [defaultValue]        The default value for non-diagonal","   *","   * @returns {DenseMatrix}","   */","  DenseMatrix.diagonal = function (size, value, k, defaultValue, datatype) {","    if (!isArray(size))","      throw new TypeError('Array expected, size parameter');","    if (size.length !== 2)","      throw new Error('Only two dimensions matrix are supported');","","    // map size & validate","    size = size.map(function (s) {","      // check it is a big number","      if (s && s.isBigNumber === true) {","        // convert it","        s = s.toNumber();","      }","      // validate arguments","      if (!isNumber(s) || !isInteger(s) || s < 1) {","        throw new Error('Size values must be positive integers');","      } ","      return s;","    });","","    // validate k if any","    if (k) {","      // convert BigNumber to a number","      if (k && k.isBigNumber === true)","        k = k.toNumber();","      // is must be an integer","      if (!isNumber(k) || !isInteger(k)) {","        throw new TypeError ('The parameter k must be an integer number');","      }","    }","    else {","      // default value","      k = 0;","    }","    ","    if (defaultValue && isString(datatype)) {","      // convert defaultValue to the same datatype","      defaultValue = typed.convert(defaultValue, datatype);","    }","","    var kSuper = k > 0 ? k : 0;","    var kSub = k < 0 ? -k : 0;","    ","    // rows and columns","    var rows = size[0];","    var columns = size[1];","","    // number of non-zero items","    var n = Math.min(rows - kSub, columns -  kSuper);","","    // value extraction function","    var _value;","","    // check value","    if (isArray(value)) {","      // validate array","      if (value.length !== n) {","        // number of values in array must be n","        throw new Error('Invalid value array length');","      }","      // define function","      _value = function (i) {","        // return value @ i","        return value[i];","      };      ","    }","    else if (value && value.isMatrix === true) {","      // matrix size","      var ms = value.size();","      // validate matrix","      if (ms.length !== 1 || ms[0] !== n) {","        // number of values in array must be n","        throw new Error('Invalid matrix length');","      }","      // define function","      _value = function (i) {","        // return value @ i","        return value.get([i]);","      };","    }","    else {","      // define function","      _value = function () {","        // return value","        return value;","      };","    }","    ","    // discover default value if needed","    if (!defaultValue) {","      // check first value in array","      defaultValue = (_value(0) && _value(0).isBigNumber === true) ? new type.BigNumber(0) : 0;","    }","","    // empty array","    var data = [];","","    // check we need to resize array","    if (size.length > 0) {","      // resize array","      data = array.resize(data, size, defaultValue);","      // fill diagonal","      for (var d = 0; d < n; d++) {","        data[d + kSub][d + kSuper] = _value(d);","      }","    }","    ","    // create DenseMatrix","    return new DenseMatrix({","      data: data,","      size: [rows, columns]","    });","  };","","  /**","   * Generate a matrix from a JSON object","   * @memberof DenseMatrix","   * @param {Object} json  An object structured like","   *                       `{\"mathjs\": \"DenseMatrix\", data: [], size: []}`,","   *                       where mathjs is optional","   * @returns {DenseMatrix}","   */","  DenseMatrix.fromJSON = function (json) {","    return new DenseMatrix(json);","  };","  ","  /**","   * Swap rows i and j in Matrix.","   *","   * @memberof DenseMatrix","   * @param {number} i       Matrix row index 1","   * @param {number} j       Matrix row index 2","   *","   * @return {Matrix}        The matrix reference","   */","  DenseMatrix.prototype.swapRows = function (i, j) {","    // check index","    if (!isNumber(i) || !isInteger(i) || !isNumber(j) || !isInteger(j)) {","      throw new Error('Row index must be positive integers');","    }","    // check dimensions","    if (this._size.length !== 2) {","      throw new Error('Only two dimensional matrix is supported');","    }","    // validate index","    validateIndex(i, this._size[0]);","    validateIndex(j, this._size[0]);","","    // swap rows","    DenseMatrix._swapRows(i, j, this._data);","    // return current instance","    return this;","  };","","  /**","   * Swap rows i and j in Dense Matrix data structure.","   *","   * @param {number} i       Matrix row index 1","   * @param {number} j       Matrix row index 2","   */","  DenseMatrix._swapRows = function (i, j, data) {","    // swap values i <-> j","    var vi = data[i];","    data[i] = data[j];","    data[j] = vi;","  };","   ","  /**","   * Preprocess data, which can be an Array or DenseMatrix with nested Arrays and","   * Matrices. Replaces all nested Matrices with Arrays","   * @memberof DenseMatrix","   * @param {Array} data","   * @return {Array} data","   */","  function preprocess(data) {","    for (var i = 0, ii = data.length; i < ii; i++) {","      var elem = data[i];","      if (isArray(elem)) {","        data[i] = preprocess(elem);","      }","      else if (elem && elem.isMatrix === true) {","        data[i] = preprocess(elem.valueOf());","      }","    }","","    return data;","  }","","  // register this type in the base class Matrix","  type.Matrix._storage.dense = DenseMatrix;","  type.Matrix._storage['default'] = DenseMatrix;","","  // exports","  return DenseMatrix;","}","","exports.name = 'DenseMatrix';","exports.path = 'type';","exports.factory = factory;","exports.lazy = false;  // no lazy loading, as we alter type.Matrix._storage",""],"l":{"3":1,"4":1,"6":1,"7":1,"8":1,"9":1,"11":1,"12":1,"13":1,"14":1,"16":1,"18":1,"19":1,"25":1,"26":0,"27":0,"28":0,"29":0,"31":0,"33":0,"35":0,"36":0,"37":0,"41":0,"42":0,"43":0,"46":0,"48":0,"49":0,"50":0,"52":0,"54":0,"56":0,"58":0,"60":0,"62":0,"64":0,"68":0,"69":0,"70":0,"74":1,"79":1,"80":1,"91":1,"92":0,"104":1,"105":0,"114":1,"115":0,"132":1,"133":0,"135":0,"140":0,"143":0,"153":1,"154":0,"155":0,"156":0,"157":0,"160":0,"161":0,"163":0,"164":0,"165":0,"166":0,"167":0,"170":0,"183":1,"184":0,"185":0,"186":0,"187":0,"189":0,"192":0,"193":0,"195":0,"198":0,"199":0,"200":0,"201":0,"202":0,"206":0,"207":0,"208":0,"210":0,"220":1,"221":0,"222":0,"225":0,"226":0,"228":0,"232":0,"233":0,"234":0,"238":0,"239":0,"240":0,"241":0,"242":0,"247":0,"262":1,"263":0,"264":0,"266":0,"267":0,"268":0,"272":0,"273":0,"274":0,"291":1,"292":0,"293":0,"297":0,"301":0,"302":0,"303":0,"304":0,"307":0,"310":0,"314":0,"315":0,"318":0,"324":0,"325":0,"328":0,"330":0,"331":0,"332":0,"333":0,"335":0,"336":0,"337":0,"341":0,"345":0,"346":0,"350":0,"351":0,"353":0,"356":0,"358":0,"361":0,"374":1,"375":0,"378":0,"379":0,"380":0,"381":0,"385":0,"386":0,"387":0,"405":1,"407":0,"408":0,"411":0,"413":0,"416":1,"418":0,"420":0,"422":0,"423":0,"425":0,"428":0,"429":0,"431":0,"448":1,"449":0,"451":0,"452":0,"453":0,"465":1,"466":0,"470":0,"471":0,"472":0,"476":0,"477":0,"478":0,"479":0,"483":0,"485":0,"494":1,"495":0,"500":0,"508":1,"509":0,"522":1,"524":0,"525":0,"526":0,"527":0,"528":0,"532":0,"536":0,"550":1,"552":0,"553":0,"554":0,"555":0,"556":0,"560":0,"563":0,"571":1,"572":0,"580":1,"581":0,"593":1,"594":0,"602":1,"603":0,"611":1,"612":0,"628":1,"630":0,"632":0,"633":0,"635":0,"636":0,"641":0,"644":0,"645":0,"648":0,"649":0,"652":0,"655":0,"658":0,"659":0,"663":0,"681":1,"682":0,"683":0,"684":0,"685":0,"688":0,"690":0,"692":0,"695":0,"696":0,"698":0,"702":0,"704":0,"705":0,"707":0,"708":0,"713":0,"716":0,"718":0,"721":0,"722":0,"725":0,"726":0,"729":0,"732":0,"735":0,"737":0,"739":0,"742":0,"744":0,"747":0,"749":0,"751":0,"753":0,"756":0,"758":0,"763":0,"765":0,"770":0,"772":0,"776":0,"779":0,"781":0,"783":0,"784":0,"789":0,"803":1,"804":0,"816":1,"818":0,"819":0,"822":0,"823":0,"826":0,"827":0,"830":0,"832":0,"841":1,"843":0,"844":0,"845":0,"855":1,"856":0,"857":0,"858":0,"859":0,"861":0,"862":0,"866":0,"870":1,"871":1,"874":1,"877":1,"878":1,"879":1,"880":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/matrix/SparseMatrix.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/matrix/SparseMatrix.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":1,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":1,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":1,"80":1,"81":1,"82":1,"83":0,"84":1,"85":0,"86":1,"87":0,"88":1,"89":0,"90":0,"91":0,"92":1,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":1,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":1,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":1,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":1,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":1,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":1,"224":0,"225":0,"226":0,"227":0,"228":1,"229":0,"230":0,"231":0,"232":0,"233":1,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":1,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0,"270":0,"271":0,"272":0,"273":0,"274":0,"275":0,"276":0,"277":0,"278":0,"279":0,"280":0,"281":0,"282":0,"283":0,"284":0,"285":0,"286":0,"287":0,"288":0,"289":0,"290":0,"291":0,"292":0,"293":0,"294":0,"295":0,"296":1,"297":0,"298":0,"299":0,"300":0,"301":0,"302":0,"303":0,"304":0,"305":0,"306":0,"307":0,"308":0,"309":0,"310":0,"311":0,"312":0,"313":0,"314":0,"315":0,"316":0,"317":0,"318":0,"319":0,"320":0,"321":0,"322":0,"323":0,"324":0,"325":0,"326":0,"327":0,"328":0,"329":0,"330":0,"331":0,"332":0,"333":0,"334":1,"335":0,"336":0,"337":1,"338":0,"339":1,"340":0,"341":0,"342":0,"343":0,"344":0,"345":0,"346":0,"347":0,"348":1,"349":0,"350":0,"351":0,"352":0,"353":0,"354":0,"355":0,"356":0,"357":0,"358":0,"359":0,"360":0,"361":0,"362":0,"363":0,"364":0,"365":0,"366":0,"367":0,"368":0,"369":0,"370":0,"371":0,"372":0,"373":0,"374":0,"375":0,"376":0,"377":0,"378":0,"379":0,"380":1,"381":0,"382":0,"383":0,"384":0,"385":0,"386":0,"387":0,"388":0,"389":0,"390":0,"391":0,"392":0,"393":0,"394":0,"395":0,"396":0,"397":0,"398":0,"399":0,"400":1,"401":0,"402":1,"403":0,"404":1,"405":0,"406":0,"407":0,"408":0,"409":0,"410":0,"411":0,"412":0,"413":0,"414":0,"415":0,"416":0,"417":0,"418":0,"419":0,"420":1,"421":0,"422":0,"423":0,"424":0,"425":0,"426":0,"427":0,"428":0,"429":0,"430":0,"431":0,"432":1,"433":0,"434":1,"435":0,"436":1,"437":0,"438":0,"439":0,"440":0,"441":0,"442":0,"443":0,"444":0,"445":0,"446":0,"447":0,"448":0,"449":0,"450":0,"451":0,"452":0,"453":0,"454":0,"455":0,"456":0,"457":0,"458":0,"459":0,"460":0,"461":0,"462":0,"463":1,"464":0,"465":1,"466":0,"467":0,"468":0,"469":0,"470":0,"471":0,"472":0,"473":0,"474":0,"475":0,"476":0,"477":0,"478":0,"479":0,"480":0,"481":0,"482":0,"483":0,"484":0,"485":0,"486":0,"487":0,"488":0,"489":0,"490":0,"491":0,"492":0,"493":0,"494":0,"495":0,"496":0,"497":0,"498":0,"499":0,"500":0,"501":0,"502":0,"503":0,"504":0,"505":0,"506":0,"507":0,"508":0,"509":0,"510":0,"511":0,"512":0,"513":0,"514":0,"515":0,"516":0,"517":0,"518":0,"519":1,"520":0,"521":0,"522":0,"523":0,"524":0,"525":0,"526":0,"527":0,"528":1,"529":0,"530":0,"531":0,"532":0,"533":1,"534":0,"535":0,"536":0,"537":0,"538":0,"539":0,"540":0,"541":0,"542":0,"543":0,"544":0,"545":0,"546":0,"547":0,"548":0,"549":0,"550":0,"551":0,"552":0,"553":0,"554":0,"555":0,"556":0,"557":0,"558":0,"559":0,"560":0,"561":0,"562":1,"563":1,"564":1,"565":1,"566":1,"567":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0,0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0,0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0,0],"69":[0,0],"70":[0,0],"71":[0,0],"72":[0,0],"73":[0,0],"74":[0,0],"75":[0,0],"76":[0,0],"77":[0,0],"78":[0,0],"79":[0,0],"80":[0,0],"81":[0,0],"82":[0,0],"83":[0,0,0],"84":[0,0],"85":[0,0],"86":[0,0],"87":[0,0],"88":[0,0],"89":[0,0],"90":[0,0],"91":[0,0],"92":[0,0],"93":[0,0],"94":[0,0],"95":[0,0],"96":[0,0],"97":[0,0],"98":[0,0],"99":[0,0],"100":[0,0],"101":[0,0],"102":[0,0],"103":[0,0],"104":[0,0],"105":[0,0],"106":[0,0],"107":[0,0],"108":[0,0],"109":[0,0],"110":[0,0],"111":[0,0],"112":[0,0],"113":[0,0],"114":[0,0],"115":[0,0],"116":[0,0,0],"117":[0,0],"118":[0,0],"119":[0,0],"120":[0,0],"121":[0,0],"122":[0,0],"123":[0,0],"124":[0,0],"125":[0,0],"126":[0,0],"127":[0,0],"128":[0,0],"129":[0,0],"130":[0,0],"131":[0,0],"132":[0,0],"133":[0,0],"134":[0,0],"135":[0,0,0,0],"136":[0,0],"137":[0,0],"138":[0,0,0,0],"139":[0,0],"140":[0,0],"141":[0,0,0,0],"142":[0,0],"143":[0,0],"144":[0,0],"145":[0,0],"146":[0,0],"147":[0,0],"148":[0,0,0,0],"149":[0,0],"150":[0,0],"151":[0,0],"152":[0,0],"153":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0},"fnMap":{"1":{"name":"factory","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":18,"column":45}}},"2":{"name":"SparseMatrix","line":27,"loc":{"start":{"line":27,"column":2},"end":{"line":27,"column":40}}},"3":{"name":"(anonymous_3)","line":63,"loc":{"start":{"line":63,"column":26},"end":{"line":63,"column":62}}},"4":{"name":"(anonymous_4)","line":79,"loc":{"start":{"line":79,"column":25},"end":{"line":79,"column":59}}},"5":{"name":"(anonymous_5)","line":171,"loc":{"start":{"line":171,"column":35},"end":{"line":171,"column":47}}},"6":{"name":"(anonymous_6)","line":184,"loc":{"start":{"line":184,"column":36},"end":{"line":184,"column":48}}},"7":{"name":"(anonymous_7)","line":194,"loc":{"start":{"line":194,"column":34},"end":{"line":194,"column":60}}},"8":{"name":"(anonymous_8)","line":207,"loc":{"start":{"line":207,"column":35},"end":{"line":207,"column":47}}},"9":{"name":"(anonymous_9)","line":229,"loc":{"start":{"line":229,"column":34},"end":{"line":229,"column":78}}},"10":{"name":"(anonymous_10)","line":248,"loc":{"start":{"line":248,"column":19},"end":{"line":248,"column":42}}},"11":{"name":"(anonymous_11)","line":290,"loc":{"start":{"line":290,"column":17},"end":{"line":290,"column":33}}},"12":{"name":"(anonymous_12)","line":303,"loc":{"start":{"line":303,"column":20},"end":{"line":303,"column":33}}},"13":{"name":"(anonymous_13)","line":333,"loc":{"start":{"line":333,"column":19},"end":{"line":333,"column":69}}},"14":{"name":"(anonymous_14)","line":420,"loc":{"start":{"line":420,"column":31},"end":{"line":420,"column":48}}},"15":{"name":"(anonymous_15)","line":457,"loc":{"start":{"line":457,"column":31},"end":{"line":457,"column":65}}},"16":{"name":"(anonymous_16)","line":522,"loc":{"start":{"line":522,"column":23},"end":{"line":522,"column":55}}},"17":{"name":"(anonymous_17)","line":536,"loc":{"start":{"line":536,"column":16},"end":{"line":536,"column":52}}},"18":{"name":"(anonymous_18)","line":545,"loc":{"start":{"line":545,"column":16},"end":{"line":545,"column":58}}},"19":{"name":"(anonymous_19)","line":568,"loc":{"start":{"line":568,"column":34},"end":{"line":568,"column":70}}},"20":{"name":"(anonymous_20)","line":576,"loc":{"start":{"line":576,"column":17},"end":{"line":576,"column":34}}},"21":{"name":"(anonymous_21)","line":589,"loc":{"start":{"line":589,"column":16},"end":{"line":589,"column":63}}},"22":{"name":"(anonymous_22)","line":723,"loc":{"start":{"line":723,"column":35},"end":{"line":723,"column":57}}},"23":{"name":"(anonymous_23)","line":732,"loc":{"start":{"line":732,"column":17},"end":{"line":732,"column":34}}},"24":{"name":"(anonymous_24)","line":810,"loc":{"start":{"line":810,"column":33},"end":{"line":810,"column":45}}},"25":{"name":"(anonymous_25)","line":826,"loc":{"start":{"line":826,"column":32},"end":{"line":826,"column":43}}},"26":{"name":"(anonymous_26)","line":841,"loc":{"start":{"line":841,"column":31},"end":{"line":841,"column":62}}},"27":{"name":"(anonymous_27)","line":851,"loc":{"start":{"line":851,"column":17},"end":{"line":851,"column":36}}},"28":{"name":"(anonymous_28)","line":863,"loc":{"start":{"line":863,"column":13},"end":{"line":863,"column":90}}},"29":{"name":"(anonymous_29)","line":882,"loc":{"start":{"line":882,"column":17},"end":{"line":882,"column":36}}},"30":{"name":"(anonymous_30)","line":944,"loc":{"start":{"line":944,"column":35},"end":{"line":944,"column":66}}},"31":{"name":"(anonymous_31)","line":989,"loc":{"start":{"line":989,"column":35},"end":{"line":989,"column":47}}},"32":{"name":"(anonymous_32)","line":998,"loc":{"start":{"line":998,"column":35},"end":{"line":998,"column":47}}},"33":{"name":"(anonymous_33)","line":1002,"loc":{"start":{"line":1002,"column":17},"end":{"line":1002,"column":59}}},"34":{"name":"(anonymous_34)","line":1042,"loc":{"start":{"line":1042,"column":34},"end":{"line":1042,"column":53}}},"35":{"name":"(anonymous_35)","line":1071,"loc":{"start":{"line":1071,"column":36},"end":{"line":1071,"column":48}}},"36":{"name":"(anonymous_36)","line":1080,"loc":{"start":{"line":1080,"column":34},"end":{"line":1080,"column":46}}},"37":{"name":"(anonymous_37)","line":1099,"loc":{"start":{"line":1099,"column":36},"end":{"line":1099,"column":48}}},"38":{"name":"(anonymous_38)","line":1170,"loc":{"start":{"line":1170,"column":26},"end":{"line":1170,"column":42}}},"39":{"name":"(anonymous_39)","line":1185,"loc":{"start":{"line":1185,"column":26},"end":{"line":1185,"column":76}}},"40":{"name":"(anonymous_40)","line":1192,"loc":{"start":{"line":1192,"column":20},"end":{"line":1192,"column":33}}},"41":{"name":"(anonymous_41)","line":1253,"loc":{"start":{"line":1253,"column":15},"end":{"line":1253,"column":28}}},"42":{"name":"(anonymous_42)","line":1267,"loc":{"start":{"line":1267,"column":15},"end":{"line":1267,"column":28}}},"43":{"name":"(anonymous_43)","line":1274,"loc":{"start":{"line":1274,"column":15},"end":{"line":1274,"column":27}}},"44":{"name":"(anonymous_44)","line":1324,"loc":{"start":{"line":1324,"column":36},"end":{"line":1324,"column":52}}},"45":{"name":"(anonymous_45)","line":1352,"loc":{"start":{"line":1352,"column":29},"end":{"line":1352,"column":72}}},"46":{"name":"(anonymous_46)","line":1373,"loc":{"start":{"line":1373,"column":27},"end":{"line":1373,"column":72}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":40}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":59}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":23}},"4":{"start":{"line":7,"column":0},"end":{"line":7,"column":25}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":25}},"6":{"start":{"line":9,"column":0},"end":{"line":9,"column":25}},"7":{"start":{"line":11,"column":0},"end":{"line":11,"column":28}},"8":{"start":{"line":12,"column":0},"end":{"line":12,"column":31}},"9":{"start":{"line":13,"column":0},"end":{"line":13,"column":33}},"10":{"start":{"line":14,"column":0},"end":{"line":14,"column":31}},"11":{"start":{"line":16,"column":0},"end":{"line":16,"column":40}},"12":{"start":{"line":18,"column":0},"end":{"line":1429,"column":1}},"13":{"start":{"line":19,"column":2},"end":{"line":19,"column":41}},"14":{"start":{"line":20,"column":2},"end":{"line":20,"column":75}},"15":{"start":{"line":27,"column":2},"end":{"line":61,"column":3}},"16":{"start":{"line":28,"column":4},"end":{"line":29,"column":80}},"17":{"start":{"line":29,"column":6},"end":{"line":29,"column":80}},"18":{"start":{"line":30,"column":4},"end":{"line":31,"column":55}},"19":{"start":{"line":31,"column":6},"end":{"line":31,"column":55}},"20":{"start":{"line":33,"column":4},"end":{"line":60,"column":5}},"21":{"start":{"line":35,"column":6},"end":{"line":35,"column":46}},"22":{"start":{"line":37,"column":9},"end":{"line":60,"column":5}},"23":{"start":{"line":39,"column":6},"end":{"line":39,"column":33}},"24":{"start":{"line":40,"column":6},"end":{"line":40,"column":31}},"25":{"start":{"line":41,"column":6},"end":{"line":41,"column":27}},"26":{"start":{"line":42,"column":6},"end":{"line":42,"column":29}},"27":{"start":{"line":43,"column":6},"end":{"line":43,"column":49}},"28":{"start":{"line":45,"column":9},"end":{"line":60,"column":5}},"29":{"start":{"line":47,"column":6},"end":{"line":47,"column":45}},"30":{"start":{"line":49,"column":9},"end":{"line":60,"column":5}},"31":{"start":{"line":51,"column":6},"end":{"line":51,"column":86}},"32":{"start":{"line":55,"column":6},"end":{"line":55,"column":24}},"33":{"start":{"line":56,"column":6},"end":{"line":56,"column":23}},"34":{"start":{"line":57,"column":6},"end":{"line":57,"column":22}},"35":{"start":{"line":58,"column":6},"end":{"line":58,"column":26}},"36":{"start":{"line":59,"column":6},"end":{"line":59,"column":32}},"37":{"start":{"line":63,"column":2},"end":{"line":77,"column":4}},"38":{"start":{"line":65,"column":4},"end":{"line":76,"column":5}},"39":{"start":{"line":67,"column":6},"end":{"line":67,"column":81}},"40":{"start":{"line":68,"column":6},"end":{"line":68,"column":50}},"41":{"start":{"line":69,"column":6},"end":{"line":69,"column":46}},"42":{"start":{"line":70,"column":6},"end":{"line":70,"column":48}},"43":{"start":{"line":71,"column":6},"end":{"line":71,"column":54}},"44":{"start":{"line":75,"column":6},"end":{"line":75,"column":79}},"45":{"start":{"line":79,"column":2},"end":{"line":152,"column":4}},"46":{"start":{"line":81,"column":4},"end":{"line":81,"column":24}},"47":{"start":{"line":82,"column":4},"end":{"line":82,"column":23}},"48":{"start":{"line":83,"column":4},"end":{"line":83,"column":21}},"49":{"start":{"line":84,"column":4},"end":{"line":84,"column":32}},"50":{"start":{"line":86,"column":4},"end":{"line":86,"column":27}},"51":{"start":{"line":87,"column":4},"end":{"line":87,"column":20}},"52":{"start":{"line":90,"column":4},"end":{"line":90,"column":25}},"53":{"start":{"line":92,"column":4},"end":{"line":92,"column":17}},"54":{"start":{"line":94,"column":4},"end":{"line":99,"column":5}},"55":{"start":{"line":96,"column":6},"end":{"line":96,"column":72}},"56":{"start":{"line":98,"column":6},"end":{"line":98,"column":40}},"57":{"start":{"line":102,"column":4},"end":{"line":147,"column":5}},"58":{"start":{"line":104,"column":6},"end":{"line":104,"column":16}},"59":{"start":{"line":105,"column":6},"end":{"line":146,"column":26}},"60":{"start":{"line":107,"column":8},"end":{"line":107,"column":47}},"61":{"start":{"line":109,"column":8},"end":{"line":142,"column":9}},"62":{"start":{"line":111,"column":10},"end":{"line":111,"column":28}},"63":{"start":{"line":113,"column":10},"end":{"line":141,"column":11}},"64":{"start":{"line":115,"column":12},"end":{"line":116,"column":35}},"65":{"start":{"line":116,"column":14},"end":{"line":116,"column":35}},"66":{"start":{"line":118,"column":12},"end":{"line":128,"column":13}},"67":{"start":{"line":120,"column":14},"end":{"line":120,"column":29}},"68":{"start":{"line":122,"column":14},"end":{"line":127,"column":15}},"69":{"start":{"line":124,"column":16},"end":{"line":124,"column":39}},"70":{"start":{"line":126,"column":16},"end":{"line":126,"column":38}},"71":{"start":{"line":132,"column":12},"end":{"line":133,"column":26}},"72":{"start":{"line":133,"column":14},"end":{"line":133,"column":26}},"73":{"start":{"line":135,"column":12},"end":{"line":140,"column":13}},"74":{"start":{"line":137,"column":14},"end":{"line":137,"column":39}},"75":{"start":{"line":139,"column":14},"end":{"line":139,"column":36}},"76":{"start":{"line":144,"column":8},"end":{"line":144,"column":12}},"77":{"start":{"line":149,"column":4},"end":{"line":149,"column":43}},"78":{"start":{"line":151,"column":4},"end":{"line":151,"column":35}},"79":{"start":{"line":154,"column":2},"end":{"line":154,"column":40}},"80":{"start":{"line":159,"column":2},"end":{"line":159,"column":47}},"81":{"start":{"line":160,"column":2},"end":{"line":160,"column":47}},"82":{"start":{"line":171,"column":2},"end":{"line":173,"column":4}},"83":{"start":{"line":172,"column":4},"end":{"line":172,"column":20}},"84":{"start":{"line":184,"column":2},"end":{"line":186,"column":4}},"85":{"start":{"line":185,"column":4},"end":{"line":185,"column":26}},"86":{"start":{"line":194,"column":2},"end":{"line":196,"column":4}},"87":{"start":{"line":195,"column":4},"end":{"line":195,"column":44}},"88":{"start":{"line":207,"column":2},"end":{"line":213,"column":4}},"89":{"start":{"line":209,"column":4},"end":{"line":209,"column":29}},"90":{"start":{"line":210,"column":4},"end":{"line":210,"column":32}},"91":{"start":{"line":212,"column":4},"end":{"line":212,"column":85}},"92":{"start":{"line":229,"column":2},"end":{"line":246,"column":4}},"93":{"start":{"line":230,"column":4},"end":{"line":231,"column":71}},"94":{"start":{"line":231,"column":6},"end":{"line":231,"column":71}},"95":{"start":{"line":234,"column":4},"end":{"line":245,"column":5}},"96":{"start":{"line":236,"column":8},"end":{"line":236,"column":39}},"97":{"start":{"line":241,"column":8},"end":{"line":241,"column":66}},"98":{"start":{"line":244,"column":8},"end":{"line":244,"column":59}},"99":{"start":{"line":248,"column":2},"end":{"line":331,"column":4}},"100":{"start":{"line":250,"column":4},"end":{"line":252,"column":5}},"101":{"start":{"line":251,"column":6},"end":{"line":251,"column":43}},"102":{"start":{"line":254,"column":4},"end":{"line":254,"column":34}},"103":{"start":{"line":255,"column":4},"end":{"line":258,"column":5}},"104":{"start":{"line":257,"column":6},"end":{"line":257,"column":35}},"105":{"start":{"line":260,"column":4},"end":{"line":260,"column":26}},"106":{"start":{"line":261,"column":4},"end":{"line":263,"column":5}},"107":{"start":{"line":262,"column":6},"end":{"line":262,"column":65}},"108":{"start":{"line":266,"column":4},"end":{"line":266,"column":21}},"109":{"start":{"line":269,"column":4},"end":{"line":269,"column":24}},"110":{"start":{"line":270,"column":4},"end":{"line":270,"column":24}},"111":{"start":{"line":271,"column":4},"end":{"line":274,"column":5}},"112":{"start":{"line":272,"column":6},"end":{"line":272,"column":45}},"113":{"start":{"line":273,"column":6},"end":{"line":273,"column":45}},"114":{"start":{"line":277,"column":4},"end":{"line":277,"column":33}},"115":{"start":{"line":278,"column":4},"end":{"line":278,"column":31}},"116":{"start":{"line":279,"column":4},"end":{"line":279,"column":27}},"117":{"start":{"line":282,"column":4},"end":{"line":282,"column":32}},"118":{"start":{"line":283,"column":4},"end":{"line":283,"column":35}},"119":{"start":{"line":286,"column":4},"end":{"line":286,"column":15}},"120":{"start":{"line":287,"column":4},"end":{"line":287,"column":16}},"121":{"start":{"line":290,"column":4},"end":{"line":295,"column":7}},"122":{"start":{"line":292,"column":6},"end":{"line":292,"column":19}},"123":{"start":{"line":294,"column":6},"end":{"line":294,"column":18}},"124":{"start":{"line":298,"column":4},"end":{"line":298,"column":42}},"125":{"start":{"line":299,"column":4},"end":{"line":299,"column":19}},"126":{"start":{"line":300,"column":4},"end":{"line":300,"column":17}},"127":{"start":{"line":303,"column":4},"end":{"line":319,"column":7}},"128":{"start":{"line":305,"column":6},"end":{"line":305,"column":29}},"129":{"start":{"line":307,"column":6},"end":{"line":318,"column":7}},"130":{"start":{"line":309,"column":8},"end":{"line":309,"column":22}},"131":{"start":{"line":311,"column":8},"end":{"line":317,"column":9}},"132":{"start":{"line":313,"column":10},"end":{"line":313,"column":28}},"133":{"start":{"line":315,"column":10},"end":{"line":316,"column":36}},"134":{"start":{"line":316,"column":12},"end":{"line":316,"column":36}},"135":{"start":{"line":321,"column":4},"end":{"line":321,"column":27}},"136":{"start":{"line":324,"column":4},"end":{"line":330,"column":7}},"137":{"start":{"line":333,"column":2},"end":{"line":412,"column":4}},"138":{"start":{"line":335,"column":4},"end":{"line":337,"column":5}},"139":{"start":{"line":336,"column":6},"end":{"line":336,"column":43}},"140":{"start":{"line":340,"column":4},"end":{"line":341,"column":36}},"141":{"start":{"line":344,"column":4},"end":{"line":344,"column":14}},"142":{"start":{"line":345,"column":4},"end":{"line":354,"column":5}},"143":{"start":{"line":347,"column":6},"end":{"line":347,"column":31}},"144":{"start":{"line":349,"column":6},"end":{"line":349,"column":38}},"145":{"start":{"line":353,"column":6},"end":{"line":353,"column":36}},"146":{"start":{"line":357,"column":4},"end":{"line":410,"column":5}},"147":{"start":{"line":359,"column":6},"end":{"line":361,"column":7}},"148":{"start":{"line":360,"column":8},"end":{"line":360,"column":47}},"149":{"start":{"line":363,"column":6},"end":{"line":363,"column":55}},"150":{"start":{"line":367,"column":6},"end":{"line":369,"column":7}},"151":{"start":{"line":368,"column":8},"end":{"line":368,"column":73}},"152":{"start":{"line":372,"column":6},"end":{"line":385,"column":7}},"153":{"start":{"line":374,"column":8},"end":{"line":374,"column":18}},"154":{"start":{"line":375,"column":8},"end":{"line":375,"column":22}},"155":{"start":{"line":376,"column":8},"end":{"line":378,"column":9}},"156":{"start":{"line":377,"column":10},"end":{"line":377,"column":14}},"157":{"start":{"line":379,"column":8},"end":{"line":382,"column":9}},"158":{"start":{"line":380,"column":10},"end":{"line":380,"column":18}},"159":{"start":{"line":381,"column":10},"end":{"line":381,"column":14}},"160":{"start":{"line":384,"column":8},"end":{"line":384,"column":75}},"161":{"start":{"line":388,"column":6},"end":{"line":390,"column":7}},"162":{"start":{"line":389,"column":8},"end":{"line":389,"column":52}},"163":{"start":{"line":393,"column":6},"end":{"line":393,"column":30}},"164":{"start":{"line":394,"column":6},"end":{"line":394,"column":30}},"165":{"start":{"line":397,"column":6},"end":{"line":397,"column":23}},"166":{"start":{"line":398,"column":6},"end":{"line":398,"column":23}},"167":{"start":{"line":401,"column":6},"end":{"line":409,"column":7}},"168":{"start":{"line":403,"column":8},"end":{"line":408,"column":9}},"169":{"start":{"line":405,"column":10},"end":{"line":405,"column":34}},"170":{"start":{"line":407,"column":10},"end":{"line":407,"column":56}},"171":{"start":{"line":411,"column":4},"end":{"line":411,"column":18}},"172":{"start":{"line":420,"column":2},"end":{"line":445,"column":4}},"173":{"start":{"line":421,"column":4},"end":{"line":422,"column":44}},"174":{"start":{"line":422,"column":6},"end":{"line":422,"column":44}},"175":{"start":{"line":423,"column":4},"end":{"line":424,"column":64}},"176":{"start":{"line":424,"column":6},"end":{"line":424,"column":64}},"177":{"start":{"line":427,"column":4},"end":{"line":428,"column":68}},"178":{"start":{"line":428,"column":6},"end":{"line":428,"column":68}},"179":{"start":{"line":431,"column":4},"end":{"line":431,"column":21}},"180":{"start":{"line":432,"column":4},"end":{"line":432,"column":21}},"181":{"start":{"line":435,"column":4},"end":{"line":435,"column":36}},"182":{"start":{"line":436,"column":4},"end":{"line":436,"column":36}},"183":{"start":{"line":439,"column":4},"end":{"line":439,"column":75}},"184":{"start":{"line":441,"column":4},"end":{"line":442,"column":29}},"185":{"start":{"line":442,"column":6},"end":{"line":442,"column":29}},"186":{"start":{"line":444,"column":4},"end":{"line":444,"column":13}},"187":{"start":{"line":457,"column":2},"end":{"line":520,"column":4}},"188":{"start":{"line":458,"column":4},"end":{"line":459,"column":44}},"189":{"start":{"line":459,"column":6},"end":{"line":459,"column":44}},"190":{"start":{"line":460,"column":4},"end":{"line":461,"column":64}},"191":{"start":{"line":461,"column":6},"end":{"line":461,"column":64}},"192":{"start":{"line":464,"column":4},"end":{"line":465,"column":68}},"193":{"start":{"line":465,"column":6},"end":{"line":465,"column":68}},"194":{"start":{"line":468,"column":4},"end":{"line":468,"column":21}},"195":{"start":{"line":469,"column":4},"end":{"line":469,"column":21}},"196":{"start":{"line":472,"column":4},"end":{"line":472,"column":29}},"197":{"start":{"line":473,"column":4},"end":{"line":473,"column":32}},"198":{"start":{"line":476,"column":4},"end":{"line":476,"column":25}},"199":{"start":{"line":478,"column":4},"end":{"line":478,"column":17}},"200":{"start":{"line":480,"column":4},"end":{"line":485,"column":5}},"201":{"start":{"line":482,"column":6},"end":{"line":482,"column":84}},"202":{"start":{"line":484,"column":6},"end":{"line":484,"column":46}},"203":{"start":{"line":488,"column":4},"end":{"line":494,"column":5}},"204":{"start":{"line":490,"column":6},"end":{"line":490,"column":83}},"205":{"start":{"line":492,"column":6},"end":{"line":492,"column":27}},"206":{"start":{"line":493,"column":6},"end":{"line":493,"column":30}},"207":{"start":{"line":497,"column":4},"end":{"line":497,"column":27}},"208":{"start":{"line":498,"column":4},"end":{"line":498,"column":30}},"209":{"start":{"line":501,"column":4},"end":{"line":501,"column":75}},"210":{"start":{"line":503,"column":4},"end":{"line":517,"column":5}},"211":{"start":{"line":505,"column":6},"end":{"line":512,"column":7}},"212":{"start":{"line":507,"column":8},"end":{"line":507,"column":28}},"213":{"start":{"line":511,"column":8},"end":{"line":511,"column":60}},"214":{"start":{"line":516,"column":6},"end":{"line":516,"column":64}},"215":{"start":{"line":519,"column":4},"end":{"line":519,"column":16}},"216":{"start":{"line":522,"column":2},"end":{"line":534,"column":4}},"217":{"start":{"line":524,"column":4},"end":{"line":525,"column":20}},"218":{"start":{"line":525,"column":6},"end":{"line":525,"column":20}},"219":{"start":{"line":527,"column":4},"end":{"line":531,"column":5}},"220":{"start":{"line":529,"column":6},"end":{"line":530,"column":17}},"221":{"start":{"line":530,"column":8},"end":{"line":530,"column":17}},"222":{"start":{"line":533,"column":4},"end":{"line":533,"column":15}},"223":{"start":{"line":536,"column":2},"end":{"line":543,"column":4}},"224":{"start":{"line":538,"column":4},"end":{"line":538,"column":24}},"225":{"start":{"line":539,"column":4},"end":{"line":539,"column":23}},"226":{"start":{"line":541,"column":4},"end":{"line":542,"column":15}},"227":{"start":{"line":542,"column":6},"end":{"line":542,"column":15}},"228":{"start":{"line":545,"column":2},"end":{"line":553,"column":4}},"229":{"start":{"line":547,"column":4},"end":{"line":547,"column":27}},"230":{"start":{"line":549,"column":4},"end":{"line":549,"column":26}},"231":{"start":{"line":551,"column":4},"end":{"line":552,"column":15}},"232":{"start":{"line":552,"column":6},"end":{"line":552,"column":15}},"233":{"start":{"line":568,"column":2},"end":{"line":587,"column":4}},"234":{"start":{"line":570,"column":4},"end":{"line":571,"column":44}},"235":{"start":{"line":571,"column":6},"end":{"line":571,"column":44}},"236":{"start":{"line":572,"column":4},"end":{"line":573,"column":66}},"237":{"start":{"line":573,"column":6},"end":{"line":573,"column":66}},"238":{"start":{"line":576,"column":4},"end":{"line":581,"column":7}},"239":{"start":{"line":577,"column":6},"end":{"line":580,"column":7}},"240":{"start":{"line":578,"column":8},"end":{"line":579,"column":67}},"241":{"start":{"line":584,"column":4},"end":{"line":584,"column":39}},"242":{"start":{"line":586,"column":4},"end":{"line":586,"column":54}},"243":{"start":{"line":589,"column":2},"end":{"line":707,"column":4}},"244":{"start":{"line":591,"column":4},"end":{"line":591,"column":34}},"245":{"start":{"line":594,"column":4},"end":{"line":594,"column":25}},"246":{"start":{"line":596,"column":4},"end":{"line":596,"column":17}},"247":{"start":{"line":598,"column":4},"end":{"line":605,"column":5}},"248":{"start":{"line":600,"column":6},"end":{"line":600,"column":88}},"249":{"start":{"line":602,"column":6},"end":{"line":602,"column":48}},"250":{"start":{"line":604,"column":6},"end":{"line":604,"column":53}},"251":{"start":{"line":608,"column":4},"end":{"line":608,"column":31}},"252":{"start":{"line":611,"column":4},"end":{"line":611,"column":28}},"253":{"start":{"line":612,"column":4},"end":{"line":612,"column":28}},"254":{"start":{"line":614,"column":4},"end":{"line":614,"column":16}},"255":{"start":{"line":617,"column":4},"end":{"line":642,"column":5}},"256":{"start":{"line":619,"column":6},"end":{"line":632,"column":7}},"257":{"start":{"line":621,"column":8},"end":{"line":621,"column":47}},"258":{"start":{"line":623,"column":8},"end":{"line":631,"column":9}},"259":{"start":{"line":625,"column":10},"end":{"line":630,"column":11}},"260":{"start":{"line":627,"column":12},"end":{"line":627,"column":39}},"261":{"start":{"line":629,"column":12},"end":{"line":629,"column":34}},"262":{"start":{"line":634,"column":6},"end":{"line":634,"column":51}},"263":{"start":{"line":636,"column":9},"end":{"line":642,"column":5}},"264":{"start":{"line":638,"column":6},"end":{"line":638,"column":51}},"265":{"start":{"line":640,"column":6},"end":{"line":640,"column":73}},"266":{"start":{"line":641,"column":6},"end":{"line":641,"column":71}},"267":{"start":{"line":644,"column":4},"end":{"line":644,"column":16}},"268":{"start":{"line":647,"column":4},"end":{"line":701,"column":5}},"269":{"start":{"line":649,"column":6},"end":{"line":672,"column":7}},"270":{"start":{"line":651,"column":8},"end":{"line":651,"column":18}},"271":{"start":{"line":653,"column":8},"end":{"line":669,"column":9}},"272":{"start":{"line":655,"column":10},"end":{"line":655,"column":46}},"273":{"start":{"line":657,"column":10},"end":{"line":657,"column":37}},"274":{"start":{"line":659,"column":10},"end":{"line":659,"column":20}},"275":{"start":{"line":661,"column":10},"end":{"line":668,"column":11}},"276":{"start":{"line":663,"column":12},"end":{"line":663,"column":51}},"277":{"start":{"line":665,"column":12},"end":{"line":665,"column":46}},"278":{"start":{"line":667,"column":12},"end":{"line":667,"column":16}},"279":{"start":{"line":671,"column":8},"end":{"line":671,"column":47}},"280":{"start":{"line":674,"column":9},"end":{"line":701,"column":5}},"281":{"start":{"line":676,"column":6},"end":{"line":676,"column":16}},"282":{"start":{"line":678,"column":6},"end":{"line":698,"column":7}},"283":{"start":{"line":680,"column":8},"end":{"line":680,"column":44}},"284":{"start":{"line":682,"column":8},"end":{"line":682,"column":32}},"285":{"start":{"line":683,"column":8},"end":{"line":683,"column":40}},"286":{"start":{"line":685,"column":8},"end":{"line":697,"column":9}},"287":{"start":{"line":687,"column":10},"end":{"line":687,"column":31}},"288":{"start":{"line":689,"column":10},"end":{"line":696,"column":11}},"289":{"start":{"line":691,"column":12},"end":{"line":691,"column":40}},"290":{"start":{"line":693,"column":12},"end":{"line":693,"column":39}},"291":{"start":{"line":695,"column":12},"end":{"line":695,"column":16}},"292":{"start":{"line":700,"column":6},"end":{"line":700,"column":45}},"293":{"start":{"line":703,"column":4},"end":{"line":703,"column":27}},"294":{"start":{"line":704,"column":4},"end":{"line":704,"column":30}},"295":{"start":{"line":706,"column":4},"end":{"line":706,"column":18}},"296":{"start":{"line":723,"column":2},"end":{"line":803,"column":3}},"297":{"start":{"line":726,"column":4},"end":{"line":727,"column":44}},"298":{"start":{"line":727,"column":6},"end":{"line":727,"column":44}},"299":{"start":{"line":728,"column":4},"end":{"line":729,"column":80}},"300":{"start":{"line":729,"column":6},"end":{"line":729,"column":80}},"301":{"start":{"line":732,"column":4},"end":{"line":737,"column":7}},"302":{"start":{"line":733,"column":6},"end":{"line":736,"column":7}},"303":{"start":{"line":734,"column":8},"end":{"line":735,"column":67}},"304":{"start":{"line":740,"column":4},"end":{"line":742,"column":5}},"305":{"start":{"line":741,"column":6},"end":{"line":741,"column":93}},"306":{"start":{"line":745,"column":4},"end":{"line":745,"column":39}},"307":{"start":{"line":748,"column":4},"end":{"line":750,"column":5}},"308":{"start":{"line":749,"column":6},"end":{"line":749,"column":15}},"309":{"start":{"line":753,"column":4},"end":{"line":753,"column":22}},"310":{"start":{"line":754,"column":4},"end":{"line":758,"column":5}},"311":{"start":{"line":755,"column":6},"end":{"line":757,"column":7}},"312":{"start":{"line":756,"column":8},"end":{"line":756,"column":25}},"313":{"start":{"line":761,"column":4},"end":{"line":761,"column":35}},"314":{"start":{"line":764,"column":4},"end":{"line":764,"column":36}},"315":{"start":{"line":767,"column":4},"end":{"line":773,"column":5}},"316":{"start":{"line":768,"column":6},"end":{"line":768,"column":27}},"317":{"start":{"line":769,"column":6},"end":{"line":769,"column":27}},"318":{"start":{"line":770,"column":6},"end":{"line":770,"column":38}},"319":{"start":{"line":771,"column":6},"end":{"line":771,"column":35}},"320":{"start":{"line":772,"column":6},"end":{"line":772,"column":47}},"321":{"start":{"line":782,"column":4},"end":{"line":782,"column":25}},"322":{"start":{"line":783,"column":4},"end":{"line":783,"column":24}},"323":{"start":{"line":784,"column":4},"end":{"line":784,"column":32}},"324":{"start":{"line":785,"column":4},"end":{"line":785,"column":27}},"325":{"start":{"line":786,"column":4},"end":{"line":788,"column":5}},"326":{"start":{"line":787,"column":6},"end":{"line":787,"column":20}},"327":{"start":{"line":792,"column":4},"end":{"line":798,"column":5}},"328":{"start":{"line":793,"column":6},"end":{"line":793,"column":26}},"329":{"start":{"line":794,"column":6},"end":{"line":794,"column":26}},"330":{"start":{"line":795,"column":6},"end":{"line":795,"column":24}},"331":{"start":{"line":796,"column":6},"end":{"line":796,"column":68}},"332":{"start":{"line":797,"column":6},"end":{"line":797,"column":55}},"333":{"start":{"line":802,"column":4},"end":{"line":802,"column":13}},"334":{"start":{"line":810,"column":2},"end":{"line":819,"column":4}},"335":{"start":{"line":811,"column":4},"end":{"line":817,"column":7}},"336":{"start":{"line":818,"column":4},"end":{"line":818,"column":13}},"337":{"start":{"line":826,"column":2},"end":{"line":828,"column":4}},"338":{"start":{"line":827,"column":4},"end":{"line":827,"column":31}},"339":{"start":{"line":841,"column":2},"end":{"line":857,"column":4}},"340":{"start":{"line":843,"column":4},"end":{"line":844,"column":68}},"341":{"start":{"line":844,"column":6},"end":{"line":844,"column":68}},"342":{"start":{"line":846,"column":4},"end":{"line":846,"column":18}},"343":{"start":{"line":848,"column":4},"end":{"line":848,"column":29}},"344":{"start":{"line":849,"column":4},"end":{"line":849,"column":32}},"345":{"start":{"line":851,"column":4},"end":{"line":854,"column":6}},"346":{"start":{"line":853,"column":6},"end":{"line":853,"column":37}},"347":{"start":{"line":856,"column":4},"end":{"line":856,"column":70}},"348":{"start":{"line":863,"column":2},"end":{"line":934,"column":4}},"349":{"start":{"line":865,"column":4},"end":{"line":865,"column":20}},"350":{"start":{"line":866,"column":4},"end":{"line":866,"column":19}},"351":{"start":{"line":867,"column":4},"end":{"line":867,"column":17}},"352":{"start":{"line":870,"column":4},"end":{"line":870,"column":25}},"353":{"start":{"line":872,"column":4},"end":{"line":872,"column":17}},"354":{"start":{"line":874,"column":4},"end":{"line":879,"column":5}},"355":{"start":{"line":876,"column":6},"end":{"line":876,"column":88}},"356":{"start":{"line":878,"column":6},"end":{"line":878,"column":48}},"357":{"start":{"line":882,"column":4},"end":{"line":892,"column":6}},"358":{"start":{"line":884,"column":6},"end":{"line":884,"column":28}},"359":{"start":{"line":886,"column":6},"end":{"line":891,"column":7}},"360":{"start":{"line":888,"column":8},"end":{"line":888,"column":23}},"361":{"start":{"line":890,"column":8},"end":{"line":890,"column":22}},"362":{"start":{"line":894,"column":4},"end":{"line":924,"column":5}},"363":{"start":{"line":896,"column":6},"end":{"line":896,"column":30}},"364":{"start":{"line":898,"column":6},"end":{"line":898,"column":30}},"365":{"start":{"line":899,"column":6},"end":{"line":899,"column":34}},"366":{"start":{"line":901,"column":6},"end":{"line":901,"column":21}},"367":{"start":{"line":903,"column":6},"end":{"line":918,"column":7}},"368":{"start":{"line":905,"column":8},"end":{"line":905,"column":33}},"369":{"start":{"line":907,"column":8},"end":{"line":915,"column":9}},"370":{"start":{"line":909,"column":10},"end":{"line":912,"column":11}},"371":{"start":{"line":910,"column":11},"end":{"line":911,"column":50}},"372":{"start":{"line":911,"column":13},"end":{"line":911,"column":50}},"373":{"start":{"line":914,"column":10},"end":{"line":914,"column":63}},"374":{"start":{"line":917,"column":8},"end":{"line":917,"column":18}},"375":{"start":{"line":920,"column":6},"end":{"line":923,"column":7}},"376":{"start":{"line":921,"column":8},"end":{"line":922,"column":47}},"377":{"start":{"line":922,"column":10},"end":{"line":922,"column":47}},"378":{"start":{"line":926,"column":4},"end":{"line":926,"column":28}},"379":{"start":{"line":928,"column":4},"end":{"line":933,"column":7}},"380":{"start":{"line":944,"column":2},"end":{"line":982,"column":4}},"381":{"start":{"line":946,"column":4},"end":{"line":947,"column":72}},"382":{"start":{"line":947,"column":6},"end":{"line":947,"column":72}},"383":{"start":{"line":949,"column":4},"end":{"line":949,"column":18}},"384":{"start":{"line":951,"column":4},"end":{"line":951,"column":29}},"385":{"start":{"line":952,"column":4},"end":{"line":952,"column":32}},"386":{"start":{"line":954,"column":4},"end":{"line":981,"column":5}},"387":{"start":{"line":956,"column":6},"end":{"line":956,"column":28}},"388":{"start":{"line":957,"column":6},"end":{"line":957,"column":32}},"389":{"start":{"line":959,"column":6},"end":{"line":959,"column":16}},"390":{"start":{"line":961,"column":6},"end":{"line":974,"column":7}},"391":{"start":{"line":963,"column":8},"end":{"line":963,"column":31}},"392":{"start":{"line":965,"column":8},"end":{"line":969,"column":9}},"393":{"start":{"line":967,"column":10},"end":{"line":968,"column":36}},"394":{"start":{"line":968,"column":12},"end":{"line":968,"column":36}},"395":{"start":{"line":971,"column":8},"end":{"line":971,"column":46}},"396":{"start":{"line":973,"column":8},"end":{"line":973,"column":18}},"397":{"start":{"line":976,"column":6},"end":{"line":980,"column":7}},"398":{"start":{"line":978,"column":8},"end":{"line":979,"column":34}},"399":{"start":{"line":979,"column":10},"end":{"line":979,"column":34}},"400":{"start":{"line":989,"column":2},"end":{"line":991,"column":4}},"401":{"start":{"line":990,"column":4},"end":{"line":990,"column":76}},"402":{"start":{"line":998,"column":2},"end":{"line":1000,"column":4}},"403":{"start":{"line":999,"column":4},"end":{"line":999,"column":77}},"404":{"start":{"line":1002,"column":2},"end":{"line":1031,"column":4}},"405":{"start":{"line":1004,"column":4},"end":{"line":1004,"column":23}},"406":{"start":{"line":1005,"column":4},"end":{"line":1005,"column":26}},"407":{"start":{"line":1007,"column":4},"end":{"line":1007,"column":15}},"408":{"start":{"line":1009,"column":4},"end":{"line":1009,"column":13}},"409":{"start":{"line":1011,"column":4},"end":{"line":1015,"column":5}},"410":{"start":{"line":1012,"column":6},"end":{"line":1012,"column":16}},"411":{"start":{"line":1013,"column":6},"end":{"line":1014,"column":20}},"412":{"start":{"line":1014,"column":8},"end":{"line":1014,"column":20}},"413":{"start":{"line":1018,"column":4},"end":{"line":1029,"column":5}},"414":{"start":{"line":1020,"column":6},"end":{"line":1020,"column":22}},"415":{"start":{"line":1021,"column":6},"end":{"line":1021,"column":26}},"416":{"start":{"line":1023,"column":6},"end":{"line":1028,"column":7}},"417":{"start":{"line":1025,"column":8},"end":{"line":1025,"column":21}},"418":{"start":{"line":1027,"column":8},"end":{"line":1027,"column":76}},"419":{"start":{"line":1030,"column":4},"end":{"line":1030,"column":13}},"420":{"start":{"line":1042,"column":2},"end":{"line":1064,"column":4}},"421":{"start":{"line":1044,"column":4},"end":{"line":1044,"column":29}},"422":{"start":{"line":1045,"column":4},"end":{"line":1045,"column":32}},"423":{"start":{"line":1047,"column":4},"end":{"line":1047,"column":33}},"424":{"start":{"line":1049,"column":4},"end":{"line":1049,"column":162}},"425":{"start":{"line":1051,"column":4},"end":{"line":1062,"column":5}},"426":{"start":{"line":1053,"column":6},"end":{"line":1053,"column":28}},"427":{"start":{"line":1054,"column":6},"end":{"line":1054,"column":32}},"428":{"start":{"line":1056,"column":6},"end":{"line":1061,"column":7}},"429":{"start":{"line":1058,"column":8},"end":{"line":1058,"column":31}},"430":{"start":{"line":1060,"column":8},"end":{"line":1060,"column":164}},"431":{"start":{"line":1063,"column":4},"end":{"line":1063,"column":15}},"432":{"start":{"line":1071,"column":2},"end":{"line":1073,"column":4}},"433":{"start":{"line":1072,"column":4},"end":{"line":1072,"column":41}},"434":{"start":{"line":1080,"column":2},"end":{"line":1089,"column":4}},"435":{"start":{"line":1081,"column":4},"end":{"line":1088,"column":6}},"436":{"start":{"line":1099,"column":2},"end":{"line":1160,"column":4}},"437":{"start":{"line":1101,"column":4},"end":{"line":1113,"column":5}},"438":{"start":{"line":1103,"column":6},"end":{"line":1104,"column":25}},"439":{"start":{"line":1104,"column":8},"end":{"line":1104,"column":25}},"440":{"start":{"line":1106,"column":6},"end":{"line":1108,"column":7}},"441":{"start":{"line":1107,"column":8},"end":{"line":1107,"column":74}},"442":{"start":{"line":1112,"column":6},"end":{"line":1112,"column":12}},"443":{"start":{"line":1115,"column":4},"end":{"line":1115,"column":31}},"444":{"start":{"line":1116,"column":4},"end":{"line":1116,"column":30}},"445":{"start":{"line":1119,"column":4},"end":{"line":1119,"column":29}},"446":{"start":{"line":1120,"column":4},"end":{"line":1120,"column":32}},"447":{"start":{"line":1123,"column":4},"end":{"line":1123,"column":53}},"448":{"start":{"line":1126,"column":4},"end":{"line":1126,"column":20}},"449":{"start":{"line":1127,"column":4},"end":{"line":1127,"column":19}},"450":{"start":{"line":1128,"column":4},"end":{"line":1128,"column":17}},"451":{"start":{"line":1130,"column":4},"end":{"line":1130,"column":15}},"452":{"start":{"line":1132,"column":4},"end":{"line":1150,"column":5}},"453":{"start":{"line":1134,"column":6},"end":{"line":1134,"column":28}},"454":{"start":{"line":1135,"column":6},"end":{"line":1135,"column":32}},"455":{"start":{"line":1137,"column":6},"end":{"line":1149,"column":7}},"456":{"start":{"line":1139,"column":8},"end":{"line":1139,"column":31}},"457":{"start":{"line":1141,"column":8},"end":{"line":1148,"column":9}},"458":{"start":{"line":1143,"column":10},"end":{"line":1143,"column":39}},"459":{"start":{"line":1145,"column":10},"end":{"line":1145,"column":46}},"460":{"start":{"line":1147,"column":10},"end":{"line":1147,"column":16}},"461":{"start":{"line":1152,"column":4},"end":{"line":1152,"column":28}},"462":{"start":{"line":1154,"column":4},"end":{"line":1159,"column":7}},"463":{"start":{"line":1170,"column":2},"end":{"line":1172,"column":4}},"464":{"start":{"line":1171,"column":4},"end":{"line":1171,"column":34}},"465":{"start":{"line":1185,"column":2},"end":{"line":1313,"column":4}},"466":{"start":{"line":1186,"column":4},"end":{"line":1187,"column":60}},"467":{"start":{"line":1187,"column":6},"end":{"line":1187,"column":60}},"468":{"start":{"line":1188,"column":4},"end":{"line":1189,"column":66}},"469":{"start":{"line":1189,"column":6},"end":{"line":1189,"column":66}},"470":{"start":{"line":1192,"column":4},"end":{"line":1203,"column":7}},"471":{"start":{"line":1194,"column":6},"end":{"line":1197,"column":7}},"472":{"start":{"line":1196,"column":8},"end":{"line":1196,"column":25}},"473":{"start":{"line":1199,"column":6},"end":{"line":1201,"column":7}},"474":{"start":{"line":1200,"column":8},"end":{"line":1200,"column":65}},"475":{"start":{"line":1202,"column":6},"end":{"line":1202,"column":15}},"476":{"start":{"line":1206,"column":4},"end":{"line":1218,"column":5}},"477":{"start":{"line":1208,"column":6},"end":{"line":1209,"column":25}},"478":{"start":{"line":1209,"column":8},"end":{"line":1209,"column":25}},"479":{"start":{"line":1211,"column":6},"end":{"line":1213,"column":7}},"480":{"start":{"line":1212,"column":8},"end":{"line":1212,"column":74}},"481":{"start":{"line":1217,"column":6},"end":{"line":1217,"column":12}},"482":{"start":{"line":1221,"column":4},"end":{"line":1221,"column":25}},"483":{"start":{"line":1223,"column":4},"end":{"line":1223,"column":17}},"484":{"start":{"line":1225,"column":4},"end":{"line":1230,"column":5}},"485":{"start":{"line":1227,"column":6},"end":{"line":1227,"column":72}},"486":{"start":{"line":1229,"column":6},"end":{"line":1229,"column":40}},"487":{"start":{"line":1232,"column":4},"end":{"line":1232,"column":31}},"488":{"start":{"line":1233,"column":4},"end":{"line":1233,"column":30}},"489":{"start":{"line":1236,"column":4},"end":{"line":1236,"column":23}},"490":{"start":{"line":1237,"column":4},"end":{"line":1237,"column":26}},"491":{"start":{"line":1240,"column":4},"end":{"line":1240,"column":53}},"492":{"start":{"line":1243,"column":4},"end":{"line":1243,"column":15}},"493":{"start":{"line":1246,"column":4},"end":{"line":1278,"column":5}},"494":{"start":{"line":1248,"column":6},"end":{"line":1251,"column":7}},"495":{"start":{"line":1250,"column":8},"end":{"line":1250,"column":54}},"496":{"start":{"line":1253,"column":6},"end":{"line":1256,"column":8}},"497":{"start":{"line":1255,"column":8},"end":{"line":1255,"column":24}},"498":{"start":{"line":1258,"column":9},"end":{"line":1278,"column":5}},"499":{"start":{"line":1260,"column":6},"end":{"line":1260,"column":28}},"500":{"start":{"line":1262,"column":6},"end":{"line":1265,"column":7}},"501":{"start":{"line":1264,"column":8},"end":{"line":1264,"column":49}},"502":{"start":{"line":1267,"column":6},"end":{"line":1270,"column":8}},"503":{"start":{"line":1269,"column":8},"end":{"line":1269,"column":30}},"504":{"start":{"line":1274,"column":6},"end":{"line":1277,"column":8}},"505":{"start":{"line":1276,"column":8},"end":{"line":1276,"column":21}},"506":{"start":{"line":1281,"column":4},"end":{"line":1281,"column":20}},"507":{"start":{"line":1282,"column":4},"end":{"line":1282,"column":19}},"508":{"start":{"line":1283,"column":4},"end":{"line":1283,"column":17}},"509":{"start":{"line":1286,"column":4},"end":{"line":1303,"column":5}},"510":{"start":{"line":1288,"column":6},"end":{"line":1288,"column":30}},"511":{"start":{"line":1290,"column":6},"end":{"line":1290,"column":25}},"512":{"start":{"line":1292,"column":6},"end":{"line":1302,"column":7}},"513":{"start":{"line":1294,"column":8},"end":{"line":1294,"column":26}},"514":{"start":{"line":1296,"column":8},"end":{"line":1301,"column":9}},"515":{"start":{"line":1298,"column":10},"end":{"line":1298,"column":31}},"516":{"start":{"line":1300,"column":10},"end":{"line":1300,"column":25}},"517":{"start":{"line":1305,"column":4},"end":{"line":1305,"column":28}},"518":{"start":{"line":1307,"column":4},"end":{"line":1312,"column":7}},"519":{"start":{"line":1324,"column":2},"end":{"line":1341,"column":4}},"520":{"start":{"line":1326,"column":4},"end":{"line":1328,"column":5}},"521":{"start":{"line":1327,"column":6},"end":{"line":1327,"column":61}},"522":{"start":{"line":1330,"column":4},"end":{"line":1332,"column":5}},"523":{"start":{"line":1331,"column":6},"end":{"line":1331,"column":66}},"524":{"start":{"line":1334,"column":4},"end":{"line":1334,"column":36}},"525":{"start":{"line":1335,"column":4},"end":{"line":1335,"column":36}},"526":{"start":{"line":1338,"column":4},"end":{"line":1338,"column":86}},"527":{"start":{"line":1340,"column":4},"end":{"line":1340,"column":16}},"528":{"start":{"line":1352,"column":2},"end":{"line":1361,"column":4}},"529":{"start":{"line":1354,"column":4},"end":{"line":1354,"column":20}},"530":{"start":{"line":1355,"column":4},"end":{"line":1355,"column":24}},"531":{"start":{"line":1357,"column":4},"end":{"line":1360,"column":5}},"532":{"start":{"line":1359,"column":6},"end":{"line":1359,"column":36}},"533":{"start":{"line":1373,"column":2},"end":{"line":1423,"column":4}},"534":{"start":{"line":1375,"column":4},"end":{"line":1422,"column":5}},"535":{"start":{"line":1377,"column":6},"end":{"line":1377,"column":22}},"536":{"start":{"line":1378,"column":6},"end":{"line":1378,"column":26}},"537":{"start":{"line":1380,"column":6},"end":{"line":1380,"column":48}},"538":{"start":{"line":1382,"column":6},"end":{"line":1382,"column":48}},"539":{"start":{"line":1384,"column":6},"end":{"line":1393,"column":7}},"540":{"start":{"line":1386,"column":8},"end":{"line":1390,"column":9}},"541":{"start":{"line":1387,"column":10},"end":{"line":1387,"column":29}},"542":{"start":{"line":1388,"column":10},"end":{"line":1388,"column":34}},"543":{"start":{"line":1389,"column":10},"end":{"line":1389,"column":25}},"544":{"start":{"line":1392,"column":8},"end":{"line":1392,"column":17}},"545":{"start":{"line":1395,"column":6},"end":{"line":1408,"column":7}},"546":{"start":{"line":1397,"column":8},"end":{"line":1397,"column":49}},"547":{"start":{"line":1399,"column":8},"end":{"line":1399,"column":31}},"548":{"start":{"line":1400,"column":8},"end":{"line":1401,"column":35}},"549":{"start":{"line":1401,"column":10},"end":{"line":1401,"column":35}},"550":{"start":{"line":1403,"column":8},"end":{"line":1403,"column":48}},"551":{"start":{"line":1404,"column":8},"end":{"line":1405,"column":51}},"552":{"start":{"line":1405,"column":10},"end":{"line":1405,"column":51}},"553":{"start":{"line":1407,"column":8},"end":{"line":1407,"column":17}},"554":{"start":{"line":1410,"column":6},"end":{"line":1421,"column":7}},"555":{"start":{"line":1412,"column":8},"end":{"line":1412,"column":49}},"556":{"start":{"line":1414,"column":8},"end":{"line":1414,"column":31}},"557":{"start":{"line":1415,"column":8},"end":{"line":1416,"column":35}},"558":{"start":{"line":1416,"column":10},"end":{"line":1416,"column":35}},"559":{"start":{"line":1418,"column":8},"end":{"line":1418,"column":48}},"560":{"start":{"line":1419,"column":8},"end":{"line":1420,"column":51}},"561":{"start":{"line":1420,"column":10},"end":{"line":1420,"column":51}},"562":{"start":{"line":1426,"column":2},"end":{"line":1426,"column":45}},"563":{"start":{"line":1428,"column":2},"end":{"line":1428,"column":22}},"564":{"start":{"line":1431,"column":0},"end":{"line":1431,"column":30}},"565":{"start":{"line":1432,"column":0},"end":{"line":1432,"column":22}},"566":{"start":{"line":1433,"column":0},"end":{"line":1433,"column":26}},"567":{"start":{"line":1434,"column":0},"end":{"line":1434,"column":21}}},"branchMap":{"1":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":4},"end":{"line":28,"column":4}},{"start":{"line":28,"column":4},"end":{"line":28,"column":4}}]},"2":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":4},"end":{"line":30,"column":4}},{"start":{"line":30,"column":4},"end":{"line":30,"column":4}}]},"3":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":8},"end":{"line":30,"column":16}},{"start":{"line":30,"column":20},"end":{"line":30,"column":39}}]},"4":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":4},"end":{"line":33,"column":4}},{"start":{"line":33,"column":4},"end":{"line":33,"column":4}}]},"5":{"line":33,"type":"binary-expr","locations":[{"start":{"line":33,"column":8},"end":{"line":33,"column":12}},{"start":{"line":33,"column":16},"end":{"line":33,"column":38}}]},"6":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":9},"end":{"line":37,"column":9}},{"start":{"line":37,"column":9},"end":{"line":37,"column":9}}]},"7":{"line":37,"type":"binary-expr","locations":[{"start":{"line":37,"column":13},"end":{"line":37,"column":17}},{"start":{"line":37,"column":21},"end":{"line":37,"column":40}},{"start":{"line":37,"column":44},"end":{"line":37,"column":61}},{"start":{"line":37,"column":65},"end":{"line":37,"column":83}}]},"8":{"line":43,"type":"binary-expr","locations":[{"start":{"line":43,"column":23},"end":{"line":43,"column":31}},{"start":{"line":43,"column":35},"end":{"line":43,"column":48}}]},"9":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":9},"end":{"line":45,"column":9}},{"start":{"line":45,"column":9},"end":{"line":45,"column":9}}]},"10":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":9},"end":{"line":49,"column":9}},{"start":{"line":49,"column":9},"end":{"line":49,"column":9}}]},"11":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":4},"end":{"line":65,"column":4}},{"start":{"line":65,"column":4},"end":{"line":65,"column":4}}]},"12":{"line":67,"type":"cond-expr","locations":[{"start":{"line":67,"column":40},"end":{"line":67,"column":68}},{"start":{"line":67,"column":71},"end":{"line":67,"column":80}}]},"13":{"line":71,"type":"binary-expr","locations":[{"start":{"line":71,"column":25},"end":{"line":71,"column":33}},{"start":{"line":71,"column":37},"end":{"line":71,"column":53}}]},"14":{"line":75,"type":"binary-expr","locations":[{"start":{"line":75,"column":49},"end":{"line":75,"column":57}},{"start":{"line":75,"column":61},"end":{"line":75,"column":77}}]},"15":{"line":94,"type":"if","locations":[{"start":{"line":94,"column":4},"end":{"line":94,"column":4}},{"start":{"line":94,"column":4},"end":{"line":94,"column":4}}]},"16":{"line":96,"type":"binary-expr","locations":[{"start":{"line":96,"column":11},"end":{"line":96,"column":56}},{"start":{"line":96,"column":60},"end":{"line":96,"column":71}}]},"17":{"line":102,"type":"if","locations":[{"start":{"line":102,"column":4},"end":{"line":102,"column":4}},{"start":{"line":102,"column":4},"end":{"line":102,"column":4}}]},"18":{"line":113,"type":"if","locations":[{"start":{"line":113,"column":10},"end":{"line":113,"column":10}},{"start":{"line":113,"column":10},"end":{"line":113,"column":10}}]},"19":{"line":115,"type":"if","locations":[{"start":{"line":115,"column":12},"end":{"line":115,"column":12}},{"start":{"line":115,"column":12},"end":{"line":115,"column":12}}]},"20":{"line":115,"type":"binary-expr","locations":[{"start":{"line":115,"column":16},"end":{"line":115,"column":23}},{"start":{"line":115,"column":27},"end":{"line":115,"column":47}}]},"21":{"line":118,"type":"if","locations":[{"start":{"line":118,"column":12},"end":{"line":118,"column":12}},{"start":{"line":118,"column":12},"end":{"line":118,"column":12}}]},"22":{"line":122,"type":"if","locations":[{"start":{"line":122,"column":14},"end":{"line":122,"column":14}},{"start":{"line":122,"column":14},"end":{"line":122,"column":14}}]},"23":{"line":132,"type":"if","locations":[{"start":{"line":132,"column":12},"end":{"line":132,"column":12}},{"start":{"line":132,"column":12},"end":{"line":132,"column":12}}]},"24":{"line":132,"type":"binary-expr","locations":[{"start":{"line":132,"column":16},"end":{"line":132,"column":23}},{"start":{"line":132,"column":27},"end":{"line":132,"column":38}}]},"25":{"line":135,"type":"if","locations":[{"start":{"line":135,"column":12},"end":{"line":135,"column":12}},{"start":{"line":135,"column":12},"end":{"line":135,"column":12}}]},"26":{"line":212,"type":"cond-expr","locations":[{"start":{"line":212,"column":42},"end":{"line":212,"column":79}},{"start":{"line":212,"column":83},"end":{"line":212,"column":84}}]},"27":{"line":212,"type":"binary-expr","locations":[{"start":{"line":212,"column":11},"end":{"line":212,"column":21}},{"start":{"line":212,"column":25},"end":{"line":212,"column":38}}]},"28":{"line":230,"type":"if","locations":[{"start":{"line":230,"column":4},"end":{"line":230,"column":4}},{"start":{"line":230,"column":4},"end":{"line":230,"column":4}}]},"29":{"line":234,"type":"switch","locations":[{"start":{"line":235,"column":6},"end":{"line":236,"column":39}},{"start":{"line":239,"column":6},"end":{"line":239,"column":13}},{"start":{"line":240,"column":6},"end":{"line":241,"column":66}},{"start":{"line":243,"column":6},"end":{"line":244,"column":59}}]},"30":{"line":250,"type":"if","locations":[{"start":{"line":250,"column":4},"end":{"line":250,"column":4}},{"start":{"line":250,"column":4},"end":{"line":250,"column":4}}]},"31":{"line":250,"type":"binary-expr","locations":[{"start":{"line":250,"column":8},"end":{"line":250,"column":12}},{"start":{"line":250,"column":16},"end":{"line":250,"column":36}}]},"32":{"line":255,"type":"if","locations":[{"start":{"line":255,"column":4},"end":{"line":255,"column":4}},{"start":{"line":255,"column":4},"end":{"line":255,"column":4}}]},"33":{"line":261,"type":"if","locations":[{"start":{"line":261,"column":4},"end":{"line":261,"column":4}},{"start":{"line":261,"column":4},"end":{"line":261,"column":4}}]},"34":{"line":298,"type":"cond-expr","locations":[{"start":{"line":298,"column":27},"end":{"line":298,"column":29}},{"start":{"line":298,"column":32},"end":{"line":298,"column":41}}]},"35":{"line":311,"type":"if","locations":[{"start":{"line":311,"column":8},"end":{"line":311,"column":8}},{"start":{"line":311,"column":8},"end":{"line":311,"column":8}}]},"36":{"line":315,"type":"if","locations":[{"start":{"line":315,"column":10},"end":{"line":315,"column":10}},{"start":{"line":315,"column":10},"end":{"line":315,"column":10}}]},"37":{"line":335,"type":"if","locations":[{"start":{"line":335,"column":4},"end":{"line":335,"column":4}},{"start":{"line":335,"column":4},"end":{"line":335,"column":4}}]},"38":{"line":335,"type":"binary-expr","locations":[{"start":{"line":335,"column":8},"end":{"line":335,"column":14}},{"start":{"line":335,"column":18},"end":{"line":335,"column":40}}]},"39":{"line":345,"type":"if","locations":[{"start":{"line":345,"column":4},"end":{"line":345,"column":4}},{"start":{"line":345,"column":4},"end":{"line":345,"column":4}}]},"40":{"line":345,"type":"binary-expr","locations":[{"start":{"line":345,"column":8},"end":{"line":345,"column":17}},{"start":{"line":345,"column":21},"end":{"line":345,"column":48}}]},"41":{"line":357,"type":"if","locations":[{"start":{"line":357,"column":4},"end":{"line":357,"column":4}},{"start":{"line":357,"column":4},"end":{"line":357,"column":4}}]},"42":{"line":359,"type":"if","locations":[{"start":{"line":359,"column":6},"end":{"line":359,"column":6}},{"start":{"line":359,"column":6},"end":{"line":359,"column":6}}]},"43":{"line":367,"type":"if","locations":[{"start":{"line":367,"column":6},"end":{"line":367,"column":6}},{"start":{"line":367,"column":6},"end":{"line":367,"column":6}}]},"44":{"line":367,"type":"binary-expr","locations":[{"start":{"line":367,"column":10},"end":{"line":367,"column":28}},{"start":{"line":367,"column":32},"end":{"line":367,"column":50}}]},"45":{"line":372,"type":"if","locations":[{"start":{"line":372,"column":6},"end":{"line":372,"column":6}},{"start":{"line":372,"column":6},"end":{"line":372,"column":6}}]},"46":{"line":376,"type":"binary-expr","locations":[{"start":{"line":376,"column":15},"end":{"line":376,"column":29}},{"start":{"line":376,"column":33},"end":{"line":376,"column":47}}]},"47":{"line":388,"type":"if","locations":[{"start":{"line":388,"column":6},"end":{"line":388,"column":6}},{"start":{"line":388,"column":6},"end":{"line":388,"column":6}}]},"48":{"line":421,"type":"if","locations":[{"start":{"line":421,"column":4},"end":{"line":421,"column":4}},{"start":{"line":421,"column":4},"end":{"line":421,"column":4}}]},"49":{"line":423,"type":"if","locations":[{"start":{"line":423,"column":4},"end":{"line":423,"column":4}},{"start":{"line":423,"column":4},"end":{"line":423,"column":4}}]},"50":{"line":427,"type":"if","locations":[{"start":{"line":427,"column":4},"end":{"line":427,"column":4}},{"start":{"line":427,"column":4},"end":{"line":427,"column":4}}]},"51":{"line":441,"type":"if","locations":[{"start":{"line":441,"column":4},"end":{"line":441,"column":4}},{"start":{"line":441,"column":4},"end":{"line":441,"column":4}}]},"52":{"line":441,"type":"binary-expr","locations":[{"start":{"line":441,"column":8},"end":{"line":441,"column":28}},{"start":{"line":441,"column":32},"end":{"line":441,"column":52}}]},"53":{"line":458,"type":"if","locations":[{"start":{"line":458,"column":4},"end":{"line":458,"column":4}},{"start":{"line":458,"column":4},"end":{"line":458,"column":4}}]},"54":{"line":460,"type":"if","locations":[{"start":{"line":460,"column":4},"end":{"line":460,"column":4}},{"start":{"line":460,"column":4},"end":{"line":460,"column":4}}]},"55":{"line":464,"type":"if","locations":[{"start":{"line":464,"column":4},"end":{"line":464,"column":4}},{"start":{"line":464,"column":4},"end":{"line":464,"column":4}}]},"56":{"line":480,"type":"if","locations":[{"start":{"line":480,"column":4},"end":{"line":480,"column":4}},{"start":{"line":480,"column":4},"end":{"line":480,"column":4}}]},"57":{"line":482,"type":"binary-expr","locations":[{"start":{"line":482,"column":11},"end":{"line":482,"column":68}},{"start":{"line":482,"column":72},"end":{"line":482,"column":83}}]},"58":{"line":488,"type":"if","locations":[{"start":{"line":488,"column":4},"end":{"line":488,"column":4}},{"start":{"line":488,"column":4},"end":{"line":488,"column":4}}]},"59":{"line":488,"type":"binary-expr","locations":[{"start":{"line":488,"column":8},"end":{"line":488,"column":20}},{"start":{"line":488,"column":24},"end":{"line":488,"column":39}}]},"60":{"line":503,"type":"if","locations":[{"start":{"line":503,"column":4},"end":{"line":503,"column":4}},{"start":{"line":503,"column":4},"end":{"line":503,"column":4}}]},"61":{"line":503,"type":"binary-expr","locations":[{"start":{"line":503,"column":8},"end":{"line":503,"column":28}},{"start":{"line":503,"column":32},"end":{"line":503,"column":52}}]},"62":{"line":505,"type":"if","locations":[{"start":{"line":505,"column":6},"end":{"line":505,"column":6}},{"start":{"line":505,"column":6},"end":{"line":505,"column":6}}]},"63":{"line":524,"type":"if","locations":[{"start":{"line":524,"column":4},"end":{"line":524,"column":4}},{"start":{"line":524,"column":4},"end":{"line":524,"column":4}}]},"64":{"line":529,"type":"if","locations":[{"start":{"line":529,"column":6},"end":{"line":529,"column":6}},{"start":{"line":529,"column":6},"end":{"line":529,"column":6}}]},"65":{"line":570,"type":"if","locations":[{"start":{"line":570,"column":4},"end":{"line":570,"column":4}},{"start":{"line":570,"column":4},"end":{"line":570,"column":4}}]},"66":{"line":572,"type":"if","locations":[{"start":{"line":572,"column":4},"end":{"line":572,"column":4}},{"start":{"line":572,"column":4},"end":{"line":572,"column":4}}]},"67":{"line":577,"type":"if","locations":[{"start":{"line":577,"column":6},"end":{"line":577,"column":6}},{"start":{"line":577,"column":6},"end":{"line":577,"column":6}}]},"68":{"line":577,"type":"binary-expr","locations":[{"start":{"line":577,"column":10},"end":{"line":577,"column":33}},{"start":{"line":577,"column":37},"end":{"line":577,"column":61}},{"start":{"line":577,"column":65},"end":{"line":577,"column":74}}]},"69":{"line":584,"type":"cond-expr","locations":[{"start":{"line":584,"column":19},"end":{"line":584,"column":31}},{"start":{"line":584,"column":34},"end":{"line":584,"column":38}}]},"70":{"line":591,"type":"binary-expr","locations":[{"start":{"line":591,"column":16},"end":{"line":591,"column":28}},{"start":{"line":591,"column":32},"end":{"line":591,"column":33}}]},"71":{"line":598,"type":"if","locations":[{"start":{"line":598,"column":4},"end":{"line":598,"column":4}},{"start":{"line":598,"column":4},"end":{"line":598,"column":4}}]},"72":{"line":600,"type":"binary-expr","locations":[{"start":{"line":600,"column":11},"end":{"line":600,"column":72}},{"start":{"line":600,"column":76},"end":{"line":600,"column":87}}]},"73":{"line":617,"type":"if","locations":[{"start":{"line":617,"column":4},"end":{"line":617,"column":4}},{"start":{"line":617,"column":4},"end":{"line":617,"column":4}}]},"74":{"line":623,"type":"if","locations":[{"start":{"line":623,"column":8},"end":{"line":623,"column":8}},{"start":{"line":623,"column":8},"end":{"line":623,"column":8}}]},"75":{"line":636,"type":"if","locations":[{"start":{"line":636,"column":9},"end":{"line":636,"column":9}},{"start":{"line":636,"column":9},"end":{"line":636,"column":9}}]},"76":{"line":647,"type":"if","locations":[{"start":{"line":647,"column":4},"end":{"line":647,"column":4}},{"start":{"line":647,"column":4},"end":{"line":647,"column":4}}]},"77":{"line":649,"type":"if","locations":[{"start":{"line":649,"column":6},"end":{"line":649,"column":6}},{"start":{"line":649,"column":6},"end":{"line":649,"column":6}}]},"78":{"line":674,"type":"if","locations":[{"start":{"line":674,"column":9},"end":{"line":674,"column":9}},{"start":{"line":674,"column":9},"end":{"line":674,"column":9}}]},"79":{"line":689,"type":"if","locations":[{"start":{"line":689,"column":10},"end":{"line":689,"column":10}},{"start":{"line":689,"column":10},"end":{"line":689,"column":10}}]},"80":{"line":726,"type":"if","locations":[{"start":{"line":726,"column":4},"end":{"line":726,"column":4}},{"start":{"line":726,"column":4},"end":{"line":726,"column":4}}]},"81":{"line":728,"type":"if","locations":[{"start":{"line":728,"column":4},"end":{"line":728,"column":4}},{"start":{"line":728,"column":4},"end":{"line":728,"column":4}}]},"82":{"line":733,"type":"if","locations":[{"start":{"line":733,"column":6},"end":{"line":733,"column":6}},{"start":{"line":733,"column":6},"end":{"line":733,"column":6}}]},"83":{"line":733,"type":"binary-expr","locations":[{"start":{"line":733,"column":10},"end":{"line":733,"column":33}},{"start":{"line":733,"column":37},"end":{"line":733,"column":61}},{"start":{"line":733,"column":65},"end":{"line":733,"column":74}}]},"84":{"line":740,"type":"if","locations":[{"start":{"line":740,"column":4},"end":{"line":740,"column":4}},{"start":{"line":740,"column":4},"end":{"line":740,"column":4}}]},"85":{"line":745,"type":"cond-expr","locations":[{"start":{"line":745,"column":19},"end":{"line":745,"column":31}},{"start":{"line":745,"column":34},"end":{"line":745,"column":38}}]},"86":{"line":748,"type":"if","locations":[{"start":{"line":748,"column":4},"end":{"line":748,"column":4}},{"start":{"line":748,"column":4},"end":{"line":748,"column":4}}]},"87":{"line":748,"type":"binary-expr","locations":[{"start":{"line":748,"column":7},"end":{"line":748,"column":32}},{"start":{"line":748,"column":36},"end":{"line":748,"column":61}}]},"88":{"line":812,"type":"cond-expr","locations":[{"start":{"line":812,"column":29},"end":{"line":812,"column":55}},{"start":{"line":812,"column":58},"end":{"line":812,"column":67}}]},"89":{"line":843,"type":"if","locations":[{"start":{"line":843,"column":4},"end":{"line":843,"column":4}},{"start":{"line":843,"column":4},"end":{"line":843,"column":4}}]},"90":{"line":874,"type":"if","locations":[{"start":{"line":874,"column":4},"end":{"line":874,"column":4}},{"start":{"line":874,"column":4},"end":{"line":874,"column":4}}]},"91":{"line":876,"type":"binary-expr","locations":[{"start":{"line":876,"column":11},"end":{"line":876,"column":72}},{"start":{"line":876,"column":76},"end":{"line":876,"column":87}}]},"92":{"line":886,"type":"if","locations":[{"start":{"line":886,"column":6},"end":{"line":886,"column":6}},{"start":{"line":886,"column":6},"end":{"line":886,"column":6}}]},"93":{"line":907,"type":"if","locations":[{"start":{"line":907,"column":8},"end":{"line":907,"column":8}},{"start":{"line":907,"column":8},"end":{"line":907,"column":8}}]},"94":{"line":907,"type":"binary-expr","locations":[{"start":{"line":907,"column":12},"end":{"line":907,"column":23}},{"start":{"line":907,"column":27},"end":{"line":907,"column":38}}]},"95":{"line":909,"type":"if","locations":[{"start":{"line":909,"column":10},"end":{"line":909,"column":10}},{"start":{"line":909,"column":10},"end":{"line":909,"column":10}}]},"96":{"line":920,"type":"if","locations":[{"start":{"line":920,"column":6},"end":{"line":920,"column":6}},{"start":{"line":920,"column":6},"end":{"line":920,"column":6}}]},"97":{"line":946,"type":"if","locations":[{"start":{"line":946,"column":4},"end":{"line":946,"column":4}},{"start":{"line":946,"column":4},"end":{"line":946,"column":4}}]},"98":{"line":965,"type":"if","locations":[{"start":{"line":965,"column":8},"end":{"line":965,"column":8}},{"start":{"line":965,"column":8},"end":{"line":965,"column":8}}]},"99":{"line":976,"type":"if","locations":[{"start":{"line":976,"column":6},"end":{"line":976,"column":6}},{"start":{"line":976,"column":6},"end":{"line":976,"column":6}}]},"100":{"line":1027,"type":"cond-expr","locations":[{"start":{"line":1027,"column":28},"end":{"line":1027,"column":70}},{"start":{"line":1027,"column":74},"end":{"line":1027,"column":75}}]},"101":{"line":1027,"type":"cond-expr","locations":[{"start":{"line":1027,"column":35},"end":{"line":1027,"column":58}},{"start":{"line":1027,"column":61},"end":{"line":1027,"column":70}}]},"102":{"line":1060,"type":"cond-expr","locations":[{"start":{"line":1060,"column":117},"end":{"line":1060,"column":156}},{"start":{"line":1060,"column":159},"end":{"line":1060,"column":162}}]},"103":{"line":1101,"type":"if","locations":[{"start":{"line":1101,"column":4},"end":{"line":1101,"column":4}},{"start":{"line":1101,"column":4},"end":{"line":1101,"column":4}}]},"104":{"line":1103,"type":"if","locations":[{"start":{"line":1103,"column":6},"end":{"line":1103,"column":6}},{"start":{"line":1103,"column":6},"end":{"line":1103,"column":6}}]},"105":{"line":1106,"type":"if","locations":[{"start":{"line":1106,"column":6},"end":{"line":1106,"column":6}},{"start":{"line":1106,"column":6},"end":{"line":1106,"column":6}}]},"106":{"line":1106,"type":"binary-expr","locations":[{"start":{"line":1106,"column":10},"end":{"line":1106,"column":22}},{"start":{"line":1106,"column":26},"end":{"line":1106,"column":39}}]},"107":{"line":1115,"type":"cond-expr","locations":[{"start":{"line":1115,"column":25},"end":{"line":1115,"column":26}},{"start":{"line":1115,"column":29},"end":{"line":1115,"column":30}}]},"108":{"line":1116,"type":"cond-expr","locations":[{"start":{"line":1116,"column":23},"end":{"line":1116,"column":25}},{"start":{"line":1116,"column":28},"end":{"line":1116,"column":29}}]},"109":{"line":1132,"type":"binary-expr","locations":[{"start":{"line":1132,"column":25},"end":{"line":1132,"column":36}},{"start":{"line":1132,"column":40},"end":{"line":1132,"column":57}}]},"110":{"line":1141,"type":"if","locations":[{"start":{"line":1141,"column":8},"end":{"line":1141,"column":8}},{"start":{"line":1141,"column":8},"end":{"line":1141,"column":8}}]},"111":{"line":1186,"type":"if","locations":[{"start":{"line":1186,"column":4},"end":{"line":1186,"column":4}},{"start":{"line":1186,"column":4},"end":{"line":1186,"column":4}}]},"112":{"line":1188,"type":"if","locations":[{"start":{"line":1188,"column":4},"end":{"line":1188,"column":4}},{"start":{"line":1188,"column":4},"end":{"line":1188,"column":4}}]},"113":{"line":1194,"type":"if","locations":[{"start":{"line":1194,"column":6},"end":{"line":1194,"column":6}},{"start":{"line":1194,"column":6},"end":{"line":1194,"column":6}}]},"114":{"line":1194,"type":"binary-expr","locations":[{"start":{"line":1194,"column":10},"end":{"line":1194,"column":11}},{"start":{"line":1194,"column":15},"end":{"line":1194,"column":37}}]},"115":{"line":1199,"type":"if","locations":[{"start":{"line":1199,"column":6},"end":{"line":1199,"column":6}},{"start":{"line":1199,"column":6},"end":{"line":1199,"column":6}}]},"116":{"line":1199,"type":"binary-expr","locations":[{"start":{"line":1199,"column":10},"end":{"line":1199,"column":22}},{"start":{"line":1199,"column":26},"end":{"line":1199,"column":39}},{"start":{"line":1199,"column":43},"end":{"line":1199,"column":48}}]},"117":{"line":1206,"type":"if","locations":[{"start":{"line":1206,"column":4},"end":{"line":1206,"column":4}},{"start":{"line":1206,"column":4},"end":{"line":1206,"column":4}}]},"118":{"line":1208,"type":"if","locations":[{"start":{"line":1208,"column":6},"end":{"line":1208,"column":6}},{"start":{"line":1208,"column":6},"end":{"line":1208,"column":6}}]},"119":{"line":1211,"type":"if","locations":[{"start":{"line":1211,"column":6},"end":{"line":1211,"column":6}},{"start":{"line":1211,"column":6},"end":{"line":1211,"column":6}}]},"120":{"line":1211,"type":"binary-expr","locations":[{"start":{"line":1211,"column":10},"end":{"line":1211,"column":22}},{"start":{"line":1211,"column":26},"end":{"line":1211,"column":39}}]},"121":{"line":1225,"type":"if","locations":[{"start":{"line":1225,"column":4},"end":{"line":1225,"column":4}},{"start":{"line":1225,"column":4},"end":{"line":1225,"column":4}}]},"122":{"line":1227,"type":"binary-expr","locations":[{"start":{"line":1227,"column":11},"end":{"line":1227,"column":56}},{"start":{"line":1227,"column":60},"end":{"line":1227,"column":71}}]},"123":{"line":1232,"type":"cond-expr","locations":[{"start":{"line":1232,"column":25},"end":{"line":1232,"column":26}},{"start":{"line":1232,"column":29},"end":{"line":1232,"column":30}}]},"124":{"line":1233,"type":"cond-expr","locations":[{"start":{"line":1233,"column":23},"end":{"line":1233,"column":25}},{"start":{"line":1233,"column":28},"end":{"line":1233,"column":29}}]},"125":{"line":1246,"type":"if","locations":[{"start":{"line":1246,"column":4},"end":{"line":1246,"column":4}},{"start":{"line":1246,"column":4},"end":{"line":1246,"column":4}}]},"126":{"line":1248,"type":"if","locations":[{"start":{"line":1248,"column":6},"end":{"line":1248,"column":6}},{"start":{"line":1248,"column":6},"end":{"line":1248,"column":6}}]},"127":{"line":1258,"type":"if","locations":[{"start":{"line":1258,"column":9},"end":{"line":1258,"column":9}},{"start":{"line":1258,"column":9},"end":{"line":1258,"column":9}}]},"128":{"line":1258,"type":"binary-expr","locations":[{"start":{"line":1258,"column":13},"end":{"line":1258,"column":18}},{"start":{"line":1258,"column":22},"end":{"line":1258,"column":45}}]},"129":{"line":1262,"type":"if","locations":[{"start":{"line":1262,"column":6},"end":{"line":1262,"column":6}},{"start":{"line":1262,"column":6},"end":{"line":1262,"column":6}}]},"130":{"line":1262,"type":"binary-expr","locations":[{"start":{"line":1262,"column":10},"end":{"line":1262,"column":25}},{"start":{"line":1262,"column":29},"end":{"line":1262,"column":40}}]},"131":{"line":1292,"type":"if","locations":[{"start":{"line":1292,"column":6},"end":{"line":1292,"column":6}},{"start":{"line":1292,"column":6},"end":{"line":1292,"column":6}}]},"132":{"line":1292,"type":"binary-expr","locations":[{"start":{"line":1292,"column":10},"end":{"line":1292,"column":16}},{"start":{"line":1292,"column":20},"end":{"line":1292,"column":25}}]},"133":{"line":1296,"type":"if","locations":[{"start":{"line":1296,"column":8},"end":{"line":1296,"column":8}},{"start":{"line":1296,"column":8},"end":{"line":1296,"column":8}}]},"134":{"line":1326,"type":"if","locations":[{"start":{"line":1326,"column":4},"end":{"line":1326,"column":4}},{"start":{"line":1326,"column":4},"end":{"line":1326,"column":4}}]},"135":{"line":1326,"type":"binary-expr","locations":[{"start":{"line":1326,"column":8},"end":{"line":1326,"column":20}},{"start":{"line":1326,"column":24},"end":{"line":1326,"column":37}},{"start":{"line":1326,"column":41},"end":{"line":1326,"column":53}},{"start":{"line":1326,"column":57},"end":{"line":1326,"column":70}}]},"136":{"line":1330,"type":"if","locations":[{"start":{"line":1330,"column":4},"end":{"line":1330,"column":4}},{"start":{"line":1330,"column":4},"end":{"line":1330,"column":4}}]},"137":{"line":1384,"type":"if","locations":[{"start":{"line":1384,"column":6},"end":{"line":1384,"column":6}},{"start":{"line":1384,"column":6},"end":{"line":1384,"column":6}}]},"138":{"line":1384,"type":"binary-expr","locations":[{"start":{"line":1384,"column":10},"end":{"line":1384,"column":17}},{"start":{"line":1384,"column":21},"end":{"line":1384,"column":28}},{"start":{"line":1384,"column":32},"end":{"line":1384,"column":47}},{"start":{"line":1384,"column":51},"end":{"line":1384,"column":66}}]},"139":{"line":1386,"type":"if","locations":[{"start":{"line":1386,"column":8},"end":{"line":1386,"column":8}},{"start":{"line":1386,"column":8},"end":{"line":1386,"column":8}}]},"140":{"line":1395,"type":"if","locations":[{"start":{"line":1395,"column":6},"end":{"line":1395,"column":6}},{"start":{"line":1395,"column":6},"end":{"line":1395,"column":6}}]},"141":{"line":1395,"type":"binary-expr","locations":[{"start":{"line":1395,"column":10},"end":{"line":1395,"column":17}},{"start":{"line":1395,"column":21},"end":{"line":1395,"column":36}},{"start":{"line":1395,"column":41},"end":{"line":1395,"column":49}},{"start":{"line":1395,"column":53},"end":{"line":1395,"column":68}}]},"142":{"line":1397,"type":"cond-expr","locations":[{"start":{"line":1397,"column":26},"end":{"line":1397,"column":36}},{"start":{"line":1397,"column":39},"end":{"line":1397,"column":48}}]},"143":{"line":1400,"type":"if","locations":[{"start":{"line":1400,"column":8},"end":{"line":1400,"column":8}},{"start":{"line":1400,"column":8},"end":{"line":1400,"column":8}}]},"144":{"line":1403,"type":"cond-expr","locations":[{"start":{"line":1403,"column":32},"end":{"line":1403,"column":38}},{"start":{"line":1403,"column":41},"end":{"line":1403,"column":43}}]},"145":{"line":1404,"type":"if","locations":[{"start":{"line":1404,"column":8},"end":{"line":1404,"column":8}},{"start":{"line":1404,"column":8},"end":{"line":1404,"column":8}}]},"146":{"line":1405,"type":"cond-expr","locations":[{"start":{"line":1405,"column":35},"end":{"line":1405,"column":41}},{"start":{"line":1405,"column":44},"end":{"line":1405,"column":46}}]},"147":{"line":1410,"type":"if","locations":[{"start":{"line":1410,"column":6},"end":{"line":1410,"column":6}},{"start":{"line":1410,"column":6},"end":{"line":1410,"column":6}}]},"148":{"line":1410,"type":"binary-expr","locations":[{"start":{"line":1410,"column":10},"end":{"line":1410,"column":17}},{"start":{"line":1410,"column":21},"end":{"line":1410,"column":36}},{"start":{"line":1410,"column":41},"end":{"line":1410,"column":49}},{"start":{"line":1410,"column":53},"end":{"line":1410,"column":68}}]},"149":{"line":1412,"type":"cond-expr","locations":[{"start":{"line":1412,"column":26},"end":{"line":1412,"column":36}},{"start":{"line":1412,"column":39},"end":{"line":1412,"column":48}}]},"150":{"line":1415,"type":"if","locations":[{"start":{"line":1415,"column":8},"end":{"line":1415,"column":8}},{"start":{"line":1415,"column":8},"end":{"line":1415,"column":8}}]},"151":{"line":1418,"type":"cond-expr","locations":[{"start":{"line":1418,"column":32},"end":{"line":1418,"column":38}},{"start":{"line":1418,"column":41},"end":{"line":1418,"column":43}}]},"152":{"line":1419,"type":"if","locations":[{"start":{"line":1419,"column":8},"end":{"line":1419,"column":8}},{"start":{"line":1419,"column":8},"end":{"line":1419,"column":8}}]},"153":{"line":1420,"type":"cond-expr","locations":[{"start":{"line":1420,"column":35},"end":{"line":1420,"column":41}},{"start":{"line":1420,"column":44},"end":{"line":1420,"column":46}}]}},"code":["'use strict';","","var util = require('../../utils/index');","var DimensionError = require('../../error/DimensionError');","","var array = util.array;","var object = util.object;","var string = util.string;","var number = util.number;","","var isArray = Array.isArray;","var isNumber = number.isNumber;","var isInteger = number.isInteger;","var isString = string.isString;","","var validateIndex = array.validateIndex;","","function factory (type, config, load, typed) {","  var Matrix = load(require('./Matrix')); // force loading Matrix (do not use via type.Matrix)","  var equalScalar = load(require('../../function/relational/equalScalar'));","","  /**","   * Sparse Matrix implementation. This type implements a Compressed Column Storage format","   * for sparse matrices.","   * @class SparseMatrix","   */","  function SparseMatrix(data, datatype) {","    if (!(this instanceof SparseMatrix))","      throw new SyntaxError('Constructor must be called with the new operator');","    if (datatype && !isString(datatype))","      throw new Error('Invalid datatype: ' + datatype);","    ","    if (data && data.isMatrix === true) {","      // create from matrix","      _createFromMatrix(this, data, datatype);","    }","    else if (data && isArray(data.index) && isArray(data.ptr) && isArray(data.size)) {","      // initialize fields","      this._values = data.values;","      this._index = data.index;","      this._ptr = data.ptr;","      this._size = data.size;","      this._datatype = datatype || data.datatype;","    }","    else if (isArray(data)) {","      // create from array","      _createFromArray(this, data, datatype);","    }","    else if (data) {","      // unsupported type","      throw new TypeError('Unsupported type of data (' + util.types.type(data) + ')');","    }","    else {","      // nothing provided","      this._values = [];","      this._index = [];","      this._ptr = [0];","      this._size = [0, 0];","      this._datatype = datatype;","    }","  }","  ","  var _createFromMatrix = function (matrix, source, datatype) {","    // check matrix type","    if (source.type === 'SparseMatrix') {","      // clone arrays","      matrix._values = source._values ? object.clone(source._values) : undefined;","      matrix._index = object.clone(source._index);","      matrix._ptr = object.clone(source._ptr);","      matrix._size = object.clone(source._size);","      matrix._datatype = datatype || source._datatype;","    }","    else {","      // build from matrix data","      _createFromArray(matrix, source.valueOf(), datatype || source._datatype);","    }","  };","  ","  var _createFromArray = function (matrix, data, datatype) {","    // initialize fields","    matrix._values = [];","    matrix._index = [];","    matrix._ptr = [];","    matrix._datatype = datatype;","    // discover rows & columns, do not use math.size() to avoid looping array twice","    var rows = data.length;","    var columns = 0;","    ","    // equal signature to use","    var eq = equalScalar;","    // zero value","    var zero = 0;","    ","    if (isString(datatype)) {","      // find signature that matches (datatype, datatype)","      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar;","      // convert 0 to the same datatype","      zero = typed.convert(0, datatype);","    }","","    // check we have rows (empty array)","    if (rows > 0) {","      // column index","      var j = 0;","      do {","        // store pointer to values index","        matrix._ptr.push(matrix._index.length);","        // loop rows","        for (var i = 0; i < rows; i++) {","          // current row","          var row = data[i];","          // check row is an array","          if (isArray(row)) {","            // update columns if needed (only on first column)","            if (j === 0 && columns < row.length)","              columns = row.length;","            // check row has column","            if (j < row.length) {","              // value","              var v = row[j];","              // check value != 0","              if (!eq(v, zero)) {","                // store value","                matrix._values.push(v);","                // index","                matrix._index.push(i);","              }","            }","          }","          else {","            // update columns if needed (only on first column)","            if (j === 0 && columns < 1)","              columns = 1;","            // check value != 0 (row is a scalar)","            if (!eq(row, zero)) {","              // store value","              matrix._values.push(row);","              // index","              matrix._index.push(i);","            }","          }","        }","        // increment index","        j++;      ","      }","      while (j < columns);","    }","    // store number of values in ptr","    matrix._ptr.push(matrix._index.length);","    // size","    matrix._size = [rows, columns];","  };","  ","  SparseMatrix.prototype = new Matrix();","","  /**","   * Attach type information","   */","  SparseMatrix.prototype.type = 'SparseMatrix';","  SparseMatrix.prototype.isSparseMatrix = true;","","  /**","   * Get the storage format used by the matrix.","   *","   * Usage:","   *     var format = matrix.storage()                   // retrieve storage format","   *","   * @memberof SparseMatrix","   * @return {string}           The storage format.","   */","  SparseMatrix.prototype.storage = function () {","    return 'sparse';","  };","","  /**","   * Get the datatype of the data stored in the matrix.","   *","   * Usage:","   *     var format = matrix.datatype()                   // retrieve matrix datatype","   *","   * @memberof SparseMatrix","   * @return {string}           The datatype.","   */","  SparseMatrix.prototype.datatype = function () {","    return this._datatype;","  };","","  /**","   * Create a new SparseMatrix","   * @memberof SparseMatrix","   * @param {Array} data","   * @param {string} [datatype]","   */","  SparseMatrix.prototype.create = function (data, datatype) {","    return new SparseMatrix(data, datatype);","  };","","  /**","   * Get the matrix density.","   *","   * Usage:","   *     var density = matrix.density()                   // retrieve matrix density","   *","   * @memberof SparseMatrix","   * @return {number}           The matrix density.","   */","  SparseMatrix.prototype.density = function () {","    // rows & columns","    var rows = this._size[0];","    var columns = this._size[1];","    // calculate density","    return rows !== 0 && columns !== 0 ? (this._index.length / (rows * columns)) : 0;","  };","  ","  /**","   * Get a subset of the matrix, or replace a subset of the matrix.","   *","   * Usage:","   *     var subset = matrix.subset(index)               // retrieve subset","   *     var value = matrix.subset(index, replacement)   // replace subset","   *","   * @memberof SparseMatrix","   * @param {Index} index","   * @param {Array | Maytrix | *} [replacement]","   * @param {*} [defaultValue=0]      Default value, filled in on new entries when","   *                                  the matrix is resized. If not provided,","   *                                  new matrix elements will be filled with zeros.","   */","  SparseMatrix.prototype.subset = function (index, replacement, defaultValue) { // check it is a pattern matrix","    if (!this._values)","      throw new Error('Cannot invoke subset on a Pattern only matrix');","","    // check arguments","    switch (arguments.length) {","      case 1:","        return _getsubset(this, index);","","        // intentional fall through","      case 2:","      case 3:","        return _setsubset(this, index, replacement, defaultValue);","","      default:","        throw new SyntaxError('Wrong number of arguments');","    }","  };","  ","  var _getsubset = function (matrix, idx) {","    // check idx","    if (!idx || idx.isIndex !== true) {","      throw new TypeError('Invalid index');","    }","","    var isScalar = idx.isScalar();","    if (isScalar) {","      // return a scalar","      return matrix.get(idx.min());","    }","    // validate dimensions","    var size = idx.size();","    if (size.length != matrix._size.length) {","      throw new DimensionError(size.length, matrix._size.length);","    }","","    // vars","    var i, ii, k, kk;","    ","    // validate if any of the ranges in the index is out of range","    var min = idx.min();","    var max = idx.max();","    for (i = 0, ii = matrix._size.length; i < ii; i++) {","      validateIndex(min[i], matrix._size[i]);","      validateIndex(max[i], matrix._size[i]);","    }","    ","    // matrix arrays","    var mvalues = matrix._values;","    var mindex = matrix._index;","    var mptr = matrix._ptr;","        ","    // rows & columns dimensions for result matrix","    var rows = idx.dimension(0);","    var columns = idx.dimension(1);","    ","    // workspace & permutation vector","    var w = [];","    var pv = [];","    ","    // loop rows in resulting matrix","    rows.forEach(function (i, r) {","      // update permutation vector","      pv[i] = r[0];  ","      // mark i in workspace","      w[i] = true;","    });","","    // result matrix arrays","    var values = mvalues ? [] : undefined;","    var index = [];","    var ptr = [];","        ","    // loop columns in result matrix","    columns.forEach(function (j) {","      // update ptr","      ptr.push(index.length);","      // loop values in column j","      for (k = mptr[j], kk = mptr[j + 1]; k < kk; k++) {","        // row","        i = mindex[k];","        // check row is in result matrix","        if (w[i] === true) {","          // push index","          index.push(pv[i]);","          // check we need to process values","          if (values)","            values.push(mvalues[k]);","        }","      }","    });","    // update ptr","    ptr.push(index.length);","    ","    // return matrix","    return new SparseMatrix({","      values: values,","      index: index,","      ptr: ptr,","      size: size,","      datatype: matrix._datatype","    });","  };","  ","  var _setsubset = function (matrix, index, submatrix, defaultValue) {","    // check index","    if (!index || index.isIndex !== true) {","      throw new TypeError('Invalid index');","    }","    ","    // get index size and check whether the index contains a single value","    var iSize = index.size(),","        isScalar = index.isScalar();","    ","    // calculate the size of the submatrix, and convert it into an Array if needed","    var sSize;","    if (submatrix && submatrix.isMatrix === true) {","      // submatrix size","      sSize = submatrix.size();","      // use array representation","      submatrix = submatrix.toArray();","    }","    else {","      // get submatrix size (array, scalar)","      sSize = array.size(submatrix);","    }","    ","    // check index is a scalar","    if (isScalar) {","      // verify submatrix is a scalar","      if (sSize.length !== 0) {","        throw new TypeError('Scalar expected');","      }","      // set value","      matrix.set(index.min(), submatrix, defaultValue);","    }","    else {","      // validate dimensions, index size must be one or two dimensions","      if (iSize.length !== 1 && iSize.length !== 2) {","        throw new DimensionError(iSize.length, matrix._size.length, '<');","      }","      ","      // check submatrix and index have the same dimensions","      if (sSize.length < iSize.length) {","        // calculate number of missing outer dimensions","        var i = 0;","        var outer = 0;","        while (iSize[i] === 1 && sSize[i] === 1) {","          i++;","        }","        while (iSize[i] === 1) {","          outer++;","          i++;","        }","        // unsqueeze both outer and inner dimensions","        submatrix = array.unsqueeze(submatrix, iSize.length, outer, sSize);","      }","      ","      // check whether the size of the submatrix matches the index size","      if (!object.deepEqual(iSize, sSize)) {","        throw new DimensionError(iSize, sSize, '>');","      }","      ","      // offsets","      var x0 = index.min()[0];","      var y0 = index.min()[1];      ","      ","      // submatrix rows and columns","      var m = sSize[0];","      var n = sSize[1];","","      // loop submatrix","      for (var x = 0; x < m; x++) {","        // loop columns","        for (var y = 0; y < n; y++) {","          // value at i, j","          var v = submatrix[x][y];","          // invoke set (zero value will remove entry from matrix)","          matrix.set([x + x0, y + y0], v, defaultValue);","        }","      }","    }","    return matrix;","  };","","  /**","   * Get a single element from the matrix.","   * @memberof SparseMatrix","   * @param {number[]} index   Zero-based index","   * @return {*} value","   */","  SparseMatrix.prototype.get = function (index) {","    if (!isArray(index))","      throw new TypeError('Array expected');","    if (index.length != this._size.length)","      throw new DimensionError(index.length, this._size.length);","","    // check it is a pattern matrix","    if (!this._values)","      throw new Error('Cannot invoke get on a Pattern only matrix');","","    // row and column","    var i = index[0];","    var j = index[1];","","    // check i, j are valid","    validateIndex(i, this._size[0]);","    validateIndex(j, this._size[1]);","","    // find value index","    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index);","    // check k is prior to next column k and it is in the correct row","    if (k < this._ptr[j + 1] && this._index[k] === i)","      return this._values[k];","","    return 0;","  };","  ","  /**","   * Replace a single element in the matrix.","   * @memberof SparseMatrix","   * @param {number[]} index   Zero-based index","   * @param {*} value","   * @param {*} [defaultValue]        Default value, filled in on new entries when","   *                                  the matrix is resized. If not provided,","   *                                  new matrix elements will be set to zero.","   * @return {SparseMatrix} self","   */","  SparseMatrix.prototype.set = function (index, v, defaultValue) {","    if (!isArray(index))","      throw new TypeError('Array expected');","    if (index.length != this._size.length)","      throw new DimensionError(index.length, this._size.length);","","    // check it is a pattern matrix","    if (!this._values)","      throw new Error('Cannot invoke set on a Pattern only matrix');","      ","    // row and column","    var i = index[0];","    var j = index[1];","","    // rows & columns","    var rows = this._size[0];","    var columns = this._size[1];","    ","    // equal signature to use","    var eq = equalScalar;","    // zero value","    var zero = 0;","","    if (isString(this._datatype)) {","      // find signature that matches (datatype, datatype)","      eq = typed.find(equalScalar, [this._datatype, this._datatype]) || equalScalar;","      // convert 0 to the same datatype","      zero = typed.convert(0, this._datatype);","    }","","    // check we need to resize matrix","    if (i > rows - 1 || j > columns - 1) {","      // resize matrix","      _resize(this, Math.max(i + 1, rows), Math.max(j + 1, columns), defaultValue);","      // update rows & columns","      rows = this._size[0];","      columns = this._size[1];","    }","","    // check i, j are valid","    validateIndex(i, rows);","    validateIndex(j, columns);","","    // find value index","    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index);","    // check k is prior to next column k and it is in the correct row","    if (k < this._ptr[j + 1] && this._index[k] === i) {","      // check value != 0","      if (!eq(v, zero)) {","        // update value","        this._values[k] = v;","      }","      else {","        // remove value from matrix","        _remove(k, j, this._values, this._index, this._ptr);","      }","    }","    else {","      // insert value @ (i, j)","      _insert(k, i, j, v, this._values, this._index, this._ptr);","    }","","    return this;","  };","  ","  var _getValueIndex = function(i, top, bottom, index) {","    // check row is on the bottom side","    if (bottom - top === 0)","      return bottom;","    // loop rows [top, bottom[","    for (var r = top; r < bottom; r++) {","      // check we found value index","      if (index[r] === i)","        return r;","    }","    // we did not find row","    return top;","  };","","  var _remove = function (k, j, values, index, ptr) {","    // remove value @ k","    values.splice(k, 1);","    index.splice(k, 1);","    // update pointers","    for (var x = j + 1; x < ptr.length; x++)","      ptr[x]--;","  };","","  var _insert = function (k, i, j, v, values, index, ptr) {","    // insert value","    values.splice(k, 0, v);","    // update row for k","    index.splice(k, 0, i);","    // update column pointers","    for (var x = j + 1; x < ptr.length; x++)","      ptr[x]++;","  };","  ","  /**","   * Resize the matrix to the given size. Returns a copy of the matrix when ","   * `copy=true`, otherwise return the matrix itself (resize in place).","   *","   * @memberof SparseMatrix","   * @param {number[]} size           The new size the matrix should have.","   * @param {*} [defaultValue=0]      Default value, filled in on new entries.","   *                                  If not provided, the matrix elements will","   *                                  be filled with zeros.","   * @param {boolean} [copy]          Return a resized copy of the matrix","   *","   * @return {Matrix}                 The resized matrix","   */","  SparseMatrix.prototype.resize = function (size, defaultValue, copy) {    ","    // validate arguments","    if (!isArray(size))","      throw new TypeError('Array expected');","    if (size.length !== 2)","      throw new Error('Only two dimensions matrix are supported');","","    // check sizes","    size.forEach(function (value) {","      if (!number.isNumber(value) || !number.isInteger(value) || value < 0) {","        throw new TypeError('Invalid size, must contain positive integers ' +","                            '(size: ' + string.format(size) + ')');","      }","    });","    ","    // matrix to resize","    var m = copy ? this.clone() : this;","    // resize matrix","    return _resize(m, size[0], size[1], defaultValue);","  };","  ","  var _resize = function (matrix, rows, columns, defaultValue) {","    // value to insert at the time of growing matrix","    var value = defaultValue || 0;","    ","    // equal signature to use","    var eq = equalScalar;","    // zero value","    var zero = 0;","","    if (isString(matrix._datatype)) {","      // find signature that matches (datatype, datatype)","      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar;","      // convert 0 to the same datatype","      zero = typed.convert(0, matrix._datatype);","      // convert value to the same datatype","      value = typed.convert(value, matrix._datatype);","    }","    ","    // should we insert the value?","    var ins = !eq(value, zero);","","    // old columns and rows","    var r = matrix._size[0];","    var c = matrix._size[1];","","    var i, j, k;","","    // check we need to increase columns","    if (columns > c) {","      // loop new columns","      for (j = c; j < columns; j++) {","        // update matrix._ptr for current column","        matrix._ptr[j] = matrix._values.length;","        // check we need to insert matrix._values","        if (ins) {","          // loop rows","          for (i = 0; i < r; i++) {","            // add new matrix._values","            matrix._values.push(value);","            // update matrix._index","            matrix._index.push(i);","          }","        }        ","      }","      // store number of matrix._values in matrix._ptr","      matrix._ptr[columns] = matrix._values.length;","    }","    else if (columns < c) {","      // truncate matrix._ptr","      matrix._ptr.splice(columns + 1, c - columns);","      // truncate matrix._values and matrix._index","      matrix._values.splice(matrix._ptr[columns], matrix._values.length);","      matrix._index.splice(matrix._ptr[columns], matrix._index.length);","    }","    // update columns","    c = columns;","","    // check we need to increase rows","    if (rows > r) {","      // check we have to insert values","      if (ins) {","        // inserts","        var n = 0;","        // loop columns","        for (j = 0; j < c; j++) {","          // update matrix._ptr for current column","          matrix._ptr[j] = matrix._ptr[j] + n;","          // where to insert matrix._values","          k = matrix._ptr[j + 1] + n;","          // pointer","          var p = 0;","          // loop new rows, initialize pointer","          for (i = r; i < rows; i++, p++) {","            // add value","            matrix._values.splice(k + p, 0, value);","            // update matrix._index","            matrix._index.splice(k + p, 0, i);","            // increment inserts","            n++;","          }","        }","        // store number of matrix._values in matrix._ptr","        matrix._ptr[c] = matrix._values.length;","      }","    }","    else if (rows < r) {","      // deletes","      var d = 0;","      // loop columns","      for (j = 0; j < c; j++) {","        // update matrix._ptr for current column","        matrix._ptr[j] = matrix._ptr[j] - d;","        // where matrix._values start for next column","        var k0 = matrix._ptr[j];","        var k1 = matrix._ptr[j + 1] - d;","        // loop matrix._index","        for (k = k0; k < k1; k++) {","          // row","          i = matrix._index[k];","          // check we need to delete value and matrix._index","          if (i > rows - 1) {","            // remove value","            matrix._values.splice(k, 1);","            // remove item from matrix._index","            matrix._index.splice(k, 1);","            // increase deletes","            d++;","          }","        }","      }","      // update matrix._ptr for current column","      matrix._ptr[j] = matrix._values.length;","    }","    // update matrix._size","    matrix._size[0] = rows;","    matrix._size[1] = columns;","    // return matrix","    return matrix;","  };","","  /**","   * Reshape the matrix to the given size. Returns a copy of the matrix when","   * `copy=true`, otherwise return the matrix itself (reshape in place).","   *","   * NOTE: This might be better suited to copy by default, instead of modifying","   *       in place. For now, it operates in place to remain consistent with","   *       resize().","   *","   * @memberof SparseMatrix","   * @param {number[]} size           The new size the matrix should have.","   * @param {boolean} [copy]          Return a reshaped copy of the matrix","   *","   * @return {Matrix}                 The reshaped matrix","   */","  SparseMatrix.prototype.reshape = function (size, copy) {","","    // validate arguments","    if (!isArray(size))","      throw new TypeError('Array expected');","    if (size.length !== 2)","      throw new Error('Sparse matrices can only be reshaped in two dimensions');","","    // check sizes","    size.forEach(function (value) {","      if (!number.isNumber(value) || !number.isInteger(value) || value < 0) {","        throw new TypeError('Invalid size, must contain positive integers ' +","                            '(size: ' + string.format(size) + ')');","      }","    });","","    // m * n must not change","    if(this._size[0] * this._size[1] !== size[0] * size[1]) {","      throw new Error('Reshaping sparse matrix will result in the wrong number of elements');","    }","","    // matrix to reshape","    var m = copy ? this.clone() : this;","","    // return unchanged if the same shape","    if(this._size[0] === size[0] && this._size[1] === size[1]) {","      return m;","    }","","    // Convert to COO format (generate a column index)","    var colIndex = [];","    for(var i=0; i<m._ptr.length; i++) {","      for(var j=0; j<m._ptr[i+1]-m._ptr[i]; j++) {","        colIndex.push(i);","      }","    }","","    // Clone the values array","    var values = m._values.slice();","","    // Clone the row index array","    var rowIndex = m._index.slice();","","    // Transform the (row, column) indices","    for(var i=0; i<m._index.length; i++) {","      var r1 = rowIndex[i];","      var c1 = colIndex[i];","      var flat = r1 * m._size[1] + c1;","      colIndex[i] = flat % size[1];","      rowIndex[i] = Math.floor(flat / size[1]);","    }","","    // Now reshaping is supposed to preserve the row-major order, BUT these sparse matrices are stored","    // in column-major order, so we have to reorder the value array now. One option is to use a multisort,","    // sorting several arrays based on some other array.","","    // OR, we could easily just:","","    // 1. Remove all values from the matrix","    m._values.length = 0;","    m._index.length = 0;","    m._ptr.length = size[1] + 1;","    m._size = size.slice();","    for(var i=0; i<m._ptr.length; i++) {","      m._ptr[i] = 0;","    }","","    // 2. Re-insert all elements in the proper order (simplified code from SparseMatrix.prototype.set)","    // This step is probably the most time-consuming","    for(var h=0; h<values.length; h++) {","      var i = rowIndex[h];","      var j = colIndex[h];","      var v = values[h];","      var k = _getValueIndex(i, m._ptr[j], m._ptr[j + 1], m._index);","      _insert(k, i, j, v, m._values, m._index, m._ptr);","    }","","    // The value indices are inserted out of order, but apparently that's... still OK?","","    return m;","  }","  ","  /**","   * Create a clone of the matrix","   * @memberof SparseMatrix","   * @return {SparseMatrix} clone","   */","  SparseMatrix.prototype.clone = function () {","    var m = new SparseMatrix({","      values: this._values ? object.clone(this._values) : undefined,","      index: object.clone(this._index),","      ptr: object.clone(this._ptr),","      size: object.clone(this._size),","      datatype: this._datatype","    });","    return m;","  };","  ","  /**","   * Retrieve the size of the matrix.","   * @memberof SparseMatrix","   * @returns {number[]} size","   */","  SparseMatrix.prototype.size = function() {","    return this._size.slice(0); // copy the Array","  };","  ","  /**","   * Create a new matrix with the results of the callback function executed on","   * each entry of the matrix.","   * @memberof SparseMatrix","   * @param {Function} callback   The callback function is invoked with three","   *                              parameters: the value of the element, the index","   *                              of the element, and the Matrix being traversed.","   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.","   *","   * @return {SparseMatrix} matrix","   */","  SparseMatrix.prototype.map = function (callback, skipZeros) {","    // check it is a pattern matrix","    if (!this._values)","      throw new Error('Cannot invoke map on a Pattern only matrix');","    // matrix instance","    var me = this;","    // rows and columns","    var rows = this._size[0];","    var columns = this._size[1];","    // invoke callback","    var invoke = function (v, i, j) {","      // invoke callback","      return callback(v, [i, j], me);","    };","    // invoke _map","    return _map(this, 0, rows - 1, 0, columns - 1, invoke, skipZeros);","  };","","  /**","   * Create a new matrix with the results of the callback function executed on the interval","   * [minRow..maxRow, minColumn..maxColumn].","   */","  var _map = function (matrix, minRow, maxRow, minColumn, maxColumn, callback, skipZeros) {","    // result arrays","    var values = [];","    var index = [];","    var ptr = [];","    ","    // equal signature to use","    var eq = equalScalar;","    // zero value","    var zero = 0;","","    if (isString(matrix._datatype)) {","      // find signature that matches (datatype, datatype)","      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar;","      // convert 0 to the same datatype","      zero = typed.convert(0, matrix._datatype);","    }","    ","    // invoke callback","    var invoke = function (v, x, y) {","      // invoke callback","      v = callback(v, x, y);","      // check value != 0","      if (!eq(v, zero)) {","        // store value","        values.push(v);","        // index","        index.push(x);","      }","    };","    // loop columns","    for (var j = minColumn; j <= maxColumn; j++) {","      // store pointer to values index","      ptr.push(values.length);","      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]","      var k0 = matrix._ptr[j];","      var k1 = matrix._ptr[j + 1];","      // row pointer","      var p = minRow;","      // loop k within [k0, k1[","      for (var k = k0; k < k1; k++) {","        // row index","        var i = matrix._index[k];","        // check i is in range","        if (i >= minRow && i <= maxRow) {","          // zero values","          if (!skipZeros) {","           for (var x = p; x < i; x++)","             invoke(0, x - minRow, j - minColumn);","          }","          // value @ k","          invoke(matrix._values[k], i - minRow, j - minColumn);","        }","        // update pointer","        p = i + 1;","      }","      // zero values","      if (!skipZeros) {","        for (var y = p; y <= maxRow; y++)","          invoke(0, y - minRow, j - minColumn);","      }","    }","    // store number of values in ptr","    ptr.push(values.length);","    // return sparse matrix","    return new SparseMatrix({","      values: values,","      index: index,","      ptr: ptr,","      size: [maxRow - minRow + 1, maxColumn - minColumn + 1]","    });","  };","  ","  /**","   * Execute a callback function on each entry of the matrix.","   * @memberof SparseMatrix","   * @param {Function} callback   The callback function is invoked with three","   *                              parameters: the value of the element, the index","   *                              of the element, and the Matrix being traversed.","   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.","   */","  SparseMatrix.prototype.forEach = function (callback, skipZeros) {","    // check it is a pattern matrix","    if (!this._values)","      throw new Error('Cannot invoke forEach on a Pattern only matrix');","    // matrix instance","    var me = this;","    // rows and columns","    var rows = this._size[0];","    var columns = this._size[1];","    // loop columns","    for (var j = 0; j < columns; j++) {","      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]","      var k0 = this._ptr[j];","      var k1 = this._ptr[j + 1];","      // column pointer","      var p = 0;","      // loop k within [k0, k1[","      for (var k = k0; k < k1; k++) {","        // row index","        var i = this._index[k];","        // check we need to process zeros","        if (!skipZeros) {","          // zero values","          for (var x = p; x < i; x++)","            callback(0, [x, j], me);","        }","        // value @ k","        callback(this._values[k], [i, j], me);","        // update pointer","        p = i + 1;","      }","      // check we need to process zeros","      if (!skipZeros) {","        // zero values","        for (var y = p; y < rows; y++)","          callback(0, [y, j], me);","      }","    }","  };","  ","  /**","   * Create an Array with a copy of the data of the SparseMatrix","   * @memberof SparseMatrix","   * @returns {Array} array","   */","  SparseMatrix.prototype.toArray = function () {","    return _toArray(this._values, this._index, this._ptr, this._size, true);","  };","","  /**","   * Get the primitive value of the SparseMatrix: a two dimensions array","   * @memberof SparseMatrix","   * @returns {Array} array","   */","  SparseMatrix.prototype.valueOf = function () {","    return _toArray(this._values, this._index, this._ptr, this._size, false);","  };","  ","  var _toArray = function (values, index, ptr, size, copy) {    ","    // rows and columns","    var rows = size[0];","    var columns = size[1];","    // result","    var a = [];","    // vars","    var i, j;","    // initialize array","    for (i = 0; i < rows; i++) {","      a[i] = [];","      for (j = 0; j < columns; j++)","        a[i][j] = 0;","    }","","    // loop columns","    for (j = 0; j < columns; j++) {","      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]","      var k0 = ptr[j];","      var k1 = ptr[j + 1];","      // loop k within [k0, k1[","      for (var k = k0; k < k1; k++) {","        // row index","        i = index[k];","        // set value (use one for pattern matrix)","        a[i][j] = values ? (copy ? object.clone(values[k]) : values[k]) : 1;","      }","    }","    return a;","  };","  ","  /**","   * Get a string representation of the matrix, with optional formatting options.","   * @memberof SparseMatrix","   * @param {Object | number | Function} [options]  Formatting options. See","   *                                                lib/utils/number:format for a","   *                                                description of the available","   *                                                options.","   * @returns {string} str","   */","  SparseMatrix.prototype.format = function (options) {","    // rows and columns","    var rows = this._size[0];","    var columns = this._size[1];","    // density","    var density = this.density();","    // rows & columns","    var str = 'Sparse Matrix [' + string.format(rows, options) + ' x ' + string.format(columns, options) + '] density: ' + string.format(density, options) + '\\n';","    // loop columns","    for (var j = 0; j < columns; j++) {","      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]","      var k0 = this._ptr[j];","      var k1 = this._ptr[j + 1];","      // loop k within [k0, k1[","      for (var k = k0; k < k1; k++) {","        // row index","        var i = this._index[k];","        // append value","        str += '\\n    (' + string.format(i, options) + ', ' + string.format(j, options) + ') ==> ' + (this._values ? string.format(this._values[k], options) : 'X');","      }","    }","    return str;","  };","  ","  /**","   * Get a string representation of the matrix","   * @memberof SparseMatrix","   * @returns {string} str","   */","  SparseMatrix.prototype.toString = function () {","    return string.format(this.toArray());","  };","  ","  /**","   * Get a JSON representation of the matrix","   * @memberof SparseMatrix","   * @returns {Object}","   */","  SparseMatrix.prototype.toJSON = function () {","    return {","      mathjs: 'SparseMatrix',","      values: this._values,","      index: this._index,","      ptr: this._ptr,","      size: this._size,","      datatype: this._datatype","    };","  };","","  /**","   * Get the kth Matrix diagonal.","   *","   * @memberof SparseMatrix","   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.","   *","   * @returns {Matrix}                     The matrix vector with the diagonal values.","   */","  SparseMatrix.prototype.diagonal = function(k) {","    // validate k if any","    if (k) {","      // convert BigNumber to a number","      if (k.isBigNumber === true)","        k = k.toNumber();","      // is must be an integer","      if (!isNumber(k) || !isInteger(k)) {","        throw new TypeError ('The parameter k must be an integer number');","      }","    }","    else {","      // default value","      k = 0;","    }","","    var kSuper = k > 0 ? k : 0;","    var kSub = k < 0 ? -k : 0;","    ","    // rows & columns","    var rows = this._size[0];","    var columns = this._size[1];","    ","    // number diagonal values","    var n = Math.min(rows - kSub, columns -  kSuper);","    ","    // diagonal arrays","    var values = [];","    var index = [];","    var ptr = [];","    // initial ptr value","    ptr[0] = 0;","    // loop columns","    for (var j = kSuper; j < columns && values.length < n; j++) {","      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]","      var k0 = this._ptr[j];","      var k1 = this._ptr[j + 1];","      // loop x within [k0, k1[","      for (var x = k0; x < k1; x++) {","        // row index","        var i = this._index[x];","        // check row","        if (i === j - kSuper + kSub) {","          // value on this column","          values.push(this._values[x]);","          // store row","          index[values.length - 1] = i - kSub;","          // exit loop","          break;","        }","      }","    }","    // close ptr","    ptr.push(values.length);","    // return matrix","    return new SparseMatrix({","      values: values,","      index: index,","      ptr: ptr,","      size: [n, 1]","    });","  };","  ","  /**","   * Generate a matrix from a JSON object","   * @memberof SparseMatrix","   * @param {Object} json  An object structured like","   *                       `{\"mathjs\": \"SparseMatrix\", \"values\": [], \"index\": [], \"ptr\": [], \"size\": []}`,","   *                       where mathjs is optional","   * @returns {SparseMatrix}","   */","  SparseMatrix.fromJSON = function (json) {","    return new SparseMatrix(json);","  };","","  /**","   * Create a diagonal matrix.","   *","   * @memberof SparseMatrix","   * @param {Array} size                       The matrix size.","   * @param {number | Array | Matrix } value   The values for the diagonal.","   * @param {number | BigNumber} [k=0]         The kth diagonal where the vector will be filled in.","   * @param {string} [datatype]                The Matrix datatype, values must be of this datatype.","   *","   * @returns {SparseMatrix}","   */","  SparseMatrix.diagonal = function (size, value, k, defaultValue, datatype) {","    if (!isArray(size))","      throw new TypeError('Array expected, size parameter');","    if (size.length !== 2)","      throw new Error('Only two dimensions matrix are supported');","    ","    // map size & validate","    size = size.map(function (s) {","      // check it is a big number","      if (s && s.isBigNumber === true) {","        // convert it","        s = s.toNumber();","      }","      // validate arguments","      if (!isNumber(s) || !isInteger(s) || s < 1) {","        throw new Error('Size values must be positive integers');","      } ","      return s;","    });","    ","    // validate k if any","    if (k) {","      // convert BigNumber to a number","      if (k.isBigNumber === true)","        k = k.toNumber();","      // is must be an integer","      if (!isNumber(k) || !isInteger(k)) {","        throw new TypeError ('The parameter k must be an integer number');","      }","    }","    else {","      // default value","      k = 0;","    }","","    // equal signature to use","    var eq = equalScalar;","    // zero value","    var zero = 0;","","    if (isString(datatype)) {","      // find signature that matches (datatype, datatype)","      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar;","      // convert 0 to the same datatype","      zero = typed.convert(0, datatype);","    }","    ","    var kSuper = k > 0 ? k : 0;","    var kSub = k < 0 ? -k : 0;","    ","    // rows and columns","    var rows = size[0];","    var columns = size[1];","    ","    // number of non-zero items","    var n = Math.min(rows - kSub, columns -  kSuper);","    ","    // value extraction function","    var _value;","      ","    // check value","    if (isArray(value)) {","      // validate array","      if (value.length !== n) {","        // number of values in array must be n","        throw new Error('Invalid value array length');","      }","      // define function","      _value = function (i) {","        // return value @ i","        return value[i];","      };","    }","    else if (value && value.isMatrix === true) {","      // matrix size","      var ms = value.size();","      // validate matrix","      if (ms.length !== 1 || ms[0] !== n) {","        // number of values in array must be n","        throw new Error('Invalid matrix length');","      }","      // define function","      _value = function (i) {","        // return value @ i","        return value.get([i]);","      };","    }","    else {","      // define function","      _value = function () {","        // return value","        return value;","      };","    }","    ","    // create arrays","    var values = [];","    var index = [];","    var ptr = [];","    ","    // loop items","    for (var j = 0; j < columns; j++) {","      // number of rows with value","      ptr.push(values.length);","      // diagonal index","      var i = j - kSuper;      ","      // check we need to set diagonal value","      if (i >= 0 && i < n) {","        // get value @ i","        var v = _value(i);","        // check for zero","        if (!eq(v, zero)) {","          // column","          index.push(i + kSub);","          // add value","          values.push(v);","        }","      }","    }","    // last value should be number of values","    ptr.push(values.length);","    // create SparseMatrix","    return new SparseMatrix({","      values: values,","      index: index,","      ptr: ptr,","      size: [rows, columns]","    });","  };","  ","  /**","   * Swap rows i and j in Matrix.","   *","   * @memberof SparseMatrix","   * @param {number} i       Matrix row index 1","   * @param {number} j       Matrix row index 2","   *","   * @return {Matrix}        The matrix reference","   */","  SparseMatrix.prototype.swapRows = function (i, j) {","    // check index","    if (!isNumber(i) || !isInteger(i) || !isNumber(j) || !isInteger(j)) {","      throw new Error('Row index must be positive integers');","    }","    // check dimensions","    if (this._size.length !== 2) {","      throw new Error('Only two dimensional matrix is supported');","    }","    // validate index","    validateIndex(i, this._size[0]);","    validateIndex(j, this._size[0]);","    ","    // swap rows","    SparseMatrix._swapRows(i, j, this._size[1], this._values, this._index, this._ptr);","    // return current instance","    return this;","  };","  ","  /**","   * Loop rows with data in column j.","   *","   * @param {number} j            Column","   * @param {Array} values        Matrix values","   * @param {Array} index         Matrix row indeces","   * @param {Array} ptr           Matrix column pointers","   * @param {Function} callback   Callback function invoked for every row in column j","   */","  SparseMatrix._forEachRow = function (j, values, index, ptr, callback) {","    // indeces for column j","    var k0 = ptr[j];","    var k1 = ptr[j + 1];","    // loop","    for (var k = k0; k < k1; k++) {","      // invoke callback","      callback(index[k], values[k]);","    }","  };","  ","  /**","   * Swap rows x and y in Sparse Matrix data structures.","   *","   * @param {number} x         Matrix row index 1","   * @param {number} y         Matrix row index 2","   * @param {number} columns   Number of columns in matrix","   * @param {Array} values     Matrix values","   * @param {Array} index      Matrix row indeces","   * @param {Array} ptr        Matrix column pointers","   */","  SparseMatrix._swapRows = function (x, y, columns, values, index, ptr) {","    // loop columns","    for (var j = 0; j < columns; j++) {","      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]","      var k0 = ptr[j];","      var k1 = ptr[j + 1];","      // find value index @ x","      var kx = _getValueIndex(x, k0, k1, index);","      // find value index @ x","      var ky = _getValueIndex(y, k0, k1, index);","      // check both rows exist in matrix","      if (kx < k1 && ky < k1 && index[kx] === x && index[ky] === y) {","        // swap values (check for pattern matrix)","        if (values) {","          var v = values[kx];","          values[kx] = values[ky];","          values[ky] = v;","        }","        // next column","        continue;","      }","      // check x row exist & no y row","      if (kx < k1 && index[kx] === x && (ky >= k1 || index[ky] !== y)) {","        // value @ x (check for pattern matrix)","        var vx = values ? values[kx] : undefined;","        // insert value @ y","        index.splice(ky, 0, y);","        if (values)","          values.splice(ky, 0, vx);        ","        // remove value @ x (adjust array index if needed)","        index.splice(ky <= kx ? kx + 1 : kx, 1);","        if (values)","          values.splice(ky <= kx ? kx + 1 : kx, 1);","        // next column","        continue;","      }","      // check y row exist & no x row","      if (ky < k1 && index[ky] === y && (kx >= k1 || index[kx] !== x)) {","        // value @ y (check for pattern matrix)","        var vy = values ? values[ky] : undefined;","        // insert value @ x","        index.splice(kx, 0, x);","        if (values)","          values.splice(kx, 0, vy);","        // remove value @ y (adjust array index if needed)","        index.splice(kx <= ky ? ky + 1 : ky, 1);","        if (values)","          values.splice(kx <= ky ? ky + 1 : ky, 1);","      }","    }","  };","","  // register this type in the base class Matrix","  type.Matrix._storage.sparse = SparseMatrix;","","  return SparseMatrix;","}","","exports.name = 'SparseMatrix';","exports.path = 'type';","exports.factory = factory;","exports.lazy = false;  // no lazy loading, as we alter type.Matrix._storage",""],"l":{"3":1,"4":1,"6":1,"7":1,"8":1,"9":1,"11":1,"12":1,"13":1,"14":1,"16":1,"18":1,"19":1,"20":1,"27":1,"28":0,"29":0,"30":0,"31":0,"33":0,"35":0,"37":0,"39":0,"40":0,"41":0,"42":0,"43":0,"45":0,"47":0,"49":0,"51":0,"55":0,"56":0,"57":0,"58":0,"59":0,"63":1,"65":0,"67":0,"68":0,"69":0,"70":0,"71":0,"75":0,"79":1,"81":0,"82":0,"83":0,"84":0,"86":0,"87":0,"90":0,"92":0,"94":0,"96":0,"98":0,"102":0,"104":0,"105":0,"107":0,"109":0,"111":0,"113":0,"115":0,"116":0,"118":0,"120":0,"122":0,"124":0,"126":0,"132":0,"133":0,"135":0,"137":0,"139":0,"144":0,"149":0,"151":0,"154":1,"159":1,"160":1,"171":1,"172":0,"184":1,"185":0,"194":1,"195":0,"207":1,"209":0,"210":0,"212":0,"229":1,"230":0,"231":0,"234":0,"236":0,"241":0,"244":0,"248":1,"250":0,"251":0,"254":0,"255":0,"257":0,"260":0,"261":0,"262":0,"266":0,"269":0,"270":0,"271":0,"272":0,"273":0,"277":0,"278":0,"279":0,"282":0,"283":0,"286":0,"287":0,"290":0,"292":0,"294":0,"298":0,"299":0,"300":0,"303":0,"305":0,"307":0,"309":0,"311":0,"313":0,"315":0,"316":0,"321":0,"324":0,"333":1,"335":0,"336":0,"340":0,"344":0,"345":0,"347":0,"349":0,"353":0,"357":0,"359":0,"360":0,"363":0,"367":0,"368":0,"372":0,"374":0,"375":0,"376":0,"377":0,"379":0,"380":0,"381":0,"384":0,"388":0,"389":0,"393":0,"394":0,"397":0,"398":0,"401":0,"403":0,"405":0,"407":0,"411":0,"420":1,"421":0,"422":0,"423":0,"424":0,"427":0,"428":0,"431":0,"432":0,"435":0,"436":0,"439":0,"441":0,"442":0,"444":0,"457":1,"458":0,"459":0,"460":0,"461":0,"464":0,"465":0,"468":0,"469":0,"472":0,"473":0,"476":0,"478":0,"480":0,"482":0,"484":0,"488":0,"490":0,"492":0,"493":0,"497":0,"498":0,"501":0,"503":0,"505":0,"507":0,"511":0,"516":0,"519":0,"522":1,"524":0,"525":0,"527":0,"529":0,"530":0,"533":0,"536":1,"538":0,"539":0,"541":0,"542":0,"545":1,"547":0,"549":0,"551":0,"552":0,"568":1,"570":0,"571":0,"572":0,"573":0,"576":0,"577":0,"578":0,"584":0,"586":0,"589":1,"591":0,"594":0,"596":0,"598":0,"600":0,"602":0,"604":0,"608":0,"611":0,"612":0,"614":0,"617":0,"619":0,"621":0,"623":0,"625":0,"627":0,"629":0,"634":0,"636":0,"638":0,"640":0,"641":0,"644":0,"647":0,"649":0,"651":0,"653":0,"655":0,"657":0,"659":0,"661":0,"663":0,"665":0,"667":0,"671":0,"674":0,"676":0,"678":0,"680":0,"682":0,"683":0,"685":0,"687":0,"689":0,"691":0,"693":0,"695":0,"700":0,"703":0,"704":0,"706":0,"723":1,"726":0,"727":0,"728":0,"729":0,"732":0,"733":0,"734":0,"740":0,"741":0,"745":0,"748":0,"749":0,"753":0,"754":0,"755":0,"756":0,"761":0,"764":0,"767":0,"768":0,"769":0,"770":0,"771":0,"772":0,"782":0,"783":0,"784":0,"785":0,"786":0,"787":0,"792":0,"793":0,"794":0,"795":0,"796":0,"797":0,"802":0,"810":1,"811":0,"818":0,"826":1,"827":0,"841":1,"843":0,"844":0,"846":0,"848":0,"849":0,"851":0,"853":0,"856":0,"863":1,"865":0,"866":0,"867":0,"870":0,"872":0,"874":0,"876":0,"878":0,"882":0,"884":0,"886":0,"888":0,"890":0,"894":0,"896":0,"898":0,"899":0,"901":0,"903":0,"905":0,"907":0,"909":0,"910":0,"911":0,"914":0,"917":0,"920":0,"921":0,"922":0,"926":0,"928":0,"944":1,"946":0,"947":0,"949":0,"951":0,"952":0,"954":0,"956":0,"957":0,"959":0,"961":0,"963":0,"965":0,"967":0,"968":0,"971":0,"973":0,"976":0,"978":0,"979":0,"989":1,"990":0,"998":1,"999":0,"1002":1,"1004":0,"1005":0,"1007":0,"1009":0,"1011":0,"1012":0,"1013":0,"1014":0,"1018":0,"1020":0,"1021":0,"1023":0,"1025":0,"1027":0,"1030":0,"1042":1,"1044":0,"1045":0,"1047":0,"1049":0,"1051":0,"1053":0,"1054":0,"1056":0,"1058":0,"1060":0,"1063":0,"1071":1,"1072":0,"1080":1,"1081":0,"1099":1,"1101":0,"1103":0,"1104":0,"1106":0,"1107":0,"1112":0,"1115":0,"1116":0,"1119":0,"1120":0,"1123":0,"1126":0,"1127":0,"1128":0,"1130":0,"1132":0,"1134":0,"1135":0,"1137":0,"1139":0,"1141":0,"1143":0,"1145":0,"1147":0,"1152":0,"1154":0,"1170":1,"1171":0,"1185":1,"1186":0,"1187":0,"1188":0,"1189":0,"1192":0,"1194":0,"1196":0,"1199":0,"1200":0,"1202":0,"1206":0,"1208":0,"1209":0,"1211":0,"1212":0,"1217":0,"1221":0,"1223":0,"1225":0,"1227":0,"1229":0,"1232":0,"1233":0,"1236":0,"1237":0,"1240":0,"1243":0,"1246":0,"1248":0,"1250":0,"1253":0,"1255":0,"1258":0,"1260":0,"1262":0,"1264":0,"1267":0,"1269":0,"1274":0,"1276":0,"1281":0,"1282":0,"1283":0,"1286":0,"1288":0,"1290":0,"1292":0,"1294":0,"1296":0,"1298":0,"1300":0,"1305":0,"1307":0,"1324":1,"1326":0,"1327":0,"1330":0,"1331":0,"1334":0,"1335":0,"1338":0,"1340":0,"1352":1,"1354":0,"1355":0,"1357":0,"1359":0,"1373":1,"1375":0,"1377":0,"1378":0,"1380":0,"1382":0,"1384":0,"1386":0,"1387":0,"1388":0,"1389":0,"1392":0,"1395":0,"1397":0,"1399":0,"1400":0,"1401":0,"1403":0,"1404":0,"1405":0,"1407":0,"1410":0,"1412":0,"1414":0,"1415":0,"1416":0,"1418":0,"1419":0,"1420":0,"1426":1,"1428":1,"1431":1,"1432":1,"1433":1,"1434":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/matrix/Spa.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/matrix/Spa.js","s":{"1":1,"2":0,"3":0,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":1,"64":1,"65":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"factory","line":3,"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":38}}},"2":{"name":"Spa","line":12,"loc":{"start":{"line":12,"column":2},"end":{"line":12,"column":17}}},"3":{"name":"(anonymous_3)","line":33,"loc":{"start":{"line":33,"column":22},"end":{"line":33,"column":38}}},"4":{"name":"(anonymous_4)","line":47,"loc":{"start":{"line":47,"column":22},"end":{"line":47,"column":35}}},"5":{"name":"(anonymous_5)","line":54,"loc":{"start":{"line":54,"column":29},"end":{"line":54,"column":45}}},"6":{"name":"(anonymous_6)","line":69,"loc":{"start":{"line":69,"column":26},"end":{"line":69,"column":56}}},"7":{"name":"(anonymous_7)","line":105,"loc":{"start":{"line":105,"column":23},"end":{"line":105,"column":39}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":137,"column":1}},"2":{"start":{"line":5,"column":2},"end":{"line":5,"column":59}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":75}},"4":{"start":{"line":12,"column":2},"end":{"line":19,"column":3}},"5":{"start":{"line":13,"column":4},"end":{"line":14,"column":80}},"6":{"start":{"line":14,"column":6},"end":{"line":14,"column":80}},"7":{"start":{"line":17,"column":4},"end":{"line":17,"column":22}},"8":{"start":{"line":18,"column":4},"end":{"line":18,"column":42}},"9":{"start":{"line":24,"column":2},"end":{"line":24,"column":29}},"10":{"start":{"line":25,"column":2},"end":{"line":25,"column":29}},"11":{"start":{"line":33,"column":2},"end":{"line":45,"column":4}},"12":{"start":{"line":35,"column":4},"end":{"line":44,"column":5}},"13":{"start":{"line":37,"column":6},"end":{"line":37,"column":41}},"14":{"start":{"line":39,"column":6},"end":{"line":39,"column":29}},"15":{"start":{"line":43,"column":6},"end":{"line":43,"column":32}},"16":{"start":{"line":47,"column":2},"end":{"line":52,"column":4}},"17":{"start":{"line":48,"column":4},"end":{"line":48,"column":31}},"18":{"start":{"line":49,"column":4},"end":{"line":50,"column":24}},"19":{"start":{"line":50,"column":6},"end":{"line":50,"column":24}},"20":{"start":{"line":51,"column":4},"end":{"line":51,"column":13}},"21":{"start":{"line":54,"column":2},"end":{"line":67,"column":4}},"22":{"start":{"line":56,"column":4},"end":{"line":56,"column":31}},"23":{"start":{"line":57,"column":4},"end":{"line":66,"column":5}},"24":{"start":{"line":59,"column":6},"end":{"line":59,"column":37}},"25":{"start":{"line":61,"column":6},"end":{"line":61,"column":29}},"26":{"start":{"line":65,"column":6},"end":{"line":65,"column":38}},"27":{"start":{"line":69,"column":2},"end":{"line":103,"column":4}},"28":{"start":{"line":71,"column":4},"end":{"line":71,"column":26}},"29":{"start":{"line":72,"column":4},"end":{"line":72,"column":30}},"30":{"start":{"line":74,"column":4},"end":{"line":74,"column":19}},"31":{"start":{"line":76,"column":4},"end":{"line":76,"column":37}},"32":{"start":{"line":77,"column":4},"end":{"line":78,"column":23}},"33":{"start":{"line":78,"column":6},"end":{"line":78,"column":23}},"34":{"start":{"line":80,"column":4},"end":{"line":93,"column":5}},"35":{"start":{"line":82,"column":6},"end":{"line":88,"column":7}},"36":{"start":{"line":84,"column":8},"end":{"line":87,"column":9}},"37":{"start":{"line":86,"column":10},"end":{"line":86,"column":47}},"38":{"start":{"line":90,"column":6},"end":{"line":90,"column":35}},"39":{"start":{"line":91,"column":6},"end":{"line":92,"column":25}},"40":{"start":{"line":92,"column":8},"end":{"line":92,"column":25}},"41":{"start":{"line":95,"column":4},"end":{"line":102,"column":5}},"42":{"start":{"line":97,"column":6},"end":{"line":97,"column":23}},"43":{"start":{"line":99,"column":6},"end":{"line":99,"column":41}},"44":{"start":{"line":101,"column":6},"end":{"line":101,"column":30}},"45":{"start":{"line":105,"column":2},"end":{"line":134,"column":4}},"46":{"start":{"line":107,"column":4},"end":{"line":107,"column":32}},"47":{"start":{"line":108,"column":4},"end":{"line":108,"column":32}},"48":{"start":{"line":110,"column":4},"end":{"line":133,"column":5}},"49":{"start":{"line":112,"column":6},"end":{"line":112,"column":48}},"50":{"start":{"line":114,"column":6},"end":{"line":114,"column":31}},"51":{"start":{"line":116,"column":6},"end":{"line":116,"column":30}},"52":{"start":{"line":117,"column":6},"end":{"line":117,"column":34}},"53":{"start":{"line":119,"column":9},"end":{"line":133,"column":5}},"54":{"start":{"line":121,"column":6},"end":{"line":121,"column":48}},"55":{"start":{"line":123,"column":6},"end":{"line":123,"column":31}},"56":{"start":{"line":125,"column":6},"end":{"line":125,"column":30}},"57":{"start":{"line":126,"column":6},"end":{"line":126,"column":34}},"58":{"start":{"line":128,"column":9},"end":{"line":133,"column":5}},"59":{"start":{"line":130,"column":6},"end":{"line":130,"column":26}},"60":{"start":{"line":131,"column":6},"end":{"line":131,"column":32}},"61":{"start":{"line":132,"column":6},"end":{"line":132,"column":22}},"62":{"start":{"line":136,"column":2},"end":{"line":136,"column":13}},"63":{"start":{"line":139,"column":0},"end":{"line":139,"column":21}},"64":{"start":{"line":140,"column":0},"end":{"line":140,"column":22}},"65":{"start":{"line":141,"column":0},"end":{"line":141,"column":26}}},"branchMap":{"1":{"line":13,"type":"if","locations":[{"start":{"line":13,"column":4},"end":{"line":13,"column":4}},{"start":{"line":13,"column":4},"end":{"line":13,"column":4}}]},"2":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":4},"end":{"line":35,"column":4}},{"start":{"line":35,"column":4},"end":{"line":35,"column":4}}]},"3":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":4},"end":{"line":49,"column":4}},{"start":{"line":49,"column":4},"end":{"line":49,"column":4}}]},"4":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":4},"end":{"line":57,"column":4}},{"start":{"line":57,"column":4},"end":{"line":57,"column":4}}]},"5":{"line":77,"type":"if","locations":[{"start":{"line":77,"column":4},"end":{"line":77,"column":4}},{"start":{"line":77,"column":4},"end":{"line":77,"column":4}}]},"6":{"line":80,"type":"binary-expr","locations":[{"start":{"line":80,"column":11},"end":{"line":80,"column":15}},{"start":{"line":80,"column":19},"end":{"line":80,"column":33}}]},"7":{"line":82,"type":"if","locations":[{"start":{"line":82,"column":6},"end":{"line":82,"column":6}},{"start":{"line":82,"column":6},"end":{"line":82,"column":6}}]},"8":{"line":84,"type":"if","locations":[{"start":{"line":84,"column":8},"end":{"line":84,"column":8}},{"start":{"line":84,"column":8},"end":{"line":84,"column":8}}]},"9":{"line":91,"type":"if","locations":[{"start":{"line":91,"column":6},"end":{"line":91,"column":6}},{"start":{"line":91,"column":6},"end":{"line":91,"column":6}}]},"10":{"line":110,"type":"if","locations":[{"start":{"line":110,"column":4},"end":{"line":110,"column":4}},{"start":{"line":110,"column":4},"end":{"line":110,"column":4}}]},"11":{"line":110,"type":"binary-expr","locations":[{"start":{"line":110,"column":8},"end":{"line":110,"column":14}},{"start":{"line":110,"column":18},"end":{"line":110,"column":23}}]},"12":{"line":119,"type":"if","locations":[{"start":{"line":119,"column":9},"end":{"line":119,"column":9}},{"start":{"line":119,"column":9},"end":{"line":119,"column":9}}]},"13":{"line":119,"type":"binary-expr","locations":[{"start":{"line":119,"column":13},"end":{"line":119,"column":18}},{"start":{"line":119,"column":22},"end":{"line":119,"column":28}}]},"14":{"line":128,"type":"if","locations":[{"start":{"line":128,"column":9},"end":{"line":128,"column":9}},{"start":{"line":128,"column":9},"end":{"line":128,"column":9}}]},"15":{"line":128,"type":"binary-expr","locations":[{"start":{"line":128,"column":13},"end":{"line":128,"column":18}},{"start":{"line":128,"column":22},"end":{"line":128,"column":27}}]}},"code":["'use strict';","","function factory (type, config, load) {","  ","  var add = load(require('../../function/arithmetic/add'));","  var equalScalar = load(require('../../function/relational/equalScalar'));","  ","  /**","   * An ordered Sparse Accumulator is a representation for a sparse vector that includes a dense array ","   * of the vector elements and an ordered list of non-zero elements.","   */","  function Spa() {","    if (!(this instanceof Spa))","      throw new SyntaxError('Constructor must be called with the new operator');","    ","    // allocate vector, TODO use typed arrays","    this._values = [];","    this._heap = new type.FibonacciHeap();","  }","","  /**","   * Attach type information","   */","  Spa.prototype.type = 'Spa';","  Spa.prototype.isSpa = true;","","  /**","   * Set the value for index i.","   *","   * @param {number} i                       The index","   * @param {number | BigNumber | Complex}   The value at index i","   */","  Spa.prototype.set = function (i, v) {","    // check we have a value @ i","    if (!this._values[i]) {","      // insert in heap","      var node = this._heap.insert(i, v);","      // set the value @ i","      this._values[i] = node;","    }","    else {","      // update the value @ i","      this._values[i].value = v;","    }","  };","  ","  Spa.prototype.get = function (i) {","    var node = this._values[i];","    if (node)","      return node.value;","    return 0;","  };","  ","  Spa.prototype.accumulate = function (i, v) {","    // node @ i","    var node = this._values[i];","    if (!node) {","      // insert in heap","      node = this._heap.insert(i, v);","      // initialize value","      this._values[i] = node;","    }","    else {","      // accumulate value","      node.value = add(node.value, v);","    }","  };","  ","  Spa.prototype.forEach = function (from, to, callback) {","    // references","    var heap = this._heap;","    var values = this._values;","    // nodes","    var nodes = [];","    // node with minimum key, save it","    var node = heap.extractMinimum();","    if (node)","      nodes.push(node);","    // extract nodes from heap (ordered)","    while (node && node.key <= to) {","      // check it is in range","      if (node.key >= from) {","        // check value is not zero","        if (!equalScalar(node.value, 0)) {","          // invoke callback","          callback(node.key, node.value, this);","        }","      }","      // extract next node, save it","      node = heap.extractMinimum();","      if (node)","        nodes.push(node);","    }","    // reinsert all nodes in heap","    for (var i = 0; i < nodes.length; i++) {","      // current node","      var n = nodes[i];","      // insert node in heap","      node = heap.insert(n.key, n.value);","      // update values","      values[node.key] = node;","    }","  };","  ","  Spa.prototype.swap = function (i, j) {","    // node @ i and j","    var nodei = this._values[i];","    var nodej = this._values[j];","    // check we need to insert indeces","    if (!nodei && nodej) {","      // insert in heap","      nodei = this._heap.insert(i, nodej.value);","      // remove from heap","      this._heap.remove(nodej);","      // set values","      this._values[i] = nodei;","      this._values[j] = undefined;","    }","    else if (nodei && !nodej) {","      // insert in heap","      nodej = this._heap.insert(j, nodei.value);","      // remove from heap","      this._heap.remove(nodei);","      // set values","      this._values[j] = nodej;","      this._values[i] = undefined;","    }","    else if (nodei && nodej) {","      // swap values","      var v = nodei.value;","      nodei.value = nodej.value;","      nodej.value = v;","    }","  };","  ","  return Spa;","}","","exports.name = 'Spa';","exports.path = 'type';","exports.factory = factory;",""],"l":{"3":1,"5":0,"6":0,"12":1,"13":0,"14":0,"17":0,"18":0,"24":0,"25":0,"33":0,"35":0,"37":0,"39":0,"43":0,"47":0,"48":0,"49":0,"50":0,"51":0,"54":0,"56":0,"57":0,"59":0,"61":0,"65":0,"69":0,"71":0,"72":0,"74":0,"76":0,"77":0,"78":0,"80":0,"82":0,"84":0,"86":0,"90":0,"91":0,"92":0,"95":0,"97":0,"99":0,"101":0,"105":0,"107":0,"108":0,"110":0,"112":0,"114":0,"116":0,"117":0,"119":0,"121":0,"123":0,"125":0,"126":0,"128":0,"130":0,"131":0,"132":0,"136":0,"139":1,"140":1,"141":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/matrix/FibonacciHeap.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/matrix/FibonacciHeap.js","s":{"1":1,"2":0,"3":0,"4":0,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":1,"156":1,"157":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"fnMap":{"1":{"name":"factory","line":3,"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}}},"2":{"name":"FibonacciHeap","line":15,"loc":{"start":{"line":15,"column":2},"end":{"line":15,"column":27}}},"3":{"name":"(anonymous_3)","line":36,"loc":{"start":{"line":36,"column":35},"end":{"line":36,"column":57}}},"4":{"name":"(anonymous_4)","line":75,"loc":{"start":{"line":75,"column":33},"end":{"line":75,"column":45}}},"5":{"name":"(anonymous_5)","line":83,"loc":{"start":{"line":83,"column":34},"end":{"line":83,"column":46}}},"6":{"name":"(anonymous_6)","line":92,"loc":{"start":{"line":92,"column":36},"end":{"line":92,"column":48}}},"7":{"name":"(anonymous_7)","line":101,"loc":{"start":{"line":101,"column":43},"end":{"line":101,"column":55}}},"8":{"name":"(anonymous_8)","line":159,"loc":{"start":{"line":159,"column":35},"end":{"line":159,"column":51}}},"9":{"name":"(anonymous_9)","line":172,"loc":{"start":{"line":172,"column":21},"end":{"line":172,"column":51}}},"10":{"name":"(anonymous_10)","line":195,"loc":{"start":{"line":195,"column":13},"end":{"line":195,"column":46}}},"11":{"name":"(anonymous_11)","line":223,"loc":{"start":{"line":223,"column":21},"end":{"line":223,"column":46}}},"12":{"name":"(anonymous_12)","line":245,"loc":{"start":{"line":245,"column":19},"end":{"line":245,"column":43}}},"13":{"name":"(anonymous_13)","line":268,"loc":{"start":{"line":268,"column":25},"end":{"line":268,"column":50}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":345,"column":1}},"2":{"start":{"line":5,"column":2},"end":{"line":5,"column":67}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":65}},"4":{"start":{"line":8,"column":2},"end":{"line":8,"column":67}},"5":{"start":{"line":15,"column":2},"end":{"line":22,"column":3}},"6":{"start":{"line":16,"column":4},"end":{"line":17,"column":80}},"7":{"start":{"line":17,"column":6},"end":{"line":17,"column":80}},"8":{"start":{"line":20,"column":4},"end":{"line":20,"column":25}},"9":{"start":{"line":21,"column":4},"end":{"line":21,"column":19}},"10":{"start":{"line":27,"column":2},"end":{"line":27,"column":49}},"11":{"start":{"line":28,"column":2},"end":{"line":28,"column":49}},"12":{"start":{"line":36,"column":2},"end":{"line":69,"column":4}},"13":{"start":{"line":38,"column":4},"end":{"line":42,"column":6}},"14":{"start":{"line":44,"column":4},"end":{"line":64,"column":5}},"15":{"start":{"line":46,"column":6},"end":{"line":46,"column":34}},"16":{"start":{"line":48,"column":6},"end":{"line":48,"column":26}},"17":{"start":{"line":49,"column":6},"end":{"line":49,"column":33}},"18":{"start":{"line":50,"column":6},"end":{"line":50,"column":27}},"19":{"start":{"line":51,"column":6},"end":{"line":51,"column":29}},"20":{"start":{"line":53,"column":6},"end":{"line":56,"column":7}},"21":{"start":{"line":55,"column":8},"end":{"line":55,"column":29}},"22":{"start":{"line":60,"column":6},"end":{"line":60,"column":23}},"23":{"start":{"line":61,"column":6},"end":{"line":61,"column":24}},"24":{"start":{"line":63,"column":6},"end":{"line":63,"column":27}},"25":{"start":{"line":66,"column":4},"end":{"line":66,"column":17}},"26":{"start":{"line":68,"column":4},"end":{"line":68,"column":16}},"27":{"start":{"line":75,"column":2},"end":{"line":77,"column":4}},"28":{"start":{"line":76,"column":4},"end":{"line":76,"column":22}},"29":{"start":{"line":83,"column":2},"end":{"line":86,"column":4}},"30":{"start":{"line":84,"column":4},"end":{"line":84,"column":25}},"31":{"start":{"line":85,"column":4},"end":{"line":85,"column":19}},"32":{"start":{"line":92,"column":2},"end":{"line":94,"column":4}},"33":{"start":{"line":93,"column":4},"end":{"line":93,"column":27}},"34":{"start":{"line":101,"column":2},"end":{"line":150,"column":4}},"35":{"start":{"line":103,"column":4},"end":{"line":103,"column":29}},"36":{"start":{"line":105,"column":4},"end":{"line":106,"column":18}},"37":{"start":{"line":106,"column":6},"end":{"line":106,"column":18}},"38":{"start":{"line":108,"column":4},"end":{"line":108,"column":32}},"39":{"start":{"line":110,"column":4},"end":{"line":110,"column":39}},"40":{"start":{"line":112,"column":4},"end":{"line":112,"column":23}},"41":{"start":{"line":114,"column":4},"end":{"line":129,"column":5}},"42":{"start":{"line":116,"column":6},"end":{"line":116,"column":30}},"43":{"start":{"line":118,"column":6},"end":{"line":118,"column":29}},"44":{"start":{"line":119,"column":6},"end":{"line":119,"column":28}},"45":{"start":{"line":121,"column":6},"end":{"line":121,"column":23}},"46":{"start":{"line":122,"column":6},"end":{"line":122,"column":30}},"47":{"start":{"line":123,"column":6},"end":{"line":123,"column":24}},"48":{"start":{"line":124,"column":6},"end":{"line":124,"column":23}},"49":{"start":{"line":126,"column":6},"end":{"line":126,"column":22}},"50":{"start":{"line":127,"column":6},"end":{"line":127,"column":20}},"51":{"start":{"line":128,"column":6},"end":{"line":128,"column":25}},"52":{"start":{"line":131,"column":4},"end":{"line":131,"column":33}},"53":{"start":{"line":132,"column":4},"end":{"line":132,"column":32}},"54":{"start":{"line":134,"column":4},"end":{"line":143,"column":5}},"55":{"start":{"line":136,"column":6},"end":{"line":136,"column":21}},"56":{"start":{"line":140,"column":6},"end":{"line":140,"column":27}},"57":{"start":{"line":142,"column":6},"end":{"line":142,"column":54}},"58":{"start":{"line":145,"column":4},"end":{"line":145,"column":17}},"59":{"start":{"line":147,"column":4},"end":{"line":147,"column":28}},"60":{"start":{"line":149,"column":4},"end":{"line":149,"column":16}},"61":{"start":{"line":159,"column":2},"end":{"line":164,"column":4}},"62":{"start":{"line":161,"column":4},"end":{"line":161,"column":58}},"63":{"start":{"line":163,"column":4},"end":{"line":163,"column":26}},"64":{"start":{"line":172,"column":2},"end":{"line":188,"column":4}},"65":{"start":{"line":174,"column":4},"end":{"line":174,"column":19}},"66":{"start":{"line":176,"column":4},"end":{"line":176,"column":29}},"67":{"start":{"line":177,"column":4},"end":{"line":182,"column":5}},"68":{"start":{"line":179,"column":6},"end":{"line":179,"column":34}},"69":{"start":{"line":181,"column":6},"end":{"line":181,"column":37}},"70":{"start":{"line":184,"column":4},"end":{"line":185,"column":21}},"71":{"start":{"line":185,"column":6},"end":{"line":185,"column":21}},"72":{"start":{"line":187,"column":4},"end":{"line":187,"column":19}},"73":{"start":{"line":195,"column":2},"end":{"line":215,"column":4}},"74":{"start":{"line":197,"column":4},"end":{"line":197,"column":33}},"75":{"start":{"line":198,"column":4},"end":{"line":198,"column":32}},"76":{"start":{"line":199,"column":4},"end":{"line":199,"column":20}},"77":{"start":{"line":201,"column":4},"end":{"line":202,"column":32}},"78":{"start":{"line":202,"column":6},"end":{"line":202,"column":32}},"79":{"start":{"line":204,"column":4},"end":{"line":205,"column":26}},"80":{"start":{"line":205,"column":6},"end":{"line":205,"column":26}},"81":{"start":{"line":207,"column":4},"end":{"line":207,"column":24}},"82":{"start":{"line":208,"column":4},"end":{"line":208,"column":31}},"83":{"start":{"line":209,"column":4},"end":{"line":209,"column":25}},"84":{"start":{"line":210,"column":4},"end":{"line":210,"column":27}},"85":{"start":{"line":212,"column":4},"end":{"line":212,"column":23}},"86":{"start":{"line":214,"column":4},"end":{"line":214,"column":22}},"87":{"start":{"line":223,"column":2},"end":{"line":239,"column":4}},"88":{"start":{"line":225,"column":4},"end":{"line":225,"column":29}},"89":{"start":{"line":227,"column":4},"end":{"line":228,"column":13}},"90":{"start":{"line":228,"column":6},"end":{"line":228,"column":13}},"91":{"start":{"line":230,"column":4},"end":{"line":238,"column":5}},"92":{"start":{"line":231,"column":6},"end":{"line":231,"column":23}},"93":{"start":{"line":235,"column":6},"end":{"line":235,"column":34}},"94":{"start":{"line":237,"column":6},"end":{"line":237,"column":28}},"95":{"start":{"line":245,"column":2},"end":{"line":266,"column":4}},"96":{"start":{"line":247,"column":4},"end":{"line":247,"column":33}},"97":{"start":{"line":248,"column":4},"end":{"line":248,"column":32}},"98":{"start":{"line":250,"column":4},"end":{"line":250,"column":25}},"99":{"start":{"line":251,"column":4},"end":{"line":261,"column":5}},"100":{"start":{"line":252,"column":6},"end":{"line":252,"column":26}},"101":{"start":{"line":253,"column":6},"end":{"line":253,"column":24}},"102":{"start":{"line":254,"column":6},"end":{"line":254,"column":23}},"103":{"start":{"line":257,"column":6},"end":{"line":257,"column":31}},"104":{"start":{"line":258,"column":6},"end":{"line":258,"column":38}},"105":{"start":{"line":259,"column":6},"end":{"line":259,"column":32}},"106":{"start":{"line":260,"column":6},"end":{"line":260,"column":29}},"107":{"start":{"line":263,"column":4},"end":{"line":263,"column":20}},"108":{"start":{"line":265,"column":4},"end":{"line":265,"column":22}},"109":{"start":{"line":268,"column":2},"end":{"line":342,"column":4}},"110":{"start":{"line":270,"column":4},"end":{"line":270,"column":67}},"111":{"start":{"line":272,"column":4},"end":{"line":272,"column":37}},"112":{"start":{"line":274,"column":4},"end":{"line":274,"column":21}},"113":{"start":{"line":275,"column":4},"end":{"line":275,"column":20}},"114":{"start":{"line":276,"column":4},"end":{"line":283,"column":5}},"115":{"start":{"line":277,"column":6},"end":{"line":277,"column":17}},"116":{"start":{"line":278,"column":6},"end":{"line":278,"column":18}},"117":{"start":{"line":279,"column":6},"end":{"line":282,"column":7}},"118":{"start":{"line":280,"column":8},"end":{"line":280,"column":19}},"119":{"start":{"line":281,"column":8},"end":{"line":281,"column":20}},"120":{"start":{"line":285,"column":4},"end":{"line":285,"column":10}},"121":{"start":{"line":287,"column":4},"end":{"line":315,"column":5}},"122":{"start":{"line":289,"column":6},"end":{"line":289,"column":23}},"123":{"start":{"line":291,"column":6},"end":{"line":291,"column":25}},"124":{"start":{"line":293,"column":6},"end":{"line":309,"column":7}},"125":{"start":{"line":295,"column":8},"end":{"line":295,"column":21}},"126":{"start":{"line":296,"column":8},"end":{"line":297,"column":16}},"127":{"start":{"line":297,"column":10},"end":{"line":297,"column":16}},"128":{"start":{"line":299,"column":8},"end":{"line":303,"column":9}},"129":{"start":{"line":300,"column":10},"end":{"line":300,"column":23}},"130":{"start":{"line":301,"column":10},"end":{"line":301,"column":16}},"131":{"start":{"line":302,"column":10},"end":{"line":302,"column":19}},"132":{"start":{"line":305,"column":8},"end":{"line":305,"column":25}},"133":{"start":{"line":307,"column":8},"end":{"line":307,"column":24}},"134":{"start":{"line":308,"column":8},"end":{"line":308,"column":12}},"135":{"start":{"line":311,"column":6},"end":{"line":311,"column":19}},"136":{"start":{"line":313,"column":6},"end":{"line":313,"column":15}},"137":{"start":{"line":314,"column":6},"end":{"line":314,"column":17}},"138":{"start":{"line":317,"column":4},"end":{"line":317,"column":19}},"139":{"start":{"line":319,"column":4},"end":{"line":340,"column":5}},"140":{"start":{"line":321,"column":6},"end":{"line":321,"column":19}},"141":{"start":{"line":322,"column":6},"end":{"line":323,"column":17}},"142":{"start":{"line":323,"column":8},"end":{"line":323,"column":17}},"143":{"start":{"line":325,"column":6},"end":{"line":339,"column":20}},"144":{"start":{"line":327,"column":8},"end":{"line":327,"column":31}},"145":{"start":{"line":328,"column":8},"end":{"line":328,"column":30}},"146":{"start":{"line":330,"column":8},"end":{"line":330,"column":25}},"147":{"start":{"line":331,"column":8},"end":{"line":331,"column":32}},"148":{"start":{"line":332,"column":8},"end":{"line":332,"column":26}},"149":{"start":{"line":333,"column":8},"end":{"line":333,"column":25}},"150":{"start":{"line":335,"column":8},"end":{"line":336,"column":22}},"151":{"start":{"line":336,"column":10},"end":{"line":336,"column":22}},"152":{"start":{"line":339,"column":8},"end":{"line":339,"column":20}},"153":{"start":{"line":341,"column":4},"end":{"line":341,"column":19}},"154":{"start":{"line":344,"column":2},"end":{"line":344,"column":23}},"155":{"start":{"line":347,"column":0},"end":{"line":347,"column":31}},"156":{"start":{"line":348,"column":0},"end":{"line":348,"column":22}},"157":{"start":{"line":349,"column":0},"end":{"line":349,"column":26}}},"branchMap":{"1":{"line":16,"type":"if","locations":[{"start":{"line":16,"column":4},"end":{"line":16,"column":4}},{"start":{"line":16,"column":4},"end":{"line":16,"column":4}}]},"2":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":4},"end":{"line":44,"column":4}},{"start":{"line":44,"column":4},"end":{"line":44,"column":4}}]},"3":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":6},"end":{"line":53,"column":6}},{"start":{"line":53,"column":6},"end":{"line":53,"column":6}}]},"4":{"line":105,"type":"if","locations":[{"start":{"line":105,"column":4},"end":{"line":105,"column":4}},{"start":{"line":105,"column":4},"end":{"line":105,"column":4}}]},"5":{"line":134,"type":"if","locations":[{"start":{"line":134,"column":4},"end":{"line":134,"column":4}},{"start":{"line":134,"column":4},"end":{"line":134,"column":4}}]},"6":{"line":177,"type":"if","locations":[{"start":{"line":177,"column":4},"end":{"line":177,"column":4}},{"start":{"line":177,"column":4},"end":{"line":177,"column":4}}]},"7":{"line":177,"type":"binary-expr","locations":[{"start":{"line":177,"column":8},"end":{"line":177,"column":14}},{"start":{"line":177,"column":18},"end":{"line":177,"column":47}}]},"8":{"line":184,"type":"if","locations":[{"start":{"line":184,"column":4},"end":{"line":184,"column":4}},{"start":{"line":184,"column":4},"end":{"line":184,"column":4}}]},"9":{"line":201,"type":"if","locations":[{"start":{"line":201,"column":4},"end":{"line":201,"column":4}},{"start":{"line":201,"column":4},"end":{"line":201,"column":4}}]},"10":{"line":204,"type":"if","locations":[{"start":{"line":204,"column":4},"end":{"line":204,"column":4}},{"start":{"line":204,"column":4},"end":{"line":204,"column":4}}]},"11":{"line":227,"type":"if","locations":[{"start":{"line":227,"column":4},"end":{"line":227,"column":4}},{"start":{"line":227,"column":4},"end":{"line":227,"column":4}}]},"12":{"line":230,"type":"if","locations":[{"start":{"line":230,"column":4},"end":{"line":230,"column":4}},{"start":{"line":230,"column":4},"end":{"line":230,"column":4}}]},"13":{"line":251,"type":"if","locations":[{"start":{"line":251,"column":4},"end":{"line":251,"column":4}},{"start":{"line":251,"column":4},"end":{"line":251,"column":4}}]},"14":{"line":276,"type":"if","locations":[{"start":{"line":276,"column":4},"end":{"line":276,"column":4}},{"start":{"line":276,"column":4},"end":{"line":276,"column":4}}]},"15":{"line":296,"type":"if","locations":[{"start":{"line":296,"column":8},"end":{"line":296,"column":8}},{"start":{"line":296,"column":8},"end":{"line":296,"column":8}}]},"16":{"line":299,"type":"if","locations":[{"start":{"line":299,"column":8},"end":{"line":299,"column":8}},{"start":{"line":299,"column":8},"end":{"line":299,"column":8}}]},"17":{"line":322,"type":"if","locations":[{"start":{"line":322,"column":6},"end":{"line":322,"column":6}},{"start":{"line":322,"column":6},"end":{"line":322,"column":6}}]},"18":{"line":325,"type":"if","locations":[{"start":{"line":325,"column":6},"end":{"line":325,"column":6}},{"start":{"line":325,"column":6},"end":{"line":325,"column":6}}]},"19":{"line":335,"type":"if","locations":[{"start":{"line":335,"column":8},"end":{"line":335,"column":8}},{"start":{"line":335,"column":8},"end":{"line":335,"column":8}}]}},"code":["'use strict';","","function factory (type, config, load, typed) {","  ","  var smaller = load(require('../../function/relational/smaller'));","  var larger = load(require('../../function/relational/larger'));","  ","  var oneOverLogPhi = 1.0 / Math.log((1.0 + Math.sqrt(5.0)) / 2.0);","  ","  /**","   * Fibonacci Heap implementation, used interally for Matrix math.","   * @class FibonacciHeap","   * @constructor FibonacciHeap","   */","  function FibonacciHeap() {","    if (!(this instanceof FibonacciHeap))","      throw new SyntaxError('Constructor must be called with the new operator');","","    // initialize fields","    this._minimum = null;","    this._size = 0;","  }","","  /**","   * Attach type information","   */","  FibonacciHeap.prototype.type = 'FibonacciHeap';","  FibonacciHeap.prototype.isFibonacciHeap = true;","","  /**","   * Inserts a new data element into the heap. No heap consolidation is","   * performed at this time, the new node is simply inserted into the root","   * list of this heap. Running time: O(1) actual.","   * @memberof FibonacciHeap","   */","  FibonacciHeap.prototype.insert = function (key, value) {","    // create node","    var node = {","      key: key,","      value: value,","      degree: 0","    };","    // check we have a node in the minimum","    if (this._minimum) {","      // minimum node","      var minimum = this._minimum;","      // update left & right of node","      node.left = minimum;","      node.right = minimum.right;","      minimum.right = node;","      node.right.left = node;","      // update minimum node in heap if needed","      if (smaller(key, minimum.key)) {","        // node has a smaller key, use it as minimum","        this._minimum = node;","      }","    }","    else {","      // set left & right","      node.left = node;","      node.right = node;","      // this is the first node","      this._minimum = node;","    }","    // increment number of nodes in heap","    this._size++;","    // return node","    return node;","  };","","  /**","   * Returns the number of nodes in heap. Running time: O(1) actual.","   * @memberof FibonacciHeap","   */","  FibonacciHeap.prototype.size = function () {","    return this._size;","  };","","  /**","   * Removes all elements from this heap.","   * @memberof FibonacciHeap","   */","  FibonacciHeap.prototype.clear = function () {","    this._minimum = null;","    this._size = 0;","  };","","  /**","   * Returns true if the heap is empty, otherwise false.","   * @memberof FibonacciHeap","   */","  FibonacciHeap.prototype.isEmpty = function () {","    return !!this._minimum;","  };","  ","  /**","   * Extracts the node with minimum key from heap. Amortized running ","   * time: O(log n).","   * @memberof FibonacciHeap","   */","  FibonacciHeap.prototype.extractMinimum = function () {","    // node to remove","    var node = this._minimum;","    // check we have a minimum","    if (node === null)","      return node;","    // current minimum","    var minimum = this._minimum;","    // get number of children","    var numberOfChildren = node.degree;","    // pointer to the first child","    var x = node.child;","    // for each child of node do...","    while (numberOfChildren > 0) {","      // store node in right side","      var tempRight = x.right;","      // remove x from child list","      x.left.right = x.right;","      x.right.left = x.left;","      // add x to root list of heap","      x.left = minimum;","      x.right = minimum.right;","      minimum.right = x;","      x.right.left = x;","      // set Parent[x] to null","      x.parent = null;","      x = tempRight;","      numberOfChildren--;","    }","    // remove node from root list of heap","    node.left.right = node.right;","    node.right.left = node.left;","    // update minimum","    if (node == node.right) {","      // empty","      minimum = null;","    }","    else {","      // update minimum","      minimum = node.right;","      // we need to update the pointer to the root with minimum key","      minimum = _findMinimumNode(minimum, this._size);","    }","    // decrement size of heap","    this._size--;","    // update minimum","    this._minimum = minimum;","    // return node","    return node;","  };","  ","  /**","   * Removes a node from the heap given the reference to the node. The trees","   * in the heap will be consolidated, if necessary. This operation may fail","   * to remove the correct element if there are nodes with key value -Infinity.","   * Running time: O(log n) amortized.","   * @memberof FibonacciHeap","   */","  FibonacciHeap.prototype.remove = function (node) {","    // decrease key value","    this._minimum = _decreaseKey(this._minimum, node, -1);","    // remove the smallest","    this.extractMinimum();","  };","  ","  /**","   * Decreases the key value for a heap node, given the new value to take on.","   * The structure of the heap may be changed and will not be consolidated. ","   * Running time: O(1) amortized.","   * @memberof FibonacciHeap","   */","  var _decreaseKey = function (minimum, node, key) {","    // set node key","    node.key = key;","    // get parent node","    var parent = node.parent;","    if (parent && smaller(node.key, parent.key)) {","      // remove node from parent","      _cut(minimum, node, parent);","      // remove all nodes from parent to the root parent","      _cascadingCut(minimum, parent);","    }","    // update minimum node if needed","    if (smaller(node.key, minimum.key))","      minimum = node;","    // return minimum","    return minimum;","  };","  ","  /**","   * The reverse of the link operation: removes node from the child list of parent.","   * This method assumes that min is non-null. Running time: O(1).","   * @memberof FibonacciHeap","   */","  var _cut = function (minimum, node, parent) {","    // remove node from parent children and decrement Degree[parent]","    node.left.right = node.right;","    node.right.left = node.left;","    parent.degree--;","    // reset y.child if necessary","    if (parent.child == node)","      parent.child = node.right;","    // remove child if degree is 0","    if (parent.degree === 0)","      parent.child = null;","    // add node to root list of heap","    node.left = minimum;","    node.right = minimum.right;","    minimum.right = node;","    node.right.left = node;","    // set parent[node] to null","    node.parent = null;","    // set mark[node] to false","    node.mark = false;","  };","  ","  /**","   * Performs a cascading cut operation. This cuts node from its parent and then","   * does the same for its parent, and so on up the tree.","   * Running time: O(log n); O(1) excluding the recursion.","   * @memberof FibonacciHeap","   */","  var _cascadingCut= function (minimum, node) {","    // store parent node","    var parent = node.parent;","    // if there's a parent...","    if (!parent)","      return;","    // if node is unmarked, set it marked","    if (!node.mark) {","      node.mark = true;","    }","    else {","      // it's marked, cut it from parent","      _cut(minimum, node, parent);","      // cut its parent as well","      _cascadingCut(parent);","    }","  };","  ","  /**","   * Make the first node a child of the second one. Running time: O(1) actual.","   * @memberof FibonacciHeap","   */","  var _linkNodes = function (node, parent) {","    // remove node from root list of heap","    node.left.right = node.right;","    node.right.left = node.left;","    // make node a Child of parent","    node.parent = parent;","    if (!parent.child) {","      parent.child = node;","      node.right = node;","      node.left = node;","    }","    else {","      node.left = parent.child;","      node.right = parent.child.right;","      parent.child.right = node;","      node.right.left = node;","    }","    // increase degree[parent]","    parent.degree++;","    // set mark[node] false","    node.mark = false;","  };","  ","  var _findMinimumNode = function (minimum, size) {","    // to find trees of the same degree efficiently we use an array of length O(log n) in which we keep a pointer to one root of each degree","    var arraySize = Math.floor(Math.log(size) * oneOverLogPhi) + 1;","    // create list with initial capacity","    var array = new Array(arraySize);","    // find the number of root nodes.","    var numRoots = 0;","    var x = minimum;","    if (x) {","      numRoots++;","      x = x.right;","      while (x !== minimum) {","        numRoots++;","        x = x.right;","      }","    }","    // vars","    var y;","    // For each node in root list do...","    while (numRoots > 0) {","      // access this node's degree..","      var d = x.degree;","      // get next node","      var next = x.right;","      // check if there is a node already in array with the same degree","      while (true) {","        // get node with the same degree is any","        y = array[d];","        if (!y)","          break;","        // make one node with the same degree a child of the other, do this based on the key value.","        if (larger(x.key, y.key)) {","          var temp = y;","          y = x;","          x = temp;","        }","        // make y a child of x","        _linkNodes(y, x);","        // we have handled this degree, go to next one.","        array[d] = null;","        d++;","      }","      // save this node for later when we might encounter another of the same degree.","      array[d] = x;","      // move forward through list.","      x = next;","      numRoots--;","    }","    // Set min to null (effectively losing the root list) and reconstruct the root list from the array entries in array[].","    minimum = null;","    // loop nodes in array","    for (var i = 0; i < arraySize; i++) {","      // get current node","      y = array[i];","      if (!y)","        continue;","      // check if we have a linked list","      if (minimum) {","        // First remove node from root list.","        y.left.right = y.right;","        y.right.left = y.left;","        // now add to root list, again.","        y.left = minimum;","        y.right = minimum.right;","        minimum.right = y;","        y.right.left = y;","        // check if this is a new min.","        if (smaller(y.key, minimum.key))","          minimum = y;","      }","      else","        minimum = y;","    }","    return minimum;","  };","  ","  return FibonacciHeap;","}","","exports.name = 'FibonacciHeap';","exports.path = 'type';","exports.factory = factory;",""],"l":{"3":1,"5":0,"6":0,"8":0,"15":1,"16":0,"17":0,"20":0,"21":0,"27":0,"28":0,"36":0,"38":0,"44":0,"46":0,"48":0,"49":0,"50":0,"51":0,"53":0,"55":0,"60":0,"61":0,"63":0,"66":0,"68":0,"75":0,"76":0,"83":0,"84":0,"85":0,"92":0,"93":0,"101":0,"103":0,"105":0,"106":0,"108":0,"110":0,"112":0,"114":0,"116":0,"118":0,"119":0,"121":0,"122":0,"123":0,"124":0,"126":0,"127":0,"128":0,"131":0,"132":0,"134":0,"136":0,"140":0,"142":0,"145":0,"147":0,"149":0,"159":0,"161":0,"163":0,"172":0,"174":0,"176":0,"177":0,"179":0,"181":0,"184":0,"185":0,"187":0,"195":0,"197":0,"198":0,"199":0,"201":0,"202":0,"204":0,"205":0,"207":0,"208":0,"209":0,"210":0,"212":0,"214":0,"223":0,"225":0,"227":0,"228":0,"230":0,"231":0,"235":0,"237":0,"245":0,"247":0,"248":0,"250":0,"251":0,"252":0,"253":0,"254":0,"257":0,"258":0,"259":0,"260":0,"263":0,"265":0,"268":0,"270":0,"272":0,"274":0,"275":0,"276":0,"277":0,"278":0,"279":0,"280":0,"281":0,"285":0,"287":0,"289":0,"291":0,"293":0,"295":0,"296":0,"297":0,"299":0,"300":0,"301":0,"302":0,"305":0,"307":0,"308":0,"311":0,"313":0,"314":0,"317":0,"319":0,"321":0,"322":0,"323":0,"325":0,"327":0,"328":0,"330":0,"331":0,"332":0,"333":0,"335":0,"336":0,"339":0,"341":0,"344":0,"347":1,"348":1,"349":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/matrix/ImmutableDenseMatrix.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/matrix/ImmutableDenseMatrix.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":1,"78":1,"79":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0],"6":[0,0],"7":[0,0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0,0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0},"fnMap":{"1":{"name":"factory","line":11,"loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":38}}},"2":{"name":"ImmutableDenseMatrix","line":17,"loc":{"start":{"line":17,"column":2},"end":{"line":17,"column":48}}},"3":{"name":"(anonymous_3)","line":76,"loc":{"start":{"line":76,"column":42},"end":{"line":76,"column":59}}},"4":{"name":"(anonymous_4)","line":111,"loc":{"start":{"line":111,"column":39},"end":{"line":111,"column":51}}},"5":{"name":"(anonymous_5)","line":127,"loc":{"start":{"line":127,"column":42},"end":{"line":127,"column":54}}},"6":{"name":"(anonymous_6)","line":136,"loc":{"start":{"line":136,"column":43},"end":{"line":136,"column":55}}},"7":{"name":"(anonymous_7)","line":144,"loc":{"start":{"line":144,"column":41},"end":{"line":144,"column":53}}},"8":{"name":"(anonymous_8)","line":157,"loc":{"start":{"line":157,"column":42},"end":{"line":157,"column":54}}},"9":{"name":"(anonymous_9)","line":173,"loc":{"start":{"line":173,"column":34},"end":{"line":173,"column":50}}},"10":{"name":"(anonymous_10)","line":185,"loc":{"start":{"line":185,"column":44},"end":{"line":185,"column":56}}},"11":{"name":"(anonymous_11)","line":193,"loc":{"start":{"line":193,"column":39},"end":{"line":193,"column":51}}},"12":{"name":"(anonymous_12)","line":199,"loc":{"start":{"line":199,"column":19},"end":{"line":199,"column":32}}},"13":{"name":"(anonymous_13)","line":212,"loc":{"start":{"line":212,"column":39},"end":{"line":212,"column":51}}},"14":{"name":"(anonymous_14)","line":218,"loc":{"start":{"line":218,"column":19},"end":{"line":218,"column":32}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":40}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":25}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":25}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":28}},"5":{"start":{"line":9,"column":0},"end":{"line":9,"column":31}},"6":{"start":{"line":11,"column":0},"end":{"line":229,"column":1}},"7":{"start":{"line":13,"column":2},"end":{"line":13,"column":51}},"8":{"start":{"line":15,"column":2},"end":{"line":15,"column":67}},"9":{"start":{"line":17,"column":2},"end":{"line":53,"column":3}},"10":{"start":{"line":18,"column":4},"end":{"line":19,"column":80}},"11":{"start":{"line":19,"column":6},"end":{"line":19,"column":80}},"12":{"start":{"line":20,"column":4},"end":{"line":21,"column":55}},"13":{"start":{"line":21,"column":6},"end":{"line":21,"column":55}},"14":{"start":{"line":23,"column":4},"end":{"line":52,"column":5}},"15":{"start":{"line":25,"column":6},"end":{"line":25,"column":51}},"16":{"start":{"line":27,"column":6},"end":{"line":27,"column":32}},"17":{"start":{"line":28,"column":6},"end":{"line":28,"column":32}},"18":{"start":{"line":29,"column":6},"end":{"line":29,"column":40}},"19":{"start":{"line":30,"column":6},"end":{"line":30,"column":23}},"20":{"start":{"line":31,"column":6},"end":{"line":31,"column":23}},"21":{"start":{"line":33,"column":9},"end":{"line":52,"column":5}},"22":{"start":{"line":35,"column":6},"end":{"line":35,"column":29}},"23":{"start":{"line":36,"column":6},"end":{"line":36,"column":29}},"24":{"start":{"line":37,"column":6},"end":{"line":37,"column":37}},"25":{"start":{"line":38,"column":6},"end":{"line":38,"column":68}},"26":{"start":{"line":39,"column":6},"end":{"line":39,"column":68}},"27":{"start":{"line":41,"column":9},"end":{"line":52,"column":5}},"28":{"start":{"line":43,"column":6},"end":{"line":43,"column":86}},"29":{"start":{"line":47,"column":6},"end":{"line":47,"column":22}},"30":{"start":{"line":48,"column":6},"end":{"line":48,"column":23}},"31":{"start":{"line":49,"column":6},"end":{"line":49,"column":32}},"32":{"start":{"line":50,"column":6},"end":{"line":50,"column":23}},"33":{"start":{"line":51,"column":6},"end":{"line":51,"column":23}},"34":{"start":{"line":55,"column":2},"end":{"line":55,"column":53}},"35":{"start":{"line":60,"column":2},"end":{"line":60,"column":63}},"36":{"start":{"line":61,"column":2},"end":{"line":61,"column":63}},"37":{"start":{"line":76,"column":2},"end":{"line":100,"column":4}},"38":{"start":{"line":77,"column":4},"end":{"line":99,"column":5}},"39":{"start":{"line":80,"column":8},"end":{"line":80,"column":63}},"40":{"start":{"line":82,"column":8},"end":{"line":89,"column":9}},"41":{"start":{"line":84,"column":10},"end":{"line":88,"column":13}},"42":{"start":{"line":90,"column":8},"end":{"line":90,"column":17}},"43":{"start":{"line":95,"column":8},"end":{"line":95,"column":84}},"44":{"start":{"line":98,"column":8},"end":{"line":98,"column":59}},"45":{"start":{"line":111,"column":2},"end":{"line":113,"column":4}},"46":{"start":{"line":112,"column":4},"end":{"line":112,"column":73}},"47":{"start":{"line":127,"column":2},"end":{"line":129,"column":4}},"48":{"start":{"line":128,"column":4},"end":{"line":128,"column":76}},"49":{"start":{"line":136,"column":2},"end":{"line":138,"column":4}},"50":{"start":{"line":137,"column":4},"end":{"line":137,"column":77}},"51":{"start":{"line":144,"column":2},"end":{"line":151,"column":4}},"52":{"start":{"line":145,"column":4},"end":{"line":149,"column":7}},"53":{"start":{"line":150,"column":4},"end":{"line":150,"column":13}},"54":{"start":{"line":157,"column":2},"end":{"line":164,"column":4}},"55":{"start":{"line":158,"column":4},"end":{"line":163,"column":6}},"56":{"start":{"line":173,"column":2},"end":{"line":175,"column":4}},"57":{"start":{"line":174,"column":4},"end":{"line":174,"column":42}},"58":{"start":{"line":185,"column":2},"end":{"line":187,"column":4}},"59":{"start":{"line":186,"column":4},"end":{"line":186,"column":78}},"60":{"start":{"line":193,"column":2},"end":{"line":206,"column":4}},"61":{"start":{"line":195,"column":4},"end":{"line":204,"column":5}},"62":{"start":{"line":197,"column":6},"end":{"line":197,"column":19}},"63":{"start":{"line":199,"column":6},"end":{"line":202,"column":9}},"64":{"start":{"line":200,"column":8},"end":{"line":201,"column":16}},"65":{"start":{"line":201,"column":10},"end":{"line":201,"column":16}},"66":{"start":{"line":203,"column":6},"end":{"line":203,"column":45}},"67":{"start":{"line":205,"column":4},"end":{"line":205,"column":21}},"68":{"start":{"line":212,"column":2},"end":{"line":225,"column":4}},"69":{"start":{"line":214,"column":4},"end":{"line":223,"column":5}},"70":{"start":{"line":216,"column":6},"end":{"line":216,"column":19}},"71":{"start":{"line":218,"column":6},"end":{"line":221,"column":9}},"72":{"start":{"line":219,"column":8},"end":{"line":220,"column":16}},"73":{"start":{"line":220,"column":10},"end":{"line":220,"column":16}},"74":{"start":{"line":222,"column":6},"end":{"line":222,"column":45}},"75":{"start":{"line":224,"column":4},"end":{"line":224,"column":21}},"76":{"start":{"line":228,"column":2},"end":{"line":228,"column":30}},"77":{"start":{"line":231,"column":0},"end":{"line":231,"column":38}},"78":{"start":{"line":232,"column":0},"end":{"line":232,"column":22}},"79":{"start":{"line":233,"column":0},"end":{"line":233,"column":26}}},"branchMap":{"1":{"line":18,"type":"if","locations":[{"start":{"line":18,"column":4},"end":{"line":18,"column":4}},{"start":{"line":18,"column":4},"end":{"line":18,"column":4}}]},"2":{"line":20,"type":"if","locations":[{"start":{"line":20,"column":4},"end":{"line":20,"column":4}},{"start":{"line":20,"column":4},"end":{"line":20,"column":4}}]},"3":{"line":20,"type":"binary-expr","locations":[{"start":{"line":20,"column":8},"end":{"line":20,"column":16}},{"start":{"line":20,"column":20},"end":{"line":20,"column":39}}]},"4":{"line":23,"type":"if","locations":[{"start":{"line":23,"column":4},"end":{"line":23,"column":4}},{"start":{"line":23,"column":4},"end":{"line":23,"column":4}}]},"5":{"line":23,"type":"binary-expr","locations":[{"start":{"line":23,"column":9},"end":{"line":23,"column":13}},{"start":{"line":23,"column":17},"end":{"line":23,"column":39}},{"start":{"line":23,"column":44},"end":{"line":23,"column":57}}]},"6":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":9},"end":{"line":33,"column":9}},{"start":{"line":33,"column":9},"end":{"line":33,"column":9}}]},"7":{"line":33,"type":"binary-expr","locations":[{"start":{"line":33,"column":13},"end":{"line":33,"column":17}},{"start":{"line":33,"column":21},"end":{"line":33,"column":39}},{"start":{"line":33,"column":43},"end":{"line":33,"column":61}}]},"8":{"line":38,"type":"cond-expr","locations":[{"start":{"line":38,"column":52},"end":{"line":38,"column":60}},{"start":{"line":38,"column":63},"end":{"line":38,"column":67}}]},"9":{"line":39,"type":"cond-expr","locations":[{"start":{"line":39,"column":52},"end":{"line":39,"column":60}},{"start":{"line":39,"column":63},"end":{"line":39,"column":67}}]},"10":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":9},"end":{"line":41,"column":9}},{"start":{"line":41,"column":9},"end":{"line":41,"column":9}}]},"11":{"line":77,"type":"switch","locations":[{"start":{"line":78,"column":6},"end":{"line":90,"column":17}},{"start":{"line":93,"column":6},"end":{"line":93,"column":13}},{"start":{"line":94,"column":6},"end":{"line":95,"column":84}},{"start":{"line":97,"column":6},"end":{"line":98,"column":59}}]},"12":{"line":82,"type":"if","locations":[{"start":{"line":82,"column":8},"end":{"line":82,"column":8}},{"start":{"line":82,"column":8},"end":{"line":82,"column":8}}]},"13":{"line":195,"type":"if","locations":[{"start":{"line":195,"column":4},"end":{"line":195,"column":4}},{"start":{"line":195,"column":4},"end":{"line":195,"column":4}}]},"14":{"line":200,"type":"if","locations":[{"start":{"line":200,"column":8},"end":{"line":200,"column":8}},{"start":{"line":200,"column":8},"end":{"line":200,"column":8}}]},"15":{"line":200,"type":"binary-expr","locations":[{"start":{"line":200,"column":12},"end":{"line":200,"column":22}},{"start":{"line":200,"column":26},"end":{"line":200,"column":39}}]},"16":{"line":203,"type":"cond-expr","locations":[{"start":{"line":203,"column":31},"end":{"line":203,"column":32}},{"start":{"line":203,"column":35},"end":{"line":203,"column":44}}]},"17":{"line":214,"type":"if","locations":[{"start":{"line":214,"column":4},"end":{"line":214,"column":4}},{"start":{"line":214,"column":4},"end":{"line":214,"column":4}}]},"18":{"line":219,"type":"if","locations":[{"start":{"line":219,"column":8},"end":{"line":219,"column":8}},{"start":{"line":219,"column":8},"end":{"line":219,"column":8}}]},"19":{"line":219,"type":"binary-expr","locations":[{"start":{"line":219,"column":12},"end":{"line":219,"column":22}},{"start":{"line":219,"column":26},"end":{"line":219,"column":39}}]},"20":{"line":222,"type":"cond-expr","locations":[{"start":{"line":222,"column":31},"end":{"line":222,"column":32}},{"start":{"line":222,"column":35},"end":{"line":222,"column":44}}]}},"code":["'use strict';","","var util = require('../../utils/index');","","var string = util.string;","var object = util.object;","","var isArray = Array.isArray;","var isString = string.isString;","","function factory (type, config, load) {","","  var DenseMatrix = load(require('./DenseMatrix'));","","  var smaller = load(require('../../function/relational/smaller'));","","  function ImmutableDenseMatrix(data, datatype) {","    if (!(this instanceof ImmutableDenseMatrix))","      throw new SyntaxError('Constructor must be called with the new operator');","    if (datatype && !isString(datatype))","      throw new Error('Invalid datatype: ' + datatype);","","    if ((data && data.isMatrix === true) || isArray(data)) {","      // use DenseMatrix implementation","      var matrix = new DenseMatrix(data, datatype);","      // internal structures","      this._data = matrix._data;","      this._size = matrix._size;","      this._datatype = matrix._datatype;","      this._min = null;","      this._max = null;","    }","    else if (data && isArray(data.data) && isArray(data.size)) {","      // initialize fields from JSON representation","      this._data = data.data;","      this._size = data.size;","      this._datatype = data.datatype;","      this._min = typeof data.min !== 'undefined' ? data.min : null;","      this._max = typeof data.max !== 'undefined' ? data.max : null;","    }","    else if (data) {","      // unsupported type","      throw new TypeError('Unsupported type of data (' + util.types.type(data) + ')');","    }","    else {","      // nothing provided","      this._data = [];","      this._size = [0];","      this._datatype = datatype;","      this._min = null;","      this._max = null;","    }","  }","","  ImmutableDenseMatrix.prototype = new DenseMatrix();","","  /**","   * Attach type information","   */","  ImmutableDenseMatrix.prototype.type = 'ImmutableDenseMatrix';","  ImmutableDenseMatrix.prototype.isImmutableDenseMatrix = true;","","  /**","   * Get a subset of the matrix, or replace a subset of the matrix.","   *","   * Usage:","   *     var subset = matrix.subset(index)               // retrieve subset","   *     var value = matrix.subset(index, replacement)   // replace subset","   *","   * @param {Index} index","   * @param {Array | ImmutableDenseMatrix | *} [replacement]","   * @param {*} [defaultValue=0]      Default value, filled in on new entries when","   *                                  the matrix is resized. If not provided,","   *                                  new matrix elements will be filled with zeros.","   */","  ImmutableDenseMatrix.prototype.subset = function (index) {","    switch (arguments.length) {","      case 1:","        // use base implementation","        var m = DenseMatrix.prototype.subset.call(this, index);","        // check result is a matrix","        if (m.isMatrix) {","          // return immutable matrix","          return new ImmutableDenseMatrix({","            data: m._data,","            size: m._size,","            datatype: m._datatype","          });","        }","        return m;","        ","        // intentional fall through","      case 2:","      case 3:","        throw new Error('Cannot invoke set subset on an Immutable Matrix instance');","","      default:","        throw new SyntaxError('Wrong number of arguments');","    }","  };","","  /**","   * Replace a single element in the matrix.","   * @param {Number[]} index   Zero-based index","   * @param {*} value","   * @param {*} [defaultValue]        Default value, filled in on new entries when","   *                                  the matrix is resized. If not provided,","   *                                  new matrix elements will be left undefined.","   * @return {ImmutableDenseMatrix} self","   */","  ImmutableDenseMatrix.prototype.set = function () {","    throw new Error('Cannot invoke set on an Immutable Matrix instance');","  };","","  /**","   * Resize the matrix to the given size. Returns a copy of the matrix when","   * `copy=true`, otherwise return the matrix itself (resize in place).","   *","   * @param {Number[]} size           The new size the matrix should have.","   * @param {*} [defaultValue=0]      Default value, filled in on new entries.","   *                                  If not provided, the matrix elements will","   *                                  be filled with zeros.","   * @param {boolean} [copy]          Return a resized copy of the matrix","   *","   * @return {Matrix}                 The resized matrix","   */","  ImmutableDenseMatrix.prototype.resize = function () {","    throw new Error('Cannot invoke resize on an Immutable Matrix instance');","  };","","  /**","   * Disallows reshaping in favor of immutability.","   *","   * @throws {Error} Operation not allowed","   */","  ImmutableDenseMatrix.prototype.reshape = function () {","    throw new Error('Cannot invoke reshape on an Immutable Matrix instance');","  };","","  /**","   * Create a clone of the matrix","   * @return {ImmutableDenseMatrix} clone","   */","  ImmutableDenseMatrix.prototype.clone = function () {","    var m = new ImmutableDenseMatrix({","      data: object.clone(this._data),","      size: object.clone(this._size),","      datatype: this._datatype","    });","    return m;","  };","","  /**","   * Get a JSON representation of the matrix","   * @returns {Object}","   */","  ImmutableDenseMatrix.prototype.toJSON = function () {","    return {","      mathjs: 'ImmutableDenseMatrix',","      data: this._data,","      size: this._size,","      datatype: this._datatype","    };","  };","","  /**","   * Generate a matrix from a JSON object","   * @param {Object} json  An object structured like","   *                       `{\"mathjs\": \"ImmutableDenseMatrix\", data: [], size: []}`,","   *                       where mathjs is optional","   * @returns {ImmutableDenseMatrix}","   */","  ImmutableDenseMatrix.fromJSON = function (json) {","    return new ImmutableDenseMatrix(json);","  };","","  /**","   * Swap rows i and j in Matrix.","   *","   * @param {Number} i       Matrix row index 1","   * @param {Number} j       Matrix row index 2","   *","   * @return {Matrix}        The matrix reference","   */","  ImmutableDenseMatrix.prototype.swapRows = function () {","    throw new Error('Cannot invoke swapRows on an Immutable Matrix instance');","  };","","  /**","   * Calculate the minimum value in the set","   * @return {Number | undefined} min","   */","  ImmutableDenseMatrix.prototype.min = function () {","    // check min has been calculated before","    if (this._min === null) {","      // minimum","      var m = null;","      // compute min","      this.forEach(function (v) {","        if (m === null || smaller(v, m))","          m = v;","      });","      this._min = m !== null ? m : undefined;","    }","    return this._min;","  };","","  /**","   * Calculate the maximum value in the set","   * @return {Number | undefined} max","   */","  ImmutableDenseMatrix.prototype.max = function () {","    // check max has been calculated before","    if (this._max === null) {","      // maximum","      var m = null;","      // compute max","      this.forEach(function (v) {","        if (m === null || smaller(m, v))","          m = v;","      });","      this._max = m !== null ? m : undefined;","    }","    return this._max;","  };","","  // exports","  return ImmutableDenseMatrix;","}","","exports.name = 'ImmutableDenseMatrix';","exports.path = 'type';","exports.factory = factory;",""],"l":{"3":1,"5":1,"6":1,"8":1,"9":1,"11":1,"13":0,"15":0,"17":1,"18":0,"19":0,"20":0,"21":0,"23":0,"25":0,"27":0,"28":0,"29":0,"30":0,"31":0,"33":0,"35":0,"36":0,"37":0,"38":0,"39":0,"41":0,"43":0,"47":0,"48":0,"49":0,"50":0,"51":0,"55":0,"60":0,"61":0,"76":0,"77":0,"80":0,"82":0,"84":0,"90":0,"95":0,"98":0,"111":0,"112":0,"127":0,"128":0,"136":0,"137":0,"144":0,"145":0,"150":0,"157":0,"158":0,"173":0,"174":0,"185":0,"186":0,"193":0,"195":0,"197":0,"199":0,"200":0,"201":0,"203":0,"205":0,"212":0,"214":0,"216":0,"218":0,"219":0,"220":0,"222":0,"224":0,"228":0,"231":1,"232":1,"233":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/matrix/MatrixIndex.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/matrix/MatrixIndex.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":1,"91":1,"92":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},"fnMap":{"1":{"name":"factory","line":6,"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":24}}},"2":{"name":"Index","line":28,"loc":{"start":{"line":28,"column":2},"end":{"line":28,"column":25}}},"3":{"name":"_createImmutableMatrix","line":74,"loc":{"start":{"line":74,"column":2},"end":{"line":74,"column":39}}},"4":{"name":"(anonymous_4)","line":90,"loc":{"start":{"line":90,"column":26},"end":{"line":90,"column":38}}},"5":{"name":"(anonymous_5)","line":104,"loc":{"start":{"line":104,"column":17},"end":{"line":104,"column":35}}},"6":{"name":"(anonymous_6)","line":115,"loc":{"start":{"line":115,"column":25},"end":{"line":115,"column":37}}},"7":{"name":"(anonymous_7)","line":131,"loc":{"start":{"line":131,"column":24},"end":{"line":131,"column":36}}},"8":{"name":"(anonymous_8)","line":147,"loc":{"start":{"line":147,"column":24},"end":{"line":147,"column":36}}},"9":{"name":"(anonymous_9)","line":165,"loc":{"start":{"line":165,"column":28},"end":{"line":165,"column":48}}},"10":{"name":"(anonymous_10)","line":177,"loc":{"start":{"line":177,"column":30},"end":{"line":177,"column":45}}},"11":{"name":"(anonymous_11)","line":185,"loc":{"start":{"line":185,"column":37},"end":{"line":185,"column":49}}},"12":{"name":"(anonymous_12)","line":194,"loc":{"start":{"line":194,"column":38},"end":{"line":194,"column":50}}},"13":{"name":"(anonymous_13)","line":206,"loc":{"start":{"line":206,"column":29},"end":{"line":206,"column":41}}},"14":{"name":"(anonymous_14)","line":216,"loc":{"start":{"line":216,"column":28},"end":{"line":216,"column":40}}},"15":{"name":"(anonymous_15)","line":238,"loc":{"start":{"line":238,"column":29},"end":{"line":238,"column":41}}},"16":{"name":"(anonymous_16)","line":260,"loc":{"start":{"line":260,"column":27},"end":{"line":260,"column":39}}},"17":{"name":"(anonymous_17)","line":274,"loc":{"start":{"line":274,"column":19},"end":{"line":274,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":48}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":56}},"3":{"start":{"line":6,"column":0},"end":{"line":279,"column":1}},"4":{"start":{"line":28,"column":2},"end":{"line":66,"column":3}},"5":{"start":{"line":29,"column":4},"end":{"line":31,"column":5}},"6":{"start":{"line":30,"column":6},"end":{"line":30,"column":80}},"7":{"start":{"line":33,"column":4},"end":{"line":33,"column":26}},"8":{"start":{"line":34,"column":4},"end":{"line":34,"column":26}},"9":{"start":{"line":36,"column":4},"end":{"line":65,"column":5}},"10":{"start":{"line":37,"column":6},"end":{"line":37,"column":29}},"11":{"start":{"line":39,"column":6},"end":{"line":64,"column":7}},"12":{"start":{"line":40,"column":8},"end":{"line":40,"column":35}},"13":{"start":{"line":41,"column":8},"end":{"line":41,"column":31}},"14":{"start":{"line":43,"column":11},"end":{"line":64,"column":7}},"15":{"start":{"line":45,"column":8},"end":{"line":45,"column":54}},"16":{"start":{"line":46,"column":8},"end":{"line":46,"column":33}},"17":{"start":{"line":48,"column":8},"end":{"line":48,"column":28}},"18":{"start":{"line":50,"column":8},"end":{"line":52,"column":9}},"19":{"start":{"line":51,"column":10},"end":{"line":51,"column":33}},"20":{"start":{"line":54,"column":11},"end":{"line":64,"column":7}},"21":{"start":{"line":55,"column":8},"end":{"line":55,"column":61}},"22":{"start":{"line":57,"column":11},"end":{"line":64,"column":7}},"23":{"start":{"line":59,"column":8},"end":{"line":59,"column":35}},"24":{"start":{"line":63,"column":8},"end":{"line":63,"column":92}},"25":{"start":{"line":71,"column":2},"end":{"line":71,"column":33}},"26":{"start":{"line":72,"column":2},"end":{"line":72,"column":33}},"27":{"start":{"line":74,"column":2},"end":{"line":83,"column":3}},"28":{"start":{"line":76,"column":4},"end":{"line":80,"column":5}},"29":{"start":{"line":77,"column":6},"end":{"line":79,"column":7}},"30":{"start":{"line":78,"column":8},"end":{"line":78,"column":81}},"31":{"start":{"line":82,"column":4},"end":{"line":82,"column":46}},"32":{"start":{"line":90,"column":2},"end":{"line":95,"column":4}},"33":{"start":{"line":91,"column":4},"end":{"line":91,"column":28}},"34":{"start":{"line":92,"column":4},"end":{"line":92,"column":48}},"35":{"start":{"line":93,"column":4},"end":{"line":93,"column":37}},"36":{"start":{"line":94,"column":4},"end":{"line":94,"column":17}},"37":{"start":{"line":104,"column":2},"end":{"line":108,"column":4}},"38":{"start":{"line":105,"column":4},"end":{"line":105,"column":28}},"39":{"start":{"line":106,"column":4},"end":{"line":106,"column":31}},"40":{"start":{"line":107,"column":4},"end":{"line":107,"column":17}},"41":{"start":{"line":115,"column":2},"end":{"line":124,"column":4}},"42":{"start":{"line":116,"column":4},"end":{"line":116,"column":18}},"43":{"start":{"line":118,"column":4},"end":{"line":121,"column":5}},"44":{"start":{"line":119,"column":6},"end":{"line":119,"column":34}},"45":{"start":{"line":120,"column":6},"end":{"line":120,"column":58}},"46":{"start":{"line":123,"column":4},"end":{"line":123,"column":16}},"47":{"start":{"line":131,"column":2},"end":{"line":140,"column":4}},"48":{"start":{"line":132,"column":4},"end":{"line":132,"column":20}},"49":{"start":{"line":134,"column":4},"end":{"line":137,"column":5}},"50":{"start":{"line":135,"column":6},"end":{"line":135,"column":38}},"51":{"start":{"line":136,"column":6},"end":{"line":136,"column":68}},"52":{"start":{"line":139,"column":4},"end":{"line":139,"column":18}},"53":{"start":{"line":147,"column":2},"end":{"line":156,"column":4}},"54":{"start":{"line":148,"column":4},"end":{"line":148,"column":20}},"55":{"start":{"line":150,"column":4},"end":{"line":153,"column":5}},"56":{"start":{"line":151,"column":6},"end":{"line":151,"column":38}},"57":{"start":{"line":152,"column":6},"end":{"line":152,"column":68}},"58":{"start":{"line":155,"column":4},"end":{"line":155,"column":18}},"59":{"start":{"line":165,"column":2},"end":{"line":169,"column":4}},"60":{"start":{"line":166,"column":4},"end":{"line":168,"column":5}},"61":{"start":{"line":167,"column":6},"end":{"line":167,"column":45}},"62":{"start":{"line":177,"column":2},"end":{"line":179,"column":4}},"63":{"start":{"line":178,"column":4},"end":{"line":178,"column":41}},"64":{"start":{"line":185,"column":2},"end":{"line":187,"column":4}},"65":{"start":{"line":186,"column":4},"end":{"line":186,"column":84}},"66":{"start":{"line":194,"column":2},"end":{"line":196,"column":4}},"67":{"start":{"line":195,"column":4},"end":{"line":195,"column":64}},"68":{"start":{"line":206,"column":2},"end":{"line":208,"column":4}},"69":{"start":{"line":207,"column":4},"end":{"line":207,"column":26}},"70":{"start":{"line":216,"column":2},"end":{"line":223,"column":4}},"71":{"start":{"line":217,"column":4},"end":{"line":217,"column":19}},"72":{"start":{"line":218,"column":4},"end":{"line":221,"column":5}},"73":{"start":{"line":219,"column":6},"end":{"line":219,"column":42}},"74":{"start":{"line":220,"column":6},"end":{"line":220,"column":84}},"75":{"start":{"line":222,"column":4},"end":{"line":222,"column":17}},"76":{"start":{"line":231,"column":2},"end":{"line":231,"column":52}},"77":{"start":{"line":238,"column":2},"end":{"line":252,"column":4}},"78":{"start":{"line":239,"column":4},"end":{"line":239,"column":21}},"79":{"start":{"line":241,"column":4},"end":{"line":249,"column":5}},"80":{"start":{"line":242,"column":6},"end":{"line":242,"column":42}},"81":{"start":{"line":243,"column":6},"end":{"line":248,"column":7}},"82":{"start":{"line":244,"column":8},"end":{"line":244,"column":48}},"83":{"start":{"line":247,"column":8},"end":{"line":247,"column":43}},"84":{"start":{"line":251,"column":4},"end":{"line":251,"column":42}},"85":{"start":{"line":260,"column":2},"end":{"line":265,"column":4}},"86":{"start":{"line":261,"column":4},"end":{"line":264,"column":6}},"87":{"start":{"line":274,"column":2},"end":{"line":276,"column":4}},"88":{"start":{"line":275,"column":4},"end":{"line":275,"column":41}},"89":{"start":{"line":278,"column":2},"end":{"line":278,"column":15}},"90":{"start":{"line":281,"column":0},"end":{"line":281,"column":23}},"91":{"start":{"line":282,"column":0},"end":{"line":282,"column":22}},"92":{"start":{"line":283,"column":0},"end":{"line":283,"column":26}}},"branchMap":{"1":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":4},"end":{"line":29,"column":4}},{"start":{"line":29,"column":4},"end":{"line":29,"column":4}}]},"2":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":6},"end":{"line":39,"column":6}},{"start":{"line":39,"column":6},"end":{"line":39,"column":6}}]},"3":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":10},"end":{"line":39,"column":13}},{"start":{"line":39,"column":18},"end":{"line":39,"column":38}}]},"4":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":11},"end":{"line":43,"column":11}},{"start":{"line":43,"column":11},"end":{"line":43,"column":11}}]},"5":{"line":43,"type":"binary-expr","locations":[{"start":{"line":43,"column":15},"end":{"line":43,"column":18}},{"start":{"line":43,"column":23},"end":{"line":43,"column":41}},{"start":{"line":43,"column":45},"end":{"line":43,"column":66}}]},"6":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":8},"end":{"line":50,"column":8}},{"start":{"line":50,"column":8},"end":{"line":50,"column":8}}]},"7":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":12},"end":{"line":50,"column":29}},{"start":{"line":50,"column":33},"end":{"line":50,"column":46}}]},"8":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":11},"end":{"line":54,"column":11}},{"start":{"line":54,"column":11},"end":{"line":54,"column":11}}]},"9":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":11},"end":{"line":57,"column":11}},{"start":{"line":57,"column":11},"end":{"line":57,"column":11}}]},"10":{"line":77,"type":"if","locations":[{"start":{"line":77,"column":6},"end":{"line":77,"column":6}},{"start":{"line":77,"column":6},"end":{"line":77,"column":6}}]},"11":{"line":77,"type":"binary-expr","locations":[{"start":{"line":77,"column":10},"end":{"line":77,"column":36}},{"start":{"line":77,"column":40},"end":{"line":77,"column":58}}]},"12":{"line":120,"type":"cond-expr","locations":[{"start":{"line":120,"column":42},"end":{"line":120,"column":43}},{"start":{"line":120,"column":46},"end":{"line":120,"column":57}}]},"13":{"line":136,"type":"cond-expr","locations":[{"start":{"line":136,"column":48},"end":{"line":136,"column":53}},{"start":{"line":136,"column":56},"end":{"line":136,"column":67}}]},"14":{"line":152,"type":"cond-expr","locations":[{"start":{"line":152,"column":48},"end":{"line":152,"column":53}},{"start":{"line":152,"column":56},"end":{"line":152,"column":67}}]},"15":{"line":178,"type":"binary-expr","locations":[{"start":{"line":178,"column":11},"end":{"line":178,"column":32}},{"start":{"line":178,"column":36},"end":{"line":178,"column":40}}]},"16":{"line":186,"type":"binary-expr","locations":[{"start":{"line":186,"column":11},"end":{"line":186,"column":40}},{"start":{"line":186,"column":44},"end":{"line":186,"column":83}}]},"17":{"line":195,"type":"cond-expr","locations":[{"start":{"line":195,"column":37},"end":{"line":195,"column":56}},{"start":{"line":195,"column":59},"end":{"line":195,"column":63}}]},"18":{"line":220,"type":"cond-expr","locations":[{"start":{"line":220,"column":51},"end":{"line":220,"column":60}},{"start":{"line":220,"column":63},"end":{"line":220,"column":82}}]},"19":{"line":243,"type":"if","locations":[{"start":{"line":243,"column":6},"end":{"line":243,"column":6}},{"start":{"line":243,"column":6},"end":{"line":243,"column":6}}]}},"code":["'use strict';","","var clone = require('../../utils/object').clone;","var isInteger = require('../../utils/number').isInteger;","","function factory (type) {","  ","  /**","   * Create an index. An Index can store ranges and sets for multiple dimensions.","   * Matrix.get, Matrix.set, and math.subset accept an Index as input.","   *","   * Usage:","   *     var index = new Index(range1, range2, matrix1, array1, ...);","   *","   * Where each parameter can be any of:","   *     A number","   *     A string (containing a name of an object property)","   *     An instance of Range","   *     An Array with the Set values","   *     A Matrix with the Set values","   *","   * The parameters start, end, and step must be integer numbers.","   *","   * @class Index","   * @Constructor Index","   * @param {...*} ranges","   */","  function Index(ranges) {","    if (!(this instanceof Index)) {","      throw new SyntaxError('Constructor must be called with the new operator');","    }","","    this._dimensions = [];","    this._isScalar = true;","","    for (var i = 0, ii = arguments.length; i < ii; i++) {","      var arg = arguments[i];","","      if (arg && (arg.isRange === true)) {","        this._dimensions.push(arg);","        this._isScalar = false;","      }","      else if (arg && (Array.isArray(arg) || arg.isMatrix === true)) {","        // create matrix","        var m = _createImmutableMatrix(arg.valueOf());","        this._dimensions.push(m);","        // size","        var size = m.size();","        // scalar","        if (size.length !== 1 || size[0] !== 1) {","          this._isScalar = false;","        }","      }","      else if (typeof arg === 'number') {","        this._dimensions.push(_createImmutableMatrix([arg]));","      }","      else if (typeof arg === 'string') {","        // object property (arguments.count should be 1)","        this._dimensions.push(arg);","      }","      // TODO: implement support for wildcard '*'","      else {","        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');","      }","    }","  }","","  /**","   * Attach type information","   */","  Index.prototype.type = 'Index';","  Index.prototype.isIndex = true;","","  function _createImmutableMatrix(arg) {","    // loop array elements","    for (var i = 0, l = arg.length; i < l; i++) {","      if (typeof arg[i] !== 'number' || !isInteger(arg[i])) {","        throw new TypeError('Index parameters must be positive integer numbers');","      }","    }","    // create matrix","    return new type.ImmutableDenseMatrix(arg);","  }","","  /**","   * Create a clone of the index","   * @memberof Index","   * @return {Index} clone","   */","  Index.prototype.clone = function () {","    var index = new Index();","    index._dimensions = clone(this._dimensions);","    index._isScalar = this._isScalar;","    return index;","  };","","  /**","   * Create an index from an array with ranges/numbers","   * @memberof Index","   * @param {Array.<Array | number>} ranges","   * @return {Index} index","   * @private","   */","  Index.create = function (ranges) {","    var index = new Index();","    Index.apply(index, ranges);","    return index;","  };","","  /**","   * Retrieve the size of the index, the number of elements for each dimension.","   * @memberof Index","   * @returns {number[]} size","   */","  Index.prototype.size = function () {","    var size = [];","","    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {","      var d = this._dimensions[i];","      size[i] = (typeof d === 'string') ? 1 : d.size()[0];","    }","","    return size;","  };","","  /**","   * Get the maximum value for each of the indexes ranges.","   * @memberof Index","   * @returns {number[]} max","   */","  Index.prototype.max = function () {","    var values = [];","","    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {","      var range = this._dimensions[i];","      values[i] = (typeof range === 'string') ? range : range.max();","    }","","    return values;","  };","","  /**","   * Get the minimum value for each of the indexes ranges.","   * @memberof Index","   * @returns {number[]} min","   */","  Index.prototype.min = function () {","    var values = [];","","    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {","      var range = this._dimensions[i];","      values[i] = (typeof range === 'string') ? range : range.min();","    }","","    return values;","  };","","  /**","   * Loop over each of the ranges of the index","   * @memberof Index","   * @param {Function} callback   Called for each range with a Range as first","   *                              argument, the dimension as second, and the","   *                              index object as third.","   */","  Index.prototype.forEach = function (callback) {","    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {","      callback(this._dimensions[i], i, this);","    }","  };","","  /**","   * Retrieve the dimension for the given index","   * @memberof Index","   * @param {Number} dim                  Number of the dimension","   * @returns {Range | null} range","   */","  Index.prototype.dimension = function (dim) {","    return this._dimensions[dim] || null;","  };","","  /**","   * Test whether this index contains an object property","   * @returns {boolean} Returns true if the index is an object property","   */","  Index.prototype.isObjectProperty = function () {","    return this._dimensions.length === 1 && typeof this._dimensions[0] === 'string';","  };","","  /**","   * Returns the object property name when the Index holds a single object property,","   * else returns null","   * @returns {string | null}","   */","  Index.prototype.getObjectProperty = function () {","    return this.isObjectProperty() ? this._dimensions[0] : null;","  };","","  /**","   * Test whether this index contains only a single value.","   *","   * This is the case when the index is created with only scalar values as ranges,","   * not for ranges resolving into a single value.","   * @memberof Index","   * @return {boolean} isScalar","   */","  Index.prototype.isScalar = function () {","    return this._isScalar;","  };","","  /**","   * Expand the Index into an array.","   * For example new Index([0,3], [2,7]) returns [[0,1,2], [2,3,4,5,6]]","   * @memberof Index","   * @returns {Array} array","   */","  Index.prototype.toArray = function () {","    var array = [];","    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {","      var dimension = this._dimensions[i];","      array.push((typeof dimension === 'string') ? dimension : dimension.toArray());","    }","    return array;","  };","","  /**","   * Get the primitive value of the Index, a two dimensional array.","   * Equivalent to Index.toArray().","   * @memberof Index","   * @returns {Array} array","   */","  Index.prototype.valueOf = Index.prototype.toArray;","","  /**","   * Get the string representation of the index, for example '[2:6]' or '[0:2:10, 4:7, [1,2,3]]'","   * @memberof Index","   * @returns {String} str","   */","  Index.prototype.toString = function () {","    var strings = [];","","    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {","      var dimension = this._dimensions[i];","      if (typeof dimension === 'string') {","        strings.push(JSON.stringify(dimension));","      }","      else {","        strings.push(dimension.toString());","      }","    }","","    return '[' + strings.join(', ') + ']';","  };","","  /**","   * Get a JSON representation of the Index","   * @memberof Index","   * @returns {Object} Returns a JSON object structured as:","   *                   `{\"mathjs\": \"Index\", \"ranges\": [{\"mathjs\": \"Range\", start: 0, end: 10, step:1}, ...]}`","   */","  Index.prototype.toJSON = function () {","    return {","      mathjs: 'Index',","      dimensions: this._dimensions","    };","  };","","  /**","   * Instantiate an Index from a JSON object","   * @memberof Index","   * @param {Object} json A JSON object structured as:","   *                     `{\"mathjs\": \"Index\", \"dimensions\": [{\"mathjs\": \"Range\", start: 0, end: 10, step:1}, ...]}`","   * @return {Index}","   */","  Index.fromJSON = function (json) {","    return Index.create(json.dimensions);","  };","","  return Index;","}","","exports.name = 'Index';","exports.path = 'type';","exports.factory = factory;",""],"l":{"3":1,"4":1,"6":1,"28":1,"29":0,"30":0,"33":0,"34":0,"36":0,"37":0,"39":0,"40":0,"41":0,"43":0,"45":0,"46":0,"48":0,"50":0,"51":0,"54":0,"55":0,"57":0,"59":0,"63":0,"71":0,"72":0,"74":1,"76":0,"77":0,"78":0,"82":0,"90":0,"91":0,"92":0,"93":0,"94":0,"104":0,"105":0,"106":0,"107":0,"115":0,"116":0,"118":0,"119":0,"120":0,"123":0,"131":0,"132":0,"134":0,"135":0,"136":0,"139":0,"147":0,"148":0,"150":0,"151":0,"152":0,"155":0,"165":0,"166":0,"167":0,"177":0,"178":0,"185":0,"186":0,"194":0,"195":0,"206":0,"207":0,"216":0,"217":0,"218":0,"219":0,"220":0,"222":0,"231":0,"238":0,"239":0,"241":0,"242":0,"243":0,"244":0,"247":0,"251":0,"260":0,"261":0,"274":0,"275":0,"278":0,"281":1,"282":1,"283":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/matrix/Range.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/matrix/Range.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":1,"106":1,"107":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"Range","line":35,"loc":{"start":{"line":35,"column":2},"end":{"line":35,"column":35}}},"3":{"name":"(anonymous_3)","line":79,"loc":{"start":{"line":79,"column":16},"end":{"line":79,"column":31}}},"4":{"name":"(anonymous_4)","line":85,"loc":{"start":{"line":85,"column":24},"end":{"line":85,"column":39}}},"5":{"name":"(anonymous_5)","line":89,"loc":{"start":{"line":89,"column":28},"end":{"line":89,"column":43}}},"6":{"name":"(anonymous_6)","line":110,"loc":{"start":{"line":110,"column":26},"end":{"line":110,"column":38}}},"7":{"name":"(anonymous_7)","line":120,"loc":{"start":{"line":120,"column":25},"end":{"line":120,"column":37}}},"8":{"name":"(anonymous_8)","line":145,"loc":{"start":{"line":145,"column":24},"end":{"line":145,"column":36}}},"9":{"name":"(anonymous_9)","line":168,"loc":{"start":{"line":168,"column":24},"end":{"line":168,"column":36}}},"10":{"name":"(anonymous_10)","line":194,"loc":{"start":{"line":194,"column":28},"end":{"line":194,"column":48}}},"11":{"name":"(anonymous_11)","line":225,"loc":{"start":{"line":225,"column":24},"end":{"line":225,"column":44}}},"12":{"name":"(anonymous_12)","line":227,"loc":{"start":{"line":227,"column":17},"end":{"line":227,"column":46}}},"13":{"name":"(anonymous_13)","line":238,"loc":{"start":{"line":238,"column":28},"end":{"line":238,"column":40}}},"14":{"name":"(anonymous_14)","line":240,"loc":{"start":{"line":240,"column":17},"end":{"line":240,"column":41}}},"15":{"name":"(anonymous_15)","line":251,"loc":{"start":{"line":251,"column":28},"end":{"line":251,"column":40}}},"16":{"name":"(anonymous_16)","line":266,"loc":{"start":{"line":266,"column":27},"end":{"line":266,"column":46}}},"17":{"name":"(anonymous_17)","line":281,"loc":{"start":{"line":281,"column":29},"end":{"line":281,"column":41}}},"18":{"name":"(anonymous_18)","line":291,"loc":{"start":{"line":291,"column":27},"end":{"line":291,"column":39}}},"19":{"name":"(anonymous_19)","line":307,"loc":{"start":{"line":307,"column":19},"end":{"line":307,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":43}},"2":{"start":{"line":5,"column":0},"end":{"line":312,"column":1}},"3":{"start":{"line":35,"column":2},"end":{"line":62,"column":3}},"4":{"start":{"line":36,"column":4},"end":{"line":38,"column":5}},"5":{"start":{"line":37,"column":6},"end":{"line":37,"column":80}},"6":{"start":{"line":40,"column":4},"end":{"line":45,"column":5}},"7":{"start":{"line":41,"column":6},"end":{"line":44,"column":64}},"8":{"start":{"line":42,"column":8},"end":{"line":42,"column":33}},"9":{"start":{"line":43,"column":11},"end":{"line":44,"column":64}},"10":{"start":{"line":44,"column":8},"end":{"line":44,"column":64}},"11":{"start":{"line":46,"column":4},"end":{"line":51,"column":5}},"12":{"start":{"line":47,"column":6},"end":{"line":50,"column":62}},"13":{"start":{"line":48,"column":8},"end":{"line":48,"column":29}},"14":{"start":{"line":49,"column":11},"end":{"line":50,"column":62}},"15":{"start":{"line":50,"column":8},"end":{"line":50,"column":62}},"16":{"start":{"line":52,"column":4},"end":{"line":57,"column":5}},"17":{"start":{"line":53,"column":6},"end":{"line":56,"column":63}},"18":{"start":{"line":54,"column":8},"end":{"line":54,"column":31}},"19":{"start":{"line":55,"column":11},"end":{"line":56,"column":63}},"20":{"start":{"line":56,"column":8},"end":{"line":56,"column":63}},"21":{"start":{"line":59,"column":4},"end":{"line":59,"column":57}},"22":{"start":{"line":60,"column":4},"end":{"line":60,"column":57}},"23":{"start":{"line":61,"column":4},"end":{"line":61,"column":57}},"24":{"start":{"line":67,"column":2},"end":{"line":67,"column":33}},"25":{"start":{"line":68,"column":2},"end":{"line":68,"column":33}},"26":{"start":{"line":79,"column":2},"end":{"line":104,"column":4}},"27":{"start":{"line":80,"column":4},"end":{"line":82,"column":5}},"28":{"start":{"line":81,"column":6},"end":{"line":81,"column":18}},"29":{"start":{"line":84,"column":4},"end":{"line":84,"column":30}},"30":{"start":{"line":85,"column":4},"end":{"line":87,"column":7}},"31":{"start":{"line":86,"column":6},"end":{"line":86,"column":29}},"32":{"start":{"line":89,"column":4},"end":{"line":91,"column":7}},"33":{"start":{"line":90,"column":6},"end":{"line":90,"column":24}},"34":{"start":{"line":92,"column":4},"end":{"line":94,"column":5}},"35":{"start":{"line":93,"column":6},"end":{"line":93,"column":18}},"36":{"start":{"line":96,"column":4},"end":{"line":103,"column":5}},"37":{"start":{"line":98,"column":8},"end":{"line":98,"column":43}},"38":{"start":{"line":100,"column":8},"end":{"line":100,"column":52}},"39":{"start":{"line":102,"column":8},"end":{"line":102,"column":20}},"40":{"start":{"line":110,"column":2},"end":{"line":112,"column":4}},"41":{"start":{"line":111,"column":4},"end":{"line":111,"column":54}},"42":{"start":{"line":120,"column":2},"end":{"line":138,"column":4}},"43":{"start":{"line":121,"column":4},"end":{"line":125,"column":27}},"44":{"start":{"line":127,"column":4},"end":{"line":132,"column":5}},"45":{"start":{"line":128,"column":6},"end":{"line":128,"column":37}},"46":{"start":{"line":130,"column":9},"end":{"line":132,"column":5}},"47":{"start":{"line":131,"column":6},"end":{"line":131,"column":14}},"48":{"start":{"line":134,"column":4},"end":{"line":136,"column":5}},"49":{"start":{"line":135,"column":6},"end":{"line":135,"column":14}},"50":{"start":{"line":137,"column":4},"end":{"line":137,"column":17}},"51":{"start":{"line":145,"column":2},"end":{"line":161,"column":4}},"52":{"start":{"line":146,"column":4},"end":{"line":146,"column":30}},"53":{"start":{"line":148,"column":4},"end":{"line":160,"column":5}},"54":{"start":{"line":149,"column":6},"end":{"line":156,"column":7}},"55":{"start":{"line":151,"column":8},"end":{"line":151,"column":26}},"56":{"start":{"line":155,"column":8},"end":{"line":155,"column":51}},"57":{"start":{"line":159,"column":6},"end":{"line":159,"column":23}},"58":{"start":{"line":168,"column":2},"end":{"line":184,"column":4}},"59":{"start":{"line":169,"column":4},"end":{"line":169,"column":30}},"60":{"start":{"line":171,"column":4},"end":{"line":183,"column":5}},"61":{"start":{"line":172,"column":6},"end":{"line":179,"column":7}},"62":{"start":{"line":174,"column":8},"end":{"line":174,"column":51}},"63":{"start":{"line":178,"column":8},"end":{"line":178,"column":26}},"64":{"start":{"line":182,"column":6},"end":{"line":182,"column":23}},"65":{"start":{"line":194,"column":2},"end":{"line":214,"column":4}},"66":{"start":{"line":195,"column":4},"end":{"line":195,"column":23}},"67":{"start":{"line":196,"column":4},"end":{"line":196,"column":25}},"68":{"start":{"line":197,"column":4},"end":{"line":197,"column":23}},"69":{"start":{"line":198,"column":4},"end":{"line":198,"column":14}},"70":{"start":{"line":200,"column":4},"end":{"line":213,"column":5}},"71":{"start":{"line":201,"column":6},"end":{"line":205,"column":7}},"72":{"start":{"line":202,"column":8},"end":{"line":202,"column":31}},"73":{"start":{"line":203,"column":8},"end":{"line":203,"column":18}},"74":{"start":{"line":204,"column":8},"end":{"line":204,"column":12}},"75":{"start":{"line":207,"column":9},"end":{"line":213,"column":5}},"76":{"start":{"line":208,"column":6},"end":{"line":212,"column":7}},"77":{"start":{"line":209,"column":8},"end":{"line":209,"column":31}},"78":{"start":{"line":210,"column":8},"end":{"line":210,"column":18}},"79":{"start":{"line":211,"column":8},"end":{"line":211,"column":12}},"80":{"start":{"line":225,"column":2},"end":{"line":231,"column":4}},"81":{"start":{"line":226,"column":4},"end":{"line":226,"column":19}},"82":{"start":{"line":227,"column":4},"end":{"line":229,"column":7}},"83":{"start":{"line":228,"column":6},"end":{"line":228,"column":52}},"84":{"start":{"line":230,"column":4},"end":{"line":230,"column":17}},"85":{"start":{"line":238,"column":2},"end":{"line":244,"column":4}},"86":{"start":{"line":239,"column":4},"end":{"line":239,"column":19}},"87":{"start":{"line":240,"column":4},"end":{"line":242,"column":7}},"88":{"start":{"line":241,"column":6},"end":{"line":241,"column":30}},"89":{"start":{"line":243,"column":4},"end":{"line":243,"column":17}},"90":{"start":{"line":251,"column":2},"end":{"line":254,"column":4}},"91":{"start":{"line":253,"column":4},"end":{"line":253,"column":26}},"92":{"start":{"line":266,"column":2},"end":{"line":274,"column":4}},"93":{"start":{"line":267,"column":4},"end":{"line":267,"column":49}},"94":{"start":{"line":269,"column":4},"end":{"line":271,"column":5}},"95":{"start":{"line":270,"column":6},"end":{"line":270,"column":53}},"96":{"start":{"line":272,"column":4},"end":{"line":272,"column":50}},"97":{"start":{"line":273,"column":4},"end":{"line":273,"column":15}},"98":{"start":{"line":281,"column":2},"end":{"line":283,"column":4}},"99":{"start":{"line":282,"column":4},"end":{"line":282,"column":25}},"100":{"start":{"line":291,"column":2},"end":{"line":298,"column":4}},"101":{"start":{"line":292,"column":4},"end":{"line":297,"column":6}},"102":{"start":{"line":307,"column":2},"end":{"line":309,"column":4}},"103":{"start":{"line":308,"column":4},"end":{"line":308,"column":54}},"104":{"start":{"line":311,"column":2},"end":{"line":311,"column":15}},"105":{"start":{"line":314,"column":0},"end":{"line":314,"column":23}},"106":{"start":{"line":315,"column":0},"end":{"line":315,"column":22}},"107":{"start":{"line":316,"column":0},"end":{"line":316,"column":26}}},"branchMap":{"1":{"line":36,"type":"if","locations":[{"start":{"line":36,"column":4},"end":{"line":36,"column":4}},{"start":{"line":36,"column":4},"end":{"line":36,"column":4}}]},"2":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":4},"end":{"line":40,"column":4}},{"start":{"line":40,"column":4},"end":{"line":40,"column":4}}]},"3":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":6},"end":{"line":41,"column":6}},{"start":{"line":41,"column":6},"end":{"line":41,"column":6}}]},"4":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":11},"end":{"line":43,"column":11}},{"start":{"line":43,"column":11},"end":{"line":43,"column":11}}]},"5":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":4},"end":{"line":46,"column":4}},{"start":{"line":46,"column":4},"end":{"line":46,"column":4}}]},"6":{"line":47,"type":"if","locations":[{"start":{"line":47,"column":6},"end":{"line":47,"column":6}},{"start":{"line":47,"column":6},"end":{"line":47,"column":6}}]},"7":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":11},"end":{"line":49,"column":11}},{"start":{"line":49,"column":11},"end":{"line":49,"column":11}}]},"8":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":4},"end":{"line":52,"column":4}},{"start":{"line":52,"column":4},"end":{"line":52,"column":4}}]},"9":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":6},"end":{"line":53,"column":6}},{"start":{"line":53,"column":6},"end":{"line":53,"column":6}}]},"10":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":11},"end":{"line":55,"column":11}},{"start":{"line":55,"column":11},"end":{"line":55,"column":11}}]},"11":{"line":59,"type":"cond-expr","locations":[{"start":{"line":59,"column":35},"end":{"line":59,"column":52}},{"start":{"line":59,"column":55},"end":{"line":59,"column":56}}]},"12":{"line":60,"type":"cond-expr","locations":[{"start":{"line":60,"column":35},"end":{"line":60,"column":50}},{"start":{"line":60,"column":55},"end":{"line":60,"column":56}}]},"13":{"line":61,"type":"cond-expr","locations":[{"start":{"line":61,"column":35},"end":{"line":61,"column":51}},{"start":{"line":61,"column":55},"end":{"line":61,"column":56}}]},"14":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":4},"end":{"line":80,"column":4}},{"start":{"line":80,"column":4},"end":{"line":80,"column":4}}]},"15":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":4},"end":{"line":92,"column":4}},{"start":{"line":92,"column":4},"end":{"line":92,"column":4}}]},"16":{"line":96,"type":"switch","locations":[{"start":{"line":97,"column":6},"end":{"line":98,"column":43}},{"start":{"line":99,"column":6},"end":{"line":100,"column":52}},{"start":{"line":101,"column":6},"end":{"line":102,"column":20}}]},"17":{"line":127,"type":"if","locations":[{"start":{"line":127,"column":4},"end":{"line":127,"column":4}},{"start":{"line":127,"column":4},"end":{"line":127,"column":4}}]},"18":{"line":130,"type":"if","locations":[{"start":{"line":130,"column":9},"end":{"line":130,"column":9}},{"start":{"line":130,"column":9},"end":{"line":130,"column":9}}]},"19":{"line":134,"type":"if","locations":[{"start":{"line":134,"column":4},"end":{"line":134,"column":4}},{"start":{"line":134,"column":4},"end":{"line":134,"column":4}}]},"20":{"line":148,"type":"if","locations":[{"start":{"line":148,"column":4},"end":{"line":148,"column":4}},{"start":{"line":148,"column":4},"end":{"line":148,"column":4}}]},"21":{"line":149,"type":"if","locations":[{"start":{"line":149,"column":6},"end":{"line":149,"column":6}},{"start":{"line":149,"column":6},"end":{"line":149,"column":6}}]},"22":{"line":171,"type":"if","locations":[{"start":{"line":171,"column":4},"end":{"line":171,"column":4}},{"start":{"line":171,"column":4},"end":{"line":171,"column":4}}]},"23":{"line":172,"type":"if","locations":[{"start":{"line":172,"column":6},"end":{"line":172,"column":6}},{"start":{"line":172,"column":6},"end":{"line":172,"column":6}}]},"24":{"line":200,"type":"if","locations":[{"start":{"line":200,"column":4},"end":{"line":200,"column":4}},{"start":{"line":200,"column":4},"end":{"line":200,"column":4}}]},"25":{"line":207,"type":"if","locations":[{"start":{"line":207,"column":9},"end":{"line":207,"column":9}},{"start":{"line":207,"column":9},"end":{"line":207,"column":9}}]},"26":{"line":269,"type":"if","locations":[{"start":{"line":269,"column":4},"end":{"line":269,"column":4}},{"start":{"line":269,"column":4},"end":{"line":269,"column":4}}]}},"code":["'use strict';","","var number = require('../../utils/number');","","function factory (type, config, load, typed) {","  /**","   * Create a range. A range has a start, step, and end, and contains functions","   * to iterate over the range.","   *","   * A range can be constructed as:","   *     var range = new Range(start, end);","   *     var range = new Range(start, end, step);","   *","   * To get the result of the range:","   *     range.forEach(function (x) {","   *         console.log(x);","   *     });","   *     range.map(function (x) {","   *         return math.sin(x);","   *     });","   *     range.toArray();","   *","   * Example usage:","   *     var c = new Range(2, 6);         // 2:1:5","   *     c.toArray();                     // [2, 3, 4, 5]","   *     var d = new Range(2, -3, -1);    // 2:-1:-2","   *     d.toArray();                     // [2, 1, 0, -1, -2]","   *","   * @class Range","   * @constructor Range","   * @param {number} start  included lower bound","   * @param {number} end    excluded upper bound","   * @param {number} [step] step size, default value is 1","   */","  function Range(start, end, step) {","    if (!(this instanceof Range)) {","      throw new SyntaxError('Constructor must be called with the new operator');","    }","","    if (start != null) {","      if (start.isBigNumber === true)","        start = start.toNumber();","      else if (typeof start !== 'number')","        throw new TypeError('Parameter start must be a number');","    }","    if (end != null) {","      if (end.isBigNumber === true)","        end = end.toNumber();","      else if (typeof end !== 'number')","        throw new TypeError('Parameter end must be a number');","    }","    if (step != null) {","      if (step.isBigNumber === true)","        step = step.toNumber();","      else if (typeof step !== 'number')","        throw new TypeError('Parameter step must be a number');","    }","","    this.start = (start != null) ? parseFloat(start) : 0;","    this.end   = (end != null)   ? parseFloat(end)   : 0;","    this.step  = (step != null)  ? parseFloat(step)  : 1;","  }","","  /**","   * Attach type information","   */","  Range.prototype.type = 'Range';","  Range.prototype.isRange = true;","","  /**","   * Parse a string into a range,","   * The string contains the start, optional step, and end, separated by a colon.","   * If the string does not contain a valid range, null is returned.","   * For example str='0:2:11'.","   * @memberof Range","   * @param {string} str","   * @return {Range | null} range","   */","  Range.parse = function (str) {","    if (typeof str !== 'string') {","      return null;","    }","","    var args = str.split(':');","    var nums = args.map(function (arg) {","      return parseFloat(arg);","    });","","    var invalid = nums.some(function (num) {","      return isNaN(num);","    });","    if (invalid) {","      return null;","    }","","    switch (nums.length) {","      case 2:","        return new Range(nums[0], nums[1]);","      case 3:","        return new Range(nums[0], nums[2], nums[1]);","      default:","        return null;","    }","  };","","  /**","   * Create a clone of the range","   * @return {Range} clone","   */","  Range.prototype.clone = function () {","    return new Range(this.start, this.end, this.step);","  };","","  /**","   * Retrieve the size of the range.","   * Returns an array containing one number, the number of elements in the range.","   * @memberof Range","   * @returns {number[]} size","   */","  Range.prototype.size = function () {","    var len = 0,","        start = this.start,","        step = this.step,","        end = this.end,","        diff = end - start;","","    if (number.sign(step) == number.sign(diff)) {","      len = Math.ceil((diff) / step);","    }","    else if (diff == 0) {","      len = 0;","    }","","    if (isNaN(len)) {","      len = 0;","    }","    return [len];","  };","","  /**","   * Calculate the minimum value in the range","   * @memberof Range","   * @return {number | undefined} min","   */","  Range.prototype.min = function () {","    var size = this.size()[0];","","    if (size > 0) {","      if (this.step > 0) {","        // positive step","        return this.start;","      }","      else {","        // negative step","        return this.start + (size - 1) * this.step;","      }","    }","    else {","      return undefined;","    }","  };","","  /**","   * Calculate the maximum value in the range","   * @memberof Range","   * @return {number | undefined} max","   */","  Range.prototype.max = function () {","    var size = this.size()[0];","","    if (size > 0) {","      if (this.step > 0) {","        // positive step","        return this.start + (size - 1) * this.step;","      }","      else {","        // negative step","        return this.start;","      }","    }","    else {","      return undefined;","    }","  };","","","  /**","   * Execute a callback function for each value in the range.","   * @memberof Range","   * @param {function} callback   The callback method is invoked with three","   *                              parameters: the value of the element, the index","   *                              of the element, and the Range being traversed.","   */","  Range.prototype.forEach = function (callback) {","    var x = this.start;","    var step = this.step;","    var end = this.end;","    var i = 0;","","    if (step > 0) {","      while (x < end) {","        callback(x, [i], this);","        x += step;","        i++;","      }","    }","    else if (step < 0) {","      while (x > end) {","        callback(x, [i], this);","        x += step;","        i++;","      }","    }","  };","","  /**","   * Execute a callback function for each value in the Range, and return the","   * results as an array","   * @memberof Range","   * @param {function} callback   The callback method is invoked with three","   *                              parameters: the value of the element, the index","   *                              of the element, and the Matrix being traversed.","   * @returns {Array} array","   */","  Range.prototype.map = function (callback) {","    var array = [];","    this.forEach(function (value, index, obj) {","      array[index[0]] = callback(value, index, obj);","    });","    return array;","  };","","  /**","   * Create an Array with a copy of the Ranges data","   * @memberof Range","   * @returns {Array} array","   */","  Range.prototype.toArray = function () {","    var array = [];","    this.forEach(function (value, index) {","      array[index[0]] = value;","    });","    return array;","  };","","  /**","   * Get the primitive value of the Range, a one dimensional array","   * @memberof Range","   * @returns {Array} array","   */","  Range.prototype.valueOf = function () {","    // TODO: implement a caching mechanism for range.valueOf()","    return this.toArray();","  };","","  /**","   * Get a string representation of the range, with optional formatting options.","   * Output is formatted as 'start:step:end', for example '2:6' or '0:0.2:11'","   * @memberof Range","   * @param {Object | number | function} [options]  Formatting options. See","   *                                                lib/utils/number:format for a","   *                                                description of the available","   *                                                options.","   * @returns {string} str","   */","  Range.prototype.format = function (options) {","    var str = number.format(this.start, options);","","    if (this.step != 1) {","      str += ':' + number.format(this.step, options);","    }","    str += ':' + number.format(this.end, options);","    return str;","  };","","  /**","   * Get a string representation of the range.","   * @memberof Range","   * @returns {string}","   */","  Range.prototype.toString = function () {","    return this.format();","  };","","  /**","   * Get a JSON representation of the range","   * @memberof Range","   * @returns {Object} Returns a JSON object structured as:","   *                   `{\"mathjs\": \"Range\", \"start\": 2, \"end\": 4, \"step\": 1}`","   */","  Range.prototype.toJSON = function () {","    return {","      mathjs: 'Range',","      start: this.start,","      end: this.end,","      step: this.step","    };","  };","","  /**","   * Instantiate a Range from a JSON object","   * @memberof Range","   * @param {Object} json A JSON object structured as:","   *                      `{\"mathjs\": \"Range\", \"start\": 2, \"end\": 4, \"step\": 1}`","   * @return {Range}","   */","  Range.fromJSON = function (json) {","    return new Range(json.start, json.end, json.step);","  };","","  return Range;","}","","exports.name = 'Range';","exports.path = 'type';","exports.factory = factory;",""],"l":{"3":1,"5":1,"35":1,"36":0,"37":0,"40":0,"41":0,"42":0,"43":0,"44":0,"46":0,"47":0,"48":0,"49":0,"50":0,"52":0,"53":0,"54":0,"55":0,"56":0,"59":0,"60":0,"61":0,"67":0,"68":0,"79":0,"80":0,"81":0,"84":0,"85":0,"86":0,"89":0,"90":0,"92":0,"93":0,"96":0,"98":0,"100":0,"102":0,"110":0,"111":0,"120":0,"121":0,"127":0,"128":0,"130":0,"131":0,"134":0,"135":0,"137":0,"145":0,"146":0,"148":0,"149":0,"151":0,"155":0,"159":0,"168":0,"169":0,"171":0,"172":0,"174":0,"178":0,"182":0,"194":0,"195":0,"196":0,"197":0,"198":0,"200":0,"201":0,"202":0,"203":0,"204":0,"207":0,"208":0,"209":0,"210":0,"211":0,"225":0,"226":0,"227":0,"228":0,"230":0,"238":0,"239":0,"240":0,"241":0,"243":0,"251":0,"253":0,"266":0,"267":0,"269":0,"270":0,"272":0,"273":0,"281":0,"282":0,"291":0,"292":0,"307":0,"308":0,"311":0,"314":1,"315":1,"316":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/matrix/function/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/matrix/function/index.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1,"14":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0,0],"5":[0,0],"6":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"factory","line":3,"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}}},"2":{"name":"(anonymous_2)","line":40,"loc":{"start":{"line":40,"column":63},"end":{"line":40,"column":79}}},"3":{"name":"(anonymous_3)","line":41,"loc":{"start":{"line":41,"column":28},"end":{"line":41,"column":43}}},"4":{"name":"(anonymous_4)","line":46,"loc":{"start":{"line":46,"column":25},"end":{"line":46,"column":41}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":61,"column":1}},"2":{"start":{"line":39,"column":2},"end":{"line":60,"column":5}},"3":{"start":{"line":41,"column":6},"end":{"line":54,"column":9}},"4":{"start":{"line":42,"column":8},"end":{"line":53,"column":9}},"5":{"start":{"line":43,"column":10},"end":{"line":43,"column":32}},"6":{"start":{"line":45,"column":13},"end":{"line":53,"column":9}},"7":{"start":{"line":46,"column":10},"end":{"line":49,"column":13}},"8":{"start":{"line":48,"column":12},"end":{"line":48,"column":80}},"9":{"start":{"line":52,"column":10},"end":{"line":52,"column":21}},"10":{"start":{"line":56,"column":6},"end":{"line":56,"column":33}},"11":{"start":{"line":57,"column":6},"end":{"line":57,"column":36}},"12":{"start":{"line":58,"column":6},"end":{"line":58,"column":17}},"13":{"start":{"line":63,"column":0},"end":{"line":63,"column":23}},"14":{"start":{"line":64,"column":0},"end":{"line":64,"column":26}}},"branchMap":{"1":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":8},"end":{"line":42,"column":8}},{"start":{"line":42,"column":8},"end":{"line":42,"column":8}}]},"2":{"line":42,"type":"binary-expr","locations":[{"start":{"line":42,"column":12},"end":{"line":42,"column":15}},{"start":{"line":42,"column":19},"end":{"line":42,"column":43}}]},"3":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":13},"end":{"line":45,"column":13}},{"start":{"line":45,"column":13},"end":{"line":45,"column":13}}]},"4":{"line":45,"type":"binary-expr","locations":[{"start":{"line":45,"column":17},"end":{"line":45,"column":20}},{"start":{"line":45,"column":25},"end":{"line":45,"column":43}},{"start":{"line":45,"column":47},"end":{"line":45,"column":68}}]},"5":{"line":48,"type":"cond-expr","locations":[{"start":{"line":48,"column":57},"end":{"line":48,"column":72}},{"start":{"line":48,"column":75},"end":{"line":48,"column":79}}]},"6":{"line":48,"type":"binary-expr","locations":[{"start":{"line":48,"column":20},"end":{"line":48,"column":24}},{"start":{"line":48,"column":28},"end":{"line":48,"column":53}}]}},"code":["'use strict';","","function factory (type, config, load, typed) {","  /**","   * Create an index. An Index can store ranges having start, step, and end","   * for multiple dimensions.","   * Matrix.get, Matrix.set, and math.subset accept an Index as input.","   *","   * Syntax:","   *","   *     math.index(range1, range2, ...)","   *","   * Where each range can be any of:","   *","   * - A number","   * - A string for getting/setting an object property","   * - An instance of `Range`","   * - A one-dimensional Array or a Matrix with numbers","   *","   * Indexes must be zero-based, integer numbers.","   *","   * Examples:","   *","   *    var math = math.js","   *","   *    var b = [1, 2, 3, 4, 5];","   *    math.subset(b, math.index([1, 2, 3]));     // returns [2, 3, 4]","   *","   *    var a = math.matrix([[1, 2], [3, 4]]);","   *    a.subset(math.index(0, 1));             // returns 2","   *","   * See also:","   *","   *    bignumber, boolean, complex, matrix, number, string, unit","   *","   * @param {...*} ranges   Zero or more ranges or numbers.","   * @return {Index}        Returns the created index","   */","  return typed('index', {","    '...number | string | BigNumber | Range | Array | Matrix': function (args) {","      var ranges = args.map(function (arg) {","        if (arg && arg.isBigNumber === true) {","          return arg.toNumber(); // convert BigNumber to Number","        }","        else if (arg && (Array.isArray(arg) || arg.isMatrix === true)) {","          return arg.map(function (elem) {","            // convert BigNumber to Number","            return (elem && elem.isBigNumber === true) ? elem.toNumber() : elem;","          });","        }","        else {","          return arg;","        }","      });","","      var res = new type.Index();","      type.Index.apply(res, ranges);","      return res;","    }","  });","}","","exports.name = 'index';","exports.factory = factory;",""],"l":{"3":1,"39":0,"41":0,"42":0,"43":0,"45":0,"46":0,"48":0,"52":0,"56":0,"57":0,"58":0,"63":1,"64":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/matrix/function/matrix.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/matrix/function/matrix.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1,"11":0,"12":0,"13":1,"14":1},"b":{"1":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"factory","line":3,"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}}},"2":{"name":"(anonymous_2)","line":37,"loc":{"start":{"line":37,"column":8},"end":{"line":37,"column":20}}},"3":{"name":"(anonymous_3)","line":41,"loc":{"start":{"line":41,"column":14},"end":{"line":41,"column":32}}},"4":{"name":"(anonymous_4)","line":45,"loc":{"start":{"line":45,"column":22},"end":{"line":45,"column":50}}},"5":{"name":"(anonymous_5)","line":49,"loc":{"start":{"line":49,"column":13},"end":{"line":49,"column":29}}},"6":{"name":"(anonymous_6)","line":53,"loc":{"start":{"line":53,"column":14},"end":{"line":53,"column":30}}},"7":{"name":"_create","line":78,"loc":{"start":{"line":78,"column":2},"end":{"line":78,"column":43}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":85,"column":1}},"2":{"start":{"line":36,"column":2},"end":{"line":60,"column":5}},"3":{"start":{"line":38,"column":6},"end":{"line":38,"column":25}},"4":{"start":{"line":42,"column":6},"end":{"line":42,"column":33}},"5":{"start":{"line":46,"column":6},"end":{"line":46,"column":43}},"6":{"start":{"line":50,"column":6},"end":{"line":50,"column":27}},"7":{"start":{"line":54,"column":6},"end":{"line":54,"column":43}},"8":{"start":{"line":62,"column":2},"end":{"line":66,"column":4}},"9":{"start":{"line":68,"column":2},"end":{"line":68,"column":16}},"10":{"start":{"line":78,"column":2},"end":{"line":84,"column":3}},"11":{"start":{"line":80,"column":4},"end":{"line":80,"column":53}},"12":{"start":{"line":83,"column":4},"end":{"line":83,"column":33}},"13":{"start":{"line":87,"column":0},"end":{"line":87,"column":24}},"14":{"start":{"line":88,"column":0},"end":{"line":88,"column":26}}},"branchMap":{"1":{"line":80,"type":"binary-expr","locations":[{"start":{"line":80,"column":32},"end":{"line":80,"column":38}},{"start":{"line":80,"column":42},"end":{"line":80,"column":51}}]}},"code":["'use strict';","","function factory (type, config, load, typed) {","  /**","   * Create a Matrix. The function creates a new `math.type.Matrix` object from","   * an `Array`. A Matrix has utility functions to manipulate the data in the","   * matrix, like getting the size and getting or setting values in the matrix.","   * Supported storage formats are 'dense' and 'sparse'.","   *","   * Syntax:","   *","   *    math.matrix()                         // creates an empty matrix using default storage format (dense).","   *    math.matrix(data)                     // creates a matrix with initial data using default storage format (dense).","   *    math.matrix('dense')                  // creates an empty matrix using the given storage format.","   *    math.matrix(data, 'dense')            // creates a matrix with initial data using the given storage format.","   *    math.matrix(data, 'sparse')           // creates a sparse matrix with initial data.","   *    math.matrix(data, 'sparse', 'number') // creates a sparse matrix with initial data, number data type.","   *","   * Examples:","   *","   *    var m = math.matrix([[1, 2], [3, 4]]);","   *    m.size();                        // Array [2, 2]","   *    m.resize([3, 2], 5);","   *    m.valueOf();                     // Array [[1, 2], [3, 4], [5, 5]]","   *    m.get([1, 0])                    // number 3","   *","   * See also:","   *","   *    bignumber, boolean, complex, index, number, string, unit, sparse","   *","   * @param {Array | Matrix} [data]    A multi dimensional array","   * @param {string} [format]          The Matrix storage format","   *","   * @return {Matrix} The created matrix","   */","  var matrix = typed('matrix', {","    '': function () {","      return _create([]);","    },","","    'string': function (format) {","      return _create([], format);","    },","    ","    'string, string': function (format, datatype) {","      return _create([], format, datatype);","    },","","    'Array': function (data) {","      return _create(data);","    },","      ","    'Matrix': function (data) {","      return _create(data, data.storage());","    },","    ","    'Array | Matrix, string': _create,","    ","    'Array | Matrix, string, string': _create","  });","","  matrix.toTex = {","    0: '\\\\begin{bmatrix}\\\\end{bmatrix}',","    1: '\\\\left(${args[0]}\\\\right)',","    2: '\\\\left(${args[0]}\\\\right)'","  };","","  return matrix;","","  /**","   * Create a new Matrix with given storage format","   * @param {Array} data","   * @param {string} [format]","   * @param {string} [datatype]","   * @returns {Matrix} Returns a new Matrix","   * @private","   */","  function _create(data, format, datatype) {","    // get storage format constructor","    var M = type.Matrix.storage(format || 'default');","","    // create instance","    return new M(data, datatype);","  }","}","","exports.name = 'matrix';","exports.factory = factory;",""],"l":{"3":1,"36":0,"38":0,"42":0,"46":0,"50":0,"54":0,"62":0,"68":0,"78":1,"80":0,"83":0,"87":1,"88":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/matrix/function/sparse.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/matrix/function/sparse.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1,"11":1},"b":{},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"factory","line":3,"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}}},"2":{"name":"(anonymous_2)","line":35,"loc":{"start":{"line":35,"column":8},"end":{"line":35,"column":20}}},"3":{"name":"(anonymous_3)","line":39,"loc":{"start":{"line":39,"column":14},"end":{"line":39,"column":34}}},"4":{"name":"(anonymous_4)","line":43,"loc":{"start":{"line":43,"column":22},"end":{"line":43,"column":38}}},"5":{"name":"(anonymous_5)","line":47,"loc":{"start":{"line":47,"column":30},"end":{"line":47,"column":56}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":58,"column":1}},"2":{"start":{"line":5,"column":2},"end":{"line":5,"column":39}},"3":{"start":{"line":34,"column":2},"end":{"line":50,"column":5}},"4":{"start":{"line":36,"column":6},"end":{"line":36,"column":34}},"5":{"start":{"line":40,"column":6},"end":{"line":40,"column":44}},"6":{"start":{"line":44,"column":6},"end":{"line":44,"column":36}},"7":{"start":{"line":48,"column":6},"end":{"line":48,"column":46}},"8":{"start":{"line":52,"column":2},"end":{"line":55,"column":4}},"9":{"start":{"line":57,"column":2},"end":{"line":57,"column":16}},"10":{"start":{"line":60,"column":0},"end":{"line":60,"column":24}},"11":{"start":{"line":61,"column":0},"end":{"line":61,"column":26}}},"branchMap":{},"code":["'use strict';","","function factory (type, config, load, typed) {","","  var SparseMatrix = type.SparseMatrix;","","  /**","   * Create a Sparse Matrix. The function creates a new `math.type.Matrix` object from","   * an `Array`. A Matrix has utility functions to manipulate the data in the","   * matrix, like getting the size and getting or setting values in the matrix.","   *","   * Syntax:","   *","   *    math.sparse()               // creates an empty sparse matrix.","   *    math.sparse(data)           // creates a sparse matrix with initial data.","   *    math.sparse(data, 'number') // creates a sparse matrix with initial data, number datatype.","   *","   * Examples:","   *","   *    var m = math.sparse([[1, 2], [3, 4]]);","   *    m.size();                        // Array [2, 2]","   *    m.resize([3, 2], 5);","   *    m.valueOf();                     // Array [[1, 2], [3, 4], [5, 5]]","   *    m.get([1, 0])                    // number 3","   *","   * See also:","   *","   *    bignumber, boolean, complex, index, number, string, unit, matrix","   *","   * @param {Array | Matrix} [data]    A two dimensional array","   *","   * @return {Matrix} The created matrix","   */","  var sparse = typed('sparse', {","    '': function () {","      return new SparseMatrix([]);","    },","    ","    'string': function (datatype) {","      return new SparseMatrix([], datatype);","    },","","    'Array | Matrix': function (data) {","      return new SparseMatrix(data);","    },","    ","    'Array | Matrix, string': function (data, datatype) {","      return new SparseMatrix(data, datatype);","    }","  });","","  sparse.toTex = {","    0: '\\\\begin{bsparse}\\\\end{bsparse}',","    1: '\\\\left(${args[0]}\\\\right)'","  };","","  return sparse;","}","","exports.name = 'sparse';","exports.factory = factory;",""],"l":{"3":1,"5":0,"34":0,"36":0,"40":0,"44":0,"48":0,"52":0,"57":0,"60":1,"61":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/number.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/number.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":1},"b":{"1":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":32,"loc":{"start":{"line":32,"column":8},"end":{"line":32,"column":20}}},"3":{"name":"(anonymous_3)","line":36,"loc":{"start":{"line":36,"column":14},"end":{"line":36,"column":27}}},"4":{"name":"(anonymous_4)","line":40,"loc":{"start":{"line":40,"column":14},"end":{"line":40,"column":27}}},"5":{"name":"(anonymous_5)","line":48,"loc":{"start":{"line":48,"column":17},"end":{"line":48,"column":30}}},"6":{"name":"(anonymous_6)","line":52,"loc":{"start":{"line":52,"column":16},"end":{"line":52,"column":29}}},"7":{"name":"(anonymous_7)","line":56,"loc":{"start":{"line":56,"column":12},"end":{"line":56,"column":25}}},"8":{"name":"(anonymous_8)","line":60,"loc":{"start":{"line":60,"column":27},"end":{"line":60,"column":58}}},"9":{"name":"(anonymous_9)","line":64,"loc":{"start":{"line":64,"column":22},"end":{"line":64,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":55}},"2":{"start":{"line":5,"column":0},"end":{"line":76,"column":1}},"3":{"start":{"line":31,"column":2},"end":{"line":67,"column":5}},"4":{"start":{"line":33,"column":6},"end":{"line":33,"column":15}},"5":{"start":{"line":37,"column":6},"end":{"line":37,"column":15}},"6":{"start":{"line":41,"column":6},"end":{"line":41,"column":26}},"7":{"start":{"line":42,"column":6},"end":{"line":44,"column":7}},"8":{"start":{"line":43,"column":8},"end":{"line":43,"column":71}},"9":{"start":{"line":45,"column":6},"end":{"line":45,"column":17}},"10":{"start":{"line":49,"column":6},"end":{"line":49,"column":26}},"11":{"start":{"line":53,"column":6},"end":{"line":53,"column":25}},"12":{"start":{"line":57,"column":6},"end":{"line":57,"column":70}},"13":{"start":{"line":61,"column":6},"end":{"line":61,"column":42}},"14":{"start":{"line":65,"column":6},"end":{"line":65,"column":32}},"15":{"start":{"line":69,"column":2},"end":{"line":73,"column":4}},"16":{"start":{"line":75,"column":2},"end":{"line":75,"column":16}},"17":{"start":{"line":78,"column":0},"end":{"line":78,"column":24}},"18":{"start":{"line":79,"column":0},"end":{"line":79,"column":26}}},"branchMap":{"1":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":6},"end":{"line":42,"column":6}},{"start":{"line":42,"column":6},"end":{"line":42,"column":6}}]}},"code":["'use strict';","","var deepMap = require('./../utils/collection/deepMap');","","function factory (type, config, load, typed) {","  /**","   * Create a number or convert a string, boolean, or unit to a number.","   * When value is a matrix, all elements will be converted to number.","   *","   * Syntax:","   *","   *    math.number(value)","   *    math.number(unit, valuelessUnit)","   *","   * Examples:","   *","   *    math.number(2);                         // returns number 2","   *    math.number('7.2');                     // returns number 7.2","   *    math.number(true);                      // returns number 1","   *    math.number([true, false, true, true]); // returns [1, 0, 1, 1]","   *    math.number(math.unit('52cm'), 'm');    // returns 0.52","   *","   * See also:","   *","   *    bignumber, boolean, complex, index, matrix, string, unit","   *","   * @param {string | number | BigNumber | Fraction | boolean | Array | Matrix | Unit | null} [value]  Value to be converted","   * @param {Unit | string} [valuelessUnit] A valueless unit, used to convert a unit to a number","   * @return {number | Array | Matrix} The created number","   */","  var number = typed('number', {","    '': function () {","      return 0;","    },","","    'number': function (x) {","      return x;","    },","","    'string': function (x) {","      var num = Number(x);","      if (isNaN(num)) {","        throw new SyntaxError('String \"' + x + '\" is no valid number');","      }","      return num;","    },","","    'BigNumber': function (x) {","      return x.toNumber();","    },","","    'Fraction': function (x) {","      return x.valueOf();","    },","","    'Unit': function (x) {","      throw new Error('Second argument with valueless unit expected');","    },","","    'Unit, string | Unit': function (unit, valuelessUnit) {","      return unit.toNumber(valuelessUnit);","    },","","    'Array | Matrix': function (x) {","      return deepMap(x, number);","    }","  });","","  number.toTex = {","    0: '0',","    1: '\\\\left(${args[0]}\\\\right)',","    2: '\\\\left(\\\\left(${args[0]}\\\\right)${args[1]}\\\\right)'","  };","","  return number;","}","","exports.name = 'number';","exports.factory = factory;",""],"l":{"3":1,"5":1,"31":0,"33":0,"37":0,"41":0,"42":0,"43":0,"45":0,"49":0,"53":0,"57":0,"61":0,"65":0,"69":0,"75":0,"78":1,"79":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/resultset/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/resultset/index.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":4,"column":2}}},"branchMap":{},"code":["module.exports = [","  // type","  require('./ResultSet')","];",""],"l":{"1":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/resultset/ResultSet.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/resultset/ResultSet.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":1,"19":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"factory","line":3,"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}}},"2":{"name":"ResultSet","line":10,"loc":{"start":{"line":10,"column":2},"end":{"line":10,"column":30}}},"3":{"name":"(anonymous_3)","line":29,"loc":{"start":{"line":29,"column":32},"end":{"line":29,"column":44}}},"4":{"name":"(anonymous_4)","line":38,"loc":{"start":{"line":38,"column":33},"end":{"line":38,"column":45}}},"5":{"name":"(anonymous_5)","line":48,"loc":{"start":{"line":48,"column":31},"end":{"line":48,"column":43}}},"6":{"name":"(anonymous_6)","line":62,"loc":{"start":{"line":62,"column":23},"end":{"line":62,"column":39}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":67,"column":1}},"2":{"start":{"line":10,"column":2},"end":{"line":16,"column":3}},"3":{"start":{"line":11,"column":4},"end":{"line":13,"column":5}},"4":{"start":{"line":12,"column":6},"end":{"line":12,"column":80}},"5":{"start":{"line":15,"column":4},"end":{"line":15,"column":33}},"6":{"start":{"line":21,"column":2},"end":{"line":21,"column":41}},"7":{"start":{"line":22,"column":2},"end":{"line":22,"column":41}},"8":{"start":{"line":29,"column":2},"end":{"line":31,"column":4}},"9":{"start":{"line":30,"column":4},"end":{"line":30,"column":24}},"10":{"start":{"line":38,"column":2},"end":{"line":40,"column":4}},"11":{"start":{"line":39,"column":4},"end":{"line":39,"column":47}},"12":{"start":{"line":48,"column":2},"end":{"line":53,"column":4}},"13":{"start":{"line":49,"column":4},"end":{"line":52,"column":6}},"14":{"start":{"line":62,"column":2},"end":{"line":64,"column":4}},"15":{"start":{"line":63,"column":4},"end":{"line":63,"column":39}},"16":{"start":{"line":66,"column":2},"end":{"line":66,"column":19}},"17":{"start":{"line":69,"column":0},"end":{"line":69,"column":27}},"18":{"start":{"line":70,"column":0},"end":{"line":70,"column":22}},"19":{"start":{"line":71,"column":0},"end":{"line":71,"column":26}}},"branchMap":{"1":{"line":11,"type":"if","locations":[{"start":{"line":11,"column":4},"end":{"line":11,"column":4}},{"start":{"line":11,"column":4},"end":{"line":11,"column":4}}]},"2":{"line":15,"type":"binary-expr","locations":[{"start":{"line":15,"column":19},"end":{"line":15,"column":26}},{"start":{"line":15,"column":30},"end":{"line":15,"column":32}}]}},"code":["'use strict';","","function factory (type, config, load, typed) {","  /**","   * A ResultSet contains a list or results","   * @class ResultSet","   * @param {Array} entries","   * @constructor ResultSet","   */","  function ResultSet(entries) {","    if (!(this instanceof ResultSet)) {","      throw new SyntaxError('Constructor must be called with the new operator');","    }","","    this.entries = entries || [];","  }","","  /**","   * Attach type information","   */","  ResultSet.prototype.type = 'ResultSet';","  ResultSet.prototype.isResultSet = true;","","  /**","   * Returns the array with results hold by this ResultSet","   * @memberof ResultSet","   * @returns {Array} entries","   */","  ResultSet.prototype.valueOf = function () {","    return this.entries;","  };","","  /**","   * Returns the stringified results of the ResultSet","   * @memberof ResultSet","   * @returns {string} string","   */","  ResultSet.prototype.toString = function () {","    return '[' + this.entries.join(', ') + ']';","  };","","  /**","   * Get a JSON representation of the ResultSet","   * @memberof ResultSet","   * @returns {Object} Returns a JSON object structured as:","   *                   `{\"mathjs\": \"ResultSet\", \"entries\": [...]}`","   */","  ResultSet.prototype.toJSON = function () {","    return {","      mathjs: 'ResultSet',","      entries: this.entries","    };","  };","","  /**","   * Instantiate a ResultSet from a JSON object","   * @memberof ResultSet","   * @param {Object} json  A JSON object structured as:","   *                       `{\"mathjs\": \"ResultSet\", \"entries\": [...]}`","   * @return {ResultSet}","   */","  ResultSet.fromJSON = function (json) {","    return new ResultSet(json.entries);","  };","","  return ResultSet;","}","","exports.name = 'ResultSet';","exports.path = 'type';","exports.factory = factory;",""],"l":{"3":1,"10":1,"11":0,"12":0,"15":0,"21":0,"22":0,"29":0,"30":0,"38":0,"39":0,"48":0,"49":0,"62":0,"63":0,"66":0,"69":1,"70":1,"71":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/string.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/string.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1,"14":1},"b":{},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"factory","line":6,"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":45}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":8},"end":{"line":33,"column":20}}},"3":{"name":"(anonymous_3)","line":39,"loc":{"start":{"line":39,"column":12},"end":{"line":39,"column":25}}},"4":{"name":"(anonymous_4)","line":43,"loc":{"start":{"line":43,"column":15},"end":{"line":43,"column":28}}},"5":{"name":"(anonymous_5)","line":47,"loc":{"start":{"line":47,"column":14},"end":{"line":47,"column":27}}},"6":{"name":"(anonymous_6)","line":51,"loc":{"start":{"line":51,"column":22},"end":{"line":51,"column":35}}},"7":{"name":"(anonymous_7)","line":55,"loc":{"start":{"line":55,"column":11},"end":{"line":55,"column":24}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":55}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":40}},"3":{"start":{"line":6,"column":0},"end":{"line":66,"column":1}},"4":{"start":{"line":32,"column":2},"end":{"line":58,"column":5}},"5":{"start":{"line":34,"column":6},"end":{"line":34,"column":16}},"6":{"start":{"line":40,"column":6},"end":{"line":40,"column":20}},"7":{"start":{"line":44,"column":6},"end":{"line":44,"column":20}},"8":{"start":{"line":48,"column":6},"end":{"line":48,"column":15}},"9":{"start":{"line":52,"column":6},"end":{"line":52,"column":32}},"10":{"start":{"line":56,"column":6},"end":{"line":56,"column":23}},"11":{"start":{"line":60,"column":2},"end":{"line":63,"column":4}},"12":{"start":{"line":65,"column":2},"end":{"line":65,"column":16}},"13":{"start":{"line":68,"column":0},"end":{"line":68,"column":24}},"14":{"start":{"line":69,"column":0},"end":{"line":69,"column":26}}},"branchMap":{},"code":["'use strict';","","var deepMap = require('./../utils/collection/deepMap');","var number = require('../utils/number');","","function factory (type, config, load, typed) {","  /**","   * Create a string or convert any object into a string.","   * Elements of Arrays and Matrices are processed element wise.","   *","   * Syntax:","   *","   *    math.string(value)","   *","   * Examples:","   *","   *    math.string(4.2);               // returns string '4.2'","   *    math.string(math.complex(3, 2); // returns string '3 + 2i'","   *","   *    var u = math.unit(5, 'km');","   *    math.string(u.to('m'));         // returns string '5000 m'","   *","   *    math.string([true, false]);     // returns ['true', 'false']","   *","   * See also:","   *","   *    bignumber, boolean, complex, index, matrix, number, unit","   *","   * @param {* | Array | Matrix | null} [value]  A value to convert to a string","   * @return {string | Array | Matrix} The created string","   */","  var string = typed('string', {","    '': function () {","      return '';","    },","","    'number': number.format,","","    'null': function (x) {","      return 'null';","    },","","    'boolean': function (x) {","      return x + '';","    },","","    'string': function (x) {","      return x;","    },","","    'Array | Matrix': function (x) {","      return deepMap(x, string);","    },","","    'any': function (x) {","      return String(x);","    }","  });","","  string.toTex = {","    0: '\\\\mathtt{\"\"}',","    1: '\\\\mathrm{string}\\\\left(${args[0]}\\\\right)'","  };","","  return string;","}","","exports.name = 'string';","exports.factory = factory;",""],"l":{"3":1,"4":1,"6":1,"32":0,"34":0,"40":0,"44":0,"48":0,"52":0,"56":0,"60":0,"65":0,"68":1,"69":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/unit/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/unit/index.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":16,"column":2}}},"branchMap":{},"code":["module.exports = [","  // type","  require('./Unit'),","","  // construction function","  require('./function/unit'),","","  // create new units","  require('./function/createUnit'),","","  // split units","  require('./function/splitUnit'),","","  // physical constants","  require('./physicalConstants')","];",""],"l":{"1":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/unit/Unit.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/unit/Unit.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":1,"40":0,"41":0,"42":1,"43":0,"44":1,"45":0,"46":1,"47":0,"48":0,"49":1,"50":0,"51":0,"52":1,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":1,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":1,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"249":1,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0,"270":0,"271":0,"272":0,"273":0,"274":0,"275":0,"276":0,"277":0,"278":0,"279":0,"280":0,"281":0,"282":0,"283":0,"284":0,"285":0,"286":0,"287":0,"288":0,"289":0,"290":0,"291":0,"292":0,"293":0,"294":0,"295":0,"296":0,"297":0,"298":0,"299":0,"300":0,"301":0,"302":0,"303":0,"304":0,"305":0,"306":0,"307":0,"308":0,"309":0,"310":0,"311":0,"312":0,"313":0,"314":0,"315":0,"316":0,"317":0,"318":0,"319":0,"320":0,"321":0,"322":0,"323":0,"324":0,"325":0,"326":0,"327":0,"328":0,"329":0,"330":0,"331":0,"332":0,"333":0,"334":0,"335":0,"336":0,"337":0,"338":0,"339":0,"340":0,"341":0,"342":0,"343":0,"344":0,"345":0,"346":0,"347":0,"348":0,"349":0,"350":0,"351":0,"352":0,"353":0,"354":0,"355":0,"356":0,"357":0,"358":0,"359":0,"360":0,"361":0,"362":0,"363":0,"364":0,"365":0,"366":0,"367":0,"368":0,"369":0,"370":0,"371":0,"372":0,"373":0,"374":0,"375":0,"376":0,"377":0,"378":0,"379":0,"380":0,"381":0,"382":0,"383":0,"384":0,"385":0,"386":0,"387":0,"388":0,"389":0,"390":0,"391":0,"392":0,"393":0,"394":0,"395":0,"396":0,"397":0,"398":0,"399":0,"400":0,"401":0,"402":0,"403":0,"404":0,"405":0,"406":0,"407":0,"408":0,"409":0,"410":0,"411":0,"412":0,"413":0,"414":0,"415":0,"416":0,"417":0,"418":0,"419":0,"420":0,"421":0,"422":0,"423":0,"424":0,"425":0,"426":0,"427":0,"428":0,"429":0,"430":0,"431":0,"432":0,"433":0,"434":0,"435":0,"436":0,"437":0,"438":0,"439":0,"440":0,"441":0,"442":0,"443":0,"444":0,"445":0,"446":0,"447":0,"448":0,"449":0,"450":0,"451":0,"452":0,"453":0,"454":0,"455":0,"456":0,"457":0,"458":0,"459":0,"460":0,"461":0,"462":0,"463":0,"464":0,"465":0,"466":0,"467":0,"468":0,"469":0,"470":0,"471":0,"472":0,"473":0,"474":0,"475":0,"476":0,"477":0,"478":0,"479":0,"480":0,"481":0,"482":0,"483":0,"484":0,"485":0,"486":0,"487":0,"488":0,"489":0,"490":0,"491":0,"492":0,"493":0,"494":0,"495":0,"496":0,"497":0,"498":0,"499":0,"500":0,"501":0,"502":0,"503":0,"504":0,"505":0,"506":0,"507":0,"508":0,"509":0,"510":0,"511":0,"512":0,"513":0,"514":0,"515":0,"516":0,"517":0,"518":0,"519":0,"520":0,"521":0,"522":0,"523":0,"524":0,"525":0,"526":0,"527":0,"528":0,"529":0,"530":0,"531":0,"532":0,"533":0,"534":1,"535":0,"536":0,"537":0,"538":0,"539":0,"540":0,"541":0,"542":0,"543":0,"544":0,"545":0,"546":0,"547":0,"548":0,"549":0,"550":0,"551":0,"552":0,"553":0,"554":0,"555":0,"556":0,"557":0,"558":0,"559":0,"560":0,"561":0,"562":0,"563":0,"564":0,"565":0,"566":0,"567":0,"568":0,"569":0,"570":0,"571":0,"572":0,"573":0,"574":0,"575":0,"576":0,"577":0,"578":0,"579":0,"580":0,"581":0,"582":0,"583":0,"584":0,"585":0,"586":0,"587":0,"588":0,"589":0,"590":0,"591":0,"592":0,"593":0,"594":0,"595":0,"596":0,"597":0,"598":1,"599":0,"600":0,"601":0,"602":0,"603":0,"604":0,"605":0,"606":0,"607":0,"608":0,"609":0,"610":0,"611":0,"612":0,"613":0,"614":0,"615":0,"616":0,"617":0,"618":0,"619":0,"620":0,"621":0,"622":0,"623":0,"624":0,"625":0,"626":0,"627":0,"628":0,"629":0,"630":0,"631":0,"632":0,"633":0,"634":0,"635":0,"636":0,"637":0,"638":0,"639":0,"640":0,"641":0,"642":0,"643":0,"644":0,"645":0,"646":0,"647":0,"648":0,"649":0,"650":0,"651":0,"652":0,"653":0,"654":0,"655":0,"656":0,"657":0,"658":0,"659":0,"660":0,"661":0,"662":0,"663":0,"664":0,"665":0,"666":0,"667":0,"668":0,"669":0,"670":0,"671":0,"672":0,"673":0,"674":0,"675":0,"676":0,"677":0,"678":0,"679":0,"680":0,"681":0,"682":0,"683":0,"684":0,"685":0,"686":0,"687":0,"688":0,"689":0,"690":0,"691":0,"692":0,"693":0,"694":0,"695":0,"696":0,"697":0,"698":0,"699":0,"700":0,"701":0,"702":0,"703":0,"704":0,"705":0,"706":0,"707":0,"708":0,"709":0,"710":0,"711":0,"712":0,"713":0,"714":0,"715":0,"716":0,"717":1,"718":1,"719":1,"720":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0],"4":[0,0],"5":[0,0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0,0,0,0,0],"23":[0,0],"24":[0,0,0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0],"70":[0,0],"71":[0,0],"72":[0,0],"73":[0,0],"74":[0,0],"75":[0,0],"76":[0,0],"77":[0,0],"78":[0,0],"79":[0,0],"80":[0,0],"81":[0,0],"82":[0,0],"83":[0,0],"84":[0,0],"85":[0,0],"86":[0,0,0],"87":[0,0],"88":[0,0],"89":[0,0],"90":[0,0],"91":[0,0],"92":[0,0],"93":[0,0],"94":[0,0],"95":[0,0],"96":[0,0],"97":[0,0],"98":[0,0],"99":[0,0],"100":[0,0],"101":[0,0],"102":[0,0],"103":[0,0],"104":[0,0],"105":[0,0],"106":[0,0],"107":[0,0],"108":[0,0],"109":[0,0],"110":[0,0],"111":[0,0],"112":[0,0],"113":[0,0],"114":[0,0],"115":[0,0],"116":[0,0],"117":[0,0],"118":[0,0],"119":[0,0],"120":[0,0],"121":[0,0],"122":[0,0],"123":[0,0],"124":[0,0],"125":[0,0],"126":[0,0],"127":[0,0],"128":[0,0],"129":[0,0],"130":[0,0],"131":[0,0,0],"132":[0,0],"133":[0,0],"134":[0,0],"135":[0,0],"136":[0,0],"137":[0,0],"138":[0,0],"139":[0,0],"140":[0,0],"141":[0,0],"142":[0,0],"143":[0,0],"144":[0,0],"145":[0,0],"146":[0,0],"147":[0,0],"148":[0,0],"149":[0,0],"150":[0,0],"151":[0,0],"152":[0,0],"153":[0,0],"154":[0,0,0],"155":[0,0],"156":[0,0],"157":[0,0],"158":[0,0],"159":[0,0],"160":[0,0],"161":[0,0],"162":[0,0],"163":[0,0],"164":[0,0],"165":[0,0],"166":[0,0],"167":[0,0],"168":[0,0],"169":[0,0],"170":[0,0],"171":[0,0],"172":[0,0],"173":[0,0],"174":[0,0],"175":[0,0],"176":[0,0],"177":[0,0],"178":[0,0],"179":[0,0],"180":[0,0],"181":[0,0],"182":[0,0],"183":[0,0],"184":[0,0],"185":[0,0],"186":[0,0],"187":[0,0],"188":[0,0],"189":[0,0,0],"190":[0,0],"191":[0,0],"192":[0,0],"193":[0,0],"194":[0,0],"195":[0,0],"196":[0,0],"197":[0,0],"198":[0,0],"199":[0,0],"200":[0,0],"201":[0,0],"202":[0,0],"203":[0,0],"204":[0,0],"205":[0,0],"206":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0},"fnMap":{"1":{"name":"factory","line":7,"loc":{"start":{"line":7,"column":0},"end":{"line":7,"column":51}}},"2":{"name":"Unit","line":39,"loc":{"start":{"line":39,"column":2},"end":{"line":39,"column":29}}},"3":{"name":"skipWhitespace","line":91,"loc":{"start":{"line":91,"column":2},"end":{"line":91,"column":28}}},"4":{"name":"isDigitDot","line":97,"loc":{"start":{"line":97,"column":2},"end":{"line":97,"column":25}}},"5":{"name":"isDigit","line":101,"loc":{"start":{"line":101,"column":2},"end":{"line":101,"column":22}}},"6":{"name":"next","line":105,"loc":{"start":{"line":105,"column":2},"end":{"line":105,"column":18}}},"7":{"name":"revert","line":110,"loc":{"start":{"line":110,"column":2},"end":{"line":110,"column":28}}},"8":{"name":"parseNumber","line":115,"loc":{"start":{"line":115,"column":2},"end":{"line":115,"column":25}}},"9":{"name":"parseUnit","line":192,"loc":{"start":{"line":192,"column":2},"end":{"line":192,"column":23}}},"10":{"name":"parseCharacter","line":216,"loc":{"start":{"line":216,"column":2},"end":{"line":216,"column":34}}},"11":{"name":"(anonymous_11)","line":236,"loc":{"start":{"line":236,"column":15},"end":{"line":236,"column":39}}},"12":{"name":"(anonymous_12)","line":417,"loc":{"start":{"line":417,"column":25},"end":{"line":417,"column":37}}},"13":{"name":"(anonymous_13)","line":443,"loc":{"start":{"line":443,"column":30},"end":{"line":443,"column":41}}},"14":{"name":"(anonymous_14)","line":457,"loc":{"start":{"line":457,"column":30},"end":{"line":457,"column":47}}},"15":{"name":"(anonymous_15)","line":499,"loc":{"start":{"line":499,"column":32},"end":{"line":499,"column":62}}},"16":{"name":"_findUnit","line":547,"loc":{"start":{"line":547,"column":2},"end":{"line":547,"column":26}}},"17":{"name":"(anonymous_17)","line":588,"loc":{"start":{"line":588,"column":25},"end":{"line":588,"column":41}}},"18":{"name":"(anonymous_18)","line":598,"loc":{"start":{"line":598,"column":27},"end":{"line":598,"column":43}}},"19":{"name":"(anonymous_19)","line":625,"loc":{"start":{"line":625,"column":29},"end":{"line":625,"column":46}}},"20":{"name":"(anonymous_20)","line":641,"loc":{"start":{"line":641,"column":26},"end":{"line":641,"column":43}}},"21":{"name":"(anonymous_21)","line":651,"loc":{"start":{"line":651,"column":28},"end":{"line":651,"column":45}}},"22":{"name":"(anonymous_22)","line":691,"loc":{"start":{"line":691,"column":26},"end":{"line":691,"column":43}}},"23":{"name":"(anonymous_23)","line":732,"loc":{"start":{"line":732,"column":23},"end":{"line":732,"column":36}}},"24":{"name":"(anonymous_24)","line":769,"loc":{"start":{"line":769,"column":29},"end":{"line":769,"column":44}}},"25":{"name":"(anonymous_25)","line":785,"loc":{"start":{"line":785,"column":23},"end":{"line":785,"column":35}}},"26":{"name":"(anonymous_26)","line":806,"loc":{"start":{"line":806,"column":22},"end":{"line":806,"column":47}}},"27":{"name":"(anonymous_27)","line":849,"loc":{"start":{"line":849,"column":28},"end":{"line":849,"column":53}}},"28":{"name":"(anonymous_28)","line":859,"loc":{"start":{"line":859,"column":29},"end":{"line":859,"column":54}}},"29":{"name":"(anonymous_29)","line":879,"loc":{"start":{"line":879,"column":28},"end":{"line":879,"column":40}}},"30":{"name":"(anonymous_30)","line":889,"loc":{"start":{"line":889,"column":26},"end":{"line":889,"column":38}}},"31":{"name":"(anonymous_31)","line":905,"loc":{"start":{"line":905,"column":18},"end":{"line":905,"column":34}}},"32":{"name":"(anonymous_32)","line":922,"loc":{"start":{"line":922,"column":40},"end":{"line":922,"column":51}}},"33":{"name":"(anonymous_33)","line":992,"loc":{"start":{"line":992,"column":24},"end":{"line":992,"column":35}}},"34":{"name":"(anonymous_34)","line":1031,"loc":{"start":{"line":1031,"column":31},"end":{"line":1031,"column":43}}},"35":{"name":"(anonymous_35)","line":1100,"loc":{"start":{"line":1100,"column":26},"end":{"line":1100,"column":45}}},"36":{"name":"(anonymous_36)","line":1158,"loc":{"start":{"line":1158,"column":31},"end":{"line":1158,"column":43}}},"37":{"name":"(anonymous_37)","line":1220,"loc":{"start":{"line":1220,"column":29},"end":{"line":1220,"column":45}}},"38":{"name":"calculateAngleValues","line":2796,"loc":{"start":{"line":2796,"column":2},"end":{"line":2796,"column":41}}},"39":{"name":"(anonymous_39)","line":2820,"loc":{"start":{"line":2820,"column":20},"end":{"line":2820,"column":42}}},"40":{"name":"(anonymous_40)","line":2894,"loc":{"start":{"line":2894,"column":23},"end":{"line":2894,"column":38}}},"41":{"name":"(anonymous_41)","line":2907,"loc":{"start":{"line":2907,"column":23},"end":{"line":2907,"column":34}}},"42":{"name":"(anonymous_42)","line":2920,"loc":{"start":{"line":2920,"column":15},"end":{"line":2920,"column":28}}},"43":{"name":"(anonymous_43)","line":2924,"loc":{"start":{"line":2924,"column":14},"end":{"line":2924,"column":27}}},"44":{"name":"(anonymous_44)","line":2928,"loc":{"start":{"line":2928,"column":13},"end":{"line":2928,"column":26}}},"45":{"name":"(anonymous_45)","line":2932,"loc":{"start":{"line":2932,"column":12},"end":{"line":2932,"column":25}}},"46":{"name":"(anonymous_46)","line":2945,"loc":{"start":{"line":2945,"column":29},"end":{"line":2945,"column":45}}},"47":{"name":"assertUnitNameIsValid","line":2974,"loc":{"start":{"line":2974,"column":2},"end":{"line":2974,"column":39}}},"48":{"name":"(anonymous_48)","line":2978,"loc":{"start":{"line":2978,"column":25},"end":{"line":2978,"column":38}}},"49":{"name":"(anonymous_49)","line":2982,"loc":{"start":{"line":2982,"column":20},"end":{"line":2982,"column":33}}},"50":{"name":"(anonymous_50)","line":3014,"loc":{"start":{"line":3014,"column":20},"end":{"line":3014,"column":43}}},"51":{"name":"(anonymous_51)","line":3059,"loc":{"start":{"line":3059,"column":26},"end":{"line":3059,"column":55}}},"52":{"name":"(anonymous_52)","line":3232,"loc":{"start":{"line":3232,"column":20},"end":{"line":3232,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":54}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":48}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":59}},"4":{"start":{"line":7,"column":0},"end":{"line":3243,"column":1}},"5":{"start":{"line":8,"column":2},"end":{"line":8,"column":71}},"6":{"start":{"line":9,"column":2},"end":{"line":9,"column":70}},"7":{"start":{"line":10,"column":2},"end":{"line":10,"column":76}},"8":{"start":{"line":11,"column":2},"end":{"line":11,"column":74}},"9":{"start":{"line":12,"column":2},"end":{"line":12,"column":65}},"10":{"start":{"line":13,"column":2},"end":{"line":13,"column":65}},"11":{"start":{"line":14,"column":2},"end":{"line":14,"column":65}},"12":{"start":{"line":15,"column":2},"end":{"line":15,"column":67}},"13":{"start":{"line":16,"column":2},"end":{"line":16,"column":66}},"14":{"start":{"line":17,"column":2},"end":{"line":17,"column":64}},"15":{"start":{"line":18,"column":2},"end":{"line":18,"column":63}},"16":{"start":{"line":19,"column":2},"end":{"line":19,"column":53}},"17":{"start":{"line":20,"column":2},"end":{"line":20,"column":62}},"18":{"start":{"line":39,"column":2},"end":{"line":80,"column":3}},"19":{"start":{"line":40,"column":4},"end":{"line":42,"column":5}},"20":{"start":{"line":41,"column":6},"end":{"line":41,"column":74}},"21":{"start":{"line":44,"column":4},"end":{"line":46,"column":5}},"22":{"start":{"line":45,"column":6},"end":{"line":45,"column":124}},"23":{"start":{"line":47,"column":4},"end":{"line":49,"column":5}},"24":{"start":{"line":48,"column":6},"end":{"line":48,"column":83}},"25":{"start":{"line":51,"column":4},"end":{"line":68,"column":5}},"26":{"start":{"line":52,"column":6},"end":{"line":52,"column":31}},"27":{"start":{"line":53,"column":6},"end":{"line":53,"column":27}},"28":{"start":{"line":54,"column":6},"end":{"line":54,"column":37}},"29":{"start":{"line":57,"column":6},"end":{"line":63,"column":8}},"30":{"start":{"line":64,"column":6},"end":{"line":64,"column":27}},"31":{"start":{"line":65,"column":6},"end":{"line":67,"column":7}},"32":{"start":{"line":66,"column":8},"end":{"line":66,"column":31}},"33":{"start":{"line":70,"column":4},"end":{"line":70,"column":70}},"34":{"start":{"line":72,"column":4},"end":{"line":72,"column":27}},"35":{"start":{"line":78,"column":4},"end":{"line":78,"column":37}},"36":{"start":{"line":85,"column":2},"end":{"line":85,"column":31}},"37":{"start":{"line":86,"column":2},"end":{"line":86,"column":31}},"38":{"start":{"line":89,"column":2},"end":{"line":89,"column":21}},"39":{"start":{"line":91,"column":2},"end":{"line":95,"column":3}},"40":{"start":{"line":92,"column":4},"end":{"line":94,"column":5}},"41":{"start":{"line":93,"column":6},"end":{"line":93,"column":13}},"42":{"start":{"line":97,"column":2},"end":{"line":99,"column":3}},"43":{"start":{"line":98,"column":4},"end":{"line":98,"column":48}},"44":{"start":{"line":101,"column":2},"end":{"line":103,"column":3}},"45":{"start":{"line":102,"column":4},"end":{"line":102,"column":36}},"46":{"start":{"line":105,"column":2},"end":{"line":108,"column":3}},"47":{"start":{"line":106,"column":4},"end":{"line":106,"column":12}},"48":{"start":{"line":107,"column":4},"end":{"line":107,"column":27}},"49":{"start":{"line":110,"column":2},"end":{"line":113,"column":3}},"50":{"start":{"line":111,"column":4},"end":{"line":111,"column":21}},"51":{"start":{"line":112,"column":4},"end":{"line":112,"column":27}},"52":{"start":{"line":115,"column":2},"end":{"line":190,"column":3}},"53":{"start":{"line":116,"column":4},"end":{"line":116,"column":20}},"54":{"start":{"line":117,"column":4},"end":{"line":117,"column":17}},"55":{"start":{"line":118,"column":4},"end":{"line":118,"column":21}},"56":{"start":{"line":120,"column":4},"end":{"line":126,"column":5}},"57":{"start":{"line":121,"column":6},"end":{"line":121,"column":13}},"58":{"start":{"line":123,"column":9},"end":{"line":126,"column":5}},"59":{"start":{"line":124,"column":6},"end":{"line":124,"column":18}},"60":{"start":{"line":125,"column":6},"end":{"line":125,"column":13}},"61":{"start":{"line":128,"column":4},"end":{"line":132,"column":5}},"62":{"start":{"line":130,"column":6},"end":{"line":130,"column":23}},"63":{"start":{"line":131,"column":6},"end":{"line":131,"column":18}},"64":{"start":{"line":135,"column":4},"end":{"line":153,"column":5}},"65":{"start":{"line":136,"column":6},"end":{"line":136,"column":18}},"66":{"start":{"line":137,"column":6},"end":{"line":137,"column":13}},"67":{"start":{"line":138,"column":6},"end":{"line":142,"column":7}},"68":{"start":{"line":140,"column":8},"end":{"line":140,"column":25}},"69":{"start":{"line":141,"column":8},"end":{"line":141,"column":20}},"70":{"start":{"line":145,"column":6},"end":{"line":148,"column":7}},"71":{"start":{"line":146,"column":8},"end":{"line":146,"column":20}},"72":{"start":{"line":147,"column":8},"end":{"line":147,"column":15}},"73":{"start":{"line":149,"column":6},"end":{"line":152,"column":7}},"74":{"start":{"line":150,"column":8},"end":{"line":150,"column":20}},"75":{"start":{"line":151,"column":8},"end":{"line":151,"column":15}},"76":{"start":{"line":154,"column":4},"end":{"line":157,"column":5}},"77":{"start":{"line":155,"column":6},"end":{"line":155,"column":18}},"78":{"start":{"line":156,"column":6},"end":{"line":156,"column":13}},"79":{"start":{"line":160,"column":4},"end":{"line":187,"column":5}},"80":{"start":{"line":163,"column":6},"end":{"line":163,"column":31}},"81":{"start":{"line":164,"column":6},"end":{"line":164,"column":33}},"82":{"start":{"line":166,"column":6},"end":{"line":166,"column":27}},"83":{"start":{"line":167,"column":6},"end":{"line":167,"column":13}},"84":{"start":{"line":169,"column":6},"end":{"line":172,"column":7}},"85":{"start":{"line":170,"column":8},"end":{"line":170,"column":29}},"86":{"start":{"line":171,"column":8},"end":{"line":171,"column":15}},"87":{"start":{"line":175,"column":6},"end":{"line":179,"column":7}},"88":{"start":{"line":177,"column":8},"end":{"line":177,"column":31}},"89":{"start":{"line":178,"column":8},"end":{"line":178,"column":22}},"90":{"start":{"line":182,"column":6},"end":{"line":182,"column":40}},"91":{"start":{"line":183,"column":6},"end":{"line":186,"column":7}},"92":{"start":{"line":184,"column":8},"end":{"line":184,"column":20}},"93":{"start":{"line":185,"column":8},"end":{"line":185,"column":15}},"94":{"start":{"line":189,"column":4},"end":{"line":189,"column":18}},"95":{"start":{"line":192,"column":2},"end":{"line":214,"column":3}},"96":{"start":{"line":193,"column":4},"end":{"line":193,"column":22}},"97":{"start":{"line":196,"column":4},"end":{"line":196,"column":38}},"98":{"start":{"line":197,"column":4},"end":{"line":203,"column":5}},"99":{"start":{"line":200,"column":6},"end":{"line":200,"column":20}},"100":{"start":{"line":201,"column":6},"end":{"line":201,"column":13}},"101":{"start":{"line":202,"column":6},"end":{"line":202,"column":36}},"102":{"start":{"line":206,"column":4},"end":{"line":206,"column":34}},"103":{"start":{"line":207,"column":4},"end":{"line":213,"column":5}},"104":{"start":{"line":209,"column":8},"end":{"line":209,"column":32}},"105":{"start":{"line":212,"column":6},"end":{"line":212,"column":18}},"106":{"start":{"line":216,"column":2},"end":{"line":224,"column":3}},"107":{"start":{"line":217,"column":4},"end":{"line":223,"column":5}},"108":{"start":{"line":218,"column":6},"end":{"line":218,"column":13}},"109":{"start":{"line":219,"column":6},"end":{"line":219,"column":20}},"110":{"start":{"line":222,"column":6},"end":{"line":222,"column":18}},"111":{"start":{"line":236,"column":2},"end":{"line":410,"column":4}},"112":{"start":{"line":237,"column":4},"end":{"line":237,"column":28}},"113":{"start":{"line":238,"column":4},"end":{"line":238,"column":15}},"114":{"start":{"line":239,"column":4},"end":{"line":239,"column":15}},"115":{"start":{"line":240,"column":4},"end":{"line":240,"column":11}},"116":{"start":{"line":242,"column":4},"end":{"line":244,"column":5}},"117":{"start":{"line":243,"column":6},"end":{"line":243,"column":77}},"118":{"start":{"line":246,"column":4},"end":{"line":246,"column":26}},"119":{"start":{"line":247,"column":4},"end":{"line":247,"column":20}},"120":{"start":{"line":262,"column":4},"end":{"line":262,"column":11}},"121":{"start":{"line":263,"column":4},"end":{"line":263,"column":21}},"122":{"start":{"line":265,"column":4},"end":{"line":265,"column":33}},"123":{"start":{"line":266,"column":4},"end":{"line":266,"column":21}},"124":{"start":{"line":267,"column":4},"end":{"line":277,"column":5}},"125":{"start":{"line":268,"column":6},"end":{"line":276,"column":7}},"126":{"start":{"line":269,"column":8},"end":{"line":269,"column":45}},"127":{"start":{"line":271,"column":11},"end":{"line":276,"column":7}},"128":{"start":{"line":272,"column":8},"end":{"line":272,"column":44}},"129":{"start":{"line":275,"column":8},"end":{"line":275,"column":37}},"130":{"start":{"line":278,"column":4},"end":{"line":278,"column":21}},"131":{"start":{"line":281,"column":4},"end":{"line":281,"column":35}},"132":{"start":{"line":282,"column":4},"end":{"line":282,"column":30}},"133":{"start":{"line":285,"column":4},"end":{"line":285,"column":34}},"134":{"start":{"line":288,"column":4},"end":{"line":288,"column":40}},"135":{"start":{"line":290,"column":4},"end":{"line":385,"column":5}},"136":{"start":{"line":291,"column":6},"end":{"line":291,"column":23}},"137":{"start":{"line":295,"column":6},"end":{"line":301,"column":7}},"138":{"start":{"line":296,"column":8},"end":{"line":296,"column":58}},"139":{"start":{"line":297,"column":8},"end":{"line":297,"column":62}},"140":{"start":{"line":298,"column":8},"end":{"line":298,"column":35}},"141":{"start":{"line":299,"column":8},"end":{"line":299,"column":15}},"142":{"start":{"line":300,"column":8},"end":{"line":300,"column":25}},"143":{"start":{"line":304,"column":6},"end":{"line":314,"column":7}},"144":{"start":{"line":305,"column":8},"end":{"line":305,"column":21}},"145":{"start":{"line":306,"column":8},"end":{"line":306,"column":31}},"146":{"start":{"line":307,"column":8},"end":{"line":309,"column":9}},"147":{"start":{"line":308,"column":10},"end":{"line":308,"column":108}},"148":{"start":{"line":313,"column":8},"end":{"line":313,"column":14}},"149":{"start":{"line":317,"column":6},"end":{"line":317,"column":32}},"150":{"start":{"line":318,"column":6},"end":{"line":321,"column":7}},"151":{"start":{"line":320,"column":8},"end":{"line":320,"column":64}},"152":{"start":{"line":323,"column":6},"end":{"line":323,"column":71}},"153":{"start":{"line":325,"column":6},"end":{"line":325,"column":23}},"154":{"start":{"line":326,"column":6},"end":{"line":334,"column":7}},"155":{"start":{"line":327,"column":8},"end":{"line":327,"column":25}},"156":{"start":{"line":328,"column":8},"end":{"line":328,"column":30}},"157":{"start":{"line":329,"column":8},"end":{"line":332,"column":9}},"158":{"start":{"line":331,"column":10},"end":{"line":331,"column":101}},"159":{"start":{"line":333,"column":8},"end":{"line":333,"column":19}},"160":{"start":{"line":337,"column":6},"end":{"line":341,"column":9}},"161":{"start":{"line":342,"column":6},"end":{"line":344,"column":7}},"162":{"start":{"line":343,"column":8},"end":{"line":343,"column":68}},"163":{"start":{"line":348,"column":6},"end":{"line":348,"column":23}},"164":{"start":{"line":349,"column":6},"end":{"line":356,"column":7}},"165":{"start":{"line":350,"column":8},"end":{"line":352,"column":9}},"166":{"start":{"line":351,"column":10},"end":{"line":351,"column":96}},"167":{"start":{"line":353,"column":8},"end":{"line":353,"column":66}},"168":{"start":{"line":354,"column":8},"end":{"line":354,"column":15}},"169":{"start":{"line":355,"column":8},"end":{"line":355,"column":25}},"170":{"start":{"line":360,"column":6},"end":{"line":360,"column":28}},"171":{"start":{"line":362,"column":6},"end":{"line":375,"column":7}},"172":{"start":{"line":364,"column":8},"end":{"line":364,"column":35}},"173":{"start":{"line":365,"column":8},"end":{"line":365,"column":29}},"174":{"start":{"line":367,"column":11},"end":{"line":375,"column":7}},"175":{"start":{"line":369,"column":8},"end":{"line":369,"column":36}},"176":{"start":{"line":370,"column":8},"end":{"line":370,"column":29}},"177":{"start":{"line":374,"column":8},"end":{"line":374,"column":35}},"178":{"start":{"line":378,"column":6},"end":{"line":384,"column":7}},"179":{"start":{"line":379,"column":8},"end":{"line":379,"column":40}},"180":{"start":{"line":380,"column":8},"end":{"line":383,"column":10}},"181":{"start":{"line":388,"column":4},"end":{"line":388,"column":21}},"182":{"start":{"line":389,"column":4},"end":{"line":391,"column":5}},"183":{"start":{"line":390,"column":6},"end":{"line":390,"column":62}},"184":{"start":{"line":394,"column":4},"end":{"line":396,"column":5}},"185":{"start":{"line":395,"column":6},"end":{"line":395,"column":66}},"186":{"start":{"line":399,"column":4},"end":{"line":401,"column":5}},"187":{"start":{"line":400,"column":6},"end":{"line":400,"column":63}},"188":{"start":{"line":404,"column":4},"end":{"line":406,"column":5}},"189":{"start":{"line":405,"column":6},"end":{"line":405,"column":63}},"190":{"start":{"line":408,"column":4},"end":{"line":408,"column":70}},"191":{"start":{"line":409,"column":4},"end":{"line":409,"column":16}},"192":{"start":{"line":417,"column":2},"end":{"line":436,"column":4}},"193":{"start":{"line":418,"column":4},"end":{"line":418,"column":26}},"194":{"start":{"line":420,"column":4},"end":{"line":420,"column":36}},"195":{"start":{"line":421,"column":4},"end":{"line":421,"column":58}},"196":{"start":{"line":423,"column":4},"end":{"line":423,"column":35}},"197":{"start":{"line":424,"column":4},"end":{"line":424,"column":47}},"198":{"start":{"line":425,"column":4},"end":{"line":425,"column":20}},"199":{"start":{"line":426,"column":4},"end":{"line":433,"column":5}},"200":{"start":{"line":427,"column":6},"end":{"line":427,"column":26}},"201":{"start":{"line":428,"column":6},"end":{"line":432,"column":7}},"202":{"start":{"line":429,"column":8},"end":{"line":431,"column":9}},"203":{"start":{"line":430,"column":10},"end":{"line":430,"column":46}},"204":{"start":{"line":435,"column":4},"end":{"line":435,"column":16}},"205":{"start":{"line":443,"column":2},"end":{"line":448,"column":4}},"206":{"start":{"line":444,"column":4},"end":{"line":446,"column":5}},"207":{"start":{"line":445,"column":6},"end":{"line":445,"column":19}},"208":{"start":{"line":447,"column":4},"end":{"line":447,"column":80}},"209":{"start":{"line":457,"column":2},"end":{"line":489,"column":4}},"210":{"start":{"line":458,"column":4},"end":{"line":458,"column":58}},"211":{"start":{"line":459,"column":4},"end":{"line":459,"column":16}},"212":{"start":{"line":461,"column":4},"end":{"line":488,"column":5}},"213":{"start":{"line":462,"column":6},"end":{"line":462,"column":19}},"214":{"start":{"line":464,"column":9},"end":{"line":488,"column":5}},"215":{"start":{"line":467,"column":6},"end":{"line":467,"column":22}},"216":{"start":{"line":468,"column":6},"end":{"line":468,"column":59}},"217":{"start":{"line":470,"column":6},"end":{"line":475,"column":7}},"218":{"start":{"line":471,"column":8},"end":{"line":471,"column":60}},"219":{"start":{"line":472,"column":8},"end":{"line":472,"column":62}},"220":{"start":{"line":473,"column":8},"end":{"line":473,"column":55}},"221":{"start":{"line":474,"column":8},"end":{"line":474,"column":82}},"222":{"start":{"line":477,"column":6},"end":{"line":477,"column":17}},"223":{"start":{"line":481,"column":6},"end":{"line":481,"column":59}},"224":{"start":{"line":483,"column":6},"end":{"line":483,"column":58}},"225":{"start":{"line":484,"column":6},"end":{"line":484,"column":59}},"226":{"start":{"line":485,"column":6},"end":{"line":485,"column":60}},"227":{"start":{"line":487,"column":6},"end":{"line":487,"column":84}},"228":{"start":{"line":499,"column":2},"end":{"line":537,"column":4}},"229":{"start":{"line":500,"column":4},"end":{"line":500,"column":58}},"230":{"start":{"line":501,"column":4},"end":{"line":501,"column":16}},"231":{"start":{"line":503,"column":4},"end":{"line":536,"column":5}},"232":{"start":{"line":504,"column":6},"end":{"line":504,"column":19}},"233":{"start":{"line":506,"column":9},"end":{"line":536,"column":5}},"234":{"start":{"line":510,"column":6},"end":{"line":510,"column":22}},"235":{"start":{"line":511,"column":6},"end":{"line":511,"column":59}},"236":{"start":{"line":513,"column":6},"end":{"line":518,"column":7}},"237":{"start":{"line":514,"column":8},"end":{"line":514,"column":60}},"238":{"start":{"line":515,"column":8},"end":{"line":515,"column":62}},"239":{"start":{"line":516,"column":8},"end":{"line":516,"column":55}},"240":{"start":{"line":517,"column":8},"end":{"line":517,"column":80}},"241":{"start":{"line":520,"column":6},"end":{"line":520,"column":17}},"242":{"start":{"line":524,"column":6},"end":{"line":524,"column":59}},"243":{"start":{"line":526,"column":6},"end":{"line":526,"column":58}},"244":{"start":{"line":527,"column":6},"end":{"line":527,"column":60}},"245":{"start":{"line":528,"column":6},"end":{"line":528,"column":59}},"246":{"start":{"line":530,"column":6},"end":{"line":535,"column":7}},"247":{"start":{"line":531,"column":8},"end":{"line":531,"column":87}},"248":{"start":{"line":534,"column":8},"end":{"line":534,"column":83}},"249":{"start":{"line":547,"column":2},"end":{"line":578,"column":3}},"250":{"start":{"line":550,"column":4},"end":{"line":557,"column":5}},"251":{"start":{"line":551,"column":6},"end":{"line":551,"column":28}},"252":{"start":{"line":552,"column":6},"end":{"line":552,"column":37}},"253":{"start":{"line":553,"column":6},"end":{"line":556,"column":7}},"254":{"start":{"line":559,"column":4},"end":{"line":575,"column":5}},"255":{"start":{"line":560,"column":6},"end":{"line":574,"column":7}},"256":{"start":{"line":561,"column":8},"end":{"line":573,"column":9}},"257":{"start":{"line":562,"column":10},"end":{"line":562,"column":33}},"258":{"start":{"line":563,"column":10},"end":{"line":563,"column":53}},"259":{"start":{"line":564,"column":10},"end":{"line":564,"column":55}},"260":{"start":{"line":565,"column":10},"end":{"line":565,"column":49}},"261":{"start":{"line":566,"column":10},"end":{"line":572,"column":11}},"262":{"start":{"line":568,"column":12},"end":{"line":571,"column":14}},"263":{"start":{"line":577,"column":4},"end":{"line":577,"column":16}},"264":{"start":{"line":588,"column":2},"end":{"line":590,"column":4}},"265":{"start":{"line":589,"column":4},"end":{"line":589,"column":37}},"266":{"start":{"line":598,"column":2},"end":{"line":616,"column":4}},"267":{"start":{"line":600,"column":4},"end":{"line":602,"column":5}},"268":{"start":{"line":601,"column":6},"end":{"line":601,"column":30}},"269":{"start":{"line":604,"column":4},"end":{"line":605,"column":19}},"270":{"start":{"line":605,"column":6},"end":{"line":605,"column":19}},"271":{"start":{"line":609,"column":4},"end":{"line":613,"column":5}},"272":{"start":{"line":610,"column":6},"end":{"line":612,"column":7}},"273":{"start":{"line":611,"column":8},"end":{"line":611,"column":21}},"274":{"start":{"line":614,"column":4},"end":{"line":614,"column":16}},"275":{"start":{"line":625,"column":2},"end":{"line":633,"column":4}},"276":{"start":{"line":627,"column":4},"end":{"line":631,"column":5}},"277":{"start":{"line":628,"column":6},"end":{"line":630,"column":7}},"278":{"start":{"line":629,"column":8},"end":{"line":629,"column":21}},"279":{"start":{"line":632,"column":4},"end":{"line":632,"column":16}},"280":{"start":{"line":641,"column":2},"end":{"line":643,"column":4}},"281":{"start":{"line":642,"column":4},"end":{"line":642,"column":69}},"282":{"start":{"line":651,"column":2},"end":{"line":683,"column":4}},"283":{"start":{"line":652,"column":4},"end":{"line":652,"column":27}},"284":{"start":{"line":654,"column":4},"end":{"line":657,"column":5}},"285":{"start":{"line":656,"column":6},"end":{"line":656,"column":81}},"286":{"start":{"line":660,"column":4},"end":{"line":667,"column":5}},"287":{"start":{"line":662,"column":6},"end":{"line":662,"column":24}},"288":{"start":{"line":663,"column":6},"end":{"line":665,"column":7}},"289":{"start":{"line":664,"column":8},"end":{"line":664,"column":44}},"290":{"start":{"line":666,"column":6},"end":{"line":666,"column":31}},"291":{"start":{"line":670,"column":4},"end":{"line":677,"column":5}},"292":{"start":{"line":671,"column":6},"end":{"line":671,"column":73}},"293":{"start":{"line":672,"column":6},"end":{"line":672,"column":77}},"294":{"start":{"line":673,"column":6},"end":{"line":673,"column":46}},"295":{"start":{"line":676,"column":6},"end":{"line":676,"column":23}},"296":{"start":{"line":680,"column":4},"end":{"line":680,"column":37}},"297":{"start":{"line":682,"column":4},"end":{"line":682,"column":37}},"298":{"start":{"line":691,"column":2},"end":{"line":724,"column":4}},"299":{"start":{"line":692,"column":4},"end":{"line":692,"column":27}},"300":{"start":{"line":694,"column":4},"end":{"line":697,"column":5}},"301":{"start":{"line":696,"column":6},"end":{"line":696,"column":81}},"302":{"start":{"line":700,"column":4},"end":{"line":708,"column":5}},"303":{"start":{"line":702,"column":6},"end":{"line":702,"column":24}},"304":{"start":{"line":703,"column":6},"end":{"line":705,"column":7}},"305":{"start":{"line":704,"column":8},"end":{"line":704,"column":44}},"306":{"start":{"line":706,"column":6},"end":{"line":706,"column":39}},"307":{"start":{"line":707,"column":6},"end":{"line":707,"column":31}},"308":{"start":{"line":711,"column":4},"end":{"line":718,"column":5}},"309":{"start":{"line":712,"column":6},"end":{"line":712,"column":73}},"310":{"start":{"line":713,"column":6},"end":{"line":713,"column":77}},"311":{"start":{"line":714,"column":6},"end":{"line":714,"column":44}},"312":{"start":{"line":717,"column":6},"end":{"line":717,"column":23}},"313":{"start":{"line":721,"column":4},"end":{"line":721,"column":37}},"314":{"start":{"line":723,"column":4},"end":{"line":723,"column":37}},"315":{"start":{"line":732,"column":2},"end":{"line":762,"column":4}},"316":{"start":{"line":733,"column":4},"end":{"line":733,"column":27}},"317":{"start":{"line":735,"column":4},"end":{"line":738,"column":5}},"318":{"start":{"line":737,"column":6},"end":{"line":737,"column":56}},"319":{"start":{"line":741,"column":4},"end":{"line":743,"column":5}},"320":{"start":{"line":742,"column":6},"end":{"line":742,"column":30}},"321":{"start":{"line":745,"column":4},"end":{"line":756,"column":5}},"322":{"start":{"line":746,"column":6},"end":{"line":746,"column":36}},"323":{"start":{"line":755,"column":6},"end":{"line":755,"column":23}},"324":{"start":{"line":759,"column":4},"end":{"line":759,"column":37}},"325":{"start":{"line":761,"column":4},"end":{"line":761,"column":37}},"326":{"start":{"line":769,"column":2},"end":{"line":776,"column":3}},"327":{"start":{"line":770,"column":4},"end":{"line":775,"column":5}},"328":{"start":{"line":771,"column":6},"end":{"line":771,"column":24}},"329":{"start":{"line":774,"column":6},"end":{"line":774,"column":18}},"330":{"start":{"line":785,"column":2},"end":{"line":798,"column":4}},"331":{"start":{"line":788,"column":4},"end":{"line":788,"column":27}},"332":{"start":{"line":789,"column":4},"end":{"line":789,"column":31}},"333":{"start":{"line":791,"column":4},"end":{"line":795,"column":5}},"334":{"start":{"line":792,"column":6},"end":{"line":794,"column":7}},"335":{"start":{"line":793,"column":8},"end":{"line":793,"column":39}},"336":{"start":{"line":797,"column":4},"end":{"line":797,"column":15}},"337":{"start":{"line":806,"column":2},"end":{"line":840,"column":4}},"338":{"start":{"line":807,"column":4},"end":{"line":807,"column":14}},"339":{"start":{"line":808,"column":4},"end":{"line":808,"column":69}},"340":{"start":{"line":809,"column":4},"end":{"line":839,"column":5}},"341":{"start":{"line":811,"column":6},"end":{"line":811,"column":40}},"342":{"start":{"line":812,"column":6},"end":{"line":814,"column":7}},"343":{"start":{"line":813,"column":8},"end":{"line":813,"column":46}},"344":{"start":{"line":815,"column":6},"end":{"line":817,"column":7}},"345":{"start":{"line":816,"column":8},"end":{"line":816,"column":65}},"346":{"start":{"line":819,"column":6},"end":{"line":819,"column":33}},"347":{"start":{"line":820,"column":6},"end":{"line":820,"column":29}},"348":{"start":{"line":821,"column":6},"end":{"line":821,"column":40}},"349":{"start":{"line":822,"column":6},"end":{"line":822,"column":19}},"350":{"start":{"line":824,"column":9},"end":{"line":839,"column":5}},"351":{"start":{"line":825,"column":6},"end":{"line":827,"column":7}},"352":{"start":{"line":826,"column":8},"end":{"line":826,"column":46}},"353":{"start":{"line":828,"column":6},"end":{"line":830,"column":7}},"354":{"start":{"line":829,"column":8},"end":{"line":829,"column":65}},"355":{"start":{"line":831,"column":6},"end":{"line":831,"column":36}},"356":{"start":{"line":832,"column":6},"end":{"line":832,"column":33}},"357":{"start":{"line":833,"column":6},"end":{"line":833,"column":29}},"358":{"start":{"line":834,"column":6},"end":{"line":834,"column":40}},"359":{"start":{"line":835,"column":6},"end":{"line":835,"column":19}},"360":{"start":{"line":838,"column":6},"end":{"line":838,"column":62}},"361":{"start":{"line":849,"column":2},"end":{"line":851,"column":4}},"362":{"start":{"line":850,"column":4},"end":{"line":850,"column":51}},"363":{"start":{"line":859,"column":2},"end":{"line":872,"column":4}},"364":{"start":{"line":860,"column":4},"end":{"line":860,"column":21}},"365":{"start":{"line":861,"column":4},"end":{"line":864,"column":5}},"366":{"start":{"line":863,"column":6},"end":{"line":863,"column":37}},"367":{"start":{"line":866,"column":4},"end":{"line":871,"column":5}},"368":{"start":{"line":867,"column":6},"end":{"line":867,"column":45}},"369":{"start":{"line":870,"column":6},"end":{"line":870,"column":74}},"370":{"start":{"line":879,"column":2},"end":{"line":881,"column":4}},"371":{"start":{"line":880,"column":4},"end":{"line":880,"column":25}},"372":{"start":{"line":889,"column":2},"end":{"line":896,"column":4}},"373":{"start":{"line":890,"column":4},"end":{"line":895,"column":6}},"374":{"start":{"line":905,"column":2},"end":{"line":909,"column":4}},"375":{"start":{"line":906,"column":4},"end":{"line":906,"column":47}},"376":{"start":{"line":907,"column":4},"end":{"line":907,"column":45}},"377":{"start":{"line":908,"column":4},"end":{"line":908,"column":16}},"378":{"start":{"line":916,"column":2},"end":{"line":916,"column":51}},"379":{"start":{"line":922,"column":2},"end":{"line":990,"column":4}},"380":{"start":{"line":924,"column":4},"end":{"line":926,"column":5}},"381":{"start":{"line":925,"column":6},"end":{"line":925,"column":13}},"382":{"start":{"line":928,"column":4},"end":{"line":928,"column":30}},"383":{"start":{"line":931,"column":4},"end":{"line":931,"column":21}},"384":{"start":{"line":932,"column":4},"end":{"line":937,"column":5}},"385":{"start":{"line":933,"column":6},"end":{"line":936,"column":7}},"386":{"start":{"line":934,"column":8},"end":{"line":934,"column":27}},"387":{"start":{"line":935,"column":8},"end":{"line":935,"column":14}},"388":{"start":{"line":939,"column":4},"end":{"line":987,"column":5}},"389":{"start":{"line":941,"column":6},"end":{"line":941,"column":22}},"390":{"start":{"line":944,"column":6},"end":{"line":944,"column":23}},"391":{"start":{"line":945,"column":6},"end":{"line":950,"column":7}},"392":{"start":{"line":947,"column":8},"end":{"line":949,"column":9}},"393":{"start":{"line":948,"column":10},"end":{"line":948,"column":57}},"394":{"start":{"line":951,"column":6},"end":{"line":951,"column":16}},"395":{"start":{"line":952,"column":6},"end":{"line":952,"column":14}},"396":{"start":{"line":953,"column":6},"end":{"line":986,"column":7}},"397":{"start":{"line":954,"column":8},"end":{"line":958,"column":11}},"398":{"start":{"line":964,"column":8},"end":{"line":964,"column":35}},"399":{"start":{"line":965,"column":8},"end":{"line":979,"column":9}},"400":{"start":{"line":966,"column":10},"end":{"line":966,"column":43}},"401":{"start":{"line":967,"column":10},"end":{"line":978,"column":11}},"402":{"start":{"line":968,"column":12},"end":{"line":977,"column":13}},"403":{"start":{"line":969,"column":14},"end":{"line":973,"column":17}},"404":{"start":{"line":976,"column":14},"end":{"line":976,"column":36}},"405":{"start":{"line":982,"column":8},"end":{"line":985,"column":9}},"406":{"start":{"line":984,"column":10},"end":{"line":984,"column":40}},"407":{"start":{"line":989,"column":4},"end":{"line":989,"column":37}},"408":{"start":{"line":992,"column":2},"end":{"line":1024,"column":3}},"409":{"start":{"line":994,"column":4},"end":{"line":994,"column":27}},"410":{"start":{"line":996,"column":4},"end":{"line":996,"column":30}},"411":{"start":{"line":1001,"column":4},"end":{"line":1001,"column":31}},"412":{"start":{"line":1002,"column":4},"end":{"line":1016,"column":5}},"413":{"start":{"line":1003,"column":6},"end":{"line":1003,"column":39}},"414":{"start":{"line":1004,"column":6},"end":{"line":1015,"column":7}},"415":{"start":{"line":1005,"column":8},"end":{"line":1014,"column":9}},"416":{"start":{"line":1006,"column":10},"end":{"line":1010,"column":13}},"417":{"start":{"line":1013,"column":10},"end":{"line":1013,"column":84}},"418":{"start":{"line":1019,"column":4},"end":{"line":1019,"column":33}},"419":{"start":{"line":1021,"column":4},"end":{"line":1021,"column":36}},"420":{"start":{"line":1023,"column":4},"end":{"line":1023,"column":15}},"421":{"start":{"line":1031,"column":2},"end":{"line":1089,"column":4}},"422":{"start":{"line":1034,"column":4},"end":{"line":1034,"column":32}},"423":{"start":{"line":1036,"column":4},"end":{"line":1036,"column":20}},"424":{"start":{"line":1037,"column":4},"end":{"line":1037,"column":20}},"425":{"start":{"line":1038,"column":4},"end":{"line":1038,"column":17}},"426":{"start":{"line":1039,"column":4},"end":{"line":1039,"column":17}},"427":{"start":{"line":1041,"column":4},"end":{"line":1052,"column":5}},"428":{"start":{"line":1042,"column":6},"end":{"line":1051,"column":7}},"429":{"start":{"line":1043,"column":8},"end":{"line":1043,"column":15}},"430":{"start":{"line":1044,"column":8},"end":{"line":1044,"column":76}},"431":{"start":{"line":1045,"column":8},"end":{"line":1047,"column":9}},"432":{"start":{"line":1046,"column":10},"end":{"line":1046,"column":46}},"433":{"start":{"line":1049,"column":11},"end":{"line":1051,"column":7}},"434":{"start":{"line":1050,"column":8},"end":{"line":1050,"column":15}},"435":{"start":{"line":1054,"column":4},"end":{"line":1069,"column":5}},"436":{"start":{"line":1055,"column":6},"end":{"line":1068,"column":7}},"437":{"start":{"line":1056,"column":8},"end":{"line":1067,"column":9}},"438":{"start":{"line":1057,"column":10},"end":{"line":1066,"column":11}},"439":{"start":{"line":1058,"column":12},"end":{"line":1058,"column":80}},"440":{"start":{"line":1059,"column":12},"end":{"line":1061,"column":13}},"441":{"start":{"line":1060,"column":14},"end":{"line":1060,"column":53}},"442":{"start":{"line":1064,"column":12},"end":{"line":1064,"column":80}},"443":{"start":{"line":1065,"column":12},"end":{"line":1065,"column":50}},"444":{"start":{"line":1071,"column":4},"end":{"line":1071,"column":30}},"445":{"start":{"line":1072,"column":4},"end":{"line":1072,"column":30}},"446":{"start":{"line":1075,"column":4},"end":{"line":1077,"column":5}},"447":{"start":{"line":1076,"column":6},"end":{"line":1076,"column":34}},"448":{"start":{"line":1078,"column":4},"end":{"line":1080,"column":5}},"449":{"start":{"line":1079,"column":6},"end":{"line":1079,"column":34}},"450":{"start":{"line":1082,"column":4},"end":{"line":1082,"column":21}},"451":{"start":{"line":1083,"column":4},"end":{"line":1085,"column":5}},"452":{"start":{"line":1084,"column":6},"end":{"line":1084,"column":19}},"453":{"start":{"line":1086,"column":4},"end":{"line":1086,"column":18}},"454":{"start":{"line":1088,"column":4},"end":{"line":1088,"column":15}},"455":{"start":{"line":1100,"column":2},"end":{"line":1150,"column":4}},"456":{"start":{"line":1103,"column":4},"end":{"line":1103,"column":32}},"457":{"start":{"line":1106,"column":4},"end":{"line":1106,"column":28}},"458":{"start":{"line":1107,"column":4},"end":{"line":1107,"column":22}},"459":{"start":{"line":1108,"column":4},"end":{"line":1112,"column":5}},"460":{"start":{"line":1110,"column":6},"end":{"line":1110,"column":52}},"461":{"start":{"line":1111,"column":6},"end":{"line":1111,"column":47}},"462":{"start":{"line":1114,"column":4},"end":{"line":1123,"column":5}},"463":{"start":{"line":1115,"column":6},"end":{"line":1122,"column":7}},"464":{"start":{"line":1116,"column":8},"end":{"line":1121,"column":9}},"465":{"start":{"line":1117,"column":10},"end":{"line":1117,"column":44}},"466":{"start":{"line":1119,"column":13},"end":{"line":1121,"column":9}},"467":{"start":{"line":1120,"column":10},"end":{"line":1120,"column":43}},"468":{"start":{"line":1128,"column":4},"end":{"line":1135,"column":5}},"469":{"start":{"line":1131,"column":6},"end":{"line":1134,"column":7}},"470":{"start":{"line":1133,"column":8},"end":{"line":1133,"column":50}},"471":{"start":{"line":1138,"column":4},"end":{"line":1138,"column":46}},"472":{"start":{"line":1139,"column":4},"end":{"line":1139,"column":72}},"473":{"start":{"line":1140,"column":4},"end":{"line":1140,"column":37}},"474":{"start":{"line":1141,"column":4},"end":{"line":1143,"column":5}},"475":{"start":{"line":1142,"column":6},"end":{"line":1142,"column":28}},"476":{"start":{"line":1144,"column":4},"end":{"line":1146,"column":5}},"477":{"start":{"line":1145,"column":6},"end":{"line":1145,"column":17}},"478":{"start":{"line":1147,"column":4},"end":{"line":1147,"column":19}},"479":{"start":{"line":1149,"column":4},"end":{"line":1149,"column":15}},"480":{"start":{"line":1158,"column":2},"end":{"line":1205,"column":4}},"481":{"start":{"line":1159,"column":4},"end":{"line":1161,"column":5}},"482":{"start":{"line":1160,"column":6},"end":{"line":1160,"column":130}},"483":{"start":{"line":1162,"column":4},"end":{"line":1164,"column":5}},"484":{"start":{"line":1163,"column":6},"end":{"line":1163,"column":130}},"485":{"start":{"line":1174,"column":4},"end":{"line":1174,"column":35}},"486":{"start":{"line":1175,"column":4},"end":{"line":1175,"column":53}},"487":{"start":{"line":1176,"column":4},"end":{"line":1176,"column":42}},"488":{"start":{"line":1177,"column":4},"end":{"line":1179,"column":5}},"489":{"start":{"line":1178,"column":6},"end":{"line":1178,"column":24}},"490":{"start":{"line":1180,"column":4},"end":{"line":1180,"column":36}},"491":{"start":{"line":1181,"column":4},"end":{"line":1181,"column":107}},"492":{"start":{"line":1182,"column":4},"end":{"line":1182,"column":70}},"493":{"start":{"line":1182,"column":52},"end":{"line":1182,"column":70}},"494":{"start":{"line":1183,"column":4},"end":{"line":1183,"column":34}},"495":{"start":{"line":1184,"column":4},"end":{"line":1184,"column":47}},"496":{"start":{"line":1185,"column":4},"end":{"line":1202,"column":5}},"497":{"start":{"line":1186,"column":6},"end":{"line":1201,"column":7}},"498":{"start":{"line":1187,"column":8},"end":{"line":1187,"column":33}},"499":{"start":{"line":1188,"column":8},"end":{"line":1200,"column":9}},"500":{"start":{"line":1190,"column":10},"end":{"line":1191,"column":99}},"501":{"start":{"line":1193,"column":10},"end":{"line":1199,"column":11}},"502":{"start":{"line":1197,"column":16},"end":{"line":1197,"column":36}},"503":{"start":{"line":1198,"column":16},"end":{"line":1198,"column":32}},"504":{"start":{"line":1204,"column":4},"end":{"line":1204,"column":22}},"505":{"start":{"line":1220,"column":2},"end":{"line":1236,"column":4}},"506":{"start":{"line":1222,"column":4},"end":{"line":1222,"column":25}},"507":{"start":{"line":1223,"column":4},"end":{"line":1223,"column":17}},"508":{"start":{"line":1224,"column":4},"end":{"line":1232,"column":5}},"509":{"start":{"line":1225,"column":6},"end":{"line":1225,"column":25}},"510":{"start":{"line":1226,"column":6},"end":{"line":1226,"column":34}},"511":{"start":{"line":1226,"column":28},"end":{"line":1226,"column":34}},"512":{"start":{"line":1228,"column":6},"end":{"line":1228,"column":40}},"513":{"start":{"line":1229,"column":6},"end":{"line":1229,"column":54}},"514":{"start":{"line":1230,"column":6},"end":{"line":1230,"column":18}},"515":{"start":{"line":1231,"column":6},"end":{"line":1231,"column":25}},"516":{"start":{"line":1233,"column":4},"end":{"line":1233,"column":16}},"517":{"start":{"line":1235,"column":4},"end":{"line":1235,"column":15}},"518":{"start":{"line":1238,"column":2},"end":{"line":1386,"column":4}},"519":{"start":{"line":1389,"column":2},"end":{"line":1389,"column":26}},"520":{"start":{"line":1390,"column":2},"end":{"line":1394,"column":3}},"521":{"start":{"line":1391,"column":4},"end":{"line":1393,"column":5}},"522":{"start":{"line":1392,"column":6},"end":{"line":1392,"column":52}},"523":{"start":{"line":1395,"column":2},"end":{"line":1399,"column":3}},"524":{"start":{"line":1396,"column":4},"end":{"line":1398,"column":5}},"525":{"start":{"line":1397,"column":6},"end":{"line":1397,"column":51}},"526":{"start":{"line":1417,"column":2},"end":{"line":1417,"column":138}},"527":{"start":{"line":1419,"column":2},"end":{"line":1498,"column":4}},"528":{"start":{"line":1500,"column":2},"end":{"line":1502,"column":3}},"529":{"start":{"line":1501,"column":4},"end":{"line":1501,"column":30}},"530":{"start":{"line":1504,"column":2},"end":{"line":1504,"column":26}},"531":{"start":{"line":1506,"column":2},"end":{"line":1506,"column":105}},"532":{"start":{"line":1508,"column":2},"end":{"line":2692,"column":4}},"533":{"start":{"line":2695,"column":2},"end":{"line":2789,"column":4}},"534":{"start":{"line":2796,"column":2},"end":{"line":2814,"column":3}},"535":{"start":{"line":2797,"column":4},"end":{"line":2813,"column":5}},"536":{"start":{"line":2798,"column":6},"end":{"line":2798,"column":44}},"537":{"start":{"line":2799,"column":6},"end":{"line":2799,"column":46}},"538":{"start":{"line":2800,"column":6},"end":{"line":2800,"column":36}},"539":{"start":{"line":2801,"column":6},"end":{"line":2801,"column":37}},"540":{"start":{"line":2802,"column":6},"end":{"line":2802,"column":38}},"541":{"start":{"line":2803,"column":6},"end":{"line":2803,"column":42}},"542":{"start":{"line":2804,"column":6},"end":{"line":2804,"column":41}},"543":{"start":{"line":2807,"column":6},"end":{"line":2807,"column":26}},"544":{"start":{"line":2808,"column":6},"end":{"line":2808,"column":38}},"545":{"start":{"line":2809,"column":6},"end":{"line":2809,"column":39}},"546":{"start":{"line":2810,"column":6},"end":{"line":2810,"column":38}},"547":{"start":{"line":2811,"column":6},"end":{"line":2811,"column":44}},"548":{"start":{"line":2812,"column":6},"end":{"line":2812,"column":43}},"549":{"start":{"line":2817,"column":2},"end":{"line":2817,"column":31}},"550":{"start":{"line":2820,"column":2},"end":{"line":2824,"column":5}},"551":{"start":{"line":2821,"column":4},"end":{"line":2823,"column":5}},"552":{"start":{"line":2822,"column":6},"end":{"line":2822,"column":33}},"553":{"start":{"line":2831,"column":2},"end":{"line":2860,"column":4}},"554":{"start":{"line":2863,"column":2},"end":{"line":2863,"column":65}},"555":{"start":{"line":2864,"column":2},"end":{"line":2864,"column":75}},"556":{"start":{"line":2865,"column":2},"end":{"line":2865,"column":74}},"557":{"start":{"line":2866,"column":2},"end":{"line":2866,"column":74}},"558":{"start":{"line":2867,"column":2},"end":{"line":2867,"column":73}},"559":{"start":{"line":2871,"column":2},"end":{"line":2871,"column":64}},"560":{"start":{"line":2872,"column":2},"end":{"line":2872,"column":78}},"561":{"start":{"line":2873,"column":2},"end":{"line":2873,"column":78}},"562":{"start":{"line":2874,"column":2},"end":{"line":2874,"column":78}},"563":{"start":{"line":2875,"column":2},"end":{"line":2875,"column":78}},"564":{"start":{"line":2876,"column":2},"end":{"line":2876,"column":77}},"565":{"start":{"line":2877,"column":2},"end":{"line":2877,"column":78}},"566":{"start":{"line":2878,"column":2},"end":{"line":2878,"column":78}},"567":{"start":{"line":2885,"column":2},"end":{"line":2885,"column":66}},"568":{"start":{"line":2888,"column":2},"end":{"line":2888,"column":44}},"569":{"start":{"line":2894,"column":2},"end":{"line":2901,"column":4}},"570":{"start":{"line":2895,"column":4},"end":{"line":2900,"column":5}},"571":{"start":{"line":2896,"column":6},"end":{"line":2896,"column":45}},"572":{"start":{"line":2899,"column":6},"end":{"line":2899,"column":119}},"573":{"start":{"line":2907,"column":2},"end":{"line":2913,"column":4}},"574":{"start":{"line":2908,"column":4},"end":{"line":2912,"column":5}},"575":{"start":{"line":2909,"column":6},"end":{"line":2911,"column":7}},"576":{"start":{"line":2910,"column":8},"end":{"line":2910,"column":19}},"577":{"start":{"line":2919,"column":2},"end":{"line":2935,"column":4}},"578":{"start":{"line":2921,"column":6},"end":{"line":2921,"column":40}},"579":{"start":{"line":2925,"column":6},"end":{"line":2925,"column":34}},"580":{"start":{"line":2929,"column":6},"end":{"line":2929,"column":15}},"581":{"start":{"line":2933,"column":6},"end":{"line":2933,"column":15}},"582":{"start":{"line":2945,"column":2},"end":{"line":2951,"column":4}},"583":{"start":{"line":2946,"column":4},"end":{"line":2948,"column":5}},"584":{"start":{"line":2947,"column":6},"end":{"line":2947,"column":61}},"585":{"start":{"line":2950,"column":4},"end":{"line":2950,"column":37}},"586":{"start":{"line":2954,"column":2},"end":{"line":2957,"column":3}},"587":{"start":{"line":2955,"column":4},"end":{"line":2955,"column":26}},"588":{"start":{"line":2956,"column":4},"end":{"line":2956,"column":43}},"589":{"start":{"line":2960,"column":2},"end":{"line":2972,"column":3}},"590":{"start":{"line":2961,"column":4},"end":{"line":2971,"column":5}},"591":{"start":{"line":2962,"column":6},"end":{"line":2962,"column":38}},"592":{"start":{"line":2963,"column":6},"end":{"line":2963,"column":21}},"593":{"start":{"line":2964,"column":6},"end":{"line":2968,"column":7}},"594":{"start":{"line":2965,"column":8},"end":{"line":2967,"column":9}},"595":{"start":{"line":2966,"column":10},"end":{"line":2966,"column":33}},"596":{"start":{"line":2969,"column":6},"end":{"line":2969,"column":24}},"597":{"start":{"line":2970,"column":6},"end":{"line":2970,"column":26}},"598":{"start":{"line":2974,"column":2},"end":{"line":2994,"column":3}},"599":{"start":{"line":2975,"column":4},"end":{"line":2993,"column":5}},"600":{"start":{"line":2976,"column":6},"end":{"line":2976,"column":29}},"601":{"start":{"line":2978,"column":6},"end":{"line":2980,"column":8}},"602":{"start":{"line":2979,"column":8},"end":{"line":2979,"column":36}},"603":{"start":{"line":2982,"column":6},"end":{"line":2984,"column":7}},"604":{"start":{"line":2983,"column":8},"end":{"line":2983,"column":38}},"605":{"start":{"line":2986,"column":6},"end":{"line":2987,"column":95}},"606":{"start":{"line":2987,"column":8},"end":{"line":2987,"column":95}},"607":{"start":{"line":2989,"column":6},"end":{"line":2991,"column":104}},"608":{"start":{"line":2991,"column":8},"end":{"line":2991,"column":104}},"609":{"start":{"line":3014,"column":2},"end":{"line":3042,"column":4}},"610":{"start":{"line":3016,"column":4},"end":{"line":3018,"column":5}},"611":{"start":{"line":3017,"column":6},"end":{"line":3017,"column":87}},"612":{"start":{"line":3021,"column":4},"end":{"line":3032,"column":5}},"613":{"start":{"line":3022,"column":6},"end":{"line":3031,"column":7}},"614":{"start":{"line":3023,"column":8},"end":{"line":3025,"column":9}},"615":{"start":{"line":3024,"column":10},"end":{"line":3024,"column":31}},"616":{"start":{"line":3026,"column":8},"end":{"line":3030,"column":9}},"617":{"start":{"line":3027,"column":10},"end":{"line":3029,"column":11}},"618":{"start":{"line":3028,"column":12},"end":{"line":3028,"column":49}},"619":{"start":{"line":3035,"column":4},"end":{"line":3035,"column":17}},"620":{"start":{"line":3036,"column":4},"end":{"line":3040,"column":5}},"621":{"start":{"line":3037,"column":6},"end":{"line":3039,"column":7}},"622":{"start":{"line":3038,"column":8},"end":{"line":3038,"column":56}},"623":{"start":{"line":3041,"column":4},"end":{"line":3041,"column":20}},"624":{"start":{"line":3059,"column":2},"end":{"line":3230,"column":4}},"625":{"start":{"line":3061,"column":4},"end":{"line":3063,"column":5}},"626":{"start":{"line":3062,"column":6},"end":{"line":3062,"column":15}},"627":{"start":{"line":3065,"column":4},"end":{"line":3067,"column":5}},"628":{"start":{"line":3066,"column":6},"end":{"line":3066,"column":93}},"629":{"start":{"line":3070,"column":4},"end":{"line":3072,"column":5}},"630":{"start":{"line":3071,"column":6},"end":{"line":3071,"column":97}},"631":{"start":{"line":3076,"column":4},"end":{"line":3076,"column":32}},"632":{"start":{"line":3078,"column":4},"end":{"line":3078,"column":23}},"633":{"start":{"line":3079,"column":4},"end":{"line":3079,"column":21}},"634":{"start":{"line":3080,"column":4},"end":{"line":3080,"column":19}},"635":{"start":{"line":3081,"column":4},"end":{"line":3081,"column":19}},"636":{"start":{"line":3082,"column":4},"end":{"line":3082,"column":17}},"637":{"start":{"line":3083,"column":4},"end":{"line":3099,"column":5}},"638":{"start":{"line":3084,"column":6},"end":{"line":3084,"column":28}},"639":{"start":{"line":3086,"column":9},"end":{"line":3099,"column":5}},"640":{"start":{"line":3087,"column":6},"end":{"line":3089,"column":7}},"641":{"start":{"line":3088,"column":8},"end":{"line":3088,"column":25}},"642":{"start":{"line":3091,"column":9},"end":{"line":3099,"column":5}},"643":{"start":{"line":3092,"column":6},"end":{"line":3092,"column":34}},"644":{"start":{"line":3093,"column":6},"end":{"line":3093,"column":30}},"645":{"start":{"line":3094,"column":6},"end":{"line":3094,"column":26}},"646":{"start":{"line":3095,"column":6},"end":{"line":3095,"column":28}},"647":{"start":{"line":3098,"column":6},"end":{"line":3098,"column":135}},"648":{"start":{"line":3101,"column":4},"end":{"line":3107,"column":5}},"649":{"start":{"line":3102,"column":6},"end":{"line":3106,"column":7}},"650":{"start":{"line":3103,"column":8},"end":{"line":3105,"column":9}},"651":{"start":{"line":3104,"column":10},"end":{"line":3104,"column":108}},"652":{"start":{"line":3109,"column":4},"end":{"line":3120,"column":5}},"653":{"start":{"line":3110,"column":6},"end":{"line":3116,"column":7}},"654":{"start":{"line":3111,"column":8},"end":{"line":3111,"column":63}},"655":{"start":{"line":3114,"column":8},"end":{"line":3114,"column":101}},"656":{"start":{"line":3115,"column":8},"end":{"line":3115,"column":18}},"657":{"start":{"line":3118,"column":9},"end":{"line":3120,"column":5}},"658":{"start":{"line":3119,"column":6},"end":{"line":3119,"column":35}},"659":{"start":{"line":3122,"column":4},"end":{"line":3122,"column":28}},"660":{"start":{"line":3123,"column":4},"end":{"line":3123,"column":25}},"661":{"start":{"line":3124,"column":4},"end":{"line":3127,"column":31}},"662":{"start":{"line":3125,"column":6},"end":{"line":3125,"column":67}},"663":{"start":{"line":3127,"column":6},"end":{"line":3127,"column":31}},"664":{"start":{"line":3132,"column":4},"end":{"line":3132,"column":21}},"665":{"start":{"line":3133,"column":4},"end":{"line":3213,"column":5}},"666":{"start":{"line":3135,"column":6},"end":{"line":3135,"column":37}},"667":{"start":{"line":3136,"column":6},"end":{"line":3138,"column":7}},"668":{"start":{"line":3137,"column":8},"end":{"line":3137,"column":140}},"669":{"start":{"line":3139,"column":6},"end":{"line":3139,"column":37}},"670":{"start":{"line":3142,"column":6},"end":{"line":3146,"column":7}},"671":{"start":{"line":3143,"column":8},"end":{"line":3145,"column":9}},"672":{"start":{"line":3144,"column":10},"end":{"line":3144,"column":65}},"673":{"start":{"line":3149,"column":6},"end":{"line":3149,"column":43}},"674":{"start":{"line":3150,"column":6},"end":{"line":3152,"column":7}},"675":{"start":{"line":3151,"column":8},"end":{"line":3151,"column":38}},"676":{"start":{"line":3153,"column":6},"end":{"line":3153,"column":59}},"677":{"start":{"line":3154,"column":6},"end":{"line":3154,"column":33}},"678":{"start":{"line":3155,"column":6},"end":{"line":3155,"column":41}},"679":{"start":{"line":3157,"column":6},"end":{"line":3164,"column":8}},"680":{"start":{"line":3166,"column":6},"end":{"line":3169,"column":8}},"681":{"start":{"line":3174,"column":6},"end":{"line":3180,"column":8}},"682":{"start":{"line":3183,"column":6},"end":{"line":3183,"column":27}},"683":{"start":{"line":3184,"column":6},"end":{"line":3198,"column":7}},"684":{"start":{"line":3185,"column":8},"end":{"line":3197,"column":9}},"685":{"start":{"line":3186,"column":10},"end":{"line":3186,"column":27}},"686":{"start":{"line":3187,"column":10},"end":{"line":3192,"column":11}},"687":{"start":{"line":3188,"column":12},"end":{"line":3191,"column":13}},"688":{"start":{"line":3189,"column":14},"end":{"line":3189,"column":28}},"689":{"start":{"line":3190,"column":14},"end":{"line":3190,"column":20}},"690":{"start":{"line":3193,"column":10},"end":{"line":3196,"column":11}},"691":{"start":{"line":3194,"column":12},"end":{"line":3194,"column":28}},"692":{"start":{"line":3195,"column":12},"end":{"line":3195,"column":18}},"693":{"start":{"line":3199,"column":6},"end":{"line":3212,"column":7}},"694":{"start":{"line":3200,"column":8},"end":{"line":3200,"column":39}},"695":{"start":{"line":3202,"column":8},"end":{"line":3202,"column":70}},"696":{"start":{"line":3203,"column":8},"end":{"line":3203,"column":35}},"697":{"start":{"line":3204,"column":8},"end":{"line":3204,"column":43}},"698":{"start":{"line":3206,"column":8},"end":{"line":3209,"column":10}},"699":{"start":{"line":3211,"column":8},"end":{"line":3211,"column":32}},"700":{"start":{"line":3215,"column":4},"end":{"line":3215,"column":31}},"701":{"start":{"line":3217,"column":4},"end":{"line":3227,"column":5}},"702":{"start":{"line":3218,"column":6},"end":{"line":3218,"column":33}},"703":{"start":{"line":3219,"column":6},"end":{"line":3219,"column":21}},"704":{"start":{"line":3220,"column":6},"end":{"line":3224,"column":7}},"705":{"start":{"line":3221,"column":8},"end":{"line":3223,"column":9}},"706":{"start":{"line":3222,"column":10},"end":{"line":3222,"column":36}},"707":{"start":{"line":3225,"column":6},"end":{"line":3225,"column":29}},"708":{"start":{"line":3226,"column":6},"end":{"line":3226,"column":36}},"709":{"start":{"line":3229,"column":4},"end":{"line":3229,"column":32}},"710":{"start":{"line":3232,"column":2},"end":{"line":3234,"column":4}},"711":{"start":{"line":3233,"column":4},"end":{"line":3233,"column":28}},"712":{"start":{"line":3237,"column":2},"end":{"line":3237,"column":27}},"713":{"start":{"line":3238,"column":2},"end":{"line":3238,"column":31}},"714":{"start":{"line":3239,"column":2},"end":{"line":3239,"column":21}},"715":{"start":{"line":3240,"column":2},"end":{"line":3240,"column":35}},"716":{"start":{"line":3242,"column":2},"end":{"line":3242,"column":14}},"717":{"start":{"line":3245,"column":0},"end":{"line":3245,"column":22}},"718":{"start":{"line":3246,"column":0},"end":{"line":3246,"column":22}},"719":{"start":{"line":3247,"column":0},"end":{"line":3247,"column":26}},"720":{"start":{"line":3248,"column":0},"end":{"line":3248,"column":20}}},"branchMap":{"1":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":4},"end":{"line":40,"column":4}},{"start":{"line":40,"column":4},"end":{"line":40,"column":4}}]},"2":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":4},"end":{"line":44,"column":4}},{"start":{"line":44,"column":4},"end":{"line":44,"column":4}}]},"3":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":10},"end":{"line":44,"column":29}},{"start":{"line":44,"column":33},"end":{"line":44,"column":49}},{"start":{"line":44,"column":53},"end":{"line":44,"column":68}}]},"4":{"line":47,"type":"if","locations":[{"start":{"line":47,"column":4},"end":{"line":47,"column":4}},{"start":{"line":47,"column":4},"end":{"line":47,"column":4}}]},"5":{"line":47,"type":"binary-expr","locations":[{"start":{"line":47,"column":8},"end":{"line":47,"column":25}},{"start":{"line":47,"column":30},"end":{"line":47,"column":54}},{"start":{"line":47,"column":58},"end":{"line":47,"column":68}}]},"6":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":4},"end":{"line":51,"column":4}},{"start":{"line":51,"column":4},"end":{"line":51,"column":4}}]},"7":{"line":70,"type":"cond-expr","locations":[{"start":{"line":70,"column":40},"end":{"line":70,"column":62}},{"start":{"line":70,"column":65},"end":{"line":70,"column":69}}]},"8":{"line":92,"type":"binary-expr","locations":[{"start":{"line":92,"column":11},"end":{"line":92,"column":19}},{"start":{"line":92,"column":23},"end":{"line":92,"column":32}}]},"9":{"line":98,"type":"binary-expr","locations":[{"start":{"line":98,"column":13},"end":{"line":98,"column":21}},{"start":{"line":98,"column":25},"end":{"line":98,"column":33}},{"start":{"line":98,"column":38},"end":{"line":98,"column":46}}]},"10":{"line":102,"type":"binary-expr","locations":[{"start":{"line":102,"column":13},"end":{"line":102,"column":21}},{"start":{"line":102,"column":25},"end":{"line":102,"column":33}}]},"11":{"line":120,"type":"if","locations":[{"start":{"line":120,"column":4},"end":{"line":120,"column":4}},{"start":{"line":120,"column":4},"end":{"line":120,"column":4}}]},"12":{"line":123,"type":"if","locations":[{"start":{"line":123,"column":9},"end":{"line":123,"column":9}},{"start":{"line":123,"column":9},"end":{"line":123,"column":9}}]},"13":{"line":128,"type":"if","locations":[{"start":{"line":128,"column":4},"end":{"line":128,"column":4}},{"start":{"line":128,"column":4},"end":{"line":128,"column":4}}]},"14":{"line":135,"type":"if","locations":[{"start":{"line":135,"column":4},"end":{"line":135,"column":4}},{"start":{"line":135,"column":4},"end":{"line":135,"column":4}}]},"15":{"line":138,"type":"if","locations":[{"start":{"line":138,"column":6},"end":{"line":138,"column":6}},{"start":{"line":138,"column":6},"end":{"line":138,"column":6}}]},"16":{"line":149,"type":"if","locations":[{"start":{"line":149,"column":6},"end":{"line":149,"column":6}},{"start":{"line":149,"column":6},"end":{"line":149,"column":6}}]},"17":{"line":160,"type":"if","locations":[{"start":{"line":160,"column":4},"end":{"line":160,"column":4}},{"start":{"line":160,"column":4},"end":{"line":160,"column":4}}]},"18":{"line":160,"type":"binary-expr","locations":[{"start":{"line":160,"column":8},"end":{"line":160,"column":16}},{"start":{"line":160,"column":20},"end":{"line":160,"column":28}}]},"19":{"line":169,"type":"if","locations":[{"start":{"line":169,"column":6},"end":{"line":169,"column":6}},{"start":{"line":169,"column":6},"end":{"line":169,"column":6}}]},"20":{"line":169,"type":"binary-expr","locations":[{"start":{"line":169,"column":10},"end":{"line":169,"column":18}},{"start":{"line":169,"column":22},"end":{"line":169,"column":30}}]},"21":{"line":175,"type":"if","locations":[{"start":{"line":175,"column":6},"end":{"line":175,"column":6}},{"start":{"line":175,"column":6},"end":{"line":175,"column":6}}]},"22":{"line":197,"type":"binary-expr","locations":[{"start":{"line":197,"column":13},"end":{"line":197,"column":23}},{"start":{"line":197,"column":27},"end":{"line":197,"column":37}},{"start":{"line":198,"column":13},"end":{"line":198,"column":23}},{"start":{"line":198,"column":27},"end":{"line":198,"column":37}},{"start":{"line":199,"column":13},"end":{"line":199,"column":23}},{"start":{"line":199,"column":27},"end":{"line":199,"column":38}}]},"23":{"line":207,"type":"if","locations":[{"start":{"line":207,"column":4},"end":{"line":207,"column":4}},{"start":{"line":207,"column":4},"end":{"line":207,"column":4}}]},"24":{"line":207,"type":"binary-expr","locations":[{"start":{"line":207,"column":9},"end":{"line":207,"column":19}},{"start":{"line":207,"column":23},"end":{"line":207,"column":33}},{"start":{"line":208,"column":9},"end":{"line":208,"column":19}},{"start":{"line":208,"column":23},"end":{"line":208,"column":34}}]},"25":{"line":209,"type":"binary-expr","locations":[{"start":{"line":209,"column":15},"end":{"line":209,"column":23}},{"start":{"line":209,"column":27},"end":{"line":209,"column":31}}]},"26":{"line":217,"type":"if","locations":[{"start":{"line":217,"column":4},"end":{"line":217,"column":4}},{"start":{"line":217,"column":4},"end":{"line":217,"column":4}}]},"27":{"line":237,"type":"binary-expr","locations":[{"start":{"line":237,"column":14},"end":{"line":237,"column":21}},{"start":{"line":237,"column":25},"end":{"line":237,"column":27}}]},"28":{"line":242,"type":"if","locations":[{"start":{"line":242,"column":4},"end":{"line":242,"column":4}},{"start":{"line":242,"column":4},"end":{"line":242,"column":4}}]},"29":{"line":267,"type":"if","locations":[{"start":{"line":267,"column":4},"end":{"line":267,"column":4}},{"start":{"line":267,"column":4},"end":{"line":267,"column":4}}]},"30":{"line":268,"type":"if","locations":[{"start":{"line":268,"column":6},"end":{"line":268,"column":6}},{"start":{"line":268,"column":6},"end":{"line":268,"column":6}}]},"31":{"line":271,"type":"if","locations":[{"start":{"line":271,"column":11},"end":{"line":271,"column":11}},{"start":{"line":271,"column":11},"end":{"line":271,"column":11}}]},"32":{"line":304,"type":"if","locations":[{"start":{"line":304,"column":6},"end":{"line":304,"column":6}},{"start":{"line":304,"column":6},"end":{"line":304,"column":6}}]},"33":{"line":307,"type":"if","locations":[{"start":{"line":307,"column":8},"end":{"line":307,"column":8}},{"start":{"line":307,"column":8},"end":{"line":307,"column":8}}]},"34":{"line":318,"type":"if","locations":[{"start":{"line":318,"column":6},"end":{"line":318,"column":6}},{"start":{"line":318,"column":6},"end":{"line":318,"column":6}}]},"35":{"line":326,"type":"if","locations":[{"start":{"line":326,"column":6},"end":{"line":326,"column":6}},{"start":{"line":326,"column":6},"end":{"line":326,"column":6}}]},"36":{"line":329,"type":"if","locations":[{"start":{"line":329,"column":8},"end":{"line":329,"column":8}},{"start":{"line":329,"column":8},"end":{"line":329,"column":8}}]},"37":{"line":343,"type":"binary-expr","locations":[{"start":{"line":343,"column":31},"end":{"line":343,"column":53}},{"start":{"line":343,"column":57},"end":{"line":343,"column":58}}]},"38":{"line":350,"type":"if","locations":[{"start":{"line":350,"column":8},"end":{"line":350,"column":8}},{"start":{"line":350,"column":8},"end":{"line":350,"column":8}}]},"39":{"line":362,"type":"if","locations":[{"start":{"line":362,"column":6},"end":{"line":362,"column":6}},{"start":{"line":362,"column":6},"end":{"line":362,"column":6}}]},"40":{"line":367,"type":"if","locations":[{"start":{"line":367,"column":11},"end":{"line":367,"column":11}},{"start":{"line":367,"column":11},"end":{"line":367,"column":11}}]},"41":{"line":378,"type":"if","locations":[{"start":{"line":378,"column":6},"end":{"line":378,"column":6}},{"start":{"line":378,"column":6},"end":{"line":378,"column":6}}]},"42":{"line":389,"type":"if","locations":[{"start":{"line":389,"column":4},"end":{"line":389,"column":4}},{"start":{"line":389,"column":4},"end":{"line":389,"column":4}}]},"43":{"line":394,"type":"if","locations":[{"start":{"line":394,"column":4},"end":{"line":394,"column":4}},{"start":{"line":394,"column":4},"end":{"line":394,"column":4}}]},"44":{"line":399,"type":"if","locations":[{"start":{"line":399,"column":4},"end":{"line":399,"column":4}},{"start":{"line":399,"column":4},"end":{"line":399,"column":4}}]},"45":{"line":404,"type":"if","locations":[{"start":{"line":404,"column":4},"end":{"line":404,"column":4}},{"start":{"line":404,"column":4},"end":{"line":404,"column":4}}]},"46":{"line":404,"type":"binary-expr","locations":[{"start":{"line":404,"column":7},"end":{"line":404,"column":29}},{"start":{"line":404,"column":33},"end":{"line":404,"column":54}}]},"47":{"line":408,"type":"cond-expr","locations":[{"start":{"line":408,"column":40},"end":{"line":408,"column":62}},{"start":{"line":408,"column":65},"end":{"line":408,"column":69}}]},"48":{"line":429,"type":"if","locations":[{"start":{"line":429,"column":8},"end":{"line":429,"column":8}},{"start":{"line":429,"column":8},"end":{"line":429,"column":8}}]},"49":{"line":444,"type":"if","locations":[{"start":{"line":444,"column":4},"end":{"line":444,"column":4}},{"start":{"line":444,"column":4},"end":{"line":444,"column":4}}]},"50":{"line":447,"type":"binary-expr","locations":[{"start":{"line":447,"column":11},"end":{"line":447,"column":32}},{"start":{"line":447,"column":36},"end":{"line":447,"column":79}}]},"51":{"line":461,"type":"if","locations":[{"start":{"line":461,"column":4},"end":{"line":461,"column":4}},{"start":{"line":461,"column":4},"end":{"line":461,"column":4}}]},"52":{"line":461,"type":"binary-expr","locations":[{"start":{"line":461,"column":8},"end":{"line":461,"column":21}},{"start":{"line":461,"column":25},"end":{"line":461,"column":48}}]},"53":{"line":464,"type":"if","locations":[{"start":{"line":464,"column":9},"end":{"line":464,"column":9}},{"start":{"line":464,"column":9},"end":{"line":464,"column":9}}]},"54":{"line":503,"type":"if","locations":[{"start":{"line":503,"column":4},"end":{"line":503,"column":4}},{"start":{"line":503,"column":4},"end":{"line":503,"column":4}}]},"55":{"line":503,"type":"binary-expr","locations":[{"start":{"line":503,"column":8},"end":{"line":503,"column":21}},{"start":{"line":503,"column":25},"end":{"line":503,"column":48}}]},"56":{"line":506,"type":"if","locations":[{"start":{"line":506,"column":9},"end":{"line":506,"column":9}},{"start":{"line":506,"column":9},"end":{"line":506,"column":9}}]},"57":{"line":530,"type":"if","locations":[{"start":{"line":530,"column":6},"end":{"line":530,"column":6}},{"start":{"line":530,"column":6},"end":{"line":530,"column":6}}]},"58":{"line":550,"type":"if","locations":[{"start":{"line":550,"column":4},"end":{"line":550,"column":4}},{"start":{"line":550,"column":4},"end":{"line":550,"column":4}}]},"59":{"line":560,"type":"if","locations":[{"start":{"line":560,"column":6},"end":{"line":560,"column":6}},{"start":{"line":560,"column":6},"end":{"line":560,"column":6}}]},"60":{"line":561,"type":"if","locations":[{"start":{"line":561,"column":8},"end":{"line":561,"column":8}},{"start":{"line":561,"column":8},"end":{"line":561,"column":8}}]},"61":{"line":566,"type":"if","locations":[{"start":{"line":566,"column":10},"end":{"line":566,"column":10}},{"start":{"line":566,"column":10},"end":{"line":566,"column":10}}]},"62":{"line":600,"type":"if","locations":[{"start":{"line":600,"column":4},"end":{"line":600,"column":4}},{"start":{"line":600,"column":4},"end":{"line":600,"column":4}}]},"63":{"line":604,"type":"if","locations":[{"start":{"line":604,"column":4},"end":{"line":604,"column":4}},{"start":{"line":604,"column":4},"end":{"line":604,"column":4}}]},"64":{"line":610,"type":"if","locations":[{"start":{"line":610,"column":6},"end":{"line":610,"column":6}},{"start":{"line":610,"column":6},"end":{"line":610,"column":6}}]},"65":{"line":610,"type":"binary-expr","locations":[{"start":{"line":610,"column":20},"end":{"line":610,"column":38}},{"start":{"line":610,"column":42},"end":{"line":610,"column":43}}]},"66":{"line":610,"type":"binary-expr","locations":[{"start":{"line":610,"column":48},"end":{"line":610,"column":66}},{"start":{"line":610,"column":70},"end":{"line":610,"column":71}}]},"67":{"line":628,"type":"if","locations":[{"start":{"line":628,"column":6},"end":{"line":628,"column":6}},{"start":{"line":628,"column":6},"end":{"line":628,"column":6}}]},"68":{"line":628,"type":"binary-expr","locations":[{"start":{"line":628,"column":20},"end":{"line":628,"column":38}},{"start":{"line":628,"column":42},"end":{"line":628,"column":43}}]},"69":{"line":628,"type":"binary-expr","locations":[{"start":{"line":628,"column":48},"end":{"line":628,"column":67}},{"start":{"line":628,"column":71},"end":{"line":628,"column":72}}]},"70":{"line":642,"type":"binary-expr","locations":[{"start":{"line":642,"column":12},"end":{"line":642,"column":33}},{"start":{"line":642,"column":37},"end":{"line":642,"column":67}}]},"71":{"line":656,"type":"binary-expr","locations":[{"start":{"line":656,"column":27},"end":{"line":656,"column":45}},{"start":{"line":656,"column":49},"end":{"line":656,"column":50}}]},"72":{"line":656,"type":"binary-expr","locations":[{"start":{"line":656,"column":55},"end":{"line":656,"column":74}},{"start":{"line":656,"column":78},"end":{"line":656,"column":79}}]},"73":{"line":670,"type":"if","locations":[{"start":{"line":670,"column":4},"end":{"line":670,"column":4}},{"start":{"line":670,"column":4},"end":{"line":670,"column":4}}]},"74":{"line":670,"type":"binary-expr","locations":[{"start":{"line":670,"column":7},"end":{"line":670,"column":25}},{"start":{"line":670,"column":29},"end":{"line":670,"column":48}}]},"75":{"line":671,"type":"cond-expr","locations":[{"start":{"line":671,"column":41},"end":{"line":671,"column":59}},{"start":{"line":671,"column":62},"end":{"line":671,"column":72}}]},"76":{"line":672,"type":"cond-expr","locations":[{"start":{"line":672,"column":43},"end":{"line":672,"column":62}},{"start":{"line":672,"column":65},"end":{"line":672,"column":76}}]},"77":{"line":696,"type":"binary-expr","locations":[{"start":{"line":696,"column":27},"end":{"line":696,"column":45}},{"start":{"line":696,"column":49},"end":{"line":696,"column":50}}]},"78":{"line":696,"type":"binary-expr","locations":[{"start":{"line":696,"column":55},"end":{"line":696,"column":74}},{"start":{"line":696,"column":78},"end":{"line":696,"column":79}}]},"79":{"line":711,"type":"if","locations":[{"start":{"line":711,"column":4},"end":{"line":711,"column":4}},{"start":{"line":711,"column":4},"end":{"line":711,"column":4}}]},"80":{"line":711,"type":"binary-expr","locations":[{"start":{"line":711,"column":8},"end":{"line":711,"column":26}},{"start":{"line":711,"column":30},"end":{"line":711,"column":49}}]},"81":{"line":712,"type":"cond-expr","locations":[{"start":{"line":712,"column":41},"end":{"line":712,"column":59}},{"start":{"line":712,"column":62},"end":{"line":712,"column":72}}]},"82":{"line":713,"type":"cond-expr","locations":[{"start":{"line":713,"column":43},"end":{"line":713,"column":62}},{"start":{"line":713,"column":65},"end":{"line":713,"column":76}}]},"83":{"line":737,"type":"binary-expr","locations":[{"start":{"line":737,"column":27},"end":{"line":737,"column":45}},{"start":{"line":737,"column":49},"end":{"line":737,"column":50}}]},"84":{"line":745,"type":"if","locations":[{"start":{"line":745,"column":4},"end":{"line":745,"column":4}},{"start":{"line":745,"column":4},"end":{"line":745,"column":4}}]},"85":{"line":770,"type":"if","locations":[{"start":{"line":770,"column":4},"end":{"line":770,"column":4}},{"start":{"line":770,"column":4},"end":{"line":770,"column":4}}]},"86":{"line":770,"type":"binary-expr","locations":[{"start":{"line":770,"column":7},"end":{"line":770,"column":38}},{"start":{"line":770,"column":42},"end":{"line":770,"column":61}},{"start":{"line":770,"column":65},"end":{"line":770,"column":84}}]},"87":{"line":792,"type":"if","locations":[{"start":{"line":792,"column":6},"end":{"line":792,"column":6}},{"start":{"line":792,"column":6},"end":{"line":792,"column":6}}]},"88":{"line":792,"type":"binary-expr","locations":[{"start":{"line":792,"column":9},"end":{"line":792,"column":40}},{"start":{"line":792,"column":44},"end":{"line":792,"column":76}}]},"89":{"line":808,"type":"cond-expr","locations":[{"start":{"line":808,"column":37},"end":{"line":808,"column":55}},{"start":{"line":808,"column":58},"end":{"line":808,"column":68}}]},"90":{"line":809,"type":"if","locations":[{"start":{"line":809,"column":4},"end":{"line":809,"column":4}},{"start":{"line":809,"column":4},"end":{"line":809,"column":4}}]},"91":{"line":812,"type":"if","locations":[{"start":{"line":812,"column":6},"end":{"line":812,"column":6}},{"start":{"line":812,"column":6},"end":{"line":812,"column":6}}]},"92":{"line":815,"type":"if","locations":[{"start":{"line":815,"column":6},"end":{"line":815,"column":6}},{"start":{"line":815,"column":6},"end":{"line":815,"column":6}}]},"93":{"line":824,"type":"if","locations":[{"start":{"line":824,"column":9},"end":{"line":824,"column":9}},{"start":{"line":824,"column":9},"end":{"line":824,"column":9}}]},"94":{"line":824,"type":"binary-expr","locations":[{"start":{"line":824,"column":13},"end":{"line":824,"column":26}},{"start":{"line":824,"column":30},"end":{"line":824,"column":50}}]},"95":{"line":825,"type":"if","locations":[{"start":{"line":825,"column":6},"end":{"line":825,"column":6}},{"start":{"line":825,"column":6},"end":{"line":825,"column":6}}]},"96":{"line":828,"type":"if","locations":[{"start":{"line":828,"column":6},"end":{"line":828,"column":6}},{"start":{"line":828,"column":6},"end":{"line":828,"column":6}}]},"97":{"line":861,"type":"if","locations":[{"start":{"line":861,"column":4},"end":{"line":861,"column":4}},{"start":{"line":861,"column":4},"end":{"line":861,"column":4}}]},"98":{"line":866,"type":"if","locations":[{"start":{"line":866,"column":4},"end":{"line":866,"column":4}},{"start":{"line":866,"column":4},"end":{"line":866,"column":4}}]},"99":{"line":907,"type":"binary-expr","locations":[{"start":{"line":907,"column":21},"end":{"line":907,"column":35}},{"start":{"line":907,"column":39},"end":{"line":907,"column":44}}]},"100":{"line":924,"type":"if","locations":[{"start":{"line":924,"column":4},"end":{"line":924,"column":4}},{"start":{"line":924,"column":4},"end":{"line":924,"column":4}}]},"101":{"line":924,"type":"binary-expr","locations":[{"start":{"line":924,"column":8},"end":{"line":924,"column":33}},{"start":{"line":924,"column":37},"end":{"line":924,"column":55}}]},"102":{"line":933,"type":"if","locations":[{"start":{"line":933,"column":6},"end":{"line":933,"column":6}},{"start":{"line":933,"column":6},"end":{"line":933,"column":6}}]},"103":{"line":939,"type":"if","locations":[{"start":{"line":939,"column":4},"end":{"line":939,"column":4}},{"start":{"line":939,"column":4},"end":{"line":939,"column":4}}]},"104":{"line":945,"type":"if","locations":[{"start":{"line":945,"column":6},"end":{"line":945,"column":6}},{"start":{"line":945,"column":6},"end":{"line":945,"column":6}}]},"105":{"line":947,"type":"if","locations":[{"start":{"line":947,"column":8},"end":{"line":947,"column":8}},{"start":{"line":947,"column":8},"end":{"line":947,"column":8}}]},"106":{"line":953,"type":"if","locations":[{"start":{"line":953,"column":6},"end":{"line":953,"column":6}},{"start":{"line":953,"column":6},"end":{"line":953,"column":6}}]},"107":{"line":967,"type":"if","locations":[{"start":{"line":967,"column":10},"end":{"line":967,"column":10}},{"start":{"line":967,"column":10},"end":{"line":967,"column":10}}]},"108":{"line":967,"type":"binary-expr","locations":[{"start":{"line":967,"column":22},"end":{"line":967,"column":40}},{"start":{"line":967,"column":44},"end":{"line":967,"column":45}}]},"109":{"line":968,"type":"if","locations":[{"start":{"line":968,"column":12},"end":{"line":968,"column":12}},{"start":{"line":968,"column":12},"end":{"line":968,"column":12}}]},"110":{"line":972,"type":"binary-expr","locations":[{"start":{"line":972,"column":23},"end":{"line":972,"column":41}},{"start":{"line":972,"column":45},"end":{"line":972,"column":46}}]},"111":{"line":982,"type":"if","locations":[{"start":{"line":982,"column":8},"end":{"line":982,"column":8}},{"start":{"line":982,"column":8},"end":{"line":982,"column":8}}]},"112":{"line":982,"type":"binary-expr","locations":[{"start":{"line":982,"column":11},"end":{"line":982,"column":54}},{"start":{"line":982,"column":58},"end":{"line":982,"column":73}}]},"113":{"line":1004,"type":"if","locations":[{"start":{"line":1004,"column":6},"end":{"line":1004,"column":6}},{"start":{"line":1004,"column":6},"end":{"line":1004,"column":6}}]},"114":{"line":1004,"type":"binary-expr","locations":[{"start":{"line":1004,"column":18},"end":{"line":1004,"column":35}},{"start":{"line":1004,"column":39},"end":{"line":1004,"column":40}}]},"115":{"line":1005,"type":"if","locations":[{"start":{"line":1005,"column":8},"end":{"line":1005,"column":8}},{"start":{"line":1005,"column":8},"end":{"line":1005,"column":8}}]},"116":{"line":1009,"type":"binary-expr","locations":[{"start":{"line":1009,"column":19},"end":{"line":1009,"column":36}},{"start":{"line":1009,"column":40},"end":{"line":1009,"column":41}}]},"117":{"line":1042,"type":"if","locations":[{"start":{"line":1042,"column":6},"end":{"line":1042,"column":6}},{"start":{"line":1042,"column":6},"end":{"line":1042,"column":6}}]},"118":{"line":1045,"type":"if","locations":[{"start":{"line":1045,"column":8},"end":{"line":1045,"column":8}},{"start":{"line":1045,"column":8},"end":{"line":1045,"column":8}}]},"119":{"line":1049,"type":"if","locations":[{"start":{"line":1049,"column":11},"end":{"line":1049,"column":11}},{"start":{"line":1049,"column":11},"end":{"line":1049,"column":11}}]},"120":{"line":1054,"type":"if","locations":[{"start":{"line":1054,"column":4},"end":{"line":1054,"column":4}},{"start":{"line":1054,"column":4},"end":{"line":1054,"column":4}}]},"121":{"line":1056,"type":"if","locations":[{"start":{"line":1056,"column":8},"end":{"line":1056,"column":8}},{"start":{"line":1056,"column":8},"end":{"line":1056,"column":8}}]},"122":{"line":1057,"type":"if","locations":[{"start":{"line":1057,"column":10},"end":{"line":1057,"column":10}},{"start":{"line":1057,"column":10},"end":{"line":1057,"column":10}}]},"123":{"line":1059,"type":"if","locations":[{"start":{"line":1059,"column":12},"end":{"line":1059,"column":12}},{"start":{"line":1059,"column":12},"end":{"line":1059,"column":12}}]},"124":{"line":1075,"type":"if","locations":[{"start":{"line":1075,"column":4},"end":{"line":1075,"column":4}},{"start":{"line":1075,"column":4},"end":{"line":1075,"column":4}}]},"125":{"line":1075,"type":"binary-expr","locations":[{"start":{"line":1075,"column":7},"end":{"line":1075,"column":15}},{"start":{"line":1075,"column":19},"end":{"line":1075,"column":27}}]},"126":{"line":1078,"type":"if","locations":[{"start":{"line":1078,"column":4},"end":{"line":1078,"column":4}},{"start":{"line":1078,"column":4},"end":{"line":1078,"column":4}}]},"127":{"line":1078,"type":"binary-expr","locations":[{"start":{"line":1078,"column":7},"end":{"line":1078,"column":15}},{"start":{"line":1078,"column":19},"end":{"line":1078,"column":27}}]},"128":{"line":1083,"type":"if","locations":[{"start":{"line":1083,"column":4},"end":{"line":1083,"column":4}},{"start":{"line":1083,"column":4},"end":{"line":1083,"column":4}}]},"129":{"line":1083,"type":"binary-expr","locations":[{"start":{"line":1083,"column":7},"end":{"line":1083,"column":15}},{"start":{"line":1083,"column":19},"end":{"line":1083,"column":27}}]},"130":{"line":1108,"type":"if","locations":[{"start":{"line":1108,"column":4},"end":{"line":1108,"column":4}},{"start":{"line":1108,"column":4},"end":{"line":1108,"column":4}}]},"131":{"line":1108,"type":"binary-expr","locations":[{"start":{"line":1108,"column":7},"end":{"line":1108,"column":41}},{"start":{"line":1108,"column":45},"end":{"line":1108,"column":64}},{"start":{"line":1108,"column":68},"end":{"line":1108,"column":88}}]},"132":{"line":1115,"type":"if","locations":[{"start":{"line":1115,"column":6},"end":{"line":1115,"column":6}},{"start":{"line":1115,"column":6},"end":{"line":1115,"column":6}}]},"133":{"line":1116,"type":"if","locations":[{"start":{"line":1116,"column":8},"end":{"line":1116,"column":8}},{"start":{"line":1116,"column":8},"end":{"line":1116,"column":8}}]},"134":{"line":1116,"type":"binary-expr","locations":[{"start":{"line":1116,"column":11},"end":{"line":1116,"column":43}},{"start":{"line":1116,"column":47},"end":{"line":1116,"column":58}}]},"135":{"line":1119,"type":"if","locations":[{"start":{"line":1119,"column":13},"end":{"line":1119,"column":13}},{"start":{"line":1119,"column":13},"end":{"line":1119,"column":13}}]},"136":{"line":1119,"type":"binary-expr","locations":[{"start":{"line":1119,"column":16},"end":{"line":1119,"column":49}},{"start":{"line":1119,"column":53},"end":{"line":1119,"column":65}}]},"137":{"line":1128,"type":"if","locations":[{"start":{"line":1128,"column":4},"end":{"line":1128,"column":4}},{"start":{"line":1128,"column":4},"end":{"line":1128,"column":4}}]},"138":{"line":1128,"type":"binary-expr","locations":[{"start":{"line":1128,"column":8},"end":{"line":1128,"column":31}},{"start":{"line":1128,"column":35},"end":{"line":1128,"column":50}}]},"139":{"line":1131,"type":"if","locations":[{"start":{"line":1131,"column":6},"end":{"line":1131,"column":6}},{"start":{"line":1131,"column":6},"end":{"line":1131,"column":6}}]},"140":{"line":1139,"type":"cond-expr","locations":[{"start":{"line":1139,"column":38},"end":{"line":1139,"column":66}},{"start":{"line":1139,"column":69},"end":{"line":1139,"column":71}}]},"141":{"line":1139,"type":"binary-expr","locations":[{"start":{"line":1139,"column":52},"end":{"line":1139,"column":59}},{"start":{"line":1139,"column":63},"end":{"line":1139,"column":65}}]},"142":{"line":1141,"type":"if","locations":[{"start":{"line":1141,"column":4},"end":{"line":1141,"column":4}},{"start":{"line":1141,"column":4},"end":{"line":1141,"column":4}}]},"143":{"line":1141,"type":"binary-expr","locations":[{"start":{"line":1141,"column":7},"end":{"line":1141,"column":17}},{"start":{"line":1141,"column":21},"end":{"line":1141,"column":41}}]},"144":{"line":1144,"type":"if","locations":[{"start":{"line":1144,"column":4},"end":{"line":1144,"column":4}},{"start":{"line":1144,"column":4},"end":{"line":1144,"column":4}}]},"145":{"line":1144,"type":"binary-expr","locations":[{"start":{"line":1144,"column":7},"end":{"line":1144,"column":25}},{"start":{"line":1144,"column":29},"end":{"line":1144,"column":43}}]},"146":{"line":1159,"type":"if","locations":[{"start":{"line":1159,"column":4},"end":{"line":1159,"column":4}},{"start":{"line":1159,"column":4},"end":{"line":1159,"column":4}}]},"147":{"line":1162,"type":"if","locations":[{"start":{"line":1162,"column":4},"end":{"line":1162,"column":4}},{"start":{"line":1162,"column":4},"end":{"line":1162,"column":4}}]},"148":{"line":1177,"type":"if","locations":[{"start":{"line":1177,"column":4},"end":{"line":1177,"column":4}},{"start":{"line":1177,"column":4},"end":{"line":1177,"column":4}}]},"149":{"line":1182,"type":"if","locations":[{"start":{"line":1182,"column":4},"end":{"line":1182,"column":4}},{"start":{"line":1182,"column":4},"end":{"line":1182,"column":4}}]},"150":{"line":1182,"type":"binary-expr","locations":[{"start":{"line":1182,"column":7},"end":{"line":1182,"column":27}},{"start":{"line":1182,"column":31},"end":{"line":1182,"column":50}}]},"151":{"line":1186,"type":"if","locations":[{"start":{"line":1186,"column":6},"end":{"line":1186,"column":6}},{"start":{"line":1186,"column":6},"end":{"line":1186,"column":6}}]},"152":{"line":1188,"type":"if","locations":[{"start":{"line":1188,"column":8},"end":{"line":1188,"column":8}},{"start":{"line":1188,"column":8},"end":{"line":1188,"column":8}}]},"153":{"line":1193,"type":"if","locations":[{"start":{"line":1193,"column":10},"end":{"line":1193,"column":10}},{"start":{"line":1193,"column":10},"end":{"line":1193,"column":10}}]},"154":{"line":1193,"type":"binary-expr","locations":[{"start":{"line":1193,"column":14},"end":{"line":1193,"column":29}},{"start":{"line":1194,"column":18},"end":{"line":1194,"column":35}},{"start":{"line":1194,"column":39},"end":{"line":1194,"column":82}}]},"155":{"line":1226,"type":"if","locations":[{"start":{"line":1226,"column":6},"end":{"line":1226,"column":6}},{"start":{"line":1226,"column":6},"end":{"line":1226,"column":6}}]},"156":{"line":1391,"type":"if","locations":[{"start":{"line":1391,"column":4},"end":{"line":1391,"column":4}},{"start":{"line":1391,"column":4},"end":{"line":1391,"column":4}}]},"157":{"line":1396,"type":"if","locations":[{"start":{"line":1396,"column":4},"end":{"line":1396,"column":4}},{"start":{"line":1396,"column":4},"end":{"line":1396,"column":4}}]},"158":{"line":2797,"type":"if","locations":[{"start":{"line":2797,"column":4},"end":{"line":2797,"column":4}},{"start":{"line":2797,"column":4},"end":{"line":2797,"column":4}}]},"159":{"line":2821,"type":"if","locations":[{"start":{"line":2821,"column":4},"end":{"line":2821,"column":4}},{"start":{"line":2821,"column":4},"end":{"line":2821,"column":4}}]},"160":{"line":2895,"type":"if","locations":[{"start":{"line":2895,"column":4},"end":{"line":2895,"column":4}},{"start":{"line":2895,"column":4},"end":{"line":2895,"column":4}}]},"161":{"line":2909,"type":"if","locations":[{"start":{"line":2909,"column":6},"end":{"line":2909,"column":6}},{"start":{"line":2909,"column":6},"end":{"line":2909,"column":6}}]},"162":{"line":2946,"type":"if","locations":[{"start":{"line":2946,"column":4},"end":{"line":2946,"column":4}},{"start":{"line":2946,"column":4},"end":{"line":2946,"column":4}}]},"163":{"line":2961,"type":"if","locations":[{"start":{"line":2961,"column":4},"end":{"line":2961,"column":4}},{"start":{"line":2961,"column":4},"end":{"line":2961,"column":4}}]},"164":{"line":2965,"type":"if","locations":[{"start":{"line":2965,"column":8},"end":{"line":2965,"column":8}},{"start":{"line":2965,"column":8},"end":{"line":2965,"column":8}}]},"165":{"line":2983,"type":"binary-expr","locations":[{"start":{"line":2983,"column":16},"end":{"line":2983,"column":24}},{"start":{"line":2983,"column":28},"end":{"line":2983,"column":36}}]},"166":{"line":2986,"type":"if","locations":[{"start":{"line":2986,"column":6},"end":{"line":2986,"column":6}},{"start":{"line":2986,"column":6},"end":{"line":2986,"column":6}}]},"167":{"line":2986,"type":"binary-expr","locations":[{"start":{"line":2986,"column":9},"end":{"line":2986,"column":16}},{"start":{"line":2986,"column":20},"end":{"line":2986,"column":36}}]},"168":{"line":2989,"type":"if","locations":[{"start":{"line":2989,"column":6},"end":{"line":2989,"column":6}},{"start":{"line":2989,"column":6},"end":{"line":2989,"column":6}}]},"169":{"line":2989,"type":"binary-expr","locations":[{"start":{"line":2989,"column":9},"end":{"line":2989,"column":14}},{"start":{"line":2989,"column":18},"end":{"line":2990,"column":32}}]},"170":{"line":2989,"type":"binary-expr","locations":[{"start":{"line":2989,"column":21},"end":{"line":2989,"column":36}},{"start":{"line":2990,"column":21},"end":{"line":2990,"column":31}}]},"171":{"line":3016,"type":"if","locations":[{"start":{"line":3016,"column":4},"end":{"line":3016,"column":4}},{"start":{"line":3016,"column":4},"end":{"line":3016,"column":4}}]},"172":{"line":3021,"type":"if","locations":[{"start":{"line":3021,"column":4},"end":{"line":3021,"column":4}},{"start":{"line":3021,"column":4},"end":{"line":3021,"column":4}}]},"173":{"line":3021,"type":"binary-expr","locations":[{"start":{"line":3021,"column":7},"end":{"line":3021,"column":14}},{"start":{"line":3021,"column":18},"end":{"line":3021,"column":34}}]},"174":{"line":3023,"type":"if","locations":[{"start":{"line":3023,"column":8},"end":{"line":3023,"column":8}},{"start":{"line":3023,"column":8},"end":{"line":3023,"column":8}}]},"175":{"line":3026,"type":"if","locations":[{"start":{"line":3026,"column":8},"end":{"line":3026,"column":8}},{"start":{"line":3026,"column":8},"end":{"line":3026,"column":8}}]},"176":{"line":3037,"type":"if","locations":[{"start":{"line":3037,"column":6},"end":{"line":3037,"column":6}},{"start":{"line":3037,"column":6},"end":{"line":3037,"column":6}}]},"177":{"line":3061,"type":"if","locations":[{"start":{"line":3061,"column":4},"end":{"line":3061,"column":4}},{"start":{"line":3061,"column":4},"end":{"line":3061,"column":4}}]},"178":{"line":3061,"type":"binary-expr","locations":[{"start":{"line":3061,"column":7},"end":{"line":3061,"column":34}},{"start":{"line":3061,"column":38},"end":{"line":3061,"column":50}}]},"179":{"line":3065,"type":"if","locations":[{"start":{"line":3065,"column":4},"end":{"line":3065,"column":4}},{"start":{"line":3065,"column":4},"end":{"line":3065,"column":4}}]},"180":{"line":3070,"type":"if","locations":[{"start":{"line":3070,"column":4},"end":{"line":3070,"column":4}},{"start":{"line":3070,"column":4},"end":{"line":3070,"column":4}}]},"181":{"line":3083,"type":"if","locations":[{"start":{"line":3083,"column":4},"end":{"line":3083,"column":4}},{"start":{"line":3083,"column":4},"end":{"line":3083,"column":4}}]},"182":{"line":3083,"type":"binary-expr","locations":[{"start":{"line":3083,"column":7},"end":{"line":3083,"column":10}},{"start":{"line":3083,"column":14},"end":{"line":3083,"column":33}}]},"183":{"line":3086,"type":"if","locations":[{"start":{"line":3086,"column":9},"end":{"line":3086,"column":9}},{"start":{"line":3086,"column":9},"end":{"line":3086,"column":9}}]},"184":{"line":3087,"type":"if","locations":[{"start":{"line":3087,"column":6},"end":{"line":3087,"column":6}},{"start":{"line":3087,"column":6},"end":{"line":3087,"column":6}}]},"185":{"line":3091,"type":"if","locations":[{"start":{"line":3091,"column":9},"end":{"line":3091,"column":9}},{"start":{"line":3091,"column":9},"end":{"line":3091,"column":9}}]},"186":{"line":3101,"type":"if","locations":[{"start":{"line":3101,"column":4},"end":{"line":3101,"column":4}},{"start":{"line":3101,"column":4},"end":{"line":3101,"column":4}}]},"187":{"line":3103,"type":"if","locations":[{"start":{"line":3103,"column":8},"end":{"line":3103,"column":8}},{"start":{"line":3103,"column":8},"end":{"line":3103,"column":8}}]},"188":{"line":3109,"type":"if","locations":[{"start":{"line":3109,"column":4},"end":{"line":3109,"column":4}},{"start":{"line":3109,"column":4},"end":{"line":3109,"column":4}}]},"189":{"line":3109,"type":"binary-expr","locations":[{"start":{"line":3109,"column":7},"end":{"line":3109,"column":17}},{"start":{"line":3109,"column":21},"end":{"line":3109,"column":52}},{"start":{"line":3109,"column":56},"end":{"line":3109,"column":64}}]},"190":{"line":3118,"type":"if","locations":[{"start":{"line":3118,"column":9},"end":{"line":3118,"column":9}},{"start":{"line":3118,"column":9},"end":{"line":3118,"column":9}}]},"191":{"line":3118,"type":"binary-expr","locations":[{"start":{"line":3118,"column":12},"end":{"line":3118,"column":22}},{"start":{"line":3118,"column":26},"end":{"line":3118,"column":52}}]},"192":{"line":3122,"type":"binary-expr","locations":[{"start":{"line":3122,"column":14},"end":{"line":3122,"column":21}},{"start":{"line":3122,"column":25},"end":{"line":3122,"column":27}}]},"193":{"line":3123,"type":"binary-expr","locations":[{"start":{"line":3123,"column":13},"end":{"line":3123,"column":19}},{"start":{"line":3123,"column":23},"end":{"line":3123,"column":24}}]},"194":{"line":3124,"type":"if","locations":[{"start":{"line":3124,"column":4},"end":{"line":3124,"column":4}},{"start":{"line":3124,"column":4},"end":{"line":3124,"column":4}}]},"195":{"line":3124,"type":"binary-expr","locations":[{"start":{"line":3124,"column":7},"end":{"line":3124,"column":15}},{"start":{"line":3124,"column":19},"end":{"line":3124,"column":39}}]},"196":{"line":3125,"type":"binary-expr","locations":[{"start":{"line":3125,"column":17},"end":{"line":3125,"column":49}},{"start":{"line":3125,"column":53},"end":{"line":3125,"column":66}}]},"197":{"line":3133,"type":"if","locations":[{"start":{"line":3133,"column":4},"end":{"line":3133,"column":4}},{"start":{"line":3133,"column":4},"end":{"line":3133,"column":4}}]},"198":{"line":3136,"type":"if","locations":[{"start":{"line":3136,"column":6},"end":{"line":3136,"column":6}},{"start":{"line":3136,"column":6},"end":{"line":3136,"column":6}}]},"199":{"line":3143,"type":"if","locations":[{"start":{"line":3143,"column":8},"end":{"line":3143,"column":8}},{"start":{"line":3143,"column":8},"end":{"line":3143,"column":8}}]},"200":{"line":3185,"type":"if","locations":[{"start":{"line":3185,"column":8},"end":{"line":3185,"column":8}},{"start":{"line":3185,"column":8},"end":{"line":3185,"column":8}}]},"201":{"line":3188,"type":"if","locations":[{"start":{"line":3188,"column":12},"end":{"line":3188,"column":12}},{"start":{"line":3188,"column":12},"end":{"line":3188,"column":12}}]},"202":{"line":3188,"type":"binary-expr","locations":[{"start":{"line":3188,"column":26},"end":{"line":3188,"column":47}},{"start":{"line":3188,"column":51},"end":{"line":3188,"column":52}}]},"203":{"line":3188,"type":"binary-expr","locations":[{"start":{"line":3188,"column":57},"end":{"line":3188,"column":84}},{"start":{"line":3188,"column":88},"end":{"line":3188,"column":89}}]},"204":{"line":3193,"type":"if","locations":[{"start":{"line":3193,"column":10},"end":{"line":3193,"column":10}},{"start":{"line":3193,"column":10},"end":{"line":3193,"column":10}}]},"205":{"line":3199,"type":"if","locations":[{"start":{"line":3199,"column":6},"end":{"line":3199,"column":6}},{"start":{"line":3199,"column":6},"end":{"line":3199,"column":6}}]},"206":{"line":3221,"type":"if","locations":[{"start":{"line":3221,"column":8},"end":{"line":3221,"column":8}},{"start":{"line":3221,"column":8},"end":{"line":3221,"column":8}}]}},"code":["'use strict';","","var endsWith = require('../../utils/string').endsWith;","var clone = require('../../utils/object').clone;","var constants = require('../../utils/bignumber/constants');","","function factory (type, config, load, typed, math) {","  var add       = load(require('../../function/arithmetic/addScalar'));","  var subtract  = load(require('../../function/arithmetic/subtract'));","  var multiply  = load(require('../../function/arithmetic/multiplyScalar'));","  var divide    = load(require('../../function/arithmetic/divideScalar'));","  var pow       = load(require('../../function/arithmetic/pow'));","  var abs       = load(require('../../function/arithmetic/abs'));","  var fix       = load(require('../../function/arithmetic/fix'));","  var equal     = load(require('../../function/relational/equal'));","  var isNumeric = load(require('../../function/utils/isNumeric'));","  var format    = load(require('../../function/string/format'));","  var getTypeOf = load(require('../../function/utils/typeof'));","  var toNumber  = load(require('../../type/number'));","  var Complex   = load(require('../../type/complex/Complex'));","","  /**","   * A unit can be constructed in the following ways:","   *     var a = new Unit(value, name);","   *     var b = new Unit(null, name);","   *     var c = Unit.parse(str);","   *","   * Example usage:","   *     var a = new Unit(5, 'cm');               // 50 mm","   *     var b = Unit.parse('23 kg');             // 23 kg","   *     var c = math.in(a, new Unit(null, 'm');  // 0.05 m","   *     var d = new Unit(9.81, \"m/s^2\");         // 9.81 m/s^2","   *","   * @class Unit","   * @constructor Unit","   * @param {number | BigNumber | Fraction | Complex | boolean} [value]  A value like 5.2","   * @param {string} [name]   A unit name like \"cm\" or \"inch\", or a derived unit of the form: \"u1[^ex1] [u2[^ex2] ...] [/ u3[^ex3] [u4[^ex4]]]\", such as \"kg m^2/s^2\", where each unit appearing after the forward slash is taken to be in the denominator. \"kg m^2 s^-2\" is a synonym and is also acceptable. Any of the units can include a prefix.","   */","  function Unit(value, name) {","    if (!(this instanceof Unit)) {","      throw new Error('Constructor must be called with the new operator');","    }","","    if (!(value === undefined || isNumeric(value) || value.isComplex)) {","      throw new TypeError('First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined');","    }","    if (name != undefined && (typeof name !== 'string' || name == '')) {","      throw new TypeError('Second parameter in Unit constructor must be a string');","    }","","    if (name != undefined) {","      var u = Unit.parse(name);","      this.units = u.units;","      this.dimensions = u.dimensions;","    }","    else {","      this.units = [","        {","          unit: UNIT_NONE,","          prefix: PREFIXES.NONE,  // link to a list with supported prefixes","          power: 0","        }","      ];","      this.dimensions = []; ","      for(var i=0; i<BASE_DIMENSIONS.length; i++) {","        this.dimensions[i] = 0;","      }","    }","","    this.value = (value != undefined) ? this._normalize(value) : null;","","    this.fixPrefix = false; // if true, function format will not search for the","                            // best prefix but leave it as initially provided.","                            // fixPrefix is set true by the method Unit.to","","    // The justification behind this is that if the constructor is explicitly called,","    // the caller wishes the units to be returned exactly as he supplied.","    this.isUnitListSimplified = true;","","  }","","  /**","   * Attach type information","   */","  Unit.prototype.type = 'Unit';","  Unit.prototype.isUnit = true;","","  // private variables and functions for the Unit parser","  var text, index, c;","","  function skipWhitespace() {","    while (c == ' ' || c == '\\t') {","      next();","    }","  }","","  function isDigitDot(c) {","    return ((c >= '0' && c <= '9') || c == '.');","  }","","  function isDigit(c) {","    return ((c >= '0' && c <= '9'));","  }","","  function next() {","    index++;","    c = text.charAt(index);","  }","","  function revert(oldIndex) {","    index = oldIndex;","    c = text.charAt(index);","  }","","  function parseNumber() {","    var number = '';","    var oldIndex;","    oldIndex = index;","","    if (c == '+') {","      next();","    }","    else if (c == '-') {","      number += c;","      next();","    }","","    if (!isDigitDot(c)) {","      // a + or - must be followed by a digit","      revert(oldIndex);","      return null;","    }","","    // get number, can have a single dot","    if (c == '.') {","      number += c;","      next();","      if (!isDigit(c)) {","        // this is no legal number, it is just a dot","        revert(oldIndex);","        return null;","      }","    }","    else {","      while (isDigit(c)) {","        number += c;","        next();","      }","      if (c == '.') {","        number += c;","        next();","      }","    }","    while (isDigit(c)) {","      number += c;","      next();","    }","","    // check for exponential notation like \"2.3e-4\" or \"1.23e50\"","    if (c == 'E' || c == 'e') {","      // The grammar branches here. This could either be part of an exponent or the start of a unit that begins with the letter e, such as \"4exabytes\"","","      var tentativeNumber = '';","      var tentativeIndex = index;","","      tentativeNumber += c;","      next();","","      if (c == '+' || c == '-') {","        tentativeNumber += c;","        next();","      }","","      // Scientific notation MUST be followed by an exponent (otherwise we assume it is not scientific notation)","      if (!isDigit(c)) {","        // The e or E must belong to something else, so return the number without the e or E.","        revert(tentativeIndex);","        return number;","      }","      ","      // We can now safely say that this is scientific notation.","      number = number + tentativeNumber;","      while (isDigit(c)) {","        number += c;","        next();","      }","    }","","    return number;","  }","","  function parseUnit() {","    var unitName = '';","","    // Alphanumeric characters only; matches [a-zA-Z0-9]","    var code = text.charCodeAt(index);","    while ( (code >= 48 && code <= 57) ||","            (code >= 65 && code <= 90) ||","            (code >= 97 && code <= 122)) {","      unitName += c;","      next();","      code = text.charCodeAt(index);","    }","","    // Must begin with [a-zA-Z]","    code = unitName.charCodeAt(0);","    if ((code >= 65 && code <= 90) ||","        (code >= 97 && code <= 122)) {","        return unitName || null;","    } ","    else {","      return null;","    }","  }","","  function parseCharacter(toFind) {","    if (c === toFind) {","      next();","      return toFind;","    }","    else {","      return null;","    }","  }","","  /**","   * Parse a string into a unit. The value of the unit is parsed as number,","   * BigNumber, or Fraction depending on the math.js config setting `number`.","   *","   * Throws an exception if the provided string does not contain a valid unit or","   * cannot be parsed.","   * @memberof Unit","   * @param {string} str        A string like \"5.2 inch\", \"4e2 cm/s^2\"","   * @return {Unit} unit","   */","  Unit.parse = function (str, options) {","    options = options || {};","    text = str;","    index = -1;","    c = '';","","    if (typeof text !== 'string') {","      throw new TypeError('Invalid argument in Unit.parse, string expected');","    }","","    var unit = new Unit();","    unit.units = [];","","    // A unit should follow this pattern:","    // [number]unit[^number] [unit[^number]]...[/unit[^number] [unit[^number]]]","","    // Rules:","    // number is any floating point number.","    // unit is any alphanumeric string beginning with an alpha. Units with names like e3 should be avoided because they look like the exponent of a floating point number!","    // The string may optionally begin with a number.","    // Each unit may optionally be followed by ^number.","    // Whitespace or a forward slash is recommended between consecutive units, although the following technically is parseable:","    //   2m^2kg/s^2","    // it is not good form. If a unit starts with e, then it could be confused as a floating point number:","    //   4erg","","    next();","    skipWhitespace();","    // Optional number at the start of the string","    var valueStr = parseNumber();","    var value = null;","    if(valueStr) {","      if (config.number === 'BigNumber') {","        value = new type.BigNumber(valueStr);","      }","      else if (config.number === 'Fraction') {","        value = new type.Fraction(valueStr);","      }","      else { // number","        value = parseFloat(valueStr);","      }","    }","    skipWhitespace();    // Whitespace is not required here","","    // Next, we read any number of unit[^number]","    var powerMultiplierCurrent = 1;","    var expectingUnit = false;","","    // Stack to keep track of powerMultipliers applied to each parentheses group","    var powerMultiplierStack = [];","","    // Running product of all elements in powerMultiplierStack","    var powerMultiplierStackProduct = 1;","","    while (true) {","      skipWhitespace();","","      // Check for and consume opening parentheses, pushing powerMultiplierCurrent to the stack","      // A '(' will always appear directly before a unit.","      while (c === '(') {","        powerMultiplierStack.push(powerMultiplierCurrent);","        powerMultiplierStackProduct *= powerMultiplierCurrent;","        powerMultiplierCurrent = 1;","        next();","        skipWhitespace();","      }","","      // Is there something here?","      if(c) {","        var oldC = c;","        var uStr = parseUnit();","        if(uStr == null) {","          throw new SyntaxError('Unexpected \"' + oldC + '\" in \"' + text + '\" at index ' + index.toString());","        }","      }","      else {","        // End of input.","        break;","      }","","      // Verify the unit exists and get the prefix (if any)","      var res = _findUnit(uStr);","      if(res == null) {","        // Unit not found.","        throw new SyntaxError('Unit \"' + uStr + '\" not found.');","      }","","      var power = powerMultiplierCurrent * powerMultiplierStackProduct;","      // Is there a \"^ number\"?","      skipWhitespace();","      if (parseCharacter('^')) {","        skipWhitespace();","        var p = parseNumber();","        if(p == null) {","          // No valid number found for the power!","          throw new SyntaxError('In \"' + str + '\", \"^\" must be followed by a floating-point number');","        }","        power *= p;","      }","","      // Add the unit to the list","      unit.units.push( {","        unit: res.unit,","        prefix: res.prefix,","        power: power","      });","      for(var i=0; i<BASE_DIMENSIONS.length; i++) {","        unit.dimensions[i] += (res.unit.dimensions[i] || 0) * power;","      }","","      // Check for and consume closing parentheses, popping from the stack.","      // A ')' will always follow a unit.","      skipWhitespace();","      while (c === ')') {","        if(powerMultiplierStack.length === 0) {","          throw new SyntaxError('Unmatched \")\" in \"' + text + '\" at index ' + index.toString());","        }","        powerMultiplierStackProduct /= powerMultiplierStack.pop();","        next();","        skipWhitespace();","      }","","      // \"*\" and \"/\" should mean we are expecting something to come next.","      // Is there a forward slash? If so, negate powerMultiplierCurrent. The next unit or paren group is in the denominator.","      expectingUnit = false;","","      if (parseCharacter('*')) {","        // explicit multiplication","        powerMultiplierCurrent = 1;","        expectingUnit = true;","      }","      else if (parseCharacter('/')) {","        // division","        powerMultiplierCurrent = -1;","        expectingUnit = true;","      }","      else {","        // implicit multiplication","        powerMultiplierCurrent = 1;","      }","","      // Replace the unit into the auto unit system","      if(res.unit.base) {","        var baseDim = res.unit.base.key;","        UNIT_SYSTEMS.auto[baseDim] = {","          unit: res.unit,","          prefix: res.prefix","        };","      }","    }","    ","    // Has the string been entirely consumed?","    skipWhitespace();","    if(c) {","      throw new SyntaxError('Could not parse: \"' + str + '\"');","    }","","    // Is there a trailing slash?","    if(expectingUnit) {","      throw new SyntaxError('Trailing characters: \"' + str + '\"');","    }","","    // Is the parentheses stack empty?","    if(powerMultiplierStack.length !== 0) {","      throw new SyntaxError('Unmatched \"(\" in \"' + text + '\"');","    }","","    // Are there any units at all?","    if(unit.units.length == 0 && !options.allowNoUnits) {","      throw new SyntaxError('\"' + str + '\" contains no units');","    }","","    unit.value = (value != undefined) ? unit._normalize(value) : null;","    return unit;","  };","","  /**","   * create a copy of this unit","   * @memberof Unit","   * @return {Unit} Returns a cloned version of the unit","   */","  Unit.prototype.clone = function () {","    var unit = new Unit();","","    unit.fixPrefix = this.fixPrefix;","    unit.isUnitListSimplified = this.isUnitListSimplified;","","    unit.value = clone(this.value);","    unit.dimensions = this.dimensions.slice(0);","    unit.units = [];","    for(var i = 0; i < this.units.length; i++) {","      unit.units[i] = { };","      for (var p in this.units[i]) {","        if (this.units[i].hasOwnProperty(p)) {","          unit.units[i][p] = this.units[i][p];","        }","      }","    }","","    return unit;","  };","","  /**","   * Return whether the unit is derived (such as m/s, or cm^2, but not N)","   * @memberof Unit","   * @return {boolean} True if the unit is derived","   */","  Unit.prototype._isDerived = function() {","    if(this.units.length === 0) {","      return false;","    }","    return this.units.length > 1 || Math.abs(this.units[0].power - 1.0) > 1e-15;","  };","","  /**","   * Normalize a value, based on its currently set unit(s)","   * @memberof Unit","   * @param {number | BigNumber | Fraction | boolean} value","   * @return {number | BigNumber | Fraction | boolean} normalized value","   * @private","   */","  Unit.prototype._normalize = function (value) {","    var unitValue, unitOffset, unitPower, unitPrefixValue;","    var convert;","","    if (value == null || this.units.length === 0) {","      return value;","    }","    else if (this._isDerived()) {","      // This is a derived unit, so do not apply offsets.","      // For example, with J kg^-1 degC^-1 you would NOT want to apply the offset.","      var res = value;","      convert = Unit._getNumberConverter(getTypeOf(value)); // convert to Fraction or BigNumber if needed","","      for(var i=0; i < this.units.length; i++) {","        unitValue       = convert(this.units[i].unit.value);","        unitPrefixValue = convert(this.units[i].prefix.value);","        unitPower       = convert(this.units[i].power);","        res = multiply(res, pow(multiply(unitValue, unitPrefixValue), unitPower));","      }","","      return res;","    }","    else {","      // This is a single unit of power 1, like kg or degC","      convert = Unit._getNumberConverter(getTypeOf(value)); // convert to Fraction or BigNumber if needed","","      unitValue       = convert(this.units[0].unit.value);","      unitOffset      = convert(this.units[0].unit.offset);","      unitPrefixValue = convert(this.units[0].prefix.value);","","      return multiply(add(value, unitOffset), multiply(unitValue, unitPrefixValue));","    }","  };","","  /**","   * Denormalize a value, based on its currently set unit(s)","   * @memberof Unit","   * @param {number} value","   * @param {number} [prefixValue]    Optional prefix value to be used (ignored if this is a derived unit)","   * @return {number} denormalized value","   * @private","   */","  Unit.prototype._denormalize = function (value, prefixValue) {","    var unitValue, unitOffset, unitPower, unitPrefixValue;","    var convert;","","    if (value == null || this.units.length === 0) {","      return value;","    }","    else if (this._isDerived()) {","      // This is a derived unit, so do not apply offsets.","      // For example, with J kg^-1 degC^-1 you would NOT want to apply the offset.","      // Also, prefixValue is ignored--but we will still use the prefix value stored in each unit, since kg is usually preferable to g unless the user decides otherwise.","      var res = value;","      convert = Unit._getNumberConverter(getTypeOf(value)); // convert to Fraction or BigNumber if needed","","      for (var i = 0; i < this.units.length; i++) {","        unitValue       = convert(this.units[i].unit.value);","        unitPrefixValue = convert(this.units[i].prefix.value);","        unitPower       = convert(this.units[i].power);","        res = divide(res, pow(multiply(unitValue, unitPrefixValue), unitPower));","      }","","      return res;","    }","    else {","      // This is a single unit of power 1, like kg or degC","      convert = Unit._getNumberConverter(getTypeOf(value)); // convert to Fraction or BigNumber if needed","","      unitValue       = convert(this.units[0].unit.value);","      unitPrefixValue = convert(this.units[0].prefix.value);","      unitOffset      = convert(this.units[0].unit.offset);","","      if (prefixValue == undefined) {","        return subtract(divide(divide(value, unitValue), unitPrefixValue), unitOffset);","      }","      else {","        return subtract(divide(divide(value, unitValue), prefixValue), unitOffset);","      }","    }","  };","","  /**","   * Find a unit from a string","   * @memberof Unit","   * @param {string} str              A string like 'cm' or 'inch'","   * @returns {Object | null} result  When found, an object with fields unit and","   *                                  prefix is returned. Else, null is returned.","   * @private","   */","  function _findUnit(str) {","  ","    // First, match units names exactly. For example, a user could define 'mm' as 10^-4 m, which is silly, but then we would want 'mm' to match the user-defined unit.","    if(UNITS.hasOwnProperty(str)) {","      var unit = UNITS[str];","      var prefix = unit.prefixes[''];","      return {","        unit: unit,","        prefix: prefix","      }","    }","","    for (var name in UNITS) {","      if (UNITS.hasOwnProperty(name)) {","        if (endsWith(str, name)) {","          var unit = UNITS[name];","          var prefixLen = (str.length - name.length);","          var prefixName = str.substring(0, prefixLen);","          var prefix = unit.prefixes[prefixName];","          if (prefix !== undefined) {","            // store unit, prefix, and value","            return {","              unit: unit,","              prefix: prefix","            };","          }","        }","      }","    }","","    return null;","  }","","  /**","   * Test if the given expression is a unit.","   * The unit can have a prefix but cannot have a value.","   * @memberof Unit","   * @param {string} name   A string to be tested whether it is a value less unit.","   *                        The unit can have prefix, like \"cm\"","   * @return {boolean}      true if the given string is a unit","   */","  Unit.isValuelessUnit = function (name) {","    return (_findUnit(name) != null);","  };","","  /**","   * check if this unit has given base unit","   * If this unit is a derived unit, this will ALWAYS return false, since by definition base units are not derived.","   * @memberof Unit","   * @param {BASE_UNITS | string | undefined} base","   */","  Unit.prototype.hasBase = function (base) {","","    if(typeof(base) === \"string\") {","      base = BASE_UNITS[base];","    }","","    if(!base)","      return false;","","","    // All dimensions must be the same","    for(var i=0; i<BASE_DIMENSIONS.length; i++) {","      if (Math.abs((this.dimensions[i] || 0) - (base.dimensions[i] || 0)) > 1e-12) {","        return false;","      }","    }","    return true;","","  };","","  /**","   * Check if this unit has a base or bases equal to another base or bases","   * For derived units, the exponent on each base also must match","   * @memberof Unit","   * @param {Unit} other","   * @return {boolean} true if equal base","   */","  Unit.prototype.equalBase = function (other) {","    // All dimensions must be the same","    for(var i=0; i<BASE_DIMENSIONS.length; i++) {","      if (Math.abs((this.dimensions[i] || 0) - (other.dimensions[i] || 0)) > 1e-12) {","        return false;","      }","    }","    return true;","  };","","  /**","   * Check if this unit equals another unit","   * @memberof Unit","   * @param {Unit} other","   * @return {boolean} true if both units are equal","   */","  Unit.prototype.equals = function (other) {","    return (this.equalBase(other) && equal(this.value, other.value));","  };","","  /**","   * Multiply this unit with another one","   * @memberof Unit","   * @param {Unit} other","   * @return {Unit} product of this unit and the other unit","   */","  Unit.prototype.multiply = function (other) {","    var res = this.clone();","    ","    for(var i = 0; i<BASE_DIMENSIONS.length; i++) {","      // Dimensions arrays may be of different lengths. Default to 0.","      res.dimensions[i] = (this.dimensions[i] || 0) + (other.dimensions[i] || 0);","    }","","    // Append other's units list onto res (simplify later in Unit.prototype.format)","    for(var i=0; i<other.units.length; i++) {","      // Make a deep copy","      var inverted = {};","      for(var key in other.units[i]) {","        inverted[key] = other.units[i][key];","      }","      res.units.push(inverted);","    }","","    // If at least one operand has a value, then the result should also have a value","    if(this.value != null || other.value != null) {","      var valThis = this.value == null ? this._normalize(1) : this.value;","      var valOther = other.value == null ? other._normalize(1) : other.value;","      res.value = multiply(valThis, valOther);","    }","    else {","      res.value = null;","    }","","    // Trigger simplification of the unit list at some future time","    res.isUnitListSimplified = false;","","    return getNumericIfUnitless(res);","  };","","  /**","   * Divide this unit by another one","   * @memberof Unit","   * @param {Unit} other","   * @return {Unit} result of dividing this unit by the other unit","   */","  Unit.prototype.divide = function (other) {","    var res = this.clone();","    ","    for(var i=0; i<BASE_DIMENSIONS.length; i++) {","      // Dimensions arrays may be of different lengths. Default to 0.","      res.dimensions[i] = (this.dimensions[i] || 0) - (other.dimensions[i] || 0);","    }","","    // Invert and append other's units list onto res (simplify later in Unit.prototype.format)","    for(var i=0; i<other.units.length; i++) {","      // Make a deep copy","      var inverted = {};","      for(var key in other.units[i]) {","        inverted[key] = other.units[i][key];","      }","      inverted.power = -inverted.power;","      res.units.push(inverted);","    }","","    // If at least one operand has a value, the result should have a value","    if (this.value != null || other.value != null) {","      var valThis = this.value == null ? this._normalize(1) : this.value;","      var valOther = other.value == null ? other._normalize(1) : other.value;","      res.value = divide(valThis, valOther);","    }","    else {","      res.value = null;","    }","","    // Trigger simplification of the unit list at some future time","    res.isUnitListSimplified = false;","","    return getNumericIfUnitless(res);","  };","","  /**","   * Calculate the power of a unit","   * @memberof Unit","   * @param {number | Fraction | BigNumber} p","   * @returns {Unit}      The result: this^p","   */","  Unit.prototype.pow = function (p) {","    var res = this.clone();","    ","    for(var i=0; i<BASE_DIMENSIONS.length; i++) {","      // Dimensions arrays may be of different lengths. Default to 0.","      res.dimensions[i] = (this.dimensions[i] || 0) * p;","    }","","    // Adjust the power of each unit in the list","    for(var i=0; i<res.units.length; i++) {","      res.units[i].power *= p;","    }","","    if(res.value != null) {","      res.value = pow(res.value, p);","","      // only allow numeric output, we don't want to return a Complex number","      //if (!isNumeric(res.value)) {","      //  res.value = NaN;","      //}","      // Update: Complex supported now","    }","    else {","      res.value = null;","    }","","    // Trigger lazy evaluation of the unit list","    res.isUnitListSimplified = false;","","    return getNumericIfUnitless(res);","  };","","  /**","   * Return the numeric value of this unit if it is dimensionless, has a value, and config.predictable == false; or the original unit otherwise","   * @param {Unit} unit","   * @returns {number | Fraction | BigNumber | Unit}  The numeric value of the unit if conditions are met, or the original unit otherwise","   */","  var getNumericIfUnitless = function(unit) {","    if(unit.equalBase(BASE_UNITS.NONE) && unit.value !== null && !config.predictable) {","      return unit.value;","    }","    else {","      return unit;","    }","  }","    ","","  /**","   * Calculate the absolute value of a unit","   * @memberof Unit","   * @param {number | Fraction | BigNumber} x","   * @returns {Unit}      The result: |x|, absolute value of x","   */","  Unit.prototype.abs = function () {","    // This gives correct, but unexpected, results for units with an offset.","    // For example, abs(-283.15 degC) = -263.15 degC !!!","    var ret = this.clone();","    ret.value = abs(ret.value);","","    for(var i in ret.units) {","      if(ret.units[i].unit.name === 'VA' || ret.units[i].unit.name === 'VAR') {","        ret.units[i].unit = UNITS[\"W\"];","      }","    }","","    return ret;","  };","","  /**","   * Convert the unit to a specific unit name.","   * @memberof Unit","   * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like \"cm\"","   * @returns {Unit} Returns a clone of the unit with a fixed prefix and unit.","   */","  Unit.prototype.to = function (valuelessUnit) {","    var other;","    var value = this.value == null ? this._normalize(1) : this.value;","    if (typeof valuelessUnit === 'string') {","      //other = new Unit(null, valuelessUnit);","      other = Unit.parse(valuelessUnit);","      if (!this.equalBase(other)) {","        throw new Error('Units do not match');","      }","      if (other.value !== null) {","        throw new Error('Cannot convert to a unit with a value');","      }","","      other.value = clone(value);","      other.fixPrefix = true;","      other.isUnitListSimplified = true;","      return other;","    }","    else if (valuelessUnit && valuelessUnit.isUnit) {","      if (!this.equalBase(valuelessUnit)) {","        throw new Error('Units do not match');","      }","      if (valuelessUnit.value !== null) {","        throw new Error('Cannot convert to a unit with a value');","      }","      other = valuelessUnit.clone();","      other.value = clone(value);","      other.fixPrefix = true;","      other.isUnitListSimplified = true;","      return other;","    }","    else {","      throw new Error('String or Unit expected as parameter');","    }","  };","","  /**","   * Return the value of the unit when represented with given valueless unit","   * @memberof Unit","   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'","   * @return {number} Returns the unit value as number.","   */","  // TODO: deprecate Unit.toNumber? It's always better to use toNumeric","  Unit.prototype.toNumber = function (valuelessUnit) {","    return toNumber(this.toNumeric(valuelessUnit));","  };","","  /**","   * Return the value of the unit in the original numeric type","   * @memberof Unit","   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'","   * @return {number | BigNumber | Fraction} Returns the unit value","   */","  Unit.prototype.toNumeric = function (valuelessUnit) {","    var other = this;","    if(valuelessUnit) {","      // Allow getting the numeric value without converting to a different unit","      other = this.to(valuelessUnit);","    }","","    if(other._isDerived()) {","      return other._denormalize(other.value);","    }","    else {","      return other._denormalize(other.value, other.units[0].prefix.value);","    }","  };","","  /**","   * Get a string representation of the unit.","   * @memberof Unit","   * @return {string}","   */","  Unit.prototype.toString = function () {","    return this.format();","  };","","  /**","   * Get a JSON representation of the unit","   * @memberof Unit","   * @returns {Object} Returns a JSON object structured as:","   *                   `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`","   */","  Unit.prototype.toJSON = function () {","    return {","      mathjs: 'Unit',","      value: this._denormalize(this.value),","      unit: this.formatUnits(),","      fixPrefix: this.fixPrefix","    };","  };","","  /**","   * Instantiate a Unit from a JSON object","   * @memberof Unit","   * @param {Object} json  A JSON object structured as:","   *                       `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`","   * @return {Unit}","   */","  Unit.fromJSON = function (json) {","    var unit = new Unit(json.value, json.unit);","    unit.fixPrefix = json.fixPrefix || false;","    return unit;","  };","","  /**","   * Returns the string representation of the unit.","   * @memberof Unit","   * @return {string}","   */","  Unit.prototype.valueOf = Unit.prototype.toString;","","  /**","   * Attempt to simplify the list of units for this unit according to the dimensions array and the current unit system. After the call, this Unit will contain a list of the \"best\" units for formatting.","   * Intended to be evaluated lazily. You must set isUnitListSimplified = false before the call! After the call, isUnitListSimplified will be set to true.","   */","  Unit.prototype.simplifyUnitListLazy = function() {","","    if (this.isUnitListSimplified || this.value == null) {","      return;","    }","","    var proposedUnitList = [];","","    // Search for a matching base","    var matchingBase;","    for(var key in currentUnitSystem) {","      if(this.hasBase(BASE_UNITS[key])) {","        matchingBase = key;","        break;","      }","    }","","    if(matchingBase === 'NONE')","    {","      this.units = [];","    }","    else {","      var matchingUnit;","      if(matchingBase) {","        // Does the unit system have a matching unit?","        if(currentUnitSystem.hasOwnProperty(matchingBase)) {","          matchingUnit = currentUnitSystem[matchingBase];","        }","      }","      var value;","      var str;","      if(matchingUnit) {","        this.units = [{","          unit: matchingUnit.unit,","          prefix: matchingUnit.prefix,","          power: 1.0","        }];","      }","      else {","        // Multiple units or units with powers are formatted like this:","        // 5 (kg m^2) / (s^3 mol)","        // Build an representation from the base units of the current unit system","        var missingBaseDim = false;","        for(var i=0; i<BASE_DIMENSIONS.length; i++) {","          var baseDim = BASE_DIMENSIONS[i];","          if(Math.abs(this.dimensions[i] || 0) > 1e-12) {","            if(currentUnitSystem.hasOwnProperty(baseDim)) {","              proposedUnitList.push({","                unit: currentUnitSystem[baseDim].unit,","                prefix: currentUnitSystem[baseDim].prefix,","                power: this.dimensions[i] || 0","              });","            }","            else {","              missingBaseDim = true;","            }","          }","        }","","        // Is the proposed unit list \"simpler\" than the existing one?","        if(proposedUnitList.length < this.units.length && !missingBaseDim) {","          // Replace this unit list with the proposed list","          this.units = proposedUnitList;","        }","      }","    }","","    this.isUnitListSimplified = true;","  };","","  Unit.prototype.toSI = function() {","","    var ret = this.clone();","","    var proposedUnitList = [];","","    // Multiple units or units with powers are formatted like this:","    // 5 (kg m^2) / (s^3 mol)","    // Build an representation from the base units of the SI unit system","    var missingBaseDim = false;","    for(var i=0; i<BASE_DIMENSIONS.length; i++) {","      var baseDim = BASE_DIMENSIONS[i];","      if(Math.abs(ret.dimensions[i] || 0) > 1e-12) {","        if(UNIT_SYSTEMS[\"si\"].hasOwnProperty(baseDim)) {","          proposedUnitList.push({","            unit: UNIT_SYSTEMS[\"si\"][baseDim].unit,","            prefix: UNIT_SYSTEMS[\"si\"][baseDim].prefix,","            power: ret.dimensions[i] || 0","          });","        }","        else {","          throw new Error(\"Cannot express custom unit \" + baseDim + \" in SI units\");","        }","      }","    }","","    // Replace this unit list with the proposed list","    ret.units = proposedUnitList;","","    ret.isUnitListSimplified = true;","","    return ret;","  }","","  /**","   * Get a string representation of the units of this Unit, without the value.","   * @memberof Unit","   * @return {string}","   */","  Unit.prototype.formatUnits = function () {","","    // Lazy evaluation of the unit list","    this.simplifyUnitListLazy();","","    var strNum = \"\";","    var strDen = \"\";","    var nNum = 0;","    var nDen = 0;","","    for(var i=0; i<this.units.length; i++) {","      if(this.units[i].power > 0) {","        nNum++;","        strNum += \" \" + this.units[i].prefix.name + this.units[i].unit.name;","        if(Math.abs(this.units[i].power - 1.0) > 1e-15) {","          strNum += \"^\" + this.units[i].power;","        }","      }","      else if(this.units[i].power < 0) {","        nDen++;","      }","    }","","    if(nDen > 0) {","      for(var i=0; i<this.units.length; i++) {","        if(this.units[i].power < 0) {","          if(nNum > 0) {","            strDen += \" \" + this.units[i].prefix.name + this.units[i].unit.name;","            if(Math.abs(this.units[i].power + 1.0) > 1e-15) {","              strDen += \"^\" + (-this.units[i].power);","            }","          }","          else {","            strDen += \" \" + this.units[i].prefix.name + this.units[i].unit.name;","            strDen += \"^\" + (this.units[i].power);","          }","        }","      }","    }","    // Remove leading \" \"","    strNum = strNum.substr(1);","    strDen = strDen.substr(1);","","    // Add parans for better copy/paste back into the eval, for example, or for better pretty print formatting","    if(nNum > 1 && nDen > 0) {","      strNum = \"(\" + strNum + \")\";","    }","    if(nDen > 1 && nNum > 0) {","      strDen = \"(\" + strDen + \")\";","    }","","    var str = strNum;","    if(nNum > 0 && nDen > 0) {","      str += \" / \";","    }","    str += strDen;","","    return str;","  };","","  /**","   * Get a string representation of the Unit, with optional formatting options.","   * @memberof Unit","   * @param {Object | number | Function} [options]  Formatting options. See","   *                                                lib/utils/number:format for a","   *                                                description of the available","   *                                                options.","   * @return {string}","   */","  Unit.prototype.format = function (options) {","","    // Simplfy the unit list, if necessary","    this.simplifyUnitListLazy();","","    // Apply some custom logic for handling VA and VAR. The goal is to express the value of the unit as a real value, if possible. Otherwise, use a real-valued unit instead of a complex-valued one.","    var isImaginary = false;","    var isReal = true;","    if(typeof(this.value) !== 'undefined' && this.value !== null && this.value.isComplex) {","      // TODO: Make this better, for example, use relative magnitude of re and im rather than absolute","      isImaginary = Math.abs(this.value.re) < 1e-14;","      isReal = Math.abs(this.value.im) < 1e-14;","    }","    ","    for(var i in this.units) {","      if(this.units[i].unit) {","        if(this.units[i].unit.name === 'VA' && isImaginary) {","          this.units[i].unit = UNITS[\"VAR\"];","        }","        else if(this.units[i].unit.name === 'VAR' && !isImaginary) {","          this.units[i].unit = UNITS[\"VA\"];","        }","      }","    }","","","    // Now apply the best prefix","    // Units must have only one unit and not have the fixPrefix flag set","    if (this.units.length === 1 && !this.fixPrefix) {","      // Units must have integer powers, otherwise the prefix will change the","      // outputted value by not-an-integer-power-of-ten","      if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) < 1e-14) {","        // Apply the best prefix","        this.units[0].prefix = this._bestPrefix();","      }","    }","","","    var value = this._denormalize(this.value);","    var str = (this.value !== null) ? format(value, options || {}) : '';","    var unitStr = this.formatUnits();","    if(this.value && this.value.isComplex) {","      str = \"(\" + str + \")\";    // Surround complex values with ( ) to enable better parsing ","    }","    if(unitStr.length > 0 && str.length > 0) {","      str += \" \";","    }","    str += unitStr;","","    return str;","  };","","  /**","   * Calculate the best prefix using current value.","   * @memberof Unit","   * @returns {Object} prefix","   * @private","   */","  Unit.prototype._bestPrefix = function () {","    if (this.units.length !== 1) {","      throw new Error(\"Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!\");","    }","    if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) >= 1e-14) {","      throw new Error(\"Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!\");","    }","","    // find the best prefix value (resulting in the value of which","    // the absolute value of the log10 is closest to zero,","    // though with a little offset of 1.2 for nicer values: you get a","    // sequence 1mm 100mm 500mm 0.6m 1m 10m 100m 500m 0.6km 1km ...","","    // Note: the units value can be any numeric type, but to find the best","    // prefix it's enough to work with limited precision of a regular number","    // Update: using mathjs abs since we also allow complex numbers","    var absValue = abs(this.value);","    var absUnitValue = abs(this.units[0].unit.value);","    var bestPrefix = this.units[0].prefix;","    if (absValue === 0) {","      return bestPrefix;","    }","    var power = this.units[0].power;","    var bestDiff = Math.log(absValue / Math.pow(bestPrefix.value * absUnitValue, power)) / Math.LN10 - 1.2;","    if(bestDiff > -2.200001 && bestDiff < 1.800001) return bestPrefix;    // Allow the original prefix","    bestDiff = Math.abs(bestDiff);","    var prefixes = this.units[0].unit.prefixes;","    for (var p in prefixes) {","      if (prefixes.hasOwnProperty(p)) {","        var prefix = prefixes[p];","        if (prefix.scientific) {","","          var diff = Math.abs(","              Math.log(absValue / Math.pow(prefix.value * absUnitValue, power)) / Math.LN10 - 1.2);","","          if (diff < bestDiff","              || (diff === bestDiff && prefix.name.length < bestPrefix.name.length)) {","                // choose the prefix with the smallest diff, or if equal, choose the one","                // with the shortest name (can happen with SHORTLONG for example)","                bestPrefix = prefix;","                bestDiff = diff;","          }","        }","      }","    }","","    return bestPrefix;","  };","","  /**","   * Returns an array of units whose sum is equal to this unit","   * @memberof Unit","   * @param {Array} [parts] An array of strings or valueless units. ","   *","   *   Example:","   *","   *   var u = new Unit(1, 'm');","   *   u.splitUnit(['feet', 'inch']);","   *     [ 3 feet, 3.3700787401575 inch ]","   *","   * @return {Array} An array of units.","   */","  Unit.prototype.splitUnit = function(parts) {","","    var x = this.clone();","    var ret = [];","    for(var i=0; i<parts.length; i++) {","      x = x.to(parts[i]);","      if(i==parts.length-1) break;","      // fix rounds a number towards 0","      var fixedVal = fix(x.toNumeric());","      var y = new Unit(fixedVal, parts[i].toString());","      ret.push(y);","      x = subtract(x, y);","    }","    ret.push(x);","","    return ret;","  };","","  var PREFIXES = {","    NONE: {","      '': {name: '', value: 1, scientific: true}","    },","    SHORT: {","      '': {name: '', value: 1, scientific: true},","","      'da': {name: 'da', value: 1e1, scientific: false},","      'h': {name: 'h', value: 1e2, scientific: false},","      'k': {name: 'k', value: 1e3, scientific: true},","      'M': {name: 'M', value: 1e6, scientific: true},","      'G': {name: 'G', value: 1e9, scientific: true},","      'T': {name: 'T', value: 1e12, scientific: true},","      'P': {name: 'P', value: 1e15, scientific: true},","      'E': {name: 'E', value: 1e18, scientific: true},","      'Z': {name: 'Z', value: 1e21, scientific: true},","      'Y': {name: 'Y', value: 1e24, scientific: true},","","      'd': {name: 'd', value: 1e-1, scientific: false},","      'c': {name: 'c', value: 1e-2, scientific: false},","      'm': {name: 'm', value: 1e-3, scientific: true},","      'u': {name: 'u', value: 1e-6, scientific: true},","      'n': {name: 'n', value: 1e-9, scientific: true},","      'p': {name: 'p', value: 1e-12, scientific: true},","      'f': {name: 'f', value: 1e-15, scientific: true},","      'a': {name: 'a', value: 1e-18, scientific: true},","      'z': {name: 'z', value: 1e-21, scientific: true},","      'y': {name: 'y', value: 1e-24, scientific: true}","    },","    LONG: {","      '': {name: '', value: 1, scientific: true},","","      'deca': {name: 'deca', value: 1e1, scientific: false},","      'hecto': {name: 'hecto', value: 1e2, scientific: false},","      'kilo': {name: 'kilo', value: 1e3, scientific: true},","      'mega': {name: 'mega', value: 1e6, scientific: true},","      'giga': {name: 'giga', value: 1e9, scientific: true},","      'tera': {name: 'tera', value: 1e12, scientific: true},","      'peta': {name: 'peta', value: 1e15, scientific: true},","      'exa': {name: 'exa', value: 1e18, scientific: true},","      'zetta': {name: 'zetta', value: 1e21, scientific: true},","      'yotta': {name: 'yotta', value: 1e24, scientific: true},","","      'deci': {name: 'deci', value: 1e-1, scientific: false},","      'centi': {name: 'centi', value: 1e-2, scientific: false},","      'milli': {name: 'milli', value: 1e-3, scientific: true},","      'micro': {name: 'micro', value: 1e-6, scientific: true},","      'nano': {name: 'nano', value: 1e-9, scientific: true},","      'pico': {name: 'pico', value: 1e-12, scientific: true},","      'femto': {name: 'femto', value: 1e-15, scientific: true},","      'atto': {name: 'atto', value: 1e-18, scientific: true},","      'zepto': {name: 'zepto', value: 1e-21, scientific: true},","      'yocto': {name: 'yocto', value: 1e-24, scientific: true}","    },","    SQUARED: {","      '': {name: '', value: 1, scientific: true},","","      'da': {name: 'da', value: 1e2, scientific: false},","      'h': {name: 'h', value: 1e4, scientific: false},","      'k': {name: 'k', value: 1e6, scientific: true},","      'M': {name: 'M', value: 1e12, scientific: true},","      'G': {name: 'G', value: 1e18, scientific: true},","      'T': {name: 'T', value: 1e24, scientific: true},","      'P': {name: 'P', value: 1e30, scientific: true},","      'E': {name: 'E', value: 1e36, scientific: true},","      'Z': {name: 'Z', value: 1e42, scientific: true},","      'Y': {name: 'Y', value: 1e48, scientific: true},","","      'd': {name: 'd', value: 1e-2, scientific: false},","      'c': {name: 'c', value: 1e-4, scientific: false},","      'm': {name: 'm', value: 1e-6, scientific: true},","      'u': {name: 'u', value: 1e-12, scientific: true},","      'n': {name: 'n', value: 1e-18, scientific: true},","      'p': {name: 'p', value: 1e-24, scientific: true},","      'f': {name: 'f', value: 1e-30, scientific: true},","      'a': {name: 'a', value: 1e-36, scientific: true},","      'z': {name: 'z', value: 1e-42, scientific: true},","      'y': {name: 'y', value: 1e-48, scientific: true}","    },","    CUBIC: {","      '': {name: '', value: 1, scientific: true},","","      'da': {name: 'da', value: 1e3, scientific: false},","      'h': {name: 'h', value: 1e6, scientific: false},","      'k': {name: 'k', value: 1e9, scientific: true},","      'M': {name: 'M', value: 1e18, scientific: true},","      'G': {name: 'G', value: 1e27, scientific: true},","      'T': {name: 'T', value: 1e36, scientific: true},","      'P': {name: 'P', value: 1e45, scientific: true},","      'E': {name: 'E', value: 1e54, scientific: true},","      'Z': {name: 'Z', value: 1e63, scientific: true},","      'Y': {name: 'Y', value: 1e72, scientific: true},","","      'd': {name: 'd', value: 1e-3, scientific: false},","      'c': {name: 'c', value: 1e-6, scientific: false},","      'm': {name: 'm', value: 1e-9, scientific: true},","      'u': {name: 'u', value: 1e-18, scientific: true},","      'n': {name: 'n', value: 1e-27, scientific: true},","      'p': {name: 'p', value: 1e-36, scientific: true},","      'f': {name: 'f', value: 1e-45, scientific: true},","      'a': {name: 'a', value: 1e-54, scientific: true},","      'z': {name: 'z', value: 1e-63, scientific: true},","      'y': {name: 'y', value: 1e-72, scientific: true}","    },","    BINARY_SHORT: {","      '': {name: '', value: 1, scientific: true},","      'k': {name: 'k', value: 1e3, scientific: true},","      'M': {name: 'M', value: 1e6, scientific: true},","      'G': {name: 'G', value: 1e9, scientific: true},","      'T': {name: 'T', value: 1e12, scientific: true},","      'P': {name: 'P', value: 1e15, scientific: true},","      'E': {name: 'E', value: 1e18, scientific: true},","      'Z': {name: 'Z', value: 1e21, scientific: true},","      'Y': {name: 'Y', value: 1e24, scientific: true},","","      'Ki': {name: 'Ki', value: 1024, scientific: true},","      'Mi': {name: 'Mi', value: Math.pow(1024, 2), scientific: true},","      'Gi': {name: 'Gi', value: Math.pow(1024, 3), scientific: true},","      'Ti': {name: 'Ti', value: Math.pow(1024, 4), scientific: true},","      'Pi': {name: 'Pi', value: Math.pow(1024, 5), scientific: true},","      'Ei': {name: 'Ei', value: Math.pow(1024, 6), scientific: true},","      'Zi': {name: 'Zi', value: Math.pow(1024, 7), scientific: true},","      'Yi': {name: 'Yi', value: Math.pow(1024, 8), scientific: true}","    },","    BINARY_LONG: {","      '': {name: '', value: 1, scientific: true},","      'kilo': {name: 'kilo', value: 1e3, scientific: true},","      'mega': {name: 'mega', value: 1e6, scientific: true},","      'giga': {name: 'giga', value: 1e9, scientific: true},","      'tera': {name: 'tera', value: 1e12, scientific: true},","      'peta': {name: 'peta', value: 1e15, scientific: true},","      'exa': {name: 'exa', value: 1e18, scientific: true},","      'zetta': {name: 'zetta', value: 1e21, scientific: true},","      'yotta': {name: 'yotta', value: 1e24, scientific: true},","","      'kibi': {name: 'kibi', value: 1024, scientific: true},","      'mebi': {name: 'mebi', value: Math.pow(1024, 2), scientific: true},","      'gibi': {name: 'gibi', value: Math.pow(1024, 3), scientific: true},","      'tebi': {name: 'tebi', value: Math.pow(1024, 4), scientific: true},","      'pebi': {name: 'pebi', value: Math.pow(1024, 5), scientific: true},","      'exi': {name: 'exi', value: Math.pow(1024, 6), scientific: true},","      'zebi': {name: 'zebi', value: Math.pow(1024, 7), scientific: true},","      'yobi': {name: 'yobi', value: Math.pow(1024, 8), scientific: true}","    },","    BTU: {","      '':   {name: '',   value: 1,   scientific: true},","      'MM': {name: 'MM', value: 1e6, scientific: true}","    }","  };","","  // Add a prefix list for both short and long prefixes (for ohm in particular, since Mohm and megaohm are both acceptable):","  PREFIXES.SHORTLONG = {};","  for (var key in PREFIXES.SHORT) {","    if(PREFIXES.SHORT.hasOwnProperty(key)) {","      PREFIXES.SHORTLONG[key] = PREFIXES.SHORT[key];","    }","  }","  for (var key in PREFIXES.LONG) {","    if(PREFIXES.LONG.hasOwnProperty(key)) {","      PREFIXES.SHORTLONG[key] = PREFIXES.LONG[key];","    }","  }","","  /* Internally, each unit is represented by a value and a dimension array. The elements of the dimensions array have the following meaning:","   * Index  Dimension","   * -----  ---------","   *   0    Length","   *   1    Mass","   *   2    Time","   *   3    Current","   *   4    Temperature","   *   5    Luminous intensity","   *   6    Amount of substance","   *   7    Angle","   *   8    Bit (digital)","   * For example, the unit \"298.15 K\" is a pure temperature and would have a value of 298.15 and a dimension array of [0, 0, 0, 0, 1, 0, 0, 0, 0]. The unit \"1 cal / (gm °C)\" can be written in terms of the 9 fundamental dimensions as [length^2] / ([time^2] * [temperature]), and would a value of (after conversion to SI) 4184.0 and a dimensions array of [2, 0, -2, 0, -1, 0, 0, 0, 0].","   *","   */","","  var BASE_DIMENSIONS = [\"MASS\", \"LENGTH\", \"TIME\", \"CURRENT\", \"TEMPERATURE\", \"LUMINOUS_INTENSITY\", \"AMOUNT_OF_SUBSTANCE\", \"ANGLE\", \"BIT\"];","","  var BASE_UNITS = {","    NONE: {","      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 0]","    },","    MASS: {","      dimensions: [1, 0, 0, 0, 0, 0, 0, 0, 0]","    },","    LENGTH: {","      dimensions: [0, 1, 0, 0, 0, 0, 0, 0, 0]","    },","    TIME: {","      dimensions: [0, 0, 1, 0, 0, 0, 0, 0, 0]","    },","    CURRENT: {","      dimensions: [0, 0, 0, 1, 0, 0, 0, 0, 0]","    },","    TEMPERATURE: {","      dimensions: [0, 0, 0, 0, 1, 0, 0, 0, 0]","    },","    LUMINOUS_INTENSITY: {","      dimensions: [0, 0, 0, 0, 0, 1, 0, 0, 0]","    },","    AMOUNT_OF_SUBSTANCE: {","      dimensions: [0, 0, 0, 0, 0, 0, 1, 0, 0]","    },","","    FORCE: {","      dimensions: [1, 1, -2, 0, 0, 0, 0, 0, 0]","    },","    SURFACE: {","      dimensions: [0, 2, 0, 0, 0, 0, 0, 0, 0]","    },","    VOLUME: {","      dimensions: [0, 3, 0, 0, 0, 0, 0, 0, 0]","    },","    ENERGY: {","      dimensions: [1, 2, -2, 0, 0, 0, 0, 0, 0]","    },","    POWER: {","      dimensions: [1, 2, -3, 0, 0, 0, 0, 0, 0]","    },","    PRESSURE: {","      dimensions: [1, -1, -2, 0, 0, 0, 0, 0, 0]","    },","","    ELECTRIC_CHARGE: {","      dimensions: [0, 0, 1, 1, 0, 0, 0, 0, 0]","    },","    ELECTRIC_CAPACITANCE: {","      dimensions: [-1, -2, 4, 2, 0, 0, 0, 0, 0]","    },","    ELECTRIC_POTENTIAL: {","      dimensions: [1, 2, -3, -1, 0, 0, 0, 0, 0]","    },","    ELECTRIC_RESISTANCE: {","      dimensions: [1, 2, -3, -2, 0, 0, 0, 0, 0]","    },","    ELECTRIC_INDUCTANCE: {","      dimensions: [1, 2, -2, -2, 0, 0, 0, 0, 0]","    },","    ELECTRIC_CONDUCTANCE: {","      dimensions: [-1, -2, 3, 2, 0, 0, 0, 0, 0]","    },","    MAGNETIC_FLUX: {","      dimensions: [1, 2, -2, -1, 0, 0, 0, 0, 0]","    },","    MAGNETIC_FLUX_DENSITY: {","      dimensions: [1, 0, -2, -1, 0, 0, 0, 0, 0]","    },","","    FREQUENCY: {","      dimensions: [0, 0, -1, 0, 0, 0, 0, 0, 0]","    },","    ANGLE: {","      dimensions: [0, 0, 0, 0, 0, 0, 0, 1, 0]","    },","    BIT: {","      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 1]","    }","  };","","  for(var key in BASE_UNITS) {","    BASE_UNITS[key].key = key;","  }","","  var BASE_UNIT_NONE = {};","","  var UNIT_NONE = {name: '', base: BASE_UNIT_NONE, value: 1, offset: 0, dimensions: [0,0,0,0,0,0,0,0,0]};","","  var UNITS = {","    // length","    meter: {","      name: 'meter',","      base: BASE_UNITS.LENGTH,","      prefixes: PREFIXES.LONG,","      value: 1,","      offset: 0","    },","    inch: {","      name: 'inch',","      base: BASE_UNITS.LENGTH,","      prefixes: PREFIXES.NONE,","      value: 0.0254,","      offset: 0","    },","    foot: {","      name: 'foot',","      base: BASE_UNITS.LENGTH,","      prefixes: PREFIXES.NONE,","      value: 0.3048,","      offset: 0","    },","    yard: {","      name: 'yard',","      base: BASE_UNITS.LENGTH,","      prefixes: PREFIXES.NONE,","      value: 0.9144,","      offset: 0","    },","    mile: {","      name: 'mile',","      base: BASE_UNITS.LENGTH,","      prefixes: PREFIXES.NONE,","      value: 1609.344,","      offset: 0","    },","    link: {","      name: 'link',","      base: BASE_UNITS.LENGTH,","      prefixes: PREFIXES.NONE,","      value: 0.201168,","      offset: 0","    },","    rod: {","      name: 'rod',","      base: BASE_UNITS.LENGTH,","      prefixes: PREFIXES.NONE,","      value: 5.029210,","      offset: 0","    },","    chain: {","      name: 'chain',","      base: BASE_UNITS.LENGTH,","      prefixes: PREFIXES.NONE,","      value: 20.1168,","      offset: 0","    },","    angstrom: {","      name: 'angstrom',","      base: BASE_UNITS.LENGTH,","      prefixes: PREFIXES.NONE,","      value: 1e-10,","      offset: 0","    },","","    m: {","      name: 'm',","      base: BASE_UNITS.LENGTH,","      prefixes: PREFIXES.SHORT,","      value: 1,","      offset: 0","    },","    'in': {","      name: 'in',","      base: BASE_UNITS.LENGTH,","      prefixes: PREFIXES.NONE,","      value: 0.0254,","      offset: 0","    },","    ft: {","      name: 'ft',","      base: BASE_UNITS.LENGTH,","      prefixes: PREFIXES.NONE,","      value: 0.3048,","      offset: 0","    },","    yd: {","      name: 'yd',","      base: BASE_UNITS.LENGTH,","      prefixes: PREFIXES.NONE,","      value: 0.9144,","      offset: 0","    },","    mi: {","      name: 'mi',","      base: BASE_UNITS.LENGTH,","      prefixes: PREFIXES.NONE,","      value: 1609.344,","      offset: 0","    },","    li: {","      name: 'li',","      base: BASE_UNITS.LENGTH,","      prefixes: PREFIXES.NONE,","      value: 0.201168,","      offset: 0","    },","    rd: {","      name: 'rd',","      base: BASE_UNITS.LENGTH,","      prefixes: PREFIXES.NONE,","      value: 5.029210,","      offset: 0","    },","    ch: {","      name: 'ch',","      base: BASE_UNITS.LENGTH,","      prefixes: PREFIXES.NONE,","      value: 20.1168,","      offset: 0","    },","    mil: {","      name: 'mil',","      base: BASE_UNITS.LENGTH,","      prefixes: PREFIXES.NONE,","      value: 0.0000254,","      offset: 0","    }, // 1/1000 inch","","    // Surface","    m2: {","      name: 'm2',","      base: BASE_UNITS.SURFACE,","      prefixes: PREFIXES.SQUARED,","      value: 1,","      offset: 0","    },","    sqin: {","      name: 'sqin',","      base: BASE_UNITS.SURFACE,","      prefixes: PREFIXES.NONE,","      value: 0.00064516,","      offset: 0","    }, // 645.16 mm2","    sqft: {","      name: 'sqft',","      base: BASE_UNITS.SURFACE,","      prefixes: PREFIXES.NONE,","      value: 0.09290304,","      offset: 0","    }, // 0.09290304 m2","    sqyd: {","      name: 'sqyd',","      base: BASE_UNITS.SURFACE,","      prefixes: PREFIXES.NONE,","      value: 0.83612736,","      offset: 0","    }, // 0.83612736 m2","    sqmi: {","      name: 'sqmi',","      base: BASE_UNITS.SURFACE,","      prefixes: PREFIXES.NONE,","      value: 2589988.110336,","      offset: 0","    }, // 2.589988110336 km2","    sqrd: {","      name: 'sqrd',","      base: BASE_UNITS.SURFACE,","      prefixes: PREFIXES.NONE,","      value: 25.29295,","      offset: 0","    }, // 25.29295 m2","    sqch: {","      name: 'sqch',","      base: BASE_UNITS.SURFACE,","      prefixes: PREFIXES.NONE,","      value: 404.6873,","      offset: 0","    }, // 404.6873 m2","    sqmil: {","      name: 'sqmil',","      base: BASE_UNITS.SURFACE,","      prefixes: PREFIXES.NONE,","      value: 6.4516e-10,","      offset: 0","    }, // 6.4516 * 10^-10 m2","    acre: {","      name: 'acre',","      base: BASE_UNITS.SURFACE,","      prefixes: PREFIXES.NONE,","      value: 4046.86,","      offset: 0","    }, // 4046.86 m2","    hectare: {","      name: 'hectare',","      base: BASE_UNITS.SURFACE,","      prefixes: PREFIXES.NONE,","      value: 10000,","      offset: 0","    }, // 10000 m2","","    // Volume","    m3: {","      name: 'm3',","      base: BASE_UNITS.VOLUME,","      prefixes: PREFIXES.CUBIC,","      value: 1,","      offset: 0","    },","    L: {","      name: 'L',","      base: BASE_UNITS.VOLUME,","      prefixes: PREFIXES.SHORT,","      value: 0.001,","      offset: 0","    }, // litre","    l: {","      name: 'l',","      base: BASE_UNITS.VOLUME,","      prefixes: PREFIXES.SHORT,","      value: 0.001,","      offset: 0","    }, // litre","    litre: {","      name: 'litre',","      base: BASE_UNITS.VOLUME,","      prefixes: PREFIXES.LONG,","      value: 0.001,","      offset: 0","    },","    cuin: {","      name: 'cuin',","      base: BASE_UNITS.VOLUME,","      prefixes: PREFIXES.NONE,","      value: 1.6387064e-5,","      offset: 0","    }, // 1.6387064e-5 m3","    cuft: {","      name: 'cuft',","      base: BASE_UNITS.VOLUME,","      prefixes: PREFIXES.NONE,","      value: 0.028316846592,","      offset: 0","    }, // 28.316 846 592 L","    cuyd: {","      name: 'cuyd',","      base: BASE_UNITS.VOLUME,","      prefixes: PREFIXES.NONE,","      value: 0.764554857984,","      offset: 0","    }, // 764.554 857 984 L","    teaspoon: {","      name: 'teaspoon',","      base: BASE_UNITS.VOLUME,","      prefixes: PREFIXES.NONE,","      value: 0.000005,","      offset: 0","    }, // 5 mL","    tablespoon: {","      name: 'tablespoon',","      base: BASE_UNITS.VOLUME,","      prefixes: PREFIXES.NONE,","      value: 0.000015,","      offset: 0","    }, // 15 mL","    //{name: 'cup', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.000240, offset: 0}, // 240 mL  // not possible, we have already another cup","    drop: {","      name: 'drop',","      base: BASE_UNITS.VOLUME,","      prefixes: PREFIXES.NONE,","      value: 5e-8,","      offset: 0","    },  // 0.05 mL = 5e-8 m3","    gtt: {","      name: 'gtt',","      base: BASE_UNITS.VOLUME,","      prefixes: PREFIXES.NONE,","      value: 5e-8,","      offset: 0","    },  // 0.05 mL = 5e-8 m3","","    // Liquid volume","    minim: {","      name: 'minim',","      base: BASE_UNITS.VOLUME,","      prefixes: PREFIXES.NONE,","      value: 0.00000006161152,","      offset: 0","    }, // 0.06161152 mL","    fluiddram: {","      name: 'fluiddram',","      base: BASE_UNITS.VOLUME,","      prefixes: PREFIXES.NONE,","      value: 0.0000036966911,","      offset: 0","    },  // 3.696691 mL","    fluidounce: {","      name: 'fluidounce',","      base: BASE_UNITS.VOLUME,","      prefixes: PREFIXES.NONE,","      value: 0.00002957353,","      offset: 0","    }, // 29.57353 mL","    gill: {","      name: 'gill',","      base: BASE_UNITS.VOLUME,","      prefixes: PREFIXES.NONE,","      value: 0.0001182941,","      offset: 0","    }, // 118.2941 mL","    cc: {","      name: 'cc',","      base: BASE_UNITS.VOLUME,","      prefixes: PREFIXES.NONE,","      value: 1e-6,","      offset: 0","    }, // 1e-6 L","    cup: {","      name: 'cup',","      base: BASE_UNITS.VOLUME,","      prefixes: PREFIXES.NONE,","      value: 0.0002365882,","      offset: 0","    }, // 236.5882 mL","    pint: {","      name: 'pint',","      base: BASE_UNITS.VOLUME,","      prefixes: PREFIXES.NONE,","      value: 0.0004731765,","      offset: 0","    }, // 473.1765 mL","    quart: {","      name: 'quart',","      base: BASE_UNITS.VOLUME,","      prefixes: PREFIXES.NONE,","      value: 0.0009463529,","      offset: 0","    }, // 946.3529 mL","    gallon: {","      name: 'gallon',","      base: BASE_UNITS.VOLUME,","      prefixes: PREFIXES.NONE,","      value: 0.003785412,","      offset: 0","    }, // 3.785412 L","    beerbarrel: {","      name: 'beerbarrel',","      base: BASE_UNITS.VOLUME,","      prefixes: PREFIXES.NONE,","      value: 0.1173478,","      offset: 0","    }, // 117.3478 L","    oilbarrel: {","      name: 'oilbarrel',","      base: BASE_UNITS.VOLUME,","      prefixes: PREFIXES.NONE,","      value: 0.1589873,","      offset: 0","    }, // 158.9873 L","    hogshead: {","      name: 'hogshead',","      base: BASE_UNITS.VOLUME,","      prefixes: PREFIXES.NONE,","      value: 0.2384810,","      offset: 0","    }, // 238.4810 L","","    //{name: 'min', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.00000006161152, offset: 0}, // 0.06161152 mL // min is already in use as minute","    fldr: {","      name: 'fldr',","      base: BASE_UNITS.VOLUME,","      prefixes: PREFIXES.NONE,","      value: 0.0000036966911,","      offset: 0","    },  // 3.696691 mL","    floz: {","      name: 'floz',","      base: BASE_UNITS.VOLUME,","      prefixes: PREFIXES.NONE,","      value: 0.00002957353,","      offset: 0","    }, // 29.57353 mL","    gi: {","      name: 'gi',","      base: BASE_UNITS.VOLUME,","      prefixes: PREFIXES.NONE,","      value: 0.0001182941,","      offset: 0","    }, // 118.2941 mL","    cp: {","      name: 'cp',","      base: BASE_UNITS.VOLUME,","      prefixes: PREFIXES.NONE,","      value: 0.0002365882,","      offset: 0","    }, // 236.5882 mL","    pt: {","      name: 'pt',","      base: BASE_UNITS.VOLUME,","      prefixes: PREFIXES.NONE,","      value: 0.0004731765,","      offset: 0","    }, // 473.1765 mL","    qt: {","      name: 'qt',","      base: BASE_UNITS.VOLUME,","      prefixes: PREFIXES.NONE,","      value: 0.0009463529,","      offset: 0","    }, // 946.3529 mL","    gal: {","      name: 'gal',","      base: BASE_UNITS.VOLUME,","      prefixes: PREFIXES.NONE,","      value: 0.003785412,","      offset: 0","    }, // 3.785412 L","    bbl: {","      name: 'bbl',","      base: BASE_UNITS.VOLUME,","      prefixes: PREFIXES.NONE,","      value: 0.1173478,","      offset: 0","    }, // 117.3478 L","    obl: {","      name: 'obl',","      base: BASE_UNITS.VOLUME,","      prefixes: PREFIXES.NONE,","      value: 0.1589873,","      offset: 0","    }, // 158.9873 L","    //{name: 'hogshead', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.2384810, offset: 0}, // 238.4810 L // TODO: hh?","","    // Mass","    g: {","      name: 'g',","      base: BASE_UNITS.MASS,","      prefixes: PREFIXES.SHORT,","      value: 0.001,","      offset: 0","    },","    gram: {","      name: 'gram',","      base: BASE_UNITS.MASS,","      prefixes: PREFIXES.LONG,","      value: 0.001,","      offset: 0","    },","","    ton: {","      name: 'ton',","      base: BASE_UNITS.MASS,","      prefixes: PREFIXES.SHORT,","      value: 907.18474,","      offset: 0","    },","    tonne: {","      name: 'tonne',","      base: BASE_UNITS.MASS,","      prefixes: PREFIXES.SHORT,","      value: 1000,","      offset: 0","    },","","    grain: {","      name: 'grain',","      base: BASE_UNITS.MASS,","      prefixes: PREFIXES.NONE,","      value: 64.79891e-6,","      offset: 0","    },","    dram: {","      name: 'dram',","      base: BASE_UNITS.MASS,","      prefixes: PREFIXES.NONE,","      value: 1.7718451953125e-3,","      offset: 0","    },","    ounce: {","      name: 'ounce',","      base: BASE_UNITS.MASS,","      prefixes: PREFIXES.NONE,","      value: 28.349523125e-3,","      offset: 0","    },","    poundmass: {","      name: 'poundmass',","      base: BASE_UNITS.MASS,","      prefixes: PREFIXES.NONE,","      value: 453.59237e-3,","      offset: 0","    },","    hundredweight: {","      name: 'hundredweight',","      base: BASE_UNITS.MASS,","      prefixes: PREFIXES.NONE,","      value: 45.359237,","      offset: 0","    },","    stick: {","      name: 'stick',","      base: BASE_UNITS.MASS,","      prefixes: PREFIXES.NONE,","      value: 115e-3,","      offset: 0","    },","    stone: {","      name: 'stone',","      base: BASE_UNITS.MASS,","      prefixes: PREFIXES.NONE,","      value: 6.35029318,","      offset: 0","    },","","    gr: {","      name: 'gr',","      base: BASE_UNITS.MASS,","      prefixes: PREFIXES.NONE,","      value: 64.79891e-6,","      offset: 0","    },","    dr: {","      name: 'dr',","      base: BASE_UNITS.MASS,","      prefixes: PREFIXES.NONE,","      value: 1.7718451953125e-3,","      offset: 0","    },","    oz: {","      name: 'oz',","      base: BASE_UNITS.MASS,","      prefixes: PREFIXES.NONE,","      value: 28.349523125e-3,","      offset: 0","    },","    lbm: {","      name: 'lbm',","      base: BASE_UNITS.MASS,","      prefixes: PREFIXES.NONE,","      value: 453.59237e-3,","      offset: 0","    },","    cwt: {","      name: 'cwt',","      base: BASE_UNITS.MASS,","      prefixes: PREFIXES.NONE,","      value: 45.359237,","      offset: 0","    },","","    // Time","    s: {","      name: 's',","      base: BASE_UNITS.TIME,","      prefixes: PREFIXES.SHORT,","      value: 1,","      offset: 0","    },","    min: {","      name: 'min',","      base: BASE_UNITS.TIME,","      prefixes: PREFIXES.NONE,","      value: 60,","      offset: 0","    },","    h: {","      name: 'h',","      base: BASE_UNITS.TIME,","      prefixes: PREFIXES.NONE,","      value: 3600,","      offset: 0","    },","    second: {","      name: 'second',","      base: BASE_UNITS.TIME,","      prefixes: PREFIXES.LONG,","      value: 1,","      offset: 0","    },","    sec: {","      name: 'sec',","      base: BASE_UNITS.TIME,","      prefixes: PREFIXES.LONG,","      value: 1,","      offset: 0","    },","    minute: {","      name: 'minute',","      base: BASE_UNITS.TIME,","      prefixes: PREFIXES.NONE,","      value: 60,","      offset: 0","    },","    hour: {","      name: 'hour',","      base: BASE_UNITS.TIME,","      prefixes: PREFIXES.NONE,","      value: 3600,","      offset: 0","    },","    day: {","      name: 'day',","      base: BASE_UNITS.TIME,","      prefixes: PREFIXES.NONE,","      value: 86400,","      offset: 0","    },","    week: {","      name: 'week',","      base: BASE_UNITS.TIME,","      prefixes: PREFIXES.NONE,","      value: 7*86400,","      offset: 0","    },","    month: {","      name: 'month',","      base: BASE_UNITS.TIME,","      prefixes: PREFIXES.NONE,","      value: 2629800, //1/12th of Julian year","      offset: 0","    },","    year: {","      name: 'year',","      base: BASE_UNITS.TIME,","      prefixes: PREFIXES.NONE,","      value: 31557600, //Julian year","      offset: 0","    },","    decade: {","      name: 'year',","      base: BASE_UNITS.TIME,","      prefixes: PREFIXES.NONE,","      value: 315576000, //Julian decade","      offset: 0","    },","    century: {","      name: 'century',","      base: BASE_UNITS.TIME,","      prefixes: PREFIXES.NONE,","      value: 3155760000, //Julian century","      offset: 0","    },","    millennium: {","      name: 'millennium',","      base: BASE_UNITS.TIME,","      prefixes: PREFIXES.NONE,","      value: 31557600000, //Julian millennium","      offset: 0","    },","","    // Frequency","    hertz: {","      name: 'Hertz',","      base: BASE_UNITS.FREQUENCY,","      prefixes: PREFIXES.LONG,","      value: 1,","      offset: 0,","      reciprocal: true","    },","    Hz: {","      name: 'Hz',","      base: BASE_UNITS.FREQUENCY,","      prefixes: PREFIXES.SHORT,","      value: 1,","      offset: 0,","      reciprocal: true","    },","","    // Angle","    rad: {","      name: 'rad',","      base: BASE_UNITS.ANGLE,","      prefixes: PREFIXES.LONG,","      value: 1,","      offset: 0","    },","    // deg = rad / (2*pi) * 360 = rad / 0.017453292519943295769236907684888","    deg: {","      name: 'deg',","      base: BASE_UNITS.ANGLE,","      prefixes: PREFIXES.LONG,","      value: null, // will be filled in by calculateAngleValues()","      offset: 0","    },","    // grad = rad / (2*pi) * 400  = rad / 0.015707963267948966192313216916399","    grad: {","      name: 'grad',","      base: BASE_UNITS.ANGLE,","      prefixes: PREFIXES.LONG,","      value: null, // will be filled in by calculateAngleValues()","      offset: 0","    },","    // cycle = rad / (2*pi) = rad / 6.2831853071795864769252867665793","    cycle: {","      name: 'cycle',","      base: BASE_UNITS.ANGLE,","      prefixes: PREFIXES.NONE,","      value: null, // will be filled in by calculateAngleValues()","      offset: 0","    },","    // arcsec = rad / (3600 * (360 / 2 * pi)) = rad / 0.0000048481368110953599358991410235795","    arcsec: {","      name: 'arcsec',","      base: BASE_UNITS.ANGLE,","      prefixes: PREFIXES.NONE,","      value: null, // will be filled in by calculateAngleValues()","      offset: 0","    },","    // arcmin = rad / (60 * (360 / 2 * pi)) = rad / 0.00029088820866572159615394846141477","    arcmin: {","      name: 'arcmin',","      base: BASE_UNITS.ANGLE,","      prefixes: PREFIXES.NONE,","      value: null, // will be filled in by calculateAngleValues()","      offset: 0","    },","    ","    // Electric current","    A: {","      name: 'A',","      base: BASE_UNITS.CURRENT,","      prefixes: PREFIXES.SHORT,","      value: 1,","      offset: 0","    },","    ampere: {","      name: 'ampere',","      base: BASE_UNITS.CURRENT,","      prefixes: PREFIXES.LONG,","      value: 1,","      offset: 0","    },","","    // Temperature","    // K(C) = °C + 273.15","    // K(F) = (°F + 459.67) / 1.8","    // K(R) = °R / 1.8","    K: {","      name: 'K',","      base: BASE_UNITS.TEMPERATURE,","      prefixes: PREFIXES.NONE,","      value: 1,","      offset: 0","    },","    degC: {","      name: 'degC',","      base: BASE_UNITS.TEMPERATURE,","      prefixes: PREFIXES.NONE,","      value: 1,","      offset: 273.15","    },","    degF: {","      name: 'degF',","      base: BASE_UNITS.TEMPERATURE,","      prefixes: PREFIXES.NONE,","      value: 1 / 1.8,","      offset: 459.67","    },","    degR: {","      name: 'degR',","      base: BASE_UNITS.TEMPERATURE,","      prefixes: PREFIXES.NONE,","      value: 1 / 1.8,","      offset: 0","    },","    kelvin: {","      name: 'kelvin',","      base: BASE_UNITS.TEMPERATURE,","      prefixes: PREFIXES.NONE,","      value: 1,","      offset: 0","    },","    celsius: {","      name: 'celsius',","      base: BASE_UNITS.TEMPERATURE,","      prefixes: PREFIXES.NONE,","      value: 1,","      offset: 273.15","    },","    fahrenheit: {","      name: 'fahrenheit',","      base: BASE_UNITS.TEMPERATURE,","      prefixes: PREFIXES.NONE,","      value: 1 / 1.8,","      offset: 459.67","    },","    rankine: {","      name: 'rankine',","      base: BASE_UNITS.TEMPERATURE,","      prefixes: PREFIXES.NONE,","      value: 1 / 1.8,","      offset: 0","    },","","    // amount of substance","    mol: {","      name: 'mol',","      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,","      prefixes: PREFIXES.SHORT,","      value: 1,","      offset: 0","    },","    mole: {","      name: 'mole',","      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,","      prefixes: PREFIXES.LONG,","      value: 1,","      offset: 0","    },","","    // luminous intensity","    cd: {","      name: 'cd',","      base: BASE_UNITS.LUMINOUS_INTENSITY,","      prefixes: PREFIXES.NONE,","      value: 1,","      offset: 0","    },","    candela: {","      name: 'candela',","      base: BASE_UNITS.LUMINOUS_INTENSITY,","      prefixes: PREFIXES.NONE,","      value: 1,","      offset: 0","    },","    // TODO: units STERADIAN","    //{name: 'sr', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},","    //{name: 'steradian', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},","","    // Force","    N: {","      name: 'N',","      base: BASE_UNITS.FORCE,","      prefixes: PREFIXES.SHORT,","      value: 1,","      offset: 0","    },","    newton: {","      name: 'newton',","      base: BASE_UNITS.FORCE,","      prefixes: PREFIXES.LONG,","      value: 1,","      offset: 0","    },","    dyn: {","      name: 'dyn',","      base: BASE_UNITS.FORCE,","      prefixes: PREFIXES.SHORT,","      value: 0.00001,","      offset: 0","    },","    dyne: {","      name: 'dyne',","      base: BASE_UNITS.FORCE,","      prefixes: PREFIXES.LONG,","      value: 0.00001,","      offset: 0","    },","    lbf: {","      name: 'lbf',","      base: BASE_UNITS.FORCE,","      prefixes: PREFIXES.NONE,","      value: 4.4482216152605,","      offset: 0","    },","    poundforce: {","      name: 'poundforce',","      base: BASE_UNITS.FORCE,","      prefixes: PREFIXES.NONE,","      value: 4.4482216152605,","      offset: 0","    },","    kip: {","      name: 'kip',","      base: BASE_UNITS.FORCE,","      prefixes: PREFIXES.LONG,","      value: 4448.2216,","      offset: 0","    },","\t","    // Energy","    J: {","      name: 'J',","      base: BASE_UNITS.ENERGY,","      prefixes: PREFIXES.SHORT,","      value: 1,","      offset: 0","    },","    joule: {","      name: 'joule',","      base: BASE_UNITS.ENERGY,","      prefixes: PREFIXES.SHORT,","      value: 1,","      offset: 0","    },","    erg: {","      name: 'erg',","      base: BASE_UNITS.ENERGY,","      prefixes: PREFIXES.NONE,","      value: 1e-5,","      offset: 0","    },","    Wh: {","      name: 'Wh',","      base: BASE_UNITS.ENERGY,","      prefixes: PREFIXES.SHORT,","      value: 3600,","      offset: 0","    },","    BTU: {","      name: 'BTU',","      base: BASE_UNITS.ENERGY,","      prefixes: PREFIXES.BTU,","      value: 1055.05585262,","      offset: 0","    },","    eV: {","      name: 'eV',","      base: BASE_UNITS.ENERGY,","      prefixes: PREFIXES.SHORT,","      value: 1.602176565e-19,","      offset: 0","    },","    electronvolt: {","      name: 'electronvolt',","      base: BASE_UNITS.ENERGY,","      prefixes: PREFIXES.LONG,","      value: 1.602176565e-19,","      offset: 0","    },","","","    // Power","    W: {","      name: 'W',","      base: BASE_UNITS.POWER,","      prefixes: PREFIXES.SHORT,","      value: 1,","      offset: 0","    },","    watt: {","      name: 'W',","      base: BASE_UNITS.POWER,","      prefixes: PREFIXES.LONG,","      value: 1,","      offset: 0","    },","    hp: {","      name: 'hp',","      base: BASE_UNITS.POWER,","      prefixes: PREFIXES.NONE,","      value: 745.6998715386,","      offset: 0","    },","","    // Electrical power units","    VAR: {","      name: 'VAR',","      base: BASE_UNITS.POWER,","      prefixes: PREFIXES.SHORT,","      value: Complex.I,","      offset: 0","    },","    ","    VA: {","      name: 'VA',","      base: BASE_UNITS.POWER,","      prefixes: PREFIXES.SHORT,","      value: 1,","      offset: 0","    },","","    // Pressure","    Pa: {","      name: 'Pa',","      base: BASE_UNITS.PRESSURE,","      prefixes: PREFIXES.SHORT,","      value: 1,","      offset: 0","    },","    psi: {","      name: 'psi',","      base: BASE_UNITS.PRESSURE,","      prefixes: PREFIXES.NONE,","      value: 6894.75729276459,","      offset: 0","    },","    atm: {","      name: 'atm',","      base: BASE_UNITS.PRESSURE,","      prefixes: PREFIXES.NONE,","      value: 101325,","      offset: 0","    },","    bar: {","      name: 'bar',","      base: BASE_UNITS.PRESSURE,","      prefixes: PREFIXES.NONE,","      value: 100000,","      offset: 0","    },","    torr: {","      name: 'torr',","      base: BASE_UNITS.PRESSURE,","      prefixes: PREFIXES.NONE,","      value: 133.322,","      offset: 0","    },","    mmHg: {","      name: 'mmHg',","      base: BASE_UNITS.PRESSURE,","      prefixes: PREFIXES.NONE,","      value: 133.322,","      offset: 0","    },","    mmH2O: {","      name: 'mmH2O',","      base: BASE_UNITS.PRESSURE,","      prefixes: PREFIXES.NONE,","      value: 9.80665,","      offset: 0","    },","    cmH2O: {","      name: 'cmH2O',","      base: BASE_UNITS.PRESSURE,","      prefixes: PREFIXES.NONE,","      value: 98.0665,","      offset: 0","    },","","    // Electric charge","    coulomb: {","      name: 'coulomb',","      base: BASE_UNITS.ELECTRIC_CHARGE,","      prefixes: PREFIXES.LONG,","      value: 1,","      offset: 0","    },","    C: {","      name: 'C',","      base: BASE_UNITS.ELECTRIC_CHARGE,","      prefixes: PREFIXES.SHORT,","      value: 1,","      offset: 0","    },","    // Electric capacitance","    farad: {","      name: 'farad',","      base: BASE_UNITS.ELECTRIC_CAPACITANCE,","      prefixes: PREFIXES.LONG,","      value: 1,","      offset: 0","    },","    F: {","      name: 'F',","      base: BASE_UNITS.ELECTRIC_CAPACITANCE,","      prefixes: PREFIXES.SHORT,","      value: 1,","      offset: 0","    },","    // Electric potential","    volt: {","      name: 'volt',","      base: BASE_UNITS.ELECTRIC_POTENTIAL,","      prefixes: PREFIXES.LONG,","      value: 1,","      offset: 0","    },","    V: {","      name: 'V',","      base: BASE_UNITS.ELECTRIC_POTENTIAL,","      prefixes: PREFIXES.SHORT,","      value: 1,","      offset: 0","    },","    // Electric resistance","    ohm: {","      name: 'ohm',","      base: BASE_UNITS.ELECTRIC_RESISTANCE,","      prefixes: PREFIXES.SHORTLONG,    // Both Mohm and megaohm are acceptable","      value: 1,","      offset: 0","    },","    /*","     * Unicode breaks in browsers if charset is not specified","    Ω: {","      name: 'Ω',","      base: BASE_UNITS.ELECTRIC_RESISTANCE,","      prefixes: PREFIXES.SHORT,","      value: 1,","      offset: 0","    },","    */","    // Electric inductance","    henry: {","      name: 'henry',","      base: BASE_UNITS.ELECTRIC_INDUCTANCE,","      prefixes: PREFIXES.LONG,","      value: 1,","      offset: 0","    },","    H: {","      name: 'H',","      base: BASE_UNITS.ELECTRIC_INDUCTANCE,","      prefixes: PREFIXES.SHORT,","      value: 1,","      offset: 0","    },","    // Electric conductance","    siemens: {","      name: 'siemens',","      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,","      prefixes: PREFIXES.LONG,","      value: 1,","      offset: 0","    },","    S: {","      name: 'S',","      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,","      prefixes: PREFIXES.SHORT,","      value: 1,","      offset: 0","    },","    // Magnetic flux","    weber: {","      name: 'weber',","      base: BASE_UNITS.MAGNETIC_FLUX,","      prefixes: PREFIXES.LONG,","      value: 1,","      offset: 0","    },","    Wb: {","      name: 'Wb',","      base: BASE_UNITS.MAGNETIC_FLUX,","      prefixes: PREFIXES.SHORT,","      value: 1,","      offset: 0","    },","    // Magnetic flux density","    tesla: {","      name: 'tesla',","      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,","      prefixes: PREFIXES.LONG,","      value: 1,","      offset: 0","    },","    T: {","      name: 'T',","      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,","      prefixes: PREFIXES.SHORT,","      value: 1,","      offset: 0","    },","","    // Binary","    b: {","      name: 'b',","      base: BASE_UNITS.BIT,","      prefixes: PREFIXES.BINARY_SHORT,","      value: 1,","      offset: 0","    },","    bits: {","      name: 'bits',","      base: BASE_UNITS.BIT,","      prefixes: PREFIXES.BINARY_LONG,","      value: 1,","      offset: 0","    },","    B: {","      name: 'B',","      base: BASE_UNITS.BIT,","      prefixes: PREFIXES.BINARY_SHORT,","      value: 8,","      offset: 0","    },","    bytes: {","      name: 'bytes',","      base: BASE_UNITS.BIT,","      prefixes: PREFIXES.BINARY_LONG,","      value: 8,","      offset: 0","    }","  };","","  // aliases (formerly plurals)","  var ALIASES = {","    meters: 'meter',","    inches: 'inch',","    feet: 'foot',","    yards: 'yard',","    miles: 'mile',","    links: 'link',","    rods: 'rod',","    chains: 'chain',","    angstroms: 'angstrom',","","    lt: 'l',","    litres: 'litre',","    liter: 'litre',","    liters: 'litre',","    teaspoons: 'teaspoon',","    tablespoons: 'tablespoon',","    minims: 'minim',","    fluiddrams: 'fluiddram',","    fluidounces: 'fluidounce',","    gills: 'gill',","    cups: 'cup',","    pints: 'pint',","    quarts: 'quart',","    gallons: 'gallon',","    beerbarrels: 'beerbarrel',","    oilbarrels: 'oilbarrel',","    hogsheads: 'hogshead',","    gtts: 'gtt',","","    grams: 'gram',","    tons: 'ton',","    tonnes: 'tonne',","    grains: 'grain',","    drams: 'dram',","    ounces: 'ounce',","    poundmasses: 'poundmass',","    hundredweights: 'hundredweight',","    sticks: 'stick',","    lb: 'lbm',","    lbs: 'lbm',","\t","    kips: 'kip',","","    acres: 'acre',","    hectares: 'hectare',","    sqfeet: 'sqft',","    sqyard: 'sqyd',","    sqmile: 'sqmi',","    sqmiles: 'sqmi',","","    mmhg: 'mmHg',","    mmh2o: 'mmH2O',","    cmh2o: 'cmH2O',","","    seconds: 'second',","    secs: 'second',","    minutes: 'minute',","    mins: 'minute',","    hours: 'hour',","    hr: 'hour',","    hrs: 'hour',","    days: 'day',","    weeks: 'week',","    months: 'month',","    years: 'year',","","    hertz: 'hertz',","","    radians: 'rad',","    degree: 'deg',","    degrees: 'deg',","    gradian: 'grad',","    gradians: 'grad',","    cycles: 'cycle',","    arcsecond: 'arcsec',","    arcseconds: 'arcsec',","    arcminute: 'arcmin',","    arcminutes: 'arcmin',","","    BTUs: 'BTU',","    watts: 'watt',","    joules: 'joule',","","    amperes: 'ampere',","    coulombs: 'coulomb',","    volts: 'volt',","    ohms: 'ohm',","    farads: 'farad',","    webers: 'weber',","    teslas: 'tesla',","    electronvolts: 'electronvolt',","    moles: 'mole'","","  };","","  /**","   * Calculate the values for the angle units.","   * Value is calculated as number or BigNumber depending on the configuration","   * @param {{number: 'number' | 'BigNumber'}} config","   */","  function calculateAngleValues (config) {","    if (config.number === 'BigNumber') {","      var pi = constants.pi(type.BigNumber);","      UNITS.rad.value = new type.BigNumber(1);","      UNITS.deg.value = pi.div(180);        // 2 * pi / 360;","      UNITS.grad.value = pi.div(200);       // 2 * pi / 400;","      UNITS.cycle.value = pi.times(2);      // 2 * pi","      UNITS.arcsec.value = pi.div(648000);  // 2 * pi / 360 / 3600","      UNITS.arcmin.value = pi.div(10800);   // 2 * pi / 360 / 60","    }","    else { // number","      UNITS.rad.value = 1;","      UNITS.deg.value = Math.PI / 180;        // 2 * pi / 360;","      UNITS.grad.value = Math.PI / 200;       // 2 * pi / 400;","      UNITS.cycle.value = Math.PI * 2;        // 2 * pi","      UNITS.arcsec.value = Math.PI / 648000;  // 2 * pi / 360 / 3600;","      UNITS.arcmin.value = Math.PI / 10800;   // 2 * pi / 360 / 60;","    }","  }","","  // apply the angle values now","  calculateAngleValues(config);","","  // recalculate the values on change of configuration","  math.on('config', function (curr, prev) {","    if (curr.number !== prev.number) {","      calculateAngleValues(curr);","    }","  });","","  /**","   * A unit system is a set of dimensionally independent base units plus a set of derived units, formed by multiplication and division of the base units, that are by convention used with the unit system.","   * A user perhaps could issue a command to select a preferred unit system, or use the default (see below).","   * Auto unit system: The default unit system is updated on the fly anytime a unit is parsed. The corresponding unit in the default unit system is updated, so that answers are given in the same units the user supplies.","   */","  var UNIT_SYSTEMS = {","    si: {","      // Base units","      NONE:                  {unit: UNIT_NONE, prefix: PREFIXES.NONE['']},","      LENGTH:                {unit: UNITS.m,   prefix: PREFIXES.SHORT['']},","      MASS:                  {unit: UNITS.g,   prefix: PREFIXES.SHORT['k']}, ","      TIME:                  {unit: UNITS.s,   prefix: PREFIXES.SHORT['']}, ","      CURRENT:               {unit: UNITS.A,   prefix: PREFIXES.SHORT['']}, ","      TEMPERATURE:           {unit: UNITS.K,   prefix: PREFIXES.SHORT['']}, ","      LUMINOUS_INTENSITY:    {unit: UNITS.cd,  prefix: PREFIXES.SHORT['']}, ","      AMOUNT_OF_SUBSTANCE:   {unit: UNITS.mol, prefix: PREFIXES.SHORT['']}, ","      ANGLE:                 {unit: UNITS.rad, prefix: PREFIXES.SHORT['']}, ","      BIT:                   {unit: UNITS.bit, prefix: PREFIXES.SHORT['']}, ","","      // Derived units","      FORCE:                 {unit: UNITS.N,   prefix: PREFIXES.SHORT['']}, ","      ENERGY:                {unit: UNITS.J,   prefix: PREFIXES.SHORT['']},","      POWER:                 {unit: UNITS.W,   prefix: PREFIXES.SHORT['']},","      PRESSURE:              {unit: UNITS.Pa,  prefix: PREFIXES.SHORT['']},","      ELECTRIC_CHARGE:       {unit: UNITS.C,   prefix: PREFIXES.SHORT['']},","      ELECTRIC_CAPACITANCE:  {unit: UNITS.F,   prefix: PREFIXES.SHORT['']},","      ELECTRIC_POTENTIAL:    {unit: UNITS.V,   prefix: PREFIXES.SHORT['']},","      ELECTRIC_RESISTANCE:   {unit: UNITS.ohm, prefix: PREFIXES.SHORT['']},","      ELECTRIC_INDUCTANCE:   {unit: UNITS.H,   prefix: PREFIXES.SHORT['']},","      ELECTRIC_CONDUCTANCE:  {unit: UNITS.S,   prefix: PREFIXES.SHORT['']},","      MAGNETIC_FLUX:         {unit: UNITS.Wb,  prefix: PREFIXES.SHORT['']},","      MAGNETIC_FLUX_DENSITY: {unit: UNITS.T,   prefix: PREFIXES.SHORT['']},","      FREQUENCY:             {unit: UNITS.Hz,  prefix: PREFIXES.SHORT['']}","    }","  };","","  // Clone to create the other unit systems","  UNIT_SYSTEMS.cgs = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));","  UNIT_SYSTEMS.cgs.LENGTH = {unit: UNITS.m,   prefix: PREFIXES.SHORT['c']};","  UNIT_SYSTEMS.cgs.MASS =   {unit: UNITS.g,   prefix: PREFIXES.SHORT['']};","  UNIT_SYSTEMS.cgs.FORCE =  {unit: UNITS.dyn, prefix: PREFIXES.SHORT['']};","  UNIT_SYSTEMS.cgs.ENERGY = {unit: UNITS.erg, prefix: PREFIXES.NONE['']};","  // there are wholly 4 unique cgs systems for electricity and magnetism,","  // so let's not worry about it unless somebody complains","  ","  UNIT_SYSTEMS.us = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));","  UNIT_SYSTEMS.us.LENGTH =      {unit: UNITS.ft,   prefix: PREFIXES.NONE['']};","  UNIT_SYSTEMS.us.MASS =        {unit: UNITS.lbm,  prefix: PREFIXES.NONE['']};","  UNIT_SYSTEMS.us.TEMPERATURE = {unit: UNITS.degF, prefix: PREFIXES.NONE['']};","  UNIT_SYSTEMS.us.FORCE =       {unit: UNITS.lbf,  prefix: PREFIXES.NONE['']};","  UNIT_SYSTEMS.us.ENERGY =      {unit: UNITS.BTU,  prefix: PREFIXES.BTU['']};","  UNIT_SYSTEMS.us.POWER =       {unit: UNITS.hp,   prefix: PREFIXES.NONE['']};","  UNIT_SYSTEMS.us.PRESSURE =    {unit: UNITS.psi,  prefix: PREFIXES.NONE['']};","","  // Add additional unit systems here.","","","","  // Choose a unit system to seed the auto unit system.","  UNIT_SYSTEMS.auto = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));","","  // Set the current unit system","  var currentUnitSystem = UNIT_SYSTEMS.auto;","","  /**","   * Set a unit system for formatting derived units.","   * @param {string} [name] The name of the unit system.","   */","  Unit.setUnitSystem = function(name) {","    if(UNIT_SYSTEMS.hasOwnProperty(name)) {","      currentUnitSystem = UNIT_SYSTEMS[name];","    }","    else {","      throw new Error('Unit system ' + name + ' does not exist. Choices are: ' + Object.keys(UNIT_SYSTEMS).join(', '));","    }","  };","","  /**","   * Return the current unit system.","   * @return {string} The current unit system.","   */","  Unit.getUnitSystem = function() {","    for(var key in UNIT_SYSTEMS) {","      if(UNIT_SYSTEMS[key] === currentUnitSystem) {","        return key;","      }","    }","  };","","  /**","   * Converters to convert from number to an other numeric type like BigNumber","   * or Fraction","   */","  Unit.typeConverters = {","    BigNumber: function (x) {","      return new type.BigNumber(x + ''); // stringify to prevent constructor error","    },","","    Fraction: function (x) {","      return new type.Fraction(x);","    },","","    Complex: function (x) {","      return x;","    },","","    number: function (x) {","      return x;","    }","  };","","  /**","   * Retrieve the right convertor function corresponding with the type","   * of provided exampleValue.","   *","   * @param {string} type   A string 'number', 'BigNumber', or 'Fraction'","   *                        In case of an unknown type,","   * @return {Function}","   */","  Unit._getNumberConverter = function (type) {","    if (!Unit.typeConverters[type]) {","      throw new TypeError('Unsupported type \"' + type + '\"');","    }","","    return Unit.typeConverters[type];","  };","","  // Add dimensions to each built-in unit","  for (var key in UNITS) {","    var unit = UNITS[key];","    unit.dimensions = unit.base.dimensions;","  }    ","","  // Create aliases","  for (var name in ALIASES) {","    if(ALIASES.hasOwnProperty(name)) {","      var unit = UNITS[ALIASES[name]];","      var alias = {};","      for(var key in unit) {","        if(unit.hasOwnProperty(key)) {","          alias[key] = unit[key];","        }","      }","      alias.name = name;","      UNITS[name] = alias;","    }","  }","","  function assertUnitNameIsValid(name) {","    for(var i=0; i<name.length; i++) {","      var c = name.charAt(i);","       ","      var isValidAlpha = function (p) {","        return /^[a-zA-Z]$/.test(p);","      };","","      var isDigit = function (c) {","        return (c >= '0' && c <= '9');","      }","","      if(i === 0 && !isValidAlpha(c))","        throw new Error('Invalid unit name (must begin with alpha character): \"' + name + '\"');","","      if(i > 0 && !( isValidAlpha(c)","                  || isDigit(c)))","        throw new Error('Invalid unit name (only alphanumeric characters are allowed): \"' + name + '\"');","","    }","  }","","  /**","   * Wrapper around createUnitSingle.","   * Example: ","   *  createUnit({","   *    foo: { },","   *    bar: {","   *      definition: 'kg/foo',","   *      aliases: ['ba', 'barr', 'bars'],","   *      offset: 200","   *    },","   *    baz: '4 bar'","   *  }, ","   *  {","   *    override: true;","   *  });","   * @param {object} obj      Object map. Each key becomes a unit which is defined by its value.","   * @param {object} options","   */","  Unit.createUnit = function(obj, options) {","    ","    if(typeof(obj) !== 'object') {","      throw new TypeError(\"createUnit expects first parameter to be of type 'Object'\");","    }","","    // Remove all units and aliases we are overriding","    if(options && options.override) {","      for(var key in obj) {","        if(obj.hasOwnProperty(key)) {","          Unit.deleteUnit(key);","        }","        if(obj[key].aliases) {","          for(var i=0; i<obj[key].aliases.length; i++) {","            Unit.deleteUnit(obj[key].aliases[i]);","          }","        }","      }","    }","","    // TODO: traverse multiple times until all units have been added","    var lastUnit;","    for(var key in obj) {","      if(obj.hasOwnProperty(key)) {","        lastUnit = Unit.createUnitSingle(key, obj[key]);","      }","    }","    return lastUnit;","  };","","  /**","   * Create a user-defined unit and register it with the Unit type.","   * Example: ","   *  createUnitSingle('knot', '0.514444444 m/s')","   *  createUnitSingle('acre', new Unit(43560, 'ft^2'))","   *","   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'","   * @param {string, Unit} definition      Definition of the unit in terms of existing units. For example, '0.514444444 m / s'.","   * @param {Object} options   (optional) An object containing any of the following properties:","   *     prefixes {string} \"none\", \"short\", \"long\", \"binary_short\", or \"binary_long\". The default is \"none\".","   *     aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']","   *     offset {Numeric} An offset to apply when converting from the unit. For example, the offset for celsius is 273.15 and the offset for farhenheit is 459.67. Default is 0.","   *","   * @return {Unit} ","   */","  Unit.createUnitSingle = function(name, obj, options) {","","    if(typeof(obj) === 'undefined' || obj === null) {","      obj = {};","    }","    ","    if(typeof(name) !== 'string') {","      throw new TypeError(\"createUnitSingle expects first parameter to be of type 'string'\");","    }","   ","    // Check collisions with existing units","    if(UNITS.hasOwnProperty(name)) {","      throw new Error('Cannot create unit \"' + name + '\": a unit with that name already exists');","    }","","    // TODO: Validate name for collisions with other built-in functions (like abs or cos, for example), and for acceptable variable names. For example, '42' is probably not a valid unit. Nor is '%', since it is also an operator.","","    assertUnitNameIsValid(name);","","    var defUnit = null;   // The Unit from which the new unit will be created.","    var aliases = [];","    var offset = 0;","    var definition;","    var prefixes;","    if(obj && obj.type === 'Unit') {","      defUnit = obj.clone();","    }","    else if(typeof(obj) === 'string') {","      if(obj !== '') {","        definition = obj;","      }","    }","    else if(typeof(obj) === 'object') {","      definition = obj.definition;","      prefixes = obj.prefixes; ","      offset = obj.offset;","      aliases = obj.aliases;","    }","    else {","      throw new TypeError('Cannot create unit \"' + name + '\" from \"' + obj.toString() + '\": expecting \"string\" or \"Unit\" or \"Object\"');","    }","","    if(aliases) {","      for (var i=0; i<aliases.length; i++) {","        if(UNITS.hasOwnProperty(aliases[i])) {","          throw new Error('Cannot create alias \"' + aliases[i] + '\": a unit with that name already exists');","        }","      }","    }","","    if(definition && typeof(definition) === 'string' && !defUnit) {","      try {","        defUnit = Unit.parse(definition, {allowNoUnits: true});","      }","      catch (ex) {","        ex.message = 'Could not create unit \"' + name + '\" from \"' + definition + '\": ' + ex.message;","        throw(ex);","      }","    }","    else if(definition && definition.type === 'Unit') {","      defUnit = definition.clone();","    }","","    aliases = aliases || [];","    offset = offset || 0;","    if(prefixes && prefixes.toUpperCase) ","      prefixes = PREFIXES[prefixes.toUpperCase()] || PREFIXES.NONE;","    else","      prefixes = PREFIXES.NONE;","","","    // If defUnit is null, it is because the user did not","    // specify a defintion. So create a new base dimension.","    var newUnit = {};","    if(!defUnit) {","      // Add a new base dimension","      var baseName = name + \"_STUFF\";   // foo --> foo_STUFF, or the essence of foo","      if(BASE_DIMENSIONS.indexOf(baseName) >= 0) {","        throw new Error('Cannot create new base unit \"' + name + '\": a base unit with that name already exists (and cannot be overridden)');","      }","      BASE_DIMENSIONS.push(baseName);","","      // Push 0 onto existing base units","      for(var b in BASE_UNITS) {","        if(BASE_UNITS.hasOwnProperty(b)) {","          BASE_UNITS[b].dimensions[BASE_DIMENSIONS.length-1] = 0;","        }","      }","","      // Add the new base unit","      var newBaseUnit = { dimensions: [] };","      for(var i=0; i<BASE_DIMENSIONS.length; i++) {","        newBaseUnit.dimensions[i] = 0;","      }","      newBaseUnit.dimensions[BASE_DIMENSIONS.length-1] = 1;","      newBaseUnit.key = baseName;","      BASE_UNITS[baseName] = newBaseUnit;","       ","      newUnit = {","        name: name,","        value: 1,","        dimensions: BASE_UNITS[baseName].dimensions.slice(0),","        prefixes: prefixes,","        offset: offset,","        base: baseName","      };","","      currentUnitSystem[baseName] = {","        unit: newUnit,","        prefix: PREFIXES.NONE['']","      };","","    }","    else {","","      newUnit = {","        name: name,","        value: defUnit.value,","        dimensions: defUnit.dimensions.slice(0),","        prefixes: prefixes,","        offset: offset,","      };","      ","      // Create a new base if no matching base exists","      var anyMatch = false;","      for(var i in BASE_UNITS) {","        if(BASE_UNITS.hasOwnProperty(i)) {","          var match = true;","          for(var j=0; j<BASE_DIMENSIONS.length; j++) {","            if (Math.abs((newUnit.dimensions[j] || 0) - (BASE_UNITS[i].dimensions[j] || 0)) > 1e-12) {","              match = false;","              break;","            }","          }","          if(match) {","            anyMatch = true;","            break;","          }","        }","      }","      if(!anyMatch) {","        var baseName = name + \"_STUFF\";   // foo --> foo_STUFF, or the essence of foo","        // Add the new base unit","        var newBaseUnit = { dimensions: defUnit.dimensions.slice(0) };","        newBaseUnit.key = baseName;","        BASE_UNITS[baseName] = newBaseUnit;","","        currentUnitSystem[baseName] = {","          unit: newUnit,","          prefix: PREFIXES.NONE['']","        };","","        newUnit.base = baseName;","      }","    }","","    Unit.UNITS[name] = newUnit;","","    for (var i=0; i<aliases.length; i++) {","      var aliasName = aliases[i];","      var alias = {};","      for(var key in newUnit) {","        if(newUnit.hasOwnProperty(key)) {","          alias[key] = newUnit[key];","        }","      }","      alias.name = aliasName;","      Unit.UNITS[aliasName] = alias;","    }","","    return new Unit(null, name);","  };","","  Unit.deleteUnit = function(name) {","    delete Unit.UNITS[name];","  };","","","  Unit.PREFIXES = PREFIXES;","  Unit.BASE_UNITS = BASE_UNITS;","  Unit.UNITS = UNITS;","  Unit.UNIT_SYSTEMS = UNIT_SYSTEMS;","","  return Unit;","}","","exports.name = 'Unit';","exports.path = 'type';","exports.factory = factory;","exports.math = true; // request access to the math namespace",""],"l":{"3":1,"4":1,"5":1,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"39":1,"40":0,"41":0,"44":0,"45":0,"47":0,"48":0,"51":0,"52":0,"53":0,"54":0,"57":0,"64":0,"65":0,"66":0,"70":0,"72":0,"78":0,"85":0,"86":0,"89":0,"91":1,"92":0,"93":0,"97":1,"98":0,"101":1,"102":0,"105":1,"106":0,"107":0,"110":1,"111":0,"112":0,"115":1,"116":0,"117":0,"118":0,"120":0,"121":0,"123":0,"124":0,"125":0,"128":0,"130":0,"131":0,"135":0,"136":0,"137":0,"138":0,"140":0,"141":0,"145":0,"146":0,"147":0,"149":0,"150":0,"151":0,"154":0,"155":0,"156":0,"160":0,"163":0,"164":0,"166":0,"167":0,"169":0,"170":0,"171":0,"175":0,"177":0,"178":0,"182":0,"183":0,"184":0,"185":0,"189":0,"192":1,"193":0,"196":0,"197":0,"200":0,"201":0,"202":0,"206":0,"207":0,"209":0,"212":0,"216":1,"217":0,"218":0,"219":0,"222":0,"236":0,"237":0,"238":0,"239":0,"240":0,"242":0,"243":0,"246":0,"247":0,"262":0,"263":0,"265":0,"266":0,"267":0,"268":0,"269":0,"271":0,"272":0,"275":0,"278":0,"281":0,"282":0,"285":0,"288":0,"290":0,"291":0,"295":0,"296":0,"297":0,"298":0,"299":0,"300":0,"304":0,"305":0,"306":0,"307":0,"308":0,"313":0,"317":0,"318":0,"320":0,"323":0,"325":0,"326":0,"327":0,"328":0,"329":0,"331":0,"333":0,"337":0,"342":0,"343":0,"348":0,"349":0,"350":0,"351":0,"353":0,"354":0,"355":0,"360":0,"362":0,"364":0,"365":0,"367":0,"369":0,"370":0,"374":0,"378":0,"379":0,"380":0,"388":0,"389":0,"390":0,"394":0,"395":0,"399":0,"400":0,"404":0,"405":0,"408":0,"409":0,"417":0,"418":0,"420":0,"421":0,"423":0,"424":0,"425":0,"426":0,"427":0,"428":0,"429":0,"430":0,"435":0,"443":0,"444":0,"445":0,"447":0,"457":0,"458":0,"459":0,"461":0,"462":0,"464":0,"467":0,"468":0,"470":0,"471":0,"472":0,"473":0,"474":0,"477":0,"481":0,"483":0,"484":0,"485":0,"487":0,"499":0,"500":0,"501":0,"503":0,"504":0,"506":0,"510":0,"511":0,"513":0,"514":0,"515":0,"516":0,"517":0,"520":0,"524":0,"526":0,"527":0,"528":0,"530":0,"531":0,"534":0,"547":1,"550":0,"551":0,"552":0,"553":0,"559":0,"560":0,"561":0,"562":0,"563":0,"564":0,"565":0,"566":0,"568":0,"577":0,"588":0,"589":0,"598":0,"600":0,"601":0,"604":0,"605":0,"609":0,"610":0,"611":0,"614":0,"625":0,"627":0,"628":0,"629":0,"632":0,"641":0,"642":0,"651":0,"652":0,"654":0,"656":0,"660":0,"662":0,"663":0,"664":0,"666":0,"670":0,"671":0,"672":0,"673":0,"676":0,"680":0,"682":0,"691":0,"692":0,"694":0,"696":0,"700":0,"702":0,"703":0,"704":0,"706":0,"707":0,"711":0,"712":0,"713":0,"714":0,"717":0,"721":0,"723":0,"732":0,"733":0,"735":0,"737":0,"741":0,"742":0,"745":0,"746":0,"755":0,"759":0,"761":0,"769":0,"770":0,"771":0,"774":0,"785":0,"788":0,"789":0,"791":0,"792":0,"793":0,"797":0,"806":0,"807":0,"808":0,"809":0,"811":0,"812":0,"813":0,"815":0,"816":0,"819":0,"820":0,"821":0,"822":0,"824":0,"825":0,"826":0,"828":0,"829":0,"831":0,"832":0,"833":0,"834":0,"835":0,"838":0,"849":0,"850":0,"859":0,"860":0,"861":0,"863":0,"866":0,"867":0,"870":0,"879":0,"880":0,"889":0,"890":0,"905":0,"906":0,"907":0,"908":0,"916":0,"922":0,"924":0,"925":0,"928":0,"931":0,"932":0,"933":0,"934":0,"935":0,"939":0,"941":0,"944":0,"945":0,"947":0,"948":0,"951":0,"952":0,"953":0,"954":0,"964":0,"965":0,"966":0,"967":0,"968":0,"969":0,"976":0,"982":0,"984":0,"989":0,"992":0,"994":0,"996":0,"1001":0,"1002":0,"1003":0,"1004":0,"1005":0,"1006":0,"1013":0,"1019":0,"1021":0,"1023":0,"1031":0,"1034":0,"1036":0,"1037":0,"1038":0,"1039":0,"1041":0,"1042":0,"1043":0,"1044":0,"1045":0,"1046":0,"1049":0,"1050":0,"1054":0,"1055":0,"1056":0,"1057":0,"1058":0,"1059":0,"1060":0,"1064":0,"1065":0,"1071":0,"1072":0,"1075":0,"1076":0,"1078":0,"1079":0,"1082":0,"1083":0,"1084":0,"1086":0,"1088":0,"1100":0,"1103":0,"1106":0,"1107":0,"1108":0,"1110":0,"1111":0,"1114":0,"1115":0,"1116":0,"1117":0,"1119":0,"1120":0,"1128":0,"1131":0,"1133":0,"1138":0,"1139":0,"1140":0,"1141":0,"1142":0,"1144":0,"1145":0,"1147":0,"1149":0,"1158":0,"1159":0,"1160":0,"1162":0,"1163":0,"1174":0,"1175":0,"1176":0,"1177":0,"1178":0,"1180":0,"1181":0,"1182":0,"1183":0,"1184":0,"1185":0,"1186":0,"1187":0,"1188":0,"1190":0,"1193":0,"1197":0,"1198":0,"1204":0,"1220":0,"1222":0,"1223":0,"1224":0,"1225":0,"1226":0,"1228":0,"1229":0,"1230":0,"1231":0,"1233":0,"1235":0,"1238":0,"1389":0,"1390":0,"1391":0,"1392":0,"1395":0,"1396":0,"1397":0,"1417":0,"1419":0,"1500":0,"1501":0,"1504":0,"1506":0,"1508":0,"2695":0,"2796":1,"2797":0,"2798":0,"2799":0,"2800":0,"2801":0,"2802":0,"2803":0,"2804":0,"2807":0,"2808":0,"2809":0,"2810":0,"2811":0,"2812":0,"2817":0,"2820":0,"2821":0,"2822":0,"2831":0,"2863":0,"2864":0,"2865":0,"2866":0,"2867":0,"2871":0,"2872":0,"2873":0,"2874":0,"2875":0,"2876":0,"2877":0,"2878":0,"2885":0,"2888":0,"2894":0,"2895":0,"2896":0,"2899":0,"2907":0,"2908":0,"2909":0,"2910":0,"2919":0,"2921":0,"2925":0,"2929":0,"2933":0,"2945":0,"2946":0,"2947":0,"2950":0,"2954":0,"2955":0,"2956":0,"2960":0,"2961":0,"2962":0,"2963":0,"2964":0,"2965":0,"2966":0,"2969":0,"2970":0,"2974":1,"2975":0,"2976":0,"2978":0,"2979":0,"2982":0,"2983":0,"2986":0,"2987":0,"2989":0,"2991":0,"3014":0,"3016":0,"3017":0,"3021":0,"3022":0,"3023":0,"3024":0,"3026":0,"3027":0,"3028":0,"3035":0,"3036":0,"3037":0,"3038":0,"3041":0,"3059":0,"3061":0,"3062":0,"3065":0,"3066":0,"3070":0,"3071":0,"3076":0,"3078":0,"3079":0,"3080":0,"3081":0,"3082":0,"3083":0,"3084":0,"3086":0,"3087":0,"3088":0,"3091":0,"3092":0,"3093":0,"3094":0,"3095":0,"3098":0,"3101":0,"3102":0,"3103":0,"3104":0,"3109":0,"3110":0,"3111":0,"3114":0,"3115":0,"3118":0,"3119":0,"3122":0,"3123":0,"3124":0,"3125":0,"3127":0,"3132":0,"3133":0,"3135":0,"3136":0,"3137":0,"3139":0,"3142":0,"3143":0,"3144":0,"3149":0,"3150":0,"3151":0,"3153":0,"3154":0,"3155":0,"3157":0,"3166":0,"3174":0,"3183":0,"3184":0,"3185":0,"3186":0,"3187":0,"3188":0,"3189":0,"3190":0,"3193":0,"3194":0,"3195":0,"3199":0,"3200":0,"3202":0,"3203":0,"3204":0,"3206":0,"3211":0,"3215":0,"3217":0,"3218":0,"3219":0,"3220":0,"3221":0,"3222":0,"3225":0,"3226":0,"3229":0,"3232":0,"3233":0,"3237":0,"3238":0,"3239":0,"3240":0,"3242":0,"3245":1,"3246":1,"3247":1,"3248":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/utils/bignumber/constants.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/utils/bignumber/constants.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":1,"7":0,"8":1,"9":0,"10":1,"11":0},"b":{},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"(anonymous_1)","line":8,"loc":{"start":{"line":8,"column":20},"end":{"line":8,"column":41}}},"2":{"name":"(anonymous_2)","line":17,"loc":{"start":{"line":17,"column":22},"end":{"line":17,"column":43}}},"3":{"name":"(anonymous_3)","line":26,"loc":{"start":{"line":26,"column":21},"end":{"line":26,"column":42}}},"4":{"name":"(anonymous_4)","line":35,"loc":{"start":{"line":35,"column":22},"end":{"line":35,"column":43}}},"5":{"name":"hasher","line":47,"loc":{"start":{"line":47,"column":0},"end":{"line":47,"column":23}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":45}},"2":{"start":{"line":8,"column":0},"end":{"line":10,"column":11}},"3":{"start":{"line":9,"column":2},"end":{"line":9,"column":32}},"4":{"start":{"line":17,"column":0},"end":{"line":19,"column":11}},"5":{"start":{"line":18,"column":2},"end":{"line":18,"column":63}},"6":{"start":{"line":26,"column":0},"end":{"line":28,"column":11}},"7":{"start":{"line":27,"column":2},"end":{"line":27,"column":33}},"8":{"start":{"line":35,"column":0},"end":{"line":37,"column":11}},"9":{"start":{"line":36,"column":2},"end":{"line":36,"column":40}},"10":{"start":{"line":47,"column":0},"end":{"line":49,"column":1}},"11":{"start":{"line":48,"column":2},"end":{"line":48,"column":27}}},"branchMap":{},"code":["var memoize = require('../function').memoize;","","/**"," * Calculate BigNumber e"," * @param {function} BigNumber   BigNumber constructor"," * @returns {BigNumber} Returns e"," */","exports.e = memoize(function (BigNumber) {","  return new BigNumber(1).exp();","}, hasher);","","/**"," * Calculate BigNumber golden ratio, phi = (1+sqrt(5))/2"," * @param {function} BigNumber   BigNumber constructor"," * @returns {BigNumber} Returns phi"," */","exports.phi = memoize(function (BigNumber) {","  return new BigNumber(1).plus(new BigNumber(5).sqrt()).div(2);","}, hasher);","","/**"," * Calculate BigNumber pi."," * @param {function} BigNumber   BigNumber constructor"," * @returns {BigNumber} Returns pi"," */","exports.pi = memoize(function (BigNumber) {","  return pi = BigNumber.acos(-1);","}, hasher);","","/**"," * Calculate BigNumber tau, tau = 2 * pi"," * @param {function} BigNumber   BigNumber constructor"," * @returns {BigNumber} Returns tau"," */","exports.tau = memoize(function (BigNumber) {","  return exports.pi(BigNumber).times(2);","}, hasher);","","/**"," * Create a hash for a BigNumber constructor function. The created has is"," * the configured precision"," * @param {Array} args         Supposed to contain a single entry with"," *                             a BigNumber constructor"," * @return {number} precision"," * @private"," */","function hasher (args) {","  return args[0].precision;","}",""],"l":{"1":1,"8":1,"9":0,"17":1,"18":0,"26":1,"27":0,"35":1,"36":0,"47":1,"48":0}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/unit/function/unit.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/unit/function/unit.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1,"13":1},"b":{"1":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":31,"loc":{"start":{"line":31,"column":12},"end":{"line":31,"column":25}}},"3":{"name":"(anonymous_3)","line":35,"loc":{"start":{"line":35,"column":14},"end":{"line":35,"column":27}}},"4":{"name":"(anonymous_4)","line":43,"loc":{"start":{"line":43,"column":55},"end":{"line":43,"column":78}}},"5":{"name":"(anonymous_5)","line":47,"loc":{"start":{"line":47,"column":22},"end":{"line":47,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":59}},"2":{"start":{"line":5,"column":0},"end":{"line":58,"column":1}},"3":{"start":{"line":30,"column":2},"end":{"line":50,"column":5}},"4":{"start":{"line":32,"column":6},"end":{"line":32,"column":23}},"5":{"start":{"line":36,"column":6},"end":{"line":38,"column":7}},"6":{"start":{"line":37,"column":8},"end":{"line":37,"column":38}},"7":{"start":{"line":40,"column":6},"end":{"line":40,"column":32}},"8":{"start":{"line":44,"column":6},"end":{"line":44,"column":40}},"9":{"start":{"line":48,"column":6},"end":{"line":48,"column":30}},"10":{"start":{"line":52,"column":2},"end":{"line":55,"column":4}},"11":{"start":{"line":57,"column":2},"end":{"line":57,"column":14}},"12":{"start":{"line":60,"column":0},"end":{"line":60,"column":22}},"13":{"start":{"line":61,"column":0},"end":{"line":61,"column":26}}},"branchMap":{"1":{"line":36,"type":"if","locations":[{"start":{"line":36,"column":6},"end":{"line":36,"column":6}},{"start":{"line":36,"column":6},"end":{"line":36,"column":6}}]}},"code":["'use strict';","","var deepMap = require('../../../utils/collection/deepMap');","","function factory (type, config, load, typed) {","  /**","   * Create a unit. Depending on the passed arguments, the function","   * will create and return a new math.type.Unit object.","   * When a matrix is provided, all elements will be converted to units.","   *","   * Syntax:","   *","   *     math.unit(unit : string)","   *     math.unit(value : number, unit : string)","   *","   * Examples:","   *","   *    var a = math.unit(5, 'cm');    // returns Unit 50 mm","   *    var b = math.unit('23 kg');    // returns Unit 23 kg","   *    a.to('m');                     // returns Unit 0.05 m","   *","   * See also:","   *","   *    bignumber, boolean, complex, index, matrix, number, string, createUnit","   *","   * @param {* | Array | Matrix} args   A number and unit.","   * @return {Unit | Array | Matrix}    The created unit","   */","","  var unit = typed('unit', {","    'Unit': function (x) {","      return x.clone();","    },","","    'string': function (x) {","      if (type.Unit.isValuelessUnit(x)) {","        return new type.Unit(null, x); // a pure unit","      }","","      return type.Unit.parse(x); // a unit with value, like '5cm'","    },","","    'number | BigNumber | Fraction | Complex, string': function (value, unit) {","      return new type.Unit(value, unit);","    },","","    'Array | Matrix': function (x) {","      return deepMap(x, unit);","    }","  });","","  unit.toTex = {","    1: '\\\\left(${args[0]}\\\\right)',","    2: '\\\\left(\\\\left(${args[0]}\\\\right)${args[1]}\\\\right)'","  };","","  return unit;","}","","exports.name = 'unit';","exports.factory = factory;",""],"l":{"3":1,"5":1,"30":0,"32":0,"36":0,"37":0,"40":0,"44":0,"48":0,"52":0,"57":0,"60":1,"61":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/unit/function/createUnit.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/unit/function/createUnit.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1,"17":1},"b":{},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":50,"loc":{"start":{"line":50,"column":22},"end":{"line":50,"column":45}}},"3":{"name":"(anonymous_3)","line":55,"loc":{"start":{"line":55,"column":14},"end":{"line":55,"column":28}}},"4":{"name":"(anonymous_4)","line":60,"loc":{"start":{"line":60,"column":46},"end":{"line":60,"column":76}}},"5":{"name":"(anonymous_5)","line":67,"loc":{"start":{"line":67,"column":38},"end":{"line":67,"column":59}}},"6":{"name":"(anonymous_6)","line":74,"loc":{"start":{"line":74,"column":14},"end":{"line":74,"column":30}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":59}},"2":{"start":{"line":5,"column":0},"end":{"line":82,"column":1}},"3":{"start":{"line":47,"column":2},"end":{"line":79,"column":5}},"4":{"start":{"line":51,"column":6},"end":{"line":51,"column":48}},"5":{"start":{"line":56,"column":6},"end":{"line":56,"column":43}},"6":{"start":{"line":61,"column":6},"end":{"line":61,"column":19}},"7":{"start":{"line":62,"column":6},"end":{"line":62,"column":22}},"8":{"start":{"line":63,"column":6},"end":{"line":63,"column":48}},"9":{"start":{"line":68,"column":6},"end":{"line":68,"column":19}},"10":{"start":{"line":69,"column":6},"end":{"line":69,"column":22}},"11":{"start":{"line":70,"column":6},"end":{"line":70,"column":43}},"12":{"start":{"line":75,"column":6},"end":{"line":75,"column":19}},"13":{"start":{"line":76,"column":6},"end":{"line":76,"column":21}},"14":{"start":{"line":77,"column":6},"end":{"line":77,"column":43}},"15":{"start":{"line":81,"column":2},"end":{"line":81,"column":20}},"16":{"start":{"line":84,"column":0},"end":{"line":84,"column":28}},"17":{"start":{"line":85,"column":0},"end":{"line":85,"column":26}}},"branchMap":{},"code":["'use strict';","","var deepMap = require('../../../utils/collection/deepMap');","","function factory (type, config, load, typed) {","  /**","   * Create a user-defined unit and register it with the Unit type.","   *","   * Syntax:","   *","   *     math.createUnit({","   *       baseUnit1: {","   *         aliases: [string, ...]","   *         prefixes: object","   *       },","   *       unit2: {","   *         definition: string,","   *         aliases: [string, ...]","   *         prefixes: object,","   *         offset: number","   *       },","   *       unit3: string    // Shortcut","   *     })","   *","   *     // Another shortcut:","   *     math.createUnit(string, unit : string, [object])","   *","   * Examples: ","   *","   *     math.createUnit('foo');","   *     math.createUnit('knot', {definition: '0.514444444 m/s', aliases: ['knots', 'kt', 'kts']});","   *     math.createUnit('mph', '1 mile/hour');","   *","   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'","   * @param {string, Unit} definition      Definition of the unit in terms of existing units. For example, '0.514444444 m / s'.","   * @param {Object} options   (optional) An object containing any of the following properties:","   *     prefixes {string} \"none\", \"short\", \"long\", \"binary_short\", or \"binary_long\". The default is \"none\".","   *     aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']","   *     offset {Numeric} An offset to apply when converting from the unit. For example, the offset for celsius is 273.15. Default is 0.","   *","   * See also:","   *","   *     unit","   *","   * @return {Unit} The new unit","   */","  var createUnit = typed('createUnit', {","","    // General function signature. First parameter is an object where each property is the definition of a new unit. The object keys are the unit names and the values are the definitions. The values can be objects, strings, or Units. If a property is an empty object or an empty string, a new base unit is created. The second parameter is the options.","    'Object, Object': function(obj, options) {","      return type.Unit.createUnit(obj, options);","    },","","    // Same as above but without the options.","    'Object': function(obj) {","      return type.Unit.createUnit(obj, {});","    },","","    // Shortcut method for creating one unit.","    'string, Unit | string | Object, Object': function (name, def, options) {","      var obj = {};","      obj[name] = def;","      return type.Unit.createUnit(obj, options);","    },","","    // Same as above but without the options.","    'string, Unit | string | Object': function (name, def) {","      var obj = {};","      obj[name] = def;","      return type.Unit.createUnit(obj, {});","    },","","    // Without a definition, creates a base unit.","    'string': function (name) {","      var obj = {};","      obj[name] = {};","      return type.Unit.createUnit(obj, {});","    },","  });","","  return createUnit;","}","","exports.name = 'createUnit';","exports.factory = factory;",""],"l":{"3":1,"5":1,"47":0,"51":0,"56":0,"61":0,"62":0,"63":0,"68":0,"69":0,"70":0,"75":0,"76":0,"77":0,"81":0,"84":1,"85":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/unit/function/splitUnit.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/unit/function/splitUnit.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1,"7":1},"b":{},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":27,"loc":{"start":{"line":27,"column":19},"end":{"line":27,"column":41}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":59}},"2":{"start":{"line":5,"column":0},"end":{"line":34,"column":1}},"3":{"start":{"line":26,"column":2},"end":{"line":30,"column":5}},"4":{"start":{"line":28,"column":6},"end":{"line":28,"column":35}},"5":{"start":{"line":32,"column":2},"end":{"line":32,"column":19}},"6":{"start":{"line":36,"column":0},"end":{"line":36,"column":27}},"7":{"start":{"line":37,"column":0},"end":{"line":37,"column":26}}},"branchMap":{},"code":["'use strict';","","var deepMap = require('../../../utils/collection/deepMap');","","function factory (type, config, load, typed) {","","  /**","   * Split a unit in an array of units whose sum is equal to the original unit.","   *","   * Syntax:","   *","   *     splitUnit(unit: Unit, parts: Array.<Unit>)","   *","   * Example:","   *","   *     math.splitUnit(new Unit(1, 'm'), ['feet', 'inch']);","   *     // [ 3 feet, 3.3700787401575 inch ]","   *","   * See also:","   *","   *     unit","   *","   * @param {Array} [parts] An array of strings or valueless units.","   * @return {Array} An array of units.","   */","  var splitUnit = typed('splitUnit', {","    'Unit, Array': function(unit, parts) {","      return unit.splitUnit(parts);","    }","  });","","  return splitUnit;","","}","","exports.name = 'splitUnit';","exports.factory = factory;",""],"l":{"3":1,"5":1,"26":0,"28":0,"32":0,"36":1,"37":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/unit/physicalConstants.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/type/unit/physicalConstants.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":1,"8":0,"9":1,"10":0,"11":1,"12":0,"13":1,"14":0,"15":1,"16":0,"17":1,"18":0,"19":1,"20":0,"21":1,"22":0,"23":1,"24":0,"25":1,"26":0,"27":1,"28":0,"29":1,"30":0,"31":1,"32":0,"33":1,"34":0,"35":1,"36":0,"37":1,"38":0,"39":1,"40":0,"41":1,"42":0,"43":1,"44":0,"45":1,"46":0,"47":1,"48":0,"49":1,"50":0,"51":1,"52":0,"53":1,"54":0,"55":1,"56":0,"57":1,"58":0,"59":1,"60":0,"61":1,"62":0,"63":1,"64":0,"65":1,"66":0,"67":1,"68":0,"69":1,"70":0,"71":1,"72":0,"73":1,"74":0,"75":1,"76":0,"77":1,"78":0,"79":1,"80":0,"81":1,"82":0,"83":1,"84":0,"85":1,"86":0,"87":1,"88":0,"89":1,"90":0,"91":1,"92":0,"93":1,"94":0,"95":1,"96":0,"97":1,"98":0,"99":1,"100":0,"101":1,"102":0,"103":1,"104":0,"105":1,"106":0,"107":1,"108":1,"109":1},"b":{},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0},"fnMap":{"1":{"name":"factory","line":4,"loc":{"start":{"line":4,"column":0},"end":{"line":4,"column":51}}},"2":{"name":"fixedUnit","line":7,"loc":{"start":{"line":7,"column":2},"end":{"line":7,"column":26}}},"3":{"name":"(anonymous_3)","line":16,"loc":{"start":{"line":16,"column":37},"end":{"line":16,"column":49}}},"4":{"name":"(anonymous_4)","line":17,"loc":{"start":{"line":17,"column":37},"end":{"line":17,"column":49}}},"5":{"name":"(anonymous_5)","line":18,"loc":{"start":{"line":18,"column":37},"end":{"line":18,"column":49}}},"6":{"name":"(anonymous_6)","line":19,"loc":{"start":{"line":19,"column":37},"end":{"line":19,"column":49}}},"7":{"name":"(anonymous_7)","line":22,"loc":{"start":{"line":22,"column":42},"end":{"line":22,"column":54}}},"8":{"name":"(anonymous_8)","line":23,"loc":{"start":{"line":23,"column":42},"end":{"line":23,"column":54}}},"9":{"name":"(anonymous_9)","line":24,"loc":{"start":{"line":24,"column":42},"end":{"line":24,"column":54}}},"10":{"name":"(anonymous_10)","line":25,"loc":{"start":{"line":25,"column":42},"end":{"line":25,"column":54}}},"11":{"name":"(anonymous_11)","line":26,"loc":{"start":{"line":26,"column":42},"end":{"line":26,"column":54}}},"12":{"name":"(anonymous_12)","line":27,"loc":{"start":{"line":27,"column":42},"end":{"line":27,"column":54}}},"13":{"name":"(anonymous_13)","line":28,"loc":{"start":{"line":28,"column":42},"end":{"line":28,"column":54}}},"14":{"name":"(anonymous_14)","line":29,"loc":{"start":{"line":29,"column":42},"end":{"line":29,"column":54}}},"15":{"name":"(anonymous_15)","line":30,"loc":{"start":{"line":30,"column":42},"end":{"line":30,"column":54}}},"16":{"name":"(anonymous_16)","line":31,"loc":{"start":{"line":31,"column":42},"end":{"line":31,"column":54}}},"17":{"name":"(anonymous_17)","line":32,"loc":{"start":{"line":32,"column":42},"end":{"line":32,"column":54}}},"18":{"name":"(anonymous_18)","line":36,"loc":{"start":{"line":36,"column":40},"end":{"line":36,"column":52}}},"19":{"name":"(anonymous_19)","line":37,"loc":{"start":{"line":37,"column":40},"end":{"line":37,"column":52}}},"20":{"name":"(anonymous_20)","line":38,"loc":{"start":{"line":38,"column":40},"end":{"line":38,"column":52}}},"21":{"name":"(anonymous_21)","line":39,"loc":{"start":{"line":39,"column":40},"end":{"line":39,"column":52}}},"22":{"name":"(anonymous_22)","line":40,"loc":{"start":{"line":40,"column":40},"end":{"line":40,"column":52}}},"23":{"name":"(anonymous_23)","line":41,"loc":{"start":{"line":41,"column":40},"end":{"line":41,"column":52}}},"24":{"name":"(anonymous_24)","line":42,"loc":{"start":{"line":42,"column":40},"end":{"line":42,"column":52}}},"25":{"name":"(anonymous_25)","line":43,"loc":{"start":{"line":43,"column":40},"end":{"line":43,"column":52}}},"26":{"name":"(anonymous_26)","line":44,"loc":{"start":{"line":44,"column":40},"end":{"line":44,"column":52}}},"27":{"name":"(anonymous_27)","line":45,"loc":{"start":{"line":45,"column":40},"end":{"line":45,"column":52}}},"28":{"name":"(anonymous_28)","line":46,"loc":{"start":{"line":46,"column":40},"end":{"line":46,"column":52}}},"29":{"name":"(anonymous_29)","line":47,"loc":{"start":{"line":47,"column":40},"end":{"line":47,"column":52}}},"30":{"name":"(anonymous_30)","line":48,"loc":{"start":{"line":48,"column":40},"end":{"line":48,"column":52}}},"31":{"name":"(anonymous_31)","line":49,"loc":{"start":{"line":49,"column":40},"end":{"line":49,"column":52}}},"32":{"name":"(anonymous_32)","line":52,"loc":{"start":{"line":52,"column":36},"end":{"line":52,"column":48}}},"33":{"name":"(anonymous_33)","line":53,"loc":{"start":{"line":53,"column":36},"end":{"line":53,"column":48}}},"34":{"name":"(anonymous_34)","line":54,"loc":{"start":{"line":54,"column":36},"end":{"line":54,"column":48}}},"35":{"name":"(anonymous_35)","line":55,"loc":{"start":{"line":55,"column":36},"end":{"line":55,"column":48}}},"36":{"name":"(anonymous_36)","line":56,"loc":{"start":{"line":56,"column":36},"end":{"line":56,"column":48}}},"37":{"name":"(anonymous_37)","line":58,"loc":{"start":{"line":58,"column":36},"end":{"line":58,"column":48}}},"38":{"name":"(anonymous_38)","line":59,"loc":{"start":{"line":59,"column":36},"end":{"line":59,"column":48}}},"39":{"name":"(anonymous_39)","line":60,"loc":{"start":{"line":60,"column":36},"end":{"line":60,"column":48}}},"40":{"name":"(anonymous_40)","line":61,"loc":{"start":{"line":61,"column":36},"end":{"line":61,"column":48}}},"41":{"name":"(anonymous_41)","line":62,"loc":{"start":{"line":62,"column":36},"end":{"line":62,"column":48}}},"42":{"name":"(anonymous_42)","line":63,"loc":{"start":{"line":63,"column":36},"end":{"line":63,"column":48}}},"43":{"name":"(anonymous_43)","line":64,"loc":{"start":{"line":64,"column":36},"end":{"line":64,"column":48}}},"44":{"name":"(anonymous_44)","line":65,"loc":{"start":{"line":65,"column":36},"end":{"line":65,"column":48}}},"45":{"name":"(anonymous_45)","line":68,"loc":{"start":{"line":68,"column":34},"end":{"line":68,"column":46}}},"46":{"name":"(anonymous_46)","line":69,"loc":{"start":{"line":69,"column":34},"end":{"line":69,"column":46}}},"47":{"name":"(anonymous_47)","line":70,"loc":{"start":{"line":70,"column":34},"end":{"line":70,"column":46}}},"48":{"name":"(anonymous_48)","line":74,"loc":{"start":{"line":74,"column":34},"end":{"line":74,"column":46}}},"49":{"name":"(anonymous_49)","line":75,"loc":{"start":{"line":75,"column":34},"end":{"line":75,"column":46}}},"50":{"name":"(anonymous_50)","line":76,"loc":{"start":{"line":76,"column":34},"end":{"line":76,"column":46}}},"51":{"name":"(anonymous_51)","line":77,"loc":{"start":{"line":77,"column":34},"end":{"line":77,"column":46}}},"52":{"name":"(anonymous_52)","line":78,"loc":{"start":{"line":78,"column":34},"end":{"line":78,"column":46}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":46}},"2":{"start":{"line":4,"column":0},"end":{"line":80,"column":1}},"3":{"start":{"line":7,"column":2},"end":{"line":11,"column":3}},"4":{"start":{"line":8,"column":4},"end":{"line":8,"column":36}},"5":{"start":{"line":9,"column":4},"end":{"line":9,"column":26}},"6":{"start":{"line":10,"column":4},"end":{"line":10,"column":16}},"7":{"start":{"line":16,"column":2},"end":{"line":16,"column":89}},"8":{"start":{"line":16,"column":50},"end":{"line":16,"column":86}},"9":{"start":{"line":17,"column":2},"end":{"line":17,"column":101}},"10":{"start":{"line":17,"column":50},"end":{"line":17,"column":98}},"11":{"start":{"line":18,"column":2},"end":{"line":18,"column":92}},"12":{"start":{"line":18,"column":50},"end":{"line":18,"column":89}},"13":{"start":{"line":19,"column":2},"end":{"line":19,"column":94}},"14":{"start":{"line":19,"column":50},"end":{"line":19,"column":91}},"15":{"start":{"line":22,"column":2},"end":{"line":22,"column":100}},"16":{"start":{"line":22,"column":55},"end":{"line":22,"column":97}},"17":{"start":{"line":23,"column":2},"end":{"line":23,"column":100}},"18":{"start":{"line":23,"column":55},"end":{"line":23,"column":97}},"19":{"start":{"line":24,"column":2},"end":{"line":24,"column":95}},"20":{"start":{"line":24,"column":55},"end":{"line":24,"column":92}},"21":{"start":{"line":25,"column":2},"end":{"line":25,"column":109}},"22":{"start":{"line":25,"column":55},"end":{"line":25,"column":106}},"23":{"start":{"line":26,"column":2},"end":{"line":26,"column":97}},"24":{"start":{"line":26,"column":55},"end":{"line":26,"column":94}},"25":{"start":{"line":27,"column":2},"end":{"line":27,"column":101}},"26":{"start":{"line":27,"column":55},"end":{"line":27,"column":98}},"27":{"start":{"line":28,"column":2},"end":{"line":28,"column":97}},"28":{"start":{"line":28,"column":55},"end":{"line":28,"column":94}},"29":{"start":{"line":29,"column":2},"end":{"line":29,"column":97}},"30":{"start":{"line":29,"column":55},"end":{"line":29,"column":94}},"31":{"start":{"line":30,"column":2},"end":{"line":30,"column":98}},"32":{"start":{"line":30,"column":55},"end":{"line":30,"column":95}},"33":{"start":{"line":31,"column":2},"end":{"line":31,"column":101}},"34":{"start":{"line":31,"column":55},"end":{"line":31,"column":98}},"35":{"start":{"line":32,"column":2},"end":{"line":32,"column":97}},"36":{"start":{"line":32,"column":55},"end":{"line":32,"column":94}},"37":{"start":{"line":36,"column":2},"end":{"line":36,"column":96}},"38":{"start":{"line":36,"column":53},"end":{"line":36,"column":93}},"39":{"start":{"line":37,"column":2},"end":{"line":37,"column":96}},"40":{"start":{"line":37,"column":53},"end":{"line":37,"column":93}},"41":{"start":{"line":38,"column":2},"end":{"line":38,"column":95}},"42":{"start":{"line":38,"column":53},"end":{"line":38,"column":92}},"43":{"start":{"line":39,"column":2},"end":{"line":39,"column":95}},"44":{"start":{"line":39,"column":53},"end":{"line":39,"column":92}},"45":{"start":{"line":40,"column":2},"end":{"line":40,"column":80}},"46":{"start":{"line":40,"column":53},"end":{"line":40,"column":77}},"47":{"start":{"line":41,"column":2},"end":{"line":41,"column":94}},"48":{"start":{"line":41,"column":53},"end":{"line":41,"column":91}},"49":{"start":{"line":42,"column":2},"end":{"line":42,"column":96}},"50":{"start":{"line":42,"column":53},"end":{"line":42,"column":93}},"51":{"start":{"line":43,"column":2},"end":{"line":43,"column":95}},"52":{"start":{"line":43,"column":53},"end":{"line":43,"column":92}},"53":{"start":{"line":44,"column":2},"end":{"line":44,"column":95}},"54":{"start":{"line":44,"column":53},"end":{"line":44,"column":92}},"55":{"start":{"line":45,"column":2},"end":{"line":45,"column":102}},"56":{"start":{"line":45,"column":53},"end":{"line":45,"column":99}},"57":{"start":{"line":46,"column":2},"end":{"line":46,"column":98}},"58":{"start":{"line":46,"column":53},"end":{"line":46,"column":95}},"59":{"start":{"line":47,"column":2},"end":{"line":47,"column":97}},"60":{"start":{"line":47,"column":53},"end":{"line":47,"column":94}},"61":{"start":{"line":48,"column":2},"end":{"line":48,"column":71}},"62":{"start":{"line":48,"column":53},"end":{"line":48,"column":68}},"63":{"start":{"line":49,"column":2},"end":{"line":49,"column":67}},"64":{"start":{"line":49,"column":53},"end":{"line":49,"column":64}},"65":{"start":{"line":52,"column":2},"end":{"line":52,"column":92}},"66":{"start":{"line":52,"column":49},"end":{"line":52,"column":89}},"67":{"start":{"line":53,"column":2},"end":{"line":53,"column":94}},"68":{"start":{"line":53,"column":49},"end":{"line":53,"column":91}},"69":{"start":{"line":54,"column":2},"end":{"line":54,"column":94}},"70":{"start":{"line":54,"column":49},"end":{"line":54,"column":91}},"71":{"start":{"line":55,"column":2},"end":{"line":55,"column":93}},"72":{"start":{"line":55,"column":49},"end":{"line":55,"column":90}},"73":{"start":{"line":56,"column":2},"end":{"line":56,"column":94}},"74":{"start":{"line":56,"column":49},"end":{"line":56,"column":91}},"75":{"start":{"line":58,"column":2},"end":{"line":58,"column":91}},"76":{"start":{"line":58,"column":49},"end":{"line":58,"column":88}},"77":{"start":{"line":59,"column":2},"end":{"line":59,"column":97}},"78":{"start":{"line":59,"column":49},"end":{"line":59,"column":94}},"79":{"start":{"line":60,"column":2},"end":{"line":60,"column":101}},"80":{"start":{"line":60,"column":49},"end":{"line":60,"column":98}},"81":{"start":{"line":61,"column":2},"end":{"line":61,"column":98}},"82":{"start":{"line":61,"column":49},"end":{"line":61,"column":95}},"83":{"start":{"line":62,"column":2},"end":{"line":62,"column":71}},"84":{"start":{"line":62,"column":49},"end":{"line":62,"column":68}},"85":{"start":{"line":63,"column":2},"end":{"line":63,"column":90}},"86":{"start":{"line":63,"column":49},"end":{"line":63,"column":87}},"87":{"start":{"line":64,"column":2},"end":{"line":64,"column":97}},"88":{"start":{"line":64,"column":49},"end":{"line":64,"column":94}},"89":{"start":{"line":65,"column":2},"end":{"line":65,"column":90}},"90":{"start":{"line":65,"column":49},"end":{"line":65,"column":87}},"91":{"start":{"line":68,"column":2},"end":{"line":68,"column":84}},"92":{"start":{"line":68,"column":47},"end":{"line":68,"column":81}},"93":{"start":{"line":69,"column":2},"end":{"line":69,"column":86}},"94":{"start":{"line":69,"column":47},"end":{"line":69,"column":83}},"95":{"start":{"line":70,"column":2},"end":{"line":70,"column":84}},"96":{"start":{"line":70,"column":47},"end":{"line":70,"column":81}},"97":{"start":{"line":74,"column":2},"end":{"line":74,"column":86}},"98":{"start":{"line":74,"column":47},"end":{"line":74,"column":83}},"99":{"start":{"line":75,"column":2},"end":{"line":75,"column":85}},"100":{"start":{"line":75,"column":47},"end":{"line":75,"column":82}},"101":{"start":{"line":76,"column":2},"end":{"line":76,"column":85}},"102":{"start":{"line":76,"column":47},"end":{"line":76,"column":82}},"103":{"start":{"line":77,"column":2},"end":{"line":77,"column":89}},"104":{"start":{"line":77,"column":47},"end":{"line":77,"column":86}},"105":{"start":{"line":78,"column":2},"end":{"line":78,"column":86}},"106":{"start":{"line":78,"column":47},"end":{"line":78,"column":83}},"107":{"start":{"line":82,"column":0},"end":{"line":82,"column":26}},"108":{"start":{"line":83,"column":0},"end":{"line":83,"column":21}},"109":{"start":{"line":84,"column":0},"end":{"line":84,"column":20}}},"branchMap":{},"code":["var lazy = require('../../utils/object').lazy;","","","function factory (type, config, load, typed, math) {","","  // helper function to create a unit with a fixed prefix","  function fixedUnit(str) {","    var unit = type.Unit.parse(str);","    unit.fixPrefix = true;","    return unit;","  }","","  // Source: http://www.wikiwand.com/en/Physical_constant","","  // Universal constants","  lazy(math, 'speedOfLight',         function () {return fixedUnit('299792458 m s^-1')});","  lazy(math, 'gravitationConstant',  function () {return fixedUnit('6.6738480e-11 m^3 kg^-1 s^-2')});","  lazy(math, 'planckConstant',       function () {return fixedUnit('6.626069311e-34 J s')});","  lazy(math, 'reducedPlanckConstant',function () {return fixedUnit('1.05457172647e-34 J s')});","","  // Electromagnetic constants","  lazy(math, 'magneticConstant',          function () {return fixedUnit('1.2566370614e-6 N A^-2')});","  lazy(math, 'electricConstant',          function () {return fixedUnit('8.854187817e-12 F m^-1')});","  lazy(math, 'vacuumImpedance',           function () {return fixedUnit('376.730313461 ohm')});","  lazy(math, 'coulomb',                   function () {return fixedUnit('8.9875517873681764e9 N m^2 C^-2')});","  lazy(math, 'elementaryCharge',          function () {return fixedUnit('1.60217656535e-19 C')});","  lazy(math, 'bohrMagneton',              function () {return fixedUnit('9.2740096820e-24 J T^-1')});","  lazy(math, 'conductanceQuantum',        function () {return fixedUnit('7.748091734625e-5 S')});","  lazy(math, 'inverseConductanceQuantum', function () {return fixedUnit('12906.403721742 ohm')});","  lazy(math, 'magneticFluxQuantum',       function () {return fixedUnit('2.06783375846e-15 Wb')});","  lazy(math, 'nuclearMagneton',           function () {return fixedUnit('5.0507835311e-27 J T^-1')});","  lazy(math, 'klitzing',                  function () {return fixedUnit('25812.807443484 ohm')});","  //lazy(math, 'josephson',                 function () {return fixedUnit('4.8359787011e-14 Hz V^-1')});  // TODO: support for Hz needed","","  // Atomic and nuclear constants","  lazy(math, 'bohrRadius',              function () {return fixedUnit('5.291772109217e-11 m')});","  lazy(math, 'classicalElectronRadius', function () {return fixedUnit('2.817940326727e-15 m')});","  lazy(math, 'electronMass',            function () {return fixedUnit('9.1093829140e-31 kg')});","  lazy(math, 'fermiCoupling',           function () {return fixedUnit('1.1663645e-5 GeV^-2')});","  lazy(math, 'fineStructure',           function () {return 7.297352569824e-3});","  lazy(math, 'hartreeEnergy',           function () {return fixedUnit('4.3597443419e-18 J')});","  lazy(math, 'protonMass',              function () {return fixedUnit('1.67262177774e-27 kg')});","  lazy(math, 'deuteronMass',            function () {return fixedUnit('3.3435830926e-27 kg')});","  lazy(math, 'neutronMass',             function () {return fixedUnit('1.6749271613e-27 kg')});","  lazy(math, 'quantumOfCirculation',    function () {return fixedUnit('3.636947552024e-4 m^2 s^-1')});","  lazy(math, 'rydberg',                 function () {return fixedUnit('10973731.56853955 m^-1')});","  lazy(math, 'thomsonCrossSection',     function () {return fixedUnit('6.65245873413e-29 m^2')});","  lazy(math, 'weakMixingAngle',         function () {return 0.222321});","  lazy(math, 'efimovFactor',            function () {return 22.7});","","  // Physico-chemical constants","  lazy(math, 'atomicMass',          function () {return fixedUnit('1.66053892173e-27 kg')});","  lazy(math, 'avogadro',            function () {return fixedUnit('6.0221412927e23 mol^-1')});","  lazy(math, 'boltzmann',           function () {return fixedUnit('1.380648813e-23 J K^-1')});","  lazy(math, 'faraday',             function () {return fixedUnit('96485.336521 C mol^-1')});","  lazy(math, 'firstRadiation',      function () {return fixedUnit('3.7417715317e-16 W m^2')});","  // lazy(math, 'spectralRadiance',   function () {return fixedUnit('1.19104286953e-16 W m^2 sr^-1')}); // TODO spectralRadiance","  lazy(math, 'loschmidt',           function () {return fixedUnit('2.686780524e25 m^-3')});","  lazy(math, 'gasConstant',         function () {return fixedUnit('8.314462175 J K^-1 mol^-1')});","  lazy(math, 'molarPlanckConstant', function () {return fixedUnit('3.990312717628e-10 J s mol^-1')});","  lazy(math, 'molarVolume',         function () {return fixedUnit('2.241396820e-10 m^3 mol^-1')});","  lazy(math, 'sackurTetrode',       function () {return -1.164870823});","  lazy(math, 'secondRadiation',     function () {return fixedUnit('1.438777013e-2 m K')});","  lazy(math, 'stefanBoltzmann',     function () {return fixedUnit('5.67037321e-8 W m^-2 K^-4')});","  lazy(math, 'wienDisplacement',    function () {return fixedUnit('2.897772126e-3 m K')});","","  // Adopted values","  lazy(math, 'molarMass',         function () {return fixedUnit('1e-3 kg mol^-1')});","  lazy(math, 'molarMassC12',      function () {return fixedUnit('1.2e-2 kg mol^-1')});","  lazy(math, 'gravity',           function () {return fixedUnit('9.80665 m s^-2')});","  // atm is defined in Unit.js","","  // Natural units","  lazy(math, 'planckLength',      function () {return fixedUnit('1.61619997e-35 m')});","  lazy(math, 'planckMass',        function () {return fixedUnit('2.1765113e-8 kg')});","  lazy(math, 'planckTime',        function () {return fixedUnit('5.3910632e-44 s')});","  lazy(math, 'planckCharge',      function () {return fixedUnit('1.87554595641e-18 C')});","  lazy(math, 'planckTemperature', function () {return fixedUnit('1.41683385e+32 K')});","","}","","exports.factory = factory;","exports.lazy = false;  // no lazy loading of constants, the constants themselves are lazy when needed","exports.math = true;   // request access to the math namespace",""],"l":{"1":1,"4":1,"7":1,"8":0,"9":0,"10":0,"16":1,"17":1,"18":1,"19":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"52":1,"53":1,"54":1,"55":1,"56":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"68":1,"69":1,"70":1,"74":1,"75":1,"76":1,"77":1,"78":1,"82":1,"83":1,"84":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/constants.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/constants.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":1,"8":1,"9":1,"10":1,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":20,"56":20,"57":1,"58":0,"59":0,"60":1,"61":1,"62":1},"b":{"1":[0,0],"2":[0,1]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":20,"16":0},"fnMap":{"1":{"name":"factory","line":6,"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":51}}},"2":{"name":"(anonymous_2)","line":9,"loc":{"start":{"line":9,"column":20},"end":{"line":9,"column":42}}},"3":{"name":"(anonymous_3)","line":24,"loc":{"start":{"line":24,"column":33},"end":{"line":24,"column":45}}},"4":{"name":"(anonymous_4)","line":25,"loc":{"start":{"line":25,"column":33},"end":{"line":25,"column":45}}},"5":{"name":"(anonymous_5)","line":26,"loc":{"start":{"line":26,"column":33},"end":{"line":26,"column":45}}},"6":{"name":"(anonymous_6)","line":27,"loc":{"start":{"line":27,"column":33},"end":{"line":27,"column":45}}},"7":{"name":"(anonymous_7)","line":30,"loc":{"start":{"line":30,"column":37},"end":{"line":30,"column":49}}},"8":{"name":"(anonymous_8)","line":31,"loc":{"start":{"line":31,"column":37},"end":{"line":31,"column":49}}},"9":{"name":"(anonymous_9)","line":32,"loc":{"start":{"line":32,"column":37},"end":{"line":32,"column":49}}},"10":{"name":"(anonymous_10)","line":33,"loc":{"start":{"line":33,"column":37},"end":{"line":33,"column":49}}},"11":{"name":"(anonymous_11)","line":34,"loc":{"start":{"line":34,"column":37},"end":{"line":34,"column":49}}},"12":{"name":"(anonymous_12)","line":35,"loc":{"start":{"line":35,"column":37},"end":{"line":35,"column":49}}},"13":{"name":"(anonymous_13)","line":36,"loc":{"start":{"line":36,"column":37},"end":{"line":36,"column":49}}},"14":{"name":"(anonymous_14)","line":37,"loc":{"start":{"line":37,"column":37},"end":{"line":37,"column":49}}},"15":{"name":"setConstant","line":67,"loc":{"start":{"line":67,"column":0},"end":{"line":67,"column":40}}},"16":{"name":"setLazyConstant","line":73,"loc":{"start":{"line":73,"column":0},"end":{"line":73,"column":48}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":39}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":58}},"3":{"start":{"line":6,"column":0},"end":{"line":64,"column":1}},"4":{"start":{"line":9,"column":2},"end":{"line":13,"column":5}},"5":{"start":{"line":10,"column":4},"end":{"line":12,"column":5}},"6":{"start":{"line":11,"column":6},"end":{"line":11,"column":47}},"7":{"start":{"line":15,"column":2},"end":{"line":15,"column":34}},"8":{"start":{"line":16,"column":2},"end":{"line":16,"column":36}},"9":{"start":{"line":17,"column":2},"end":{"line":17,"column":34}},"10":{"start":{"line":18,"column":2},"end":{"line":18,"column":77}},"11":{"start":{"line":20,"column":2},"end":{"line":57,"column":3}},"12":{"start":{"line":21,"column":4},"end":{"line":21,"column":64}},"13":{"start":{"line":22,"column":4},"end":{"line":22,"column":54}},"14":{"start":{"line":24,"column":4},"end":{"line":24,"column":87}},"15":{"start":{"line":24,"column":46},"end":{"line":24,"column":84}},"16":{"start":{"line":25,"column":4},"end":{"line":25,"column":88}},"17":{"start":{"line":25,"column":46},"end":{"line":25,"column":85}},"18":{"start":{"line":26,"column":4},"end":{"line":26,"column":86}},"19":{"start":{"line":26,"column":46},"end":{"line":26,"column":83}},"20":{"start":{"line":27,"column":4},"end":{"line":27,"column":88}},"21":{"start":{"line":27,"column":46},"end":{"line":27,"column":85}},"22":{"start":{"line":30,"column":4},"end":{"line":30,"column":67}},"23":{"start":{"line":30,"column":50},"end":{"line":30,"column":64}},"24":{"start":{"line":31,"column":4},"end":{"line":31,"column":87}},"25":{"start":{"line":31,"column":50},"end":{"line":31,"column":84}},"26":{"start":{"line":32,"column":4},"end":{"line":32,"column":87}},"27":{"start":{"line":32,"column":50},"end":{"line":32,"column":84}},"28":{"start":{"line":33,"column":4},"end":{"line":33,"column":114}},"29":{"start":{"line":33,"column":50},"end":{"line":33,"column":111}},"30":{"start":{"line":34,"column":4},"end":{"line":34,"column":114}},"31":{"start":{"line":34,"column":50},"end":{"line":34,"column":111}},"32":{"start":{"line":35,"column":4},"end":{"line":35,"column":67}},"33":{"start":{"line":35,"column":50},"end":{"line":35,"column":64}},"34":{"start":{"line":36,"column":4},"end":{"line":36,"column":92}},"35":{"start":{"line":36,"column":50},"end":{"line":36,"column":89}},"36":{"start":{"line":37,"column":4},"end":{"line":37,"column":88}},"37":{"start":{"line":37,"column":50},"end":{"line":37,"column":85}},"38":{"start":{"line":40,"column":4},"end":{"line":40,"column":44}},"39":{"start":{"line":41,"column":4},"end":{"line":41,"column":39}},"40":{"start":{"line":43,"column":4},"end":{"line":43,"column":38}},"41":{"start":{"line":44,"column":4},"end":{"line":44,"column":42}},"42":{"start":{"line":45,"column":4},"end":{"line":45,"column":37}},"43":{"start":{"line":46,"column":4},"end":{"line":46,"column":92}},"44":{"start":{"line":49,"column":4},"end":{"line":49,"column":45}},"45":{"start":{"line":50,"column":4},"end":{"line":50,"column":47}},"46":{"start":{"line":51,"column":4},"end":{"line":51,"column":48}},"47":{"start":{"line":52,"column":4},"end":{"line":52,"column":49}},"48":{"start":{"line":53,"column":4},"end":{"line":53,"column":50}},"49":{"start":{"line":54,"column":4},"end":{"line":54,"column":46}},"50":{"start":{"line":55,"column":4},"end":{"line":55,"column":51}},"51":{"start":{"line":56,"column":4},"end":{"line":56,"column":49}},"52":{"start":{"line":60,"column":2},"end":{"line":60,"column":41}},"53":{"start":{"line":63,"column":2},"end":{"line":63,"column":53}},"54":{"start":{"line":67,"column":0},"end":{"line":70,"column":1}},"55":{"start":{"line":68,"column":2},"end":{"line":68,"column":21}},"56":{"start":{"line":69,"column":2},"end":{"line":69,"column":50}},"57":{"start":{"line":73,"column":0},"end":{"line":76,"column":1}},"58":{"start":{"line":74,"column":2},"end":{"line":74,"column":37}},"59":{"start":{"line":75,"column":2},"end":{"line":75,"column":66}},"60":{"start":{"line":78,"column":0},"end":{"line":78,"column":26}},"61":{"start":{"line":79,"column":0},"end":{"line":79,"column":21}},"62":{"start":{"line":80,"column":0},"end":{"line":80,"column":20}}},"branchMap":{"1":{"line":10,"type":"if","locations":[{"start":{"line":10,"column":4},"end":{"line":10,"column":4}},{"start":{"line":10,"column":4},"end":{"line":10,"column":4}}]},"2":{"line":20,"type":"if","locations":[{"start":{"line":20,"column":2},"end":{"line":20,"column":2}},{"start":{"line":20,"column":2},"end":{"line":20,"column":2}}]}},"code":["'use strict';","","var object = require('./utils/object');","var bigConstants = require('./utils/bignumber/constants');","","function factory (type, config, load, typed, math) {","  // listen for changed in the configuration, automatically reload","  // constants when needed","  math.on('config', function (curr, prev) {","    if (curr.number !== prev.number) {","      factory(type, config, load, typed, math);","    }","  });","","  setConstant(math, 'true', true);","  setConstant(math, 'false', false);","  setConstant(math, 'null', null);","  setConstant(math, 'uninitialized', require('./utils/array').UNINITIALIZED);","","  if (config.number === 'BigNumber') {","    setConstant(math, 'Infinity', new type.BigNumber(Infinity));","    setConstant(math, 'NaN', new type.BigNumber(NaN));","","    setLazyConstant(math, 'pi',  function () {return bigConstants.pi(type.BigNumber)});","    setLazyConstant(math, 'tau', function () {return bigConstants.tau(type.BigNumber)});","    setLazyConstant(math, 'e',   function () {return bigConstants.e(type.BigNumber)});","    setLazyConstant(math, 'phi', function () {return bigConstants.phi(type.BigNumber)}); // golden ratio, (1+sqrt(5))/2","","    // uppercase constants (for compatibility with built-in Math)","    setLazyConstant(math, 'E',       function () {return math.e;});","    setLazyConstant(math, 'LN2',     function () {return new type.BigNumber(2).ln();});","    setLazyConstant(math, 'LN10',    function () {return new type.BigNumber(10).ln()});","    setLazyConstant(math, 'LOG2E',   function () {return new type.BigNumber(1).div(new type.BigNumber(2).ln());});","    setLazyConstant(math, 'LOG10E',  function () {return new type.BigNumber(1).div(new type.BigNumber(10).ln())});","    setLazyConstant(math, 'PI',      function () {return math.pi});","    setLazyConstant(math, 'SQRT1_2', function () {return new type.BigNumber('0.5').sqrt()});","    setLazyConstant(math, 'SQRT2',   function () {return new type.BigNumber(2).sqrt()});","  }","  else {","    setConstant(math, 'Infinity', Infinity);","    setConstant(math, 'NaN',      NaN);","","    setConstant(math, 'pi',  Math.PI);","    setConstant(math, 'tau', Math.PI * 2);","    setConstant(math, 'e',   Math.E);","    setConstant(math, 'phi', 1.61803398874989484820458683436563811772030917980576286213545); // golden ratio, (1+sqrt(5))/2","","    // uppercase constants (for compatibility with built-in Math)","    setConstant(math, 'E',           math.e);","    setConstant(math, 'LN2',         Math.LN2);","    setConstant(math, 'LN10',        Math.LN10);","    setConstant(math, 'LOG2E',       Math.LOG2E);","    setConstant(math, 'LOG10E',      Math.LOG10E);","    setConstant(math, 'PI',          math.pi);","    setConstant(math, 'SQRT1_2',     Math.SQRT1_2);","    setConstant(math, 'SQRT2',       Math.SQRT2);","  }","","  // complex i","  setConstant(math, 'i', type.Complex.I);","","  // meta information","  setConstant(math, 'version', require('./version'));","}","","// create a constant in both math and mathWithTransform","function setConstant(math, name, value) {","  math[name] = value;","  math.expression.mathWithTransform[name] = value;","}","","// create a lazy constant in both math and mathWithTransform","function setLazyConstant (math, name, resolver) {","  object.lazy(math, name,  resolver);","  object.lazy(math.expression.mathWithTransform, name,  resolver);","}","","exports.factory = factory;","exports.lazy = false;  // no lazy loading of constants, the constants themselves are lazy when needed","exports.math = true;   // request access to the math namespace"],"l":{"3":1,"4":1,"6":1,"9":1,"10":0,"11":0,"15":1,"16":1,"17":1,"18":1,"20":1,"21":0,"22":0,"24":0,"25":0,"26":0,"27":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"40":1,"41":1,"43":1,"44":1,"45":1,"46":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"60":1,"63":1,"67":1,"68":20,"69":20,"73":1,"74":0,"75":0,"78":1,"79":1,"80":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/index.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":10,"column":2}}},"branchMap":{},"code":["module.exports = [","  require('./docs'),","  require('./function'),","  require('./node'),","  require('./transform'),","","  require('./Help'),","  require('./parse'),","  require('./Parser')","];",""],"l":{"1":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/docs/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/docs/index.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":1,"238":1,"239":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"factory","line":1,"loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":53}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":289,"column":1}},"2":{"start":{"line":2,"column":2},"end":{"line":2,"column":16}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":55}},"4":{"start":{"line":7,"column":2},"end":{"line":7,"column":54}},"5":{"start":{"line":8,"column":2},"end":{"line":8,"column":51}},"6":{"start":{"line":9,"column":2},"end":{"line":9,"column":57}},"7":{"start":{"line":10,"column":2},"end":{"line":10,"column":53}},"8":{"start":{"line":11,"column":2},"end":{"line":11,"column":47}},"9":{"start":{"line":12,"column":2},"end":{"line":12,"column":49}},"10":{"start":{"line":13,"column":2},"end":{"line":13,"column":49}},"11":{"start":{"line":14,"column":2},"end":{"line":14,"column":49}},"12":{"start":{"line":15,"column":2},"end":{"line":15,"column":55}},"13":{"start":{"line":16,"column":2},"end":{"line":16,"column":49}},"14":{"start":{"line":17,"column":2},"end":{"line":17,"column":45}},"15":{"start":{"line":20,"column":2},"end":{"line":20,"column":36}},"16":{"start":{"line":21,"column":2},"end":{"line":21,"column":36}},"17":{"start":{"line":22,"column":2},"end":{"line":22,"column":47}},"18":{"start":{"line":23,"column":2},"end":{"line":23,"column":36}},"19":{"start":{"line":24,"column":2},"end":{"line":24,"column":53}},"20":{"start":{"line":25,"column":2},"end":{"line":25,"column":40}},"21":{"start":{"line":26,"column":2},"end":{"line":26,"column":42}},"22":{"start":{"line":27,"column":2},"end":{"line":27,"column":44}},"23":{"start":{"line":28,"column":2},"end":{"line":28,"column":46}},"24":{"start":{"line":29,"column":2},"end":{"line":29,"column":40}},"25":{"start":{"line":30,"column":2},"end":{"line":30,"column":45}},"26":{"start":{"line":31,"column":2},"end":{"line":31,"column":38}},"27":{"start":{"line":32,"column":2},"end":{"line":32,"column":38}},"28":{"start":{"line":33,"column":2},"end":{"line":33,"column":40}},"29":{"start":{"line":34,"column":2},"end":{"line":34,"column":48}},"30":{"start":{"line":35,"column":2},"end":{"line":35,"column":44}},"31":{"start":{"line":36,"column":2},"end":{"line":36,"column":40}},"32":{"start":{"line":37,"column":2},"end":{"line":37,"column":45}},"33":{"start":{"line":38,"column":2},"end":{"line":38,"column":48}},"34":{"start":{"line":42,"column":2},"end":{"line":42,"column":92}},"35":{"start":{"line":43,"column":2},"end":{"line":43,"column":115}},"36":{"start":{"line":44,"column":2},"end":{"line":44,"column":87}},"37":{"start":{"line":45,"column":2},"end":{"line":45,"column":109}},"38":{"start":{"line":47,"column":2},"end":{"line":47,"column":115}},"39":{"start":{"line":48,"column":2},"end":{"line":48,"column":115}},"40":{"start":{"line":49,"column":2},"end":{"line":49,"column":108}},"41":{"start":{"line":50,"column":2},"end":{"line":50,"column":77}},"42":{"start":{"line":51,"column":2},"end":{"line":51,"column":93}},"43":{"start":{"line":52,"column":2},"end":{"line":52,"column":81}},"44":{"start":{"line":53,"column":2},"end":{"line":53,"column":99}},"45":{"start":{"line":54,"column":2},"end":{"line":54,"column":121}},"46":{"start":{"line":56,"column":2},"end":{"line":56,"column":103}},"47":{"start":{"line":57,"column":2},"end":{"line":57,"column":90}},"48":{"start":{"line":58,"column":2},"end":{"line":58,"column":81}},"49":{"start":{"line":60,"column":2},"end":{"line":60,"column":75}},"50":{"start":{"line":61,"column":2},"end":{"line":61,"column":115}},"51":{"start":{"line":62,"column":2},"end":{"line":62,"column":81}},"52":{"start":{"line":63,"column":2},"end":{"line":63,"column":93}},"53":{"start":{"line":64,"column":2},"end":{"line":64,"column":93}},"54":{"start":{"line":65,"column":2},"end":{"line":65,"column":84}},"55":{"start":{"line":66,"column":2},"end":{"line":66,"column":75}},"56":{"start":{"line":67,"column":2},"end":{"line":67,"column":81}},"57":{"start":{"line":68,"column":2},"end":{"line":68,"column":78}},"58":{"start":{"line":69,"column":2},"end":{"line":69,"column":106}},"59":{"start":{"line":70,"column":2},"end":{"line":70,"column":74}},"60":{"start":{"line":71,"column":2},"end":{"line":71,"column":103}},"61":{"start":{"line":72,"column":2},"end":{"line":72,"column":91}},"62":{"start":{"line":73,"column":2},"end":{"line":73,"column":81}},"63":{"start":{"line":75,"column":2},"end":{"line":75,"column":84}},"64":{"start":{"line":76,"column":2},"end":{"line":76,"column":78}},"65":{"start":{"line":77,"column":2},"end":{"line":77,"column":80}},"66":{"start":{"line":78,"column":2},"end":{"line":78,"column":74}},"67":{"start":{"line":79,"column":2},"end":{"line":79,"column":96}},"68":{"start":{"line":80,"column":2},"end":{"line":80,"column":112}},"69":{"start":{"line":81,"column":2},"end":{"line":81,"column":78}},"70":{"start":{"line":82,"column":2},"end":{"line":82,"column":103}},"71":{"start":{"line":83,"column":2},"end":{"line":83,"column":126}},"72":{"start":{"line":84,"column":2},"end":{"line":84,"column":120}},"73":{"start":{"line":85,"column":2},"end":{"line":85,"column":99}},"74":{"start":{"line":86,"column":2},"end":{"line":86,"column":99}},"75":{"start":{"line":87,"column":2},"end":{"line":87,"column":106}},"76":{"start":{"line":90,"column":2},"end":{"line":90,"column":81}},"77":{"start":{"line":91,"column":2},"end":{"line":91,"column":100}},"78":{"start":{"line":92,"column":2},"end":{"line":92,"column":136}},"79":{"start":{"line":94,"column":2},"end":{"line":94,"column":81}},"80":{"start":{"line":95,"column":2},"end":{"line":95,"column":75}},"81":{"start":{"line":96,"column":2},"end":{"line":96,"column":75}},"82":{"start":{"line":97,"column":2},"end":{"line":97,"column":81}},"83":{"start":{"line":98,"column":2},"end":{"line":98,"column":96}},"84":{"start":{"line":101,"column":2},"end":{"line":101,"column":61}},"85":{"start":{"line":102,"column":2},"end":{"line":102,"column":53}},"86":{"start":{"line":103,"column":2},"end":{"line":103,"column":47}},"87":{"start":{"line":104,"column":2},"end":{"line":104,"column":55}},"88":{"start":{"line":105,"column":2},"end":{"line":105,"column":57}},"89":{"start":{"line":106,"column":2},"end":{"line":106,"column":47}},"90":{"start":{"line":107,"column":2},"end":{"line":107,"column":53}},"91":{"start":{"line":110,"column":2},"end":{"line":110,"column":50}},"92":{"start":{"line":111,"column":2},"end":{"line":111,"column":50}},"93":{"start":{"line":112,"column":2},"end":{"line":112,"column":52}},"94":{"start":{"line":113,"column":2},"end":{"line":113,"column":52}},"95":{"start":{"line":114,"column":2},"end":{"line":114,"column":52}},"96":{"start":{"line":115,"column":2},"end":{"line":115,"column":56}},"97":{"start":{"line":116,"column":2},"end":{"line":116,"column":62}},"98":{"start":{"line":117,"column":2},"end":{"line":117,"column":66}},"99":{"start":{"line":118,"column":2},"end":{"line":118,"column":56}},"100":{"start":{"line":119,"column":2},"end":{"line":119,"column":50}},"101":{"start":{"line":120,"column":2},"end":{"line":120,"column":50}},"102":{"start":{"line":121,"column":2},"end":{"line":121,"column":54}},"103":{"start":{"line":122,"column":2},"end":{"line":122,"column":50}},"104":{"start":{"line":123,"column":2},"end":{"line":123,"column":54}},"105":{"start":{"line":124,"column":2},"end":{"line":124,"column":50}},"106":{"start":{"line":125,"column":2},"end":{"line":125,"column":50}},"107":{"start":{"line":126,"column":2},"end":{"line":126,"column":54}},"108":{"start":{"line":127,"column":2},"end":{"line":127,"column":50}},"109":{"start":{"line":128,"column":2},"end":{"line":128,"column":60}},"110":{"start":{"line":129,"column":2},"end":{"line":129,"column":52}},"111":{"start":{"line":130,"column":2},"end":{"line":130,"column":58}},"112":{"start":{"line":131,"column":2},"end":{"line":131,"column":50}},"113":{"start":{"line":132,"column":2},"end":{"line":132,"column":54}},"114":{"start":{"line":133,"column":2},"end":{"line":133,"column":52}},"115":{"start":{"line":134,"column":2},"end":{"line":134,"column":52}},"116":{"start":{"line":135,"column":2},"end":{"line":135,"column":56}},"117":{"start":{"line":136,"column":2},"end":{"line":136,"column":60}},"118":{"start":{"line":137,"column":2},"end":{"line":137,"column":64}},"119":{"start":{"line":138,"column":2},"end":{"line":138,"column":62}},"120":{"start":{"line":139,"column":2},"end":{"line":139,"column":52}},"121":{"start":{"line":142,"column":2},"end":{"line":142,"column":53}},"122":{"start":{"line":143,"column":2},"end":{"line":143,"column":53}},"123":{"start":{"line":144,"column":2},"end":{"line":144,"column":51}},"124":{"start":{"line":145,"column":2},"end":{"line":145,"column":53}},"125":{"start":{"line":146,"column":2},"end":{"line":146,"column":59}},"126":{"start":{"line":147,"column":2},"end":{"line":147,"column":71}},"127":{"start":{"line":148,"column":2},"end":{"line":148,"column":67}},"128":{"start":{"line":151,"column":2},"end":{"line":151,"column":69}},"129":{"start":{"line":152,"column":2},"end":{"line":152,"column":61}},"130":{"start":{"line":153,"column":2},"end":{"line":153,"column":69}},"131":{"start":{"line":154,"column":2},"end":{"line":154,"column":67}},"132":{"start":{"line":157,"column":2},"end":{"line":157,"column":45}},"133":{"start":{"line":158,"column":2},"end":{"line":158,"column":45}},"134":{"start":{"line":159,"column":2},"end":{"line":159,"column":43}},"135":{"start":{"line":162,"column":2},"end":{"line":162,"column":47}},"136":{"start":{"line":163,"column":2},"end":{"line":163,"column":49}},"137":{"start":{"line":164,"column":2},"end":{"line":164,"column":45}},"138":{"start":{"line":165,"column":2},"end":{"line":165,"column":45}},"139":{"start":{"line":168,"column":2},"end":{"line":168,"column":56}},"140":{"start":{"line":169,"column":2},"end":{"line":169,"column":53}},"141":{"start":{"line":172,"column":2},"end":{"line":172,"column":58}},"142":{"start":{"line":173,"column":2},"end":{"line":173,"column":60}},"143":{"start":{"line":176,"column":2},"end":{"line":176,"column":50}},"144":{"start":{"line":177,"column":2},"end":{"line":177,"column":50}},"145":{"start":{"line":178,"column":2},"end":{"line":178,"column":48}},"146":{"start":{"line":179,"column":2},"end":{"line":179,"column":50}},"147":{"start":{"line":182,"column":2},"end":{"line":182,"column":55}},"148":{"start":{"line":183,"column":2},"end":{"line":183,"column":50}},"149":{"start":{"line":184,"column":2},"end":{"line":184,"column":46}},"150":{"start":{"line":185,"column":2},"end":{"line":185,"column":48}},"151":{"start":{"line":186,"column":2},"end":{"line":186,"column":46}},"152":{"start":{"line":187,"column":2},"end":{"line":187,"column":46}},"153":{"start":{"line":188,"column":2},"end":{"line":188,"column":53}},"154":{"start":{"line":189,"column":2},"end":{"line":189,"column":54}},"155":{"start":{"line":190,"column":2},"end":{"line":190,"column":55}},"156":{"start":{"line":191,"column":2},"end":{"line":191,"column":46}},"157":{"start":{"line":192,"column":2},"end":{"line":192,"column":48}},"158":{"start":{"line":193,"column":2},"end":{"line":193,"column":47}},"159":{"start":{"line":194,"column":2},"end":{"line":194,"column":48}},"160":{"start":{"line":195,"column":2},"end":{"line":195,"column":71}},"161":{"start":{"line":196,"column":2},"end":{"line":196,"column":50}},"162":{"start":{"line":197,"column":2},"end":{"line":197,"column":52}},"163":{"start":{"line":198,"column":2},"end":{"line":198,"column":54}},"164":{"start":{"line":199,"column":2},"end":{"line":199,"column":48}},"165":{"start":{"line":200,"column":2},"end":{"line":200,"column":49}},"166":{"start":{"line":201,"column":2},"end":{"line":201,"column":54}},"167":{"start":{"line":202,"column":2},"end":{"line":202,"column":52}},"168":{"start":{"line":203,"column":2},"end":{"line":203,"column":50}},"169":{"start":{"line":204,"column":2},"end":{"line":204,"column":58}},"170":{"start":{"line":205,"column":2},"end":{"line":205,"column":50}},"171":{"start":{"line":208,"column":2},"end":{"line":208,"column":69}},"172":{"start":{"line":210,"column":2},"end":{"line":210,"column":63}},"173":{"start":{"line":211,"column":2},"end":{"line":211,"column":55}},"174":{"start":{"line":212,"column":2},"end":{"line":212,"column":69}},"175":{"start":{"line":213,"column":2},"end":{"line":213,"column":67}},"176":{"start":{"line":214,"column":2},"end":{"line":214,"column":69}},"177":{"start":{"line":215,"column":2},"end":{"line":215,"column":65}},"178":{"start":{"line":216,"column":2},"end":{"line":216,"column":57}},"179":{"start":{"line":217,"column":2},"end":{"line":217,"column":63}},"180":{"start":{"line":220,"column":2},"end":{"line":220,"column":58}},"181":{"start":{"line":221,"column":2},"end":{"line":221,"column":62}},"182":{"start":{"line":222,"column":2},"end":{"line":222,"column":57}},"183":{"start":{"line":223,"column":2},"end":{"line":223,"column":56}},"184":{"start":{"line":224,"column":2},"end":{"line":224,"column":60}},"185":{"start":{"line":225,"column":2},"end":{"line":225,"column":58}},"186":{"start":{"line":226,"column":2},"end":{"line":226,"column":62}},"187":{"start":{"line":227,"column":2},"end":{"line":227,"column":58}},"188":{"start":{"line":230,"column":2},"end":{"line":230,"column":47}},"189":{"start":{"line":233,"column":2},"end":{"line":233,"column":50}},"190":{"start":{"line":234,"column":2},"end":{"line":234,"column":50}},"191":{"start":{"line":235,"column":2},"end":{"line":235,"column":52}},"192":{"start":{"line":236,"column":2},"end":{"line":236,"column":56}},"193":{"start":{"line":237,"column":2},"end":{"line":237,"column":50}},"194":{"start":{"line":238,"column":2},"end":{"line":238,"column":52}},"195":{"start":{"line":239,"column":2},"end":{"line":239,"column":52}},"196":{"start":{"line":240,"column":2},"end":{"line":240,"column":66}},"197":{"start":{"line":241,"column":2},"end":{"line":241,"column":50}},"198":{"start":{"line":242,"column":2},"end":{"line":242,"column":50}},"199":{"start":{"line":243,"column":2},"end":{"line":243,"column":53}},"200":{"start":{"line":246,"column":2},"end":{"line":246,"column":54}},"201":{"start":{"line":247,"column":2},"end":{"line":247,"column":56}},"202":{"start":{"line":248,"column":2},"end":{"line":248,"column":54}},"203":{"start":{"line":249,"column":2},"end":{"line":249,"column":56}},"204":{"start":{"line":250,"column":2},"end":{"line":250,"column":54}},"205":{"start":{"line":251,"column":2},"end":{"line":251,"column":56}},"206":{"start":{"line":252,"column":2},"end":{"line":252,"column":54}},"207":{"start":{"line":253,"column":2},"end":{"line":253,"column":56}},"208":{"start":{"line":254,"column":2},"end":{"line":254,"column":54}},"209":{"start":{"line":255,"column":2},"end":{"line":255,"column":56}},"210":{"start":{"line":256,"column":2},"end":{"line":256,"column":54}},"211":{"start":{"line":257,"column":2},"end":{"line":257,"column":56}},"212":{"start":{"line":258,"column":2},"end":{"line":258,"column":56}},"213":{"start":{"line":259,"column":2},"end":{"line":259,"column":52}},"214":{"start":{"line":260,"column":2},"end":{"line":260,"column":54}},"215":{"start":{"line":261,"column":2},"end":{"line":261,"column":52}},"216":{"start":{"line":262,"column":2},"end":{"line":262,"column":54}},"217":{"start":{"line":263,"column":2},"end":{"line":263,"column":52}},"218":{"start":{"line":264,"column":2},"end":{"line":264,"column":54}},"219":{"start":{"line":265,"column":2},"end":{"line":265,"column":52}},"220":{"start":{"line":266,"column":2},"end":{"line":266,"column":54}},"221":{"start":{"line":267,"column":2},"end":{"line":267,"column":52}},"222":{"start":{"line":268,"column":2},"end":{"line":268,"column":54}},"223":{"start":{"line":269,"column":2},"end":{"line":269,"column":52}},"224":{"start":{"line":270,"column":2},"end":{"line":270,"column":54}},"225":{"start":{"line":273,"column":2},"end":{"line":273,"column":43}},"226":{"start":{"line":276,"column":2},"end":{"line":276,"column":49}},"227":{"start":{"line":277,"column":2},"end":{"line":277,"column":51}},"228":{"start":{"line":278,"column":2},"end":{"line":278,"column":49}},"229":{"start":{"line":279,"column":2},"end":{"line":279,"column":57}},"230":{"start":{"line":280,"column":2},"end":{"line":280,"column":59}},"231":{"start":{"line":281,"column":2},"end":{"line":281,"column":57}},"232":{"start":{"line":282,"column":2},"end":{"line":282,"column":59}},"233":{"start":{"line":283,"column":2},"end":{"line":283,"column":53}},"234":{"start":{"line":284,"column":2},"end":{"line":284,"column":51}},"235":{"start":{"line":286,"column":2},"end":{"line":286,"column":55}},"236":{"start":{"line":288,"column":2},"end":{"line":288,"column":14}},"237":{"start":{"line":291,"column":0},"end":{"line":291,"column":22}},"238":{"start":{"line":292,"column":0},"end":{"line":292,"column":28}},"239":{"start":{"line":293,"column":0},"end":{"line":293,"column":26}}},"branchMap":{},"code":["function factory (construction, config, load, typed) {","  var docs = {};","","","  // construction functions","  docs.bignumber = require('./construction/bignumber');","  docs['boolean'] = require('./construction/boolean');","  docs.complex = require('./construction/complex');","  docs.createUnit = require('./construction/createUnit');","  docs.fraction = require('./construction/fraction');","  docs.index = require('./construction/index');","  docs.matrix = require('./construction/matrix');","  docs.number = require('./construction/number');","  docs.sparse = require('./construction/sparse');","  docs.splitUnit = require('./construction/splitUnit');","  docs.string = require('./construction/string');","  docs.unit = require('./construction/unit');","","  // constants","  docs.e = require('./constants/e');","  docs.E = require('./constants/e');","  docs['false'] = require('./constants/false');","  docs.i = require('./constants/i');","  docs['Infinity'] = require('./constants/Infinity');","  docs.LN2 = require('./constants/LN2');","  docs.LN10 = require('./constants/LN10');","  docs.LOG2E = require('./constants/LOG2E');","  docs.LOG10E = require('./constants/LOG10E');","  docs.NaN = require('./constants/NaN');","  docs['null'] = require('./constants/null');","  docs.pi = require('./constants/pi');","  docs.PI = require('./constants/pi');","  docs.phi = require('./constants/phi');","  docs.SQRT1_2 = require('./constants/SQRT1_2');","  docs.SQRT2 = require('./constants/SQRT2');","  docs.tau = require('./constants/tau');","  docs['true'] = require('./constants/true');","  docs.version = require('./constants/version');","","  // physical constants","  // TODO: more detailed docs for physical constants","  docs.speedOfLight = {description: 'Speed of light in vacuum', examples: ['speedOfLight']};","  docs.gravitationConstant = {description: 'Newtonian constant of gravitation', examples: ['gravitationConstant']};","  docs.planckConstant = {description: 'Planck constant', examples: ['planckConstant']};","  docs.reducedPlanckConstant = {description: 'Reduced Planck constant', examples: ['reducedPlanckConstant']};","","  docs.magneticConstant = {description: 'Magnetic constant (vacuum permeability)', examples: ['magneticConstant']};","  docs.electricConstant = {description: 'Electric constant (vacuum permeability)', examples: ['electricConstant']};","  docs.vacuumImpedance = {description: 'Characteristic impedance of vacuum', examples: ['vacuumImpedance']};","  docs.coulomb = {description: 'Coulomb\\'s constant', examples: ['coulomb']};","  docs.elementaryCharge = {description: 'Elementary charge', examples: ['elementaryCharge']};","  docs.bohrMagneton = {description: 'Borh magneton', examples: ['bohrMagneton']};","  docs.conductanceQuantum = {description: 'Conductance quantum', examples: ['conductanceQuantum']};","  docs.inverseConductanceQuantum = {description: 'Inverse conductance quantum', examples: ['inverseConductanceQuantum']};","  //docs.josephson = {description: 'Josephson constant', examples: ['josephson']};","  docs.magneticFluxQuantum = {description: 'Magnetic flux quantum', examples: ['magneticFluxQuantum']};","  docs.nuclearMagneton = {description: 'Nuclear magneton', examples: ['nuclearMagneton']};","  docs.klitzing = {description: 'Von Klitzing constant', examples: ['klitzing']};","","  docs.bohrRadius = {description: 'Borh radius', examples: ['bohrRadius']};","  docs.classicalElectronRadius = {description: 'Classical electron radius', examples: ['classicalElectronRadius']};","  docs.electronMass = {description: 'Electron mass', examples: ['electronMass']};","  docs.fermiCoupling = {description: 'Fermi coupling constant', examples: ['fermiCoupling']};","  docs.fineStructure = {description: 'Fine-structure constant', examples: ['fineStructure']};","  docs.hartreeEnergy = {description: 'Hartree energy', examples: ['hartreeEnergy']};","  docs.protonMass = {description: 'Proton mass', examples: ['protonMass']};","  docs.deuteronMass = {description: 'Deuteron Mass', examples: ['deuteronMass']};","  docs.neutronMass = {description: 'Neutron mass', examples: ['neutronMass']};","  docs.quantumOfCirculation = {description: 'Quantum of circulation', examples: ['quantumOfCirculation']};","  docs.rydberg = {description: 'Rydberg constant', examples: ['rydberg']};","  docs.thomsonCrossSection = {description: 'Thomson cross section', examples: ['thomsonCrossSection']};","  docs.weakMixingAngle = {description: 'Weak mixing angle', examples: ['weakMixingAngle']};","  docs.efimovFactor = {description: 'Efimov factor', examples: ['efimovFactor']};","","  docs.atomicMass = {description: 'Atomic mass constant', examples: ['atomicMass']};","  docs.avogadro = {description: 'Avogadro\\'s number', examples: ['avogadro']};","  docs.boltzmann = {description: 'Boltzmann constant', examples: ['boltzmann']};","  docs.faraday = {description: 'Faraday constant', examples: ['faraday']};","  docs.firstRadiation = {description: 'First radiation constant', examples: ['firstRadiation']};","  docs.loschmidt = {description: 'Loschmidt constant at T=273.15 K and p=101.325 kPa', examples: ['loschmidt']};","  docs.gasConstant = {description: 'Gas constant', examples: ['gasConstant']};","  docs.molarPlanckConstant = {description: 'Molar Planck constant', examples: ['molarPlanckConstant']};","  docs.molarVolume = {description: 'Molar volume of an ideal gas at T=273.15 K and p=101.325 kPa', examples: ['molarVolume']};","  docs.sackurTetrode = {description: 'Sackur-Tetrode constant at T=1 K and p=101.325 kPa', examples: ['sackurTetrode']};","  docs.secondRadiation = {description: 'Second radiation constant', examples: ['secondRadiation']};","  docs.stefanBoltzmann = {description: 'Stefan-Boltzmann constant', examples: ['stefanBoltzmann']};","  docs.wienDisplacement = {description: 'Wien displacement law constant', examples: ['wienDisplacement']};","  //docs.spectralRadiance = {description: 'First radiation constant for spectral radiance', examples: ['spectralRadiance']};","","  docs.molarMass = {description: 'Molar mass constant', examples: ['molarMass']};","  docs.molarMassC12 = {description: 'Molar mass constant of carbon-12', examples: ['molarMassC12']};","  docs.gravity = {description: 'Standard acceleration of gravity (standard acceleration of free-fall on Earth)', examples: ['gravity']};","","  docs.planckLength = {description: 'Planck length', examples: ['planckLength']};","  docs.planckMass = {description: 'Planck mass', examples: ['planckMass']};","  docs.planckTime = {description: 'Planck time', examples: ['planckTime']};","  docs.planckCharge = {description: 'Planck charge', examples: ['planckCharge']};","  docs.planckTemperature = {description: 'Planck temperature', examples: ['planckTemperature']};","","  // functions - algebra","  docs.derivative = require('./function/algebra/derivative');","  docs.lsolve = require('./function/algebra/lsolve');","  docs.lup = require('./function/algebra/lup');","  docs.lusolve = require('./function/algebra/lusolve');","  docs.simplify = require('./function/algebra/simplify');","  docs.slu = require('./function/algebra/slu');","  docs.usolve = require('./function/algebra/usolve');","","  // functions - arithmetic","  docs.abs = require('./function/arithmetic/abs');","  docs.add = require('./function/arithmetic/add');","  docs.cbrt = require('./function/arithmetic/cbrt');","  docs.ceil = require('./function/arithmetic/ceil');","  docs.cube = require('./function/arithmetic/cube');","  docs.divide = require('./function/arithmetic/divide');","  docs.dotDivide = require('./function/arithmetic/dotDivide');","  docs.dotMultiply = require('./function/arithmetic/dotMultiply');","  docs.dotPow = require('./function/arithmetic/dotPow');","  docs.exp = require('./function/arithmetic/exp');","  docs.fix = require('./function/arithmetic/fix');","  docs.floor = require('./function/arithmetic/floor');","  docs.gcd = require('./function/arithmetic/gcd');","  docs.hypot = require('./function/arithmetic/hypot');","  docs.lcm = require('./function/arithmetic/lcm');","  docs.log = require('./function/arithmetic/log');","  docs.log10 = require('./function/arithmetic/log10');","  docs.mod = require('./function/arithmetic/mod');","  docs.multiply = require('./function/arithmetic/multiply');","  docs.norm = require('./function/arithmetic/norm');","  docs.nthRoot = require('./function/arithmetic/nthRoot');","  docs.pow = require('./function/arithmetic/pow');","  docs.round = require('./function/arithmetic/round');","  docs.sign = require('./function/arithmetic/sign');","  docs.sqrt = require('./function/arithmetic/sqrt');","  docs.square = require('./function/arithmetic/square');","  docs.subtract = require('./function/arithmetic/subtract');","  docs.unaryMinus = require('./function/arithmetic/unaryMinus');","  docs.unaryPlus = require('./function/arithmetic/unaryPlus');","  docs.xgcd = require('./function/arithmetic/xgcd');","","  // functions - bitwise","  docs.bitAnd = require('./function/bitwise/bitAnd');","  docs.bitNot = require('./function/bitwise/bitNot');","  docs.bitOr = require('./function/bitwise/bitOr');","  docs.bitXor = require('./function/bitwise/bitXor');","  docs.leftShift = require('./function/bitwise/leftShift');","  docs.rightArithShift = require('./function/bitwise/rightArithShift');","  docs.rightLogShift = require('./function/bitwise/rightLogShift');","","  // functions - combinatorics","  docs.bellNumbers = require('./function/combinatorics/bellNumbers');","  docs.catalan = require('./function/combinatorics/catalan');","  docs.composition = require('./function/combinatorics/composition');","  docs.stirlingS2 = require('./function/combinatorics/stirlingS2');","","  // functions - core","  docs['config'] =  require('./core/config');","  docs['import'] =  require('./core/import');","  docs['typed'] =  require('./core/typed');","","  // functions - complex","  docs.arg = require('./function/complex/arg');","  docs.conj = require('./function/complex/conj');","  docs.re = require('./function/complex/re');","  docs.im = require('./function/complex/im');","","  // functions - expression","  docs['eval'] =  require('./function/expression/eval');","  docs.help =  require('./function/expression/help');","","  // functions - geometry","  docs.distance = require('./function/geometry/distance');","  docs.intersect = require('./function/geometry/intersect');","","  // functions - logical","  docs['and'] = require('./function/logical/and');","  docs['not'] = require('./function/logical/not');","  docs['or'] = require('./function/logical/or');","  docs['xor'] = require('./function/logical/xor');","","  // functions - matrix","  docs['concat'] = require('./function/matrix/concat');","  docs.cross = require('./function/matrix/cross');","  docs.det = require('./function/matrix/det');","  docs.diag = require('./function/matrix/diag');","  docs.dot = require('./function/matrix/dot');","  docs.eye = require('./function/matrix/eye');","  docs.filter =  require('./function/matrix/filter');","  docs.flatten = require('./function/matrix/flatten');","  docs.forEach =  require('./function/matrix/forEach');","  docs.inv = require('./function/matrix/inv');","  docs.kron = require('./function/matrix/kron');","  docs.map =  require('./function/matrix/map');","  docs.ones = require('./function/matrix/ones');","  docs.partitionSelect =  require('./function/matrix/partitionSelect');","  docs.range = require('./function/matrix/range');","  docs.resize = require('./function/matrix/resize');","  docs.reshape = require('./function/matrix/reshape');","  docs.size = require('./function/matrix/size');","  docs.sort =  require('./function/matrix/sort');","  docs.squeeze = require('./function/matrix/squeeze');","  docs.subset = require('./function/matrix/subset');","  docs.trace = require('./function/matrix/trace');","  docs.transpose = require('./function/matrix/transpose');","  docs.zeros = require('./function/matrix/zeros');","","  // functions - probability","  docs.combinations = require('./function/probability/combinations');","  //docs.distribution = require('./function/probability/distribution');","  docs.factorial = require('./function/probability/factorial');","  docs.gamma = require('./function/probability/gamma');","  docs.kldivergence = require('./function/probability/kldivergence');","  docs.multinomial = require('./function/probability/multinomial');","  docs.permutations = require('./function/probability/permutations');","  docs.pickRandom = require('./function/probability/pickRandom');","  docs.random = require('./function/probability/random');","  docs.randomInt = require('./function/probability/randomInt');","","  // functions - relational","  docs.compare = require('./function/relational/compare');","  docs.deepEqual = require('./function/relational/deepEqual');","  docs['equal'] = require('./function/relational/equal');","  docs.larger = require('./function/relational/larger');","  docs.largerEq = require('./function/relational/largerEq');","  docs.smaller = require('./function/relational/smaller');","  docs.smallerEq = require('./function/relational/smallerEq');","  docs.unequal = require('./function/relational/unequal');","","  // functions - special","  docs.erf = require('./function/special/erf');","","  // functions - statistics","  docs.mad = require('./function/statistics/mad');","  docs.max = require('./function/statistics/max');","  docs.mean = require('./function/statistics/mean');","  docs.median = require('./function/statistics/median');","  docs.min = require('./function/statistics/min');","  docs.mode = require('./function/statistics/mode');","  docs.prod = require('./function/statistics/prod');","  docs.quantileSeq = require('./function/statistics/quantileSeq');","  docs.std = require('./function/statistics/std');","  docs.sum = require('./function/statistics/sum');","  docs['var'] = require('./function/statistics/var');","","  // functions - trigonometry","  docs.acos = require('./function/trigonometry/acos');","  docs.acosh = require('./function/trigonometry/acosh');","  docs.acot = require('./function/trigonometry/acot');","  docs.acoth = require('./function/trigonometry/acoth');","  docs.acsc = require('./function/trigonometry/acsc');","  docs.acsch = require('./function/trigonometry/acsch');","  docs.asec = require('./function/trigonometry/asec');","  docs.asech = require('./function/trigonometry/asech');","  docs.asin = require('./function/trigonometry/asin');","  docs.asinh = require('./function/trigonometry/asinh');","  docs.atan = require('./function/trigonometry/atan');","  docs.atanh = require('./function/trigonometry/atanh');","  docs.atan2 = require('./function/trigonometry/atan2');","  docs.cos = require('./function/trigonometry/cos');","  docs.cosh = require('./function/trigonometry/cosh');","  docs.cot = require('./function/trigonometry/cot');","  docs.coth = require('./function/trigonometry/coth');","  docs.csc = require('./function/trigonometry/csc');","  docs.csch = require('./function/trigonometry/csch');","  docs.sec = require('./function/trigonometry/sec');","  docs.sech = require('./function/trigonometry/sech');","  docs.sin = require('./function/trigonometry/sin');","  docs.sinh = require('./function/trigonometry/sinh');","  docs.tan = require('./function/trigonometry/tan');","  docs.tanh = require('./function/trigonometry/tanh');","","  // functions - units","  docs.to = require('./function/units/to');","","  // functions - utils","  docs.clone = require('./function/utils/clone');","  docs.format = require('./function/utils/format');","  docs.isNaN = require('./function/utils/isNaN');","  docs.isInteger = require('./function/utils/isInteger');","  docs.isNegative = require('./function/utils/isNegative');","  docs.isNumeric = require('./function/utils/isNumeric');","  docs.isPositive = require('./function/utils/isPositive');","  docs.isPrime = require('./function/utils/isPrime');","  docs.isZero = require('./function/utils/isZero');","  // docs.print = require('./function/utils/print'); // TODO: add documentation for print as soon as the parser supports objects.","  docs['typeof'] =  require('./function/utils/typeof');","","  return docs;","}","","exports.name = 'docs';","exports.path = 'expression';","exports.factory = factory;",""],"l":{"1":1,"2":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"42":0,"43":0,"44":0,"45":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"56":0,"57":0,"58":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"90":0,"91":0,"92":0,"94":0,"95":0,"96":0,"97":0,"98":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"151":0,"152":0,"153":0,"154":0,"157":0,"158":0,"159":0,"162":0,"163":0,"164":0,"165":0,"168":0,"169":0,"172":0,"173":0,"176":0,"177":0,"178":0,"179":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"208":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"230":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0,"270":0,"273":0,"276":0,"277":0,"278":0,"279":0,"280":0,"281":0,"282":0,"283":0,"284":0,"286":0,"288":0,"291":1,"292":1,"293":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/function/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/function/index.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":7,"column":2}}},"branchMap":{},"code":["module.exports = [","  require('./compile'),","  require('./eval'),","  require('./help'),","  require('./parse'),","  require('./parser')","];",""],"l":{"1":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/function/compile.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/function/compile.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":1,"9":1},"b":{},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":43,"loc":{"start":{"line":43,"column":14},"end":{"line":43,"column":30}}},"3":{"name":"(anonymous_3)","line":47,"loc":{"start":{"line":47,"column":22},"end":{"line":47,"column":38}}},"4":{"name":"(anonymous_4)","line":48,"loc":{"start":{"line":48,"column":27},"end":{"line":48,"column":44}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":53,"column":1}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":40}},"4":{"start":{"line":42,"column":2},"end":{"line":52,"column":5}},"5":{"start":{"line":44,"column":6},"end":{"line":44,"column":35}},"6":{"start":{"line":48,"column":6},"end":{"line":50,"column":9}},"7":{"start":{"line":49,"column":8},"end":{"line":49,"column":38}},"8":{"start":{"line":55,"column":0},"end":{"line":55,"column":25}},"9":{"start":{"line":56,"column":0},"end":{"line":56,"column":26}}},"branchMap":{},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","","function factory (type, config, load, typed) {","  var parse = load(require('../parse'));","","  /**","   * Parse and compile an expression.","   * Returns a an object with a function `eval([scope])` to evaluate the","   * compiled expression.","   *","   * Syntax:","   *","   *     math.compile(expr)                       // returns one node","   *     math.compile([expr1, expr2, expr3, ...]) // returns an array with nodes","   *","   * Examples:","   *","   *     var code = math.compile('sqrt(3^2 + 4^2)');","   *     code.eval(); // 5","   *","   *     var scope = {a: 3, b: 4}","   *     var code = math.compile('a * b'); // 12","   *     code.eval(scope); // 12","   *     scope.a = 5;","   *     code.eval(scope); // 20","   *","   *     var nodes = math.compile(['a = 3', 'b = 4', 'a * b']);","   *     nodes[2].eval(); // 12","   *","   * See also:","   *","   *    parse, eval","   *","   * @param {string | string[] | Array | Matrix} expr","   *            The expression to be compiled","   * @return {{eval: Function} | Array.<{eval: Function}>} code","   *            An object with the compiled expression","   * @throws {Error}","   */","  return typed('compile', {","    'string': function (expr) {","      return parse(expr).compile();","    },","","    'Array | Matrix': function (expr) {","      return deepMap(expr, function (entry) {","        return parse(entry).compile();","      });","    }","  });","}","","exports.name = 'compile';","exports.factory = factory;",""],"l":{"3":1,"5":1,"6":0,"42":0,"44":0,"48":0,"49":0,"55":1,"56":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/function/eval.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/function/eval.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1,"14":1},"b":{},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":41,"loc":{"start":{"line":41,"column":14},"end":{"line":41,"column":30}}},"3":{"name":"(anonymous_3)","line":46,"loc":{"start":{"line":46,"column":22},"end":{"line":46,"column":45}}},"4":{"name":"(anonymous_4)","line":50,"loc":{"start":{"line":50,"column":22},"end":{"line":50,"column":38}}},"5":{"name":"(anonymous_5)","line":52,"loc":{"start":{"line":52,"column":27},"end":{"line":52,"column":44}}},"6":{"name":"(anonymous_6)","line":57,"loc":{"start":{"line":57,"column":30},"end":{"line":57,"column":53}}},"7":{"name":"(anonymous_7)","line":58,"loc":{"start":{"line":58,"column":27},"end":{"line":58,"column":44}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":63,"column":1}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":40}},"4":{"start":{"line":40,"column":2},"end":{"line":62,"column":5}},"5":{"start":{"line":42,"column":6},"end":{"line":42,"column":21}},"6":{"start":{"line":43,"column":6},"end":{"line":43,"column":47}},"7":{"start":{"line":47,"column":6},"end":{"line":47,"column":47}},"8":{"start":{"line":51,"column":6},"end":{"line":51,"column":21}},"9":{"start":{"line":52,"column":6},"end":{"line":54,"column":9}},"10":{"start":{"line":53,"column":8},"end":{"line":53,"column":50}},"11":{"start":{"line":58,"column":6},"end":{"line":60,"column":9}},"12":{"start":{"line":59,"column":8},"end":{"line":59,"column":50}},"13":{"start":{"line":65,"column":0},"end":{"line":65,"column":22}},"14":{"start":{"line":66,"column":0},"end":{"line":66,"column":26}}},"branchMap":{},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","","function factory (type, config, load, typed) {","  var parse = load(require('../parse'));","","  /**","   * Evaluate an expression.","   *","   * Note the evaluating arbitrary expressions may involve security risks,","   * see [http://mathjs.org/docs/expressions/security.html](http://mathjs.org/docs/expressions/security.html) for more information.","   *","   * Syntax:","   *","   *     math.eval(expr)","   *     math.eval(expr, scope)","   *     math.eval([expr1, expr2, expr3, ...])","   *     math.eval([expr1, expr2, expr3, ...], scope)","   *","   * Example:","   *","   *     math.eval('(2+3)/4');                // 1.25","   *     math.eval('sqrt(3^2 + 4^2)');        // 5","   *     math.eval('sqrt(-4)');               // 2i","   *     math.eval(['a=3', 'b=4', 'a*b']);,   // [3, 4, 12]","   *","   *     var scope = {a:3, b:4};","   *     math.eval('a * b', scope);           // 12","   *","   * See also:","   *","   *    parse, compile","   *","   * @param {string | string[] | Matrix} expr   The expression to be evaluated","   * @param {Object} [scope]                    Scope to read/write variables","   * @return {*} The result of the expression","   * @throws {Error}","   */","  return typed('compile', {","    'string': function (expr) {","      var scope = {};","      return parse(expr).compile().eval(scope);","    },","","    'string, Object': function (expr, scope) {","      return parse(expr).compile().eval(scope);","    },","","    'Array | Matrix': function (expr) {","      var scope = {};","      return deepMap(expr, function (entry) {","        return parse(entry).compile().eval(scope);","      });","    },","","    'Array | Matrix, Object': function (expr, scope) {","      return deepMap(expr, function (entry) {","        return parse(entry).compile().eval(scope);","      });","    }","  });","}","","exports.name = 'eval';","exports.factory = factory;"],"l":{"3":1,"5":1,"6":0,"40":0,"42":0,"43":0,"47":0,"51":0,"52":0,"53":0,"58":0,"59":0,"65":1,"66":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/function/help.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/function/help.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":1,"16":1,"17":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"factory","line":3,"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":51}}},"2":{"name":"(anonymous_2)","line":25,"loc":{"start":{"line":25,"column":11},"end":{"line":25,"column":29}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":60,"column":1}},"2":{"start":{"line":4,"column":2},"end":{"line":4,"column":38}},"3":{"start":{"line":24,"column":2},"end":{"line":59,"column":5}},"4":{"start":{"line":26,"column":6},"end":{"line":26,"column":15}},"5":{"start":{"line":27,"column":6},"end":{"line":27,"column":24}},"6":{"start":{"line":29,"column":6},"end":{"line":51,"column":7}},"7":{"start":{"line":30,"column":8},"end":{"line":36,"column":9}},"8":{"start":{"line":32,"column":10},"end":{"line":35,"column":11}},"9":{"start":{"line":33,"column":12},"end":{"line":33,"column":24}},"10":{"start":{"line":34,"column":12},"end":{"line":34,"column":18}},"11":{"start":{"line":53,"column":6},"end":{"line":53,"column":27}},"12":{"start":{"line":54,"column":6},"end":{"line":56,"column":7}},"13":{"start":{"line":55,"column":8},"end":{"line":55,"column":68}},"14":{"start":{"line":57,"column":6},"end":{"line":57,"column":32}},"15":{"start":{"line":62,"column":0},"end":{"line":62,"column":20}},"16":{"start":{"line":63,"column":0},"end":{"line":63,"column":22}},"17":{"start":{"line":64,"column":0},"end":{"line":64,"column":26}}},"branchMap":{"1":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":6},"end":{"line":29,"column":6}},{"start":{"line":29,"column":6},"end":{"line":29,"column":6}}]},"2":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":10},"end":{"line":32,"column":10}},{"start":{"line":32,"column":10},"end":{"line":32,"column":10}}]},"3":{"line":32,"type":"binary-expr","locations":[{"start":{"line":32,"column":14},"end":{"line":32,"column":39}},{"start":{"line":32,"column":44},"end":{"line":32,"column":65}}]},"4":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":6},"end":{"line":54,"column":6}},{"start":{"line":54,"column":6},"end":{"line":54,"column":6}}]}},"code":["'use strict';","","function factory (type, config, load, typed, math) {","  var docs = load(require('../docs'));","","  /**","   * Retrieve help on a function or data type.","   * Help files are retrieved from the documentation in math.expression.docs.","   *","   * Syntax:","   *","   *    math.help(search)","   *","   * Examples:","   *","   *    console.log(math.help('sin').toString());","   *    console.log(math.help(math.add).toString());","   *    console.log(math.help(math.add).toJSON());","   *","   * @param {Function | string | Object} search   A function or function name","   *                                              for which to get help","   * @return {Help} A help object","   */","  return typed('help', {","    'any': function (search) {","      var prop;","      var name = search;","","      if (typeof search !== 'string') {","        for (prop in math) {","          // search in functions and constants","          if (math.hasOwnProperty(prop) && (search === math[prop])) {","            name = prop;","            break;","          }","        }","","        /* TODO: implement help for data types","         if (!text) {","         // search data type","         for (prop in math.type) {","         if (math.type.hasOwnProperty(prop)) {","         if (search === math.type[prop]) {","         text = prop;","         break;","         }","         }","         }","         }","         */","      }","","      var doc = docs[name];","      if (!doc) {","        throw new Error('No documentation found on \"' + name + '\"');","      }","      return new type.Help(doc);","    }","  });","}","","exports.math = true; // request access to the math namespace as 5th argument of the factory function","exports.name = 'help';","exports.factory = factory;",""],"l":{"3":1,"4":0,"24":0,"26":0,"27":0,"29":0,"30":0,"32":0,"33":0,"34":0,"53":0,"54":0,"55":0,"57":0,"62":1,"63":1,"64":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/function/parse.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/function/parse.js","s":{"1":1,"2":0,"3":0,"4":1,"5":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"factory","line":3,"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":49,"column":1}},"2":{"start":{"line":4,"column":2},"end":{"line":4,"column":40}},"3":{"start":{"line":45,"column":2},"end":{"line":48,"column":5}},"4":{"start":{"line":51,"column":0},"end":{"line":51,"column":23}},"5":{"start":{"line":52,"column":0},"end":{"line":52,"column":26}}},"branchMap":{},"code":["'use strict';","","function factory (type, config, load, typed) {","  var parse = load(require('../parse'));","","  /**","   * Parse an expression. Returns a node tree, which can be evaluated by","   * invoking node.eval();","   *","   * Note the evaluating arbitrary expressions may involve security risks,","   * see [http://mathjs.org/docs/expressions/security.html](http://mathjs.org/docs/expressions/security.html) for more information.","   *","   * Syntax:","   *","   *     math.parse(expr)","   *     math.parse(expr, options)","   *     math.parse([expr1, expr2, expr3, ...])","   *     math.parse([expr1, expr2, expr3, ...], options)","   *","   * Example:","   *","   *     var node = math.parse('sqrt(3^2 + 4^2)');","   *     node.compile().eval(); // 5","   *","   *     var scope = {a:3, b:4}","   *     var node = math.parse('a * b'); // 12","   *     var code = node.compile();","   *     code.eval(scope); // 12","   *     scope.a = 5;","   *     code.eval(scope); // 20","   *","   *     var nodes = math.parse(['a = 3', 'b = 4', 'a * b']);","   *     nodes[2].compile().eval(); // 12","   *","   * See also:","   *","   *     eval, compile","   *","   * @param {string | string[] | Matrix} expr          Expression to be parsed","   * @param {{nodes: Object<string, Node>}} [options]  Available options:","   *                                                   - `nodes` a set of custom nodes","   * @return {Node | Node[]} node","   * @throws {Error}","   */","  return typed('parse', {","    'string | Array | Matrix': parse,","    'string | Array | Matrix, Object': parse","  });","}","","exports.name = 'parse';","exports.factory = factory;",""],"l":{"3":1,"4":0,"45":0,"51":1,"52":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/function/parser.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/function/parser.js","s":{"1":1,"2":0,"3":0,"4":0,"5":1,"6":1,"7":1},"b":{},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"factory","line":3,"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":51}}},"2":{"name":"(anonymous_2)","line":50,"loc":{"start":{"line":50,"column":8},"end":{"line":50,"column":20}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":54,"column":1}},"2":{"start":{"line":4,"column":2},"end":{"line":4,"column":42}},"3":{"start":{"line":49,"column":2},"end":{"line":53,"column":5}},"4":{"start":{"line":51,"column":6},"end":{"line":51,"column":30}},"5":{"start":{"line":56,"column":0},"end":{"line":56,"column":24}},"6":{"start":{"line":57,"column":0},"end":{"line":57,"column":26}},"7":{"start":{"line":58,"column":0},"end":{"line":58,"column":20}}},"branchMap":{},"code":["'use strict';","","function factory (type, config, load, typed, math) {","  var Parser = load(require('../Parser'));","","  /**","   * Create a parser. The function creates a new `math.expression.Parser` object.","   *","   * Syntax:","   *","   *    math.parser()","   *","   * Examples:","   *","   *     var parser = new math.parser();","   *","   *     // evaluate expressions","   *     var a = parser.eval('sqrt(3^2 + 4^2)'); // 5","   *     var b = parser.eval('sqrt(-4)');        // 2i","   *     var c = parser.eval('2 inch in cm');    // 5.08 cm","   *     var d = parser.eval('cos(45 deg)');     // 0.7071067811865476","   *","   *     // define variables and functions","   *     parser.eval('x = 7 / 2');               // 3.5","   *     parser.eval('x + 3');                   // 6.5","   *     parser.eval('function f(x, y) = x^y');  // f(x, y)","   *     parser.eval('f(2, 3)');                 // 8","   *","   *     // get and set variables and functions","   *     var x = parser.get('x');                // 7","   *     var f = parser.get('f');                // function","   *     var g = f(3, 2);                        // 9","   *     parser.set('h', 500);","   *     var i = parser.eval('h / 2');           // 250","   *     parser.set('hello', function (name) {","   *       return 'hello, ' + name + '!';","   *     });","   *     parser.eval('hello(\"user\")');           // \"hello, user!\"","   *","   *     // clear defined functions and variables","   *     parser.clear();","   *","   * See also:","   *","   *    eval, compile, parse","   *","   * @return {Parser} Parser","   */","  return typed('parser', {","    '': function () {","      return new Parser(math);","    }","  });","}","","exports.name = 'parser';","exports.factory = factory;","exports.math = true; // requires the math namespace as 5th argument",""],"l":{"3":1,"4":0,"49":0,"51":0,"56":1,"57":1,"58":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/node/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/node/index.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":18,"column":2}}},"branchMap":{},"code":["module.exports = [","  require('./AccessorNode'),","  require('./ArrayNode'),","  require('./AssignmentNode'),","  require('./BlockNode'),","  require('./ConditionalNode'),","  require('./ConstantNode'),","  require('./IndexNode'),","  require('./FunctionAssignmentNode'),","  require('./FunctionNode'),","  require('./Node'),","  require('./ObjectNode'),","  require('./OperatorNode'),","  require('./ParenthesisNode'),","  require('./RangeNode'),","  require('./SymbolNode'),","  require('./UpdateNode')","];",""],"l":{"1":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/node/AccessorNode.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/node/AccessorNode.js","s":{"1":1,"2":0,"3":0,"4":0,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":1,"51":0,"52":0,"53":1,"54":1,"55":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0,0,0,0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},"fnMap":{"1":{"name":"factory","line":3,"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}}},"2":{"name":"AccessorNode","line":17,"loc":{"start":{"line":17,"column":2},"end":{"line":17,"column":39}}},"3":{"name":"(anonymous_3)","line":34,"loc":{"start":{"line":34,"column":11},"end":{"line":34,"column":23}}},"4":{"name":"(anonymous_4)","line":44,"loc":{"start":{"line":44,"column":11},"end":{"line":44,"column":23}}},"5":{"name":"(anonymous_5)","line":68,"loc":{"start":{"line":68,"column":36},"end":{"line":68,"column":58}}},"6":{"name":"(anonymous_6)","line":96,"loc":{"start":{"line":96,"column":35},"end":{"line":96,"column":55}}},"7":{"name":"(anonymous_7)","line":107,"loc":{"start":{"line":107,"column":31},"end":{"line":107,"column":51}}},"8":{"name":"(anonymous_8)","line":118,"loc":{"start":{"line":118,"column":33},"end":{"line":118,"column":45}}},"9":{"name":"(anonymous_9)","line":127,"loc":{"start":{"line":127,"column":37},"end":{"line":127,"column":56}}},"10":{"name":"(anonymous_10)","line":141,"loc":{"start":{"line":141,"column":34},"end":{"line":141,"column":53}}},"11":{"name":"needParenthesis","line":154,"loc":{"start":{"line":154,"column":2},"end":{"line":154,"column":33}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":162,"column":1}},"2":{"start":{"line":4,"column":2},"end":{"line":4,"column":37}},"3":{"start":{"line":5,"column":2},"end":{"line":5,"column":47}},"4":{"start":{"line":6,"column":2},"end":{"line":6,"column":73}},"5":{"start":{"line":17,"column":2},"end":{"line":48,"column":3}},"6":{"start":{"line":18,"column":4},"end":{"line":20,"column":5}},"7":{"start":{"line":19,"column":6},"end":{"line":19,"column":80}},"8":{"start":{"line":22,"column":4},"end":{"line":24,"column":5}},"9":{"start":{"line":23,"column":6},"end":{"line":23,"column":66}},"10":{"start":{"line":25,"column":4},"end":{"line":27,"column":5}},"11":{"start":{"line":26,"column":6},"end":{"line":26,"column":70}},"12":{"start":{"line":29,"column":4},"end":{"line":29,"column":33}},"13":{"start":{"line":30,"column":4},"end":{"line":30,"column":23}},"14":{"start":{"line":33,"column":4},"end":{"line":47,"column":7}},"15":{"start":{"line":35,"column":8},"end":{"line":42,"column":9}},"16":{"start":{"line":36,"column":10},"end":{"line":38,"column":19}},"17":{"start":{"line":41,"column":10},"end":{"line":41,"column":40}},"18":{"start":{"line":45,"column":8},"end":{"line":45,"column":71}},"19":{"start":{"line":50,"column":2},"end":{"line":50,"column":38}},"20":{"start":{"line":52,"column":2},"end":{"line":52,"column":47}},"21":{"start":{"line":54,"column":2},"end":{"line":54,"column":47}},"22":{"start":{"line":68,"column":2},"end":{"line":90,"column":4}},"23":{"start":{"line":69,"column":4},"end":{"line":69,"column":25}},"24":{"start":{"line":70,"column":4},"end":{"line":70,"column":43}},"25":{"start":{"line":72,"column":4},"end":{"line":72,"column":50}},"26":{"start":{"line":73,"column":4},"end":{"line":73,"column":48}},"27":{"start":{"line":75,"column":4},"end":{"line":89,"column":5}},"28":{"start":{"line":76,"column":6},"end":{"line":76,"column":48}},"29":{"start":{"line":77,"column":6},"end":{"line":77,"column":63}},"30":{"start":{"line":79,"column":9},"end":{"line":89,"column":5}},"31":{"start":{"line":81,"column":6},"end":{"line":85,"column":17}},"32":{"start":{"line":88,"column":6},"end":{"line":88,"column":53}},"33":{"start":{"line":96,"column":2},"end":{"line":99,"column":4}},"34":{"start":{"line":97,"column":4},"end":{"line":97,"column":42}},"35":{"start":{"line":98,"column":4},"end":{"line":98,"column":40}},"36":{"start":{"line":107,"column":2},"end":{"line":112,"column":4}},"37":{"start":{"line":108,"column":4},"end":{"line":111,"column":6}},"38":{"start":{"line":118,"column":2},"end":{"line":120,"column":4}},"39":{"start":{"line":119,"column":4},"end":{"line":119,"column":53}},"40":{"start":{"line":127,"column":2},"end":{"line":134,"column":4}},"41":{"start":{"line":128,"column":4},"end":{"line":128,"column":47}},"42":{"start":{"line":129,"column":4},"end":{"line":131,"column":5}},"43":{"start":{"line":130,"column":6},"end":{"line":130,"column":34}},"44":{"start":{"line":133,"column":4},"end":{"line":133,"column":49}},"45":{"start":{"line":141,"column":2},"end":{"line":148,"column":4}},"46":{"start":{"line":142,"column":4},"end":{"line":142,"column":44}},"47":{"start":{"line":143,"column":4},"end":{"line":145,"column":5}},"48":{"start":{"line":144,"column":6},"end":{"line":144,"column":47}},"49":{"start":{"line":147,"column":4},"end":{"line":147,"column":46}},"50":{"start":{"line":154,"column":2},"end":{"line":159,"column":3}},"51":{"start":{"line":156,"column":4},"end":{"line":158,"column":30}},"52":{"start":{"line":161,"column":2},"end":{"line":161,"column":22}},"53":{"start":{"line":164,"column":0},"end":{"line":164,"column":30}},"54":{"start":{"line":165,"column":0},"end":{"line":165,"column":33}},"55":{"start":{"line":166,"column":0},"end":{"line":166,"column":26}}},"branchMap":{"1":{"line":18,"type":"if","locations":[{"start":{"line":18,"column":4},"end":{"line":18,"column":4}},{"start":{"line":18,"column":4},"end":{"line":18,"column":4}}]},"2":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":4},"end":{"line":22,"column":4}},{"start":{"line":22,"column":4},"end":{"line":22,"column":4}}]},"3":{"line":22,"type":"binary-expr","locations":[{"start":{"line":22,"column":10},"end":{"line":22,"column":16}},{"start":{"line":22,"column":20},"end":{"line":22,"column":33}}]},"4":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":4},"end":{"line":25,"column":4}},{"start":{"line":25,"column":4},"end":{"line":25,"column":4}}]},"5":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":10},"end":{"line":25,"column":15}},{"start":{"line":25,"column":19},"end":{"line":25,"column":36}}]},"6":{"line":29,"type":"binary-expr","locations":[{"start":{"line":29,"column":18},"end":{"line":29,"column":24}},{"start":{"line":29,"column":28},"end":{"line":29,"column":32}}]},"7":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":8},"end":{"line":35,"column":8}},{"start":{"line":35,"column":8},"end":{"line":35,"column":8}}]},"8":{"line":36,"type":"cond-expr","locations":[{"start":{"line":37,"column":16},"end":{"line":37,"column":46}},{"start":{"line":38,"column":16},"end":{"line":38,"column":18}}]},"9":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":17},"end":{"line":41,"column":33}},{"start":{"line":41,"column":37},"end":{"line":41,"column":39}}]},"10":{"line":75,"type":"if","locations":[{"start":{"line":75,"column":4},"end":{"line":75,"column":4}},{"start":{"line":75,"column":4},"end":{"line":75,"column":4}}]},"11":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":9},"end":{"line":79,"column":9}},{"start":{"line":79,"column":9},"end":{"line":79,"column":9}}]},"12":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":4},"end":{"line":129,"column":4}},{"start":{"line":129,"column":4},"end":{"line":129,"column":4}}]},"13":{"line":143,"type":"if","locations":[{"start":{"line":143,"column":4},"end":{"line":143,"column":4}},{"start":{"line":143,"column":4},"end":{"line":143,"column":4}}]},"14":{"line":156,"type":"binary-expr","locations":[{"start":{"line":156,"column":13},"end":{"line":156,"column":32}},{"start":{"line":156,"column":36},"end":{"line":156,"column":52}},{"start":{"line":156,"column":56},"end":{"line":156,"column":75}},{"start":{"line":157,"column":11},"end":{"line":157,"column":30}},{"start":{"line":157,"column":34},"end":{"line":157,"column":51}},{"start":{"line":157,"column":55},"end":{"line":157,"column":77}},{"start":{"line":158,"column":11},"end":{"line":158,"column":28}}]}},"code":["'use strict';","","function factory (type, config, load, typed) {","  var Node = load(require('./Node'));","  var access = load(require('./utils/access'));","  var getSafeProperty = load(require('./utils/customs')).getSafeProperty;","","  /**","   * @constructor AccessorNode","   * @extends {Node}","   * Access an object property or get a matrix subset","   *","   * @param {Node} object                 The object from which to retrieve","   *                                      a property or subset.","   * @param {IndexNode} index             IndexNode containing ranges","   */","  function AccessorNode(object, index) {","    if (!(this instanceof AccessorNode)) {","      throw new SyntaxError('Constructor must be called with the new operator');","    }","","    if (!(object && object.isNode)) {","      throw new TypeError('Node expected for parameter \"object\"');","    }","    if (!(index && index.isIndexNode)) {","      throw new TypeError('IndexNode expected for parameter \"index\"');","    }","","    this.object = object || null;","    this.index = index;","","    // readonly property name","    Object.defineProperty(this, 'name', {","      get: function () {","        if (this.index) {","          return (this.index.isObjectProperty())","              ? this.index.getObjectProperty()","              : '';","        }","        else {","          return this.object.name || '';","        }","      }.bind(this),","      set: function () {","        throw new Error('Cannot assign a new name, name is read-only');","      }","    });","  }","","  AccessorNode.prototype = new Node();","","  AccessorNode.prototype.type = 'AccessorNode';","","  AccessorNode.prototype.isAccessorNode = true;","","  /**","   * Compile the node to javascript code","   * @param {Object} defs     Object which can be used to define functions","   *                          or constants globally available for the compiled","   *                          expression","   * @param {Object} args     Object with local function arguments, the key is","   *                          the name of the argument, and the value is `true`.","   *                          The object may not be mutated, but must be","   *                          extended instead.","   * @return {string} js","   * @private","   */","  AccessorNode.prototype._compile = function (defs, args) {","    defs.access = access;","    defs.getSafeProperty = getSafeProperty;","","    var object = this.object._compile(defs, args);","    var index = this.index._compile(defs, args);","","    if (this.index.isObjectProperty()) {","      var prop = this.index.getObjectProperty();","      return 'getSafeProperty(' + object + ', \"' + prop + '\")';","    }","    else if (this.index.needsSize()) {","      // if some parameters use the 'end' parameter, we need to calculate the size","      return '(function () {' +","          '  var object = ' + object + ';' +","          '  var size = math.size(object).valueOf();' +","          '  return access(object, ' + index + ');' +","          '})()';","    }","    else {","      return 'access(' + object + ', ' + index + ')';","    }","  };","","  /**","   * Execute a callback for each of the child nodes of this node","   * @param {function(child: Node, path: string, parent: Node)} callback","   */","  AccessorNode.prototype.forEach = function (callback) {","    callback(this.object, 'object', this);","    callback(this.index, 'index', this);","  };","","  /**","   * Create a new AccessorNode having it's childs be the results of calling","   * the provided callback function for each of the childs of the original node.","   * @param {function(child: Node, path: string, parent: Node): Node} callback","   * @returns {AccessorNode} Returns a transformed copy of the node","   */","  AccessorNode.prototype.map = function (callback) {","    return new AccessorNode(","        this._ifNode(callback(this.object, 'object', this)),","        this._ifNode(callback(this.index, 'index', this))","    );","  };","","  /**","   * Create a clone of this node, a shallow copy","   * @return {AccessorNode}","   */","  AccessorNode.prototype.clone = function () {","    return new AccessorNode(this.object, this.index);","  };","","  /**","   * Get string representation","   * @param {Object} options","   * @return {string}","   */","  AccessorNode.prototype._toString = function (options) {","    var object = this.object.toString(options);","    if (needParenthesis(this.object)) {","      object = '(' + object + ')';","    }","","    return object + this.index.toString(options);","  };","","  /**","   * Get LaTeX representation","   * @param {Object} options","   * @return {string}","   */","  AccessorNode.prototype._toTex = function (options) {","    var object = this.object.toTex(options);","    if (needParenthesis(this.object)) {","      object = '\\\\left(' + object + '\\\\right)';","    }","","    return object + this.index.toTex(options);","  };","","  /**","   * Are parenthesis needed?","   * @private","   */","  function needParenthesis(node) {","    // TODO: maybe make a method on the nodes which tells whether they need parenthesis?","    return !(node.isAccessorNode || node.isArrayNode || node.isConstantNode","        || node.isFunctionNode || node.isObjectNode || node.isParenthesisNode","        || node.isSymbolNode);","  }","","  return AccessorNode;","}","","exports.name = 'AccessorNode';","exports.path = 'expression.node';","exports.factory = factory;",""],"l":{"3":1,"4":0,"5":0,"6":0,"17":1,"18":0,"19":0,"22":0,"23":0,"25":0,"26":0,"29":0,"30":0,"33":0,"35":0,"36":0,"41":0,"45":0,"50":0,"52":0,"54":0,"68":0,"69":0,"70":0,"72":0,"73":0,"75":0,"76":0,"77":0,"79":0,"81":0,"88":0,"96":0,"97":0,"98":0,"107":0,"108":0,"118":0,"119":0,"127":0,"128":0,"129":0,"130":0,"133":0,"141":0,"142":0,"143":0,"144":0,"147":0,"154":1,"156":0,"161":0,"164":1,"165":1,"166":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/node/ArrayNode.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/node/ArrayNode.js","s":{"1":1,"2":0,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":1,"48":1,"49":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0},"fnMap":{"1":{"name":"factory","line":3,"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}}},"2":{"name":"ArrayNode","line":12,"loc":{"start":{"line":12,"column":2},"end":{"line":12,"column":28}}},"3":{"name":"(anonymous_3)","line":21,"loc":{"start":{"line":21,"column":29},"end":{"line":21,"column":45}}},"4":{"name":"(anonymous_4)","line":26,"loc":{"start":{"line":26,"column":21},"end":{"line":26,"column":33}}},"5":{"name":"(anonymous_5)","line":49,"loc":{"start":{"line":49,"column":33},"end":{"line":49,"column":55}}},"6":{"name":"(anonymous_6)","line":52,"loc":{"start":{"line":52,"column":31},"end":{"line":52,"column":47}}},"7":{"name":"(anonymous_7)","line":65,"loc":{"start":{"line":65,"column":32},"end":{"line":65,"column":52}}},"8":{"name":"(anonymous_8)","line":78,"loc":{"start":{"line":78,"column":28},"end":{"line":78,"column":48}}},"9":{"name":"(anonymous_9)","line":90,"loc":{"start":{"line":90,"column":30},"end":{"line":90,"column":41}}},"10":{"name":"(anonymous_10)","line":100,"loc":{"start":{"line":100,"column":34},"end":{"line":100,"column":52}}},"11":{"name":"(anonymous_11)","line":101,"loc":{"start":{"line":101,"column":31},"end":{"line":101,"column":47}}},"12":{"name":"(anonymous_12)","line":112,"loc":{"start":{"line":112,"column":31},"end":{"line":112,"column":49}}},"13":{"name":"(anonymous_13)","line":115,"loc":{"start":{"line":115,"column":23},"end":{"line":115,"column":38}}},"14":{"name":"(anonymous_14)","line":117,"loc":{"start":{"line":117,"column":28},"end":{"line":117,"column":48}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":133,"column":1}},"2":{"start":{"line":4,"column":2},"end":{"line":4,"column":37}},"3":{"start":{"line":12,"column":2},"end":{"line":30,"column":3}},"4":{"start":{"line":13,"column":4},"end":{"line":15,"column":5}},"5":{"start":{"line":14,"column":6},"end":{"line":14,"column":80}},"6":{"start":{"line":17,"column":4},"end":{"line":17,"column":29}},"7":{"start":{"line":20,"column":4},"end":{"line":23,"column":5}},"8":{"start":{"line":21,"column":46},"end":{"line":21,"column":73}},"9":{"start":{"line":22,"column":6},"end":{"line":22,"column":61}},"10":{"start":{"line":26,"column":4},"end":{"line":28,"column":6}},"11":{"start":{"line":27,"column":6},"end":{"line":27,"column":97}},"12":{"start":{"line":29,"column":4},"end":{"line":29,"column":79}},"13":{"start":{"line":32,"column":2},"end":{"line":32,"column":35}},"14":{"start":{"line":34,"column":2},"end":{"line":34,"column":41}},"15":{"start":{"line":36,"column":2},"end":{"line":36,"column":41}},"16":{"start":{"line":49,"column":2},"end":{"line":59,"column":4}},"17":{"start":{"line":50,"column":4},"end":{"line":50,"column":59}},"18":{"start":{"line":52,"column":4},"end":{"line":54,"column":7}},"19":{"start":{"line":53,"column":6},"end":{"line":53,"column":39}},"20":{"start":{"line":56,"column":4},"end":{"line":58,"column":32}},"21":{"start":{"line":65,"column":2},"end":{"line":70,"column":4}},"22":{"start":{"line":66,"column":4},"end":{"line":69,"column":5}},"23":{"start":{"line":67,"column":6},"end":{"line":67,"column":31}},"24":{"start":{"line":68,"column":6},"end":{"line":68,"column":47}},"25":{"start":{"line":78,"column":2},"end":{"line":84,"column":4}},"26":{"start":{"line":79,"column":4},"end":{"line":79,"column":19}},"27":{"start":{"line":80,"column":4},"end":{"line":82,"column":5}},"28":{"start":{"line":81,"column":6},"end":{"line":81,"column":81}},"29":{"start":{"line":83,"column":4},"end":{"line":83,"column":32}},"30":{"start":{"line":90,"column":2},"end":{"line":92,"column":4}},"31":{"start":{"line":91,"column":4},"end":{"line":91,"column":46}},"32":{"start":{"line":100,"column":2},"end":{"line":105,"column":4}},"33":{"start":{"line":101,"column":4},"end":{"line":103,"column":7}},"34":{"start":{"line":102,"column":6},"end":{"line":102,"column":36}},"35":{"start":{"line":104,"column":4},"end":{"line":104,"column":40}},"36":{"start":{"line":112,"column":2},"end":{"line":130,"column":4}},"37":{"start":{"line":113,"column":4},"end":{"line":113,"column":31}},"38":{"start":{"line":115,"column":4},"end":{"line":127,"column":7}},"39":{"start":{"line":116,"column":6},"end":{"line":123,"column":7}},"40":{"start":{"line":117,"column":8},"end":{"line":119,"column":21}},"41":{"start":{"line":118,"column":10},"end":{"line":118,"column":42}},"42":{"start":{"line":122,"column":8},"end":{"line":122,"column":33}},"43":{"start":{"line":126,"column":6},"end":{"line":126,"column":18}},"44":{"start":{"line":128,"column":4},"end":{"line":128,"column":26}},"45":{"start":{"line":129,"column":4},"end":{"line":129,"column":13}},"46":{"start":{"line":132,"column":2},"end":{"line":132,"column":19}},"47":{"start":{"line":135,"column":0},"end":{"line":135,"column":27}},"48":{"start":{"line":136,"column":0},"end":{"line":136,"column":33}},"49":{"start":{"line":137,"column":0},"end":{"line":137,"column":26}}},"branchMap":{"1":{"line":13,"type":"if","locations":[{"start":{"line":13,"column":4},"end":{"line":13,"column":4}},{"start":{"line":13,"column":4},"end":{"line":13,"column":4}}]},"2":{"line":17,"type":"binary-expr","locations":[{"start":{"line":17,"column":17},"end":{"line":17,"column":22}},{"start":{"line":17,"column":26},"end":{"line":17,"column":28}}]},"3":{"line":20,"type":"if","locations":[{"start":{"line":20,"column":4},"end":{"line":20,"column":4}},{"start":{"line":20,"column":4},"end":{"line":20,"column":4}}]},"4":{"line":20,"type":"binary-expr","locations":[{"start":{"line":20,"column":8},"end":{"line":20,"column":34}},{"start":{"line":21,"column":11},"end":{"line":21,"column":75}}]},"5":{"line":21,"type":"binary-expr","locations":[{"start":{"line":21,"column":53},"end":{"line":21,"column":57}},{"start":{"line":21,"column":61},"end":{"line":21,"column":72}}]},"6":{"line":56,"type":"cond-expr","locations":[{"start":{"line":56,"column":23},"end":{"line":56,"column":38}},{"start":{"line":56,"column":41},"end":{"line":56,"column":44}}]},"7":{"line":58,"type":"cond-expr","locations":[{"start":{"line":58,"column":20},"end":{"line":58,"column":24}},{"start":{"line":58,"column":27},"end":{"line":58,"column":30}}]},"8":{"line":116,"type":"if","locations":[{"start":{"line":116,"column":6},"end":{"line":116,"column":6}},{"start":{"line":116,"column":6},"end":{"line":116,"column":6}}]}},"code":["'use strict';","","function factory (type, config, load, typed) {","  var Node = load(require('./Node'));","","  /**","   * @constructor ArrayNode","   * @extends {Node}","   * Holds an 1-dimensional array with items","   * @param {Node[]} [items]   1 dimensional array with items","   */","  function ArrayNode(items) {","    if (!(this instanceof ArrayNode)) {","      throw new SyntaxError('Constructor must be called with the new operator');","    }","","    this.items = items || [];","","    // validate input","    if (!Array.isArray(this.items)","        || !this.items.every(function (item) {return item && item.isNode;})) {","      throw new TypeError('Array containing Nodes expected');","    }","","    // TODO: deprecated since v3, remove some day","    var deprecated = function () {","      throw new Error('Property `ArrayNode.nodes` is deprecated, use `ArrayNode.items` instead');","    };","    Object.defineProperty(this, 'nodes', { get: deprecated, set: deprecated });","  }","","  ArrayNode.prototype = new Node();","","  ArrayNode.prototype.type = 'ArrayNode';","","  ArrayNode.prototype.isArrayNode = true;","","  /**","   * Compile the node to javascript code","   * @param {Object} defs     Object which can be used to define functions","   *                          or constants globally available for the compiled","   *                          expression","   * @param {Object} args     Object with local function arguments, the key is","   *                          the name of the argument, and the value is `true`.","   *                          The object may not be mutated, but must be","   *                          extended instead.","   * @private","   */","  ArrayNode.prototype._compile = function (defs, args) {","    var asMatrix = (defs.math.config().matrix !== 'Array');","","    var items = this.items.map(function (node) {","      return node._compile(defs, args);","    });","","    return (asMatrix ? 'math.matrix([' : '[') +","        items.join(',') +","        (asMatrix ? '])' : ']');","  };","","  /**","   * Execute a callback for each of the child nodes of this node","   * @param {function(child: Node, path: string, parent: Node)} callback","   */","  ArrayNode.prototype.forEach = function (callback) {","    for (var i = 0; i < this.items.length; i++) {","      var node = this.items[i];","      callback(node, 'items[' + i + ']', this);","    }","  };","","  /**","   * Create a new ArrayNode having it's childs be the results of calling","   * the provided callback function for each of the childs of the original node.","   * @param {function(child: Node, path: string, parent: Node): Node} callback","   * @returns {ArrayNode} Returns a transformed copy of the node","   */","  ArrayNode.prototype.map = function (callback) {","    var items = [];","    for (var i = 0; i < this.items.length; i++) {","      items[i] = this._ifNode(callback(this.items[i], 'items[' + i + ']', this));","    }","    return new ArrayNode(items);","  };","","  /**","   * Create a clone of this node, a shallow copy","   * @return {ArrayNode}","   */","  ArrayNode.prototype.clone = function() {","    return new ArrayNode(this.items.slice(0));","  };","","  /**","   * Get string representation","   * @param {Object} options","   * @return {string} str","   * @override","   */","  ArrayNode.prototype._toString = function(options) {","    var items = this.items.map(function (node) {","      return node.toString(options);","    });","    return '[' + items.join(', ') + ']';","  };","","  /**","   * Get LaTeX representation","   * @param {Object} options","   * @return {string} str","   */","  ArrayNode.prototype._toTex = function(options) {","    var s = '\\\\begin{bmatrix}';","","    this.items.forEach(function(node) {","      if (node.items) {","        s += node.items.map(function(childNode) {","          return childNode.toTex(options);","        }).join('&');","      }","      else {","        s += node.toTex(options);","      }","","      // new line","      s += '\\\\\\\\';","    });","    s += '\\\\end{bmatrix}';","    return s;","  };","","  return ArrayNode;","}","","exports.name = 'ArrayNode';","exports.path = 'expression.node';","exports.factory = factory;",""],"l":{"3":1,"4":0,"12":1,"13":0,"14":0,"17":0,"20":0,"21":0,"22":0,"26":0,"27":0,"29":0,"32":0,"34":0,"36":0,"49":0,"50":0,"52":0,"53":0,"56":0,"65":0,"66":0,"67":0,"68":0,"78":0,"79":0,"80":0,"81":0,"83":0,"90":0,"91":0,"100":0,"101":0,"102":0,"104":0,"112":0,"113":0,"115":0,"116":0,"117":0,"118":0,"122":0,"126":0,"128":0,"129":0,"132":0,"135":1,"136":1,"137":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/node/AssignmentNode.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/node/AssignmentNode.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":1,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":1,"94":1,"95":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"AssignmentNode","line":43,"loc":{"start":{"line":43,"column":2},"end":{"line":43,"column":48}}},"3":{"name":"(anonymous_3)","line":68,"loc":{"start":{"line":68,"column":11},"end":{"line":68,"column":23}}},"4":{"name":"(anonymous_4)","line":78,"loc":{"start":{"line":78,"column":11},"end":{"line":78,"column":23}}},"5":{"name":"(anonymous_5)","line":101,"loc":{"start":{"line":101,"column":38},"end":{"line":101,"column":60}}},"6":{"name":"(anonymous_6)","line":181,"loc":{"start":{"line":181,"column":37},"end":{"line":181,"column":57}}},"7":{"name":"(anonymous_7)","line":195,"loc":{"start":{"line":195,"column":33},"end":{"line":195,"column":53}}},"8":{"name":"(anonymous_8)","line":209,"loc":{"start":{"line":209,"column":35},"end":{"line":209,"column":46}}},"9":{"name":"needParenthesis","line":219,"loc":{"start":{"line":219,"column":2},"end":{"line":219,"column":46}}},"10":{"name":"(anonymous_10)","line":235,"loc":{"start":{"line":235,"column":39},"end":{"line":235,"column":57}}},"11":{"name":"(anonymous_11)","line":251,"loc":{"start":{"line":251,"column":36},"end":{"line":251,"column":54}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":41}},"2":{"start":{"line":5,"column":0},"end":{"line":263,"column":1}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":37}},"4":{"start":{"line":7,"column":2},"end":{"line":7,"column":47}},"5":{"start":{"line":8,"column":2},"end":{"line":8,"column":66}},"6":{"start":{"line":9,"column":2},"end":{"line":9,"column":47}},"7":{"start":{"line":10,"column":2},"end":{"line":10,"column":47}},"8":{"start":{"line":11,"column":2},"end":{"line":11,"column":73}},"9":{"start":{"line":12,"column":2},"end":{"line":12,"column":73}},"10":{"start":{"line":14,"column":2},"end":{"line":14,"column":40}},"11":{"start":{"line":15,"column":2},"end":{"line":15,"column":42}},"12":{"start":{"line":43,"column":2},"end":{"line":82,"column":3}},"13":{"start":{"line":44,"column":4},"end":{"line":46,"column":5}},"14":{"start":{"line":45,"column":6},"end":{"line":45,"column":80}},"15":{"start":{"line":48,"column":4},"end":{"line":48,"column":25}},"16":{"start":{"line":49,"column":4},"end":{"line":49,"column":38}},"17":{"start":{"line":50,"column":4},"end":{"line":50,"column":39}},"18":{"start":{"line":53,"column":4},"end":{"line":55,"column":5}},"19":{"start":{"line":54,"column":6},"end":{"line":54,"column":77}},"20":{"start":{"line":56,"column":4},"end":{"line":58,"column":5}},"21":{"start":{"line":57,"column":6},"end":{"line":57,"column":55}},"22":{"start":{"line":59,"column":4},"end":{"line":61,"column":5}},"23":{"start":{"line":60,"column":6},"end":{"line":60,"column":59}},"24":{"start":{"line":62,"column":4},"end":{"line":64,"column":5}},"25":{"start":{"line":63,"column":6},"end":{"line":63,"column":54}},"26":{"start":{"line":67,"column":4},"end":{"line":81,"column":7}},"27":{"start":{"line":69,"column":8},"end":{"line":76,"column":9}},"28":{"start":{"line":70,"column":10},"end":{"line":72,"column":19}},"29":{"start":{"line":75,"column":10},"end":{"line":75,"column":40}},"30":{"start":{"line":79,"column":8},"end":{"line":79,"column":71}},"31":{"start":{"line":84,"column":2},"end":{"line":84,"column":40}},"32":{"start":{"line":86,"column":2},"end":{"line":86,"column":51}},"33":{"start":{"line":88,"column":2},"end":{"line":88,"column":51}},"34":{"start":{"line":101,"column":2},"end":{"line":174,"column":4}},"35":{"start":{"line":102,"column":4},"end":{"line":102,"column":25}},"36":{"start":{"line":103,"column":4},"end":{"line":103,"column":25}},"37":{"start":{"line":104,"column":4},"end":{"line":104,"column":43}},"38":{"start":{"line":105,"column":4},"end":{"line":105,"column":43}},"39":{"start":{"line":107,"column":4},"end":{"line":107,"column":13}},"40":{"start":{"line":108,"column":4},"end":{"line":108,"column":50}},"41":{"start":{"line":109,"column":4},"end":{"line":109,"column":68}},"42":{"start":{"line":110,"column":4},"end":{"line":110,"column":48}},"43":{"start":{"line":112,"column":4},"end":{"line":173,"column":5}},"44":{"start":{"line":114,"column":6},"end":{"line":116,"column":7}},"45":{"start":{"line":115,"column":8},"end":{"line":115,"column":61}},"46":{"start":{"line":118,"column":6},"end":{"line":118,"column":81}},"47":{"start":{"line":120,"column":9},"end":{"line":173,"column":5}},"48":{"start":{"line":122,"column":6},"end":{"line":122,"column":104}},"49":{"start":{"line":124,"column":9},"end":{"line":173,"column":5}},"50":{"start":{"line":126,"column":6},"end":{"line":126,"column":85}},"51":{"start":{"line":129,"column":6},"end":{"line":135,"column":17}},"52":{"start":{"line":139,"column":6},"end":{"line":139,"column":85}},"53":{"start":{"line":144,"column":6},"end":{"line":144,"column":65}},"54":{"start":{"line":146,"column":6},"end":{"line":172,"column":7}},"55":{"start":{"line":147,"column":8},"end":{"line":147,"column":79}},"56":{"start":{"line":148,"column":8},"end":{"line":155,"column":19}},"57":{"start":{"line":159,"column":8},"end":{"line":159,"column":104}},"58":{"start":{"line":160,"column":8},"end":{"line":160,"column":65}},"59":{"start":{"line":162,"column":8},"end":{"line":171,"column":19}},"60":{"start":{"line":181,"column":2},"end":{"line":187,"column":4}},"61":{"start":{"line":182,"column":4},"end":{"line":182,"column":42}},"62":{"start":{"line":183,"column":4},"end":{"line":185,"column":5}},"63":{"start":{"line":184,"column":6},"end":{"line":184,"column":42}},"64":{"start":{"line":186,"column":4},"end":{"line":186,"column":40}},"65":{"start":{"line":195,"column":2},"end":{"line":203,"column":4}},"66":{"start":{"line":196,"column":4},"end":{"line":196,"column":69}},"67":{"start":{"line":197,"column":4},"end":{"line":199,"column":15}},"68":{"start":{"line":200,"column":4},"end":{"line":200,"column":66}},"69":{"start":{"line":202,"column":4},"end":{"line":202,"column":52}},"70":{"start":{"line":209,"column":2},"end":{"line":211,"column":4}},"71":{"start":{"line":210,"column":4},"end":{"line":210,"column":67}},"72":{"start":{"line":219,"column":2},"end":{"line":228,"column":3}},"73":{"start":{"line":220,"column":4},"end":{"line":222,"column":5}},"74":{"start":{"line":221,"column":6},"end":{"line":221,"column":27}},"75":{"start":{"line":224,"column":4},"end":{"line":224,"column":64}},"76":{"start":{"line":225,"column":4},"end":{"line":225,"column":74}},"77":{"start":{"line":226,"column":4},"end":{"line":227,"column":71}},"78":{"start":{"line":235,"column":2},"end":{"line":244,"column":4}},"79":{"start":{"line":236,"column":4},"end":{"line":236,"column":47}},"80":{"start":{"line":237,"column":4},"end":{"line":237,"column":63}},"81":{"start":{"line":238,"column":4},"end":{"line":238,"column":45}},"82":{"start":{"line":239,"column":4},"end":{"line":241,"column":5}},"83":{"start":{"line":240,"column":6},"end":{"line":240,"column":32}},"84":{"start":{"line":243,"column":4},"end":{"line":243,"column":42}},"85":{"start":{"line":251,"column":2},"end":{"line":260,"column":4}},"86":{"start":{"line":252,"column":4},"end":{"line":252,"column":44}},"87":{"start":{"line":253,"column":4},"end":{"line":253,"column":60}},"88":{"start":{"line":254,"column":4},"end":{"line":254,"column":42}},"89":{"start":{"line":255,"column":4},"end":{"line":257,"column":5}},"90":{"start":{"line":256,"column":6},"end":{"line":256,"column":45}},"91":{"start":{"line":259,"column":4},"end":{"line":259,"column":41}},"92":{"start":{"line":262,"column":2},"end":{"line":262,"column":24}},"93":{"start":{"line":265,"column":0},"end":{"line":265,"column":32}},"94":{"start":{"line":266,"column":0},"end":{"line":266,"column":33}},"95":{"start":{"line":267,"column":0},"end":{"line":267,"column":26}}},"branchMap":{"1":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":4},"end":{"line":44,"column":4}},{"start":{"line":44,"column":4},"end":{"line":44,"column":4}}]},"2":{"line":49,"type":"cond-expr","locations":[{"start":{"line":49,"column":25},"end":{"line":49,"column":30}},{"start":{"line":49,"column":33},"end":{"line":49,"column":37}}]},"3":{"line":50,"type":"cond-expr","locations":[{"start":{"line":50,"column":25},"end":{"line":50,"column":30}},{"start":{"line":50,"column":33},"end":{"line":50,"column":38}}]},"4":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":4},"end":{"line":53,"column":4}},{"start":{"line":53,"column":4},"end":{"line":53,"column":4}}]},"5":{"line":53,"type":"binary-expr","locations":[{"start":{"line":53,"column":8},"end":{"line":53,"column":15}},{"start":{"line":53,"column":19},"end":{"line":53,"column":66}}]},"6":{"line":53,"type":"binary-expr","locations":[{"start":{"line":53,"column":21},"end":{"line":53,"column":40}},{"start":{"line":53,"column":44},"end":{"line":53,"column":65}}]},"7":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":4},"end":{"line":56,"column":4}},{"start":{"line":56,"column":4},"end":{"line":56,"column":4}}]},"8":{"line":56,"type":"binary-expr","locations":[{"start":{"line":56,"column":8},"end":{"line":56,"column":14}},{"start":{"line":56,"column":18},"end":{"line":56,"column":37}},{"start":{"line":56,"column":41},"end":{"line":56,"column":62}}]},"9":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":4},"end":{"line":59,"column":4}},{"start":{"line":59,"column":4},"end":{"line":59,"column":4}}]},"10":{"line":59,"type":"binary-expr","locations":[{"start":{"line":59,"column":8},"end":{"line":59,"column":18}},{"start":{"line":59,"column":22},"end":{"line":59,"column":45}}]},"11":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":4},"end":{"line":62,"column":4}},{"start":{"line":62,"column":4},"end":{"line":62,"column":4}}]},"12":{"line":62,"type":"binary-expr","locations":[{"start":{"line":62,"column":8},"end":{"line":62,"column":19}},{"start":{"line":62,"column":23},"end":{"line":62,"column":41}}]},"13":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":8},"end":{"line":69,"column":8}},{"start":{"line":69,"column":8},"end":{"line":69,"column":8}}]},"14":{"line":70,"type":"cond-expr","locations":[{"start":{"line":71,"column":16},"end":{"line":71,"column":46}},{"start":{"line":72,"column":16},"end":{"line":72,"column":18}}]},"15":{"line":75,"type":"binary-expr","locations":[{"start":{"line":75,"column":17},"end":{"line":75,"column":33}},{"start":{"line":75,"column":37},"end":{"line":75,"column":39}}]},"16":{"line":109,"type":"cond-expr","locations":[{"start":{"line":109,"column":29},"end":{"line":109,"column":60}},{"start":{"line":109,"column":63},"end":{"line":109,"column":67}}]},"17":{"line":112,"type":"if","locations":[{"start":{"line":112,"column":4},"end":{"line":112,"column":4}},{"start":{"line":112,"column":4},"end":{"line":112,"column":4}}]},"18":{"line":114,"type":"if","locations":[{"start":{"line":114,"column":6},"end":{"line":114,"column":6}},{"start":{"line":114,"column":6},"end":{"line":114,"column":6}}]},"19":{"line":120,"type":"if","locations":[{"start":{"line":120,"column":9},"end":{"line":120,"column":9}},{"start":{"line":120,"column":9},"end":{"line":120,"column":9}}]},"20":{"line":124,"type":"if","locations":[{"start":{"line":124,"column":9},"end":{"line":124,"column":9}},{"start":{"line":124,"column":9},"end":{"line":124,"column":9}}]},"21":{"line":126,"type":"cond-expr","locations":[{"start":{"line":126,"column":38},"end":{"line":126,"column":79}},{"start":{"line":126,"column":82},"end":{"line":126,"column":84}}]},"22":{"line":139,"type":"cond-expr","locations":[{"start":{"line":139,"column":38},"end":{"line":139,"column":79}},{"start":{"line":139,"column":82},"end":{"line":139,"column":84}}]},"23":{"line":146,"type":"if","locations":[{"start":{"line":146,"column":6},"end":{"line":146,"column":6}},{"start":{"line":146,"column":6},"end":{"line":146,"column":6}}]},"24":{"line":159,"type":"cond-expr","locations":[{"start":{"line":159,"column":57},"end":{"line":159,"column":98}},{"start":{"line":159,"column":101},"end":{"line":159,"column":103}}]},"25":{"line":183,"type":"if","locations":[{"start":{"line":183,"column":4},"end":{"line":183,"column":4}},{"start":{"line":183,"column":4},"end":{"line":183,"column":4}}]},"26":{"line":197,"type":"cond-expr","locations":[{"start":{"line":198,"column":10},"end":{"line":198,"column":59}},{"start":{"line":199,"column":10},"end":{"line":199,"column":14}}]},"27":{"line":220,"type":"if","locations":[{"start":{"line":220,"column":4},"end":{"line":220,"column":4}},{"start":{"line":220,"column":4},"end":{"line":220,"column":4}}]},"28":{"line":226,"type":"binary-expr","locations":[{"start":{"line":226,"column":12},"end":{"line":226,"column":33}},{"start":{"line":227,"column":11},"end":{"line":227,"column":34}},{"start":{"line":227,"column":40},"end":{"line":227,"column":68}}]},"29":{"line":237,"type":"cond-expr","locations":[{"start":{"line":237,"column":29},"end":{"line":237,"column":57}},{"start":{"line":237,"column":60},"end":{"line":237,"column":62}}]},"30":{"line":239,"type":"if","locations":[{"start":{"line":239,"column":4},"end":{"line":239,"column":4}},{"start":{"line":239,"column":4},"end":{"line":239,"column":4}}]},"31":{"line":239,"type":"binary-expr","locations":[{"start":{"line":239,"column":30},"end":{"line":239,"column":37}},{"start":{"line":239,"column":41},"end":{"line":239,"column":60}}]},"32":{"line":253,"type":"cond-expr","locations":[{"start":{"line":253,"column":29},"end":{"line":253,"column":54}},{"start":{"line":253,"column":57},"end":{"line":253,"column":59}}]},"33":{"line":255,"type":"if","locations":[{"start":{"line":255,"column":4},"end":{"line":255,"column":4}},{"start":{"line":255,"column":4},"end":{"line":255,"column":4}}]},"34":{"line":255,"type":"binary-expr","locations":[{"start":{"line":255,"column":30},"end":{"line":255,"column":37}},{"start":{"line":255,"column":41},"end":{"line":255,"column":60}}]}},"code":["'use strict';","","var latex = require('../../utils/latex');","","function factory (type, config, load, typed) {","  var Node = load(require('./Node'));","  var ArrayNode = load(require('./ArrayNode'));","  var matrix = load(require('../../type/matrix/function/matrix'));","  var assign = load(require('./utils/assign'));","  var access = load(require('./utils/access'));","  var getSafeProperty = load(require('./utils/customs')).getSafeProperty;","  var setSafeProperty = load(require('./utils/customs')).setSafeProperty;","","  var keywords = require('../keywords');","  var operators = require('../operators');","","  /**","   * @constructor AssignmentNode","   * @extends {Node}","   *","   * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or","   * replace a subset of a matrix like `A[2,2]=42`.","   *","   * Syntax:","   *","   *     new AssignmentNode(symbol, value)","   *     new AssignmentNode(object, index, value)","   *","   * Usage:","   *","   *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2));                      // a=2","   *    new AssignmentNode(new SymbolNode('a'), new IndexNode('b'), new ConstantNode(2))   // a.b=2","   *    new AssignmentNode(new SymbolNode('a'), new IndexNode(1, 2), new ConstantNode(3))  // a[1,2]=3","   *","   * @param {SymbolNode | AccessorNode} object  Object on which to assign a value","   * @param {IndexNode} [index=null]            Index, property name or matrix","   *                                            index. Optional. If not provided","   *                                            and `object` is a SymbolNode,","   *                                            the property is assigned to the","   *                                            global scope.","   * @param {Node} value                        The value to be assigned","   */","  function AssignmentNode(object, index, value) {","    if (!(this instanceof AssignmentNode)) {","      throw new SyntaxError('Constructor must be called with the new operator');","    }","","    this.object = object;","    this.index = value ? index : null;","    this.value = value ? value : index;","","    // validate input","    if (!object || !(object.isSymbolNode || object.isAccessorNode)) {","      throw new TypeError('SymbolNode or AccessorNode expected as \"object\"');","    }","    if (object && object.isSymbolNode && object.name === 'end') {","      throw new Error('Cannot assign to symbol \"end\"');","    }","    if (this.index && !this.index.isIndexNode) {","      throw new TypeError('IndexNode expected as \"index\"');","    }","    if (!this.value || !this.value.isNode) {","      throw new TypeError('Node expected as \"value\"');","    }","","    // readonly property name","    Object.defineProperty(this, 'name', {","      get: function () {","        if (this.index) {","          return (this.index.isObjectProperty())","              ? this.index.getObjectProperty()","              : '';","        }","        else {","          return this.object.name || '';","        }","      }.bind(this),","      set: function () {","        throw new Error('Cannot assign a new name, name is read-only');","      }","    });","  }","","  AssignmentNode.prototype = new Node();","","  AssignmentNode.prototype.type = 'AssignmentNode';","","  AssignmentNode.prototype.isAssignmentNode = true;","","  /**","   * Compile the node to javascript code","   * @param {Object} defs     Object which can be used to define functions","   *                          or constants globally available for the compiled","   *                          expression","   * @param {Object} args     Object with local function arguments, the key is","   *                          the name of the argument, and the value is `true`.","   *                          The object may not be mutated, but must be","   *                          extended instead.","   * @private","   */","  AssignmentNode.prototype._compile = function (defs, args) {","    defs.assign = assign;","    defs.access = access;","    defs.getSafeProperty = getSafeProperty;","    defs.setSafeProperty = setSafeProperty;","","    var size;","    var object = this.object._compile(defs, args);","    var index = this.index ? this.index._compile(defs, args) : null;","    var value = this.value._compile(defs, args);","","    if (!this.index) {","      // apply a variable to the scope, for example `a=2`","      if (!this.object.isSymbolNode) {","        throw new TypeError('SymbolNode expected as object');","      }","","      return 'setSafeProperty(scope, \"' + this.object.name + '\", ' + value + ')';","    }","    else if (this.index.isObjectProperty()) {","      // apply an object property for example `a.b=2`","      return 'setSafeProperty(' + object + ', \"' + this.index.getObjectProperty() + '\", ' + value + ')';","    }","    else if (this.object.isSymbolNode) {","      // update a matrix subset, for example `a[2]=3`","      size = this.index.needsSize() ? 'var size = math.size(object).valueOf();' : '';","","      // apply updated object to scope","      return '(function () {' +","          '  var object = ' + object + ';' +","          '  var value = ' + value + ';' +","          '  ' + size +","          '  setSafeProperty(scope, \"' + this.object.name + '\", assign(object, ' + index + ', value));' +","          '  return value;' +","          '})()';","    }","    else { // this.object.isAccessorNode === true","      // update a matrix subset, for example `a.b[2]=3`","      size = this.index.needsSize() ? 'var size = math.size(object).valueOf();' : '';","","      // we will not use the _compile of the AccessorNode, but compile it","      // ourselves here as we need the parent object of the AccessorNode:","      // wee need to apply the updated object to parent object","      var parentObject = this.object.object._compile(defs, args);","","      if (this.object.index.isObjectProperty()) {","        var parentProperty = '\"' + this.object.index.getObjectProperty() + '\"';","        return '(function () {' +","            '  var parent = ' + parentObject + ';' +","            '  var object = getSafeProperty(parent, ' + parentProperty + ');' + // parentIndex is a property","            '  var value = ' + value + ';' +","            size +","            '  setSafeProperty(parent, ' + parentProperty + ', assign(object, ' + index + ', value));' +","            '  return value;' +","            '})()';","      }","      else {","        // if some parameters use the 'end' parameter, we need to calculate the size","        var parentSize = this.object.index.needsSize() ? 'var size = math.size(parent).valueOf();' : '';","        var parentIndex = this.object.index._compile(defs, args);","","        return '(function () {' +","            '  var parent = ' + parentObject + ';' +","            '  ' + parentSize +","            '  var parentIndex = ' + parentIndex + ';' +","            '  var object = access(parent, parentIndex);' +","            '  var value = ' + value + ';' +","            '  ' + size +","            '  assign(parent, parentIndex, assign(object, ' + index + ', value));' +","            '  return value;' +","            '})()';","      }","    }","  };","","","  /**","   * Execute a callback for each of the child nodes of this node","   * @param {function(child: Node, path: string, parent: Node)} callback","   */","  AssignmentNode.prototype.forEach = function (callback) {","    callback(this.object, 'object', this);","    if (this.index) {","      callback(this.index, 'index', this);","    }","    callback(this.value, 'value', this);","  };","","  /**","   * Create a new AssignmentNode having it's childs be the results of calling","   * the provided callback function for each of the childs of the original node.","   * @param {function(child: Node, path: string, parent: Node): Node} callback","   * @returns {AssignmentNode} Returns a transformed copy of the node","   */","  AssignmentNode.prototype.map = function (callback) {","    var object = this._ifNode(callback(this.object, 'object', this));","    var index = this.index","        ? this._ifNode(callback(this.index, 'index', this))","        : null;","    var value = this._ifNode(callback(this.value, 'value', this));","","    return new AssignmentNode(object, index, value);","  };","","  /**","   * Create a clone of this node, a shallow copy","   * @return {AssignmentNode}","   */","  AssignmentNode.prototype.clone = function() {","    return new AssignmentNode(this.object, this.index, this.value);","  };","","  /*","   * Is parenthesis needed?","   * @param {node} node","   * @param {string} [parenthesis='keep']","   * @private","   */","  function needParenthesis(node, parenthesis) {","    if (!parenthesis) {","      parenthesis = 'keep';","    }","","    var precedence = operators.getPrecedence(node, parenthesis);","    var exprPrecedence = operators.getPrecedence(node.value, parenthesis);","    return (parenthesis === 'all')","      || ((exprPrecedence !== null) && (exprPrecedence <= precedence));","  }","","  /**","   * Get string representation","   * @param {Object} options","   * @return {string}","   */","  AssignmentNode.prototype._toString = function(options) {","    var object = this.object.toString(options);","    var index = this.index ? this.index.toString(options) : '';","    var value = this.value.toString(options);","    if (needParenthesis(this, options && options.parenthesis)) {","      value = '(' + value + ')';","    }","","    return object + index + ' = ' + value;","  };","","  /**","   * Get LaTeX representation","   * @param {Object} options","   * @return {string}","   */","  AssignmentNode.prototype._toTex = function(options) {","    var object = this.object.toTex(options);","    var index = this.index ? this.index.toTex(options) : '';","    var value = this.value.toTex(options);","    if (needParenthesis(this, options && options.parenthesis)) {","      value = '\\\\left(' + value + '\\\\right)';","    }","","    return object + index + ':=' + value;","  };","","  return AssignmentNode;","}","","exports.name = 'AssignmentNode';","exports.path = 'expression.node';","exports.factory = factory;",""],"l":{"3":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"14":0,"15":0,"43":1,"44":0,"45":0,"48":0,"49":0,"50":0,"53":0,"54":0,"56":0,"57":0,"59":0,"60":0,"62":0,"63":0,"67":0,"69":0,"70":0,"75":0,"79":0,"84":0,"86":0,"88":0,"101":0,"102":0,"103":0,"104":0,"105":0,"107":0,"108":0,"109":0,"110":0,"112":0,"114":0,"115":0,"118":0,"120":0,"122":0,"124":0,"126":0,"129":0,"139":0,"144":0,"146":0,"147":0,"148":0,"159":0,"160":0,"162":0,"181":0,"182":0,"183":0,"184":0,"186":0,"195":0,"196":0,"197":0,"200":0,"202":0,"209":0,"210":0,"219":1,"220":0,"221":0,"224":0,"225":0,"226":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"243":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"259":0,"262":0,"265":1,"266":1,"267":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/utils/latex.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/utils/latex.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":85,"loc":{"start":{"line":85,"column":19},"end":{"line":85,"column":43}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":41,"column":2}},"2":{"start":{"line":43,"column":0},"end":{"line":75,"column":2}},"3":{"start":{"line":77,"column":0},"end":{"line":77,"column":68}},"4":{"start":{"line":79,"column":0},"end":{"line":81,"column":2}},"5":{"start":{"line":85,"column":0},"end":{"line":104,"column":2}},"6":{"start":{"line":86,"column":2},"end":{"line":86,"column":58}},"7":{"start":{"line":87,"column":2},"end":{"line":92,"column":3}},"8":{"start":{"line":88,"column":4},"end":{"line":90,"column":5}},"9":{"start":{"line":89,"column":6},"end":{"line":89,"column":25}},"10":{"start":{"line":91,"column":4},"end":{"line":91,"column":36}},"11":{"start":{"line":94,"column":2},"end":{"line":102,"column":3}},"12":{"start":{"line":95,"column":4},"end":{"line":95,"column":33}},"13":{"start":{"line":97,"column":7},"end":{"line":102,"column":3}},"14":{"start":{"line":99,"column":4},"end":{"line":99,"column":34}},"15":{"start":{"line":100,"column":4},"end":{"line":101,"column":58}},"16":{"start":{"line":103,"column":2},"end":{"line":103,"column":14}}},"branchMap":{"1":{"line":86,"type":"cond-expr","locations":[{"start":{"line":86,"column":43},"end":{"line":86,"column":48}},{"start":{"line":86,"column":51},"end":{"line":86,"column":57}}]},"2":{"line":87,"type":"if","locations":[{"start":{"line":87,"column":2},"end":{"line":87,"column":2}},{"start":{"line":87,"column":2},"end":{"line":87,"column":2}}]},"3":{"line":88,"type":"if","locations":[{"start":{"line":88,"column":4},"end":{"line":88,"column":4}},{"start":{"line":88,"column":4},"end":{"line":88,"column":4}}]},"4":{"line":94,"type":"if","locations":[{"start":{"line":94,"column":2},"end":{"line":94,"column":2}},{"start":{"line":94,"column":2},"end":{"line":94,"column":2}}]},"5":{"line":97,"type":"if","locations":[{"start":{"line":97,"column":7},"end":{"line":97,"column":7}},{"start":{"line":97,"column":7},"end":{"line":97,"column":7}}]}},"code":["'use strict';","","exports.symbols = {","  // GREEK LETTERS","  Alpha: 'A',     alpha: '\\\\alpha',","  Beta: 'B',      beta: '\\\\beta',","  Gamma: '\\\\Gamma',    gamma: '\\\\gamma',","  Delta: '\\\\Delta',    delta: '\\\\delta',","  Epsilon: 'E',   epsilon: '\\\\epsilon',  varepsilon: '\\\\varepsilon',","  Zeta: 'Z',      zeta: '\\\\zeta',","  Eta: 'H',       eta: '\\\\eta',","  Theta: '\\\\Theta',    theta: '\\\\theta',    vartheta: '\\\\vartheta',","  Iota: 'I',      iota: '\\\\iota',","  Kappa: 'K',     kappa: '\\\\kappa',    varkappa: '\\\\varkappa',","  Lambda: '\\\\Lambda',   lambda: '\\\\lambda',","  Mu: 'M',        mu: '\\\\mu',","  Nu: 'N',        nu: '\\\\nu',","  Xi: '\\\\Xi',       xi: '\\\\xi',","  Omicron: 'O',   omicron: 'o',","  Pi: '\\\\Pi',       pi: '\\\\pi',       varpi: '\\\\varpi',","  Rho: 'P',       rho: '\\\\rho',      varrho: '\\\\varrho',","  Sigma: '\\\\Sigma',    sigma: '\\\\sigma',    varsigma: '\\\\varsigma',","  Tau: 'T',       tau: '\\\\tau',","  Upsilon: '\\\\Upsilon',  upsilon: '\\\\upsilon',","  Phi: '\\\\Phi',      phi: '\\\\phi',      varphi: '\\\\varphi',","  Chi: 'X',       chi: '\\\\chi',","  Psi: '\\\\Psi',      psi: '\\\\psi',","  Omega: '\\\\Omega',    omega: '\\\\omega',","  //logic","  'true': '\\\\mathrm{True}',","  'false': '\\\\mathrm{False}',","  //other","  i: 'i', //TODO use \\i ??","  inf: '\\\\infty',","  Inf: '\\\\infty',","  infinity: '\\\\infty',","  Infinity: '\\\\infty',","  oo: '\\\\infty',","  lim: '\\\\lim',","  'undefined': '\\\\mathbf{?}'","};","","exports.operators = {","  'transpose': '^\\\\top',","  'factorial': '!',","  'pow': '^',","  'dotPow': '.^\\\\wedge', //TODO find ideal solution","  'unaryPlus': '+',","  'unaryMinus': '-',","  'bitNot': '~', //TODO find ideal solution","  'not': '\\\\neg',","  'multiply': '\\\\cdot',","  'divide': '\\\\frac', //TODO how to handle that properly?","  'dotMultiply': '.\\\\cdot', //TODO find ideal solution","  'dotDivide': '.:', //TODO find ideal solution","  'mod': '\\\\mod',","  'add': '+',","  'subtract': '-',","  'to': '\\\\rightarrow',","  'leftShift': '<<',","  'rightArithShift': '>>',","  'rightLogShift': '>>>',","  'equal': '=',","  'unequal': '\\\\neq',","  'smaller': '<',","  'larger': '>',","  'smallerEq': '\\\\leq',","  'largerEq': '\\\\geq',","  'bitAnd': '\\\\&',","  'bitXor': '\\\\underline{|}',","  'bitOr': '|',","  'and': '\\\\wedge',","  'xor': '\\\\veebar',","  'or': '\\\\vee'","};","","exports.defaultTemplate = '\\\\mathrm{${name}}\\\\left(${args}\\\\right)';","","var units = {","  deg: '^\\\\circ'","};","","//@param {string} name","//@param {boolean} isUnit","exports.toSymbol = function (name, isUnit) {","  isUnit = typeof isUnit === 'undefined' ? false : isUnit;","  if (isUnit) {","    if (units.hasOwnProperty(name)) {","      return units[name];","    }","    return '\\\\mathrm{' + name + '}';","  }","","  if (exports.symbols.hasOwnProperty(name)) {","    return exports.symbols[name];","  }","  else if (name.indexOf('_') !== -1) {","    //symbol with index (eg. alpha_1)","    var index = name.indexOf('_');","    return exports.toSymbol(name.substring(0, index)) + '_{'","      + exports.toSymbol(name.substring(index + 1)) + '}';","  }","  return name;","};",""],"l":{"3":1,"43":1,"77":1,"79":1,"85":1,"86":0,"87":0,"88":0,"89":0,"91":0,"94":0,"95":0,"97":0,"99":0,"100":0,"103":0}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/node/BlockNode.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/node/BlockNode.js","s":{"1":1,"2":0,"3":0,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":1,"50":1,"51":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"fnMap":{"1":{"name":"factory","line":3,"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}}},"2":{"name":"BlockNode","line":16,"loc":{"start":{"line":16,"column":2},"end":{"line":16,"column":29}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":29},"end":{"line":23,"column":46}}},"4":{"name":"(anonymous_4)","line":55,"loc":{"start":{"line":55,"column":33},"end":{"line":55,"column":55}}},"5":{"name":"(anonymous_5)","line":57,"loc":{"start":{"line":57,"column":33},"end":{"line":57,"column":50}}},"6":{"name":"(anonymous_6)","line":78,"loc":{"start":{"line":78,"column":32},"end":{"line":78,"column":52}}},"7":{"name":"(anonymous_7)","line":90,"loc":{"start":{"line":90,"column":28},"end":{"line":90,"column":48}}},"8":{"name":"(anonymous_8)","line":107,"loc":{"start":{"line":107,"column":30},"end":{"line":107,"column":42}}},"9":{"name":"(anonymous_9)","line":108,"loc":{"start":{"line":108,"column":33},"end":{"line":108,"column":50}}},"10":{"name":"(anonymous_10)","line":124,"loc":{"start":{"line":124,"column":34},"end":{"line":124,"column":53}}},"11":{"name":"(anonymous_11)","line":125,"loc":{"start":{"line":125,"column":27},"end":{"line":125,"column":44}}},"12":{"name":"(anonymous_12)","line":135,"loc":{"start":{"line":135,"column":31},"end":{"line":135,"column":50}}},"13":{"name":"(anonymous_13)","line":136,"loc":{"start":{"line":136,"column":27},"end":{"line":136,"column":44}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":142,"column":1}},"2":{"start":{"line":4,"column":2},"end":{"line":4,"column":37}},"3":{"start":{"line":5,"column":2},"end":{"line":5,"column":66}},"4":{"start":{"line":16,"column":2},"end":{"line":35,"column":3}},"5":{"start":{"line":17,"column":4},"end":{"line":19,"column":5}},"6":{"start":{"line":18,"column":6},"end":{"line":18,"column":80}},"7":{"start":{"line":22,"column":4},"end":{"line":22,"column":66}},"8":{"start":{"line":22,"column":32},"end":{"line":22,"column":66}},"9":{"start":{"line":23,"column":4},"end":{"line":34,"column":7}},"10":{"start":{"line":24,"column":6},"end":{"line":24,"column":37}},"11":{"start":{"line":25,"column":6},"end":{"line":25,"column":80}},"12":{"start":{"line":27,"column":6},"end":{"line":27,"column":93}},"13":{"start":{"line":27,"column":39},"end":{"line":27,"column":93}},"14":{"start":{"line":28,"column":6},"end":{"line":28,"column":100}},"15":{"start":{"line":28,"column":40},"end":{"line":28,"column":100}},"16":{"start":{"line":30,"column":6},"end":{"line":33,"column":7}},"17":{"start":{"line":37,"column":2},"end":{"line":37,"column":35}},"18":{"start":{"line":39,"column":2},"end":{"line":39,"column":41}},"19":{"start":{"line":41,"column":2},"end":{"line":41,"column":41}},"20":{"start":{"line":55,"column":2},"end":{"line":72,"column":4}},"21":{"start":{"line":56,"column":4},"end":{"line":56,"column":31}},"22":{"start":{"line":57,"column":4},"end":{"line":65,"column":7}},"23":{"start":{"line":58,"column":6},"end":{"line":58,"column":47}},"24":{"start":{"line":59,"column":6},"end":{"line":64,"column":7}},"25":{"start":{"line":60,"column":8},"end":{"line":60,"column":43}},"26":{"start":{"line":63,"column":8},"end":{"line":63,"column":24}},"27":{"start":{"line":67,"column":4},"end":{"line":71,"column":15}},"28":{"start":{"line":78,"column":2},"end":{"line":82,"column":4}},"29":{"start":{"line":79,"column":4},"end":{"line":81,"column":5}},"30":{"start":{"line":80,"column":6},"end":{"line":80,"column":68}},"31":{"start":{"line":90,"column":2},"end":{"line":101,"column":4}},"32":{"start":{"line":91,"column":4},"end":{"line":91,"column":20}},"33":{"start":{"line":92,"column":4},"end":{"line":99,"column":5}},"34":{"start":{"line":93,"column":6},"end":{"line":93,"column":33}},"35":{"start":{"line":94,"column":6},"end":{"line":94,"column":84}},"36":{"start":{"line":95,"column":6},"end":{"line":98,"column":8}},"37":{"start":{"line":100,"column":4},"end":{"line":100,"column":33}},"38":{"start":{"line":107,"column":2},"end":{"line":116,"column":4}},"39":{"start":{"line":108,"column":4},"end":{"line":113,"column":7}},"40":{"start":{"line":109,"column":6},"end":{"line":112,"column":8}},"41":{"start":{"line":115,"column":4},"end":{"line":115,"column":33}},"42":{"start":{"line":124,"column":2},"end":{"line":128,"column":4}},"43":{"start":{"line":125,"column":4},"end":{"line":127,"column":18}},"44":{"start":{"line":126,"column":6},"end":{"line":126,"column":71}},"45":{"start":{"line":135,"column":2},"end":{"line":139,"column":4}},"46":{"start":{"line":136,"column":4},"end":{"line":138,"column":24}},"47":{"start":{"line":137,"column":6},"end":{"line":137,"column":68}},"48":{"start":{"line":141,"column":2},"end":{"line":141,"column":19}},"49":{"start":{"line":144,"column":0},"end":{"line":144,"column":27}},"50":{"start":{"line":145,"column":0},"end":{"line":145,"column":33}},"51":{"start":{"line":146,"column":0},"end":{"line":146,"column":26}}},"branchMap":{"1":{"line":17,"type":"if","locations":[{"start":{"line":17,"column":4},"end":{"line":17,"column":4}},{"start":{"line":17,"column":4},"end":{"line":17,"column":4}}]},"2":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":4},"end":{"line":22,"column":4}},{"start":{"line":22,"column":4},"end":{"line":22,"column":4}}]},"3":{"line":24,"type":"binary-expr","locations":[{"start":{"line":24,"column":17},"end":{"line":24,"column":22}},{"start":{"line":24,"column":26},"end":{"line":24,"column":36}}]},"4":{"line":25,"type":"cond-expr","locations":[{"start":{"line":25,"column":59},"end":{"line":25,"column":72}},{"start":{"line":25,"column":75},"end":{"line":25,"column":79}}]},"5":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":20},"end":{"line":25,"column":25}},{"start":{"line":25,"column":29},"end":{"line":25,"column":56}}]},"6":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":6},"end":{"line":27,"column":6}},{"start":{"line":27,"column":6},"end":{"line":27,"column":6}}]},"7":{"line":27,"type":"binary-expr","locations":[{"start":{"line":27,"column":12},"end":{"line":27,"column":16}},{"start":{"line":27,"column":20},"end":{"line":27,"column":31}}]},"8":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":6},"end":{"line":28,"column":6}},{"start":{"line":28,"column":6},"end":{"line":28,"column":6}}]},"9":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":6},"end":{"line":59,"column":6}},{"start":{"line":59,"column":6},"end":{"line":59,"column":6}}]},"10":{"line":126,"type":"cond-expr","locations":[{"start":{"line":126,"column":61},"end":{"line":126,"column":63}},{"start":{"line":126,"column":66},"end":{"line":126,"column":69}}]},"11":{"line":137,"type":"cond-expr","locations":[{"start":{"line":137,"column":58},"end":{"line":137,"column":60}},{"start":{"line":137,"column":63},"end":{"line":137,"column":66}}]}},"code":["'use strict';","","function factory (type, config, load, typed) {","  var Node = load(require('./Node'));","  var ResultSet = load(require('../../type/resultset/ResultSet'));","","  /**","   * @constructor BlockNode","   * @extends {Node}","   * Holds a set with blocks","   * @param {Array.<{node: Node} | {node: Node, visible: boolean}>} blocks","   *            An array with blocks, where a block is constructed as an Object","   *            with properties block, which is a Node, and visible, which is","   *            a boolean. The property visible is optional and is true by default","   */","  function BlockNode(blocks) {","    if (!(this instanceof BlockNode)) {","      throw new SyntaxError('Constructor must be called with the new operator');","    }","","    // validate input, copy blocks","    if (!Array.isArray(blocks)) throw new Error('Array expected');","    this.blocks = blocks.map(function (block) {","      var node = block && block.node;","      var visible = block && block.visible !== undefined ? block.visible : true;","","      if (!(node && node.isNode))      throw new TypeError('Property \"node\" must be a Node');","      if (typeof visible !== 'boolean') throw new TypeError('Property \"visible\" must be a boolean');","","      return {","        node: node,","        visible: visible","      }","    });","  }","","  BlockNode.prototype = new Node();","","  BlockNode.prototype.type = 'BlockNode';","","  BlockNode.prototype.isBlockNode = true;","","  /**","   * Compile the node to javascript code","   * @param {Object} defs     Object which can be used to define functions","   *                          or constants globally available for the compiled","   *                          expression","   * @param {Object} args     Object with local function arguments, the key is","   *                          the name of the argument, and the value is `true`.","   *                          The object may not be mutated, but must be","   *                          extended instead.","   * @return {string} js","   * @private","   */","  BlockNode.prototype._compile = function (defs, args) {","    defs.ResultSet = ResultSet;","    var blocks = this.blocks.map(function (param) {","      var js = param.node._compile(defs, args);","      if (param.visible) {","        return 'results.push(' + js + ');';","      }","      else {","        return js + ';';","      }","    });","","    return '(function () {' +","        'var results = [];' +","        blocks.join('') +","        'return new ResultSet(results);' +","        '})()';","  };","","  /**","   * Execute a callback for each of the child blocks of this node","   * @param {function(child: Node, path: string, parent: Node)} callback","   */","  BlockNode.prototype.forEach = function (callback) {","    for (var i = 0; i < this.blocks.length; i++) {","      callback(this.blocks[i].node, 'blocks[' + i + '].node', this);","    }","  };","","  /**","   * Create a new BlockNode having it's childs be the results of calling","   * the provided callback function for each of the childs of the original node.","   * @param {function(child: Node, path: string, parent: Node): Node} callback","   * @returns {BlockNode} Returns a transformed copy of the node","   */","  BlockNode.prototype.map = function (callback) {","    var blocks = [];","    for (var i = 0; i < this.blocks.length; i++) {","      var block = this.blocks[i];","      var node = this._ifNode(callback(block.node, 'blocks[' + i + '].node', this));","      blocks[i] = {","        node: node,","        visible: block.visible","      };","    }","    return new BlockNode(blocks);","  };","","  /**","   * Create a clone of this node, a shallow copy","   * @return {BlockNode}","   */","  BlockNode.prototype.clone = function () {","    var blocks = this.blocks.map(function (block) {","      return {","        node: block.node,","        visible: block.visible","      };","    });","","    return new BlockNode(blocks);","  };","","  /**","   * Get string representation","   * @param {Object} options","   * @return {string} str","   * @override","   */","  BlockNode.prototype._toString = function (options) {","    return this.blocks.map(function (param) {","      return param.node.toString(options) + (param.visible ? '' : ';');","    }).join('\\n');","  };","","  /**","   * Get LaTeX representation","   * @param {Object} options","   * @return {string} str","   */","  BlockNode.prototype._toTex = function (options) {","    return this.blocks.map(function (param) {","      return param.node.toTex(options) + (param.visible ? '' : ';');","    }).join('\\\\;\\\\;\\n');","  };","","  return BlockNode;","}","","exports.name = 'BlockNode';","exports.path = 'expression.node';","exports.factory = factory;",""],"l":{"3":1,"4":0,"5":0,"16":1,"17":0,"18":0,"22":0,"23":0,"24":0,"25":0,"27":0,"28":0,"30":0,"37":0,"39":0,"41":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"63":0,"67":0,"78":0,"79":0,"80":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"100":0,"107":0,"108":0,"109":0,"115":0,"124":0,"125":0,"126":0,"135":0,"136":0,"137":0,"141":0,"144":1,"145":1,"146":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/node/ConditionalNode.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/node/ConditionalNode.js","s":{"1":1,"2":1,"3":1,"4":0,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":1,"63":1,"64":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0,0,0],"25":[0,0],"26":[0,0,0,0],"27":[0,0],"28":[0,0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"fnMap":{"1":{"name":"factory","line":6,"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":45}}},"2":{"name":"ConditionalNode","line":19,"loc":{"start":{"line":19,"column":2},"end":{"line":19,"column":59}}},"3":{"name":"(anonymous_3)","line":50,"loc":{"start":{"line":50,"column":39},"end":{"line":50,"column":61}}},"4":{"name":"(anonymous_4)","line":56,"loc":{"start":{"line":56,"column":25},"end":{"line":56,"column":46}}},"5":{"name":"(anonymous_5)","line":95,"loc":{"start":{"line":95,"column":38},"end":{"line":95,"column":58}}},"6":{"name":"(anonymous_6)","line":107,"loc":{"start":{"line":107,"column":34},"end":{"line":107,"column":54}}},"7":{"name":"(anonymous_7)","line":119,"loc":{"start":{"line":119,"column":36},"end":{"line":119,"column":48}}},"8":{"name":"(anonymous_8)","line":128,"loc":{"start":{"line":128,"column":40},"end":{"line":128,"column":59}}},"9":{"name":"(anonymous_9)","line":167,"loc":{"start":{"line":167,"column":37},"end":{"line":167,"column":56}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":41}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":40}},"3":{"start":{"line":6,"column":0},"end":{"line":176,"column":1}},"4":{"start":{"line":7,"column":2},"end":{"line":7,"column":37}},"5":{"start":{"line":19,"column":2},"end":{"line":30,"column":3}},"6":{"start":{"line":20,"column":4},"end":{"line":22,"column":5}},"7":{"start":{"line":21,"column":6},"end":{"line":21,"column":80}},"8":{"start":{"line":23,"column":4},"end":{"line":23,"column":100}},"9":{"start":{"line":23,"column":42},"end":{"line":23,"column":100}},"10":{"start":{"line":24,"column":4},"end":{"line":24,"column":98}},"11":{"start":{"line":24,"column":41},"end":{"line":24,"column":98}},"12":{"start":{"line":25,"column":4},"end":{"line":25,"column":100}},"13":{"start":{"line":25,"column":42},"end":{"line":25,"column":100}},"14":{"start":{"line":27,"column":4},"end":{"line":27,"column":31}},"15":{"start":{"line":28,"column":4},"end":{"line":28,"column":29}},"16":{"start":{"line":29,"column":4},"end":{"line":29,"column":31}},"17":{"start":{"line":32,"column":2},"end":{"line":32,"column":41}},"18":{"start":{"line":34,"column":2},"end":{"line":34,"column":53}},"19":{"start":{"line":36,"column":2},"end":{"line":36,"column":53}},"20":{"start":{"line":50,"column":2},"end":{"line":89,"column":4}},"21":{"start":{"line":56,"column":4},"end":{"line":82,"column":6}},"22":{"start":{"line":57,"column":6},"end":{"line":61,"column":7}},"23":{"start":{"line":60,"column":8},"end":{"line":60,"column":40}},"24":{"start":{"line":63,"column":6},"end":{"line":75,"column":7}},"25":{"start":{"line":64,"column":8},"end":{"line":66,"column":9}},"26":{"start":{"line":65,"column":10},"end":{"line":65,"column":51}},"27":{"start":{"line":68,"column":8},"end":{"line":70,"column":9}},"28":{"start":{"line":69,"column":10},"end":{"line":69,"column":63}},"29":{"start":{"line":72,"column":8},"end":{"line":74,"column":9}},"30":{"start":{"line":73,"column":10},"end":{"line":73,"column":48}},"31":{"start":{"line":77,"column":6},"end":{"line":79,"column":7}},"32":{"start":{"line":78,"column":8},"end":{"line":78,"column":21}},"33":{"start":{"line":81,"column":6},"end":{"line":81,"column":100}},"34":{"start":{"line":84,"column":4},"end":{"line":88,"column":6}},"35":{"start":{"line":95,"column":2},"end":{"line":99,"column":4}},"36":{"start":{"line":96,"column":4},"end":{"line":96,"column":48}},"37":{"start":{"line":97,"column":4},"end":{"line":97,"column":46}},"38":{"start":{"line":98,"column":4},"end":{"line":98,"column":48}},"39":{"start":{"line":107,"column":2},"end":{"line":113,"column":4}},"40":{"start":{"line":108,"column":4},"end":{"line":112,"column":6}},"41":{"start":{"line":119,"column":2},"end":{"line":121,"column":4}},"42":{"start":{"line":120,"column":4},"end":{"line":120,"column":78}},"43":{"start":{"line":128,"column":2},"end":{"line":160,"column":4}},"44":{"start":{"line":129,"column":4},"end":{"line":129,"column":86}},"45":{"start":{"line":130,"column":4},"end":{"line":130,"column":64}},"46":{"start":{"line":136,"column":4},"end":{"line":136,"column":53}},"47":{"start":{"line":137,"column":4},"end":{"line":137,"column":83}},"48":{"start":{"line":138,"column":4},"end":{"line":142,"column":5}},"49":{"start":{"line":141,"column":6},"end":{"line":141,"column":40}},"50":{"start":{"line":144,"column":4},"end":{"line":144,"column":51}},"51":{"start":{"line":145,"column":4},"end":{"line":145,"column":77}},"52":{"start":{"line":146,"column":4},"end":{"line":150,"column":5}},"53":{"start":{"line":149,"column":6},"end":{"line":149,"column":38}},"54":{"start":{"line":152,"column":4},"end":{"line":152,"column":53}},"55":{"start":{"line":153,"column":4},"end":{"line":153,"column":79}},"56":{"start":{"line":154,"column":4},"end":{"line":158,"column":5}},"57":{"start":{"line":157,"column":6},"end":{"line":157,"column":40}},"58":{"start":{"line":159,"column":4},"end":{"line":159,"column":60}},"59":{"start":{"line":167,"column":2},"end":{"line":173,"column":4}},"60":{"start":{"line":168,"column":4},"end":{"line":172,"column":54}},"61":{"start":{"line":175,"column":2},"end":{"line":175,"column":25}},"62":{"start":{"line":178,"column":0},"end":{"line":178,"column":33}},"63":{"start":{"line":179,"column":0},"end":{"line":179,"column":33}},"64":{"start":{"line":180,"column":0},"end":{"line":180,"column":26}}},"branchMap":{"1":{"line":20,"type":"if","locations":[{"start":{"line":20,"column":4},"end":{"line":20,"column":4}},{"start":{"line":20,"column":4},"end":{"line":20,"column":4}}]},"2":{"line":23,"type":"if","locations":[{"start":{"line":23,"column":4},"end":{"line":23,"column":4}},{"start":{"line":23,"column":4},"end":{"line":23,"column":4}}]},"3":{"line":23,"type":"binary-expr","locations":[{"start":{"line":23,"column":10},"end":{"line":23,"column":19}},{"start":{"line":23,"column":23},"end":{"line":23,"column":39}}]},"4":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":4},"end":{"line":24,"column":4}},{"start":{"line":24,"column":4},"end":{"line":24,"column":4}}]},"5":{"line":24,"type":"binary-expr","locations":[{"start":{"line":24,"column":10},"end":{"line":24,"column":18}},{"start":{"line":24,"column":22},"end":{"line":24,"column":37}}]},"6":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":4},"end":{"line":25,"column":4}},{"start":{"line":25,"column":4},"end":{"line":25,"column":4}}]},"7":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":10},"end":{"line":25,"column":19}},{"start":{"line":25,"column":23},"end":{"line":25,"column":39}}]},"8":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":6},"end":{"line":57,"column":6}},{"start":{"line":57,"column":6},"end":{"line":57,"column":6}}]},"9":{"line":57,"type":"binary-expr","locations":[{"start":{"line":57,"column":10},"end":{"line":57,"column":39}},{"start":{"line":58,"column":13},"end":{"line":58,"column":43}},{"start":{"line":59,"column":13},"end":{"line":59,"column":42}}]},"10":{"line":60,"type":"cond-expr","locations":[{"start":{"line":60,"column":27},"end":{"line":60,"column":31}},{"start":{"line":60,"column":34},"end":{"line":60,"column":39}}]},"11":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":6},"end":{"line":63,"column":6}},{"start":{"line":63,"column":6},"end":{"line":63,"column":6}}]},"12":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":8},"end":{"line":64,"column":8}},{"start":{"line":64,"column":8},"end":{"line":64,"column":8}}]},"13":{"line":65,"type":"cond-expr","locations":[{"start":{"line":65,"column":38},"end":{"line":65,"column":43}},{"start":{"line":65,"column":46},"end":{"line":65,"column":50}}]},"14":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":8},"end":{"line":68,"column":8}},{"start":{"line":68,"column":8},"end":{"line":68,"column":8}}]},"15":{"line":69,"type":"cond-expr","locations":[{"start":{"line":69,"column":50},"end":{"line":69,"column":54}},{"start":{"line":69,"column":57},"end":{"line":69,"column":62}}]},"16":{"line":69,"type":"binary-expr","locations":[{"start":{"line":69,"column":18},"end":{"line":69,"column":30}},{"start":{"line":69,"column":34},"end":{"line":69,"column":46}}]},"17":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":8},"end":{"line":72,"column":8}},{"start":{"line":72,"column":8},"end":{"line":72,"column":8}}]},"18":{"line":73,"type":"cond-expr","locations":[{"start":{"line":73,"column":35},"end":{"line":73,"column":39}},{"start":{"line":73,"column":42},"end":{"line":73,"column":47}}]},"19":{"line":77,"type":"if","locations":[{"start":{"line":77,"column":6},"end":{"line":77,"column":6}},{"start":{"line":77,"column":6},"end":{"line":77,"column":6}}]},"20":{"line":77,"type":"binary-expr","locations":[{"start":{"line":77,"column":10},"end":{"line":77,"column":28}},{"start":{"line":77,"column":32},"end":{"line":77,"column":55}}]},"21":{"line":129,"type":"cond-expr","locations":[{"start":{"line":129,"column":57},"end":{"line":129,"column":76}},{"start":{"line":129,"column":79},"end":{"line":129,"column":85}}]},"22":{"line":129,"type":"binary-expr","locations":[{"start":{"line":129,"column":23},"end":{"line":129,"column":30}},{"start":{"line":129,"column":34},"end":{"line":129,"column":53}}]},"23":{"line":138,"type":"if","locations":[{"start":{"line":138,"column":4},"end":{"line":138,"column":4}},{"start":{"line":138,"column":4},"end":{"line":138,"column":4}}]},"24":{"line":138,"type":"binary-expr","locations":[{"start":{"line":138,"column":9},"end":{"line":138,"column":30}},{"start":{"line":139,"column":12},"end":{"line":139,"column":50}},{"start":{"line":140,"column":13},"end":{"line":140,"column":41}},{"start":{"line":140,"column":47},"end":{"line":140,"column":80}}]},"25":{"line":146,"type":"if","locations":[{"start":{"line":146,"column":4},"end":{"line":146,"column":4}},{"start":{"line":146,"column":4},"end":{"line":146,"column":4}}]},"26":{"line":146,"type":"binary-expr","locations":[{"start":{"line":146,"column":9},"end":{"line":146,"column":30}},{"start":{"line":147,"column":12},"end":{"line":147,"column":49}},{"start":{"line":148,"column":13},"end":{"line":148,"column":36}},{"start":{"line":148,"column":42},"end":{"line":148,"column":70}}]},"27":{"line":154,"type":"if","locations":[{"start":{"line":154,"column":4},"end":{"line":154,"column":4}},{"start":{"line":154,"column":4},"end":{"line":154,"column":4}}]},"28":{"line":154,"type":"binary-expr","locations":[{"start":{"line":154,"column":9},"end":{"line":154,"column":30}},{"start":{"line":155,"column":12},"end":{"line":155,"column":50}},{"start":{"line":156,"column":13},"end":{"line":156,"column":37}},{"start":{"line":156,"column":43},"end":{"line":156,"column":72}}]}},"code":["'use strict';","","var latex = require('../../utils/latex');","var operators = require('../operators');","","function factory (type, config, load, typed) {","  var Node = load(require('./Node'));","","  /**","   * A lazy evaluating conditional operator: 'condition ? trueExpr : falseExpr'","   *","   * @param {Node} condition   Condition, must result in a boolean","   * @param {Node} trueExpr    Expression evaluated when condition is true","   * @param {Node} falseExpr   Expression evaluated when condition is true","   *","   * @constructor ConditionalNode","   * @extends {Node}","   */","  function ConditionalNode(condition, trueExpr, falseExpr) {","    if (!(this instanceof ConditionalNode)) {","      throw new SyntaxError('Constructor must be called with the new operator');","    }","    if (!(condition && condition.isNode)) throw new TypeError('Parameter condition must be a Node');","    if (!(trueExpr && trueExpr.isNode))  throw new TypeError('Parameter trueExpr must be a Node');","    if (!(falseExpr && falseExpr.isNode)) throw new TypeError('Parameter falseExpr must be a Node');","","    this.condition = condition;","    this.trueExpr = trueExpr;","    this.falseExpr = falseExpr;","  }","","  ConditionalNode.prototype = new Node();","","  ConditionalNode.prototype.type = 'ConditionalNode';","","  ConditionalNode.prototype.isConditionalNode = true;","","  /**","   * Compile the node to javascript code","   * @param {Object} defs     Object which can be used to define functions","   *                          or constants globally available for the compiled","   *                          expression","   * @param {Object} args     Object with local function arguments, the key is","   *                          the name of the argument, and the value is `true`.","   *                          The object may not be mutated, but must be","   *                          extended instead.","   * @return {string} js","   * @private","   */","  ConditionalNode.prototype._compile = function (defs, args) {","    /**","     * Test whether a condition is met","     * @param {*} condition","     * @returns {boolean} true if condition is true or non-zero, else false","     */","    defs.testCondition = function (condition) {","      if (typeof condition === 'number'","          || typeof condition === 'boolean'","          || typeof condition === 'string') {","        return condition ? true : false;","      }","","      if (condition) {","        if (condition.isBigNumber === true) {","          return condition.isZero() ? false : true;","        }","","        if (condition.isComplex === true) {","          return (condition.re || condition.im) ? true : false;","        }","","        if (condition.isUnit === true) {","          return condition.value ? true : false;","        }","      }","","      if (condition === null || condition === undefined) {","        return false;","      }","","      throw new TypeError('Unsupported type of condition \"' + defs.math['typeof'](condition) + '\"');","    };","","    return (","      'testCondition(' + this.condition._compile(defs, args) + ') ? ' +","      '( ' + this.trueExpr._compile(defs, args) + ') : ' +","      '( ' + this.falseExpr._compile(defs, args) + ')'","    );","  };","","  /**","   * Execute a callback for each of the child nodes of this node","   * @param {function(child: Node, path: string, parent: Node)} callback","   */","  ConditionalNode.prototype.forEach = function (callback) {","    callback(this.condition, 'condition', this);","    callback(this.trueExpr, 'trueExpr', this);","    callback(this.falseExpr, 'falseExpr', this);","  };","","  /**","   * Create a new ConditionalNode having it's childs be the results of calling","   * the provided callback function for each of the childs of the original node.","   * @param {function(child: Node, path: string, parent: Node): Node} callback","   * @returns {ConditionalNode} Returns a transformed copy of the node","   */","  ConditionalNode.prototype.map = function (callback) {","    return new ConditionalNode(","        this._ifNode(callback(this.condition, 'condition', this)),","        this._ifNode(callback(this.trueExpr, 'trueExpr', this)),","        this._ifNode(callback(this.falseExpr, 'falseExpr', this))","    );","  };","","  /**","   * Create a clone of this node, a shallow copy","   * @return {ConditionalNode}","   */","  ConditionalNode.prototype.clone = function () {","    return new ConditionalNode(this.condition, this.trueExpr, this.falseExpr);","  };","","  /**","   * Get string representation","   * @param {Object} options","   * @return {string} str","   */","  ConditionalNode.prototype._toString = function (options) {","    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';","    var precedence = operators.getPrecedence(this, parenthesis);","","    //Enclose Arguments in parentheses if they are an OperatorNode","    //or have lower or equal precedence","    //NOTE: enclosing all OperatorNodes in parentheses is a decision","    //purely based on aesthetics and readability","    var condition = this.condition.toString(options);","    var conditionPrecedence = operators.getPrecedence(this.condition, parenthesis);","    if ((parenthesis === 'all')","        || (this.condition.type === 'OperatorNode')","        || ((conditionPrecedence !== null) && (conditionPrecedence <= precedence))) {","      condition = '(' + condition + ')';","    }","","    var trueExpr = this.trueExpr.toString(options);","    var truePrecedence = operators.getPrecedence(this.trueExpr, parenthesis);","    if ((parenthesis === 'all')","        || (this.trueExpr.type === 'OperatorNode')","        || ((truePrecedence !== null) && (truePrecedence <= precedence))) {","      trueExpr = '(' + trueExpr + ')';","    }","","    var falseExpr = this.falseExpr.toString(options);","    var falsePrecedence = operators.getPrecedence(this.falseExpr, parenthesis);","    if ((parenthesis === 'all')","        || (this.falseExpr.type === 'OperatorNode')","        || ((falsePrecedence !== null) && (falsePrecedence <= precedence))) {","      falseExpr = '(' + falseExpr + ')';","    }","    return condition + ' ? ' + trueExpr + ' : ' + falseExpr;","  };","","  /**","   * Get LaTeX representation","   * @param {Object} options","   * @return {string} str","   */","  ConditionalNode.prototype._toTex = function (options) {","    return '\\\\begin{cases} {'","        + this.trueExpr.toTex(options) + '}, &\\\\quad{\\\\text{if }\\\\;'","        + this.condition.toTex(options)","        + '}\\\\\\\\{' + this.falseExpr.toTex(options)","        + '}, &\\\\quad{\\\\text{otherwise}}\\\\end{cases}';","  };","","  return ConditionalNode;","}","","exports.name = 'ConditionalNode';","exports.path = 'expression.node';","exports.factory = factory;",""],"l":{"3":1,"4":1,"6":1,"7":0,"19":1,"20":0,"21":0,"23":0,"24":0,"25":0,"27":0,"28":0,"29":0,"32":0,"34":0,"36":0,"50":0,"56":0,"57":0,"60":0,"63":0,"64":0,"65":0,"68":0,"69":0,"72":0,"73":0,"77":0,"78":0,"81":0,"84":0,"95":0,"96":0,"97":0,"98":0,"107":0,"108":0,"119":0,"120":0,"128":0,"129":0,"130":0,"136":0,"137":0,"138":0,"141":0,"144":0,"145":0,"146":0,"149":0,"152":0,"153":0,"154":0,"157":0,"159":0,"167":0,"168":0,"175":0,"178":1,"179":1,"180":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/operators.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/operators.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":1,"46":1,"47":1,"48":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"getPrecedence","line":218,"loc":{"start":{"line":218,"column":0},"end":{"line":218,"column":44}}},"2":{"name":"getAssociativity","line":243,"loc":{"start":{"line":243,"column":0},"end":{"line":243,"column":47}}},"3":{"name":"isAssociativeWith","line":282,"loc":{"start":{"line":282,"column":0},"end":{"line":282,"column":55}}}},"statementMap":{"1":{"start":{"line":21,"column":0},"end":{"line":207,"column":2}},"2":{"start":{"line":218,"column":0},"end":{"line":231,"column":1}},"3":{"start":{"line":219,"column":2},"end":{"line":219,"column":19}},"4":{"start":{"line":220,"column":2},"end":{"line":223,"column":3}},"5":{"start":{"line":222,"column":4},"end":{"line":222,"column":30}},"6":{"start":{"line":224,"column":2},"end":{"line":224,"column":40}},"7":{"start":{"line":225,"column":2},"end":{"line":229,"column":3}},"8":{"start":{"line":226,"column":4},"end":{"line":228,"column":5}},"9":{"start":{"line":227,"column":6},"end":{"line":227,"column":15}},"10":{"start":{"line":230,"column":2},"end":{"line":230,"column":14}},"11":{"start":{"line":243,"column":0},"end":{"line":271,"column":1}},"12":{"start":{"line":244,"column":2},"end":{"line":244,"column":19}},"13":{"start":{"line":245,"column":2},"end":{"line":248,"column":3}},"14":{"start":{"line":247,"column":4},"end":{"line":247,"column":30}},"15":{"start":{"line":249,"column":2},"end":{"line":249,"column":40}},"16":{"start":{"line":250,"column":2},"end":{"line":250,"column":47}},"17":{"start":{"line":251,"column":2},"end":{"line":254,"column":3}},"18":{"start":{"line":253,"column":4},"end":{"line":253,"column":16}},"19":{"start":{"line":255,"column":2},"end":{"line":255,"column":47}},"20":{"start":{"line":257,"column":2},"end":{"line":267,"column":3}},"21":{"start":{"line":258,"column":4},"end":{"line":260,"column":5}},"22":{"start":{"line":259,"column":6},"end":{"line":259,"column":20}},"23":{"start":{"line":261,"column":4},"end":{"line":263,"column":5}},"24":{"start":{"line":262,"column":6},"end":{"line":262,"column":21}},"25":{"start":{"line":265,"column":4},"end":{"line":266,"column":50}},"26":{"start":{"line":270,"column":2},"end":{"line":270,"column":14}},"27":{"start":{"line":282,"column":0},"end":{"line":311,"column":1}},"28":{"start":{"line":283,"column":2},"end":{"line":283,"column":16}},"29":{"start":{"line":284,"column":2},"end":{"line":284,"column":16}},"30":{"start":{"line":285,"column":2},"end":{"line":289,"column":3}},"31":{"start":{"line":287,"column":4},"end":{"line":287,"column":31}},"32":{"start":{"line":288,"column":4},"end":{"line":288,"column":31}},"33":{"start":{"line":290,"column":2},"end":{"line":290,"column":38}},"34":{"start":{"line":291,"column":2},"end":{"line":291,"column":38}},"35":{"start":{"line":292,"column":2},"end":{"line":292,"column":44}},"36":{"start":{"line":293,"column":2},"end":{"line":296,"column":3}},"37":{"start":{"line":295,"column":4},"end":{"line":295,"column":16}},"38":{"start":{"line":297,"column":2},"end":{"line":297,"column":48}},"39":{"start":{"line":299,"column":2},"end":{"line":307,"column":3}},"40":{"start":{"line":301,"column":4},"end":{"line":305,"column":5}},"41":{"start":{"line":302,"column":6},"end":{"line":304,"column":7}},"42":{"start":{"line":303,"column":8},"end":{"line":303,"column":20}},"43":{"start":{"line":306,"column":4},"end":{"line":306,"column":17}},"44":{"start":{"line":310,"column":2},"end":{"line":310,"column":14}},"45":{"start":{"line":313,"column":0},"end":{"line":313,"column":39}},"46":{"start":{"line":314,"column":0},"end":{"line":314,"column":45}},"47":{"start":{"line":315,"column":0},"end":{"line":315,"column":51}},"48":{"start":{"line":316,"column":0},"end":{"line":316,"column":53}}},"branchMap":{"1":{"line":220,"type":"if","locations":[{"start":{"line":220,"column":2},"end":{"line":220,"column":2}},{"start":{"line":220,"column":2},"end":{"line":220,"column":2}}]},"2":{"line":226,"type":"if","locations":[{"start":{"line":226,"column":4},"end":{"line":226,"column":4}},{"start":{"line":226,"column":4},"end":{"line":226,"column":4}}]},"3":{"line":245,"type":"if","locations":[{"start":{"line":245,"column":2},"end":{"line":245,"column":2}},{"start":{"line":245,"column":2},"end":{"line":245,"column":2}}]},"4":{"line":251,"type":"if","locations":[{"start":{"line":251,"column":2},"end":{"line":251,"column":2}},{"start":{"line":251,"column":2},"end":{"line":251,"column":2}}]},"5":{"line":257,"type":"if","locations":[{"start":{"line":257,"column":2},"end":{"line":257,"column":2}},{"start":{"line":257,"column":2},"end":{"line":257,"column":2}}]},"6":{"line":258,"type":"if","locations":[{"start":{"line":258,"column":4},"end":{"line":258,"column":4}},{"start":{"line":258,"column":4},"end":{"line":258,"column":4}}]},"7":{"line":261,"type":"if","locations":[{"start":{"line":261,"column":4},"end":{"line":261,"column":4}},{"start":{"line":261,"column":4},"end":{"line":261,"column":4}}]},"8":{"line":285,"type":"if","locations":[{"start":{"line":285,"column":2},"end":{"line":285,"column":2}},{"start":{"line":285,"column":2},"end":{"line":285,"column":2}}]},"9":{"line":293,"type":"if","locations":[{"start":{"line":293,"column":2},"end":{"line":293,"column":2}},{"start":{"line":293,"column":2},"end":{"line":293,"column":2}}]},"10":{"line":299,"type":"if","locations":[{"start":{"line":299,"column":2},"end":{"line":299,"column":2}},{"start":{"line":299,"column":2},"end":{"line":299,"column":2}}]},"11":{"line":299,"type":"binary-expr","locations":[{"start":{"line":299,"column":6},"end":{"line":299,"column":48}},{"start":{"line":300,"column":10},"end":{"line":300,"column":51}}]},"12":{"line":302,"type":"if","locations":[{"start":{"line":302,"column":6},"end":{"line":302,"column":6}},{"start":{"line":302,"column":6},"end":{"line":302,"column":6}}]}},"code":["'use strict'","","//list of identifiers of nodes in order of their precedence","//also contains information about left/right associativity","//and which other operator the operator is associative with","//Example:","// addition is associative with addition and subtraction, because:","// (a+b)+c=a+(b+c)","// (a+b)-c=a+(b-c)","//","// postfix operators are left associative, prefix operators ","// are right associative","//","//It's also possible to set the following properties:","// latexParens: if set to false, this node doesn't need to be enclosed","//              in parentheses when using LaTeX","// latexLeftParens: if set to false, this !OperatorNode's! ","//                  left argument doesn't need to be enclosed","//                  in parentheses","// latexRightParens: the same for the right argument","var properties = [","  { //assignment","    'AssignmentNode': {},","    'FunctionAssignmentNode': {}","  },","  { //conditional expression","    'ConditionalNode': {","      latexLeftParens: false,","      latexRightParens: false,","      latexParens: false","      //conditionals don't need parentheses in LaTeX because","      //they are 2 dimensional","    }","  },","  { //logical or","    'OperatorNode:or': {","      associativity: 'left',","      associativeWith: []","    }","","  },","  { //logical xor","    'OperatorNode:xor': {","      associativity: 'left',","      associativeWith: []","    }","  },","  { //logical and","    'OperatorNode:and': {","      associativity: 'left',","      associativeWith: []","    }","  },","  { //bitwise or","    'OperatorNode:bitOr': {","      associativity: 'left',","      associativeWith: []","    }","  },","  { //bitwise xor","    'OperatorNode:bitXor': {","      associativity: 'left',","      associativeWith: []","    }","  },","  { //bitwise and","    'OperatorNode:bitAnd': {","      associativity: 'left',","      associativeWith: []","    }","  },","  { //relational operators","    'OperatorNode:equal': {","      associativity: 'left',","      associativeWith: []","    },","    'OperatorNode:unequal': {","      associativity: 'left',","      associativeWith: []","    },","    'OperatorNode:smaller': {","      associativity: 'left',","      associativeWith: []","    },","    'OperatorNode:larger': {","      associativity: 'left',","      associativeWith: []","    },","    'OperatorNode:smallerEq': {","      associativity: 'left',","      associativeWith: []","    },","    'OperatorNode:largerEq': {","      associativity: 'left',","      associativeWith: []","    }","  },","  { //bitshift operators","    'OperatorNode:leftShift': {","      associativity: 'left',","      associativeWith: []","    },","    'OperatorNode:rightArithShift': {","      associativity: 'left',","      associativeWith: []","    },","    'OperatorNode:rightLogShift': {","      associativity: 'left',","      associativeWith: []","    }","  },","  { //unit conversion","    'OperatorNode:to': {","      associativity: 'left',","      associativeWith: []","    }","  },","  { //range","    'RangeNode': {}","  },","  { //addition, subtraction","    'OperatorNode:add': {","      associativity: 'left',","      associativeWith: ['OperatorNode:add', 'OperatorNode:subtract']","    },","    'OperatorNode:subtract': {","      associativity: 'left',","      associativeWith: []","    }","  },","  { //multiply, divide, modulus","    'OperatorNode:multiply': {","      associativity: 'left',","      associativeWith: [","        'OperatorNode:multiply',","        'OperatorNode:divide',","        'Operator:dotMultiply',","        'Operator:dotDivide'","      ]","    },","    'OperatorNode:divide': {","      associativity: 'left',","      associativeWith: [],","      latexLeftParens: false,","      latexRightParens: false,","      latexParens: false","      //fractions don't require parentheses because","      //they're 2 dimensional, so parens aren't needed","      //in LaTeX","    },","    'OperatorNode:dotMultiply': {","      associativity: 'left',","      associativeWith: [","        'OperatorNode:multiply',","        'OperatorNode:divide',","        'OperatorNode:dotMultiply',","        'OperatorNode:doDivide'","      ]","    },","    'OperatorNode:dotDivide': {","      associativity: 'left',","      associativeWith: []","    },","    'OperatorNode:mod': {","      associativity: 'left',","      associativeWith: []","    }","  },","  { //unary prefix operators","    'OperatorNode:unaryPlus': {","      associativity: 'right'","    },","    'OperatorNode:unaryMinus': {","      associativity: 'right'","    },","    'OperatorNode:bitNot': {","      associativity: 'right'","    },","    'OperatorNode:not': {","      associativity: 'right'","    }","  },","  { //exponentiation","    'OperatorNode:pow': {","      associativity: 'right',","      associativeWith: [],","      latexRightParens: false","      //the exponent doesn't need parentheses in","      //LaTeX because it's 2 dimensional","      //(it's on top)","    },","    'OperatorNode:dotPow': {","      associativity: 'right',","      associativeWith: []","    }","  },","  { //factorial","    'OperatorNode:factorial': {","      associativity: 'left'","    }","  },","  { //matrix transpose","    'OperatorNode:transpose': {","      associativity: 'left'","    }","  }","];","","/**"," * Get the precedence of a Node."," * Higher number for higher precedence, starting with 0."," * Returns null if the precedence is undefined."," *"," * @param {Node}"," * @param {string} parenthesis"," * @return {number|null}"," */","function getPrecedence (_node, parenthesis) {","  var node = _node;","  if (parenthesis !== 'keep') {","    //ParenthesisNodes are only ignored when not in 'keep' mode","    node = _node.getContent();","  }","  var identifier = node.getIdentifier();","  for (var i = 0; i < properties.length; i++) {","    if (identifier in properties[i]) {","      return i;","    }","  }","  return null;","}","","/**"," * Get the associativity of an operator (left or right)."," * Returns a string containing 'left' or 'right' or null if"," * the associativity is not defined."," *"," * @param {Node}"," * @param {string} parenthesis"," * @return {string|null}"," * @throws {Error}"," */","function getAssociativity (_node, parenthesis) {","  var node = _node;","  if (parenthesis !== 'keep') {","    //ParenthesisNodes are only ignored when not in 'keep' mode","    node = _node.getContent();","  }","  var identifier = node.getIdentifier();","  var index = getPrecedence(node, parenthesis);","  if (index === null) {","    //node isn't in the list","    return null;","  }","  var property = properties[index][identifier];","","  if (property.hasOwnProperty('associativity')) {","    if (property.associativity === 'left') {","      return 'left';","    }","    if (property.associativity === 'right') {","      return 'right';","    }","    //associativity is invalid","    throw Error('\\'' + identifier + '\\' has the invalid associativity \\''","                + property.associativity + '\\'.');","  }","","  //associativity is undefined","  return null;","}","","/**"," * Check if an operator is associative with another operator."," * Returns either true or false or null if not defined."," *"," * @param {Node} nodeA"," * @param {Node} nodeB"," * @param {string} parenthesis"," * @return {bool|null}"," */","function isAssociativeWith (nodeA, nodeB, parenthesis) {","  var a = nodeA;","  var b = nodeB;","  if (parenthesis !== 'keep') {","    //ParenthesisNodes are only ignored when not in 'keep' mode","    var a = nodeA.getContent();","    var b = nodeB.getContent();","  }","  var identifierA = a.getIdentifier();","  var identifierB = b.getIdentifier();","  var index = getPrecedence(a, parenthesis);","  if (index === null) {","    //node isn't in the list","    return null;","  }","  var property = properties[index][identifierA];","","  if (property.hasOwnProperty('associativeWith')","      && (property.associativeWith instanceof Array)) {","    for (var i = 0; i < property.associativeWith.length; i++) {","      if (property.associativeWith[i] === identifierB) {","        return true;","      }","    }","    return false;","  }","","  //associativeWith is not defined","  return null;","}","","module.exports.properties = properties;","module.exports.getPrecedence = getPrecedence;","module.exports.getAssociativity = getAssociativity;","module.exports.isAssociativeWith = isAssociativeWith;",""],"l":{"21":1,"218":1,"219":0,"220":0,"222":0,"224":0,"225":0,"226":0,"227":0,"230":0,"243":1,"244":0,"245":0,"247":0,"249":0,"250":0,"251":0,"253":0,"255":0,"257":0,"258":0,"259":0,"261":0,"262":0,"265":0,"270":0,"282":1,"283":0,"284":0,"285":0,"287":0,"288":0,"290":0,"291":0,"292":0,"293":0,"295":0,"297":0,"299":0,"301":0,"302":0,"303":0,"306":0,"310":0,"313":1,"314":1,"315":1,"316":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/node/ConstantNode.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/node/ConstantNode.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":1,"56":1,"57":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0,0,0,0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0,0],"11":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"ConstantNode","line":38,"loc":{"start":{"line":38,"column":2},"end":{"line":38,"column":42}}},"3":{"name":"(anonymous_3)","line":91,"loc":{"start":{"line":91,"column":36},"end":{"line":91,"column":58}}},"4":{"name":"(anonymous_4)","line":104,"loc":{"start":{"line":104,"column":50},"end":{"line":104,"column":74}}},"5":{"name":"(anonymous_5)","line":131,"loc":{"start":{"line":131,"column":35},"end":{"line":131,"column":55}}},"6":{"name":"(anonymous_6)","line":142,"loc":{"start":{"line":142,"column":31},"end":{"line":142,"column":51}}},"7":{"name":"(anonymous_7)","line":150,"loc":{"start":{"line":150,"column":33},"end":{"line":150,"column":45}}},"8":{"name":"(anonymous_8)","line":159,"loc":{"start":{"line":159,"column":37},"end":{"line":159,"column":56}}},"9":{"name":"(anonymous_9)","line":174,"loc":{"start":{"line":174,"column":34},"end":{"line":174,"column":53}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":48}},"2":{"start":{"line":5,"column":0},"end":{"line":195,"column":1}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":37}},"4":{"start":{"line":38,"column":2},"end":{"line":63,"column":3}},"5":{"start":{"line":39,"column":4},"end":{"line":41,"column":5}},"6":{"start":{"line":40,"column":6},"end":{"line":40,"column":80}},"7":{"start":{"line":43,"column":4},"end":{"line":58,"column":5}},"8":{"start":{"line":44,"column":6},"end":{"line":46,"column":7}},"9":{"start":{"line":45,"column":8},"end":{"line":45,"column":73}},"10":{"start":{"line":47,"column":6},"end":{"line":49,"column":7}},"11":{"start":{"line":48,"column":8},"end":{"line":48,"column":69}},"12":{"start":{"line":51,"column":6},"end":{"line":51,"column":25}},"13":{"start":{"line":52,"column":6},"end":{"line":52,"column":33}},"14":{"start":{"line":56,"column":6},"end":{"line":56,"column":30}},"15":{"start":{"line":57,"column":6},"end":{"line":57,"column":38}},"16":{"start":{"line":60,"column":4},"end":{"line":62,"column":5}},"17":{"start":{"line":61,"column":6},"end":{"line":61,"column":80}},"18":{"start":{"line":65,"column":2},"end":{"line":71,"column":4}},"19":{"start":{"line":73,"column":2},"end":{"line":73,"column":38}},"20":{"start":{"line":75,"column":2},"end":{"line":75,"column":47}},"21":{"start":{"line":77,"column":2},"end":{"line":77,"column":47}},"22":{"start":{"line":91,"column":2},"end":{"line":125,"column":4}},"23":{"start":{"line":92,"column":4},"end":{"line":124,"column":5}},"24":{"start":{"line":95,"column":8},"end":{"line":95,"column":50}},"25":{"start":{"line":96,"column":8},"end":{"line":107,"column":9}},"26":{"start":{"line":97,"column":10},"end":{"line":97,"column":56}},"27":{"start":{"line":99,"column":13},"end":{"line":107,"column":9}},"28":{"start":{"line":100,"column":10},"end":{"line":100,"column":55}},"29":{"start":{"line":104,"column":10},"end":{"line":106,"column":13}},"30":{"start":{"line":105,"column":12},"end":{"line":105,"column":49}},"31":{"start":{"line":110,"column":8},"end":{"line":110,"column":38}},"32":{"start":{"line":113,"column":8},"end":{"line":113,"column":26}},"33":{"start":{"line":116,"column":8},"end":{"line":116,"column":26}},"34":{"start":{"line":119,"column":8},"end":{"line":119,"column":26}},"35":{"start":{"line":123,"column":8},"end":{"line":123,"column":85}},"36":{"start":{"line":131,"column":2},"end":{"line":133,"column":4}},"37":{"start":{"line":142,"column":2},"end":{"line":144,"column":4}},"38":{"start":{"line":143,"column":4},"end":{"line":143,"column":24}},"39":{"start":{"line":150,"column":2},"end":{"line":152,"column":4}},"40":{"start":{"line":151,"column":4},"end":{"line":151,"column":56}},"41":{"start":{"line":159,"column":2},"end":{"line":167,"column":4}},"42":{"start":{"line":160,"column":4},"end":{"line":166,"column":5}},"43":{"start":{"line":162,"column":8},"end":{"line":162,"column":38}},"44":{"start":{"line":165,"column":8},"end":{"line":165,"column":26}},"45":{"start":{"line":174,"column":2},"end":{"line":192,"column":4}},"46":{"start":{"line":175,"column":4},"end":{"line":176,"column":14}},"47":{"start":{"line":177,"column":4},"end":{"line":191,"column":5}},"48":{"start":{"line":179,"column":8},"end":{"line":179,"column":43}},"49":{"start":{"line":182,"column":8},"end":{"line":182,"column":49}},"50":{"start":{"line":183,"column":8},"end":{"line":186,"column":9}},"51":{"start":{"line":184,"column":10},"end":{"line":185,"column":47}},"52":{"start":{"line":187,"column":8},"end":{"line":187,"column":21}},"53":{"start":{"line":190,"column":8},"end":{"line":190,"column":21}},"54":{"start":{"line":194,"column":2},"end":{"line":194,"column":22}},"55":{"start":{"line":197,"column":0},"end":{"line":197,"column":30}},"56":{"start":{"line":198,"column":0},"end":{"line":198,"column":33}},"57":{"start":{"line":199,"column":0},"end":{"line":199,"column":26}}},"branchMap":{"1":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":4},"end":{"line":39,"column":4}},{"start":{"line":39,"column":4},"end":{"line":39,"column":4}}]},"2":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":4},"end":{"line":43,"column":4}},{"start":{"line":43,"column":4},"end":{"line":43,"column":4}}]},"3":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":6},"end":{"line":44,"column":6}},{"start":{"line":44,"column":6},"end":{"line":44,"column":6}}]},"4":{"line":47,"type":"if","locations":[{"start":{"line":47,"column":6},"end":{"line":47,"column":6}},{"start":{"line":47,"column":6},"end":{"line":47,"column":6}}]},"5":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":4},"end":{"line":60,"column":4}},{"start":{"line":60,"column":4},"end":{"line":60,"column":4}}]},"6":{"line":92,"type":"switch","locations":[{"start":{"line":93,"column":6},"end":{"line":107,"column":9}},{"start":{"line":109,"column":6},"end":{"line":110,"column":38}},{"start":{"line":112,"column":6},"end":{"line":113,"column":26}},{"start":{"line":115,"column":6},"end":{"line":116,"column":26}},{"start":{"line":118,"column":6},"end":{"line":119,"column":26}},{"start":{"line":121,"column":6},"end":{"line":123,"column":85}}]},"7":{"line":96,"type":"if","locations":[{"start":{"line":96,"column":8},"end":{"line":96,"column":8}},{"start":{"line":96,"column":8},"end":{"line":96,"column":8}}]},"8":{"line":99,"type":"if","locations":[{"start":{"line":99,"column":13},"end":{"line":99,"column":13}},{"start":{"line":99,"column":13},"end":{"line":99,"column":13}}]},"9":{"line":160,"type":"switch","locations":[{"start":{"line":161,"column":6},"end":{"line":162,"column":38}},{"start":{"line":164,"column":6},"end":{"line":165,"column":26}}]},"10":{"line":177,"type":"switch","locations":[{"start":{"line":178,"column":6},"end":{"line":179,"column":43}},{"start":{"line":181,"column":6},"end":{"line":187,"column":21}},{"start":{"line":189,"column":6},"end":{"line":190,"column":21}}]},"11":{"line":183,"type":"if","locations":[{"start":{"line":183,"column":8},"end":{"line":183,"column":8}},{"start":{"line":183,"column":8},"end":{"line":183,"column":8}}]}},"code":["'use strict';","","var getType = require('../../utils/types').type;","","function factory (type, config, load, typed) {","  var Node = load(require('./Node'));","","  /**","   * A ConstantNode holds a constant value like a number or string. A ConstantNode","   * stores a stringified version of the value and uses this to compile to","   * JavaScript.","   *","   * In case of a stringified number as input, this may be compiled to a BigNumber","   * when the math instance is configured for BigNumbers.","   *","   * Usage:","   *","   *     // stringified values with type","   *     new ConstantNode('2.3', 'number');","   *     new ConstantNode('true', 'boolean');","   *     new ConstantNode('hello', 'string');","   *","   *     // non-stringified values, type will be automatically detected","   *     new ConstantNode(2.3);","   *     new ConstantNode('hello');","   *","   * @param {string | number | boolean | null | undefined} value","   *                            When valueType is provided, value must contain","   *                            an uninterpreted string representing the value.","   *                            When valueType is undefined, value can be a","   *                            number, string, boolean, null, or undefined, and","   *                            the type will be determined automatically.","   * @param {string} [valueType]  The type of value. Choose from 'number', 'string',","   *                              'boolean', 'undefined', 'null'","   * @constructor ConstantNode","   * @extends {Node}","   */","  function ConstantNode(value, valueType) {","    if (!(this instanceof ConstantNode)) {","      throw new SyntaxError('Constructor must be called with the new operator');","    }","","    if (valueType) {","      if (typeof valueType !== 'string') {","        throw new TypeError('String expected for parameter \"valueType\"');","      }","      if (typeof value !== 'string') {","        throw new TypeError('String expected for parameter \"value\"');","      }","","      this.value = value;","      this.valueType = valueType;","    }","    else {","      // stringify the value and determine the type","      this.value = value + '';","      this.valueType = getType(value);","    }","","    if (!SUPPORTED_TYPES[this.valueType]) {","      throw new TypeError('Unsupported type of value \"' + this.valueType + '\"');","    }","  }","","  var SUPPORTED_TYPES = {","    'number': true,","    'string': true,","    'boolean': true,","    'undefined': true,","    'null': true","  };","","  ConstantNode.prototype = new Node();","","  ConstantNode.prototype.type = 'ConstantNode';","","  ConstantNode.prototype.isConstantNode = true;","","  /**","   * Compile the node to javascript code","   * @param {Object} defs     Object which can be used to define functions","   *                          or constants globally available for the compiled","   *                          expression","   * @param {Object} args     Object with local function arguments, the key is","   *                          the name of the argument, and the value is `true`.","   *                          The object may not be mutated, but must be","   *                          extended instead.","   * @return {string} js","   * @private","   */","  ConstantNode.prototype._compile = function (defs, args) {","    switch (this.valueType) {","      case 'number':","        // TODO: replace this with using config.number","        var numConfig = defs.math.config().number;","        if (numConfig === 'BigNumber') {","          return 'math.bignumber(\"' + this.value + '\")';","        }","        else if (numConfig === 'Fraction') {","          return 'math.fraction(\"' + this.value + '\")';","        }","        else {","          // remove leading zeros like '003.2' which are not allowed by JavaScript","          return this.value.replace(/^(0*)[0-9]/, function (match, zeros) {","            return match.substring(zeros.length);","          });","        }","","      case 'string':","        return '\"' + this.value + '\"';","","      case 'boolean':","        return this.value;","","      case 'undefined':","        return this.value;","","      case 'null':","        return this.value;","","      default:","        // TODO: move this error to the constructor?","        throw new TypeError('Unsupported type of constant \"' + this.valueType + '\"');","    }","  };","","  /**","   * Execute a callback for each of the child nodes of this node","   * @param {function(child: Node, path: string, parent: Node)} callback","   */","  ConstantNode.prototype.forEach = function (callback) {","    // nothing to do, we don't have childs","  };","","","  /**","   * Create a new ConstantNode having it's childs be the results of calling","   * the provided callback function for each of the childs of the original node.","   * @param {function(child: Node, path: string, parent: Node) : Node} callback","   * @returns {ConstantNode} Returns a clone of the node","   */","  ConstantNode.prototype.map = function (callback) {","    return this.clone();","  };","","  /**","   * Create a clone of this node, a shallow copy","   * @return {ConstantNode}","   */","  ConstantNode.prototype.clone = function () {","    return new ConstantNode(this.value, this.valueType);","  };","","  /**","   * Get string representation","   * @param {Object} options","   * @return {string} str","   */","  ConstantNode.prototype._toString = function (options) {","    switch (this.valueType) {","      case 'string':","        return '\"' + this.value + '\"';","","      default:","        return this.value;","    }","  };","","  /**","   * Get LaTeX representation","   * @param {Object} options","   * @return {string} str","   */","  ConstantNode.prototype._toTex = function (options) {","    var value = this.value,","        index;","    switch (this.valueType) {","      case 'string':","        return '\\\\mathtt{\"' + value + '\"}';","","      case 'number':","        index = value.toLowerCase().indexOf('e');","        if (index !== -1) {","          return value.substring(0, index) + '\\\\cdot10^{' +","              value.substring(index + 1) + '}';","        }","        return value;","","      default:","        return value;","    }","  };","","  return ConstantNode;","}","","exports.name = 'ConstantNode';","exports.path = 'expression.node';","exports.factory = factory;",""],"l":{"3":1,"5":1,"6":0,"38":1,"39":0,"40":0,"43":0,"44":0,"45":0,"47":0,"48":0,"51":0,"52":0,"56":0,"57":0,"60":0,"61":0,"65":0,"73":0,"75":0,"77":0,"91":0,"92":0,"95":0,"96":0,"97":0,"99":0,"100":0,"104":0,"105":0,"110":0,"113":0,"116":0,"119":0,"123":0,"131":0,"142":0,"143":0,"150":0,"151":0,"159":0,"160":0,"162":0,"165":0,"174":0,"175":0,"177":0,"179":0,"182":0,"183":0,"184":0,"187":0,"190":0,"194":0,"197":1,"198":1,"199":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/node/IndexNode.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/node/IndexNode.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":1,"63":1,"64":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},"fnMap":{"1":{"name":"factory","line":3,"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}}},"2":{"name":"IndexNode","line":27,"loc":{"start":{"line":27,"column":2},"end":{"line":27,"column":46}}},"3":{"name":"(anonymous_3)","line":37,"loc":{"start":{"line":37,"column":29},"end":{"line":37,"column":46}}},"4":{"name":"(anonymous_4)","line":45,"loc":{"start":{"line":45,"column":21},"end":{"line":45,"column":33}}},"5":{"name":"(anonymous_5)","line":74,"loc":{"start":{"line":74,"column":33},"end":{"line":74,"column":55}}},"6":{"name":"(anonymous_6)","line":79,"loc":{"start":{"line":79,"column":17},"end":{"line":79,"column":45}}},"7":{"name":"(anonymous_7)","line":94,"loc":{"start":{"line":94,"column":41},"end":{"line":94,"column":61}}},"8":{"name":"(anonymous_8)","line":139,"loc":{"start":{"line":139,"column":32},"end":{"line":139,"column":52}}},"9":{"name":"(anonymous_9)","line":151,"loc":{"start":{"line":151,"column":28},"end":{"line":151,"column":48}}},"10":{"name":"(anonymous_10)","line":164,"loc":{"start":{"line":164,"column":30},"end":{"line":164,"column":42}}},"11":{"name":"(anonymous_11)","line":172,"loc":{"start":{"line":172,"column":41},"end":{"line":172,"column":53}}},"12":{"name":"(anonymous_12)","line":183,"loc":{"start":{"line":183,"column":42},"end":{"line":183,"column":54}}},"13":{"name":"(anonymous_13)","line":192,"loc":{"start":{"line":192,"column":34},"end":{"line":192,"column":53}}},"14":{"name":"(anonymous_14)","line":204,"loc":{"start":{"line":204,"column":31},"end":{"line":204,"column":50}}},"15":{"name":"(anonymous_15)","line":205,"loc":{"start":{"line":205,"column":41},"end":{"line":205,"column":58}}},"16":{"name":"(anonymous_16)","line":218,"loc":{"start":{"line":218,"column":34},"end":{"line":218,"column":46}}},"17":{"name":"(anonymous_17)","line":219,"loc":{"start":{"line":219,"column":32},"end":{"line":219,"column":49}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":226,"column":1}},"2":{"start":{"line":4,"column":2},"end":{"line":4,"column":37}},"3":{"start":{"line":5,"column":2},"end":{"line":5,"column":47}},"4":{"start":{"line":6,"column":2},"end":{"line":6,"column":49}},"5":{"start":{"line":8,"column":2},"end":{"line":8,"column":55}},"6":{"start":{"line":10,"column":2},"end":{"line":10,"column":30}},"7":{"start":{"line":27,"column":2},"end":{"line":49,"column":3}},"8":{"start":{"line":28,"column":4},"end":{"line":30,"column":5}},"9":{"start":{"line":29,"column":6},"end":{"line":29,"column":80}},"10":{"start":{"line":32,"column":4},"end":{"line":32,"column":33}},"11":{"start":{"line":33,"column":4},"end":{"line":33,"column":44}},"12":{"start":{"line":36,"column":4},"end":{"line":39,"column":5}},"13":{"start":{"line":37,"column":47},"end":{"line":37,"column":76}},"14":{"start":{"line":38,"column":6},"end":{"line":38,"column":88}},"15":{"start":{"line":40,"column":4},"end":{"line":42,"column":5}},"16":{"start":{"line":41,"column":6},"end":{"line":41,"column":75}},"17":{"start":{"line":45,"column":4},"end":{"line":47,"column":6}},"18":{"start":{"line":46,"column":6},"end":{"line":46,"column":95}},"19":{"start":{"line":48,"column":4},"end":{"line":48,"column":80}},"20":{"start":{"line":51,"column":2},"end":{"line":51,"column":35}},"21":{"start":{"line":53,"column":2},"end":{"line":53,"column":41}},"22":{"start":{"line":55,"column":2},"end":{"line":55,"column":41}},"23":{"start":{"line":74,"column":2},"end":{"line":133,"column":4}},"24":{"start":{"line":76,"column":4},"end":{"line":76,"column":40}},"25":{"start":{"line":79,"column":4},"end":{"line":85,"column":6}},"26":{"start":{"line":80,"column":6},"end":{"line":84,"column":8}},"27":{"start":{"line":94,"column":4},"end":{"line":130,"column":7}},"28":{"start":{"line":95,"column":6},"end":{"line":117,"column":7}},"29":{"start":{"line":96,"column":8},"end":{"line":116,"column":9}},"30":{"start":{"line":97,"column":10},"end":{"line":97,"column":31}},"31":{"start":{"line":100,"column":10},"end":{"line":107,"column":21}},"32":{"start":{"line":111,"column":10},"end":{"line":115,"column":18}},"33":{"start":{"line":118,"column":6},"end":{"line":129,"column":7}},"34":{"start":{"line":119,"column":8},"end":{"line":119,"column":29}},"35":{"start":{"line":122,"column":8},"end":{"line":125,"column":18}},"36":{"start":{"line":128,"column":8},"end":{"line":128,"column":47}},"37":{"start":{"line":132,"column":4},"end":{"line":132,"column":55}},"38":{"start":{"line":139,"column":2},"end":{"line":143,"column":4}},"39":{"start":{"line":140,"column":4},"end":{"line":142,"column":5}},"40":{"start":{"line":141,"column":6},"end":{"line":141,"column":66}},"41":{"start":{"line":151,"column":2},"end":{"line":158,"column":4}},"42":{"start":{"line":152,"column":4},"end":{"line":152,"column":24}},"43":{"start":{"line":153,"column":4},"end":{"line":155,"column":5}},"44":{"start":{"line":154,"column":6},"end":{"line":154,"column":96}},"45":{"start":{"line":157,"column":4},"end":{"line":157,"column":37}},"46":{"start":{"line":164,"column":2},"end":{"line":166,"column":4}},"47":{"start":{"line":165,"column":4},"end":{"line":165,"column":51}},"48":{"start":{"line":172,"column":2},"end":{"line":176,"column":4}},"49":{"start":{"line":173,"column":4},"end":{"line":175,"column":50}},"50":{"start":{"line":183,"column":2},"end":{"line":185,"column":4}},"51":{"start":{"line":184,"column":4},"end":{"line":184,"column":69}},"52":{"start":{"line":192,"column":2},"end":{"line":197,"column":4}},"53":{"start":{"line":194,"column":4},"end":{"line":196,"column":51}},"54":{"start":{"line":204,"column":2},"end":{"line":212,"column":4}},"55":{"start":{"line":205,"column":4},"end":{"line":207,"column":7}},"56":{"start":{"line":206,"column":6},"end":{"line":206,"column":34}},"57":{"start":{"line":209,"column":4},"end":{"line":211,"column":46}},"58":{"start":{"line":218,"column":2},"end":{"line":223,"column":4}},"59":{"start":{"line":219,"column":4},"end":{"line":222,"column":7}},"60":{"start":{"line":220,"column":6},"end":{"line":221,"column":55}},"61":{"start":{"line":225,"column":2},"end":{"line":225,"column":19}},"62":{"start":{"line":228,"column":0},"end":{"line":228,"column":27}},"63":{"start":{"line":229,"column":0},"end":{"line":229,"column":33}},"64":{"start":{"line":230,"column":0},"end":{"line":230,"column":26}}},"branchMap":{"1":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":4},"end":{"line":28,"column":4}},{"start":{"line":28,"column":4},"end":{"line":28,"column":4}}]},"2":{"line":33,"type":"binary-expr","locations":[{"start":{"line":33,"column":23},"end":{"line":33,"column":34}},{"start":{"line":33,"column":38},"end":{"line":33,"column":43}}]},"3":{"line":36,"type":"if","locations":[{"start":{"line":36,"column":4},"end":{"line":36,"column":4}},{"start":{"line":36,"column":4},"end":{"line":36,"column":4}}]},"4":{"line":36,"type":"binary-expr","locations":[{"start":{"line":36,"column":8},"end":{"line":36,"column":28}},{"start":{"line":37,"column":11},"end":{"line":37,"column":78}}]},"5":{"line":37,"type":"binary-expr","locations":[{"start":{"line":37,"column":54},"end":{"line":37,"column":59}},{"start":{"line":37,"column":63},"end":{"line":37,"column":75}}]},"6":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":4},"end":{"line":40,"column":4}},{"start":{"line":40,"column":4},"end":{"line":40,"column":4}}]},"7":{"line":40,"type":"binary-expr","locations":[{"start":{"line":40,"column":8},"end":{"line":40,"column":24}},{"start":{"line":40,"column":28},"end":{"line":40,"column":52}}]},"8":{"line":81,"type":"cond-expr","locations":[{"start":{"line":81,"column":50},"end":{"line":81,"column":66}},{"start":{"line":81,"column":69},"end":{"line":81,"column":74}}]},"9":{"line":81,"type":"binary-expr","locations":[{"start":{"line":81,"column":11},"end":{"line":81,"column":16}},{"start":{"line":81,"column":20},"end":{"line":81,"column":46}}]},"10":{"line":82,"type":"cond-expr","locations":[{"start":{"line":82,"column":50},"end":{"line":82,"column":64}},{"start":{"line":82,"column":69},"end":{"line":82,"column":72}}]},"11":{"line":82,"type":"binary-expr","locations":[{"start":{"line":82,"column":11},"end":{"line":82,"column":14}},{"start":{"line":82,"column":20},"end":{"line":82,"column":44}}]},"12":{"line":83,"type":"cond-expr","locations":[{"start":{"line":83,"column":50},"end":{"line":83,"column":65}},{"start":{"line":83,"column":69},"end":{"line":83,"column":73}}]},"13":{"line":83,"type":"binary-expr","locations":[{"start":{"line":83,"column":11},"end":{"line":83,"column":15}},{"start":{"line":83,"column":20},"end":{"line":83,"column":45}}]},"14":{"line":95,"type":"if","locations":[{"start":{"line":95,"column":6},"end":{"line":95,"column":6}},{"start":{"line":95,"column":6},"end":{"line":95,"column":6}}]},"15":{"line":95,"type":"binary-expr","locations":[{"start":{"line":95,"column":10},"end":{"line":95,"column":15}},{"start":{"line":95,"column":19},"end":{"line":95,"column":36}}]},"16":{"line":96,"type":"if","locations":[{"start":{"line":96,"column":8},"end":{"line":96,"column":8}},{"start":{"line":96,"column":8},"end":{"line":96,"column":8}}]},"17":{"line":105,"type":"cond-expr","locations":[{"start":{"line":105,"column":28},"end":{"line":105,"column":64}},{"start":{"line":105,"column":67},"end":{"line":105,"column":70}}]},"18":{"line":114,"type":"cond-expr","locations":[{"start":{"line":114,"column":28},"end":{"line":114,"column":64}},{"start":{"line":114,"column":67},"end":{"line":114,"column":70}}]},"19":{"line":118,"type":"if","locations":[{"start":{"line":118,"column":6},"end":{"line":118,"column":6}},{"start":{"line":118,"column":6},"end":{"line":118,"column":6}}]},"20":{"line":118,"type":"binary-expr","locations":[{"start":{"line":118,"column":10},"end":{"line":118,"column":28}},{"start":{"line":118,"column":32},"end":{"line":118,"column":52}}]},"21":{"line":173,"type":"binary-expr","locations":[{"start":{"line":173,"column":11},"end":{"line":173,"column":39}},{"start":{"line":174,"column":8},"end":{"line":174,"column":41}},{"start":{"line":175,"column":8},"end":{"line":175,"column":49}}]},"22":{"line":184,"type":"cond-expr","locations":[{"start":{"line":184,"column":37},"end":{"line":184,"column":61}},{"start":{"line":184,"column":64},"end":{"line":184,"column":68}}]},"23":{"line":194,"type":"cond-expr","locations":[{"start":{"line":195,"column":11},"end":{"line":195,"column":41}},{"start":{"line":196,"column":11},"end":{"line":196,"column":49}}]},"24":{"line":209,"type":"cond-expr","locations":[{"start":{"line":210,"column":11},"end":{"line":210,"column":46}},{"start":{"line":211,"column":11},"end":{"line":211,"column":44}}]},"25":{"line":220,"type":"binary-expr","locations":[{"start":{"line":220,"column":14},"end":{"line":220,"column":31}},{"start":{"line":220,"column":35},"end":{"line":220,"column":51}},{"start":{"line":221,"column":11},"end":{"line":221,"column":29}},{"start":{"line":221,"column":33},"end":{"line":221,"column":53}}]}},"code":["'use strict';","","function factory (type, config, load, typed) {","  var Node = load(require('./Node'));","  var RangeNode = load(require('./RangeNode'));","  var SymbolNode = load(require('./SymbolNode'));","","  var Range = load(require('../../type/matrix/Range'));","","  var isArray = Array.isArray;","","  /**","   * @constructor IndexNode","   * @extends Node","   *","   * Describes a subset of a matrix or an object property.","   * Cannot be used on its own, needs to be used within an AccessorNode or","   * AssignmentNode.","   *","   * @param {Node[]} dimensions","   * @param {boolean} [dotNotation=false]  Optional property describing whether","   *                                       this index was written using dot","   *                                       notation like `a.b`, or using bracket","   *                                       notation like `a[\"b\"]` (default).","   *                                       Used to stringify an IndexNode.","   */","  function IndexNode(dimensions, dotNotation) {","    if (!(this instanceof IndexNode)) {","      throw new SyntaxError('Constructor must be called with the new operator');","    }","","    this.dimensions = dimensions;","    this.dotNotation = dotNotation || false;","","    // validate input","    if (!isArray(dimensions)","        || !dimensions.every(function (range) {return range && range.isNode;})) {","      throw new TypeError('Array containing Nodes expected for parameter \"dimensions\"');","    }","    if (this.dotNotation && !this.isObjectProperty()) {","      throw new Error('dotNotation only applicable for object properties');","    }","","    // TODO: deprecated since v3, remove some day","    var deprecated = function () {","      throw new Error('Property `IndexNode.object` is deprecated, use `IndexNode.fn` instead');","    };","    Object.defineProperty(this, 'object', { get: deprecated, set: deprecated });","  }","","  IndexNode.prototype = new Node();","","  IndexNode.prototype.type = 'IndexNode';","","  IndexNode.prototype.isIndexNode = true;","","  /**","   * Compile all range nodes","   *","   * When some of the dimensions has `end` defined, the IndexNode requires","   * a variable `size` to be defined in the current closure, and must contain","   * the size of the matrix that's being handled. To check whether the `size`","   * variable is needed, call IndexNode.needsSize().","   *","   * @param {Object} defs           Object which can be used to define functions","   *                                or constants globally available for the","   *                                compiled expression","   * @param {Object} args           Object with local function arguments, the key is","   *                                the name of the argument, and the value is `true`.","   *                                The object may not be mutated, but must be","   *                                extended instead.","   * @return {string} code","   */","  IndexNode.prototype._compile = function (defs, args) {","    // args can be mutated by IndexNode, when dimensions use `end`","    var childArgs = Object.create(args);","","    // helper function to create a Range from start, step and end","    defs.range = function (start, end, step) {","      return new Range(","          (start && start.isBigNumber === true) ? start.toNumber() : start,","          (end   && end.isBigNumber === true)   ? end.toNumber()   : end,","          (step  && step.isBigNumber === true)  ? step.toNumber()  : step","      );","    };","","    // TODO: implement support for bignumber (currently bignumbers are silently","    //       reduced to numbers when changing the value to zero-based)","","    // TODO: Optimization: when the range values are ConstantNodes,","    //       we can beforehand resolve the zero-based value","","    // optimization for a simple object property","    var dimensions = this.dimensions.map(function (range, i) {","      if (range && range.isRangeNode) {","        if (range.needsEnd()) {","          childArgs.end = true;","","          // resolve end and create range","          return '(function () {' +","              'var end = size[' + i + ']; ' +","              'return range(' +","              range.start._compile(defs, childArgs) + ', ' +","              range.end._compile(defs, childArgs) + ', ' +","              (range.step ? range.step._compile(defs, childArgs) : '1') +","              '); ' +","              '})()';","        }","        else {","          // create range","          return 'range(' +","              range.start._compile(defs, childArgs) + ', ' +","              range.end._compile(defs, childArgs) + ', ' +","              (range.step ? range.step._compile(defs, childArgs) : '1') +","              ')';","        }","      }","      if (range.isSymbolNode && range.name === 'end') {","        childArgs.end = true;","","        // resolve the parameter 'end'","        return '(function () {' +","            'var end = size[' + i + ']; ' +","            'return ' + range._compile(defs, childArgs) + '; ' +","            '})()'","      }","      else { // ConstantNode","        return range._compile(defs, childArgs);","      }","    });","","    return 'math.index(' + dimensions.join(', ') + ')';","  };","","  /**","   * Execute a callback for each of the child nodes of this node","   * @param {function(child: Node, path: string, parent: Node)} callback","   */","  IndexNode.prototype.forEach = function (callback) {","    for (var i = 0; i < this.dimensions.length; i++) {","      callback(this.dimensions[i], 'dimensions[' + i + ']', this);","    }","  };","","  /**","   * Create a new IndexNode having it's childs be the results of calling","   * the provided callback function for each of the childs of the original node.","   * @param {function(child: Node, path: string, parent: Node): Node} callback","   * @returns {IndexNode} Returns a transformed copy of the node","   */","  IndexNode.prototype.map = function (callback) {","    var dimensions = [];","    for (var i = 0; i < this.dimensions.length; i++) {","      dimensions[i] = this._ifNode(callback(this.dimensions[i], 'dimensions[' + i + ']', this));","    }","","    return new IndexNode(dimensions);","  };","","  /**","   * Create a clone of this node, a shallow copy","   * @return {IndexNode}","   */","  IndexNode.prototype.clone = function () {","    return new IndexNode(this.dimensions.slice(0));","  };","","  /**","   * Test whether this IndexNode contains a single property name","   * @return {boolean}","   */","  IndexNode.prototype.isObjectProperty = function () {","    return this.dimensions.length === 1 &&","        this.dimensions[0].isConstantNode &&","        this.dimensions[0].valueType === 'string';","  };","","  /**","   * Returns the property name if IndexNode contains a property.","   * If not, returns null.","   * @return {string | null}","   */","  IndexNode.prototype.getObjectProperty = function () {","    return this.isObjectProperty() ? this.dimensions[0].value : null;","  };","","  /**","   * Get string representation","   * @param {Object} options","   * @return {string} str","   */","  IndexNode.prototype._toString = function (options) {","    // format the parameters like \"[1, 0:5]\"","    return this.dotNotation","        ? ('.' + this.getObjectProperty())","        : ('[' + this.dimensions.join(', ') + ']');","  };","","  /**","   * Get LaTeX representation","   * @param {Object} options","   * @return {string} str","   */","  IndexNode.prototype._toTex = function (options) {","    var dimensions = this.dimensions.map(function (range) {","      return range.toTex(options);","    });","","    return this.dotNotation","        ? ('.' + this.getObjectProperty() + '')","        : ('_{' + dimensions.join(',') + '}');","  };","","  /**","   * Test whether this IndexNode needs the object size, size of the Matrix","   * @return {boolean}","   */","  IndexNode.prototype.needsSize = function () {","    return this.dimensions.some(function (range) {","      return (range.isRangeNode && range.needsEnd()) ||","          (range.isSymbolNode && range.name === 'end');","    });","  };","","  return IndexNode;","}","","exports.name = 'IndexNode';","exports.path = 'expression.node';","exports.factory = factory;",""],"l":{"3":1,"4":0,"5":0,"6":0,"8":0,"10":0,"27":1,"28":0,"29":0,"32":0,"33":0,"36":0,"37":0,"38":0,"40":0,"41":0,"45":0,"46":0,"48":0,"51":0,"53":0,"55":0,"74":0,"76":0,"79":0,"80":0,"94":0,"95":0,"96":0,"97":0,"100":0,"111":0,"118":0,"119":0,"122":0,"128":0,"132":0,"139":0,"140":0,"141":0,"151":0,"152":0,"153":0,"154":0,"157":0,"164":0,"165":0,"172":0,"173":0,"183":0,"184":0,"192":0,"194":0,"204":0,"205":0,"206":0,"209":0,"218":0,"219":0,"220":0,"225":0,"228":1,"229":1,"230":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/node/FunctionAssignmentNode.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/node/FunctionAssignmentNode.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":1,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":1,"60":1,"61":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0,0],"8":[0,0,0],"9":[0,0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},"fnMap":{"1":{"name":"factory","line":7,"loc":{"start":{"line":7,"column":0},"end":{"line":7,"column":45}}},"2":{"name":"FunctionAssignmentNode","line":23,"loc":{"start":{"line":23,"column":2},"end":{"line":23,"column":54}}},"3":{"name":"(anonymous_3)","line":35,"loc":{"start":{"line":35,"column":29},"end":{"line":35,"column":46}}},"4":{"name":"(anonymous_4)","line":38,"loc":{"start":{"line":38,"column":28},"end":{"line":38,"column":45}}},"5":{"name":"(anonymous_5)","line":62,"loc":{"start":{"line":62,"column":46},"end":{"line":62,"column":68}}},"6":{"name":"(anonymous_6)","line":68,"loc":{"start":{"line":68,"column":24},"end":{"line":68,"column":44}}},"7":{"name":"(anonymous_7)","line":91,"loc":{"start":{"line":91,"column":45},"end":{"line":91,"column":65}}},"8":{"name":"(anonymous_8)","line":101,"loc":{"start":{"line":101,"column":41},"end":{"line":101,"column":61}}},"9":{"name":"(anonymous_9)","line":111,"loc":{"start":{"line":111,"column":43},"end":{"line":111,"column":55}}},"10":{"name":"needParenthesis","line":121,"loc":{"start":{"line":121,"column":2},"end":{"line":121,"column":46}}},"11":{"name":"(anonymous_11)","line":134,"loc":{"start":{"line":134,"column":47},"end":{"line":134,"column":66}}},"12":{"name":"(anonymous_12)","line":148,"loc":{"start":{"line":148,"column":44},"end":{"line":148,"column":63}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":38}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":41}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":40}},"4":{"start":{"line":7,"column":0},"end":{"line":160,"column":1}},"5":{"start":{"line":8,"column":2},"end":{"line":8,"column":37}},"6":{"start":{"line":9,"column":2},"end":{"line":9,"column":73}},"7":{"start":{"line":23,"column":2},"end":{"line":42,"column":3}},"8":{"start":{"line":24,"column":4},"end":{"line":26,"column":5}},"9":{"start":{"line":25,"column":6},"end":{"line":25,"column":80}},"10":{"start":{"line":29,"column":4},"end":{"line":29,"column":94}},"11":{"start":{"line":29,"column":34},"end":{"line":29,"column":94}},"12":{"start":{"line":30,"column":4},"end":{"line":30,"column":124}},"13":{"start":{"line":30,"column":33},"end":{"line":30,"column":124}},"14":{"start":{"line":31,"column":4},"end":{"line":31,"column":90}},"15":{"start":{"line":31,"column":32},"end":{"line":31,"column":90}},"16":{"start":{"line":32,"column":4},"end":{"line":32,"column":105}},"17":{"start":{"line":32,"column":26},"end":{"line":32,"column":105}},"18":{"start":{"line":34,"column":4},"end":{"line":34,"column":21}},"19":{"start":{"line":35,"column":4},"end":{"line":37,"column":7}},"20":{"start":{"line":36,"column":6},"end":{"line":36,"column":42}},"21":{"start":{"line":38,"column":4},"end":{"line":40,"column":7}},"22":{"start":{"line":39,"column":6},"end":{"line":39,"column":41}},"23":{"start":{"line":41,"column":4},"end":{"line":41,"column":21}},"24":{"start":{"line":44,"column":2},"end":{"line":44,"column":48}},"25":{"start":{"line":46,"column":2},"end":{"line":46,"column":67}},"26":{"start":{"line":48,"column":2},"end":{"line":48,"column":67}},"27":{"start":{"line":62,"column":2},"end":{"line":85,"column":4}},"28":{"start":{"line":63,"column":4},"end":{"line":63,"column":23}},"29":{"start":{"line":64,"column":4},"end":{"line":64,"column":43}},"30":{"start":{"line":67,"column":4},"end":{"line":67,"column":40}},"31":{"start":{"line":68,"column":4},"end":{"line":70,"column":7}},"32":{"start":{"line":69,"column":6},"end":{"line":69,"column":33}},"33":{"start":{"line":73,"column":4},"end":{"line":73,"column":53}},"34":{"start":{"line":75,"column":4},"end":{"line":84,"column":18}},"35":{"start":{"line":91,"column":2},"end":{"line":93,"column":4}},"36":{"start":{"line":92,"column":4},"end":{"line":92,"column":38}},"37":{"start":{"line":101,"column":2},"end":{"line":105,"column":4}},"38":{"start":{"line":102,"column":4},"end":{"line":102,"column":63}},"39":{"start":{"line":104,"column":4},"end":{"line":104,"column":77}},"40":{"start":{"line":111,"column":2},"end":{"line":113,"column":4}},"41":{"start":{"line":112,"column":4},"end":{"line":112,"column":82}},"42":{"start":{"line":121,"column":2},"end":{"line":127,"column":3}},"43":{"start":{"line":122,"column":4},"end":{"line":122,"column":64}},"44":{"start":{"line":123,"column":4},"end":{"line":123,"column":73}},"45":{"start":{"line":125,"column":4},"end":{"line":126,"column":71}},"46":{"start":{"line":134,"column":2},"end":{"line":141,"column":4}},"47":{"start":{"line":135,"column":4},"end":{"line":135,"column":86}},"48":{"start":{"line":136,"column":4},"end":{"line":136,"column":43}},"49":{"start":{"line":137,"column":4},"end":{"line":139,"column":5}},"50":{"start":{"line":138,"column":6},"end":{"line":138,"column":30}},"51":{"start":{"line":140,"column":4},"end":{"line":140,"column":68}},"52":{"start":{"line":148,"column":2},"end":{"line":157,"column":4}},"53":{"start":{"line":149,"column":4},"end":{"line":149,"column":86}},"54":{"start":{"line":150,"column":4},"end":{"line":150,"column":40}},"55":{"start":{"line":151,"column":4},"end":{"line":153,"column":5}},"56":{"start":{"line":152,"column":6},"end":{"line":152,"column":43}},"57":{"start":{"line":155,"column":4},"end":{"line":156,"column":87}},"58":{"start":{"line":159,"column":2},"end":{"line":159,"column":32}},"59":{"start":{"line":161,"column":0},"end":{"line":161,"column":40}},"60":{"start":{"line":162,"column":0},"end":{"line":162,"column":33}},"61":{"start":{"line":163,"column":0},"end":{"line":163,"column":26}}},"branchMap":{"1":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":4},"end":{"line":24,"column":4}},{"start":{"line":24,"column":4},"end":{"line":24,"column":4}}]},"2":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":4},"end":{"line":29,"column":4}},{"start":{"line":29,"column":4},"end":{"line":29,"column":4}}]},"3":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":4},"end":{"line":30,"column":4}},{"start":{"line":30,"column":4},"end":{"line":30,"column":4}}]},"4":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":4},"end":{"line":31,"column":4}},{"start":{"line":31,"column":4},"end":{"line":31,"column":4}}]},"5":{"line":31,"type":"binary-expr","locations":[{"start":{"line":31,"column":10},"end":{"line":31,"column":14}},{"start":{"line":31,"column":18},"end":{"line":31,"column":29}}]},"6":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":4},"end":{"line":32,"column":4}},{"start":{"line":32,"column":4},"end":{"line":32,"column":4}}]},"7":{"line":36,"type":"binary-expr","locations":[{"start":{"line":36,"column":13},"end":{"line":36,"column":18}},{"start":{"line":36,"column":22},"end":{"line":36,"column":32}},{"start":{"line":36,"column":36},"end":{"line":36,"column":41}}]},"8":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":13},"end":{"line":39,"column":18}},{"start":{"line":39,"column":22},"end":{"line":39,"column":32}},{"start":{"line":39,"column":36},"end":{"line":39,"column":41}}]},"9":{"line":125,"type":"binary-expr","locations":[{"start":{"line":125,"column":12},"end":{"line":125,"column":33}},{"start":{"line":126,"column":11},"end":{"line":126,"column":34}},{"start":{"line":126,"column":40},"end":{"line":126,"column":68}}]},"10":{"line":135,"type":"cond-expr","locations":[{"start":{"line":135,"column":57},"end":{"line":135,"column":76}},{"start":{"line":135,"column":79},"end":{"line":135,"column":85}}]},"11":{"line":135,"type":"binary-expr","locations":[{"start":{"line":135,"column":23},"end":{"line":135,"column":30}},{"start":{"line":135,"column":34},"end":{"line":135,"column":53}}]},"12":{"line":137,"type":"if","locations":[{"start":{"line":137,"column":4},"end":{"line":137,"column":4}},{"start":{"line":137,"column":4},"end":{"line":137,"column":4}}]},"13":{"line":149,"type":"cond-expr","locations":[{"start":{"line":149,"column":57},"end":{"line":149,"column":76}},{"start":{"line":149,"column":79},"end":{"line":149,"column":85}}]},"14":{"line":149,"type":"binary-expr","locations":[{"start":{"line":149,"column":23},"end":{"line":149,"column":30}},{"start":{"line":149,"column":34},"end":{"line":149,"column":53}}]},"15":{"line":151,"type":"if","locations":[{"start":{"line":151,"column":4},"end":{"line":151,"column":4}},{"start":{"line":151,"column":4},"end":{"line":151,"column":4}}]}},"code":["'use strict';","","var keywords = require('../keywords');","var latex = require('../../utils/latex');","var operators = require('../operators');","","function factory (type, config, load, typed) {","  var Node = load(require('./Node'));","  var setSafeProperty = load(require('./utils/customs')).setSafeProperty;","","  /**","   * @constructor FunctionAssignmentNode","   * @extends {Node}","   * Function assignment","   *","   * @param {string} name           Function name","   * @param {string[] | Array.<{name: string, type: string}>} params","   *                                Array with function parameter names, or an","   *                                array with objects containing the name","   *                                and type of the parameter","   * @param {Node} expr             The function expression","   */","  function FunctionAssignmentNode(name, params, expr) {","    if (!(this instanceof FunctionAssignmentNode)) {","      throw new SyntaxError('Constructor must be called with the new operator');","    }","","    // validate input","    if (typeof name !== 'string') throw new TypeError('String expected for parameter \"name\"');","    if (!Array.isArray(params))  throw new TypeError('Array containing strings or objects expected for parameter \"params\"');","    if (!(expr && expr.isNode)) throw new TypeError('Node expected for parameter \"expr\"');","    if (name in keywords) throw new Error('Illegal function name, \"' + name + '\" is a reserved keyword');","","    this.name = name;","    this.params = params.map(function (param) {","      return param && param.name || param;","    });","    this.types = params.map(function (param) {","      return param && param.type || 'any'","    });","    this.expr = expr;","  }","","  FunctionAssignmentNode.prototype = new Node();","","  FunctionAssignmentNode.prototype.type = 'FunctionAssignmentNode';","","  FunctionAssignmentNode.prototype.isFunctionAssignmentNode = true;","","  /**","   * Compile the node to javascript code","   * @param {Object} defs     Object which can be used to define functions","   *                          or constants globally available for the compiled","   *                          expression","   * @param {Object} args     Object with local function arguments, the key is","   *                          the name of the argument, and the value is `true`.","   *                          The object may not be mutated, but must be","   *                          extended instead.","   * @return {string} js","   * @private","   */","  FunctionAssignmentNode.prototype._compile = function (defs, args) {","    defs.typed = typed;","    defs.setSafeProperty = setSafeProperty;","","    // we extend the original args and add the args to the child object","    var childArgs = Object.create(args);","    this.params.forEach(function (variable) {","      childArgs[variable] = true;","    });","","    // compile the function expression with the child args","    var jsExpr = this.expr._compile(defs, childArgs);","","    return 'setSafeProperty(scope, \"' + this.name + '\", ' +","        '  (function () {' +","        '    var fn = typed(\"' + this.name + '\", {' +","        '      \"' + this.types.join(',') + '\": function (' + this.params.join(',') + ') {' +","        '        return ' + jsExpr + '' +","        '      }' +","        '    });' +","        '    fn.syntax = \"' + this.name + '(' + this.params.join(', ') + ')\";' +","        '    return fn;' +","        '  })())';","  };","","  /**","   * Execute a callback for each of the child nodes of this node","   * @param {function(child: Node, path: string, parent: Node)} callback","   */","  FunctionAssignmentNode.prototype.forEach = function (callback) {","    callback(this.expr, 'expr', this);","  };","","  /**","   * Create a new FunctionAssignmentNode having it's childs be the results of calling","   * the provided callback function for each of the childs of the original node.","   * @param {function(child: Node, path: string, parent: Node): Node} callback","   * @returns {FunctionAssignmentNode} Returns a transformed copy of the node","   */","  FunctionAssignmentNode.prototype.map = function (callback) {","    var expr = this._ifNode(callback(this.expr, 'expr', this));","","    return new FunctionAssignmentNode(this.name, this.params.slice(0), expr);","  };","","  /**","   * Create a clone of this node, a shallow copy","   * @return {FunctionAssignmentNode}","   */","  FunctionAssignmentNode.prototype.clone = function () {","    return new FunctionAssignmentNode(this.name, this.params.slice(0), this.expr);","  };","","  /**","   * Is parenthesis needed?","   * @param {Node} node","   * @param {Object} parenthesis","   * @private","   */","  function needParenthesis(node, parenthesis) {","    var precedence = operators.getPrecedence(node, parenthesis);","    var exprPrecedence = operators.getPrecedence(node.expr, parenthesis);","","    return (parenthesis === 'all')","      || ((exprPrecedence !== null) && (exprPrecedence <= precedence));","  }","","  /**","   * get string representation","   * @param {Object} options","   * @return {string} str","   */","  FunctionAssignmentNode.prototype._toString = function (options) {","    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';","    var expr = this.expr.toString(options);","    if (needParenthesis(this, parenthesis)) {","      expr = '(' + expr + ')';","    }","    return this.name + '(' + this.params.join(', ') + ') = ' + expr;","  };","","  /**","   * get LaTeX representation","   * @param {Object} options","   * @return {string} str","   */","  FunctionAssignmentNode.prototype._toTex = function (options) {","    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';","    var expr = this.expr.toTex(options);","    if (needParenthesis(this, parenthesis)) {","      expr = '\\\\left(' + expr + '\\\\right)';","    }","","    return '\\\\mathrm{' + this.name","        + '}\\\\left(' + this.params.map(latex.toSymbol).join(',') + '\\\\right):=' + expr;","  };","","  return FunctionAssignmentNode;","}","exports.name = 'FunctionAssignmentNode';","exports.path = 'expression.node';","exports.factory = factory;",""],"l":{"3":1,"4":1,"5":1,"7":1,"8":0,"9":0,"23":1,"24":0,"25":0,"29":0,"30":0,"31":0,"32":0,"34":0,"35":0,"36":0,"38":0,"39":0,"41":0,"44":0,"46":0,"48":0,"62":0,"63":0,"64":0,"67":0,"68":0,"69":0,"73":0,"75":0,"91":0,"92":0,"101":0,"102":0,"104":0,"111":0,"112":0,"121":1,"122":0,"123":0,"125":0,"134":0,"135":0,"136":0,"137":0,"138":0,"140":0,"148":0,"149":0,"150":0,"151":0,"152":0,"155":0,"159":0,"161":1,"162":1,"163":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/keywords.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/keywords.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":6,"column":2}}},"branchMap":{},"code":["'use strict';","","// Reserved keywords not allowed to use in the parser","module.exports = {","  end: true","};",""],"l":{"4":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/node/FunctionNode.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/node/FunctionNode.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":1,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":1,"158":1,"159":1,"160":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0,0],"31":[0,0],"32":[0,0],"33":[0,0,0,0],"34":[0,0,0],"35":[0,0],"36":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0},"fnMap":{"1":{"name":"factory","line":6,"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":51}}},"2":{"name":"FunctionNode","line":19,"loc":{"start":{"line":19,"column":2},"end":{"line":19,"column":34}}},"3":{"name":"(anonymous_3)","line":31,"loc":{"start":{"line":31,"column":23},"end":{"line":31,"column":38}}},"4":{"name":"(anonymous_4)","line":40,"loc":{"start":{"line":40,"column":11},"end":{"line":40,"column":23}}},"5":{"name":"(anonymous_5)","line":43,"loc":{"start":{"line":43,"column":11},"end":{"line":43,"column":23}}},"6":{"name":"(anonymous_6)","line":49,"loc":{"start":{"line":49,"column":21},"end":{"line":49,"column":33}}},"7":{"name":"(anonymous_7)","line":73,"loc":{"start":{"line":73,"column":36},"end":{"line":73,"column":58}}},"8":{"name":"(anonymous_8)","line":76,"loc":{"start":{"line":76,"column":31},"end":{"line":76,"column":46}}},"9":{"name":"(anonymous_9)","line":146,"loc":{"start":{"line":146,"column":41},"end":{"line":146,"column":63}}},"10":{"name":"(anonymous_10)","line":156,"loc":{"start":{"line":156,"column":15},"end":{"line":156,"column":30}}},"11":{"name":"(anonymous_11)","line":171,"loc":{"start":{"line":171,"column":51},"end":{"line":171,"column":67}}},"12":{"name":"(anonymous_12)","line":188,"loc":{"start":{"line":188,"column":35},"end":{"line":188,"column":55}}},"13":{"name":"(anonymous_13)","line":200,"loc":{"start":{"line":200,"column":31},"end":{"line":200,"column":51}}},"14":{"name":"(anonymous_14)","line":213,"loc":{"start":{"line":213,"column":33},"end":{"line":213,"column":45}}},"15":{"name":"(anonymous_15)","line":233,"loc":{"start":{"line":233,"column":36},"end":{"line":233,"column":55}}},"16":{"name":"(anonymous_16)","line":254,"loc":{"start":{"line":254,"column":37},"end":{"line":254,"column":56}}},"17":{"name":"(anonymous_17)","line":255,"loc":{"start":{"line":255,"column":29},"end":{"line":255,"column":44}}},"18":{"name":"expandTemplate","line":271,"loc":{"start":{"line":271,"column":2},"end":{"line":271,"column":51}}},"19":{"name":"(anonymous_19)","line":306,"loc":{"start":{"line":306,"column":38},"end":{"line":306,"column":60}}},"20":{"name":"(anonymous_20)","line":351,"loc":{"start":{"line":351,"column":33},"end":{"line":351,"column":52}}},"21":{"name":"(anonymous_21)","line":371,"loc":{"start":{"line":371,"column":34},"end":{"line":371,"column":53}}},"22":{"name":"(anonymous_22)","line":372,"loc":{"start":{"line":372,"column":29},"end":{"line":372,"column":44}}},"23":{"name":"(anonymous_23)","line":413,"loc":{"start":{"line":413,"column":41},"end":{"line":413,"column":53}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":41}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":50}},"3":{"start":{"line":6,"column":0},"end":{"line":418,"column":1}},"4":{"start":{"line":7,"column":2},"end":{"line":7,"column":37}},"5":{"start":{"line":8,"column":2},"end":{"line":8,"column":49}},"6":{"start":{"line":9,"column":2},"end":{"line":9,"column":79}},"7":{"start":{"line":19,"column":2},"end":{"line":53,"column":3}},"8":{"start":{"line":20,"column":4},"end":{"line":22,"column":5}},"9":{"start":{"line":21,"column":6},"end":{"line":21,"column":80}},"10":{"start":{"line":24,"column":4},"end":{"line":26,"column":5}},"11":{"start":{"line":25,"column":6},"end":{"line":25,"column":30}},"12":{"start":{"line":29,"column":4},"end":{"line":29,"column":82}},"13":{"start":{"line":29,"column":27},"end":{"line":29,"column":82}},"14":{"start":{"line":30,"column":4},"end":{"line":33,"column":5}},"15":{"start":{"line":31,"column":39},"end":{"line":31,"column":64}},"16":{"start":{"line":32,"column":6},"end":{"line":32,"column":82}},"17":{"start":{"line":35,"column":4},"end":{"line":35,"column":17}},"18":{"start":{"line":36,"column":4},"end":{"line":36,"column":27}},"19":{"start":{"line":39,"column":4},"end":{"line":46,"column":7}},"20":{"start":{"line":41,"column":8},"end":{"line":41,"column":34}},"21":{"start":{"line":44,"column":8},"end":{"line":44,"column":71}},"22":{"start":{"line":49,"column":4},"end":{"line":51,"column":6}},"23":{"start":{"line":50,"column":6},"end":{"line":50,"column":101}},"24":{"start":{"line":52,"column":4},"end":{"line":52,"column":80}},"25":{"start":{"line":55,"column":2},"end":{"line":55,"column":38}},"26":{"start":{"line":57,"column":2},"end":{"line":57,"column":47}},"27":{"start":{"line":59,"column":2},"end":{"line":59,"column":47}},"28":{"start":{"line":73,"column":2},"end":{"line":129,"column":4}},"29":{"start":{"line":75,"column":4},"end":{"line":75,"column":44}},"30":{"start":{"line":76,"column":4},"end":{"line":78,"column":7}},"31":{"start":{"line":77,"column":6},"end":{"line":77,"column":38}},"32":{"start":{"line":79,"column":4},"end":{"line":79,"column":49}},"33":{"start":{"line":80,"column":4},"end":{"line":80,"column":17}},"34":{"start":{"line":82,"column":4},"end":{"line":128,"column":5}},"35":{"start":{"line":84,"column":6},"end":{"line":84,"column":30}},"36":{"start":{"line":85,"column":6},"end":{"line":85,"column":31}},"37":{"start":{"line":86,"column":6},"end":{"line":86,"column":69}},"38":{"start":{"line":88,"column":6},"end":{"line":98,"column":7}},"39":{"start":{"line":90,"column":8},"end":{"line":90,"column":54}},"40":{"start":{"line":91,"column":8},"end":{"line":91,"column":35}},"41":{"start":{"line":93,"column":8},"end":{"line":93,"column":66}},"42":{"start":{"line":97,"column":8},"end":{"line":97,"column":52}},"43":{"start":{"line":100,"column":9},"end":{"line":128,"column":5}},"44":{"start":{"line":102,"column":6},"end":{"line":102,"column":52}},"45":{"start":{"line":103,"column":6},"end":{"line":103,"column":33}},"46":{"start":{"line":104,"column":6},"end":{"line":104,"column":50}},"47":{"start":{"line":106,"column":6},"end":{"line":106,"column":57}},"48":{"start":{"line":107,"column":6},"end":{"line":107,"column":51}},"49":{"start":{"line":109,"column":6},"end":{"line":115,"column":17}},"50":{"start":{"line":119,"column":6},"end":{"line":119,"column":52}},"51":{"start":{"line":120,"column":6},"end":{"line":120,"column":33}},"52":{"start":{"line":122,"column":6},"end":{"line":127,"column":17}},"53":{"start":{"line":146,"column":2},"end":{"line":163,"column":4}},"54":{"start":{"line":147,"column":4},"end":{"line":147,"column":34}},"55":{"start":{"line":148,"column":4},"end":{"line":162,"column":5}},"56":{"start":{"line":149,"column":6},"end":{"line":149,"column":21}},"57":{"start":{"line":153,"column":6},"end":{"line":153,"column":27}},"58":{"start":{"line":155,"column":6},"end":{"line":159,"column":22}},"59":{"start":{"line":157,"column":12},"end":{"line":157,"column":43}},"60":{"start":{"line":161,"column":6},"end":{"line":161,"column":59}},"61":{"start":{"line":171,"column":2},"end":{"line":182,"column":4}},"62":{"start":{"line":172,"column":4},"end":{"line":172,"column":17}},"63":{"start":{"line":173,"column":4},"end":{"line":173,"column":14}},"64":{"start":{"line":175,"column":4},"end":{"line":179,"column":29}},"65":{"start":{"line":176,"column":6},"end":{"line":176,"column":28}},"66":{"start":{"line":177,"column":6},"end":{"line":177,"column":10}},"67":{"start":{"line":181,"column":4},"end":{"line":181,"column":20}},"68":{"start":{"line":188,"column":2},"end":{"line":192,"column":4}},"69":{"start":{"line":189,"column":4},"end":{"line":191,"column":5}},"70":{"start":{"line":190,"column":6},"end":{"line":190,"column":54}},"71":{"start":{"line":200,"column":2},"end":{"line":207,"column":4}},"72":{"start":{"line":201,"column":4},"end":{"line":201,"column":35}},"73":{"start":{"line":202,"column":4},"end":{"line":202,"column":18}},"74":{"start":{"line":203,"column":4},"end":{"line":205,"column":5}},"75":{"start":{"line":204,"column":6},"end":{"line":204,"column":78}},"76":{"start":{"line":206,"column":4},"end":{"line":206,"column":38}},"77":{"start":{"line":213,"column":2},"end":{"line":215,"column":4}},"78":{"start":{"line":214,"column":4},"end":{"line":214,"column":57}},"79":{"start":{"line":219,"column":2},"end":{"line":219,"column":53}},"80":{"start":{"line":233,"column":2},"end":{"line":247,"column":4}},"81":{"start":{"line":234,"column":4},"end":{"line":234,"column":21}},"82":{"start":{"line":235,"column":4},"end":{"line":235,"column":41}},"83":{"start":{"line":236,"column":4},"end":{"line":239,"column":5}},"84":{"start":{"line":238,"column":6},"end":{"line":238,"column":58}},"85":{"start":{"line":241,"column":4},"end":{"line":243,"column":5}},"86":{"start":{"line":242,"column":6},"end":{"line":242,"column":26}},"87":{"start":{"line":246,"column":4},"end":{"line":246,"column":44}},"88":{"start":{"line":254,"column":2},"end":{"line":261,"column":4}},"89":{"start":{"line":255,"column":4},"end":{"line":257,"column":7}},"90":{"start":{"line":256,"column":6},"end":{"line":256,"column":35}},"91":{"start":{"line":260,"column":4},"end":{"line":260,"column":67}},"92":{"start":{"line":271,"column":2},"end":{"line":334,"column":3}},"93":{"start":{"line":272,"column":4},"end":{"line":272,"column":19}},"94":{"start":{"line":276,"column":4},"end":{"line":276,"column":91}},"95":{"start":{"line":278,"column":4},"end":{"line":278,"column":21}},"96":{"start":{"line":279,"column":4},"end":{"line":279,"column":14}},"97":{"start":{"line":280,"column":4},"end":{"line":330,"column":5}},"98":{"start":{"line":282,"column":6},"end":{"line":282,"column":57}},"99":{"start":{"line":283,"column":6},"end":{"line":283,"column":29}},"100":{"start":{"line":285,"column":6},"end":{"line":329,"column":7}},"101":{"start":{"line":286,"column":8},"end":{"line":286,"column":21}},"102":{"start":{"line":287,"column":8},"end":{"line":287,"column":19}},"103":{"start":{"line":290,"column":8},"end":{"line":290,"column":36}},"104":{"start":{"line":291,"column":8},"end":{"line":291,"column":38}},"105":{"start":{"line":292,"column":8},"end":{"line":294,"column":9}},"106":{"start":{"line":293,"column":10},"end":{"line":293,"column":90}},"107":{"start":{"line":295,"column":8},"end":{"line":328,"column":9}},"108":{"start":{"line":296,"column":10},"end":{"line":319,"column":11}},"109":{"start":{"line":298,"column":14},"end":{"line":298,"column":32}},"110":{"start":{"line":299,"column":14},"end":{"line":299,"column":20}},"111":{"start":{"line":301,"column":14},"end":{"line":315,"column":15}},"112":{"start":{"line":302,"column":16},"end":{"line":302,"column":49}},"113":{"start":{"line":304,"column":19},"end":{"line":315,"column":15}},"114":{"start":{"line":306,"column":16},"end":{"line":311,"column":29}},"115":{"start":{"line":307,"column":18},"end":{"line":309,"column":19}},"116":{"start":{"line":308,"column":20},"end":{"line":308,"column":46}},"117":{"start":{"line":310,"column":18},"end":{"line":310,"column":98}},"118":{"start":{"line":314,"column":16},"end":{"line":314,"column":109}},"119":{"start":{"line":316,"column":14},"end":{"line":316,"column":20}},"120":{"start":{"line":318,"column":14},"end":{"line":318,"column":107}},"121":{"start":{"line":322,"column":10},"end":{"line":327,"column":11}},"122":{"start":{"line":323,"column":12},"end":{"line":323,"column":55}},"123":{"start":{"line":326,"column":12},"end":{"line":326,"column":95}},"124":{"start":{"line":331,"column":4},"end":{"line":331,"column":38}},"125":{"start":{"line":333,"column":4},"end":{"line":333,"column":17}},"126":{"start":{"line":338,"column":2},"end":{"line":338,"column":47}},"127":{"start":{"line":351,"column":2},"end":{"line":364,"column":4}},"128":{"start":{"line":352,"column":4},"end":{"line":352,"column":18}},"129":{"start":{"line":353,"column":4},"end":{"line":356,"column":5}},"130":{"start":{"line":355,"column":6},"end":{"line":355,"column":60}},"131":{"start":{"line":358,"column":4},"end":{"line":360,"column":5}},"132":{"start":{"line":359,"column":6},"end":{"line":359,"column":23}},"133":{"start":{"line":363,"column":4},"end":{"line":363,"column":41}},"134":{"start":{"line":371,"column":2},"end":{"line":407,"column":4}},"135":{"start":{"line":372,"column":4},"end":{"line":374,"column":7}},"136":{"start":{"line":373,"column":6},"end":{"line":373,"column":32}},"137":{"start":{"line":376,"column":4},"end":{"line":376,"column":23}},"138":{"start":{"line":378,"column":4},"end":{"line":381,"column":5}},"139":{"start":{"line":380,"column":6},"end":{"line":380,"column":45}},"140":{"start":{"line":383,"column":4},"end":{"line":383,"column":20}},"141":{"start":{"line":384,"column":4},"end":{"line":400,"column":5}},"142":{"start":{"line":386,"column":8},"end":{"line":386,"column":52}},"143":{"start":{"line":387,"column":8},"end":{"line":387,"column":14}},"144":{"start":{"line":389,"column":8},"end":{"line":389,"column":68}},"145":{"start":{"line":390,"column":8},"end":{"line":390,"column":14}},"146":{"start":{"line":392,"column":8},"end":{"line":399,"column":9}},"147":{"start":{"line":394,"column":12},"end":{"line":394,"column":69}},"148":{"start":{"line":395,"column":12},"end":{"line":395,"column":18}},"149":{"start":{"line":397,"column":12},"end":{"line":397,"column":85}},"150":{"start":{"line":398,"column":12},"end":{"line":398,"column":18}},"151":{"start":{"line":402,"column":4},"end":{"line":404,"column":5}},"152":{"start":{"line":403,"column":6},"end":{"line":403,"column":25}},"153":{"start":{"line":406,"column":4},"end":{"line":406,"column":64}},"154":{"start":{"line":413,"column":2},"end":{"line":415,"column":4}},"155":{"start":{"line":414,"column":4},"end":{"line":414,"column":39}},"156":{"start":{"line":417,"column":2},"end":{"line":417,"column":22}},"157":{"start":{"line":420,"column":0},"end":{"line":420,"column":30}},"158":{"start":{"line":421,"column":0},"end":{"line":421,"column":33}},"159":{"start":{"line":422,"column":0},"end":{"line":422,"column":20}},"160":{"start":{"line":423,"column":0},"end":{"line":423,"column":26}}},"branchMap":{"1":{"line":20,"type":"if","locations":[{"start":{"line":20,"column":4},"end":{"line":20,"column":4}},{"start":{"line":20,"column":4},"end":{"line":20,"column":4}}]},"2":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":4},"end":{"line":24,"column":4}},{"start":{"line":24,"column":4},"end":{"line":24,"column":4}}]},"3":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":4},"end":{"line":29,"column":4}},{"start":{"line":29,"column":4},"end":{"line":29,"column":4}}]},"4":{"line":29,"type":"binary-expr","locations":[{"start":{"line":29,"column":8},"end":{"line":29,"column":11}},{"start":{"line":29,"column":15},"end":{"line":29,"column":25}}]},"5":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":4},"end":{"line":30,"column":4}},{"start":{"line":30,"column":4},"end":{"line":30,"column":4}}]},"6":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":8},"end":{"line":30,"column":28}},{"start":{"line":31,"column":11},"end":{"line":31,"column":66}}]},"7":{"line":31,"type":"binary-expr","locations":[{"start":{"line":31,"column":46},"end":{"line":31,"column":49}},{"start":{"line":31,"column":53},"end":{"line":31,"column":63}}]},"8":{"line":36,"type":"binary-expr","locations":[{"start":{"line":36,"column":16},"end":{"line":36,"column":20}},{"start":{"line":36,"column":24},"end":{"line":36,"column":26}}]},"9":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":15},"end":{"line":41,"column":27}},{"start":{"line":41,"column":31},"end":{"line":41,"column":33}}]},"10":{"line":82,"type":"if","locations":[{"start":{"line":82,"column":4},"end":{"line":82,"column":4}},{"start":{"line":82,"column":4},"end":{"line":82,"column":4}}]},"11":{"line":86,"type":"binary-expr","locations":[{"start":{"line":86,"column":19},"end":{"line":86,"column":43}},{"start":{"line":86,"column":49},"end":{"line":86,"column":67}}]},"12":{"line":88,"type":"if","locations":[{"start":{"line":88,"column":6},"end":{"line":88,"column":6}},{"start":{"line":88,"column":6},"end":{"line":88,"column":6}}]},"13":{"line":100,"type":"if","locations":[{"start":{"line":100,"column":9},"end":{"line":100,"column":9}},{"start":{"line":100,"column":9},"end":{"line":100,"column":9}}]},"14":{"line":100,"type":"binary-expr","locations":[{"start":{"line":100,"column":13},"end":{"line":100,"column":35}},{"start":{"line":100,"column":39},"end":{"line":100,"column":71}}]},"15":{"line":148,"type":"if","locations":[{"start":{"line":148,"column":4},"end":{"line":148,"column":4}},{"start":{"line":148,"column":4},"end":{"line":148,"column":4}}]},"16":{"line":236,"type":"if","locations":[{"start":{"line":236,"column":4},"end":{"line":236,"column":4}},{"start":{"line":236,"column":4},"end":{"line":236,"column":4}}]},"17":{"line":236,"type":"binary-expr","locations":[{"start":{"line":236,"column":8},"end":{"line":236,"column":15}},{"start":{"line":236,"column":20},"end":{"line":236,"column":55}},{"start":{"line":236,"column":60},"end":{"line":236,"column":96}}]},"18":{"line":241,"type":"if","locations":[{"start":{"line":241,"column":4},"end":{"line":241,"column":4}},{"start":{"line":241,"column":4},"end":{"line":241,"column":4}}]},"19":{"line":285,"type":"if","locations":[{"start":{"line":285,"column":6},"end":{"line":285,"column":6}},{"start":{"line":285,"column":6},"end":{"line":285,"column":6}}]},"20":{"line":292,"type":"if","locations":[{"start":{"line":292,"column":8},"end":{"line":292,"column":8}},{"start":{"line":292,"column":8},"end":{"line":292,"column":8}}]},"21":{"line":295,"type":"if","locations":[{"start":{"line":295,"column":8},"end":{"line":295,"column":8}},{"start":{"line":295,"column":8},"end":{"line":295,"column":8}}]},"22":{"line":296,"type":"switch","locations":[{"start":{"line":297,"column":12},"end":{"line":299,"column":20}},{"start":{"line":300,"column":12},"end":{"line":316,"column":20}},{"start":{"line":317,"column":12},"end":{"line":318,"column":107}}]},"23":{"line":301,"type":"if","locations":[{"start":{"line":301,"column":14},"end":{"line":301,"column":14}},{"start":{"line":301,"column":14},"end":{"line":301,"column":14}}]},"24":{"line":304,"type":"if","locations":[{"start":{"line":304,"column":19},"end":{"line":304,"column":19}},{"start":{"line":304,"column":19},"end":{"line":304,"column":19}}]},"25":{"line":307,"type":"if","locations":[{"start":{"line":307,"column":18},"end":{"line":307,"column":18}},{"start":{"line":307,"column":18},"end":{"line":307,"column":18}}]},"26":{"line":307,"type":"binary-expr","locations":[{"start":{"line":307,"column":22},"end":{"line":307,"column":25}},{"start":{"line":307,"column":29},"end":{"line":307,"column":39}}]},"27":{"line":322,"type":"if","locations":[{"start":{"line":322,"column":10},"end":{"line":322,"column":10}},{"start":{"line":322,"column":10},"end":{"line":322,"column":10}}]},"28":{"line":322,"type":"binary-expr","locations":[{"start":{"line":322,"column":14},"end":{"line":322,"column":32}},{"start":{"line":322,"column":36},"end":{"line":322,"column":61}}]},"29":{"line":353,"type":"if","locations":[{"start":{"line":353,"column":4},"end":{"line":353,"column":4}},{"start":{"line":353,"column":4},"end":{"line":353,"column":4}}]},"30":{"line":353,"type":"binary-expr","locations":[{"start":{"line":353,"column":8},"end":{"line":353,"column":15}},{"start":{"line":353,"column":20},"end":{"line":353,"column":55}},{"start":{"line":353,"column":60},"end":{"line":353,"column":101}}]},"31":{"line":358,"type":"if","locations":[{"start":{"line":358,"column":4},"end":{"line":358,"column":4}},{"start":{"line":358,"column":4},"end":{"line":358,"column":4}}]},"32":{"line":378,"type":"if","locations":[{"start":{"line":378,"column":4},"end":{"line":378,"column":4}},{"start":{"line":378,"column":4},"end":{"line":378,"column":4}}]},"33":{"line":378,"type":"binary-expr","locations":[{"start":{"line":378,"column":8},"end":{"line":378,"column":23}},{"start":{"line":378,"column":29},"end":{"line":378,"column":72}},{"start":{"line":378,"column":78},"end":{"line":378,"column":119}},{"start":{"line":378,"column":125},"end":{"line":378,"column":166}}]},"34":{"line":384,"type":"switch","locations":[{"start":{"line":385,"column":6},"end":{"line":387,"column":14}},{"start":{"line":388,"column":6},"end":{"line":390,"column":14}},{"start":{"line":391,"column":6},"end":{"line":399,"column":9}}]},"35":{"line":392,"type":"switch","locations":[{"start":{"line":393,"column":10},"end":{"line":395,"column":18}},{"start":{"line":396,"column":10},"end":{"line":398,"column":18}}]},"36":{"line":402,"type":"if","locations":[{"start":{"line":402,"column":4},"end":{"line":402,"column":4}},{"start":{"line":402,"column":4},"end":{"line":402,"column":4}}]}},"code":["'use strict';","","var latex = require('../../utils/latex');","var extend = require('../../utils/object').extend;","","function factory (type, config, load, typed, math) {","  var Node = load(require('./Node'));","  var SymbolNode = load(require('./SymbolNode'));","  var validateSafeMethod = load(require('./utils/customs')).validateSafeMethod;","","  /**","   * @constructor FunctionNode","   * @extends {./Node}","   * invoke a list with arguments on a node","   * @param {./Node | string} fn Node resolving with a function on which to invoke","   *                             the arguments, typically a SymboNode or AccessorNode","   * @param {./Node[]} args","   */","  function FunctionNode(fn, args) {","    if (!(this instanceof FunctionNode)) {","      throw new SyntaxError('Constructor must be called with the new operator');","    }","","    if (typeof fn === 'string') {","      fn = new SymbolNode(fn);","    }","","    // validate input","    if (!fn || !fn.isNode) throw new TypeError('Node expected as parameter \"fn\"');","    if (!Array.isArray(args)","        || !args.every(function (arg) {return arg && arg.isNode;})) {","      throw new TypeError('Array containing Nodes expected for parameter \"args\"');","    }","","    this.fn = fn;","    this.args = args || [];","","    // readonly property name","    Object.defineProperty(this, 'name', {","      get: function () {","        return this.fn.name || '';","      }.bind(this),","      set: function () {","        throw new Error('Cannot assign a new name, name is read-only');","      }","    });","","    // TODO: deprecated since v3, remove some day","    var deprecated = function () {","      throw new Error('Property `FunctionNode.object` is deprecated, use `FunctionNode.fn` instead');","    };","    Object.defineProperty(this, 'object', { get: deprecated, set: deprecated });","  }","","  FunctionNode.prototype = new Node();","","  FunctionNode.prototype.type = 'FunctionNode';","","  FunctionNode.prototype.isFunctionNode = true;","","  /**","   * Compile the node to javascript code","   * @param {Object} defs     Object which can be used to define functions","   *                          or constants globally available for the compiled","   *                          expression","   * @param {Object} args     Object with local function arguments, the key is","   *                          the name of the argument, and the value is `true`.","   *                          The object may not be mutated, but must be","   *                          extended instead.","   * @return {string} js","   * @private","   */","  FunctionNode.prototype._compile = function (defs, args) {","    // compile fn and arguments","    var jsFn = this.fn._compile(defs, args);","    var jsArgs = this.args.map(function (arg) {","      return arg._compile(defs, args);","    });","    var jsScope = this._compileScope(defs, args);","    var argsName;","","    if (this.fn.isSymbolNode) {","      // we can statically determine whether the function has an rawArgs property","      var name = this.fn.name;","      var fn = defs.math[name];","      var isRaw = (typeof fn === 'function') && (fn.rawArgs == true);","","      if (isRaw) {","        // pass unevaluated parameters (nodes) to the function","        argsName = this._getUniqueArgumentsName(defs);","        defs[argsName] = this.args;","","        return jsFn + '(' + argsName + ', math, ' + jsScope + ')';","      }","      else {","        // \"regular\" evaluation","        return jsFn + '(' + jsArgs.join(', ') + ')';","      }","    }","    else if (this.fn.isAccessorNode && this.fn.index.isObjectProperty()) {","      // execute the function with the right context: the object of the AccessorNode","      argsName = this._getUniqueArgumentsName(defs);","      defs[argsName] = this.args;","      defs.validateSafeMethod = validateSafeMethod","","      var jsObject = this.fn.object._compile(defs, args);","      var prop = this.fn.index.getObjectProperty();","","      return '(function () {' +","          'var object = ' + jsObject + ';' +","          'validateSafeMethod(object, \"' + prop + '\");' +","          'return (object[\"' + prop + '\"] && object[\"' + prop + '\"].rawArgs) ' +","          ' ? object[\"' + prop + '\"](' + argsName + ', math, ' + jsScope + ')' +","          ' : object[\"' + prop + '\"](' + jsArgs.join(', ') + ')' +","          '})()';","    }","    else { // this.fn.isAccessorNode && !this.fn.index.isObjectProperty()","      // we have to dynamically determine whether the function has a rawArgs property","      argsName = this._getUniqueArgumentsName(defs);","      defs[argsName] = this.args;","","      return '(function () {' +","          'var fn = ' + jsFn + ';' +","          'return (fn && fn.rawArgs) ' +","          ' ? fn(' + argsName + ', math, ' + jsScope + ')' +","          ' : fn(' + jsArgs.join(', ') + ')' +","          '})()';","    }","  };","","  /**","   * Merge function arguments into scope before passing to the actual function.","   * This is needed when the function has `rawArgs=true`. In that case we have","   * to pass the `scope` as third argument, including any variables of","   * enclosing functions.","   * @param {Object} defs     Object which can be used to define functions","   *                          or constants globally available for the compiled","   *                          expression","   * @param {Object} args     Object with local function arguments, the key is","   *                          the name of the argument, and the value is `true`.","   *                          The object may not be mutated, but must be","   *                          extended instead.","   * @return {string} js","   * @private","   */","  FunctionNode.prototype._compileScope = function (defs, args) {","    var names = Object.keys(args);","    if (names.length === 0) {","      return 'scope';","    }","    else {","      // merge arguments into scope","      defs.extend = extend;","","      var jsArgs = names","          .map(function (arg) {","            return '\"' + arg + '\": ' + arg;","          })","          .join(', ');","","      return 'extend(extend({}, scope), {' + jsArgs + '})';","    }","  };","","  /**","   * Get a unique name for a arguments to store in defs","   * @param {Object} defs","   * @return {string} A string like 'args1', 'args2', ...","   * @private","   */","  FunctionNode.prototype._getUniqueArgumentsName = function (defs) {","    var argsName;","    var i = 0;","","    do {","      argsName = 'args' + i;","      i++;","    }","    while (argsName in defs);","","    return argsName;","  };","","  /**","   * Execute a callback for each of the child nodes of this node","   * @param {function(child: Node, path: string, parent: Node)} callback","   */","  FunctionNode.prototype.forEach = function (callback) {","    for (var i = 0; i < this.args.length; i++) {","      callback(this.args[i], 'args[' + i + ']', this);","    }","  };","","  /**","   * Create a new FunctionNode having it's childs be the results of calling","   * the provided callback function for each of the childs of the original node.","   * @param {function(child: Node, path: string, parent: Node): Node} callback","   * @returns {FunctionNode} Returns a transformed copy of the node","   */","  FunctionNode.prototype.map = function (callback) {","    var fn = this.fn.map(callback);","    var args = [];","    for (var i = 0; i < this.args.length; i++) {","      args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));","    }","    return new FunctionNode(fn, args);","  };","","  /**","   * Create a clone of this node, a shallow copy","   * @return {FunctionNode}","   */","  FunctionNode.prototype.clone = function () {","    return new FunctionNode(this.fn, this.args.slice(0));","  };","","  //backup Node's toString function","  //@private","  var nodeToString = FunctionNode.prototype.toString;","","  /**","   * Get string representation. (wrapper function)","   * This overrides parts of Node's toString function.","   * If callback is an object containing callbacks, it","   * calls the correct callback for the current node,","   * otherwise it falls back to calling Node's toString","   * function.","   *","   * @param {Object} options","   * @return {string} str","   * @override","   */","  FunctionNode.prototype.toString = function (options) {","    var customString;","    var name = this.fn.toString(options);","    if (options && (typeof options.handler === 'object') && options.handler.hasOwnProperty(name)) {","      //callback is a map of callback functions","      customString = options.handler[name](this, options);","    }","","    if (typeof customString !== 'undefined') {","      return customString;","    }","","    //fall back to Node's toString","    return nodeToString.call(this, options);","  };","","  /**","   * Get string representation","   * @param {Object} options","   * @return {string} str","   */","  FunctionNode.prototype._toString = function (options) {","    var args = this.args.map(function (arg) {","      return arg.toString(options);","    });","","    // format the arguments like \"add(2, 4.2)\"","    return this.fn.toString(options) + '(' + args.join(', ') + ')';","  };","","  /*","   * Expand a LaTeX template","   *","   * @param {string} template","   * @param {Node} node","   * @param {Object} options","   * @private","   **/","  function expandTemplate(template, node, options) {","    var latex = '';","","    // Match everything of the form ${identifier} or ${identifier[2]} or $$","    // while submatching identifier and 2 (in the second case)","    var regex = new RegExp('\\\\$(?:\\\\{([a-z_][a-z_0-9]*)(?:\\\\[([0-9]+)\\\\])?\\\\}|\\\\$)', 'ig');","","    var inputPos = 0;   //position in the input string","    var match;","    while ((match = regex.exec(template)) !== null) {   //go through all matches","      // add everything in front of the match to the LaTeX string","      latex += template.substring(inputPos, match.index);","      inputPos = match.index;","","      if (match[0] === '$$') { // escaped dollar sign","        latex += '$';","        inputPos++;","      }","      else { // template parameter","        inputPos += match[0].length;","        var property = node[match[1]];","        if (!property) {","          throw new ReferenceError('Template: Property ' + match[1] + ' does not exist.');","        }","        if (match[2] === undefined) { //no square brackets","          switch (typeof property) {","            case 'string':","              latex += property;","              break;","            case 'object':","              if (property.isNode) {","                latex += property.toTex(options);","              }","              else if (Array.isArray(property)) {","                //make array of Nodes into comma separated list","                latex += property.map(function (arg, index) {","                  if (arg && arg.isNode) {","                    return arg.toTex(options);","                  }","                  throw new TypeError('Template: ' + match[1] + '[' + index + '] is not a Node.');","                }).join(',');","              }","              else {","                throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');","              }","              break;","            default:","              throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');","          }","        }","        else { //with square brackets","          if (property[match[2]] && property[match[2]].isNode) {","            latex += property[match[2]].toTex(options);","          }","          else {","            throw new TypeError('Template: ' + match[1] + '[' + match[2] + '] is not a Node.');","          }","        }","      }","    }","    latex += template.slice(inputPos);  //append rest of the template","","    return latex;","  }","","  //backup Node's toTex function","  //@private","  var nodeToTex = FunctionNode.prototype.toTex;","","  /**","   * Get LaTeX representation. (wrapper function)","   * This overrides parts of Node's toTex function.","   * If callback is an object containing callbacks, it","   * calls the correct callback for the current node,","   * otherwise it falls back to calling Node's toTex","   * function.","   *","   * @param {Object} options","   * @return {string}","   */","  FunctionNode.prototype.toTex = function (options) {","    var customTex;","    if (options && (typeof options.handler === 'object') && options.handler.hasOwnProperty(this.name)) {","      //callback is a map of callback functions","      customTex = options.handler[this.name](this, options);","    }","","    if (typeof customTex !== 'undefined') {","      return customTex;","    }","","    //fall back to Node's toTex","    return nodeToTex.call(this, options);","  };","","  /**","   * Get LaTeX representation","   * @param {Object} options","   * @return {string} str","   */","  FunctionNode.prototype._toTex = function (options) {","    var args = this.args.map(function (arg) { //get LaTeX of the arguments","      return arg.toTex(options);","    });","","    var latexConverter;","","    if (math[this.name] && ((typeof math[this.name].toTex === 'function') || (typeof math[this.name].toTex === 'object') || (typeof math[this.name].toTex === 'string'))) {","      //.toTex is a callback function","      latexConverter = math[this.name].toTex;","    }","","    var customToTex;","    switch (typeof latexConverter) {","      case 'function': //a callback function","        customToTex = latexConverter(this, options);","        break;","      case 'string': //a template string","        customToTex = expandTemplate(latexConverter, this, options);","        break;","      case 'object': //an object with different \"converters\" for different numbers of arguments","        switch (typeof latexConverter[args.length]) {","          case 'function':","            customToTex = latexConverter[args.length](this, options);","            break;","          case 'string':","            customToTex = expandTemplate(latexConverter[args.length], this, options);","            break;","        }","    }","","    if (typeof customToTex !== 'undefined') {","      return customToTex;","    }","","    return expandTemplate(latex.defaultTemplate, this, options);","  };","","  /**","   * Get identifier.","   * @return {string}","   */","  FunctionNode.prototype.getIdentifier = function () {","    return this.type + ':' + this.name;","  };","","  return FunctionNode;","}","","exports.name = 'FunctionNode';","exports.path = 'expression.node';","exports.math = true; // request access to the math namespace as 5th argument of the factory function","exports.factory = factory;",""],"l":{"3":1,"4":1,"6":1,"7":0,"8":0,"9":0,"19":1,"20":0,"21":0,"24":0,"25":0,"29":0,"30":0,"31":0,"32":0,"35":0,"36":0,"39":0,"41":0,"44":0,"49":0,"50":0,"52":0,"55":0,"57":0,"59":0,"73":0,"75":0,"76":0,"77":0,"79":0,"80":0,"82":0,"84":0,"85":0,"86":0,"88":0,"90":0,"91":0,"93":0,"97":0,"100":0,"102":0,"103":0,"104":0,"106":0,"107":0,"109":0,"119":0,"120":0,"122":0,"146":0,"147":0,"148":0,"149":0,"153":0,"155":0,"157":0,"161":0,"171":0,"172":0,"173":0,"175":0,"176":0,"177":0,"181":0,"188":0,"189":0,"190":0,"200":0,"201":0,"202":0,"203":0,"204":0,"206":0,"213":0,"214":0,"219":0,"233":0,"234":0,"235":0,"236":0,"238":0,"241":0,"242":0,"246":0,"254":0,"255":0,"256":0,"260":0,"271":1,"272":0,"276":0,"278":0,"279":0,"280":0,"282":0,"283":0,"285":0,"286":0,"287":0,"290":0,"291":0,"292":0,"293":0,"295":0,"296":0,"298":0,"299":0,"301":0,"302":0,"304":0,"306":0,"307":0,"308":0,"310":0,"314":0,"316":0,"318":0,"322":0,"323":0,"326":0,"331":0,"333":0,"338":0,"351":0,"352":0,"353":0,"355":0,"358":0,"359":0,"363":0,"371":0,"372":0,"373":0,"376":0,"378":0,"380":0,"383":0,"384":0,"386":0,"387":0,"389":0,"390":0,"392":0,"394":0,"395":0,"397":0,"398":0,"402":0,"403":0,"406":0,"413":0,"414":0,"417":0,"420":1,"421":1,"422":1,"423":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/node/Node.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/node/Node.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":1,"37":0,"38":0,"39":0,"40":0,"41":0,"42":1,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":1,"96":0,"97":0,"98":0,"99":0,"100":0,"101":1,"102":1,"103":1,"104":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0,0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0,0,0],"14":[0,0],"15":[0,0],"16":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0},"fnMap":{"1":{"name":"factory","line":7,"loc":{"start":{"line":7,"column":0},"end":{"line":7,"column":51}}},"2":{"name":"Node","line":11,"loc":{"start":{"line":11,"column":2},"end":{"line":11,"column":18}}},"3":{"name":"(anonymous_3)","line":22,"loc":{"start":{"line":22,"column":24},"end":{"line":22,"column":40}}},"4":{"name":"(anonymous_4)","line":39,"loc":{"start":{"line":39,"column":27},"end":{"line":39,"column":39}}},"5":{"name":"(anonymous_5)","line":57,"loc":{"start":{"line":57,"column":41},"end":{"line":57,"column":57}}},"6":{"name":"(anonymous_6)","line":87,"loc":{"start":{"line":87,"column":28},"end":{"line":87,"column":50}}},"7":{"name":"(anonymous_7)","line":96,"loc":{"start":{"line":96,"column":27},"end":{"line":96,"column":47}}},"8":{"name":"(anonymous_8)","line":107,"loc":{"start":{"line":107,"column":23},"end":{"line":107,"column":43}}},"9":{"name":"(anonymous_9)","line":118,"loc":{"start":{"line":118,"column":27},"end":{"line":118,"column":43}}},"10":{"name":"(anonymous_10)","line":132,"loc":{"start":{"line":132,"column":28},"end":{"line":132,"column":48}}},"11":{"name":"_traverse","line":137,"loc":{"start":{"line":137,"column":4},"end":{"line":137,"column":39}}},"12":{"name":"(anonymous_12)","line":138,"loc":{"start":{"line":138,"column":19},"end":{"line":138,"column":50}}},"13":{"name":"(anonymous_13)","line":168,"loc":{"start":{"line":168,"column":29},"end":{"line":168,"column":49}}},"14":{"name":"_transform","line":170,"loc":{"start":{"line":170,"column":4},"end":{"line":170,"column":41}}},"15":{"name":"(anonymous_15)","line":171,"loc":{"start":{"line":171,"column":22},"end":{"line":171,"column":52}}},"16":{"name":"(anonymous_16)","line":195,"loc":{"start":{"line":195,"column":26},"end":{"line":195,"column":46}}},"17":{"name":"(anonymous_17)","line":198,"loc":{"start":{"line":198,"column":18},"end":{"line":198,"column":48}}},"18":{"name":"(anonymous_18)","line":208,"loc":{"start":{"line":208,"column":24},"end":{"line":208,"column":36}}},"19":{"name":"(anonymous_19)","line":213,"loc":{"start":{"line":213,"column":25},"end":{"line":213,"column":37}}},"20":{"name":"(anonymous_20)","line":221,"loc":{"start":{"line":221,"column":25},"end":{"line":221,"column":37}}},"21":{"name":"(anonymous_21)","line":230,"loc":{"start":{"line":230,"column":29},"end":{"line":230,"column":41}}},"22":{"name":"(anonymous_22)","line":231,"loc":{"start":{"line":231,"column":20},"end":{"line":231,"column":36}}},"23":{"name":"(anonymous_23)","line":242,"loc":{"start":{"line":242,"column":26},"end":{"line":242,"column":43}}},"24":{"name":"(anonymous_24)","line":263,"loc":{"start":{"line":263,"column":28},"end":{"line":263,"column":47}}},"25":{"name":"(anonymous_25)","line":291,"loc":{"start":{"line":291,"column":29},"end":{"line":291,"column":41}}},"26":{"name":"(anonymous_26)","line":311,"loc":{"start":{"line":311,"column":25},"end":{"line":311,"column":44}}},"27":{"name":"(anonymous_27)","line":340,"loc":{"start":{"line":340,"column":26},"end":{"line":340,"column":45}}},"28":{"name":"(anonymous_28)","line":349,"loc":{"start":{"line":349,"column":33},"end":{"line":349,"column":45}}},"29":{"name":"(anonymous_29)","line":357,"loc":{"start":{"line":357,"column":30},"end":{"line":357,"column":42}}},"30":{"name":"_validateScope","line":366,"loc":{"start":{"line":366,"column":2},"end":{"line":366,"column":33}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":38}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":50}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":55}},"4":{"start":{"line":7,"column":0},"end":{"line":377,"column":1}},"5":{"start":{"line":11,"column":2},"end":{"line":15,"column":3}},"6":{"start":{"line":12,"column":4},"end":{"line":14,"column":5}},"7":{"start":{"line":13,"column":6},"end":{"line":13,"column":80}},"8":{"start":{"line":22,"column":2},"end":{"line":24,"column":4}},"9":{"start":{"line":23,"column":4},"end":{"line":23,"column":38}},"10":{"start":{"line":26,"column":2},"end":{"line":26,"column":31}},"11":{"start":{"line":28,"column":2},"end":{"line":28,"column":31}},"12":{"start":{"line":30,"column":2},"end":{"line":30,"column":30}},"13":{"start":{"line":39,"column":2},"end":{"line":73,"column":4}},"14":{"start":{"line":41,"column":4},"end":{"line":43,"column":5}},"15":{"start":{"line":42,"column":6},"end":{"line":42,"column":102}},"16":{"start":{"line":46,"column":4},"end":{"line":50,"column":6}},"17":{"start":{"line":53,"column":4},"end":{"line":53,"column":18}},"18":{"start":{"line":55,"column":4},"end":{"line":55,"column":41}},"19":{"start":{"line":57,"column":4},"end":{"line":59,"column":7}},"20":{"start":{"line":58,"column":6},"end":{"line":58,"column":60}},"21":{"start":{"line":61,"column":4},"end":{"line":69,"column":13}},"22":{"start":{"line":71,"column":4},"end":{"line":71,"column":52}},"23":{"start":{"line":72,"column":4},"end":{"line":72,"column":25}},"24":{"start":{"line":87,"column":2},"end":{"line":90,"column":4}},"25":{"start":{"line":89,"column":4},"end":{"line":89,"column":55}},"26":{"start":{"line":96,"column":2},"end":{"line":99,"column":4}},"27":{"start":{"line":98,"column":4},"end":{"line":98,"column":62}},"28":{"start":{"line":107,"column":2},"end":{"line":110,"column":4}},"29":{"start":{"line":109,"column":4},"end":{"line":109,"column":58}},"30":{"start":{"line":118,"column":2},"end":{"line":124,"column":4}},"31":{"start":{"line":119,"column":4},"end":{"line":121,"column":5}},"32":{"start":{"line":120,"column":6},"end":{"line":120,"column":66}},"33":{"start":{"line":123,"column":4},"end":{"line":123,"column":16}},"34":{"start":{"line":132,"column":2},"end":{"line":145,"column":4}},"35":{"start":{"line":134,"column":4},"end":{"line":134,"column":31}},"36":{"start":{"line":137,"column":4},"end":{"line":142,"column":5}},"37":{"start":{"line":138,"column":6},"end":{"line":141,"column":9}},"38":{"start":{"line":139,"column":8},"end":{"line":139,"column":38}},"39":{"start":{"line":140,"column":8},"end":{"line":140,"column":35}},"40":{"start":{"line":144,"column":4},"end":{"line":144,"column":30}},"41":{"start":{"line":168,"column":2},"end":{"line":179,"column":4}},"42":{"start":{"line":170,"column":4},"end":{"line":175,"column":5}},"43":{"start":{"line":171,"column":6},"end":{"line":174,"column":9}},"44":{"start":{"line":172,"column":8},"end":{"line":172,"column":56}},"45":{"start":{"line":173,"column":8},"end":{"line":173,"column":49}},"46":{"start":{"line":177,"column":4},"end":{"line":177,"column":49}},"47":{"start":{"line":178,"column":4},"end":{"line":178,"column":45}},"48":{"start":{"line":195,"column":2},"end":{"line":205,"column":4}},"49":{"start":{"line":196,"column":4},"end":{"line":196,"column":19}},"50":{"start":{"line":198,"column":4},"end":{"line":202,"column":7}},"51":{"start":{"line":199,"column":6},"end":{"line":201,"column":7}},"52":{"start":{"line":200,"column":8},"end":{"line":200,"column":25}},"53":{"start":{"line":204,"column":4},"end":{"line":204,"column":17}},"54":{"start":{"line":208,"column":2},"end":{"line":210,"column":4}},"55":{"start":{"line":209,"column":4},"end":{"line":209,"column":82}},"56":{"start":{"line":213,"column":2},"end":{"line":215,"column":4}},"57":{"start":{"line":214,"column":4},"end":{"line":214,"column":116}},"58":{"start":{"line":221,"column":2},"end":{"line":224,"column":4}},"59":{"start":{"line":223,"column":4},"end":{"line":223,"column":53}},"60":{"start":{"line":230,"column":2},"end":{"line":234,"column":4}},"61":{"start":{"line":231,"column":4},"end":{"line":233,"column":7}},"62":{"start":{"line":232,"column":6},"end":{"line":232,"column":30}},"63":{"start":{"line":242,"column":2},"end":{"line":246,"column":4}},"64":{"start":{"line":243,"column":4},"end":{"line":245,"column":15}},"65":{"start":{"line":263,"column":2},"end":{"line":283,"column":4}},"66":{"start":{"line":264,"column":4},"end":{"line":264,"column":21}},"67":{"start":{"line":265,"column":4},"end":{"line":276,"column":5}},"68":{"start":{"line":266,"column":8},"end":{"line":275,"column":9}},"69":{"start":{"line":269,"column":12},"end":{"line":269,"column":18}},"70":{"start":{"line":271,"column":12},"end":{"line":271,"column":58}},"71":{"start":{"line":272,"column":12},"end":{"line":272,"column":18}},"72":{"start":{"line":274,"column":12},"end":{"line":274,"column":75}},"73":{"start":{"line":278,"column":4},"end":{"line":280,"column":5}},"74":{"start":{"line":279,"column":6},"end":{"line":279,"column":26}},"75":{"start":{"line":282,"column":4},"end":{"line":282,"column":35}},"76":{"start":{"line":291,"column":2},"end":{"line":294,"column":4}},"77":{"start":{"line":293,"column":4},"end":{"line":293,"column":66}},"78":{"start":{"line":311,"column":2},"end":{"line":331,"column":4}},"79":{"start":{"line":312,"column":4},"end":{"line":312,"column":18}},"80":{"start":{"line":313,"column":4},"end":{"line":324,"column":5}},"81":{"start":{"line":314,"column":6},"end":{"line":323,"column":7}},"82":{"start":{"line":317,"column":10},"end":{"line":317,"column":16}},"83":{"start":{"line":319,"column":10},"end":{"line":319,"column":53}},"84":{"start":{"line":320,"column":10},"end":{"line":320,"column":16}},"85":{"start":{"line":322,"column":10},"end":{"line":322,"column":73}},"86":{"start":{"line":326,"column":4},"end":{"line":328,"column":5}},"87":{"start":{"line":327,"column":6},"end":{"line":327,"column":23}},"88":{"start":{"line":330,"column":4},"end":{"line":330,"column":32}},"89":{"start":{"line":340,"column":2},"end":{"line":343,"column":4}},"90":{"start":{"line":342,"column":4},"end":{"line":342,"column":63}},"91":{"start":{"line":349,"column":2},"end":{"line":351,"column":4}},"92":{"start":{"line":350,"column":4},"end":{"line":350,"column":21}},"93":{"start":{"line":357,"column":2},"end":{"line":359,"column":4}},"94":{"start":{"line":358,"column":4},"end":{"line":358,"column":16}},"95":{"start":{"line":366,"column":2},"end":{"line":374,"column":3}},"96":{"start":{"line":367,"column":4},"end":{"line":373,"column":5}},"97":{"start":{"line":368,"column":6},"end":{"line":372,"column":7}},"98":{"start":{"line":369,"column":8},"end":{"line":371,"column":9}},"99":{"start":{"line":370,"column":10},"end":{"line":370,"column":102}},"100":{"start":{"line":376,"column":2},"end":{"line":376,"column":14}},"101":{"start":{"line":379,"column":0},"end":{"line":379,"column":22}},"102":{"start":{"line":380,"column":0},"end":{"line":380,"column":33}},"103":{"start":{"line":381,"column":0},"end":{"line":381,"column":20}},"104":{"start":{"line":382,"column":0},"end":{"line":382,"column":26}}},"branchMap":{"1":{"line":12,"type":"if","locations":[{"start":{"line":12,"column":4},"end":{"line":12,"column":4}},{"start":{"line":12,"column":4},"end":{"line":12,"column":4}}]},"2":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":4},"end":{"line":41,"column":4}},{"start":{"line":41,"column":4},"end":{"line":41,"column":4}}]},"3":{"line":119,"type":"if","locations":[{"start":{"line":119,"column":4},"end":{"line":119,"column":4}},{"start":{"line":119,"column":4},"end":{"line":119,"column":4}}]},"4":{"line":119,"type":"binary-expr","locations":[{"start":{"line":119,"column":10},"end":{"line":119,"column":14}},{"start":{"line":119,"column":18},"end":{"line":119,"column":29}}]},"5":{"line":199,"type":"if","locations":[{"start":{"line":199,"column":6},"end":{"line":199,"column":6}},{"start":{"line":199,"column":6},"end":{"line":199,"column":6}}]},"6":{"line":243,"type":"cond-expr","locations":[{"start":{"line":244,"column":10},"end":{"line":244,"column":32}},{"start":{"line":245,"column":10},"end":{"line":245,"column":15}}]},"7":{"line":265,"type":"if","locations":[{"start":{"line":265,"column":4},"end":{"line":265,"column":4}},{"start":{"line":265,"column":4},"end":{"line":265,"column":4}}]},"8":{"line":265,"type":"binary-expr","locations":[{"start":{"line":265,"column":8},"end":{"line":265,"column":15}},{"start":{"line":265,"column":19},"end":{"line":265,"column":45}}]},"9":{"line":266,"type":"switch","locations":[{"start":{"line":267,"column":10},"end":{"line":267,"column":24}},{"start":{"line":268,"column":10},"end":{"line":269,"column":18}},{"start":{"line":270,"column":10},"end":{"line":272,"column":18}},{"start":{"line":273,"column":10},"end":{"line":274,"column":75}}]},"10":{"line":278,"type":"if","locations":[{"start":{"line":278,"column":4},"end":{"line":278,"column":4}},{"start":{"line":278,"column":4},"end":{"line":278,"column":4}}]},"11":{"line":313,"type":"if","locations":[{"start":{"line":313,"column":4},"end":{"line":313,"column":4}},{"start":{"line":313,"column":4},"end":{"line":313,"column":4}}]},"12":{"line":313,"type":"binary-expr","locations":[{"start":{"line":313,"column":8},"end":{"line":313,"column":15}},{"start":{"line":313,"column":19},"end":{"line":313,"column":45}}]},"13":{"line":314,"type":"switch","locations":[{"start":{"line":315,"column":8},"end":{"line":315,"column":22}},{"start":{"line":316,"column":8},"end":{"line":317,"column":16}},{"start":{"line":318,"column":8},"end":{"line":320,"column":16}},{"start":{"line":321,"column":8},"end":{"line":322,"column":73}}]},"14":{"line":326,"type":"if","locations":[{"start":{"line":326,"column":4},"end":{"line":326,"column":4}},{"start":{"line":326,"column":4},"end":{"line":326,"column":4}}]},"15":{"line":368,"type":"if","locations":[{"start":{"line":368,"column":6},"end":{"line":368,"column":6}},{"start":{"line":368,"column":6},"end":{"line":368,"column":6}}]},"16":{"line":369,"type":"if","locations":[{"start":{"line":369,"column":8},"end":{"line":369,"column":8}},{"start":{"line":369,"column":8},"end":{"line":369,"column":8}}]}},"code":["'use strict';","","var keywords = require('../keywords');","var extend = require('../../utils/object').extend;","var deepEqual= require('../../utils/object').deepEqual;","","function factory (type, config, load, typed, math) {","  /**","   * Node","   */","  function Node() {","    if (!(this instanceof Node)) {","      throw new SyntaxError('Constructor must be called with the new operator');","    }","  }","","  /**","   * Evaluate the node","   * @param {Object} [scope]  Scope to read/write variables","   * @return {*}              Returns the result","   */","  Node.prototype.eval = function(scope) {","    return this.compile().eval(scope);","  };","","  Node.prototype.type = 'Node';","","  Node.prototype.isNode = true;","","  Node.prototype.comment = '';","","  /**","   * Compile the node to javascript code","   * @return {{eval: function}} expr  Returns an object with a function 'eval',","   *                                  which can be invoked as expr.eval([scope]),","   *                                  where scope is an optional object with","   *                                  variables.","   */","  Node.prototype.compile = function () {","    // TODO: calling compile(math) is deprecated since version 2.0.0. Remove this warning some day","    if (arguments.length > 0) {","      throw new Error('Calling compile(math) is deprecated. Call the function as compile() instead.');","    }","","    // definitions globally available inside the closure of the compiled expressions","    var defs = {","      math: math.expression.mathWithTransform,","      args: {}, // can be filled with names of FunctionAssignment arguments","      _validateScope: _validateScope","    };","","    // will be used to put local function arguments","    var args = {};","","    var code = this._compile(defs, args);","","    var defsCode = Object.keys(defs).map(function (name) {","      return '    var ' + name + ' = defs[\"' + name + '\"];';","    });","","    var factoryCode =","        defsCode.join(' ') +","        'return {' +","        '  \"eval\": function (scope) {' +","        '    if (scope) _validateScope(scope);' +","        '    scope = scope || {};' +","        '    return ' + code + ';' +","        '  }' +","        '};';","","    var factory = new Function('defs', factoryCode);","    return factory(defs);","  };","","  /**","   * Compile the node to javascript code","   * @param {Object} defs     Object which can be used to define functions","   *                          and constants globally available inside the closure","   *                          of the compiled expression","   * @param {Object} args     Object with local function arguments, the key is","   *                          the name of the argument, and the value is `true`.","   *                          The object may not be mutated, but must be","   *                          extended instead.","   * @return {string} js","   * @private","   */","  Node.prototype._compile = function (defs, args) {","    // must be implemented by each of the Node implementations","    throw new Error('Cannot compile a Node interface');","  };","","  /**","   * Execute a callback for each of the child nodes of this node","   * @param {function(child: Node, path: string, parent: Node)} callback","   */","  Node.prototype.forEach = function (callback) {","    // must be implemented by each of the Node implementations","    throw new Error('Cannot run forEach on a Node interface');","  };","","  /**","   * Create a new Node having it's childs be the results of calling","   * the provided callback function for each of the childs of the original node.","   * @param {function(child: Node, path: string, parent: Node): Node} callback","   * @returns {OperatorNode} Returns a transformed copy of the node","   */","  Node.prototype.map = function (callback) {","    // must be implemented by each of the Node implementations","    throw new Error('Cannot run map on a Node interface');","  };","","  /**","   * Validate whether an object is a Node, for use with map","   * @param {Node} node","   * @returns {Node} Returns the input if it's a node, else throws an Error","   * @protected","   */","  Node.prototype._ifNode = function (node) {","    if (!(node && node.isNode)) {","      throw new TypeError('Callback function must return a Node');","    }","","    return node;","  };","","  /**","   * Recursively traverse all nodes in a node tree. Executes given callback for","   * this node and each of its child nodes.","   * @param {function(node: Node, path: string, parent: Node)} callback","   *          A callback called for every node in the node tree.","   */","  Node.prototype.traverse = function (callback) {","    // execute callback for itself","    callback(this, null, null);","","    // recursively traverse over all childs of a node","    function _traverse(node, callback) {","      node.forEach(function (child, path, parent) {","        callback(child, path, parent);","        _traverse(child, callback);","      });","    }","","    _traverse(this, callback);","  };","","  /**","   * Recursively transform a node tree via a transform function.","   *","   * For example, to replace all nodes of type SymbolNode having name 'x' with a","   * ConstantNode with value 2:","   *","   *     var res = Node.transform(function (node, path, parent) {","   *       if (node && node.isSymbolNode) && (node.name == 'x')) {","   *         return new ConstantNode(2);","   *       }","   *       else {","   *         return node;","   *       }","   *     });","   *","   * @param {function(node: Node, path: string, parent: Node) : Node} callback","   *          A mapping function accepting a node, and returning","   *          a replacement for the node or the original node.","   *          Signature: callback(node: Node, index: string, parent: Node) : Node","   * @return {Node} Returns the original node or its replacement","   */","  Node.prototype.transform = function (callback) {","    // traverse over all childs","    function _transform (node, callback) {","      return node.map(function(child, path, parent) {","        var replacement = callback(child, path, parent);","        return _transform(replacement, callback);","      });","    }","","    var replacement = callback(this, null, null);","    return _transform(replacement, callback);","  };","","  /**","   * Find any node in the node tree matching given filter function. For example, to","   * find all nodes of type SymbolNode having name 'x':","   *","   *     var results = Node.filter(function (node) {","   *       return (node && node.isSymbolNode) && (node.name == 'x');","   *     });","   *","   * @param {function(node: Node, path: string, parent: Node) : Node} callback","   *            A test function returning true when a node matches, and false","   *            otherwise. Function signature:","   *            callback(node: Node, index: string, parent: Node) : boolean","   * @return {Node[]} nodes       An array with nodes matching given filter criteria","   */","  Node.prototype.filter = function (callback) {","    var nodes = [];","","    this.traverse(function (node, path, parent) {","      if (callback(node, path, parent)) {","        nodes.push(node);","      }","    });","","    return nodes;","  };","","  // TODO: deprecated since version 1.1.0, remove this some day","  Node.prototype.find = function () {","    throw new Error('Function Node.find is deprecated. Use Node.filter instead.');","  };","","  // TODO: deprecated since version 1.1.0, remove this some day","  Node.prototype.match = function () {","    throw new Error('Function Node.match is deprecated. See functions Node.filter, Node.transform, Node.traverse.');","  };","","  /**","   * Create a shallow clone of this node","   * @return {Node}","   */","  Node.prototype.clone = function () {","    // must be implemented by each of the Node implementations","    throw new Error('Cannot clone a Node interface');","  };","","  /**","   * Create a deep clone of this node","   * @return {Node}","   */","  Node.prototype.cloneDeep = function () {","    return this.map(function (node) {","      return node.cloneDeep();","    });","  };","","  /**","   * Deep compare this node with another node.","   * @param {Node} other","   * @return {boolean} Returns true when both nodes are of the same type and","   *                   contain the same values (as do their childs)","   */","  Node.prototype.equals = function (other) {","    return other","        ? deepEqual(this, other)","        : false","  };","","  /**","   * Get string representation. (wrapper function)","   *","   * This function can get an object of the following form:","   * {","   *    handler: //This can be a callback function of the form","   *             // \"function callback(node, options)\"or","   *             // a map that maps function names (used in FunctionNodes)","   *             // to callbacks","   *    parenthesis: \"keep\" //the parenthesis option (This is optional)","   * }","   *","   * @param {Object} [options]","   * @return {string}","   */","  Node.prototype.toString = function (options) {","    var customString;","    if (options && typeof options == \"object\") {","        switch (typeof options.handler) {","          case 'object':","          case 'undefined':","            break;","          case 'function':","            customString = options.handler(this, options);","            break;","          default:","            throw new TypeError('Object or function expected as callback');","        }","    }","","    if (typeof customString !== 'undefined') {","      return customString;","    }","","    return this._toString(options);","  };","","  /**","   * Internal function to generate the string output.","   * This has to be implemented by every Node","   *","   * @throws {Error}","   */","  Node.prototype._toString = function () {","    //must be implemented by each of the Node implementations","    throw new Error('_toString not implemented for ' + this.type);","  };","","  /**","   * Get LaTeX representation. (wrapper function)","   *","   * This function can get an object of the following form:","   * {","   *    handler: //This can be a callback function of the form","   *             // \"function callback(node, options)\"or","   *             // a map that maps function names (used in FunctionNodes)","   *             // to callbacks","   *    parenthesis: \"keep\" //the parenthesis option (This is optional)","   * }","   *","   * @param {Object} [options]","   * @return {string}","   */","  Node.prototype.toTex = function (options) {","    var customTex;","    if (options && typeof options == 'object') {","      switch (typeof options.handler) {","        case 'object':","        case 'undefined':","          break;","        case 'function':","          customTex = options.handler(this, options);","          break;","        default:","          throw new TypeError('Object or function expected as callback');","      }","    }","","    if (typeof customTex !== 'undefined') {","      return customTex;","    }","","    return this._toTex(options);","  };","","  /**","   * Internal function to generate the LaTeX output.","   * This has to be implemented by every Node","   *","   * @param {Object} [options]","   * @throws {Error}","   */","  Node.prototype._toTex = function (options) {","    //must be implemented by each of the Node implementations","    throw new Error('_toTex not implemented for ' + this.type);","  };","","  /**","   * Get identifier.","   * @return {string}","   */","  Node.prototype.getIdentifier = function () {","    return this.type;","  };","","  /**","   * Get the content of the current Node.","   * @return {Node} node","   **/","  Node.prototype.getContent = function () {","    return this;","  };","","  /**","   * Validate the symbol names of a scope.","   * Throws an error when the scope contains an illegal symbol.","   * @param {Object} scope","   */","  function _validateScope(scope) {","    for (var symbol in scope) {","      if (scope.hasOwnProperty(symbol)) {","        if (symbol in keywords) {","          throw new Error('Scope contains an illegal symbol, \"' + symbol + '\" is a reserved keyword');","        }","      }","    }","  }","","  return Node;","}","","exports.name = 'Node';","exports.path = 'expression.node';","exports.math = true; // request access to the math namespace as 5th argument of the factory function","exports.factory = factory;",""],"l":{"3":1,"4":1,"5":1,"7":1,"11":1,"12":0,"13":0,"22":0,"23":0,"26":0,"28":0,"30":0,"39":0,"41":0,"42":0,"46":0,"53":0,"55":0,"57":0,"58":0,"61":0,"71":0,"72":0,"87":0,"89":0,"96":0,"98":0,"107":0,"109":0,"118":0,"119":0,"120":0,"123":0,"132":0,"134":0,"137":1,"138":0,"139":0,"140":0,"144":0,"168":0,"170":1,"171":0,"172":0,"173":0,"177":0,"178":0,"195":0,"196":0,"198":0,"199":0,"200":0,"204":0,"208":0,"209":0,"213":0,"214":0,"221":0,"223":0,"230":0,"231":0,"232":0,"242":0,"243":0,"263":0,"264":0,"265":0,"266":0,"269":0,"271":0,"272":0,"274":0,"278":0,"279":0,"282":0,"291":0,"293":0,"311":0,"312":0,"313":0,"314":0,"317":0,"319":0,"320":0,"322":0,"326":0,"327":0,"330":0,"340":0,"342":0,"349":0,"350":0,"357":0,"358":0,"366":1,"367":0,"368":0,"369":0,"370":0,"376":0,"379":1,"380":1,"381":1,"382":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/node/ObjectNode.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/node/ObjectNode.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":1,"51":1,"52":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"ObjectNode","line":14,"loc":{"start":{"line":14,"column":2},"end":{"line":14,"column":34}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":76},"end":{"line":23,"column":91}}},"4":{"name":"(anonymous_4)","line":49,"loc":{"start":{"line":49,"column":34},"end":{"line":49,"column":56}}},"5":{"name":"(anonymous_5)","line":63,"loc":{"start":{"line":63,"column":33},"end":{"line":63,"column":53}}},"6":{"name":"(anonymous_6)","line":77,"loc":{"start":{"line":77,"column":29},"end":{"line":77,"column":49}}},"7":{"name":"(anonymous_7)","line":91,"loc":{"start":{"line":91,"column":31},"end":{"line":91,"column":42}}},"8":{"name":"(anonymous_8)","line":107,"loc":{"start":{"line":107,"column":35},"end":{"line":107,"column":53}}},"9":{"name":"(anonymous_9)","line":122,"loc":{"start":{"line":122,"column":32},"end":{"line":122,"column":50}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":43}},"2":{"start":{"line":5,"column":0},"end":{"line":133,"column":1}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":37}},"4":{"start":{"line":14,"column":2},"end":{"line":29,"column":3}},"5":{"start":{"line":15,"column":4},"end":{"line":17,"column":5}},"6":{"start":{"line":16,"column":6},"end":{"line":16,"column":80}},"7":{"start":{"line":19,"column":4},"end":{"line":19,"column":39}},"8":{"start":{"line":22,"column":4},"end":{"line":28,"column":5}},"9":{"start":{"line":23,"column":6},"end":{"line":27,"column":7}},"10":{"start":{"line":24,"column":12},"end":{"line":24,"column":63}},"11":{"start":{"line":26,"column":8},"end":{"line":26,"column":64}},"12":{"start":{"line":31,"column":2},"end":{"line":31,"column":36}},"13":{"start":{"line":33,"column":2},"end":{"line":33,"column":43}},"14":{"start":{"line":35,"column":2},"end":{"line":35,"column":43}},"15":{"start":{"line":49,"column":2},"end":{"line":57,"column":4}},"16":{"start":{"line":50,"column":4},"end":{"line":50,"column":21}},"17":{"start":{"line":51,"column":4},"end":{"line":55,"column":5}},"18":{"start":{"line":52,"column":6},"end":{"line":54,"column":7}},"19":{"start":{"line":53,"column":8},"end":{"line":53,"column":84}},"20":{"start":{"line":56,"column":4},"end":{"line":56,"column":42}},"21":{"start":{"line":63,"column":2},"end":{"line":69,"column":4}},"22":{"start":{"line":64,"column":4},"end":{"line":68,"column":5}},"23":{"start":{"line":65,"column":6},"end":{"line":67,"column":7}},"24":{"start":{"line":66,"column":8},"end":{"line":66,"column":74}},"25":{"start":{"line":77,"column":2},"end":{"line":85,"column":4}},"26":{"start":{"line":78,"column":4},"end":{"line":78,"column":24}},"27":{"start":{"line":79,"column":4},"end":{"line":83,"column":5}},"28":{"start":{"line":80,"column":6},"end":{"line":82,"column":7}},"29":{"start":{"line":81,"column":8},"end":{"line":81,"column":106}},"30":{"start":{"line":84,"column":4},"end":{"line":84,"column":38}},"31":{"start":{"line":91,"column":2},"end":{"line":99,"column":4}},"32":{"start":{"line":92,"column":4},"end":{"line":92,"column":24}},"33":{"start":{"line":93,"column":4},"end":{"line":97,"column":5}},"34":{"start":{"line":94,"column":6},"end":{"line":96,"column":7}},"35":{"start":{"line":95,"column":8},"end":{"line":95,"column":47}},"36":{"start":{"line":98,"column":4},"end":{"line":98,"column":38}},"37":{"start":{"line":107,"column":2},"end":{"line":115,"column":4}},"38":{"start":{"line":108,"column":4},"end":{"line":108,"column":21}},"39":{"start":{"line":109,"column":4},"end":{"line":113,"column":5}},"40":{"start":{"line":110,"column":6},"end":{"line":112,"column":7}},"41":{"start":{"line":111,"column":8},"end":{"line":111,"column":81}},"42":{"start":{"line":114,"column":4},"end":{"line":114,"column":42}},"43":{"start":{"line":122,"column":2},"end":{"line":130,"column":4}},"44":{"start":{"line":123,"column":4},"end":{"line":123,"column":21}},"45":{"start":{"line":124,"column":4},"end":{"line":128,"column":5}},"46":{"start":{"line":125,"column":6},"end":{"line":127,"column":7}},"47":{"start":{"line":126,"column":8},"end":{"line":126,"column":97}},"48":{"start":{"line":129,"column":4},"end":{"line":129,"column":89}},"49":{"start":{"line":132,"column":2},"end":{"line":132,"column":20}},"50":{"start":{"line":135,"column":0},"end":{"line":135,"column":28}},"51":{"start":{"line":136,"column":0},"end":{"line":136,"column":33}},"52":{"start":{"line":137,"column":0},"end":{"line":137,"column":26}}},"branchMap":{"1":{"line":15,"type":"if","locations":[{"start":{"line":15,"column":4},"end":{"line":15,"column":4}},{"start":{"line":15,"column":4},"end":{"line":15,"column":4}}]},"2":{"line":19,"type":"binary-expr","locations":[{"start":{"line":19,"column":22},"end":{"line":19,"column":32}},{"start":{"line":19,"column":36},"end":{"line":19,"column":38}}]},"3":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":4},"end":{"line":22,"column":4}},{"start":{"line":22,"column":4},"end":{"line":22,"column":4}}]},"4":{"line":23,"type":"if","locations":[{"start":{"line":23,"column":6},"end":{"line":23,"column":6}},{"start":{"line":23,"column":6},"end":{"line":23,"column":6}}]},"5":{"line":23,"type":"binary-expr","locations":[{"start":{"line":23,"column":10},"end":{"line":23,"column":43}},{"start":{"line":23,"column":47},"end":{"line":25,"column":12}}]},"6":{"line":24,"type":"binary-expr","locations":[{"start":{"line":24,"column":19},"end":{"line":24,"column":35}},{"start":{"line":24,"column":39},"end":{"line":24,"column":62}}]},"7":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":6},"end":{"line":52,"column":6}},{"start":{"line":52,"column":6},"end":{"line":52,"column":6}}]},"8":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":6},"end":{"line":65,"column":6}},{"start":{"line":65,"column":6},"end":{"line":65,"column":6}}]},"9":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":6},"end":{"line":80,"column":6}},{"start":{"line":80,"column":6},"end":{"line":80,"column":6}}]},"10":{"line":94,"type":"if","locations":[{"start":{"line":94,"column":6},"end":{"line":94,"column":6}},{"start":{"line":94,"column":6},"end":{"line":94,"column":6}}]},"11":{"line":110,"type":"if","locations":[{"start":{"line":110,"column":6},"end":{"line":110,"column":6}},{"start":{"line":110,"column":6},"end":{"line":110,"column":6}}]},"12":{"line":125,"type":"if","locations":[{"start":{"line":125,"column":6},"end":{"line":125,"column":6}},{"start":{"line":125,"column":6},"end":{"line":125,"column":6}}]}},"code":["'use strict';","","var string = require('../../utils/string');","","function factory (type, config, load, typed) {","  var Node = load(require('./Node'));","","  /**","   * @constructor ObjectNode","   * @extends {Node}","   * Holds an object with keys/values","   * @param {Object.<string, Node>} [properties]   array with key/value pairs","   */","  function ObjectNode(properties) {","    if (!(this instanceof ObjectNode)) {","      throw new SyntaxError('Constructor must be called with the new operator');","    }","","    this.properties = properties || {};","","    // validate input","    if (properties) {","      if (!(typeof properties === 'object') || Object.keys(properties).some(function (key) {","            return !properties[key] || !properties[key].isNode;","          })) {","        throw new TypeError('Object containing Nodes expected');","      }","    }","  }","","  ObjectNode.prototype = new Node();","","  ObjectNode.prototype.type = 'ObjectNode';","","  ObjectNode.prototype.isObjectNode = true;","","  /**","   * Compile the node to javascript code","   * @param {Object} defs     Object which can be used to define functions","   *                          or constants globally available for the compiled","   *                          expression","   * @param {Object} args     Object with local function arguments, the key is","   *                          the name of the argument, and the value is `true`.","   *                          The object may not be mutated, but must be","   *                          extended instead.","   * @return {string} code","   * @private","   */","  ObjectNode.prototype._compile = function (defs, args) {","    var entries = [];","    for (var key in this.properties) {","      if (this.properties.hasOwnProperty(key)) {","        entries.push('\"' + key + '\": ' + this.properties[key]._compile(defs, args));","      }","    }","    return '{' + entries.join(', ') + '}';","  };","","  /**","   * Execute a callback for each of the child nodes of this node","   * @param {function(child: Node, path: string, parent: Node)} callback","   */","  ObjectNode.prototype.forEach = function (callback) {","    for (var key in this.properties) {","      if (this.properties.hasOwnProperty(key)) {","        callback(this.properties[key], 'properties[\"' + key + '\"]', this);","      }","    }","  };","","  /**","   * Create a new ObjectNode having it's childs be the results of calling","   * the provided callback function for each of the childs of the original node.","   * @param {function(child: Node, path: string, parent: Node): Node} callback","   * @returns {ObjectNode} Returns a transformed copy of the node","   */","  ObjectNode.prototype.map = function (callback) {","    var properties = {};","    for (var key in this.properties) {","      if (this.properties.hasOwnProperty(key)) {","        properties[key] = this._ifNode(callback(this.properties[key], 'properties[\"' + key + '\"]', this));","      }","    }","    return new ObjectNode(properties);","  };","","  /**","   * Create a clone of this node, a shallow copy","   * @return {ObjectNode}","   */","  ObjectNode.prototype.clone = function() {","    var properties = {};","    for (var key in this.properties) {","      if (this.properties.hasOwnProperty(key)) {","        properties[key] = this.properties[key];","      }","    }","    return new ObjectNode(properties);","  };","","  /**","   * Get string representation","   * @param {Object} options","   * @return {string} str","   * @override","   */","  ObjectNode.prototype._toString = function(options) {","    var entries = [];","    for (var key in this.properties) {","      if (this.properties.hasOwnProperty(key)) {","        entries.push('\"' + key + '\": ' + this.properties[key].toString(options));","      }","    }","    return '{' + entries.join(', ') + '}';","  };","","  /**","   * Get LaTeX representation","   * @param {Object} options","   * @return {string} str","   */","  ObjectNode.prototype._toTex = function(options) {","    var entries = [];","    for (var key in this.properties) {","      if (this.properties.hasOwnProperty(key)) {","        entries.push(\"\\\\mathbf{\" + key + ':} & ' + this.properties[key].toTex(options) + \"\\\\\\\\\");","      }","    }","    return '\\\\left\\\\{\\\\begin{array}{ll}' + entries.join('\\n') + '\\\\end{array}\\\\right\\\\}';","  };","","  return ObjectNode;","}","","exports.name = 'ObjectNode';","exports.path = 'expression.node';","exports.factory = factory;",""],"l":{"3":1,"5":1,"6":0,"14":1,"15":0,"16":0,"19":0,"22":0,"23":0,"24":0,"26":0,"31":0,"33":0,"35":0,"49":0,"50":0,"51":0,"52":0,"53":0,"56":0,"63":0,"64":0,"65":0,"66":0,"77":0,"78":0,"79":0,"80":0,"81":0,"84":0,"91":0,"92":0,"93":0,"94":0,"95":0,"98":0,"107":0,"108":0,"109":0,"110":0,"111":0,"114":0,"122":0,"123":0,"124":0,"125":0,"126":0,"129":0,"132":0,"135":1,"136":1,"137":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/node/OperatorNode.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/node/OperatorNode.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":1,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":1,"217":1,"218":1,"219":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0,0,0],"11":[0,0,0,0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0,0],"40":[0,0],"41":[0,0],"42":[0,0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0,0],"57":[0,0],"58":[0,0,0],"59":[0,0],"60":[0,0],"61":[0,0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0],"70":[0,0],"71":[0,0],"72":[0,0],"73":[0,0],"74":[0,0],"75":[0,0,0],"76":[0,0],"77":[0,0],"78":[0,0],"79":[0,0],"80":[0,0,0],"81":[0,0],"82":[0,0],"83":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},"fnMap":{"1":{"name":"factory","line":6,"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":51}}},"2":{"name":"OperatorNode","line":22,"loc":{"start":{"line":22,"column":2},"end":{"line":22,"column":48}}},"3":{"name":"(anonymous_3)","line":35,"loc":{"start":{"line":35,"column":23},"end":{"line":35,"column":39}}},"4":{"name":"(anonymous_4)","line":63,"loc":{"start":{"line":63,"column":36},"end":{"line":63,"column":58}}},"5":{"name":"(anonymous_5)","line":68,"loc":{"start":{"line":68,"column":31},"end":{"line":68,"column":46}}},"6":{"name":"(anonymous_6)","line":79,"loc":{"start":{"line":79,"column":35},"end":{"line":79,"column":55}}},"7":{"name":"(anonymous_7)","line":91,"loc":{"start":{"line":91,"column":31},"end":{"line":91,"column":51}}},"8":{"name":"(anonymous_8)","line":103,"loc":{"start":{"line":103,"column":33},"end":{"line":103,"column":45}}},"9":{"name":"calculateNecessaryParentheses","line":120,"loc":{"start":{"line":120,"column":2},"end":{"line":120,"column":73}}},"10":{"name":"(anonymous_10)","line":126,"loc":{"start":{"line":126,"column":28},"end":{"line":126,"column":43}}},"11":{"name":"(anonymous_11)","line":272,"loc":{"start":{"line":272,"column":33},"end":{"line":272,"column":48}}},"12":{"name":"(anonymous_12)","line":296,"loc":{"start":{"line":296,"column":37},"end":{"line":296,"column":56}}},"13":{"name":"(anonymous_13)","line":335,"loc":{"start":{"line":335,"column":37},"end":{"line":335,"column":59}}},"14":{"name":"(anonymous_14)","line":360,"loc":{"start":{"line":360,"column":34},"end":{"line":360,"column":53}}},"15":{"name":"(anonymous_15)","line":426,"loc":{"start":{"line":426,"column":34},"end":{"line":426,"column":56}}},"16":{"name":"(anonymous_16)","line":444,"loc":{"start":{"line":444,"column":21},"end":{"line":444,"column":36}}},"17":{"name":"(anonymous_17)","line":454,"loc":{"start":{"line":454,"column":41},"end":{"line":454,"column":53}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":41}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":40}},"3":{"start":{"line":6,"column":0},"end":{"line":459,"column":1}},"4":{"start":{"line":7,"column":2},"end":{"line":7,"column":45}},"5":{"start":{"line":8,"column":2},"end":{"line":8,"column":53}},"6":{"start":{"line":9,"column":2},"end":{"line":9,"column":51}},"7":{"start":{"line":10,"column":2},"end":{"line":10,"column":53}},"8":{"start":{"line":22,"column":2},"end":{"line":43,"column":3}},"9":{"start":{"line":23,"column":4},"end":{"line":25,"column":5}},"10":{"start":{"line":24,"column":6},"end":{"line":24,"column":80}},"11":{"start":{"line":28,"column":4},"end":{"line":30,"column":5}},"12":{"start":{"line":29,"column":6},"end":{"line":29,"column":64}},"13":{"start":{"line":31,"column":4},"end":{"line":33,"column":5}},"14":{"start":{"line":32,"column":6},"end":{"line":32,"column":64}},"15":{"start":{"line":34,"column":4},"end":{"line":37,"column":5}},"16":{"start":{"line":35,"column":40},"end":{"line":35,"column":67}},"17":{"start":{"line":36,"column":6},"end":{"line":36,"column":82}},"18":{"start":{"line":39,"column":4},"end":{"line":39,"column":40}},"19":{"start":{"line":40,"column":4},"end":{"line":40,"column":17}},"20":{"start":{"line":41,"column":4},"end":{"line":41,"column":17}},"21":{"start":{"line":42,"column":4},"end":{"line":42,"column":27}},"22":{"start":{"line":45,"column":2},"end":{"line":45,"column":38}},"23":{"start":{"line":47,"column":2},"end":{"line":47,"column":47}},"24":{"start":{"line":49,"column":2},"end":{"line":49,"column":47}},"25":{"start":{"line":63,"column":2},"end":{"line":73,"column":4}},"26":{"start":{"line":64,"column":4},"end":{"line":66,"column":5}},"27":{"start":{"line":65,"column":6},"end":{"line":65,"column":87}},"28":{"start":{"line":68,"column":4},"end":{"line":70,"column":7}},"29":{"start":{"line":69,"column":6},"end":{"line":69,"column":38}},"30":{"start":{"line":72,"column":4},"end":{"line":72,"column":61}},"31":{"start":{"line":79,"column":2},"end":{"line":83,"column":4}},"32":{"start":{"line":80,"column":4},"end":{"line":82,"column":5}},"33":{"start":{"line":81,"column":6},"end":{"line":81,"column":54}},"34":{"start":{"line":91,"column":2},"end":{"line":97,"column":4}},"35":{"start":{"line":92,"column":4},"end":{"line":92,"column":18}},"36":{"start":{"line":93,"column":4},"end":{"line":95,"column":5}},"37":{"start":{"line":94,"column":6},"end":{"line":94,"column":78}},"38":{"start":{"line":96,"column":4},"end":{"line":96,"column":52}},"39":{"start":{"line":103,"column":2},"end":{"line":105,"column":4}},"40":{"start":{"line":104,"column":4},"end":{"line":104,"column":81}},"41":{"start":{"line":120,"column":2},"end":{"line":289,"column":3}},"42":{"start":{"line":122,"column":4},"end":{"line":122,"column":64}},"43":{"start":{"line":123,"column":4},"end":{"line":123,"column":70}},"44":{"start":{"line":125,"column":4},"end":{"line":139,"column":5}},"45":{"start":{"line":126,"column":6},"end":{"line":137,"column":9}},"46":{"start":{"line":127,"column":8},"end":{"line":136,"column":9}},"47":{"start":{"line":132,"column":12},"end":{"line":132,"column":25}},"48":{"start":{"line":133,"column":12},"end":{"line":133,"column":18}},"49":{"start":{"line":135,"column":12},"end":{"line":135,"column":24}},"50":{"start":{"line":138,"column":6},"end":{"line":138,"column":20}},"51":{"start":{"line":141,"column":4},"end":{"line":288,"column":5}},"52":{"start":{"line":142,"column":6},"end":{"line":142,"column":16}},"53":{"start":{"line":143,"column":11},"end":{"line":288,"column":5}},"54":{"start":{"line":145,"column":6},"end":{"line":145,"column":76}},"55":{"start":{"line":148,"column":6},"end":{"line":167,"column":7}},"56":{"start":{"line":149,"column":8},"end":{"line":149,"column":30}},"57":{"start":{"line":150,"column":8},"end":{"line":150,"column":27}},"58":{"start":{"line":151,"column":8},"end":{"line":159,"column":9}},"59":{"start":{"line":152,"column":10},"end":{"line":152,"column":54}},"60":{"start":{"line":153,"column":10},"end":{"line":153,"column":48}},"61":{"start":{"line":157,"column":10},"end":{"line":157,"column":67}},"62":{"start":{"line":158,"column":10},"end":{"line":158,"column":61}},"63":{"start":{"line":160,"column":8},"end":{"line":162,"column":9}},"64":{"start":{"line":161,"column":10},"end":{"line":161,"column":25}},"65":{"start":{"line":164,"column":8},"end":{"line":166,"column":9}},"66":{"start":{"line":165,"column":10},"end":{"line":165,"column":25}},"67":{"start":{"line":169,"column":6},"end":{"line":172,"column":7}},"68":{"start":{"line":171,"column":8},"end":{"line":171,"column":23}},"69":{"start":{"line":174,"column":6},"end":{"line":177,"column":7}},"70":{"start":{"line":176,"column":8},"end":{"line":176,"column":22}},"71":{"start":{"line":180,"column":6},"end":{"line":180,"column":21}},"72":{"start":{"line":181,"column":11},"end":{"line":288,"column":5}},"73":{"start":{"line":182,"column":6},"end":{"line":182,"column":20}},"74":{"start":{"line":184,"column":6},"end":{"line":184,"column":72}},"75":{"start":{"line":186,"column":6},"end":{"line":186,"column":81}},"76":{"start":{"line":188,"column":6},"end":{"line":205,"column":7}},"77":{"start":{"line":191,"column":8},"end":{"line":191,"column":26}},"78":{"start":{"line":193,"column":11},"end":{"line":205,"column":7}},"79":{"start":{"line":198,"column":8},"end":{"line":198,"column":25}},"80":{"start":{"line":200,"column":11},"end":{"line":205,"column":7}},"81":{"start":{"line":201,"column":8},"end":{"line":201,"column":25}},"82":{"start":{"line":204,"column":8},"end":{"line":204,"column":26}},"83":{"start":{"line":207,"column":6},"end":{"line":207,"column":20}},"84":{"start":{"line":209,"column":6},"end":{"line":209,"column":72}},"85":{"start":{"line":211,"column":6},"end":{"line":211,"column":81}},"86":{"start":{"line":213,"column":6},"end":{"line":230,"column":7}},"87":{"start":{"line":216,"column":8},"end":{"line":216,"column":26}},"88":{"start":{"line":218,"column":11},"end":{"line":230,"column":7}},"89":{"start":{"line":223,"column":8},"end":{"line":223,"column":25}},"90":{"start":{"line":225,"column":11},"end":{"line":230,"column":7}},"91":{"start":{"line":226,"column":8},"end":{"line":226,"column":25}},"92":{"start":{"line":229,"column":8},"end":{"line":229,"column":26}},"93":{"start":{"line":233,"column":6},"end":{"line":268,"column":7}},"94":{"start":{"line":234,"column":8},"end":{"line":234,"column":27}},"95":{"start":{"line":235,"column":8},"end":{"line":235,"column":26}},"96":{"start":{"line":236,"column":8},"end":{"line":236,"column":26}},"97":{"start":{"line":237,"column":8},"end":{"line":247,"column":9}},"98":{"start":{"line":238,"column":10},"end":{"line":238,"column":48}},"99":{"start":{"line":239,"column":10},"end":{"line":239,"column":55}},"100":{"start":{"line":240,"column":10},"end":{"line":240,"column":55}},"101":{"start":{"line":244,"column":10},"end":{"line":244,"column":61}},"102":{"start":{"line":245,"column":10},"end":{"line":245,"column":68}},"103":{"start":{"line":246,"column":10},"end":{"line":246,"column":68}},"104":{"start":{"line":249,"column":8},"end":{"line":257,"column":9}},"105":{"start":{"line":250,"column":10},"end":{"line":252,"column":11}},"106":{"start":{"line":251,"column":12},"end":{"line":251,"column":30}},"107":{"start":{"line":254,"column":10},"end":{"line":256,"column":11}},"108":{"start":{"line":255,"column":12},"end":{"line":255,"column":30}},"109":{"start":{"line":259,"column":8},"end":{"line":267,"column":9}},"110":{"start":{"line":260,"column":10},"end":{"line":262,"column":11}},"111":{"start":{"line":261,"column":12},"end":{"line":261,"column":30}},"112":{"start":{"line":264,"column":10},"end":{"line":266,"column":11}},"113":{"start":{"line":265,"column":12},"end":{"line":265,"column":30}},"114":{"start":{"line":270,"column":6},"end":{"line":270,"column":36}},"115":{"start":{"line":271,"column":11},"end":{"line":288,"column":5}},"116":{"start":{"line":272,"column":6},"end":{"line":286,"column":9}},"117":{"start":{"line":273,"column":8},"end":{"line":273,"column":70}},"118":{"start":{"line":274,"column":8},"end":{"line":274,"column":79}},"119":{"start":{"line":275,"column":8},"end":{"line":275,"column":76}},"120":{"start":{"line":276,"column":8},"end":{"line":283,"column":9}},"121":{"start":{"line":278,"column":10},"end":{"line":278,"column":23}},"122":{"start":{"line":279,"column":15},"end":{"line":283,"column":9}},"123":{"start":{"line":280,"column":10},"end":{"line":280,"column":22}},"124":{"start":{"line":281,"column":15},"end":{"line":283,"column":9}},"125":{"start":{"line":282,"column":10},"end":{"line":282,"column":22}},"126":{"start":{"line":285,"column":8},"end":{"line":285,"column":21}},"127":{"start":{"line":287,"column":6},"end":{"line":287,"column":25}},"128":{"start":{"line":296,"column":2},"end":{"line":353,"column":4}},"129":{"start":{"line":297,"column":4},"end":{"line":297,"column":86}},"130":{"start":{"line":298,"column":4},"end":{"line":298,"column":77}},"131":{"start":{"line":299,"column":4},"end":{"line":299,"column":25}},"132":{"start":{"line":300,"column":4},"end":{"line":300,"column":79}},"133":{"start":{"line":302,"column":4},"end":{"line":352,"column":5}},"134":{"start":{"line":303,"column":6},"end":{"line":303,"column":64}},"135":{"start":{"line":305,"column":6},"end":{"line":305,"column":46}},"136":{"start":{"line":306,"column":6},"end":{"line":308,"column":7}},"137":{"start":{"line":307,"column":8},"end":{"line":307,"column":38}},"138":{"start":{"line":310,"column":6},"end":{"line":315,"column":7}},"139":{"start":{"line":311,"column":8},"end":{"line":311,"column":33}},"140":{"start":{"line":313,"column":11},"end":{"line":315,"column":7}},"141":{"start":{"line":314,"column":8},"end":{"line":314,"column":33}},"142":{"start":{"line":318,"column":6},"end":{"line":318,"column":31}},"143":{"start":{"line":319,"column":11},"end":{"line":352,"column":5}},"144":{"start":{"line":320,"column":6},"end":{"line":320,"column":42}},"145":{"start":{"line":321,"column":6},"end":{"line":321,"column":42}},"146":{"start":{"line":322,"column":6},"end":{"line":324,"column":7}},"147":{"start":{"line":323,"column":8},"end":{"line":323,"column":30}},"148":{"start":{"line":325,"column":6},"end":{"line":327,"column":7}},"149":{"start":{"line":326,"column":8},"end":{"line":326,"column":30}},"150":{"start":{"line":329,"column":6},"end":{"line":331,"column":7}},"151":{"start":{"line":330,"column":8},"end":{"line":330,"column":31}},"152":{"start":{"line":333,"column":6},"end":{"line":333,"column":45}},"153":{"start":{"line":334,"column":11},"end":{"line":352,"column":5}},"154":{"start":{"line":335,"column":6},"end":{"line":342,"column":9}},"155":{"start":{"line":336,"column":8},"end":{"line":336,"column":36}},"156":{"start":{"line":337,"column":8},"end":{"line":339,"column":9}},"157":{"start":{"line":338,"column":10},"end":{"line":338,"column":32}},"158":{"start":{"line":341,"column":8},"end":{"line":341,"column":19}},"159":{"start":{"line":344,"column":6},"end":{"line":346,"column":7}},"160":{"start":{"line":345,"column":8},"end":{"line":345,"column":41}},"161":{"start":{"line":348,"column":6},"end":{"line":348,"column":55}},"162":{"start":{"line":351,"column":6},"end":{"line":351,"column":56}},"163":{"start":{"line":360,"column":2},"end":{"line":448,"column":4}},"164":{"start":{"line":361,"column":4},"end":{"line":361,"column":86}},"165":{"start":{"line":362,"column":4},"end":{"line":362,"column":77}},"166":{"start":{"line":363,"column":4},"end":{"line":363,"column":25}},"167":{"start":{"line":364,"column":4},"end":{"line":364,"column":78}},"168":{"start":{"line":365,"column":4},"end":{"line":365,"column":38}},"169":{"start":{"line":366,"column":4},"end":{"line":366,"column":50}},"170":{"start":{"line":368,"column":4},"end":{"line":447,"column":5}},"171":{"start":{"line":369,"column":6},"end":{"line":369,"column":64}},"172":{"start":{"line":371,"column":6},"end":{"line":371,"column":43}},"173":{"start":{"line":372,"column":6},"end":{"line":374,"column":7}},"174":{"start":{"line":373,"column":8},"end":{"line":373,"column":51}},"175":{"start":{"line":376,"column":6},"end":{"line":381,"column":7}},"176":{"start":{"line":377,"column":8},"end":{"line":377,"column":28}},"177":{"start":{"line":379,"column":11},"end":{"line":381,"column":7}},"178":{"start":{"line":380,"column":8},"end":{"line":380,"column":28}},"179":{"start":{"line":384,"column":6},"end":{"line":384,"column":26}},"180":{"start":{"line":385,"column":11},"end":{"line":447,"column":5}},"181":{"start":{"line":386,"column":6},"end":{"line":386,"column":24}},"182":{"start":{"line":387,"column":6},"end":{"line":387,"column":38}},"183":{"start":{"line":388,"column":6},"end":{"line":390,"column":7}},"184":{"start":{"line":389,"column":8},"end":{"line":389,"column":49}},"185":{"start":{"line":392,"column":6},"end":{"line":392,"column":24}},"186":{"start":{"line":393,"column":6},"end":{"line":393,"column":38}},"187":{"start":{"line":394,"column":6},"end":{"line":396,"column":7}},"188":{"start":{"line":395,"column":8},"end":{"line":395,"column":49}},"189":{"start":{"line":399,"column":6},"end":{"line":399,"column":24}},"190":{"start":{"line":400,"column":6},"end":{"line":406,"column":7}},"191":{"start":{"line":401,"column":8},"end":{"line":401,"column":44}},"192":{"start":{"line":405,"column":8},"end":{"line":405,"column":57}},"193":{"start":{"line":407,"column":6},"end":{"line":423,"column":7}},"194":{"start":{"line":410,"column":10},"end":{"line":410,"column":62}},"195":{"start":{"line":412,"column":10},"end":{"line":412,"column":38}},"196":{"start":{"line":413,"column":10},"end":{"line":413,"column":38}},"197":{"start":{"line":414,"column":10},"end":{"line":418,"column":11}},"198":{"start":{"line":417,"column":14},"end":{"line":417,"column":55}},"199":{"start":{"line":420,"column":10},"end":{"line":422,"column":11}},"200":{"start":{"line":421,"column":12},"end":{"line":421,"column":41}},"201":{"start":{"line":424,"column":6},"end":{"line":424,"column":34}},"202":{"start":{"line":425,"column":11},"end":{"line":447,"column":5}},"203":{"start":{"line":426,"column":6},"end":{"line":432,"column":9}},"204":{"start":{"line":427,"column":8},"end":{"line":427,"column":33}},"205":{"start":{"line":428,"column":8},"end":{"line":430,"column":9}},"206":{"start":{"line":429,"column":10},"end":{"line":429,"column":45}},"207":{"start":{"line":431,"column":8},"end":{"line":431,"column":19}},"208":{"start":{"line":434,"column":6},"end":{"line":436,"column":7}},"209":{"start":{"line":435,"column":8},"end":{"line":435,"column":38}},"210":{"start":{"line":438,"column":6},"end":{"line":438,"column":34}},"211":{"start":{"line":443,"column":6},"end":{"line":446,"column":36}},"212":{"start":{"line":445,"column":12},"end":{"line":445,"column":38}},"213":{"start":{"line":454,"column":2},"end":{"line":456,"column":4}},"214":{"start":{"line":455,"column":4},"end":{"line":455,"column":37}},"215":{"start":{"line":458,"column":2},"end":{"line":458,"column":22}},"216":{"start":{"line":461,"column":0},"end":{"line":461,"column":30}},"217":{"start":{"line":462,"column":0},"end":{"line":462,"column":33}},"218":{"start":{"line":463,"column":0},"end":{"line":463,"column":20}},"219":{"start":{"line":464,"column":0},"end":{"line":464,"column":26}}},"branchMap":{"1":{"line":23,"type":"if","locations":[{"start":{"line":23,"column":4},"end":{"line":23,"column":4}},{"start":{"line":23,"column":4},"end":{"line":23,"column":4}}]},"2":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":4},"end":{"line":28,"column":4}},{"start":{"line":28,"column":4},"end":{"line":28,"column":4}}]},"3":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":4},"end":{"line":31,"column":4}},{"start":{"line":31,"column":4},"end":{"line":31,"column":4}}]},"4":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":4},"end":{"line":34,"column":4}},{"start":{"line":34,"column":4},"end":{"line":34,"column":4}}]},"5":{"line":34,"type":"binary-expr","locations":[{"start":{"line":34,"column":8},"end":{"line":34,"column":28}},{"start":{"line":35,"column":11},"end":{"line":35,"column":69}}]},"6":{"line":35,"type":"binary-expr","locations":[{"start":{"line":35,"column":47},"end":{"line":35,"column":51}},{"start":{"line":35,"column":55},"end":{"line":35,"column":66}}]},"7":{"line":42,"type":"binary-expr","locations":[{"start":{"line":42,"column":16},"end":{"line":42,"column":20}},{"start":{"line":42,"column":24},"end":{"line":42,"column":26}}]},"8":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":4},"end":{"line":64,"column":4}},{"start":{"line":64,"column":4},"end":{"line":64,"column":4}}]},"9":{"line":125,"type":"if","locations":[{"start":{"line":125,"column":4},"end":{"line":125,"column":4}},{"start":{"line":125,"column":4},"end":{"line":125,"column":4}}]},"10":{"line":125,"type":"binary-expr","locations":[{"start":{"line":125,"column":9},"end":{"line":125,"column":30}},{"start":{"line":125,"column":37},"end":{"line":125,"column":52}},{"start":{"line":125,"column":58},"end":{"line":125,"column":101}},{"start":{"line":125,"column":107},"end":{"line":125,"column":155}}]},"11":{"line":127,"type":"switch","locations":[{"start":{"line":128,"column":10},"end":{"line":128,"column":27}},{"start":{"line":129,"column":10},"end":{"line":129,"column":30}},{"start":{"line":130,"column":10},"end":{"line":130,"column":28}},{"start":{"line":131,"column":10},"end":{"line":133,"column":18}},{"start":{"line":134,"column":10},"end":{"line":135,"column":24}}]},"12":{"line":141,"type":"if","locations":[{"start":{"line":141,"column":4},"end":{"line":141,"column":4}},{"start":{"line":141,"column":4},"end":{"line":141,"column":4}}]},"13":{"line":143,"type":"if","locations":[{"start":{"line":143,"column":11},"end":{"line":143,"column":11}},{"start":{"line":143,"column":11},"end":{"line":143,"column":11}}]},"14":{"line":148,"type":"if","locations":[{"start":{"line":148,"column":6},"end":{"line":148,"column":6}},{"start":{"line":148,"column":6},"end":{"line":148,"column":6}}]},"15":{"line":148,"type":"binary-expr","locations":[{"start":{"line":148,"column":10},"end":{"line":148,"column":15}},{"start":{"line":148,"column":20},"end":{"line":148,"column":46}}]},"16":{"line":151,"type":"if","locations":[{"start":{"line":151,"column":8},"end":{"line":151,"column":8}},{"start":{"line":151,"column":8},"end":{"line":151,"column":8}}]},"17":{"line":160,"type":"if","locations":[{"start":{"line":160,"column":8},"end":{"line":160,"column":8}},{"start":{"line":160,"column":8},"end":{"line":160,"column":8}}]},"18":{"line":164,"type":"if","locations":[{"start":{"line":164,"column":8},"end":{"line":164,"column":8}},{"start":{"line":164,"column":8},"end":{"line":164,"column":8}}]},"19":{"line":169,"type":"if","locations":[{"start":{"line":169,"column":6},"end":{"line":169,"column":6}},{"start":{"line":169,"column":6},"end":{"line":169,"column":6}}]},"20":{"line":174,"type":"if","locations":[{"start":{"line":174,"column":6},"end":{"line":174,"column":6}},{"start":{"line":174,"column":6},"end":{"line":174,"column":6}}]},"21":{"line":181,"type":"if","locations":[{"start":{"line":181,"column":11},"end":{"line":181,"column":11}},{"start":{"line":181,"column":11},"end":{"line":181,"column":11}}]},"22":{"line":188,"type":"if","locations":[{"start":{"line":188,"column":6},"end":{"line":188,"column":6}},{"start":{"line":188,"column":6},"end":{"line":188,"column":6}}]},"23":{"line":193,"type":"if","locations":[{"start":{"line":193,"column":11},"end":{"line":193,"column":11}},{"start":{"line":193,"column":11},"end":{"line":193,"column":11}}]},"24":{"line":193,"type":"binary-expr","locations":[{"start":{"line":193,"column":16},"end":{"line":193,"column":44}},{"start":{"line":193,"column":50},"end":{"line":193,"column":75}},{"start":{"line":193,"column":80},"end":{"line":193,"column":93}}]},"25":{"line":200,"type":"if","locations":[{"start":{"line":200,"column":11},"end":{"line":200,"column":11}},{"start":{"line":200,"column":11},"end":{"line":200,"column":11}}]},"26":{"line":213,"type":"if","locations":[{"start":{"line":213,"column":6},"end":{"line":213,"column":6}},{"start":{"line":213,"column":6},"end":{"line":213,"column":6}}]},"27":{"line":218,"type":"if","locations":[{"start":{"line":218,"column":11},"end":{"line":218,"column":11}},{"start":{"line":218,"column":11},"end":{"line":218,"column":11}}]},"28":{"line":218,"type":"binary-expr","locations":[{"start":{"line":218,"column":16},"end":{"line":218,"column":44}},{"start":{"line":218,"column":50},"end":{"line":218,"column":74}},{"start":{"line":218,"column":79},"end":{"line":218,"column":92}}]},"29":{"line":225,"type":"if","locations":[{"start":{"line":225,"column":11},"end":{"line":225,"column":11}},{"start":{"line":225,"column":11},"end":{"line":225,"column":11}}]},"30":{"line":233,"type":"if","locations":[{"start":{"line":233,"column":6},"end":{"line":233,"column":6}},{"start":{"line":233,"column":6},"end":{"line":233,"column":6}}]},"31":{"line":237,"type":"if","locations":[{"start":{"line":237,"column":8},"end":{"line":237,"column":8}},{"start":{"line":237,"column":8},"end":{"line":237,"column":8}}]},"32":{"line":249,"type":"if","locations":[{"start":{"line":249,"column":8},"end":{"line":249,"column":8}},{"start":{"line":249,"column":8},"end":{"line":249,"column":8}}]},"33":{"line":250,"type":"if","locations":[{"start":{"line":250,"column":10},"end":{"line":250,"column":10}},{"start":{"line":250,"column":10},"end":{"line":250,"column":10}}]},"34":{"line":254,"type":"if","locations":[{"start":{"line":254,"column":10},"end":{"line":254,"column":10}},{"start":{"line":254,"column":10},"end":{"line":254,"column":10}}]},"35":{"line":259,"type":"if","locations":[{"start":{"line":259,"column":8},"end":{"line":259,"column":8}},{"start":{"line":259,"column":8},"end":{"line":259,"column":8}}]},"36":{"line":260,"type":"if","locations":[{"start":{"line":260,"column":10},"end":{"line":260,"column":10}},{"start":{"line":260,"column":10},"end":{"line":260,"column":10}}]},"37":{"line":264,"type":"if","locations":[{"start":{"line":264,"column":10},"end":{"line":264,"column":10}},{"start":{"line":264,"column":10},"end":{"line":264,"column":10}}]},"38":{"line":271,"type":"if","locations":[{"start":{"line":271,"column":11},"end":{"line":271,"column":11}},{"start":{"line":271,"column":11},"end":{"line":271,"column":11}}]},"39":{"line":271,"type":"binary-expr","locations":[{"start":{"line":271,"column":16},"end":{"line":271,"column":31}},{"start":{"line":271,"column":38},"end":{"line":271,"column":81}},{"start":{"line":271,"column":87},"end":{"line":271,"column":135}}]},"40":{"line":276,"type":"if","locations":[{"start":{"line":276,"column":8},"end":{"line":276,"column":8}},{"start":{"line":276,"column":8},"end":{"line":276,"column":8}}]},"41":{"line":279,"type":"if","locations":[{"start":{"line":279,"column":15},"end":{"line":279,"column":15}},{"start":{"line":279,"column":15},"end":{"line":279,"column":15}}]},"42":{"line":279,"type":"binary-expr","locations":[{"start":{"line":279,"column":20},"end":{"line":279,"column":48}},{"start":{"line":279,"column":54},"end":{"line":279,"column":88}},{"start":{"line":279,"column":93},"end":{"line":279,"column":106}}]},"43":{"line":281,"type":"if","locations":[{"start":{"line":281,"column":15},"end":{"line":281,"column":15}},{"start":{"line":281,"column":15},"end":{"line":281,"column":15}}]},"44":{"line":297,"type":"cond-expr","locations":[{"start":{"line":297,"column":57},"end":{"line":297,"column":76}},{"start":{"line":297,"column":79},"end":{"line":297,"column":85}}]},"45":{"line":297,"type":"binary-expr","locations":[{"start":{"line":297,"column":23},"end":{"line":297,"column":30}},{"start":{"line":297,"column":34},"end":{"line":297,"column":53}}]},"46":{"line":298,"type":"cond-expr","locations":[{"start":{"line":298,"column":51},"end":{"line":298,"column":67}},{"start":{"line":298,"column":70},"end":{"line":298,"column":76}}]},"47":{"line":298,"type":"binary-expr","locations":[{"start":{"line":298,"column":20},"end":{"line":298,"column":27}},{"start":{"line":298,"column":31},"end":{"line":298,"column":47}}]},"48":{"line":302,"type":"if","locations":[{"start":{"line":302,"column":4},"end":{"line":302,"column":4}},{"start":{"line":302,"column":4},"end":{"line":302,"column":4}}]},"49":{"line":306,"type":"if","locations":[{"start":{"line":306,"column":6},"end":{"line":306,"column":6}},{"start":{"line":306,"column":6},"end":{"line":306,"column":6}}]},"50":{"line":310,"type":"if","locations":[{"start":{"line":310,"column":6},"end":{"line":310,"column":6}},{"start":{"line":310,"column":6},"end":{"line":310,"column":6}}]},"51":{"line":313,"type":"if","locations":[{"start":{"line":313,"column":11},"end":{"line":313,"column":11}},{"start":{"line":313,"column":11},"end":{"line":313,"column":11}}]},"52":{"line":319,"type":"if","locations":[{"start":{"line":319,"column":11},"end":{"line":319,"column":11}},{"start":{"line":319,"column":11},"end":{"line":319,"column":11}}]},"53":{"line":322,"type":"if","locations":[{"start":{"line":322,"column":6},"end":{"line":322,"column":6}},{"start":{"line":322,"column":6},"end":{"line":322,"column":6}}]},"54":{"line":325,"type":"if","locations":[{"start":{"line":325,"column":6},"end":{"line":325,"column":6}},{"start":{"line":325,"column":6},"end":{"line":325,"column":6}}]},"55":{"line":329,"type":"if","locations":[{"start":{"line":329,"column":6},"end":{"line":329,"column":6}},{"start":{"line":329,"column":6},"end":{"line":329,"column":6}}]},"56":{"line":329,"type":"binary-expr","locations":[{"start":{"line":329,"column":10},"end":{"line":329,"column":23}},{"start":{"line":329,"column":28},"end":{"line":329,"column":76}},{"start":{"line":329,"column":82},"end":{"line":329,"column":100}}]},"57":{"line":334,"type":"if","locations":[{"start":{"line":334,"column":11},"end":{"line":334,"column":11}},{"start":{"line":334,"column":11},"end":{"line":334,"column":11}}]},"58":{"line":334,"type":"binary-expr","locations":[{"start":{"line":334,"column":16},"end":{"line":334,"column":31}},{"start":{"line":334,"column":38},"end":{"line":334,"column":81}},{"start":{"line":334,"column":87},"end":{"line":334,"column":135}}]},"59":{"line":337,"type":"if","locations":[{"start":{"line":337,"column":8},"end":{"line":337,"column":8}},{"start":{"line":337,"column":8},"end":{"line":337,"column":8}}]},"60":{"line":344,"type":"if","locations":[{"start":{"line":344,"column":6},"end":{"line":344,"column":6}},{"start":{"line":344,"column":6},"end":{"line":344,"column":6}}]},"61":{"line":344,"type":"binary-expr","locations":[{"start":{"line":344,"column":10},"end":{"line":344,"column":23}},{"start":{"line":344,"column":28},"end":{"line":344,"column":76}},{"start":{"line":344,"column":82},"end":{"line":344,"column":101}}]},"62":{"line":361,"type":"cond-expr","locations":[{"start":{"line":361,"column":57},"end":{"line":361,"column":76}},{"start":{"line":361,"column":79},"end":{"line":361,"column":85}}]},"63":{"line":361,"type":"binary-expr","locations":[{"start":{"line":361,"column":23},"end":{"line":361,"column":30}},{"start":{"line":361,"column":34},"end":{"line":361,"column":53}}]},"64":{"line":362,"type":"cond-expr","locations":[{"start":{"line":362,"column":51},"end":{"line":362,"column":67}},{"start":{"line":362,"column":70},"end":{"line":362,"column":76}}]},"65":{"line":362,"type":"binary-expr","locations":[{"start":{"line":362,"column":20},"end":{"line":362,"column":27}},{"start":{"line":362,"column":31},"end":{"line":362,"column":47}}]},"66":{"line":366,"type":"cond-expr","locations":[{"start":{"line":366,"column":37},"end":{"line":366,"column":44}},{"start":{"line":366,"column":47},"end":{"line":366,"column":49}}]},"67":{"line":368,"type":"if","locations":[{"start":{"line":368,"column":4},"end":{"line":368,"column":4}},{"start":{"line":368,"column":4},"end":{"line":368,"column":4}}]},"68":{"line":372,"type":"if","locations":[{"start":{"line":372,"column":6},"end":{"line":372,"column":6}},{"start":{"line":372,"column":6},"end":{"line":372,"column":6}}]},"69":{"line":376,"type":"if","locations":[{"start":{"line":376,"column":6},"end":{"line":376,"column":6}},{"start":{"line":376,"column":6},"end":{"line":376,"column":6}}]},"70":{"line":379,"type":"if","locations":[{"start":{"line":379,"column":11},"end":{"line":379,"column":11}},{"start":{"line":379,"column":11},"end":{"line":379,"column":11}}]},"71":{"line":385,"type":"if","locations":[{"start":{"line":385,"column":11},"end":{"line":385,"column":11}},{"start":{"line":385,"column":11},"end":{"line":385,"column":11}}]},"72":{"line":388,"type":"if","locations":[{"start":{"line":388,"column":6},"end":{"line":388,"column":6}},{"start":{"line":388,"column":6},"end":{"line":388,"column":6}}]},"73":{"line":394,"type":"if","locations":[{"start":{"line":394,"column":6},"end":{"line":394,"column":6}},{"start":{"line":394,"column":6},"end":{"line":394,"column":6}}]},"74":{"line":400,"type":"if","locations":[{"start":{"line":400,"column":6},"end":{"line":400,"column":6}},{"start":{"line":400,"column":6},"end":{"line":400,"column":6}}]},"75":{"line":407,"type":"switch","locations":[{"start":{"line":408,"column":8},"end":{"line":410,"column":62}},{"start":{"line":411,"column":8},"end":{"line":418,"column":11}},{"start":{"line":419,"column":8},"end":{"line":422,"column":11}}]},"76":{"line":414,"type":"switch","locations":[{"start":{"line":415,"column":12},"end":{"line":415,"column":35}},{"start":{"line":416,"column":12},"end":{"line":417,"column":55}}]},"77":{"line":420,"type":"if","locations":[{"start":{"line":420,"column":10},"end":{"line":420,"column":10}},{"start":{"line":420,"column":10},"end":{"line":420,"column":10}}]},"78":{"line":420,"type":"binary-expr","locations":[{"start":{"line":420,"column":14},"end":{"line":420,"column":27}},{"start":{"line":420,"column":32},"end":{"line":420,"column":51}}]},"79":{"line":425,"type":"if","locations":[{"start":{"line":425,"column":11},"end":{"line":425,"column":11}},{"start":{"line":425,"column":11},"end":{"line":425,"column":11}}]},"80":{"line":425,"type":"binary-expr","locations":[{"start":{"line":425,"column":16},"end":{"line":425,"column":31}},{"start":{"line":425,"column":38},"end":{"line":425,"column":81}},{"start":{"line":425,"column":87},"end":{"line":425,"column":135}}]},"81":{"line":428,"type":"if","locations":[{"start":{"line":428,"column":8},"end":{"line":428,"column":8}},{"start":{"line":428,"column":8},"end":{"line":428,"column":8}}]},"82":{"line":434,"type":"if","locations":[{"start":{"line":434,"column":6},"end":{"line":434,"column":6}},{"start":{"line":434,"column":6},"end":{"line":434,"column":6}}]},"83":{"line":434,"type":"binary-expr","locations":[{"start":{"line":434,"column":11},"end":{"line":434,"column":59}},{"start":{"line":434,"column":64},"end":{"line":434,"column":77}}]}},"code":["'use strict';","","var latex = require('../../utils/latex');","var operators = require('../operators');","","function factory (type, config, load, typed, math) {","  var Node         = load(require('./Node'));","  var ConstantNode = load(require('./ConstantNode'));","  var SymbolNode   = load(require('./SymbolNode'));","  var FunctionNode = load(require('./FunctionNode'));","","  /**","   * @constructor OperatorNode","   * @extends {Node}","   * An operator with two arguments, like 2+3","   *","   * @param {string} op           Operator name, for example '+'","   * @param {string} fn           Function name, for example 'add'","   * @param {Node[]} args         Operator arguments","   * @param {boolean} [implicit]  Is this an implicit multiplication?","   */","  function OperatorNode(op, fn, args, implicit) {","    if (!(this instanceof OperatorNode)) {","      throw new SyntaxError('Constructor must be called with the new operator');","    }","","    //validate input","    if (typeof op !== 'string') {","      throw new TypeError('string expected for parameter \"op\"');","    }","    if (typeof fn !== 'string') {","      throw new TypeError('string expected for parameter \"fn\"');","    }","    if (!Array.isArray(args)","        || !args.every(function (node) {return node && node.isNode;})) {","      throw new TypeError('Array containing Nodes expected for parameter \"args\"');","    }","","    this.implicit = (implicit === true);","    this.op = op;","    this.fn = fn;","    this.args = args || [];","  }","","  OperatorNode.prototype = new Node();","","  OperatorNode.prototype.type = 'OperatorNode';","","  OperatorNode.prototype.isOperatorNode = true;","","  /**","   * Compile the node to javascript code","   * @param {Object} defs     Object which can be used to define functions","   *                          or constants globally available for the compiled","   *                          expression","   * @param {Object} args     Object with local function arguments, the key is","   *                          the name of the argument, and the value is `true`.","   *                          The object may not be mutated, but must be","   *                          extended instead.","   * @return {string} js","   * @private","   */","  OperatorNode.prototype._compile = function (defs, args) {","    if (!defs.math[this.fn]) {","      throw new Error('Function ' + this.fn + ' missing in provided namespace \"math\"');","    }","","    var jsArgs = this.args.map(function (arg) {","      return arg._compile(defs, args);","    });","","    return 'math.' + this.fn + '(' + jsArgs.join(', ') + ')';","  };","","  /**","   * Execute a callback for each of the child nodes of this node","   * @param {function(child: Node, path: string, parent: Node)} callback","   */","  OperatorNode.prototype.forEach = function (callback) {","    for (var i = 0; i < this.args.length; i++) {","      callback(this.args[i], 'args[' + i + ']', this);","    }","  };","","  /**","   * Create a new OperatorNode having it's childs be the results of calling","   * the provided callback function for each of the childs of the original node.","   * @param {function(child: Node, path: string, parent: Node): Node} callback","   * @returns {OperatorNode} Returns a transformed copy of the node","   */","  OperatorNode.prototype.map = function (callback) {","    var args = [];","    for (var i = 0; i < this.args.length; i++) {","      args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));","    }","    return new OperatorNode(this.op, this.fn, args);","  };","","  /**","   * Create a clone of this node, a shallow copy","   * @return {OperatorNode}","   */","  OperatorNode.prototype.clone = function () {","    return new OperatorNode(this.op, this.fn, this.args.slice(0), this.implicit);","  };","","  /**","   * Calculate which parentheses are necessary. Gets an OperatorNode","   * (which is the root of the tree) and an Array of Nodes","   * (this.args) and returns an array where 'true' means that an argument","   * has to be enclosed in parentheses whereas 'false' means the opposite.","   *","   * @param {OperatorNode} root","   * @param {string} parenthesis","   * @param {Node[]} args","   * @param {boolean} latex","   * @return {boolean[]}","   * @private","   */","  function calculateNecessaryParentheses(root, parenthesis, args, latex) {","    //precedence of the root OperatorNode","    var precedence = operators.getPrecedence(root, parenthesis);","    var associativity = operators.getAssociativity(root, parenthesis);","","    if ((parenthesis === 'all') || ((args.length > 2) && (root.getIdentifier() !== 'OperatorNode:add') && (root.getIdentifier() !== 'OperatorNode:multiply'))) {","      var parens = args.map(function (arg) {","        switch (arg.getContent().type) { //Nodes that don't need extra parentheses","          case 'ArrayNode':","          case 'ConstantNode':","          case 'SymbolNode':","          case 'ParenthesisNode':","            return false;","            break;","          default:","            return true;","        }","      });","      return parens;","    }","","    if (args.length === 0) {","      return [];","    } else if (args.length === 1) { //unary operators","      //precedence of the operand","      var operandPrecedence = operators.getPrecedence(args[0], parenthesis);","","      //handle special cases for LaTeX, where some of the parentheses aren't needed","      if (latex && (operandPrecedence !== null)) {","        var operandIdentifier;","        var rootIdentifier;","        if (parenthesis === 'keep') {","          operandIdentifier = args[0].getIdentifier();","          rootIdentifier = root.getIdentifier();","        }","        else {","          //Ignore Parenthesis Nodes when not in 'keep' mode","          operandIdentifier = args[0].getContent().getIdentifier();","          rootIdentifier = root.getContent().getIdentifier();","        }","        if (operators.properties[precedence][rootIdentifier].latexLeftParens === false) {","          return [false];","        }","","        if (operators.properties[operandPrecedence][operandIdentifier].latexParens === false) {","          return [false];","        }","      }","","      if (operandPrecedence === null) {","        //if the operand has no defined precedence, no parens are needed","        return [false];","      }","","      if (operandPrecedence <= precedence) {","        //if the operands precedence is lower, parens are needed","        return [true];","      }","","      //otherwise, no parens needed","      return [false];","    } else if (args.length === 2) { //binary operators","      var lhsParens; //left hand side needs parenthesis?","      //precedence of the left hand side","      var lhsPrecedence = operators.getPrecedence(args[0], parenthesis);","      //is the root node associative with the left hand side","      var assocWithLhs = operators.isAssociativeWith(root, args[0], parenthesis);","","      if (lhsPrecedence === null) {","        //if the left hand side has no defined precedence, no parens are needed","        //FunctionNode for example","        lhsParens = false;","      }","      else if ((lhsPrecedence === precedence) && (associativity === 'right') && !assocWithLhs) {","        //In case of equal precedence, if the root node is left associative","        // parens are **never** necessary for the left hand side.","        //If it is right associative however, parens are necessary","        //if the root node isn't associative with the left hand side","        lhsParens = true;","      }","      else if (lhsPrecedence < precedence) {","        lhsParens = true;","      }","      else {","        lhsParens = false;","      }","","      var rhsParens; //right hand side needs parenthesis?","      //precedence of the right hand side","      var rhsPrecedence = operators.getPrecedence(args[1], parenthesis);","      //is the root node associative with the right hand side?","      var assocWithRhs = operators.isAssociativeWith(root, args[1], parenthesis);","","      if (rhsPrecedence === null) {","        //if the right hand side has no defined precedence, no parens are needed","        //FunctionNode for example","        rhsParens = false;","      }","      else if ((rhsPrecedence === precedence) && (associativity === 'left') && !assocWithRhs) {","        //In case of equal precedence, if the root node is right associative","        // parens are **never** necessary for the right hand side.","        //If it is left associative however, parens are necessary","        //if the root node isn't associative with the right hand side","        rhsParens = true;","      }","      else if (rhsPrecedence < precedence) {","        rhsParens = true;","      }","      else {","        rhsParens = false;","      }","","      //handle special cases for LaTeX, where some of the parentheses aren't needed","      if (latex) {","        var rootIdentifier;","        var lhsIdentifier;","        var rhsIdentifier;","        if (parenthesis === 'keep') {","          rootIdentifier = root.getIdentifier();","          lhsIdentifier = root.args[0].getIdentifier();","          rhsIdentifier = root.args[1].getIdentifier();","        }","        else {","          //Ignore ParenthesisNodes when not in 'keep' mode","          rootIdentifier = root.getContent().getIdentifier();","          lhsIdentifier = root.args[0].getContent().getIdentifier();","          rhsIdentifier = root.args[1].getContent().getIdentifier();","        }","","        if (lhsPrecedence !== null) {","          if (operators.properties[precedence][rootIdentifier].latexLeftParens === false) {","            lhsParens = false;","          }","","          if (operators.properties[lhsPrecedence][lhsIdentifier].latexParens === false) {","            lhsParens = false;","          }","        }","","        if (rhsPrecedence !== null) {","          if (operators.properties[precedence][rootIdentifier].latexRightParens === false) {","            rhsParens = false;","          }","","          if (operators.properties[rhsPrecedence][rhsIdentifier].latexParens === false) {","            rhsParens = false;","          }","        }","      }","","      return [lhsParens, rhsParens];","    } else if ((args.length > 2) && ((root.getIdentifier() === 'OperatorNode:add') || (root.getIdentifier() === 'OperatorNode:multiply'))) {","      var parensArray = args.map(function (arg) {","        var argPrecedence = operators.getPrecedence(arg, parenthesis);","        var assocWithArg = operators.isAssociativeWith(root, arg, parenthesis);","        var argAssociativity = operators.getAssociativity(arg, parenthesis);","        if (argPrecedence === null) {","          //if the argument has no defined precedence, no parens are needed","          return false;","        } else if ((precedence === argPrecedence) && (associativity === argAssociativity) && !assocWithArg) {","          return true;","        } else if (argPrecedence < precedence) {","          return true;","        }","","        return false;","      });","      return parensArray;","    }","  }","","  /**","   * Get string representation.","   * @param {Object} options","   * @return {string} str","   */","  OperatorNode.prototype._toString = function (options) {","    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';","    var implicit = (options && options.implicit) ? options.implicit : 'hide';","    var args = this.args;","    var parens = calculateNecessaryParentheses(this, parenthesis, args, false);","","    if (args.length === 1) { //unary operators","      var assoc = operators.getAssociativity(this, parenthesis);","","      var operand = args[0].toString(options);","      if (parens[0]) {","        operand = '(' + operand + ')';","      }","","      if (assoc === 'right') { //prefix operator","        return this.op + operand;","      }","      else if (assoc === 'left') { //postfix","        return operand + this.op;","      }","","      //fall back to postfix","      return operand + this.op;","    } else if (args.length == 2) {","      var lhs = args[0].toString(options); //left hand side","      var rhs = args[1].toString(options); //right hand side","      if (parens[0]) { //left hand side in parenthesis?","        lhs = '(' + lhs + ')';","      }","      if (parens[1]) { //right hand side in parenthesis?","        rhs = '(' + rhs + ')';","      }","","      if (this.implicit && (this.getIdentifier() === 'OperatorNode:multiply') && (implicit == 'hide')) {","        return lhs + ' ' + rhs;","      }","","      return lhs + ' ' + this.op + ' ' + rhs;","    } else if ((args.length > 2) && ((this.getIdentifier() === 'OperatorNode:add') || (this.getIdentifier() === 'OperatorNode:multiply'))) {","      var stringifiedArgs = args.map(function (arg, index) {","        arg = arg.toString(options);","        if (parens[index]) { //put in parenthesis?","          arg = '(' + arg + ')';","        }","","        return arg;","      });","","      if (this.implicit && (this.getIdentifier() === 'OperatorNode:multiply') && (implicit === 'hide')) {","        return stringifiedArgs.join(' ');","      }","","      return stringifiedArgs.join(' ' + this.op + ' ');","    } else {","      //fallback to formatting as a function call","      return this.fn + '(' + this.args.join(', ') + ')';","    }","  };","","  /**","   * Get LaTeX representation","   * @param {Object} options","   * @return {string} str","   */","  OperatorNode.prototype._toTex = function (options) {","    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';","    var implicit = (options && options.implicit) ? options.implicit : 'hide';","    var args = this.args;","    var parens = calculateNecessaryParentheses(this, parenthesis, args, true);","    var op = latex.operators[this.fn];","    op = typeof op === 'undefined' ? this.op : op; //fall back to using this.op","","    if (args.length === 1) { //unary operators","      var assoc = operators.getAssociativity(this, parenthesis);","","      var operand = args[0].toTex(options);","      if (parens[0]) {","        operand = '\\\\left(' + operand + '\\\\right)';","      }","","      if (assoc === 'right') { //prefix operator","        return op + operand;","      }","      else if (assoc === 'left') { //postfix operator","        return operand + op;","      }","","      //fall back to postfix","      return operand + op;","    } else if (args.length === 2) { //binary operators","      var lhs = args[0]; //left hand side","      var lhsTex = lhs.toTex(options);","      if (parens[0]) {","        lhsTex = '\\\\left(' + lhsTex + '\\\\right)';","      }","","      var rhs = args[1]; //right hand side","      var rhsTex = rhs.toTex(options);","      if (parens[1]) {","        rhsTex = '\\\\left(' + rhsTex + '\\\\right)';","      }","","      //handle some exceptions (due to the way LaTeX works)","      var lhsIdentifier;","      if (parenthesis === 'keep') {","        lhsIdentifier = lhs.getIdentifier();","      }","      else {","        //Ignore ParenthesisNodes if in 'keep' mode","        lhsIdentifier = lhs.getContent().getIdentifier();","      }","      switch (this.getIdentifier()) {","        case 'OperatorNode:divide':","          //op contains '\\\\frac' at this point","          return op + '{' + lhsTex + '}' + '{' + rhsTex + '}';","        case 'OperatorNode:pow':","          lhsTex = '{' + lhsTex + '}';","          rhsTex = '{' + rhsTex + '}';","          switch (lhsIdentifier) {","            case 'ConditionalNode': //","            case 'OperatorNode:divide':","              lhsTex = '\\\\left(' + lhsTex + '\\\\right)';","          }","        case 'OperatorNode:multiply':","          if (this.implicit && (implicit === 'hide')) {","            return lhsTex + '~' + rhsTex;","          }","      }","      return lhsTex + op + rhsTex;","    } else if ((args.length > 2) && ((this.getIdentifier() === 'OperatorNode:add') || (this.getIdentifier() === 'OperatorNode:multiply'))) {","      var texifiedArgs = args.map(function (arg, index) {","        arg = arg.toTex(options);","        if (parens[index]) {","          arg = '\\\\left(' + arg + '\\\\right)';","        }","        return arg;","      });","","      if ((this.getIdentifier() === 'OperatorNode:multiply') && this.implicit) {","        return texifiedArgs.join('~');","      }","","      return texifiedArgs.join(op)","    } else {","      //fall back to formatting as a function call","      //as this is a fallback, it doesn't use","      //fancy function names","      return '\\\\mathrm{' + this.fn + '}\\\\left('","          + args.map(function (arg) {","            return arg.toTex(options);","          }).join(',') + '\\\\right)';","    }","  };","","  /**","   * Get identifier.","   * @return {string}","   */","  OperatorNode.prototype.getIdentifier = function () {","    return this.type + ':' + this.fn;","  };","","  return OperatorNode;","}","","exports.name = 'OperatorNode';","exports.path = 'expression.node';","exports.math = true; // request access to the math namespace as 5th argument of the factory function","exports.factory = factory;",""],"l":{"3":1,"4":1,"6":1,"7":0,"8":0,"9":0,"10":0,"22":1,"23":0,"24":0,"28":0,"29":0,"31":0,"32":0,"34":0,"35":0,"36":0,"39":0,"40":0,"41":0,"42":0,"45":0,"47":0,"49":0,"63":0,"64":0,"65":0,"68":0,"69":0,"72":0,"79":0,"80":0,"81":0,"91":0,"92":0,"93":0,"94":0,"96":0,"103":0,"104":0,"120":1,"122":0,"123":0,"125":0,"126":0,"127":0,"132":0,"133":0,"135":0,"138":0,"141":0,"142":0,"143":0,"145":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"157":0,"158":0,"160":0,"161":0,"164":0,"165":0,"169":0,"171":0,"174":0,"176":0,"180":0,"181":0,"182":0,"184":0,"186":0,"188":0,"191":0,"193":0,"198":0,"200":0,"201":0,"204":0,"207":0,"209":0,"211":0,"213":0,"216":0,"218":0,"223":0,"225":0,"226":0,"229":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"244":0,"245":0,"246":0,"249":0,"250":0,"251":0,"254":0,"255":0,"259":0,"260":0,"261":0,"264":0,"265":0,"270":0,"271":0,"272":0,"273":0,"274":0,"275":0,"276":0,"278":0,"279":0,"280":0,"281":0,"282":0,"285":0,"287":0,"296":0,"297":0,"298":0,"299":0,"300":0,"302":0,"303":0,"305":0,"306":0,"307":0,"310":0,"311":0,"313":0,"314":0,"318":0,"319":0,"320":0,"321":0,"322":0,"323":0,"325":0,"326":0,"329":0,"330":0,"333":0,"334":0,"335":0,"336":0,"337":0,"338":0,"341":0,"344":0,"345":0,"348":0,"351":0,"360":0,"361":0,"362":0,"363":0,"364":0,"365":0,"366":0,"368":0,"369":0,"371":0,"372":0,"373":0,"376":0,"377":0,"379":0,"380":0,"384":0,"385":0,"386":0,"387":0,"388":0,"389":0,"392":0,"393":0,"394":0,"395":0,"399":0,"400":0,"401":0,"405":0,"407":0,"410":0,"412":0,"413":0,"414":0,"417":0,"420":0,"421":0,"424":0,"425":0,"426":0,"427":0,"428":0,"429":0,"431":0,"434":0,"435":0,"438":0,"443":0,"445":0,"454":0,"455":0,"458":0,"461":1,"462":1,"463":1,"464":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/node/ParenthesisNode.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/node/ParenthesisNode.js","s":{"1":1,"2":0,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":1,"33":1,"34":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0,0,0,0],"6":[0,0],"7":[0,0,0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"fnMap":{"1":{"name":"factory","line":3,"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}}},"2":{"name":"ParenthesisNode","line":13,"loc":{"start":{"line":13,"column":2},"end":{"line":13,"column":36}}},"3":{"name":"(anonymous_3)","line":44,"loc":{"start":{"line":44,"column":39},"end":{"line":44,"column":61}}},"4":{"name":"(anonymous_4)","line":53,"loc":{"start":{"line":53,"column":41},"end":{"line":53,"column":53}}},"5":{"name":"(anonymous_5)","line":61,"loc":{"start":{"line":61,"column":38},"end":{"line":61,"column":58}}},"6":{"name":"(anonymous_6)","line":71,"loc":{"start":{"line":71,"column":34},"end":{"line":71,"column":54}}},"7":{"name":"(anonymous_7)","line":80,"loc":{"start":{"line":80,"column":36},"end":{"line":80,"column":47}}},"8":{"name":"(anonymous_8)","line":90,"loc":{"start":{"line":90,"column":40},"end":{"line":90,"column":58}}},"9":{"name":"(anonymous_9)","line":103,"loc":{"start":{"line":103,"column":37},"end":{"line":103,"column":55}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":111,"column":1}},"2":{"start":{"line":4,"column":2},"end":{"line":4,"column":37}},"3":{"start":{"line":13,"column":2},"end":{"line":24,"column":3}},"4":{"start":{"line":14,"column":4},"end":{"line":16,"column":5}},"5":{"start":{"line":15,"column":6},"end":{"line":15,"column":80}},"6":{"start":{"line":19,"column":4},"end":{"line":21,"column":5}},"7":{"start":{"line":20,"column":6},"end":{"line":20,"column":67}},"8":{"start":{"line":23,"column":4},"end":{"line":23,"column":27}},"9":{"start":{"line":26,"column":2},"end":{"line":26,"column":41}},"10":{"start":{"line":28,"column":2},"end":{"line":28,"column":53}},"11":{"start":{"line":30,"column":2},"end":{"line":30,"column":53}},"12":{"start":{"line":44,"column":2},"end":{"line":46,"column":4}},"13":{"start":{"line":45,"column":4},"end":{"line":45,"column":45}},"14":{"start":{"line":53,"column":2},"end":{"line":55,"column":4}},"15":{"start":{"line":54,"column":4},"end":{"line":54,"column":37}},"16":{"start":{"line":61,"column":2},"end":{"line":63,"column":4}},"17":{"start":{"line":62,"column":4},"end":{"line":62,"column":44}},"18":{"start":{"line":71,"column":2},"end":{"line":74,"column":4}},"19":{"start":{"line":72,"column":4},"end":{"line":72,"column":58}},"20":{"start":{"line":73,"column":4},"end":{"line":73,"column":40}},"21":{"start":{"line":80,"column":2},"end":{"line":82,"column":4}},"22":{"start":{"line":81,"column":4},"end":{"line":81,"column":45}},"23":{"start":{"line":90,"column":2},"end":{"line":95,"column":4}},"24":{"start":{"line":91,"column":4},"end":{"line":93,"column":5}},"25":{"start":{"line":92,"column":6},"end":{"line":92,"column":56}},"26":{"start":{"line":94,"column":4},"end":{"line":94,"column":42}},"27":{"start":{"line":103,"column":2},"end":{"line":108,"column":4}},"28":{"start":{"line":104,"column":4},"end":{"line":106,"column":5}},"29":{"start":{"line":105,"column":6},"end":{"line":105,"column":66}},"30":{"start":{"line":107,"column":4},"end":{"line":107,"column":39}},"31":{"start":{"line":110,"column":2},"end":{"line":110,"column":25}},"32":{"start":{"line":113,"column":0},"end":{"line":113,"column":33}},"33":{"start":{"line":114,"column":0},"end":{"line":114,"column":33}},"34":{"start":{"line":115,"column":0},"end":{"line":115,"column":26}}},"branchMap":{"1":{"line":14,"type":"if","locations":[{"start":{"line":14,"column":4},"end":{"line":14,"column":4}},{"start":{"line":14,"column":4},"end":{"line":14,"column":4}}]},"2":{"line":19,"type":"if","locations":[{"start":{"line":19,"column":4},"end":{"line":19,"column":4}},{"start":{"line":19,"column":4},"end":{"line":19,"column":4}}]},"3":{"line":19,"type":"binary-expr","locations":[{"start":{"line":19,"column":10},"end":{"line":19,"column":17}},{"start":{"line":19,"column":21},"end":{"line":19,"column":35}}]},"4":{"line":91,"type":"if","locations":[{"start":{"line":91,"column":4},"end":{"line":91,"column":4}},{"start":{"line":91,"column":4},"end":{"line":91,"column":4}}]},"5":{"line":91,"type":"binary-expr","locations":[{"start":{"line":91,"column":9},"end":{"line":91,"column":17}},{"start":{"line":91,"column":23},"end":{"line":91,"column":30}},{"start":{"line":91,"column":34},"end":{"line":91,"column":54}},{"start":{"line":91,"column":60},"end":{"line":91,"column":67}},{"start":{"line":91,"column":71},"end":{"line":91,"column":101}}]},"6":{"line":104,"type":"if","locations":[{"start":{"line":104,"column":4},"end":{"line":104,"column":4}},{"start":{"line":104,"column":4},"end":{"line":104,"column":4}}]},"7":{"line":104,"type":"binary-expr","locations":[{"start":{"line":104,"column":9},"end":{"line":104,"column":17}},{"start":{"line":104,"column":23},"end":{"line":104,"column":30}},{"start":{"line":104,"column":34},"end":{"line":104,"column":54}},{"start":{"line":104,"column":60},"end":{"line":104,"column":67}},{"start":{"line":104,"column":71},"end":{"line":104,"column":101}}]}},"code":["'use strict';","","function factory (type, config, load, typed) {","  var Node = load(require('./Node'));","","  /**","   * @constructor ParenthesisNode","   * @extends {Node}","   * A parenthesis node describes manual parenthesis from the user input","   * @param {Node} content","   * @extends {Node}","   */","  function ParenthesisNode(content) {","    if (!(this instanceof ParenthesisNode)) {","      throw new SyntaxError('Constructor must be called with the new operator');","    }","","    // validate input","    if (!(content && content.isNode)) {","      throw new TypeError('Node expected for parameter \"content\"');","    }","","    this.content = content;","  }","","  ParenthesisNode.prototype = new Node();","","  ParenthesisNode.prototype.type = 'ParenthesisNode';","","  ParenthesisNode.prototype.isParenthesisNode = true;","","  /**","   * Compile the node to javascript code","   * @param {Object} defs     Object which can be used to define functions","   *                          or constants globally available for the compiled","   *                          expression","   * @param {Object} args     Object with local function arguments, the key is","   *                          the name of the argument, and the value is `true`.","   *                          The object may not be mutated, but must be","   *                          extended instead.","   * @return {string} js","   * @private","   */","  ParenthesisNode.prototype._compile = function (defs, args) {","    return this.content._compile(defs, args);","  };","","  /**","   * Get the content of the current Node.","   * @return {Node} content","   * @override","   **/","  ParenthesisNode.prototype.getContent = function () {","    return this.content.getContent();","  };","","  /**","   * Execute a callback for each of the child nodes of this node","   * @param {function(child: Node, path: string, parent: Node)} callback","   */","  ParenthesisNode.prototype.forEach = function (callback) {","    callback(this.content, 'content', this);","  };","","  /**","   * Create a new ParenthesisNode having it's childs be the results of calling","   * the provided callback function for each of the childs of the original node.","   * @param {function(child: Node, path: string, parent: Node) : Node} callback","   * @returns {ParenthesisNode} Returns a clone of the node","   */","  ParenthesisNode.prototype.map = function (callback) {","    var content = callback(this.content, 'content', this);","    return new ParenthesisNode(content);","  };","","  /**","   * Create a clone of this node, a shallow copy","   * @return {ParenthesisNode}","   */","  ParenthesisNode.prototype.clone = function() {","    return new ParenthesisNode(this.content);","  };","","  /**","   * Get string representation","   * @param {Object} options","   * @return {string} str","   * @override","   */","  ParenthesisNode.prototype._toString = function(options) {","    if ((!options) || (options && !options.parenthesis) || (options && options.parenthesis === 'keep')) {","      return '(' + this.content.toString(options) + ')';","    }","    return this.content.toString(options);","  };","","  /**","   * Get LaTeX representation","   * @param {Object} options","   * @return {string} str","   * @override","   */","  ParenthesisNode.prototype._toTex = function(options) {","    if ((!options) || (options && !options.parenthesis) || (options && options.parenthesis === 'keep')) {","      return '\\\\left(' + this.content.toTex(options) + '\\\\right)';","    }","    return this.content.toTex(options);","  };","","  return ParenthesisNode;","}","","exports.name = 'ParenthesisNode';","exports.path = 'expression.node';","exports.factory = factory;",""],"l":{"3":1,"4":0,"13":1,"14":0,"15":0,"19":0,"20":0,"23":0,"26":0,"28":0,"30":0,"44":0,"45":0,"53":0,"54":0,"61":0,"62":0,"71":0,"72":0,"73":0,"80":0,"81":0,"90":0,"91":0,"92":0,"94":0,"103":0,"104":0,"105":0,"107":0,"110":0,"113":1,"114":1,"115":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/node/RangeNode.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/node/RangeNode.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":1,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":1,"83":1,"84":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0,0],"17":[0,0],"18":[0,0,0],"19":[0,0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"RangeNode","line":16,"loc":{"start":{"line":16,"column":2},"end":{"line":16,"column":39}}},"3":{"name":"(anonymous_3)","line":43,"loc":{"start":{"line":43,"column":33},"end":{"line":43,"column":45}}},"4":{"name":"(anonymous_4)","line":45,"loc":{"start":{"line":45,"column":33},"end":{"line":45,"column":49}}},"5":{"name":"(anonymous_5)","line":71,"loc":{"start":{"line":71,"column":33},"end":{"line":71,"column":55}}},"6":{"name":"(anonymous_6)","line":83,"loc":{"start":{"line":83,"column":32},"end":{"line":83,"column":52}}},"7":{"name":"(anonymous_7)","line":97,"loc":{"start":{"line":97,"column":28},"end":{"line":97,"column":48}}},"8":{"name":"(anonymous_8)","line":109,"loc":{"start":{"line":109,"column":30},"end":{"line":109,"column":42}}},"9":{"name":"calculateNecessaryParentheses","line":120,"loc":{"start":{"line":120,"column":2},"end":{"line":120,"column":60}}},"10":{"name":"(anonymous_10)","line":146,"loc":{"start":{"line":146,"column":34},"end":{"line":146,"column":53}}},"11":{"name":"(anonymous_11)","line":181,"loc":{"start":{"line":181,"column":31},"end":{"line":181,"column":50}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":40}},"2":{"start":{"line":5,"column":0},"end":{"line":208,"column":1}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":37}},"4":{"start":{"line":16,"column":2},"end":{"line":30,"column":3}},"5":{"start":{"line":17,"column":4},"end":{"line":19,"column":5}},"6":{"start":{"line":18,"column":6},"end":{"line":18,"column":80}},"7":{"start":{"line":22,"column":4},"end":{"line":22,"column":71}},"8":{"start":{"line":22,"column":34},"end":{"line":22,"column":71}},"9":{"start":{"line":23,"column":4},"end":{"line":23,"column":67}},"10":{"start":{"line":23,"column":30},"end":{"line":23,"column":67}},"11":{"start":{"line":24,"column":4},"end":{"line":24,"column":77}},"12":{"start":{"line":24,"column":40},"end":{"line":24,"column":77}},"13":{"start":{"line":25,"column":4},"end":{"line":25,"column":68}},"14":{"start":{"line":25,"column":30},"end":{"line":25,"column":68}},"15":{"start":{"line":27,"column":4},"end":{"line":27,"column":23}},"16":{"start":{"line":28,"column":4},"end":{"line":28,"column":19}},"17":{"start":{"line":29,"column":4},"end":{"line":29,"column":29}},"18":{"start":{"line":32,"column":2},"end":{"line":32,"column":35}},"19":{"start":{"line":34,"column":2},"end":{"line":34,"column":41}},"20":{"start":{"line":36,"column":2},"end":{"line":36,"column":41}},"21":{"start":{"line":43,"column":2},"end":{"line":50,"column":4}},"22":{"start":{"line":45,"column":4},"end":{"line":47,"column":7}},"23":{"start":{"line":46,"column":6},"end":{"line":46,"column":65}},"24":{"start":{"line":49,"column":4},"end":{"line":49,"column":33}},"25":{"start":{"line":71,"column":2},"end":{"line":77,"column":4}},"26":{"start":{"line":72,"column":4},"end":{"line":76,"column":12}},"27":{"start":{"line":83,"column":2},"end":{"line":89,"column":4}},"28":{"start":{"line":84,"column":4},"end":{"line":84,"column":40}},"29":{"start":{"line":85,"column":4},"end":{"line":85,"column":36}},"30":{"start":{"line":86,"column":4},"end":{"line":88,"column":5}},"31":{"start":{"line":87,"column":6},"end":{"line":87,"column":40}},"32":{"start":{"line":97,"column":2},"end":{"line":103,"column":4}},"33":{"start":{"line":98,"column":4},"end":{"line":102,"column":6}},"34":{"start":{"line":109,"column":2},"end":{"line":111,"column":4}},"35":{"start":{"line":110,"column":4},"end":{"line":110,"column":71}},"36":{"start":{"line":120,"column":2},"end":{"line":139,"column":3}},"37":{"start":{"line":121,"column":4},"end":{"line":121,"column":64}},"38":{"start":{"line":122,"column":4},"end":{"line":122,"column":20}},"39":{"start":{"line":124,"column":4},"end":{"line":124,"column":75}},"40":{"start":{"line":125,"column":4},"end":{"line":126,"column":33}},"41":{"start":{"line":128,"column":4},"end":{"line":132,"column":5}},"42":{"start":{"line":129,"column":6},"end":{"line":129,"column":75}},"43":{"start":{"line":130,"column":6},"end":{"line":131,"column":35}},"44":{"start":{"line":134,"column":4},"end":{"line":134,"column":71}},"45":{"start":{"line":135,"column":4},"end":{"line":136,"column":33}},"46":{"start":{"line":138,"column":4},"end":{"line":138,"column":18}},"47":{"start":{"line":146,"column":2},"end":{"line":174,"column":4}},"48":{"start":{"line":147,"column":4},"end":{"line":147,"column":86}},"49":{"start":{"line":148,"column":4},"end":{"line":148,"column":66}},"50":{"start":{"line":151,"column":4},"end":{"line":151,"column":12}},"51":{"start":{"line":153,"column":4},"end":{"line":153,"column":45}},"52":{"start":{"line":154,"column":4},"end":{"line":156,"column":5}},"53":{"start":{"line":155,"column":6},"end":{"line":155,"column":32}},"54":{"start":{"line":157,"column":4},"end":{"line":157,"column":16}},"55":{"start":{"line":159,"column":4},"end":{"line":165,"column":5}},"56":{"start":{"line":160,"column":6},"end":{"line":160,"column":45}},"57":{"start":{"line":161,"column":6},"end":{"line":163,"column":7}},"58":{"start":{"line":162,"column":8},"end":{"line":162,"column":32}},"59":{"start":{"line":164,"column":6},"end":{"line":164,"column":24}},"60":{"start":{"line":167,"column":4},"end":{"line":167,"column":41}},"61":{"start":{"line":168,"column":4},"end":{"line":170,"column":5}},"62":{"start":{"line":169,"column":6},"end":{"line":169,"column":28}},"63":{"start":{"line":171,"column":4},"end":{"line":171,"column":21}},"64":{"start":{"line":173,"column":4},"end":{"line":173,"column":15}},"65":{"start":{"line":181,"column":2},"end":{"line":205,"column":4}},"66":{"start":{"line":182,"column":4},"end":{"line":182,"column":86}},"67":{"start":{"line":183,"column":4},"end":{"line":183,"column":66}},"68":{"start":{"line":185,"column":4},"end":{"line":185,"column":40}},"69":{"start":{"line":186,"column":4},"end":{"line":188,"column":5}},"70":{"start":{"line":187,"column":6},"end":{"line":187,"column":41}},"71":{"start":{"line":190,"column":4},"end":{"line":196,"column":5}},"72":{"start":{"line":191,"column":6},"end":{"line":191,"column":42}},"73":{"start":{"line":192,"column":6},"end":{"line":194,"column":7}},"74":{"start":{"line":193,"column":8},"end":{"line":193,"column":45}},"75":{"start":{"line":195,"column":6},"end":{"line":195,"column":24}},"76":{"start":{"line":198,"column":4},"end":{"line":198,"column":38}},"77":{"start":{"line":199,"column":4},"end":{"line":201,"column":5}},"78":{"start":{"line":200,"column":6},"end":{"line":200,"column":41}},"79":{"start":{"line":202,"column":4},"end":{"line":202,"column":21}},"80":{"start":{"line":204,"column":4},"end":{"line":204,"column":15}},"81":{"start":{"line":207,"column":2},"end":{"line":207,"column":19}},"82":{"start":{"line":210,"column":0},"end":{"line":210,"column":27}},"83":{"start":{"line":211,"column":0},"end":{"line":211,"column":33}},"84":{"start":{"line":212,"column":0},"end":{"line":212,"column":26}}},"branchMap":{"1":{"line":17,"type":"if","locations":[{"start":{"line":17,"column":4},"end":{"line":17,"column":4}},{"start":{"line":17,"column":4},"end":{"line":17,"column":4}}]},"2":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":4},"end":{"line":22,"column":4}},{"start":{"line":22,"column":4},"end":{"line":22,"column":4}}]},"3":{"line":22,"type":"binary-expr","locations":[{"start":{"line":22,"column":10},"end":{"line":22,"column":15}},{"start":{"line":22,"column":19},"end":{"line":22,"column":31}}]},"4":{"line":23,"type":"if","locations":[{"start":{"line":23,"column":4},"end":{"line":23,"column":4}},{"start":{"line":23,"column":4},"end":{"line":23,"column":4}}]},"5":{"line":23,"type":"binary-expr","locations":[{"start":{"line":23,"column":10},"end":{"line":23,"column":13}},{"start":{"line":23,"column":17},"end":{"line":23,"column":27}}]},"6":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":4},"end":{"line":24,"column":4}},{"start":{"line":24,"column":4},"end":{"line":24,"column":4}}]},"7":{"line":24,"type":"binary-expr","locations":[{"start":{"line":24,"column":8},"end":{"line":24,"column":12}},{"start":{"line":24,"column":16},"end":{"line":24,"column":38}}]},"8":{"line":24,"type":"binary-expr","locations":[{"start":{"line":24,"column":18},"end":{"line":24,"column":22}},{"start":{"line":24,"column":26},"end":{"line":24,"column":37}}]},"9":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":4},"end":{"line":25,"column":4}},{"start":{"line":25,"column":4},"end":{"line":25,"column":4}}]},"10":{"line":29,"type":"binary-expr","locations":[{"start":{"line":29,"column":16},"end":{"line":29,"column":20}},{"start":{"line":29,"column":24},"end":{"line":29,"column":28}}]},"11":{"line":46,"type":"binary-expr","locations":[{"start":{"line":46,"column":14},"end":{"line":46,"column":18}},{"start":{"line":46,"column":22},"end":{"line":46,"column":39}},{"start":{"line":46,"column":45},"end":{"line":46,"column":63}}]},"12":{"line":75,"type":"cond-expr","locations":[{"start":{"line":75,"column":22},"end":{"line":75,"column":59}},{"start":{"line":75,"column":63},"end":{"line":75,"column":65}}]},"13":{"line":86,"type":"if","locations":[{"start":{"line":86,"column":4},"end":{"line":86,"column":4}},{"start":{"line":86,"column":4},"end":{"line":86,"column":4}}]},"14":{"line":101,"type":"binary-expr","locations":[{"start":{"line":101,"column":8},"end":{"line":101,"column":17}},{"start":{"line":101,"column":21},"end":{"line":101,"column":68}}]},"15":{"line":110,"type":"binary-expr","locations":[{"start":{"line":110,"column":47},"end":{"line":110,"column":56}},{"start":{"line":110,"column":60},"end":{"line":110,"column":69}}]},"16":{"line":125,"type":"binary-expr","locations":[{"start":{"line":125,"column":21},"end":{"line":125,"column":45}},{"start":{"line":125,"column":51},"end":{"line":125,"column":80}},{"start":{"line":126,"column":10},"end":{"line":126,"column":31}}]},"17":{"line":128,"type":"if","locations":[{"start":{"line":128,"column":4},"end":{"line":128,"column":4}},{"start":{"line":128,"column":4},"end":{"line":128,"column":4}}]},"18":{"line":130,"type":"binary-expr","locations":[{"start":{"line":130,"column":22},"end":{"line":130,"column":45}},{"start":{"line":130,"column":51},"end":{"line":130,"column":79}},{"start":{"line":131,"column":12},"end":{"line":131,"column":33}}]},"19":{"line":135,"type":"binary-expr","locations":[{"start":{"line":135,"column":19},"end":{"line":135,"column":41}},{"start":{"line":135,"column":47},"end":{"line":135,"column":74}},{"start":{"line":136,"column":10},"end":{"line":136,"column":31}}]},"20":{"line":147,"type":"cond-expr","locations":[{"start":{"line":147,"column":57},"end":{"line":147,"column":76}},{"start":{"line":147,"column":79},"end":{"line":147,"column":85}}]},"21":{"line":147,"type":"binary-expr","locations":[{"start":{"line":147,"column":23},"end":{"line":147,"column":30}},{"start":{"line":147,"column":34},"end":{"line":147,"column":53}}]},"22":{"line":154,"type":"if","locations":[{"start":{"line":154,"column":4},"end":{"line":154,"column":4}},{"start":{"line":154,"column":4},"end":{"line":154,"column":4}}]},"23":{"line":159,"type":"if","locations":[{"start":{"line":159,"column":4},"end":{"line":159,"column":4}},{"start":{"line":159,"column":4},"end":{"line":159,"column":4}}]},"24":{"line":161,"type":"if","locations":[{"start":{"line":161,"column":6},"end":{"line":161,"column":6}},{"start":{"line":161,"column":6},"end":{"line":161,"column":6}}]},"25":{"line":168,"type":"if","locations":[{"start":{"line":168,"column":4},"end":{"line":168,"column":4}},{"start":{"line":168,"column":4},"end":{"line":168,"column":4}}]},"26":{"line":182,"type":"cond-expr","locations":[{"start":{"line":182,"column":57},"end":{"line":182,"column":76}},{"start":{"line":182,"column":79},"end":{"line":182,"column":85}}]},"27":{"line":182,"type":"binary-expr","locations":[{"start":{"line":182,"column":23},"end":{"line":182,"column":30}},{"start":{"line":182,"column":34},"end":{"line":182,"column":53}}]},"28":{"line":186,"type":"if","locations":[{"start":{"line":186,"column":4},"end":{"line":186,"column":4}},{"start":{"line":186,"column":4},"end":{"line":186,"column":4}}]},"29":{"line":190,"type":"if","locations":[{"start":{"line":190,"column":4},"end":{"line":190,"column":4}},{"start":{"line":190,"column":4},"end":{"line":190,"column":4}}]},"30":{"line":192,"type":"if","locations":[{"start":{"line":192,"column":6},"end":{"line":192,"column":6}},{"start":{"line":192,"column":6},"end":{"line":192,"column":6}}]},"31":{"line":199,"type":"if","locations":[{"start":{"line":199,"column":4},"end":{"line":199,"column":4}},{"start":{"line":199,"column":4},"end":{"line":199,"column":4}}]}},"code":["'use strict';","","var operators = require('../operators');","","function factory (type, config, load, typed) {","  var Node = load(require('./Node'));","","  /**","   * @constructor RangeNode","   * @extends {Node}","   * create a range","   * @param {Node} start  included lower-bound","   * @param {Node} end    included upper-bound","   * @param {Node} [step] optional step","   */","  function RangeNode(start, end, step) {","    if (!(this instanceof RangeNode)) {","      throw new SyntaxError('Constructor must be called with the new operator');","    }","","    // validate inputs","    if (!(start && start.isNode)) throw new TypeError('Node expected');","    if (!(end && end.isNode)) throw new TypeError('Node expected');","    if (step && !(step && step.isNode)) throw new TypeError('Node expected');","    if (arguments.length > 3) throw new Error('Too many arguments');","","    this.start = start;         // included lower-bound","    this.end = end;           // included upper-bound","    this.step = step || null;  // optional step","  }","","  RangeNode.prototype = new Node();","","  RangeNode.prototype.type = 'RangeNode';","","  RangeNode.prototype.isRangeNode = true;","","  /**","   * Check whether the RangeNode needs the `end` symbol to be defined.","   * This end is the size of the Matrix in current dimension.","   * @return {boolean}","   */","  RangeNode.prototype.needsEnd = function () {","    // find all `end` symbols in this RangeNode","    var endSymbols = this.filter(function (node) {","      return (node && node.isSymbolNode) && (node.name == 'end');","    });","","    return endSymbols.length > 0;","  };","","  /**","   * Compile the node to javascript code","   *","   * When the range has a symbol `end` defined, the RangeNode requires","   * a variable `end` to be defined in the current closure, which must contain","   * the length of the of the matrix that's being handled in the range's","   * dimension. To check whether the `end` variable is needed, call","   * RangeNode.needsEnd().","   *","   * @param {Object} defs     Object which can be used to define functions","   *                          or constants globally available for the compiled","   *                          expression","   * @param {Object} args     Object with local function arguments, the key is","   *                          the name of the argument, and the value is `true`.","   *                          The object may not be mutated, but must be","   *                          extended instead.","   * @return {string} js","   * @private","   */","  RangeNode.prototype._compile = function (defs, args) {","    return 'math.range(' +","        this.start._compile(defs, args) + ', ' +","        this.end._compile(defs, args) +","        (this.step ? (', ' + this.step._compile(defs, args)) : '') +","        ')';","  };","","  /**","   * Execute a callback for each of the child nodes of this node","   * @param {function(child: Node, path: string, parent: Node)} callback","   */","  RangeNode.prototype.forEach = function (callback) {","    callback(this.start, 'start', this);","    callback(this.end, 'end', this);","    if (this.step) {","      callback(this.step, 'step', this);","    }","  };","","  /**","   * Create a new RangeNode having it's childs be the results of calling","   * the provided callback function for each of the childs of the original node.","   * @param {function(child: Node, path: string, parent: Node): Node} callback","   * @returns {RangeNode} Returns a transformed copy of the node","   */","  RangeNode.prototype.map = function (callback) {","    return new RangeNode(","        this._ifNode(callback(this.start, 'start', this)),","        this._ifNode(callback(this.end, 'end', this)),","        this.step && this._ifNode(callback(this.step, 'step', this))","    );","  };","","  /**","   * Create a clone of this node, a shallow copy","   * @return {RangeNode}","   */","  RangeNode.prototype.clone = function () {","    return new RangeNode(this.start, this.end, this.step && this.step);","  };","","  /**","   * Calculate the necessary parentheses","   * @param {Node} node","   * @param {string} parenthesis","   * @return {Object} parentheses","   * @private","   */","  function calculateNecessaryParentheses(node, parenthesis) {","    var precedence = operators.getPrecedence(node, parenthesis);","    var parens = {};","","    var startPrecedence = operators.getPrecedence(node.start, parenthesis);","    parens.start = ((startPrecedence !== null) && (startPrecedence <= precedence))","      || (parenthesis === 'all');","","    if (node.step) {","      var stepPrecedence = operators.getPrecedence(node.step, parenthesis);","      parens.step = ((stepPrecedence !== null) && (stepPrecedence <= precedence))","        || (parenthesis === 'all');","    }","","    var endPrecedence = operators.getPrecedence(node.end, parenthesis);","    parens.end = ((endPrecedence !== null) && (endPrecedence <= precedence))","      || (parenthesis === 'all');","","    return parens;","  }","","  /**","   * Get string representation","   * @param {Object} options","   * @return {string} str","   */","  RangeNode.prototype._toString = function (options) {","    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';","    var parens = calculateNecessaryParentheses(this, parenthesis);","","    //format string as start:step:stop","    var str;","","    var start = this.start.toString(options);","    if (parens.start) {","      start = '(' + start + ')';","    }","    str = start;","","    if (this.step) {","      var step = this.step.toString(options);","      if (parens.step) {","        step = '(' + step + ')';","      }","      str += ':' + step;","    }","","    var end = this.end.toString(options);","    if (parens.end) {","      end = '(' + end + ')';","    }","    str += ':' + end;","","    return str;","  };","","  /**","   * Get LaTeX representation","   * @params {Object} options","   * @return {string} str","   */","  RangeNode.prototype._toTex = function (options) {","    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';","    var parens = calculateNecessaryParentheses(this, parenthesis);","","    var str = this.start.toTex(options);","    if (parens.start) {","      str = '\\\\left(' + str + '\\\\right)';","    }","","    if (this.step) {","      var step = this.step.toTex(options);","      if (parens.step) {","        step = '\\\\left(' + step + '\\\\right)';","      }","      str += ':' + step;","    }","","    var end = this.end.toTex(options);","    if (parens.end) {","      end = '\\\\left(' + end + '\\\\right)';","    }","    str += ':' + end;","","    return str;","  };","","  return RangeNode;","}","","exports.name = 'RangeNode';","exports.path = 'expression.node';","exports.factory = factory;",""],"l":{"3":1,"5":1,"6":0,"16":1,"17":0,"18":0,"22":0,"23":0,"24":0,"25":0,"27":0,"28":0,"29":0,"32":0,"34":0,"36":0,"43":0,"45":0,"46":0,"49":0,"71":0,"72":0,"83":0,"84":0,"85":0,"86":0,"87":0,"97":0,"98":0,"109":0,"110":0,"120":1,"121":0,"122":0,"124":0,"125":0,"128":0,"129":0,"130":0,"134":0,"135":0,"138":0,"146":0,"147":0,"148":0,"151":0,"153":0,"154":0,"155":0,"157":0,"159":0,"160":0,"161":0,"162":0,"164":0,"167":0,"168":0,"169":0,"171":0,"173":0,"181":0,"182":0,"183":0,"185":0,"186":0,"187":0,"190":0,"191":0,"192":0,"193":0,"195":0,"198":0,"199":0,"200":0,"202":0,"204":0,"207":0,"210":1,"211":1,"212":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/node/SymbolNode.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/node/SymbolNode.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":1,"43":1,"44":1,"45":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":51}}},"2":{"name":"SymbolNode","line":17,"loc":{"start":{"line":17,"column":2},"end":{"line":17,"column":28}}},"3":{"name":"(anonymous_3)","line":46,"loc":{"start":{"line":46,"column":34},"end":{"line":46,"column":56}}},"4":{"name":"(anonymous_4)","line":74,"loc":{"start":{"line":74,"column":33},"end":{"line":74,"column":53}}},"5":{"name":"(anonymous_5)","line":84,"loc":{"start":{"line":84,"column":29},"end":{"line":84,"column":49}}},"6":{"name":"undef","line":92,"loc":{"start":{"line":92,"column":2},"end":{"line":92,"column":24}}},"7":{"name":"(anonymous_7)","line":100,"loc":{"start":{"line":100,"column":31},"end":{"line":100,"column":42}}},"8":{"name":"(anonymous_8)","line":110,"loc":{"start":{"line":110,"column":35},"end":{"line":110,"column":53}}},"9":{"name":"(anonymous_9)","line":120,"loc":{"start":{"line":120,"column":32},"end":{"line":120,"column":50}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":41}},"2":{"start":{"line":5,"column":0},"end":{"line":135,"column":1}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":37}},"4":{"start":{"line":7,"column":2},"end":{"line":7,"column":51}},"5":{"start":{"line":8,"column":2},"end":{"line":8,"column":73}},"6":{"start":{"line":17,"column":2},"end":{"line":26,"column":3}},"7":{"start":{"line":18,"column":4},"end":{"line":20,"column":5}},"8":{"start":{"line":19,"column":6},"end":{"line":19,"column":80}},"9":{"start":{"line":23,"column":4},"end":{"line":23,"column":95}},"10":{"start":{"line":23,"column":35},"end":{"line":23,"column":95}},"11":{"start":{"line":25,"column":4},"end":{"line":25,"column":21}},"12":{"start":{"line":28,"column":2},"end":{"line":28,"column":36}},"13":{"start":{"line":30,"column":2},"end":{"line":30,"column":43}},"14":{"start":{"line":32,"column":2},"end":{"line":32,"column":43}},"15":{"start":{"line":46,"column":2},"end":{"line":68,"column":4}},"16":{"start":{"line":48,"column":4},"end":{"line":48,"column":26}},"17":{"start":{"line":49,"column":4},"end":{"line":49,"column":24}},"18":{"start":{"line":50,"column":4},"end":{"line":50,"column":43}},"19":{"start":{"line":52,"column":4},"end":{"line":67,"column":5}},"20":{"start":{"line":55,"column":6},"end":{"line":55,"column":23}},"21":{"start":{"line":57,"column":9},"end":{"line":67,"column":5}},"22":{"start":{"line":58,"column":6},"end":{"line":58,"column":137}},"23":{"start":{"line":61,"column":6},"end":{"line":66,"column":14}},"24":{"start":{"line":74,"column":2},"end":{"line":76,"column":4}},"25":{"start":{"line":84,"column":2},"end":{"line":86,"column":4}},"26":{"start":{"line":85,"column":4},"end":{"line":85,"column":24}},"27":{"start":{"line":92,"column":2},"end":{"line":94,"column":3}},"28":{"start":{"line":93,"column":4},"end":{"line":93,"column":48}},"29":{"start":{"line":100,"column":2},"end":{"line":102,"column":4}},"30":{"start":{"line":101,"column":4},"end":{"line":101,"column":37}},"31":{"start":{"line":110,"column":2},"end":{"line":112,"column":4}},"32":{"start":{"line":111,"column":4},"end":{"line":111,"column":21}},"33":{"start":{"line":120,"column":2},"end":{"line":132,"column":4}},"34":{"start":{"line":121,"column":4},"end":{"line":121,"column":23}},"35":{"start":{"line":122,"column":4},"end":{"line":124,"column":5}},"36":{"start":{"line":123,"column":6},"end":{"line":123,"column":20}},"37":{"start":{"line":125,"column":4},"end":{"line":125,"column":51}},"38":{"start":{"line":126,"column":4},"end":{"line":129,"column":5}},"39":{"start":{"line":128,"column":6},"end":{"line":128,"column":20}},"40":{"start":{"line":131,"column":4},"end":{"line":131,"column":24}},"41":{"start":{"line":134,"column":2},"end":{"line":134,"column":20}},"42":{"start":{"line":137,"column":0},"end":{"line":137,"column":28}},"43":{"start":{"line":138,"column":0},"end":{"line":138,"column":33}},"44":{"start":{"line":139,"column":0},"end":{"line":139,"column":20}},"45":{"start":{"line":140,"column":0},"end":{"line":140,"column":26}}},"branchMap":{"1":{"line":18,"type":"if","locations":[{"start":{"line":18,"column":4},"end":{"line":18,"column":4}},{"start":{"line":18,"column":4},"end":{"line":18,"column":4}}]},"2":{"line":23,"type":"if","locations":[{"start":{"line":23,"column":4},"end":{"line":23,"column":4}},{"start":{"line":23,"column":4},"end":{"line":23,"column":4}}]},"3":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":4},"end":{"line":52,"column":4}},{"start":{"line":52,"column":4},"end":{"line":52,"column":4}}]},"4":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":9},"end":{"line":57,"column":9}},{"start":{"line":57,"column":9},"end":{"line":57,"column":9}}]},"5":{"line":63,"type":"cond-expr","locations":[{"start":{"line":64,"column":10},"end":{"line":64,"column":47}},{"start":{"line":65,"column":10},"end":{"line":65,"column":38}}]},"6":{"line":122,"type":"if","locations":[{"start":{"line":122,"column":4},"end":{"line":122,"column":4}},{"start":{"line":122,"column":4},"end":{"line":122,"column":4}}]},"7":{"line":122,"type":"binary-expr","locations":[{"start":{"line":122,"column":9},"end":{"line":122,"column":47}},{"start":{"line":122,"column":52},"end":{"line":122,"column":83}}]},"8":{"line":126,"type":"if","locations":[{"start":{"line":126,"column":4},"end":{"line":126,"column":4}},{"start":{"line":126,"column":4},"end":{"line":126,"column":4}}]}},"code":["'use strict';","","var latex = require('../../utils/latex');","","function factory (type, config, load, typed, math) {","  var Node = load(require('./Node'));","  var Unit = load(require('../../type/unit/Unit'));","  var getSafeProperty = load(require('./utils/customs')).getSafeProperty;","","  /**","   * @constructor SymbolNode","   * @extends {Node}","   * A symbol node can hold and resolve a symbol","   * @param {string} name","   * @extends {Node}","   */","  function SymbolNode(name) {","    if (!(this instanceof SymbolNode)) {","      throw new SyntaxError('Constructor must be called with the new operator');","    }","","    // validate input","    if (typeof name !== 'string')  throw new TypeError('String expected for parameter \"name\"');","","    this.name = name;","  }","","  SymbolNode.prototype = new Node();","","  SymbolNode.prototype.type = 'SymbolNode';","","  SymbolNode.prototype.isSymbolNode = true;","","  /**","   * Compile the node to javascript code","   * @param {Object} defs     Object which can be used to define functions","   *                          or constants globally available for the compiled","   *                          expression","   * @param {Object} args     Object with local function arguments, the key is","   *                          the name of the argument, and the value is `true`.","   *                          The object may not be mutated, but must be","   *                          extended instead.","   * @return {string} js","   * @private","   */","  SymbolNode.prototype._compile = function (defs, args) {","    // add a function to the definitions","    defs['undef'] = undef;","    defs['Unit'] = Unit;","    defs.getSafeProperty = getSafeProperty;","","    if (args[this.name]) {","      // this is a FunctionAssignment argument","      // (like an x when inside the expression of a function assignment `f(x) = ...`)","      return this.name;","    }","    else if (this.name in defs.math) {","      return '(\"' + this.name + '\" in scope ? getSafeProperty(scope, \"' + this.name + '\") : getSafeProperty(math, \"' + this.name + '\"))';","    }","    else {","      return '(' +","          '\"' + this.name + '\" in scope ? getSafeProperty(scope, \"' + this.name + '\") : ' +","          (Unit.isValuelessUnit(this.name) ?","          'new Unit(null, \"' + this.name + '\")' :","          'undef(\"' + this.name + '\")') +","          ')';","    }","  };","","  /**","   * Execute a callback for each of the child nodes of this node","   * @param {function(child: Node, path: string, parent: Node)} callback","   */","  SymbolNode.prototype.forEach = function (callback) {","    // nothing to do, we don't have childs","  };","","  /**","   * Create a new SymbolNode having it's childs be the results of calling","   * the provided callback function for each of the childs of the original node.","   * @param {function(child: Node, path: string, parent: Node) : Node} callback","   * @returns {SymbolNode} Returns a clone of the node","   */","  SymbolNode.prototype.map = function (callback) {","    return this.clone();","  };","","  /**","   * Throws an error 'Undefined symbol {name}'","   * @param {string} name","   */","  function undef (name) {","    throw new Error('Undefined symbol ' + name);","  }","","  /**","   * Create a clone of this node, a shallow copy","   * @return {SymbolNode}","   */","  SymbolNode.prototype.clone = function() {","    return new SymbolNode(this.name);","  };","","  /**","   * Get string representation","   * @param {Object} options","   * @return {string} str","   * @override","   */","  SymbolNode.prototype._toString = function(options) {","    return this.name;","  };","","  /**","   * Get LaTeX representation","   * @param {Object} options","   * @return {string} str","   * @override","   */","  SymbolNode.prototype._toTex = function(options) {","    var isUnit = false;","    if ((typeof math[this.name] === 'undefined') && Unit.isValuelessUnit(this.name)) {","      isUnit = true;","    }","    var symbol = latex.toSymbol(this.name, isUnit);","    if (symbol[0] === '\\\\') {","      //no space needed if the symbol starts with '\\'","      return symbol;","    }","    //the space prevents symbols from breaking stuff like '\\cdot' if it's written right before the symbol","    return ' ' + symbol;","  };","","  return SymbolNode;","}","","exports.name = 'SymbolNode';","exports.path = 'expression.node';","exports.math = true; // request access to the math namespace as 5th argument of the factory function","exports.factory = factory;",""],"l":{"3":1,"5":1,"6":0,"7":0,"8":0,"17":1,"18":0,"19":0,"23":0,"25":0,"28":0,"30":0,"32":0,"46":0,"48":0,"49":0,"50":0,"52":0,"55":0,"57":0,"58":0,"61":0,"74":0,"84":0,"85":0,"92":1,"93":0,"100":0,"101":0,"110":0,"111":0,"120":0,"121":0,"122":0,"123":0,"125":0,"126":0,"128":0,"131":0,"134":0,"137":1,"138":1,"139":1,"140":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/node/UpdateNode.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/node/UpdateNode.js","s":{"1":1,"2":1,"3":0,"4":0,"5":1,"6":1,"7":1},"b":{},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"factory","line":3,"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}}},"2":{"name":"UpdateNode","line":7,"loc":{"start":{"line":7,"column":2},"end":{"line":7,"column":24}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":13,"column":1}},"2":{"start":{"line":7,"column":2},"end":{"line":10,"column":3}},"3":{"start":{"line":9,"column":4},"end":{"line":9,"column":77}},"4":{"start":{"line":12,"column":2},"end":{"line":12,"column":20}},"5":{"start":{"line":15,"column":0},"end":{"line":15,"column":28}},"6":{"start":{"line":16,"column":0},"end":{"line":16,"column":33}},"7":{"start":{"line":17,"column":0},"end":{"line":17,"column":26}}},"branchMap":{},"code":["'use strict';","","function factory (type, config, load, typed) {","  /**","   * @constructor UpdateNode","   */","  function UpdateNode() {","    // TODO: deprecated since v3. Cleanup some day","    throw new Error('UpdateNode is deprecated. Use AssignmentNode instead.');","  }","","  return UpdateNode;","}","","exports.name = 'UpdateNode';","exports.path = 'expression.node';","exports.factory = factory;",""],"l":{"3":1,"7":1,"9":0,"12":0,"15":1,"16":1,"17":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/transform/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/transform/index.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":12,"column":2}}},"branchMap":{},"code":["module.exports = [","  require('./concat.transform'),","  require('./filter.transform'),","  require('./forEach.transform'),","  require('./index.transform'),","  require('./map.transform'),","  require('./max.transform'),","  require('./mean.transform'),","  require('./min.transform'),","  require('./range.transform'),","  require('./subset.transform')","];",""],"l":{"1":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/transform/concat.transform.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/transform/concat.transform.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":1,"15":1,"16":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"factory","line":12,"loc":{"start":{"line":12,"column":0},"end":{"line":12,"column":45}}},"2":{"name":"(anonymous_2)","line":17,"loc":{"start":{"line":17,"column":14},"end":{"line":17,"column":30}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":60}},"2":{"start":{"line":12,"column":0},"end":{"line":36,"column":1}},"3":{"start":{"line":13,"column":2},"end":{"line":13,"column":61}},"4":{"start":{"line":16,"column":1},"end":{"line":35,"column":5}},"5":{"start":{"line":19,"column":6},"end":{"line":19,"column":38}},"6":{"start":{"line":20,"column":6},"end":{"line":20,"column":33}},"7":{"start":{"line":21,"column":6},"end":{"line":26,"column":7}},"8":{"start":{"line":22,"column":8},"end":{"line":22,"column":35}},"9":{"start":{"line":24,"column":11},"end":{"line":26,"column":7}},"10":{"start":{"line":25,"column":8},"end":{"line":25,"column":40}},"11":{"start":{"line":28,"column":6},"end":{"line":33,"column":7}},"12":{"start":{"line":29,"column":8},"end":{"line":29,"column":40}},"13":{"start":{"line":32,"column":8},"end":{"line":32,"column":34}},"14":{"start":{"line":38,"column":0},"end":{"line":38,"column":24}},"15":{"start":{"line":39,"column":0},"end":{"line":39,"column":38}},"16":{"start":{"line":40,"column":0},"end":{"line":40,"column":26}}},"branchMap":{"1":{"line":21,"type":"if","locations":[{"start":{"line":21,"column":6},"end":{"line":21,"column":6}},{"start":{"line":21,"column":6},"end":{"line":21,"column":6}}]},"2":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":11},"end":{"line":24,"column":11}},{"start":{"line":24,"column":11},"end":{"line":24,"column":11}}]},"3":{"line":24,"type":"binary-expr","locations":[{"start":{"line":24,"column":15},"end":{"line":24,"column":19}},{"start":{"line":24,"column":23},"end":{"line":24,"column":48}}]}},"code":["'use strict';","","var errorTransform = require('./error.transform').transform;","","/**"," * Attach a transform function to math.range"," * Adds a property transform containing the transform function."," *"," * This transform changed the last `dim` parameter of function concat"," * from one-based to zero based"," */","function factory (type, config, load, typed) {","  var concat = load(require('../../function/matrix/concat'));","","  // @see: comment of concat itself"," return typed('concat', {","    '...any': function (args) {","      // change last argument from one-based to zero-based","      var lastIndex = args.length - 1;","      var last = args[lastIndex];","      if (typeof last === 'number') {","        args[lastIndex] = last - 1;","      }","      else if (last && last.isBigNumber === true) {","        args[lastIndex] = last.minus(1);","      }","","      try {","        return concat.apply(null, args);","      }","      catch (err) {","        throw errorTransform(err);","      }","    }","  });","}","","exports.name = 'concat';","exports.path = 'expression.transform';","exports.factory = factory;",""],"l":{"3":1,"12":1,"13":0,"16":0,"19":0,"20":0,"21":0,"22":0,"24":0,"25":0,"28":0,"29":0,"32":0,"38":1,"39":1,"40":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/transform/error.transform.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/transform/error.transform.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"(anonymous_1)","line":8,"loc":{"start":{"line":8,"column":20},"end":{"line":8,"column":35}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":51}},"2":{"start":{"line":8,"column":0},"end":{"line":17,"column":2}},"3":{"start":{"line":9,"column":2},"end":{"line":14,"column":3}},"4":{"start":{"line":10,"column":4},"end":{"line":13,"column":57}},"5":{"start":{"line":16,"column":2},"end":{"line":16,"column":13}}},"branchMap":{"1":{"line":9,"type":"if","locations":[{"start":{"line":9,"column":2},"end":{"line":9,"column":2}},{"start":{"line":9,"column":2},"end":{"line":9,"column":2}}]},"2":{"line":9,"type":"binary-expr","locations":[{"start":{"line":9,"column":6},"end":{"line":9,"column":9}},{"start":{"line":9,"column":13},"end":{"line":9,"column":29}}]},"3":{"line":13,"type":"cond-expr","locations":[{"start":{"line":13,"column":32},"end":{"line":13,"column":43}},{"start":{"line":13,"column":46},"end":{"line":13,"column":55}}]}},"code":["var IndexError = require('../../error/IndexError');","","/**"," * Transform zero-based indices to one-based indices in errors"," * @param {Error} err"," * @returns {Error} Returns the transformed error"," */","exports.transform = function (err) {","  if (err && err.isIndexError) {","    return new IndexError(","        err.index + 1,","        err.min + 1,","        err.max !== undefined ? err.max + 1 : undefined);","  }","","  return err;","};",""],"l":{"1":1,"8":1,"9":0,"10":0,"16":0}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/transform/filter.transform.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/transform/filter.transform.js","s":{"1":1,"2":0,"3":0,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":1,"26":1,"27":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0,0,0],"7":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"factory","line":10,"loc":{"start":{"line":10,"column":0},"end":{"line":10,"column":45}}},"2":{"name":"filterTransform","line":14,"loc":{"start":{"line":14,"column":2},"end":{"line":14,"column":46}}},"3":{"name":"(anonymous_3)","line":32,"loc":{"start":{"line":32,"column":20},"end":{"line":32,"column":36}}},"4":{"name":"(anonymous_4)","line":43,"loc":{"start":{"line":43,"column":17},"end":{"line":43,"column":30}}}},"statementMap":{"1":{"start":{"line":10,"column":0},"end":{"line":60,"column":1}},"2":{"start":{"line":11,"column":2},"end":{"line":11,"column":61}},"3":{"start":{"line":12,"column":2},"end":{"line":12,"column":55}},"4":{"start":{"line":14,"column":2},"end":{"line":55,"column":3}},"5":{"start":{"line":15,"column":4},"end":{"line":15,"column":16}},"6":{"start":{"line":17,"column":4},"end":{"line":19,"column":5}},"7":{"start":{"line":18,"column":6},"end":{"line":18,"column":40}},"8":{"start":{"line":21,"column":4},"end":{"line":52,"column":5}},"9":{"start":{"line":22,"column":6},"end":{"line":51,"column":7}},"10":{"start":{"line":24,"column":8},"end":{"line":24,"column":45}},"11":{"start":{"line":30,"column":8},"end":{"line":30,"column":33}},"12":{"start":{"line":31,"column":8},"end":{"line":36,"column":18}},"13":{"start":{"line":33,"column":14},"end":{"line":35,"column":41}},"14":{"start":{"line":39,"column":8},"end":{"line":39,"column":40}},"15":{"start":{"line":40,"column":8},"end":{"line":40,"column":35}},"16":{"start":{"line":41,"column":8},"end":{"line":50,"column":9}},"17":{"start":{"line":42,"column":10},"end":{"line":42,"column":33}},"18":{"start":{"line":43,"column":10},"end":{"line":46,"column":11}},"19":{"start":{"line":44,"column":12},"end":{"line":44,"column":26}},"20":{"start":{"line":45,"column":12},"end":{"line":45,"column":32}},"21":{"start":{"line":49,"column":10},"end":{"line":49,"column":76}},"22":{"start":{"line":54,"column":4},"end":{"line":54,"column":27}},"23":{"start":{"line":57,"column":2},"end":{"line":57,"column":33}},"24":{"start":{"line":59,"column":2},"end":{"line":59,"column":25}},"25":{"start":{"line":62,"column":0},"end":{"line":62,"column":24}},"26":{"start":{"line":63,"column":0},"end":{"line":63,"column":38}},"27":{"start":{"line":64,"column":0},"end":{"line":64,"column":26}}},"branchMap":{"1":{"line":17,"type":"if","locations":[{"start":{"line":17,"column":4},"end":{"line":17,"column":4}},{"start":{"line":17,"column":4},"end":{"line":17,"column":4}}]},"2":{"line":21,"type":"if","locations":[{"start":{"line":21,"column":4},"end":{"line":21,"column":4}},{"start":{"line":21,"column":4},"end":{"line":21,"column":4}}]},"3":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":6},"end":{"line":22,"column":6}},{"start":{"line":22,"column":6},"end":{"line":22,"column":6}}]},"4":{"line":22,"type":"binary-expr","locations":[{"start":{"line":22,"column":10},"end":{"line":22,"column":17}},{"start":{"line":22,"column":21},"end":{"line":22,"column":41}}]},"5":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":21},"end":{"line":30,"column":26}},{"start":{"line":30,"column":30},"end":{"line":30,"column":32}}]},"6":{"line":33,"type":"binary-expr","locations":[{"start":{"line":33,"column":22},"end":{"line":33,"column":26}},{"start":{"line":33,"column":30},"end":{"line":33,"column":47}},{"start":{"line":34,"column":18},"end":{"line":34,"column":38}},{"start":{"line":35,"column":18},"end":{"line":35,"column":40}}]},"7":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":8},"end":{"line":41,"column":8}},{"start":{"line":41,"column":8},"end":{"line":41,"column":8}}]}},"code":["'use strict';","","/**"," * Attach a transform function to math.filter"," * Adds a property transform containing the transform function."," *"," * This transform adds support for equations as test function for math.filter,"," * so you can do something like 'filter([3, -2, 5], x > 0)'."," */","function factory (type, config, load, typed) {","  var filter = load(require('../../function/matrix/filter'));","  var SymbolNode = load(require('../node/SymbolNode'));","","  function filterTransform(args, math, scope) {","    var x, test;","","    if (args[0]) {","      x = args[0].compile().eval(scope);","    }","","    if (args[1]) {","      if (args[1] && args[1].isSymbolNode) {","        // a function pointer, like filter([3, -2, 5], myTestFunction);","        test = args[1].compile().eval(scope);","      }","      else {","        // an equation like filter([3, -2, 5], x > 0)","","        // find an undefined symbol","        var _scope = scope || {};","        var symbol = args[1]","            .filter(function (node) {","              return (node && node.isSymbolNode) &&","                  !(node.name in math) &&","                  !(node.name in _scope);","            })[0];","","        // create a test function for this equation","        var sub = Object.create(_scope);","        var eq = args[1].compile();","        if (symbol) {","          var name = symbol.name;","          test = function (x) {","            sub[name] = x;","            return eq.eval(sub);","          }","        }","        else {","          throw new Error('No undefined variable found in filter equation');","        }","      }","    }","","    return filter(x, test);","  }","","  filterTransform.rawArgs = true;","","  return filterTransform;","}","","exports.name = 'filter';","exports.path = 'expression.transform';","exports.factory = factory;",""],"l":{"10":1,"11":0,"12":0,"14":1,"15":0,"17":0,"18":0,"21":0,"22":0,"24":0,"30":0,"31":0,"33":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"49":0,"54":0,"57":0,"59":0,"62":1,"63":1,"64":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/transform/forEach.transform.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/transform/forEach.transform.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1,"17":1,"18":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"factory","line":11,"loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":45}}},"2":{"name":"(anonymous_2)","line":15,"loc":{"start":{"line":15,"column":32},"end":{"line":15,"column":59}}},"3":{"name":"(anonymous_3)","line":19,"loc":{"start":{"line":19,"column":20},"end":{"line":19,"column":44}}},"4":{"name":"(anonymous_4)","line":21,"loc":{"start":{"line":21,"column":24},"end":{"line":21,"column":44}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":72}},"2":{"start":{"line":11,"column":0},"end":{"line":42,"column":1}},"3":{"start":{"line":12,"column":2},"end":{"line":12,"column":63}},"4":{"start":{"line":14,"column":2},"end":{"line":41,"column":5}},"5":{"start":{"line":17,"column":6},"end":{"line":17,"column":44}},"6":{"start":{"line":19,"column":6},"end":{"line":38,"column":8}},"7":{"start":{"line":20,"column":8},"end":{"line":37,"column":9}},"8":{"start":{"line":21,"column":10},"end":{"line":24,"column":13}},"9":{"start":{"line":23,"column":12},"end":{"line":23,"column":48}},"10":{"start":{"line":28,"column":10},"end":{"line":36,"column":11}},"11":{"start":{"line":29,"column":12},"end":{"line":29,"column":28}},"12":{"start":{"line":31,"column":15},"end":{"line":36,"column":11}},"13":{"start":{"line":32,"column":12},"end":{"line":32,"column":35}},"14":{"start":{"line":35,"column":12},"end":{"line":35,"column":42}},"15":{"start":{"line":39,"column":6},"end":{"line":39,"column":35}},"16":{"start":{"line":44,"column":0},"end":{"line":44,"column":25}},"17":{"start":{"line":45,"column":0},"end":{"line":45,"column":38}},"18":{"start":{"line":46,"column":0},"end":{"line":46,"column":26}}},"branchMap":{"1":{"line":20,"type":"if","locations":[{"start":{"line":20,"column":8},"end":{"line":20,"column":8}},{"start":{"line":20,"column":8},"end":{"line":20,"column":8}}]},"2":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":10},"end":{"line":28,"column":10}},{"start":{"line":28,"column":10},"end":{"line":28,"column":10}}]},"3":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":15},"end":{"line":31,"column":15}},{"start":{"line":31,"column":15},"end":{"line":31,"column":15}}]}},"code":["'use strict';","","var maxArgumentCount = require('../../utils/function').maxArgumentCount;","","/**"," * Attach a transform function to math.forEach"," * Adds a property transform containing the transform function."," *"," * This transform creates a one-based index instead of a zero-based index"," */","function factory (type, config, load, typed) {","  var forEach = load(require('../../function/matrix/forEach'));","","  return typed('forEach', {","    'Array | Matrix, function': function (array, callback) {","      // figure out what number of arguments the callback function expects","      var args = maxArgumentCount(callback);","","      var recurse = function (value, index) {","        if (Array.isArray(value)) {","          value.forEach(function (child, i) {","            // we create a copy of the index array and append the new index value","            recurse(child, index.concat(i + 1)); // one based index, hence i+1","          });","        }","        else {","          // invoke the callback function with the right number of arguments","          if (args === 1) {","            callback(value);","          }","          else if (args === 2) {","            callback(value, index);","          }","          else { // 3 or -1","            callback(value, index, array);","          }","        }","      };","      recurse(array.valueOf(), []); // pass Array","    }","  });","}","","exports.name = 'forEach';","exports.path = 'expression.transform';","exports.factory = factory;",""],"l":{"3":1,"11":1,"12":0,"14":0,"17":0,"19":0,"20":0,"21":0,"23":0,"28":0,"29":0,"31":0,"32":0,"35":0,"39":0,"44":1,"45":1,"46":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/transform/index.transform.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/transform/index.transform.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":1,"26":1,"27":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"factory","line":9,"loc":{"start":{"line":9,"column":0},"end":{"line":9,"column":38}}},"2":{"name":"indexTransform","line":11,"loc":{"start":{"line":11,"column":9},"end":{"line":11,"column":35}}},"3":{"name":"(anonymous_3)","line":22,"loc":{"start":{"line":22,"column":22},"end":{"line":22,"column":35}}},"4":{"name":"(anonymous_4)","line":25,"loc":{"start":{"line":25,"column":22},"end":{"line":25,"column":35}}}},"statementMap":{"1":{"start":{"line":9,"column":0},"end":{"line":47,"column":1}},"2":{"start":{"line":11,"column":2},"end":{"line":46,"column":4}},"3":{"start":{"line":12,"column":4},"end":{"line":12,"column":18}},"4":{"start":{"line":13,"column":4},"end":{"line":41,"column":5}},"5":{"start":{"line":14,"column":6},"end":{"line":14,"column":29}},"6":{"start":{"line":17,"column":6},"end":{"line":38,"column":7}},"7":{"start":{"line":18,"column":8},"end":{"line":18,"column":20}},"8":{"start":{"line":19,"column":8},"end":{"line":19,"column":42}},"9":{"start":{"line":21,"column":11},"end":{"line":38,"column":7}},"10":{"start":{"line":22,"column":8},"end":{"line":22,"column":54}},"11":{"start":{"line":22,"column":37},"end":{"line":22,"column":50}},"12":{"start":{"line":24,"column":11},"end":{"line":38,"column":7}},"13":{"start":{"line":25,"column":8},"end":{"line":25,"column":54}},"14":{"start":{"line":25,"column":37},"end":{"line":25,"column":50}},"15":{"start":{"line":27,"column":11},"end":{"line":38,"column":7}},"16":{"start":{"line":28,"column":8},"end":{"line":28,"column":14}},"17":{"start":{"line":30,"column":11},"end":{"line":38,"column":7}},"18":{"start":{"line":31,"column":8},"end":{"line":31,"column":33}},"19":{"start":{"line":33,"column":11},"end":{"line":38,"column":7}},"20":{"start":{"line":37,"column":8},"end":{"line":37,"column":92}},"21":{"start":{"line":40,"column":6},"end":{"line":40,"column":20}},"22":{"start":{"line":43,"column":4},"end":{"line":43,"column":31}},"23":{"start":{"line":44,"column":4},"end":{"line":44,"column":32}},"24":{"start":{"line":45,"column":4},"end":{"line":45,"column":15}},"25":{"start":{"line":49,"column":0},"end":{"line":49,"column":23}},"26":{"start":{"line":50,"column":0},"end":{"line":50,"column":38}},"27":{"start":{"line":51,"column":0},"end":{"line":51,"column":26}}},"branchMap":{"1":{"line":17,"type":"if","locations":[{"start":{"line":17,"column":6},"end":{"line":17,"column":6}},{"start":{"line":17,"column":6},"end":{"line":17,"column":6}}]},"2":{"line":17,"type":"binary-expr","locations":[{"start":{"line":17,"column":10},"end":{"line":17,"column":13}},{"start":{"line":17,"column":17},"end":{"line":17,"column":37}}]},"3":{"line":19,"type":"cond-expr","locations":[{"start":{"line":19,"column":35},"end":{"line":19,"column":36}},{"start":{"line":19,"column":39},"end":{"line":19,"column":40}}]},"4":{"line":21,"type":"if","locations":[{"start":{"line":21,"column":11},"end":{"line":21,"column":11}},{"start":{"line":21,"column":11},"end":{"line":21,"column":11}}]},"5":{"line":21,"type":"binary-expr","locations":[{"start":{"line":21,"column":15},"end":{"line":21,"column":18}},{"start":{"line":21,"column":22},"end":{"line":21,"column":40}}]},"6":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":11},"end":{"line":24,"column":11}},{"start":{"line":24,"column":11},"end":{"line":24,"column":11}}]},"7":{"line":24,"type":"binary-expr","locations":[{"start":{"line":24,"column":15},"end":{"line":24,"column":18}},{"start":{"line":24,"column":23},"end":{"line":24,"column":43}},{"start":{"line":24,"column":47},"end":{"line":24,"column":59}}]},"8":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":11},"end":{"line":27,"column":11}},{"start":{"line":27,"column":11},"end":{"line":27,"column":11}}]},"9":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":11},"end":{"line":30,"column":11}},{"start":{"line":30,"column":11},"end":{"line":30,"column":11}}]},"10":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":15},"end":{"line":30,"column":18}},{"start":{"line":30,"column":22},"end":{"line":30,"column":46}}]},"11":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":11},"end":{"line":33,"column":11}},{"start":{"line":33,"column":11},"end":{"line":33,"column":11}}]}},"code":["'use strict';","","/**"," * Attach a transform function to math.index"," * Adds a property transform containing the transform function."," *"," * This transform creates a one-based index instead of a zero-based index"," */","function factory (type, config, load) {","","  return function indexTransform() {","    var args = [];","    for (var i = 0, ii = arguments.length; i < ii; i++) {","      var arg = arguments[i];","","      // change from one-based to zero based, and convert BigNumber to number","      if (arg && arg.isRange === true) {","        arg.start--;","        arg.end -= (arg.step > 0 ? 0 : 2);","      }","      else if (arg && arg.isSet === true) {","        arg = arg.map(function (v) { return v - 1; });","      }","      else if (arg && (arg.isArray === true || arg.isMatrix)) {","        arg = arg.map(function (v) { return v - 1; });","      }","      else if (typeof arg === 'number') {","        arg--;","      }","      else if (arg && arg.isBigNumber === true) {","        arg = arg.toNumber() - 1;","      }","      else if (typeof arg === 'string') {","        // leave as is","      }","      else {","        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');","      }","","      args[i] = arg;","    }","","    var res = new type.Index();","    type.Index.apply(res, args);","    return res;","  };","}","","exports.name = 'index';","exports.path = 'expression.transform';","exports.factory = factory;",""],"l":{"9":1,"11":0,"12":0,"13":0,"14":0,"17":0,"18":0,"19":0,"21":0,"22":0,"24":0,"25":0,"27":0,"28":0,"30":0,"31":0,"33":0,"37":0,"40":0,"43":0,"44":0,"45":0,"49":1,"50":1,"51":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/transform/map.transform.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/transform/map.transform.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":1,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":1,"21":1,"22":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"factory","line":11,"loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":45}}},"2":{"name":"(anonymous_2)","line":16,"loc":{"start":{"line":16,"column":23},"end":{"line":16,"column":46}}},"3":{"name":"(anonymous_3)","line":20,"loc":{"start":{"line":20,"column":24},"end":{"line":20,"column":47}}},"4":{"name":"_map","line":34,"loc":{"start":{"line":34,"column":0},"end":{"line":34,"column":38}}},"5":{"name":"recurse","line":38,"loc":{"start":{"line":38,"column":2},"end":{"line":38,"column":33}}},"6":{"name":"(anonymous_6)","line":40,"loc":{"start":{"line":40,"column":23},"end":{"line":40,"column":43}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":72}},"2":{"start":{"line":11,"column":0},"end":{"line":24,"column":1}},"3":{"start":{"line":12,"column":2},"end":{"line":12,"column":55}},"4":{"start":{"line":13,"column":2},"end":{"line":13,"column":66}},"5":{"start":{"line":15,"column":2},"end":{"line":23,"column":5}},"6":{"start":{"line":17,"column":6},"end":{"line":17,"column":34}},"7":{"start":{"line":21,"column":6},"end":{"line":21,"column":52}},"8":{"start":{"line":34,"column":0},"end":{"line":60,"column":1}},"9":{"start":{"line":36,"column":2},"end":{"line":36,"column":40}},"10":{"start":{"line":38,"column":2},"end":{"line":57,"column":3}},"11":{"start":{"line":39,"column":4},"end":{"line":56,"column":5}},"12":{"start":{"line":40,"column":6},"end":{"line":43,"column":9}},"13":{"start":{"line":42,"column":8},"end":{"line":42,"column":51}},"14":{"start":{"line":47,"column":6},"end":{"line":55,"column":7}},"15":{"start":{"line":48,"column":8},"end":{"line":48,"column":31}},"16":{"start":{"line":50,"column":11},"end":{"line":55,"column":7}},"17":{"start":{"line":51,"column":8},"end":{"line":51,"column":38}},"18":{"start":{"line":54,"column":8},"end":{"line":54,"column":44}},"19":{"start":{"line":59,"column":2},"end":{"line":59,"column":28}},"20":{"start":{"line":62,"column":0},"end":{"line":62,"column":21}},"21":{"start":{"line":63,"column":0},"end":{"line":63,"column":38}},"22":{"start":{"line":64,"column":0},"end":{"line":64,"column":26}}},"branchMap":{"1":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":4},"end":{"line":39,"column":4}},{"start":{"line":39,"column":4},"end":{"line":39,"column":4}}]},"2":{"line":47,"type":"if","locations":[{"start":{"line":47,"column":6},"end":{"line":47,"column":6}},{"start":{"line":47,"column":6},"end":{"line":47,"column":6}}]},"3":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":11},"end":{"line":50,"column":11}},{"start":{"line":50,"column":11},"end":{"line":50,"column":11}}]}},"code":["'use strict';","","var maxArgumentCount = require('../../utils/function').maxArgumentCount;","","/**"," * Attach a transform function to math.map"," * Adds a property transform containing the transform function."," *"," * This transform creates a one-based index instead of a zero-based index"," */","function factory (type, config, load, typed) {","  var map = load(require('../../function/matrix/map'));","  var matrix = load(require('../../type/matrix/function/matrix'));","","  return typed('max', {","    'Array, function': function (x, callback) {","      return _map(x, callback, x);","    },","","    'Matrix, function': function (x, callback) {","      return matrix(_map(x.valueOf(), callback, x));","    }","  });","}","","/**"," * Map for a multi dimensional array. One-based indexes"," * @param {Array} array"," * @param {function} callback"," * @param {Array} orig"," * @return {Array}"," * @private"," */","function _map (array, callback, orig) {","  // figure out what number of arguments the callback function expects","  var args = maxArgumentCount(callback);","","  function recurse(value, index) {","    if (Array.isArray(value)) {","      return value.map(function (child, i) {","        // we create a copy of the index array and append the new index value","        return recurse(child, index.concat(i + 1)); // one based index, hence i + 1","      });","    }","    else {","      // invoke the callback function with the right number of arguments","      if (args === 1) {","        return callback(value);","      }","      else if (args === 2) {","        return callback(value, index);","      }","      else { // 3 or -1","        return callback(value, index, orig);","      }","    }","  }","","  return recurse(array, []);","}","","exports.name = 'map';","exports.path = 'expression.transform';","exports.factory = factory;",""],"l":{"3":1,"11":1,"12":0,"13":0,"15":0,"17":0,"21":0,"34":1,"36":0,"38":1,"39":0,"40":0,"42":0,"47":0,"48":0,"50":0,"51":0,"54":0,"59":0,"62":1,"63":1,"64":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/transform/max.transform.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/transform/max.transform.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":1,"16":1,"17":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"factory","line":13,"loc":{"start":{"line":13,"column":0},"end":{"line":13,"column":45}}},"2":{"name":"(anonymous_2)","line":17,"loc":{"start":{"line":17,"column":14},"end":{"line":17,"column":30}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":60}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":66}},"3":{"start":{"line":13,"column":0},"end":{"line":37,"column":1}},"4":{"start":{"line":14,"column":2},"end":{"line":14,"column":59}},"5":{"start":{"line":16,"column":2},"end":{"line":36,"column":5}},"6":{"start":{"line":19,"column":6},"end":{"line":27,"column":7}},"7":{"start":{"line":20,"column":8},"end":{"line":20,"column":26}},"8":{"start":{"line":21,"column":8},"end":{"line":26,"column":9}},"9":{"start":{"line":22,"column":10},"end":{"line":22,"column":28}},"10":{"start":{"line":24,"column":13},"end":{"line":26,"column":9}},"11":{"start":{"line":25,"column":10},"end":{"line":25,"column":33}},"12":{"start":{"line":29,"column":6},"end":{"line":34,"column":7}},"13":{"start":{"line":30,"column":8},"end":{"line":30,"column":37}},"14":{"start":{"line":33,"column":8},"end":{"line":33,"column":34}},"15":{"start":{"line":39,"column":0},"end":{"line":39,"column":21}},"16":{"start":{"line":40,"column":0},"end":{"line":40,"column":38}},"17":{"start":{"line":41,"column":0},"end":{"line":41,"column":26}}},"branchMap":{"1":{"line":19,"type":"if","locations":[{"start":{"line":19,"column":6},"end":{"line":19,"column":6}},{"start":{"line":19,"column":6},"end":{"line":19,"column":6}}]},"2":{"line":19,"type":"binary-expr","locations":[{"start":{"line":19,"column":10},"end":{"line":19,"column":26}},{"start":{"line":19,"column":30},"end":{"line":19,"column":51}}]},"3":{"line":21,"type":"if","locations":[{"start":{"line":21,"column":8},"end":{"line":21,"column":8}},{"start":{"line":21,"column":8},"end":{"line":21,"column":8}}]},"4":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":13},"end":{"line":24,"column":13}},{"start":{"line":24,"column":13},"end":{"line":24,"column":13}}]},"5":{"line":24,"type":"binary-expr","locations":[{"start":{"line":24,"column":17},"end":{"line":24,"column":20}},{"start":{"line":24,"column":24},"end":{"line":24,"column":48}}]}},"code":["'use strict';","","var errorTransform = require('./error.transform').transform;","var isCollection = require('../../utils/collection/isCollection');","","/**"," * Attach a transform function to math.max"," * Adds a property transform containing the transform function."," *"," * This transform changed the last `dim` parameter of function max"," * from one-based to zero based"," */","function factory (type, config, load, typed) {","  var max = load(require('../../function/statistics/max'));","","  return typed('max', {","    '...any': function (args) {","      // change last argument dim from one-based to zero-based","      if (args.length == 2 && isCollection(args[0])) {","        var dim = args[1];","        if (typeof dim === 'number') {","          args[1] = dim - 1;","        }","        else if (dim && dim.isBigNumber === true) {","          args[1] = dim.minus(1);","        }","      }","","      try {","        return max.apply(null, args);","      }","      catch (err) {","        throw errorTransform(err);","      }","    }","  });","}","","exports.name = 'max';","exports.path = 'expression.transform';","exports.factory = factory;",""],"l":{"3":1,"4":1,"13":1,"14":0,"16":0,"19":0,"20":0,"21":0,"22":0,"24":0,"25":0,"29":0,"30":0,"33":0,"39":1,"40":1,"41":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/utils/collection/isCollection.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/utils/collection/isCollection.js","s":{"1":1,"2":0},"b":{"1":[0,0,0]},"f":{"1":0},"fnMap":{"1":{"name":"isCollection","line":8,"loc":{"start":{"line":8,"column":17},"end":{"line":8,"column":43}}}},"statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":10,"column":2}},"2":{"start":{"line":9,"column":2},"end":{"line":9,"column":58}}},"branchMap":{"1":{"line":9,"type":"binary-expr","locations":[{"start":{"line":9,"column":10},"end":{"line":9,"column":26}},{"start":{"line":9,"column":31},"end":{"line":9,"column":32}},{"start":{"line":9,"column":36},"end":{"line":9,"column":55}}]}},"code":["'use strict';","","/**"," * Test whether a value is a collection: an Array or Matrix"," * @param {*} x"," * @returns {boolean} isCollection"," */","module.exports = function isCollection (x) {","  return (Array.isArray(x) || (x && x.isMatrix === true));","};",""],"l":{"8":1,"9":0}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/transform/mean.transform.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/transform/mean.transform.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":1,"16":1,"17":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"factory","line":13,"loc":{"start":{"line":13,"column":0},"end":{"line":13,"column":45}}},"2":{"name":"(anonymous_2)","line":17,"loc":{"start":{"line":17,"column":14},"end":{"line":17,"column":30}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":60}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":66}},"3":{"start":{"line":13,"column":0},"end":{"line":37,"column":1}},"4":{"start":{"line":14,"column":2},"end":{"line":14,"column":61}},"5":{"start":{"line":16,"column":2},"end":{"line":36,"column":5}},"6":{"start":{"line":19,"column":6},"end":{"line":27,"column":7}},"7":{"start":{"line":20,"column":8},"end":{"line":20,"column":26}},"8":{"start":{"line":21,"column":8},"end":{"line":26,"column":9}},"9":{"start":{"line":22,"column":10},"end":{"line":22,"column":28}},"10":{"start":{"line":24,"column":13},"end":{"line":26,"column":9}},"11":{"start":{"line":25,"column":10},"end":{"line":25,"column":33}},"12":{"start":{"line":29,"column":6},"end":{"line":34,"column":7}},"13":{"start":{"line":30,"column":8},"end":{"line":30,"column":38}},"14":{"start":{"line":33,"column":8},"end":{"line":33,"column":34}},"15":{"start":{"line":39,"column":0},"end":{"line":39,"column":22}},"16":{"start":{"line":40,"column":0},"end":{"line":40,"column":38}},"17":{"start":{"line":41,"column":0},"end":{"line":41,"column":26}}},"branchMap":{"1":{"line":19,"type":"if","locations":[{"start":{"line":19,"column":6},"end":{"line":19,"column":6}},{"start":{"line":19,"column":6},"end":{"line":19,"column":6}}]},"2":{"line":19,"type":"binary-expr","locations":[{"start":{"line":19,"column":10},"end":{"line":19,"column":26}},{"start":{"line":19,"column":30},"end":{"line":19,"column":51}}]},"3":{"line":21,"type":"if","locations":[{"start":{"line":21,"column":8},"end":{"line":21,"column":8}},{"start":{"line":21,"column":8},"end":{"line":21,"column":8}}]},"4":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":13},"end":{"line":24,"column":13}},{"start":{"line":24,"column":13},"end":{"line":24,"column":13}}]},"5":{"line":24,"type":"binary-expr","locations":[{"start":{"line":24,"column":17},"end":{"line":24,"column":20}},{"start":{"line":24,"column":24},"end":{"line":24,"column":48}}]}},"code":["'use strict';","","var errorTransform = require('./error.transform').transform;","var isCollection = require('../../utils/collection/isCollection');","","/**"," * Attach a transform function to math.mean"," * Adds a property transform containing the transform function."," *"," * This transform changed the last `dim` parameter of function mean"," * from one-based to zero based"," */","function factory (type, config, load, typed) {","  var mean = load(require('../../function/statistics/mean'));","","  return typed('mean', {","    '...any': function (args) {","      // change last argument dim from one-based to zero-based","      if (args.length == 2 && isCollection(args[0])) {","        var dim = args[1];","        if (typeof dim === 'number') {","          args[1] = dim - 1;","        }","        else if (dim && dim.isBigNumber === true) {","          args[1] = dim.minus(1);","        }","      }","","      try {","        return mean.apply(null, args);","      }","      catch (err) {","        throw errorTransform(err);","      }","    }","  });","}","","exports.name = 'mean';","exports.path = 'expression.transform';","exports.factory = factory;",""],"l":{"3":1,"4":1,"13":1,"14":0,"16":0,"19":0,"20":0,"21":0,"22":0,"24":0,"25":0,"29":0,"30":0,"33":0,"39":1,"40":1,"41":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/transform/min.transform.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/transform/min.transform.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":1,"16":1,"17":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"factory","line":13,"loc":{"start":{"line":13,"column":0},"end":{"line":13,"column":45}}},"2":{"name":"(anonymous_2)","line":17,"loc":{"start":{"line":17,"column":14},"end":{"line":17,"column":30}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":60}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":66}},"3":{"start":{"line":13,"column":0},"end":{"line":37,"column":1}},"4":{"start":{"line":14,"column":2},"end":{"line":14,"column":59}},"5":{"start":{"line":16,"column":2},"end":{"line":36,"column":5}},"6":{"start":{"line":19,"column":6},"end":{"line":27,"column":7}},"7":{"start":{"line":20,"column":8},"end":{"line":20,"column":26}},"8":{"start":{"line":21,"column":8},"end":{"line":26,"column":9}},"9":{"start":{"line":22,"column":10},"end":{"line":22,"column":28}},"10":{"start":{"line":24,"column":13},"end":{"line":26,"column":9}},"11":{"start":{"line":25,"column":10},"end":{"line":25,"column":33}},"12":{"start":{"line":29,"column":6},"end":{"line":34,"column":7}},"13":{"start":{"line":30,"column":8},"end":{"line":30,"column":37}},"14":{"start":{"line":33,"column":8},"end":{"line":33,"column":34}},"15":{"start":{"line":39,"column":0},"end":{"line":39,"column":21}},"16":{"start":{"line":40,"column":0},"end":{"line":40,"column":38}},"17":{"start":{"line":41,"column":0},"end":{"line":41,"column":26}}},"branchMap":{"1":{"line":19,"type":"if","locations":[{"start":{"line":19,"column":6},"end":{"line":19,"column":6}},{"start":{"line":19,"column":6},"end":{"line":19,"column":6}}]},"2":{"line":19,"type":"binary-expr","locations":[{"start":{"line":19,"column":10},"end":{"line":19,"column":26}},{"start":{"line":19,"column":30},"end":{"line":19,"column":51}}]},"3":{"line":21,"type":"if","locations":[{"start":{"line":21,"column":8},"end":{"line":21,"column":8}},{"start":{"line":21,"column":8},"end":{"line":21,"column":8}}]},"4":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":13},"end":{"line":24,"column":13}},{"start":{"line":24,"column":13},"end":{"line":24,"column":13}}]},"5":{"line":24,"type":"binary-expr","locations":[{"start":{"line":24,"column":17},"end":{"line":24,"column":20}},{"start":{"line":24,"column":24},"end":{"line":24,"column":48}}]}},"code":["'use strict';","","var errorTransform = require('./error.transform').transform;","var isCollection = require('../../utils/collection/isCollection');","","/**"," * Attach a transform function to math.min"," * Adds a property transform containing the transform function."," *"," * This transform changed the last `dim` parameter of function min"," * from one-based to zero based"," */","function factory (type, config, load, typed) {","  var min = load(require('../../function/statistics/min'));","","  return typed('min', {","    '...any': function (args) {","      // change last argument dim from one-based to zero-based","      if (args.length == 2 && isCollection(args[0])) {","        var dim = args[1];","        if (typeof dim === 'number') {","          args[1] = dim - 1;","        }","        else if (dim && dim.isBigNumber === true) {","          args[1] = dim.minus(1);","        }","      }","","      try {","        return min.apply(null, args);","      }","      catch (err) {","        throw errorTransform(err);","      }","    }","  });","}","","exports.name = 'min';","exports.path = 'expression.transform';","exports.factory = factory;",""],"l":{"3":1,"4":1,"13":1,"14":0,"16":0,"19":0,"20":0,"21":0,"22":0,"24":0,"25":0,"29":0,"30":0,"33":0,"39":1,"40":1,"41":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/transform/range.transform.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/transform/range.transform.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1,"10":1,"11":1},"b":{"1":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"factory","line":9,"loc":{"start":{"line":9,"column":0},"end":{"line":9,"column":45}}},"2":{"name":"(anonymous_2)","line":13,"loc":{"start":{"line":13,"column":14},"end":{"line":13,"column":30}}}},"statementMap":{"1":{"start":{"line":9,"column":0},"end":{"line":24,"column":1}},"2":{"start":{"line":10,"column":2},"end":{"line":10,"column":59}},"3":{"start":{"line":12,"column":2},"end":{"line":23,"column":5}},"4":{"start":{"line":14,"column":6},"end":{"line":14,"column":38}},"5":{"start":{"line":15,"column":6},"end":{"line":15,"column":33}},"6":{"start":{"line":16,"column":6},"end":{"line":19,"column":7}},"7":{"start":{"line":18,"column":8},"end":{"line":18,"column":24}},"8":{"start":{"line":21,"column":6},"end":{"line":21,"column":37}},"9":{"start":{"line":26,"column":0},"end":{"line":26,"column":23}},"10":{"start":{"line":27,"column":0},"end":{"line":27,"column":38}},"11":{"start":{"line":28,"column":0},"end":{"line":28,"column":26}}},"branchMap":{"1":{"line":16,"type":"if","locations":[{"start":{"line":16,"column":6},"end":{"line":16,"column":6}},{"start":{"line":16,"column":6},"end":{"line":16,"column":6}}]}},"code":["'use strict';","","/**"," * Attach a transform function to math.range"," * Adds a property transform containing the transform function."," *"," * This transform creates a range which includes the end value"," */","function factory (type, config, load, typed) {","  var range = load(require('../../function/matrix/range'));","","  return typed('range', {","    '...any': function (args) {","      var lastIndex = args.length - 1;","      var last = args[lastIndex];","      if (typeof last !== 'boolean') {","        // append a parameter includeEnd=true","        args.push(true);","      }","","      return range.apply(null, args);","    }","  });","}","","exports.name = 'range';","exports.path = 'expression.transform';","exports.factory = factory;",""],"l":{"9":1,"10":0,"12":0,"14":0,"15":0,"16":0,"18":0,"21":0,"26":1,"27":1,"28":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/transform/subset.transform.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/transform/subset.transform.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":1,"9":1,"10":1},"b":{},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"factory","line":11,"loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":45}}},"2":{"name":"(anonymous_2)","line":15,"loc":{"start":{"line":15,"column":14},"end":{"line":15,"column":30}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":60}},"2":{"start":{"line":11,"column":0},"end":{"line":24,"column":1}},"3":{"start":{"line":12,"column":2},"end":{"line":12,"column":61}},"4":{"start":{"line":14,"column":2},"end":{"line":23,"column":5}},"5":{"start":{"line":16,"column":6},"end":{"line":21,"column":7}},"6":{"start":{"line":17,"column":8},"end":{"line":17,"column":40}},"7":{"start":{"line":20,"column":8},"end":{"line":20,"column":34}},"8":{"start":{"line":26,"column":0},"end":{"line":26,"column":24}},"9":{"start":{"line":27,"column":0},"end":{"line":27,"column":38}},"10":{"start":{"line":28,"column":0},"end":{"line":28,"column":26}}},"branchMap":{},"code":["'use strict';","","var errorTransform = require('./error.transform').transform;","","/**"," * Attach a transform function to math.subset"," * Adds a property transform containing the transform function."," *"," * This transform creates a range which includes the end value"," */","function factory (type, config, load, typed) {","  var subset = load(require('../../function/matrix/subset'));","","  return typed('subset', {","    '...any': function (args) {","      try {","        return subset.apply(null, args);","      }","      catch (err) {","        throw errorTransform(err);","      }","    }","  });","}","","exports.name = 'subset';","exports.path = 'expression.transform';","exports.factory = factory;",""],"l":{"3":1,"11":1,"12":0,"14":0,"16":0,"17":0,"20":0,"26":1,"27":1,"28":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/Help.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/Help.js","s":{"1":1,"2":1,"3":1,"4":0,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":1,"52":1,"53":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"factory","line":6,"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":45}}},"2":{"name":"Help","line":20,"loc":{"start":{"line":20,"column":2},"end":{"line":20,"column":21}}},"3":{"name":"(anonymous_3)","line":41,"loc":{"start":{"line":41,"column":28},"end":{"line":41,"column":40}}},"4":{"name":"(anonymous_4)","line":86,"loc":{"start":{"line":86,"column":26},"end":{"line":86,"column":38}}},"5":{"name":"(anonymous_5)","line":97,"loc":{"start":{"line":97,"column":18},"end":{"line":97,"column":34}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":40}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":40}},"3":{"start":{"line":6,"column":0},"end":{"line":113,"column":1}},"4":{"start":{"line":7,"column":2},"end":{"line":7,"column":52}},"5":{"start":{"line":20,"column":2},"end":{"line":28,"column":3}},"6":{"start":{"line":21,"column":4},"end":{"line":23,"column":5}},"7":{"start":{"line":22,"column":6},"end":{"line":22,"column":80}},"8":{"start":{"line":25,"column":4},"end":{"line":25,"column":57}},"9":{"start":{"line":25,"column":15},"end":{"line":25,"column":57}},"10":{"start":{"line":27,"column":4},"end":{"line":27,"column":19}},"11":{"start":{"line":33,"column":2},"end":{"line":33,"column":31}},"12":{"start":{"line":34,"column":2},"end":{"line":34,"column":31}},"13":{"start":{"line":41,"column":2},"end":{"line":81,"column":4}},"14":{"start":{"line":42,"column":4},"end":{"line":42,"column":29}},"15":{"start":{"line":43,"column":4},"end":{"line":43,"column":20}},"16":{"start":{"line":45,"column":4},"end":{"line":47,"column":5}},"17":{"start":{"line":46,"column":6},"end":{"line":46,"column":43}},"18":{"start":{"line":48,"column":4},"end":{"line":50,"column":5}},"19":{"start":{"line":49,"column":6},"end":{"line":49,"column":51}},"20":{"start":{"line":51,"column":4},"end":{"line":53,"column":5}},"21":{"start":{"line":52,"column":6},"end":{"line":52,"column":62}},"22":{"start":{"line":54,"column":4},"end":{"line":56,"column":5}},"23":{"start":{"line":55,"column":6},"end":{"line":55,"column":67}},"24":{"start":{"line":57,"column":4},"end":{"line":75,"column":5}},"25":{"start":{"line":58,"column":6},"end":{"line":58,"column":28}},"26":{"start":{"line":59,"column":6},"end":{"line":73,"column":7}},"27":{"start":{"line":60,"column":8},"end":{"line":60,"column":35}},"28":{"start":{"line":61,"column":8},"end":{"line":61,"column":37}},"29":{"start":{"line":63,"column":8},"end":{"line":63,"column":16}},"30":{"start":{"line":64,"column":8},"end":{"line":69,"column":9}},"31":{"start":{"line":65,"column":10},"end":{"line":65,"column":34}},"32":{"start":{"line":68,"column":10},"end":{"line":68,"column":18}},"33":{"start":{"line":70,"column":8},"end":{"line":72,"column":9}},"34":{"start":{"line":71,"column":10},"end":{"line":71,"column":74}},"35":{"start":{"line":74,"column":6},"end":{"line":74,"column":19}},"36":{"start":{"line":76,"column":4},"end":{"line":78,"column":5}},"37":{"start":{"line":77,"column":6},"end":{"line":77,"column":59}},"38":{"start":{"line":80,"column":4},"end":{"line":80,"column":16}},"39":{"start":{"line":86,"column":2},"end":{"line":90,"column":4}},"40":{"start":{"line":87,"column":4},"end":{"line":87,"column":37}},"41":{"start":{"line":88,"column":4},"end":{"line":88,"column":24}},"42":{"start":{"line":89,"column":4},"end":{"line":89,"column":15}},"43":{"start":{"line":97,"column":2},"end":{"line":105,"column":4}},"44":{"start":{"line":98,"column":4},"end":{"line":98,"column":17}},"45":{"start":{"line":99,"column":4},"end":{"line":103,"column":5}},"46":{"start":{"line":100,"column":6},"end":{"line":102,"column":7}},"47":{"start":{"line":101,"column":8},"end":{"line":101,"column":31}},"48":{"start":{"line":104,"column":4},"end":{"line":104,"column":25}},"49":{"start":{"line":110,"column":2},"end":{"line":110,"column":51}},"50":{"start":{"line":112,"column":2},"end":{"line":112,"column":14}},"51":{"start":{"line":115,"column":0},"end":{"line":115,"column":22}},"52":{"start":{"line":116,"column":0},"end":{"line":116,"column":22}},"53":{"start":{"line":117,"column":0},"end":{"line":117,"column":26}}},"branchMap":{"1":{"line":21,"type":"if","locations":[{"start":{"line":21,"column":4},"end":{"line":21,"column":4}},{"start":{"line":21,"column":4},"end":{"line":21,"column":4}}]},"2":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":4},"end":{"line":25,"column":4}},{"start":{"line":25,"column":4},"end":{"line":25,"column":4}}]},"3":{"line":42,"type":"binary-expr","locations":[{"start":{"line":42,"column":14},"end":{"line":42,"column":22}},{"start":{"line":42,"column":26},"end":{"line":42,"column":28}}]},"4":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":4},"end":{"line":45,"column":4}},{"start":{"line":45,"column":4},"end":{"line":45,"column":4}}]},"5":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":4},"end":{"line":48,"column":4}},{"start":{"line":48,"column":4},"end":{"line":48,"column":4}}]},"6":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":4},"end":{"line":51,"column":4}},{"start":{"line":51,"column":4},"end":{"line":51,"column":4}}]},"7":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":4},"end":{"line":54,"column":4}},{"start":{"line":54,"column":4},"end":{"line":54,"column":4}}]},"8":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":4},"end":{"line":57,"column":4}},{"start":{"line":57,"column":4},"end":{"line":57,"column":4}}]},"9":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":8},"end":{"line":70,"column":8}},{"start":{"line":70,"column":8},"end":{"line":70,"column":8}}]},"10":{"line":70,"type":"binary-expr","locations":[{"start":{"line":70,"column":12},"end":{"line":70,"column":15}},{"start":{"line":70,"column":19},"end":{"line":70,"column":30}}]},"11":{"line":76,"type":"if","locations":[{"start":{"line":76,"column":4},"end":{"line":76,"column":4}},{"start":{"line":76,"column":4},"end":{"line":76,"column":4}}]},"12":{"line":100,"type":"if","locations":[{"start":{"line":100,"column":6},"end":{"line":100,"column":6}},{"start":{"line":100,"column":6},"end":{"line":100,"column":6}}]}},"code":["'use strict';","","var object = require('../utils/object');","var string = require('../utils/string');","","function factory (type, config, load, typed) {","  var parser = load(require('./function/parser'))();","","  /**","   * Documentation object","   * @param {Object} doc  Object containing properties:","   *                      {string} name","   *                      {string} category","   *                      {string} description","   *                      {string[]} syntax","   *                      {string[]} examples","   *                      {string[]} seealso","   * @constructor","   */","  function Help(doc) {","    if (!(this instanceof Help)) {","      throw new SyntaxError('Constructor must be called with the new operator');","    }","","    if (!doc)  throw new Error('Argument \"doc\" missing');","","    this.doc = doc;","  }","","  /**","   * Attach type information","   */","  Help.prototype.type = 'Help';","  Help.prototype.isHelp = true;","","  /**","   * Generate a string representation of the Help object","   * @return {string} Returns a string","   * @private","   */","  Help.prototype.toString = function () {","    var doc = this.doc || {};","    var desc = '\\n';","","    if (doc.name) {","      desc += 'Name: ' + doc.name + '\\n\\n';","    }","    if (doc.category) {","      desc += 'Category: ' + doc.category + '\\n\\n';","    }","    if (doc.description) {","      desc += 'Description:\\n    ' + doc.description + '\\n\\n';","    }","    if (doc.syntax) {","      desc += 'Syntax:\\n    ' + doc.syntax.join('\\n    ') + '\\n\\n';","    }","    if (doc.examples) {","      desc += 'Examples:\\n';","      for (var i = 0; i < doc.examples.length; i++) {","        var expr = doc.examples[i];","        desc += '    ' + expr + '\\n';","","        var res;","        try {","          res = parser.eval(expr);","        }","        catch (e) {","          res = e;","        }","        if (res && !res.isHelp) {","          desc += '        ' + string.format(res, {precision: 14}) + '\\n';","        }","      }","      desc += '\\n';","    }","    if (doc.seealso) {","      desc += 'See also: ' + doc.seealso.join(', ') + '\\n';","    }","","    return desc;","  };","","  /**","   * Export the help object to JSON","   */","  Help.prototype.toJSON = function () {","    var obj = object.clone(this.doc);","    obj.mathjs = 'Help';","    return obj;","  };","","  /**","   * Instantiate a Help object from a JSON object","   * @param {Object} json","   * @returns {Help} Returns a new Help object","   */","  Help.fromJSON = function (json) {","    var doc = {};","    for (var prop in json) {","      if (prop !== 'mathjs') { // ignore mathjs field","        doc[prop] = json[prop];","      }","    }","    return new Help(doc);","  };","","  /**","   * Returns a string representation of the Help object","   */","  Help.prototype.valueOf = Help.prototype.toString;","","  return Help;","}","","exports.name = 'Help';","exports.path = 'type';","exports.factory = factory;",""],"l":{"3":1,"4":1,"6":1,"7":0,"20":1,"21":0,"22":0,"25":0,"27":0,"33":0,"34":0,"41":0,"42":0,"43":0,"45":0,"46":0,"48":0,"49":0,"51":0,"52":0,"54":0,"55":0,"57":0,"58":0,"59":0,"60":0,"61":0,"63":0,"64":0,"65":0,"68":0,"70":0,"71":0,"74":0,"76":0,"77":0,"80":0,"86":0,"87":0,"88":0,"89":0,"97":0,"98":0,"99":0,"100":0,"101":0,"104":0,"110":0,"112":0,"115":1,"116":1,"117":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/parse.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/parse.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":1,"45":0,"46":0,"47":0,"48":0,"49":1,"50":0,"51":0,"52":1,"53":0,"54":1,"55":0,"56":1,"57":0,"58":1,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":1,"145":0,"146":0,"147":1,"148":0,"149":1,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":1,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":1,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":1,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":1,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":1,"241":0,"242":0,"243":0,"244":0,"245":0,"246":1,"247":0,"248":0,"249":0,"250":0,"251":0,"252":1,"253":0,"254":0,"255":0,"256":0,"257":0,"258":1,"259":0,"260":0,"261":0,"262":0,"263":0,"264":1,"265":0,"266":0,"267":0,"268":0,"269":0,"270":1,"271":0,"272":0,"273":0,"274":0,"275":0,"276":1,"277":0,"278":0,"279":0,"280":0,"281":0,"282":0,"283":0,"284":0,"285":0,"286":0,"287":1,"288":0,"289":0,"290":0,"291":0,"292":0,"293":0,"294":0,"295":0,"296":0,"297":0,"298":1,"299":0,"300":0,"301":0,"302":0,"303":0,"304":0,"305":0,"306":0,"307":0,"308":0,"309":0,"310":0,"311":1,"312":0,"313":0,"314":0,"315":0,"316":0,"317":0,"318":0,"319":0,"320":0,"321":0,"322":0,"323":0,"324":0,"325":0,"326":0,"327":1,"328":0,"329":0,"330":0,"331":0,"332":0,"333":0,"334":0,"335":0,"336":0,"337":0,"338":1,"339":0,"340":0,"341":0,"342":0,"343":0,"344":0,"345":0,"346":0,"347":0,"348":0,"349":0,"350":0,"351":0,"352":0,"353":0,"354":0,"355":1,"356":0,"357":0,"358":0,"359":0,"360":0,"361":0,"362":0,"363":0,"364":1,"365":0,"366":0,"367":0,"368":0,"369":0,"370":0,"371":0,"372":0,"373":0,"374":1,"375":0,"376":0,"377":0,"378":0,"379":0,"380":0,"381":0,"382":0,"383":0,"384":0,"385":0,"386":1,"387":0,"388":0,"389":0,"390":0,"391":0,"392":0,"393":0,"394":0,"395":0,"396":0,"397":0,"398":0,"399":0,"400":0,"401":0,"402":0,"403":0,"404":0,"405":0,"406":1,"407":0,"408":0,"409":0,"410":0,"411":0,"412":0,"413":0,"414":0,"415":1,"416":0,"417":0,"418":0,"419":0,"420":0,"421":0,"422":0,"423":0,"424":0,"425":0,"426":0,"427":0,"428":0,"429":0,"430":0,"431":0,"432":0,"433":0,"434":0,"435":0,"436":0,"437":0,"438":0,"439":0,"440":0,"441":0,"442":0,"443":0,"444":0,"445":0,"446":0,"447":0,"448":0,"449":0,"450":0,"451":0,"452":0,"453":0,"454":0,"455":1,"456":0,"457":0,"458":0,"459":0,"460":0,"461":0,"462":0,"463":1,"464":0,"465":0,"466":0,"467":0,"468":0,"469":0,"470":0,"471":0,"472":0,"473":0,"474":0,"475":0,"476":1,"477":0,"478":0,"479":0,"480":0,"481":0,"482":0,"483":0,"484":0,"485":0,"486":0,"487":0,"488":0,"489":0,"490":0,"491":0,"492":0,"493":0,"494":0,"495":0,"496":0,"497":0,"498":0,"499":0,"500":0,"501":0,"502":0,"503":0,"504":0,"505":0,"506":0,"507":0,"508":0,"509":1,"510":0,"511":0,"512":0,"513":0,"514":0,"515":0,"516":0,"517":1,"518":0,"519":0,"520":0,"521":0,"522":0,"523":0,"524":0,"525":0,"526":0,"527":0,"528":0,"529":0,"530":0,"531":0,"532":0,"533":0,"534":0,"535":0,"536":0,"537":0,"538":0,"539":0,"540":0,"541":1,"542":0,"543":0,"544":0,"545":0,"546":0,"547":0,"548":1,"549":0,"550":0,"551":0,"552":0,"553":0,"554":0,"555":0,"556":0,"557":0,"558":0,"559":0,"560":0,"561":0,"562":1,"563":0,"564":0,"565":0,"566":1,"567":0,"568":1,"569":0,"570":0,"571":0,"572":0,"573":1,"574":0,"575":0,"576":0,"577":0,"578":0,"579":1,"580":1,"581":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0,0],"36":[0,0,0],"37":[0,0,0,0],"38":[0,0,0,0],"39":[0,0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0],"70":[0,0,0,0],"71":[0,0],"72":[0,0],"73":[0,0],"74":[0,0,0,0,0,0,0,0,0],"75":[0,0],"76":[0,0],"77":[0,0],"78":[0,0],"79":[0,0],"80":[0,0],"81":[0,0],"82":[0,0],"83":[0,0],"84":[0,0],"85":[0,0,0],"86":[0,0,0,0,0],"87":[0,0],"88":[0,0],"89":[0,0,0],"90":[0,0],"91":[0,0],"92":[0,0],"93":[0,0],"94":[0,0],"95":[0,0],"96":[0,0],"97":[0,0],"98":[0,0],"99":[0,0],"100":[0,0],"101":[0,0],"102":[0,0],"103":[0,0],"104":[0,0],"105":[0,0],"106":[0,0],"107":[0,0],"108":[0,0],"109":[0,0],"110":[0,0],"111":[0,0],"112":[0,0],"113":[0,0],"114":[0,0],"115":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0},"fnMap":{"1":{"name":"factory","line":6,"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":45}}},"2":{"name":"parse","line":55,"loc":{"start":{"line":55,"column":2},"end":{"line":55,"column":33}}},"3":{"name":"(anonymous_3)","line":70,"loc":{"start":{"line":70,"column":27},"end":{"line":70,"column":43}}},"4":{"name":"first","line":162,"loc":{"start":{"line":162,"column":2},"end":{"line":162,"column":19}}},"5":{"name":"next","line":175,"loc":{"start":{"line":175,"column":2},"end":{"line":175,"column":18}}},"6":{"name":"prevPreview","line":185,"loc":{"start":{"line":185,"column":2},"end":{"line":185,"column":25}}},"7":{"name":"nextPreview","line":194,"loc":{"start":{"line":194,"column":2},"end":{"line":194,"column":25}}},"8":{"name":"nextNextPreview","line":203,"loc":{"start":{"line":203,"column":2},"end":{"line":203,"column":29}}},"9":{"name":"getToken","line":212,"loc":{"start":{"line":212,"column":2},"end":{"line":212,"column":22}}},"10":{"name":"getTokenSkipNewline","line":368,"loc":{"start":{"line":368,"column":2},"end":{"line":368,"column":34}}},"11":{"name":"openParams","line":379,"loc":{"start":{"line":379,"column":2},"end":{"line":379,"column":24}}},"12":{"name":"closeParams","line":387,"loc":{"start":{"line":387,"column":2},"end":{"line":387,"column":25}}},"13":{"name":"isAlpha","line":408,"loc":{"start":{"line":408,"column":18},"end":{"line":408,"column":53}}},"14":{"name":"isValidLatinOrGreek","line":419,"loc":{"start":{"line":419,"column":30},"end":{"line":419,"column":63}}},"15":{"name":"isValidMathSymbol","line":438,"loc":{"start":{"line":438,"column":28},"end":{"line":438,"column":67}}},"16":{"name":"isWhitespace","line":450,"loc":{"start":{"line":450,"column":23},"end":{"line":450,"column":63}}},"17":{"name":"isDecimalMark","line":462,"loc":{"start":{"line":462,"column":24},"end":{"line":462,"column":58}}},"18":{"name":"isDigitDot","line":471,"loc":{"start":{"line":471,"column":21},"end":{"line":471,"column":45}}},"19":{"name":"isDigit","line":480,"loc":{"start":{"line":480,"column":18},"end":{"line":480,"column":39}}},"20":{"name":"parseStart","line":489,"loc":{"start":{"line":489,"column":2},"end":{"line":489,"column":25}}},"21":{"name":"parseBlock","line":521,"loc":{"start":{"line":521,"column":2},"end":{"line":521,"column":25}}},"22":{"name":"parseAssignment","line":575,"loc":{"start":{"line":575,"column":2},"end":{"line":575,"column":30}}},"23":{"name":"(anonymous_23)","line":600,"loc":{"start":{"line":600,"column":26},"end":{"line":600,"column":48}}},"24":{"name":"parseConditional","line":632,"loc":{"start":{"line":632,"column":2},"end":{"line":632,"column":31}}},"25":{"name":"parseLogicalOr","line":666,"loc":{"start":{"line":666,"column":2},"end":{"line":666,"column":28}}},"26":{"name":"parseLogicalXor","line":682,"loc":{"start":{"line":682,"column":2},"end":{"line":682,"column":29}}},"27":{"name":"parseLogicalAnd","line":698,"loc":{"start":{"line":698,"column":2},"end":{"line":698,"column":29}}},"28":{"name":"parseBitwiseOr","line":714,"loc":{"start":{"line":714,"column":2},"end":{"line":714,"column":28}}},"29":{"name":"parseBitwiseXor","line":730,"loc":{"start":{"line":730,"column":2},"end":{"line":730,"column":29}}},"30":{"name":"parseBitwiseAnd","line":746,"loc":{"start":{"line":746,"column":2},"end":{"line":746,"column":30}}},"31":{"name":"parseRelational","line":762,"loc":{"start":{"line":762,"column":2},"end":{"line":762,"column":30}}},"32":{"name":"parseShift","line":792,"loc":{"start":{"line":792,"column":2},"end":{"line":792,"column":25}}},"33":{"name":"parseConversion","line":820,"loc":{"start":{"line":820,"column":2},"end":{"line":820,"column":30}}},"34":{"name":"parseRange","line":855,"loc":{"start":{"line":855,"column":2},"end":{"line":855,"column":25}}},"35":{"name":"parseAddSubtract","line":903,"loc":{"start":{"line":903,"column":2},"end":{"line":903,"column":32}}},"36":{"name":"parseMultiplyDivide","line":929,"loc":{"start":{"line":929,"column":2},"end":{"line":929,"column":34}}},"37":{"name":"parseUnary","line":982,"loc":{"start":{"line":982,"column":2},"end":{"line":982,"column":25}}},"38":{"name":"parsePow","line":1009,"loc":{"start":{"line":1009,"column":2},"end":{"line":1009,"column":23}}},"39":{"name":"parseLeftHandOperators","line":1031,"loc":{"start":{"line":1031,"column":2},"end":{"line":1031,"column":38}}},"40":{"name":"parseCustomNodes","line":1083,"loc":{"start":{"line":1083,"column":2},"end":{"line":1083,"column":31}}},"41":{"name":"parseSymbol","line":1128,"loc":{"start":{"line":1128,"column":2},"end":{"line":1128,"column":26}}},"42":{"name":"parseAccessors","line":1159,"loc":{"start":{"line":1159,"column":2},"end":{"line":1159,"column":40}}},"43":{"name":"parseString","line":1244,"loc":{"start":{"line":1244,"column":2},"end":{"line":1244,"column":26}}},"44":{"name":"parseStringToken","line":1266,"loc":{"start":{"line":1266,"column":2},"end":{"line":1266,"column":31}}},"45":{"name":"parseMatrix","line":1294,"loc":{"start":{"line":1294,"column":2},"end":{"line":1294,"column":26}}},"46":{"name":"parseRow","line":1364,"loc":{"start":{"line":1364,"column":2},"end":{"line":1364,"column":23}}},"47":{"name":"parseObject","line":1384,"loc":{"start":{"line":1384,"column":2},"end":{"line":1384,"column":26}}},"48":{"name":"parseNumber","line":1438,"loc":{"start":{"line":1438,"column":2},"end":{"line":1438,"column":26}}},"49":{"name":"parseParentheses","line":1457,"loc":{"start":{"line":1457,"column":2},"end":{"line":1457,"column":31}}},"50":{"name":"parseEnd","line":1487,"loc":{"start":{"line":1487,"column":2},"end":{"line":1487,"column":23}}},"51":{"name":"col","line":1512,"loc":{"start":{"line":1512,"column":2},"end":{"line":1512,"column":18}}},"52":{"name":"createSyntaxError","line":1522,"loc":{"start":{"line":1522,"column":2},"end":{"line":1522,"column":39}}},"53":{"name":"createError","line":1536,"loc":{"start":{"line":1536,"column":2},"end":{"line":1536,"column":33}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":53}},"3":{"start":{"line":6,"column":0},"end":{"line":1545,"column":1}},"4":{"start":{"line":7,"column":2},"end":{"line":7,"column":69}},"5":{"start":{"line":8,"column":2},"end":{"line":8,"column":66}},"6":{"start":{"line":9,"column":2},"end":{"line":9,"column":71}},"7":{"start":{"line":10,"column":2},"end":{"line":10,"column":66}},"8":{"start":{"line":11,"column":2},"end":{"line":11,"column":72}},"9":{"start":{"line":12,"column":2},"end":{"line":12,"column":69}},"10":{"start":{"line":13,"column":2},"end":{"line":13,"column":79}},"11":{"start":{"line":14,"column":2},"end":{"line":14,"column":66}},"12":{"start":{"line":15,"column":2},"end":{"line":15,"column":67}},"13":{"start":{"line":16,"column":2},"end":{"line":16,"column":69}},"14":{"start":{"line":17,"column":2},"end":{"line":17,"column":72}},"15":{"start":{"line":18,"column":2},"end":{"line":18,"column":69}},"16":{"start":{"line":19,"column":2},"end":{"line":19,"column":66}},"17":{"start":{"line":20,"column":2},"end":{"line":20,"column":67}},"18":{"start":{"line":55,"column":2},"end":{"line":81,"column":3}},"19":{"start":{"line":56,"column":4},"end":{"line":58,"column":5}},"20":{"start":{"line":57,"column":6},"end":{"line":57,"column":64}},"21":{"start":{"line":61,"column":4},"end":{"line":61,"column":66}},"22":{"start":{"line":63,"column":4},"end":{"line":80,"column":5}},"23":{"start":{"line":65,"column":6},"end":{"line":65,"column":24}},"24":{"start":{"line":66,"column":6},"end":{"line":66,"column":26}},"25":{"start":{"line":68,"column":9},"end":{"line":80,"column":5}},"26":{"start":{"line":70,"column":6},"end":{"line":75,"column":9}},"27":{"start":{"line":71,"column":8},"end":{"line":71,"column":77}},"28":{"start":{"line":71,"column":38},"end":{"line":71,"column":77}},"29":{"start":{"line":73,"column":8},"end":{"line":73,"column":26}},"30":{"start":{"line":74,"column":8},"end":{"line":74,"column":28}},"31":{"start":{"line":79,"column":6},"end":{"line":79,"column":55}},"32":{"start":{"line":84,"column":2},"end":{"line":90,"column":4}},"33":{"start":{"line":93,"column":2},"end":{"line":133,"column":4}},"34":{"start":{"line":136,"column":2},"end":{"line":144,"column":4}},"35":{"start":{"line":146,"column":2},"end":{"line":146,"column":23}},"36":{"start":{"line":147,"column":2},"end":{"line":147,"column":22}},"37":{"start":{"line":148,"column":2},"end":{"line":148,"column":19}},"38":{"start":{"line":149,"column":2},"end":{"line":149,"column":16}},"39":{"start":{"line":150,"column":2},"end":{"line":150,"column":13}},"40":{"start":{"line":151,"column":2},"end":{"line":151,"column":17}},"41":{"start":{"line":152,"column":2},"end":{"line":152,"column":34}},"42":{"start":{"line":153,"column":2},"end":{"line":153,"column":24}},"43":{"start":{"line":154,"column":2},"end":{"line":154,"column":31}},"44":{"start":{"line":162,"column":2},"end":{"line":167,"column":3}},"45":{"start":{"line":163,"column":4},"end":{"line":163,"column":14}},"46":{"start":{"line":164,"column":4},"end":{"line":164,"column":29}},"47":{"start":{"line":165,"column":4},"end":{"line":165,"column":22}},"48":{"start":{"line":166,"column":4},"end":{"line":166,"column":29}},"49":{"start":{"line":175,"column":2},"end":{"line":178,"column":3}},"50":{"start":{"line":176,"column":4},"end":{"line":176,"column":12}},"51":{"start":{"line":177,"column":4},"end":{"line":177,"column":33}},"52":{"start":{"line":185,"column":2},"end":{"line":187,"column":3}},"53":{"start":{"line":186,"column":4},"end":{"line":186,"column":40}},"54":{"start":{"line":194,"column":2},"end":{"line":196,"column":3}},"55":{"start":{"line":195,"column":4},"end":{"line":195,"column":40}},"56":{"start":{"line":203,"column":2},"end":{"line":205,"column":3}},"57":{"start":{"line":204,"column":4},"end":{"line":204,"column":40}},"58":{"start":{"line":212,"column":2},"end":{"line":363,"column":3}},"59":{"start":{"line":213,"column":4},"end":{"line":213,"column":32}},"60":{"start":{"line":214,"column":4},"end":{"line":214,"column":15}},"61":{"start":{"line":215,"column":4},"end":{"line":215,"column":17}},"62":{"start":{"line":219,"column":4},"end":{"line":221,"column":5}},"63":{"start":{"line":220,"column":6},"end":{"line":220,"column":13}},"64":{"start":{"line":224,"column":4},"end":{"line":229,"column":5}},"65":{"start":{"line":225,"column":6},"end":{"line":228,"column":7}},"66":{"start":{"line":226,"column":8},"end":{"line":226,"column":21}},"67":{"start":{"line":227,"column":8},"end":{"line":227,"column":15}},"68":{"start":{"line":232,"column":4},"end":{"line":236,"column":5}},"69":{"start":{"line":234,"column":6},"end":{"line":234,"column":39}},"70":{"start":{"line":235,"column":6},"end":{"line":235,"column":13}},"71":{"start":{"line":239,"column":4},"end":{"line":244,"column":5}},"72":{"start":{"line":240,"column":6},"end":{"line":240,"column":39}},"73":{"start":{"line":241,"column":6},"end":{"line":241,"column":16}},"74":{"start":{"line":242,"column":6},"end":{"line":242,"column":13}},"75":{"start":{"line":243,"column":6},"end":{"line":243,"column":13}},"76":{"start":{"line":247,"column":4},"end":{"line":247,"column":31}},"77":{"start":{"line":248,"column":4},"end":{"line":248,"column":36}},"78":{"start":{"line":249,"column":4},"end":{"line":256,"column":5}},"79":{"start":{"line":250,"column":6},"end":{"line":250,"column":39}},"80":{"start":{"line":251,"column":6},"end":{"line":251,"column":17}},"81":{"start":{"line":252,"column":6},"end":{"line":252,"column":13}},"82":{"start":{"line":253,"column":6},"end":{"line":253,"column":13}},"83":{"start":{"line":254,"column":6},"end":{"line":254,"column":13}},"84":{"start":{"line":255,"column":6},"end":{"line":255,"column":13}},"85":{"start":{"line":259,"column":4},"end":{"line":265,"column":5}},"86":{"start":{"line":260,"column":6},"end":{"line":260,"column":39}},"87":{"start":{"line":261,"column":6},"end":{"line":261,"column":17}},"88":{"start":{"line":262,"column":6},"end":{"line":262,"column":13}},"89":{"start":{"line":263,"column":6},"end":{"line":263,"column":13}},"90":{"start":{"line":264,"column":6},"end":{"line":264,"column":13}},"91":{"start":{"line":268,"column":4},"end":{"line":273,"column":5}},"92":{"start":{"line":269,"column":6},"end":{"line":269,"column":39}},"93":{"start":{"line":270,"column":6},"end":{"line":270,"column":16}},"94":{"start":{"line":271,"column":6},"end":{"line":271,"column":13}},"95":{"start":{"line":272,"column":6},"end":{"line":272,"column":13}},"96":{"start":{"line":276,"column":4},"end":{"line":337,"column":5}},"97":{"start":{"line":277,"column":6},"end":{"line":277,"column":36}},"98":{"start":{"line":280,"column":6},"end":{"line":298,"column":7}},"99":{"start":{"line":281,"column":8},"end":{"line":281,"column":19}},"100":{"start":{"line":282,"column":8},"end":{"line":282,"column":15}},"101":{"start":{"line":284,"column":8},"end":{"line":287,"column":9}},"102":{"start":{"line":286,"column":10},"end":{"line":286,"column":43}},"103":{"start":{"line":290,"column":8},"end":{"line":293,"column":9}},"104":{"start":{"line":291,"column":10},"end":{"line":291,"column":21}},"105":{"start":{"line":292,"column":10},"end":{"line":292,"column":17}},"106":{"start":{"line":294,"column":8},"end":{"line":297,"column":9}},"107":{"start":{"line":295,"column":10},"end":{"line":295,"column":21}},"108":{"start":{"line":296,"column":10},"end":{"line":296,"column":17}},"109":{"start":{"line":299,"column":6},"end":{"line":302,"column":7}},"110":{"start":{"line":300,"column":8},"end":{"line":300,"column":19}},"111":{"start":{"line":301,"column":8},"end":{"line":301,"column":15}},"112":{"start":{"line":305,"column":6},"end":{"line":305,"column":25}},"113":{"start":{"line":306,"column":6},"end":{"line":334,"column":7}},"114":{"start":{"line":307,"column":8},"end":{"line":333,"column":9}},"115":{"start":{"line":308,"column":10},"end":{"line":308,"column":21}},"116":{"start":{"line":309,"column":10},"end":{"line":309,"column":17}},"117":{"start":{"line":311,"column":10},"end":{"line":314,"column":11}},"118":{"start":{"line":312,"column":12},"end":{"line":312,"column":23}},"119":{"start":{"line":313,"column":12},"end":{"line":313,"column":19}},"120":{"start":{"line":317,"column":10},"end":{"line":319,"column":11}},"121":{"start":{"line":318,"column":12},"end":{"line":318,"column":71}},"122":{"start":{"line":321,"column":10},"end":{"line":324,"column":11}},"123":{"start":{"line":322,"column":12},"end":{"line":322,"column":23}},"124":{"start":{"line":323,"column":12},"end":{"line":323,"column":19}},"125":{"start":{"line":326,"column":10},"end":{"line":328,"column":11}},"126":{"start":{"line":327,"column":12},"end":{"line":327,"column":71}},"127":{"start":{"line":330,"column":13},"end":{"line":333,"column":9}},"128":{"start":{"line":331,"column":10},"end":{"line":331,"column":17}},"129":{"start":{"line":332,"column":10},"end":{"line":332,"column":69}},"130":{"start":{"line":336,"column":6},"end":{"line":336,"column":13}},"131":{"start":{"line":340,"column":4},"end":{"line":354,"column":5}},"132":{"start":{"line":341,"column":6},"end":{"line":344,"column":7}},"133":{"start":{"line":342,"column":8},"end":{"line":342,"column":19}},"134":{"start":{"line":343,"column":8},"end":{"line":343,"column":15}},"135":{"start":{"line":346,"column":6},"end":{"line":351,"column":7}},"136":{"start":{"line":347,"column":8},"end":{"line":347,"column":41}},"137":{"start":{"line":350,"column":8},"end":{"line":350,"column":38}},"138":{"start":{"line":353,"column":6},"end":{"line":353,"column":13}},"139":{"start":{"line":357,"column":4},"end":{"line":357,"column":35}},"140":{"start":{"line":358,"column":4},"end":{"line":361,"column":5}},"141":{"start":{"line":359,"column":6},"end":{"line":359,"column":17}},"142":{"start":{"line":360,"column":6},"end":{"line":360,"column":13}},"143":{"start":{"line":362,"column":4},"end":{"line":362,"column":68}},"144":{"start":{"line":368,"column":2},"end":{"line":373,"column":3}},"145":{"start":{"line":369,"column":4},"end":{"line":372,"column":26}},"146":{"start":{"line":370,"column":6},"end":{"line":370,"column":17}},"147":{"start":{"line":379,"column":2},"end":{"line":381,"column":3}},"148":{"start":{"line":380,"column":4},"end":{"line":380,"column":20}},"149":{"start":{"line":387,"column":2},"end":{"line":389,"column":3}},"150":{"start":{"line":388,"column":4},"end":{"line":388,"column":20}},"151":{"start":{"line":408,"column":2},"end":{"line":412,"column":4}},"152":{"start":{"line":409,"column":4},"end":{"line":411,"column":45}},"153":{"start":{"line":419,"column":2},"end":{"line":421,"column":4}},"154":{"start":{"line":420,"column":4},"end":{"line":420,"column":72}},"155":{"start":{"line":438,"column":2},"end":{"line":442,"column":4}},"156":{"start":{"line":439,"column":4},"end":{"line":441,"column":189}},"157":{"start":{"line":450,"column":2},"end":{"line":453,"column":4}},"158":{"start":{"line":452,"column":4},"end":{"line":452,"column":68}},"159":{"start":{"line":462,"column":2},"end":{"line":464,"column":4}},"160":{"start":{"line":463,"column":4},"end":{"line":463,"column":71}},"161":{"start":{"line":471,"column":2},"end":{"line":473,"column":4}},"162":{"start":{"line":472,"column":4},"end":{"line":472,"column":48}},"163":{"start":{"line":480,"column":2},"end":{"line":482,"column":4}},"164":{"start":{"line":481,"column":4},"end":{"line":481,"column":34}},"165":{"start":{"line":489,"column":2},"end":{"line":512,"column":3}},"166":{"start":{"line":491,"column":4},"end":{"line":491,"column":12}},"167":{"start":{"line":493,"column":4},"end":{"line":493,"column":15}},"168":{"start":{"line":495,"column":4},"end":{"line":495,"column":28}},"169":{"start":{"line":499,"column":4},"end":{"line":509,"column":5}},"170":{"start":{"line":500,"column":6},"end":{"line":508,"column":7}},"171":{"start":{"line":504,"column":8},"end":{"line":504,"column":58}},"172":{"start":{"line":507,"column":8},"end":{"line":507,"column":67}},"173":{"start":{"line":511,"column":4},"end":{"line":511,"column":16}},"174":{"start":{"line":521,"column":2},"end":{"line":565,"column":3}},"175":{"start":{"line":522,"column":4},"end":{"line":522,"column":13}},"176":{"start":{"line":523,"column":4},"end":{"line":523,"column":20}},"177":{"start":{"line":524,"column":4},"end":{"line":524,"column":16}},"178":{"start":{"line":526,"column":4},"end":{"line":529,"column":5}},"179":{"start":{"line":527,"column":6},"end":{"line":527,"column":31}},"180":{"start":{"line":528,"column":6},"end":{"line":528,"column":29}},"181":{"start":{"line":532,"column":4},"end":{"line":552,"column":5}},"182":{"start":{"line":533,"column":6},"end":{"line":539,"column":7}},"183":{"start":{"line":534,"column":8},"end":{"line":534,"column":33}},"184":{"start":{"line":535,"column":8},"end":{"line":538,"column":11}},"185":{"start":{"line":541,"column":6},"end":{"line":541,"column":17}},"186":{"start":{"line":542,"column":6},"end":{"line":551,"column":7}},"187":{"start":{"line":543,"column":8},"end":{"line":543,"column":33}},"188":{"start":{"line":544,"column":8},"end":{"line":544,"column":31}},"189":{"start":{"line":546,"column":8},"end":{"line":546,"column":33}},"190":{"start":{"line":547,"column":8},"end":{"line":550,"column":11}},"191":{"start":{"line":554,"column":4},"end":{"line":564,"column":5}},"192":{"start":{"line":555,"column":6},"end":{"line":555,"column":35}},"193":{"start":{"line":558,"column":6},"end":{"line":561,"column":7}},"194":{"start":{"line":559,"column":8},"end":{"line":559,"column":58}},"195":{"start":{"line":560,"column":8},"end":{"line":560,"column":31}},"196":{"start":{"line":563,"column":6},"end":{"line":563,"column":17}},"197":{"start":{"line":575,"column":2},"end":{"line":620,"column":3}},"198":{"start":{"line":576,"column":4},"end":{"line":576,"column":33}},"199":{"start":{"line":578,"column":4},"end":{"line":578,"column":34}},"200":{"start":{"line":580,"column":4},"end":{"line":617,"column":5}},"201":{"start":{"line":581,"column":6},"end":{"line":614,"column":7}},"202":{"start":{"line":583,"column":8},"end":{"line":583,"column":25}},"203":{"start":{"line":584,"column":8},"end":{"line":584,"column":30}},"204":{"start":{"line":585,"column":8},"end":{"line":585,"column":34}},"205":{"start":{"line":586,"column":8},"end":{"line":586,"column":63}},"206":{"start":{"line":588,"column":11},"end":{"line":614,"column":7}},"207":{"start":{"line":590,"column":8},"end":{"line":590,"column":30}},"208":{"start":{"line":591,"column":8},"end":{"line":591,"column":34}},"209":{"start":{"line":592,"column":8},"end":{"line":592,"column":66}},"210":{"start":{"line":594,"column":11},"end":{"line":614,"column":7}},"211":{"start":{"line":596,"column":8},"end":{"line":596,"column":21}},"212":{"start":{"line":597,"column":8},"end":{"line":597,"column":18}},"213":{"start":{"line":599,"column":8},"end":{"line":599,"column":25}},"214":{"start":{"line":600,"column":8},"end":{"line":607,"column":11}},"215":{"start":{"line":601,"column":10},"end":{"line":606,"column":11}},"216":{"start":{"line":602,"column":12},"end":{"line":602,"column":35}},"217":{"start":{"line":605,"column":12},"end":{"line":605,"column":26}},"218":{"start":{"line":609,"column":8},"end":{"line":613,"column":9}},"219":{"start":{"line":610,"column":10},"end":{"line":610,"column":32}},"220":{"start":{"line":611,"column":10},"end":{"line":611,"column":36}},"221":{"start":{"line":612,"column":10},"end":{"line":612,"column":63}},"222":{"start":{"line":616,"column":6},"end":{"line":616,"column":81}},"223":{"start":{"line":619,"column":4},"end":{"line":619,"column":16}},"224":{"start":{"line":632,"column":2},"end":{"line":659,"column":3}},"225":{"start":{"line":633,"column":4},"end":{"line":633,"column":32}},"226":{"start":{"line":635,"column":4},"end":{"line":656,"column":5}},"227":{"start":{"line":638,"column":6},"end":{"line":638,"column":35}},"228":{"start":{"line":639,"column":6},"end":{"line":639,"column":40}},"229":{"start":{"line":640,"column":6},"end":{"line":640,"column":28}},"230":{"start":{"line":642,"column":6},"end":{"line":642,"column":27}},"231":{"start":{"line":643,"column":6},"end":{"line":643,"column":39}},"232":{"start":{"line":645,"column":6},"end":{"line":645,"column":97}},"233":{"start":{"line":645,"column":24},"end":{"line":645,"column":97}},"234":{"start":{"line":647,"column":6},"end":{"line":647,"column":31}},"235":{"start":{"line":648,"column":6},"end":{"line":648,"column":28}},"236":{"start":{"line":650,"column":6},"end":{"line":650,"column":40}},"237":{"start":{"line":652,"column":6},"end":{"line":652,"column":65}},"238":{"start":{"line":655,"column":6},"end":{"line":655,"column":31}},"239":{"start":{"line":658,"column":4},"end":{"line":658,"column":16}},"240":{"start":{"line":666,"column":2},"end":{"line":675,"column":3}},"241":{"start":{"line":667,"column":4},"end":{"line":667,"column":33}},"242":{"start":{"line":669,"column":4},"end":{"line":672,"column":5}},"243":{"start":{"line":670,"column":6},"end":{"line":670,"column":28}},"244":{"start":{"line":671,"column":6},"end":{"line":671,"column":69}},"245":{"start":{"line":674,"column":4},"end":{"line":674,"column":16}},"246":{"start":{"line":682,"column":2},"end":{"line":691,"column":3}},"247":{"start":{"line":683,"column":4},"end":{"line":683,"column":33}},"248":{"start":{"line":685,"column":4},"end":{"line":688,"column":5}},"249":{"start":{"line":686,"column":6},"end":{"line":686,"column":28}},"250":{"start":{"line":687,"column":6},"end":{"line":687,"column":71}},"251":{"start":{"line":690,"column":4},"end":{"line":690,"column":16}},"252":{"start":{"line":698,"column":2},"end":{"line":707,"column":3}},"253":{"start":{"line":699,"column":4},"end":{"line":699,"column":32}},"254":{"start":{"line":701,"column":4},"end":{"line":704,"column":5}},"255":{"start":{"line":702,"column":6},"end":{"line":702,"column":28}},"256":{"start":{"line":703,"column":6},"end":{"line":703,"column":70}},"257":{"start":{"line":706,"column":4},"end":{"line":706,"column":16}},"258":{"start":{"line":714,"column":2},"end":{"line":723,"column":3}},"259":{"start":{"line":715,"column":4},"end":{"line":715,"column":33}},"260":{"start":{"line":717,"column":4},"end":{"line":720,"column":5}},"261":{"start":{"line":718,"column":6},"end":{"line":718,"column":28}},"262":{"start":{"line":719,"column":6},"end":{"line":719,"column":71}},"263":{"start":{"line":722,"column":4},"end":{"line":722,"column":16}},"264":{"start":{"line":730,"column":2},"end":{"line":739,"column":3}},"265":{"start":{"line":731,"column":4},"end":{"line":731,"column":33}},"266":{"start":{"line":733,"column":4},"end":{"line":736,"column":5}},"267":{"start":{"line":734,"column":6},"end":{"line":734,"column":28}},"268":{"start":{"line":735,"column":6},"end":{"line":735,"column":73}},"269":{"start":{"line":738,"column":4},"end":{"line":738,"column":16}},"270":{"start":{"line":746,"column":2},"end":{"line":755,"column":3}},"271":{"start":{"line":747,"column":4},"end":{"line":747,"column":33}},"272":{"start":{"line":749,"column":4},"end":{"line":752,"column":5}},"273":{"start":{"line":750,"column":6},"end":{"line":750,"column":28}},"274":{"start":{"line":751,"column":6},"end":{"line":751,"column":72}},"275":{"start":{"line":754,"column":4},"end":{"line":754,"column":16}},"276":{"start":{"line":762,"column":2},"end":{"line":785,"column":3}},"277":{"start":{"line":763,"column":4},"end":{"line":763,"column":42}},"278":{"start":{"line":765,"column":4},"end":{"line":765,"column":24}},"279":{"start":{"line":767,"column":4},"end":{"line":774,"column":6}},"280":{"start":{"line":775,"column":4},"end":{"line":782,"column":5}},"281":{"start":{"line":776,"column":6},"end":{"line":776,"column":19}},"282":{"start":{"line":777,"column":6},"end":{"line":777,"column":27}},"283":{"start":{"line":779,"column":6},"end":{"line":779,"column":28}},"284":{"start":{"line":780,"column":6},"end":{"line":780,"column":36}},"285":{"start":{"line":781,"column":6},"end":{"line":781,"column":48}},"286":{"start":{"line":784,"column":4},"end":{"line":784,"column":16}},"287":{"start":{"line":792,"column":2},"end":{"line":813,"column":3}},"288":{"start":{"line":793,"column":4},"end":{"line":793,"column":42}},"289":{"start":{"line":795,"column":4},"end":{"line":795,"column":29}},"290":{"start":{"line":797,"column":4},"end":{"line":801,"column":6}},"291":{"start":{"line":803,"column":4},"end":{"line":810,"column":5}},"292":{"start":{"line":804,"column":6},"end":{"line":804,"column":19}},"293":{"start":{"line":805,"column":6},"end":{"line":805,"column":27}},"294":{"start":{"line":807,"column":6},"end":{"line":807,"column":28}},"295":{"start":{"line":808,"column":6},"end":{"line":808,"column":41}},"296":{"start":{"line":809,"column":6},"end":{"line":809,"column":48}},"297":{"start":{"line":812,"column":4},"end":{"line":812,"column":16}},"298":{"start":{"line":820,"column":2},"end":{"line":848,"column":3}},"299":{"start":{"line":821,"column":4},"end":{"line":821,"column":42}},"300":{"start":{"line":823,"column":4},"end":{"line":823,"column":24}},"301":{"start":{"line":825,"column":4},"end":{"line":828,"column":6}},"302":{"start":{"line":830,"column":4},"end":{"line":845,"column":5}},"303":{"start":{"line":831,"column":6},"end":{"line":831,"column":19}},"304":{"start":{"line":832,"column":6},"end":{"line":832,"column":27}},"305":{"start":{"line":834,"column":6},"end":{"line":834,"column":28}},"306":{"start":{"line":836,"column":6},"end":{"line":844,"column":7}},"307":{"start":{"line":838,"column":8},"end":{"line":838,"column":85}},"308":{"start":{"line":842,"column":8},"end":{"line":842,"column":38}},"309":{"start":{"line":843,"column":8},"end":{"line":843,"column":50}},"310":{"start":{"line":847,"column":4},"end":{"line":847,"column":16}},"311":{"start":{"line":855,"column":2},"end":{"line":896,"column":3}},"312":{"start":{"line":856,"column":4},"end":{"line":856,"column":26}},"313":{"start":{"line":858,"column":4},"end":{"line":865,"column":5}},"314":{"start":{"line":860,"column":6},"end":{"line":860,"column":45}},"315":{"start":{"line":864,"column":6},"end":{"line":864,"column":32}},"316":{"start":{"line":867,"column":4},"end":{"line":893,"column":5}},"317":{"start":{"line":869,"column":6},"end":{"line":869,"column":24}},"318":{"start":{"line":872,"column":6},"end":{"line":883,"column":7}},"319":{"start":{"line":873,"column":8},"end":{"line":873,"column":30}},"320":{"start":{"line":875,"column":8},"end":{"line":882,"column":9}},"321":{"start":{"line":877,"column":10},"end":{"line":877,"column":45}},"322":{"start":{"line":881,"column":10},"end":{"line":881,"column":42}},"323":{"start":{"line":885,"column":6},"end":{"line":892,"column":7}},"324":{"start":{"line":887,"column":8},"end":{"line":887,"column":62}},"325":{"start":{"line":891,"column":8},"end":{"line":891,"column":51}},"326":{"start":{"line":895,"column":4},"end":{"line":895,"column":16}},"327":{"start":{"line":903,"column":2},"end":{"line":922,"column":3}},"328":{"start":{"line":904,"column":4},"end":{"line":904,"column":42}},"329":{"start":{"line":906,"column":4},"end":{"line":906,"column":33}},"330":{"start":{"line":908,"column":4},"end":{"line":911,"column":6}},"331":{"start":{"line":912,"column":4},"end":{"line":919,"column":5}},"332":{"start":{"line":913,"column":6},"end":{"line":913,"column":19}},"333":{"start":{"line":914,"column":6},"end":{"line":914,"column":27}},"334":{"start":{"line":916,"column":6},"end":{"line":916,"column":28}},"335":{"start":{"line":917,"column":6},"end":{"line":917,"column":45}},"336":{"start":{"line":918,"column":6},"end":{"line":918,"column":48}},"337":{"start":{"line":921,"column":4},"end":{"line":921,"column":16}},"338":{"start":{"line":929,"column":2},"end":{"line":975,"column":3}},"339":{"start":{"line":930,"column":4},"end":{"line":930,"column":40}},"340":{"start":{"line":932,"column":4},"end":{"line":932,"column":24}},"341":{"start":{"line":933,"column":4},"end":{"line":933,"column":16}},"342":{"start":{"line":935,"column":4},"end":{"line":942,"column":6}},"343":{"start":{"line":944,"column":4},"end":{"line":972,"column":5}},"344":{"start":{"line":945,"column":6},"end":{"line":971,"column":7}},"345":{"start":{"line":947,"column":8},"end":{"line":947,"column":21}},"346":{"start":{"line":948,"column":8},"end":{"line":948,"column":29}},"347":{"start":{"line":950,"column":8},"end":{"line":950,"column":30}},"348":{"start":{"line":952,"column":8},"end":{"line":952,"column":28}},"349":{"start":{"line":953,"column":8},"end":{"line":953,"column":56}},"350":{"start":{"line":955,"column":11},"end":{"line":971,"column":7}},"351":{"start":{"line":966,"column":8},"end":{"line":966,"column":28}},"352":{"start":{"line":967,"column":8},"end":{"line":967,"column":82}},"353":{"start":{"line":970,"column":8},"end":{"line":970,"column":14}},"354":{"start":{"line":974,"column":4},"end":{"line":974,"column":16}},"355":{"start":{"line":982,"column":2},"end":{"line":1001,"column":3}},"356":{"start":{"line":983,"column":4},"end":{"line":983,"column":21}},"357":{"start":{"line":984,"column":4},"end":{"line":989,"column":13}},"358":{"start":{"line":991,"column":4},"end":{"line":998,"column":5}},"359":{"start":{"line":992,"column":6},"end":{"line":992,"column":19}},"360":{"start":{"line":994,"column":6},"end":{"line":994,"column":28}},"361":{"start":{"line":995,"column":6},"end":{"line":995,"column":30}},"362":{"start":{"line":997,"column":6},"end":{"line":997,"column":48}},"363":{"start":{"line":1000,"column":4},"end":{"line":1000,"column":22}},"364":{"start":{"line":1009,"column":2},"end":{"line":1024,"column":3}},"365":{"start":{"line":1010,"column":4},"end":{"line":1010,"column":31}},"366":{"start":{"line":1012,"column":4},"end":{"line":1012,"column":36}},"367":{"start":{"line":1014,"column":4},"end":{"line":1021,"column":5}},"368":{"start":{"line":1015,"column":6},"end":{"line":1015,"column":19}},"369":{"start":{"line":1016,"column":6},"end":{"line":1016,"column":44}},"370":{"start":{"line":1018,"column":6},"end":{"line":1018,"column":28}},"371":{"start":{"line":1019,"column":6},"end":{"line":1019,"column":36}},"372":{"start":{"line":1020,"column":6},"end":{"line":1020,"column":48}},"373":{"start":{"line":1023,"column":4},"end":{"line":1023,"column":16}},"374":{"start":{"line":1031,"column":2},"end":{"line":1053,"column":3}},"375":{"start":{"line":1032,"column":4},"end":{"line":1032,"column":42}},"376":{"start":{"line":1034,"column":4},"end":{"line":1034,"column":30}},"377":{"start":{"line":1036,"column":4},"end":{"line":1039,"column":6}},"378":{"start":{"line":1041,"column":4},"end":{"line":1050,"column":5}},"379":{"start":{"line":1042,"column":6},"end":{"line":1042,"column":19}},"380":{"start":{"line":1043,"column":6},"end":{"line":1043,"column":27}},"381":{"start":{"line":1045,"column":6},"end":{"line":1045,"column":17}},"382":{"start":{"line":1046,"column":6},"end":{"line":1046,"column":22}},"383":{"start":{"line":1048,"column":6},"end":{"line":1048,"column":48}},"384":{"start":{"line":1049,"column":6},"end":{"line":1049,"column":34}},"385":{"start":{"line":1052,"column":4},"end":{"line":1052,"column":16}},"386":{"start":{"line":1083,"column":2},"end":{"line":1121,"column":3}},"387":{"start":{"line":1084,"column":4},"end":{"line":1084,"column":29}},"388":{"start":{"line":1086,"column":4},"end":{"line":1118,"column":5}},"389":{"start":{"line":1087,"column":6},"end":{"line":1087,"column":35}},"390":{"start":{"line":1089,"column":6},"end":{"line":1089,"column":17}},"391":{"start":{"line":1092,"column":6},"end":{"line":1113,"column":7}},"392":{"start":{"line":1093,"column":8},"end":{"line":1093,"column":20}},"393":{"start":{"line":1095,"column":8},"end":{"line":1095,"column":21}},"394":{"start":{"line":1096,"column":8},"end":{"line":1096,"column":19}},"395":{"start":{"line":1098,"column":8},"end":{"line":1106,"column":9}},"396":{"start":{"line":1099,"column":10},"end":{"line":1099,"column":41}},"397":{"start":{"line":1102,"column":10},"end":{"line":1105,"column":11}},"398":{"start":{"line":1103,"column":12},"end":{"line":1103,"column":23}},"399":{"start":{"line":1104,"column":12},"end":{"line":1104,"column":43}},"400":{"start":{"line":1108,"column":8},"end":{"line":1110,"column":9}},"401":{"start":{"line":1109,"column":10},"end":{"line":1109,"column":60}},"402":{"start":{"line":1111,"column":8},"end":{"line":1111,"column":22}},"403":{"start":{"line":1112,"column":8},"end":{"line":1112,"column":19}},"404":{"start":{"line":1117,"column":6},"end":{"line":1117,"column":33}},"405":{"start":{"line":1120,"column":4},"end":{"line":1120,"column":25}},"406":{"start":{"line":1128,"column":2},"end":{"line":1144,"column":3}},"407":{"start":{"line":1129,"column":4},"end":{"line":1129,"column":19}},"408":{"start":{"line":1131,"column":4},"end":{"line":1141,"column":5}},"409":{"start":{"line":1133,"column":6},"end":{"line":1133,"column":19}},"410":{"start":{"line":1135,"column":6},"end":{"line":1135,"column":17}},"411":{"start":{"line":1138,"column":6},"end":{"line":1138,"column":34}},"412":{"start":{"line":1139,"column":6},"end":{"line":1139,"column":34}},"413":{"start":{"line":1140,"column":6},"end":{"line":1140,"column":18}},"414":{"start":{"line":1143,"column":4},"end":{"line":1143,"column":25}},"415":{"start":{"line":1159,"column":2},"end":{"line":1236,"column":3}},"416":{"start":{"line":1160,"column":4},"end":{"line":1160,"column":15}},"417":{"start":{"line":1162,"column":4},"end":{"line":1233,"column":5}},"418":{"start":{"line":1164,"column":6},"end":{"line":1164,"column":18}},"419":{"start":{"line":1166,"column":6},"end":{"line":1232,"column":7}},"420":{"start":{"line":1167,"column":8},"end":{"line":1195,"column":9}},"421":{"start":{"line":1169,"column":10},"end":{"line":1169,"column":23}},"422":{"start":{"line":1170,"column":10},"end":{"line":1170,"column":21}},"423":{"start":{"line":1172,"column":10},"end":{"line":1180,"column":11}},"424":{"start":{"line":1173,"column":12},"end":{"line":1173,"column":43}},"425":{"start":{"line":1176,"column":12},"end":{"line":1179,"column":13}},"426":{"start":{"line":1177,"column":14},"end":{"line":1177,"column":25}},"427":{"start":{"line":1178,"column":14},"end":{"line":1178,"column":45}},"428":{"start":{"line":1182,"column":10},"end":{"line":1184,"column":11}},"429":{"start":{"line":1183,"column":12},"end":{"line":1183,"column":62}},"430":{"start":{"line":1185,"column":10},"end":{"line":1185,"column":24}},"431":{"start":{"line":1186,"column":10},"end":{"line":1186,"column":21}},"432":{"start":{"line":1188,"column":10},"end":{"line":1188,"column":48}},"433":{"start":{"line":1194,"column":10},"end":{"line":1194,"column":22}},"434":{"start":{"line":1197,"column":11},"end":{"line":1232,"column":7}},"435":{"start":{"line":1199,"column":8},"end":{"line":1199,"column":21}},"436":{"start":{"line":1200,"column":8},"end":{"line":1200,"column":19}},"437":{"start":{"line":1202,"column":8},"end":{"line":1210,"column":9}},"438":{"start":{"line":1203,"column":10},"end":{"line":1203,"column":41}},"439":{"start":{"line":1206,"column":10},"end":{"line":1209,"column":11}},"440":{"start":{"line":1207,"column":12},"end":{"line":1207,"column":23}},"441":{"start":{"line":1208,"column":12},"end":{"line":1208,"column":43}},"442":{"start":{"line":1212,"column":8},"end":{"line":1214,"column":9}},"443":{"start":{"line":1213,"column":10},"end":{"line":1213,"column":60}},"444":{"start":{"line":1215,"column":8},"end":{"line":1215,"column":22}},"445":{"start":{"line":1216,"column":8},"end":{"line":1216,"column":19}},"446":{"start":{"line":1218,"column":8},"end":{"line":1218,"column":61}},"447":{"start":{"line":1222,"column":8},"end":{"line":1222,"column":19}},"448":{"start":{"line":1224,"column":8},"end":{"line":1226,"column":9}},"449":{"start":{"line":1225,"column":10},"end":{"line":1225,"column":70}},"450":{"start":{"line":1227,"column":8},"end":{"line":1227,"column":45}},"451":{"start":{"line":1228,"column":8},"end":{"line":1228,"column":19}},"452":{"start":{"line":1230,"column":8},"end":{"line":1230,"column":31}},"453":{"start":{"line":1231,"column":8},"end":{"line":1231,"column":74}},"454":{"start":{"line":1235,"column":4},"end":{"line":1235,"column":16}},"455":{"start":{"line":1244,"column":2},"end":{"line":1260,"column":3}},"456":{"start":{"line":1245,"column":4},"end":{"line":1245,"column":18}},"457":{"start":{"line":1247,"column":4},"end":{"line":1257,"column":5}},"458":{"start":{"line":1248,"column":6},"end":{"line":1248,"column":31}},"459":{"start":{"line":1251,"column":6},"end":{"line":1251,"column":45}},"460":{"start":{"line":1254,"column":6},"end":{"line":1254,"column":34}},"461":{"start":{"line":1256,"column":6},"end":{"line":1256,"column":18}},"462":{"start":{"line":1259,"column":4},"end":{"line":1259,"column":25}},"463":{"start":{"line":1266,"column":2},"end":{"line":1287,"column":3}},"464":{"start":{"line":1267,"column":4},"end":{"line":1267,"column":17}},"465":{"start":{"line":1269,"column":4},"end":{"line":1278,"column":5}},"466":{"start":{"line":1270,"column":6},"end":{"line":1274,"column":7}},"467":{"start":{"line":1272,"column":8},"end":{"line":1272,"column":17}},"468":{"start":{"line":1273,"column":8},"end":{"line":1273,"column":15}},"469":{"start":{"line":1276,"column":6},"end":{"line":1276,"column":15}},"470":{"start":{"line":1277,"column":6},"end":{"line":1277,"column":13}},"471":{"start":{"line":1280,"column":4},"end":{"line":1280,"column":15}},"472":{"start":{"line":1281,"column":4},"end":{"line":1283,"column":5}},"473":{"start":{"line":1282,"column":6},"end":{"line":1282,"column":58}},"474":{"start":{"line":1284,"column":4},"end":{"line":1284,"column":15}},"475":{"start":{"line":1286,"column":4},"end":{"line":1286,"column":15}},"476":{"start":{"line":1294,"column":2},"end":{"line":1358,"column":3}},"477":{"start":{"line":1295,"column":4},"end":{"line":1295,"column":34}},"478":{"start":{"line":1297,"column":4},"end":{"line":1355,"column":5}},"479":{"start":{"line":1299,"column":6},"end":{"line":1299,"column":19}},"480":{"start":{"line":1300,"column":6},"end":{"line":1300,"column":17}},"481":{"start":{"line":1302,"column":6},"end":{"line":1352,"column":7}},"482":{"start":{"line":1304,"column":8},"end":{"line":1304,"column":29}},"483":{"start":{"line":1306,"column":8},"end":{"line":1345,"column":9}},"484":{"start":{"line":1308,"column":10},"end":{"line":1308,"column":19}},"485":{"start":{"line":1309,"column":10},"end":{"line":1309,"column":25}},"486":{"start":{"line":1312,"column":10},"end":{"line":1317,"column":11}},"487":{"start":{"line":1313,"column":12},"end":{"line":1313,"column":23}},"488":{"start":{"line":1315,"column":12},"end":{"line":1315,"column":38}},"489":{"start":{"line":1316,"column":12},"end":{"line":1316,"column":19}},"490":{"start":{"line":1319,"column":10},"end":{"line":1321,"column":11}},"491":{"start":{"line":1320,"column":12},"end":{"line":1320,"column":64}},"492":{"start":{"line":1322,"column":10},"end":{"line":1322,"column":24}},"493":{"start":{"line":1323,"column":10},"end":{"line":1323,"column":21}},"494":{"start":{"line":1326,"column":10},"end":{"line":1326,"column":40}},"495":{"start":{"line":1327,"column":10},"end":{"line":1332,"column":11}},"496":{"start":{"line":1328,"column":12},"end":{"line":1331,"column":13}},"497":{"start":{"line":1329,"column":14},"end":{"line":1330,"column":70}},"498":{"start":{"line":1334,"column":10},"end":{"line":1334,"column":40}},"499":{"start":{"line":1338,"column":10},"end":{"line":1340,"column":11}},"500":{"start":{"line":1339,"column":12},"end":{"line":1339,"column":64}},"501":{"start":{"line":1341,"column":10},"end":{"line":1341,"column":24}},"502":{"start":{"line":1342,"column":10},"end":{"line":1342,"column":21}},"503":{"start":{"line":1344,"column":10},"end":{"line":1344,"column":22}},"504":{"start":{"line":1349,"column":8},"end":{"line":1349,"column":22}},"505":{"start":{"line":1350,"column":8},"end":{"line":1350,"column":19}},"506":{"start":{"line":1351,"column":8},"end":{"line":1351,"column":34}},"507":{"start":{"line":1354,"column":6},"end":{"line":1354,"column":35}},"508":{"start":{"line":1357,"column":4},"end":{"line":1357,"column":25}},"509":{"start":{"line":1364,"column":2},"end":{"line":1377,"column":3}},"510":{"start":{"line":1365,"column":4},"end":{"line":1365,"column":37}},"511":{"start":{"line":1366,"column":4},"end":{"line":1366,"column":16}},"512":{"start":{"line":1368,"column":4},"end":{"line":1374,"column":5}},"513":{"start":{"line":1369,"column":6},"end":{"line":1369,"column":17}},"514":{"start":{"line":1372,"column":6},"end":{"line":1372,"column":38}},"515":{"start":{"line":1373,"column":6},"end":{"line":1373,"column":12}},"516":{"start":{"line":1376,"column":4},"end":{"line":1376,"column":33}},"517":{"start":{"line":1384,"column":2},"end":{"line":1431,"column":3}},"518":{"start":{"line":1385,"column":4},"end":{"line":1428,"column":5}},"519":{"start":{"line":1386,"column":6},"end":{"line":1386,"column":14}},"520":{"start":{"line":1388,"column":6},"end":{"line":1388,"column":26}},"521":{"start":{"line":1389,"column":6},"end":{"line":1415,"column":27}},"522":{"start":{"line":1390,"column":8},"end":{"line":1390,"column":19}},"523":{"start":{"line":1392,"column":8},"end":{"line":1413,"column":9}},"524":{"start":{"line":1394,"column":10},"end":{"line":1403,"column":11}},"525":{"start":{"line":1395,"column":12},"end":{"line":1395,"column":37}},"526":{"start":{"line":1397,"column":15},"end":{"line":1403,"column":11}},"527":{"start":{"line":1398,"column":12},"end":{"line":1398,"column":24}},"528":{"start":{"line":1399,"column":12},"end":{"line":1399,"column":23}},"529":{"start":{"line":1402,"column":12},"end":{"line":1402,"column":79}},"530":{"start":{"line":1406,"column":10},"end":{"line":1408,"column":11}},"531":{"start":{"line":1407,"column":12},"end":{"line":1407,"column":73}},"532":{"start":{"line":1409,"column":10},"end":{"line":1409,"column":21}},"533":{"start":{"line":1412,"column":10},"end":{"line":1412,"column":46}},"534":{"start":{"line":1417,"column":6},"end":{"line":1419,"column":7}},"535":{"start":{"line":1418,"column":8},"end":{"line":1418,"column":84}},"536":{"start":{"line":1420,"column":6},"end":{"line":1420,"column":17}},"537":{"start":{"line":1422,"column":6},"end":{"line":1422,"column":44}},"538":{"start":{"line":1425,"column":6},"end":{"line":1425,"column":34}},"539":{"start":{"line":1427,"column":6},"end":{"line":1427,"column":18}},"540":{"start":{"line":1430,"column":4},"end":{"line":1430,"column":25}},"541":{"start":{"line":1438,"column":2},"end":{"line":1450,"column":3}},"542":{"start":{"line":1439,"column":4},"end":{"line":1439,"column":15}},"543":{"start":{"line":1441,"column":4},"end":{"line":1447,"column":5}},"544":{"start":{"line":1443,"column":6},"end":{"line":1443,"column":21}},"545":{"start":{"line":1444,"column":6},"end":{"line":1444,"column":17}},"546":{"start":{"line":1446,"column":6},"end":{"line":1446,"column":48}},"547":{"start":{"line":1449,"column":4},"end":{"line":1449,"column":30}},"548":{"start":{"line":1457,"column":2},"end":{"line":1480,"column":3}},"549":{"start":{"line":1458,"column":4},"end":{"line":1458,"column":13}},"550":{"start":{"line":1461,"column":4},"end":{"line":1477,"column":5}},"551":{"start":{"line":1463,"column":6},"end":{"line":1463,"column":19}},"552":{"start":{"line":1464,"column":6},"end":{"line":1464,"column":17}},"553":{"start":{"line":1466,"column":6},"end":{"line":1466,"column":31}},"554":{"start":{"line":1468,"column":6},"end":{"line":1470,"column":7}},"555":{"start":{"line":1469,"column":8},"end":{"line":1469,"column":58}},"556":{"start":{"line":1471,"column":6},"end":{"line":1471,"column":20}},"557":{"start":{"line":1472,"column":6},"end":{"line":1472,"column":17}},"558":{"start":{"line":1474,"column":6},"end":{"line":1474,"column":39}},"559":{"start":{"line":1475,"column":6},"end":{"line":1475,"column":34}},"560":{"start":{"line":1476,"column":6},"end":{"line":1476,"column":18}},"561":{"start":{"line":1479,"column":4},"end":{"line":1479,"column":22}},"562":{"start":{"line":1487,"column":2},"end":{"line":1494,"column":3}},"563":{"start":{"line":1488,"column":4},"end":{"line":1493,"column":5}},"564":{"start":{"line":1490,"column":6},"end":{"line":1490,"column":62}},"565":{"start":{"line":1492,"column":6},"end":{"line":1492,"column":48}},"566":{"start":{"line":1512,"column":2},"end":{"line":1514,"column":3}},"567":{"start":{"line":1513,"column":4},"end":{"line":1513,"column":36}},"568":{"start":{"line":1522,"column":2},"end":{"line":1528,"column":3}},"569":{"start":{"line":1523,"column":4},"end":{"line":1523,"column":18}},"570":{"start":{"line":1524,"column":4},"end":{"line":1524,"column":63}},"571":{"start":{"line":1525,"column":4},"end":{"line":1525,"column":22}},"572":{"start":{"line":1527,"column":4},"end":{"line":1527,"column":17}},"573":{"start":{"line":1536,"column":2},"end":{"line":1542,"column":3}},"574":{"start":{"line":1537,"column":4},"end":{"line":1537,"column":18}},"575":{"start":{"line":1538,"column":4},"end":{"line":1538,"column":63}},"576":{"start":{"line":1539,"column":4},"end":{"line":1539,"column":22}},"577":{"start":{"line":1541,"column":4},"end":{"line":1541,"column":17}},"578":{"start":{"line":1544,"column":2},"end":{"line":1544,"column":15}},"579":{"start":{"line":1547,"column":0},"end":{"line":1547,"column":23}},"580":{"start":{"line":1548,"column":0},"end":{"line":1548,"column":28}},"581":{"start":{"line":1549,"column":0},"end":{"line":1549,"column":26}}},"branchMap":{"1":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":4},"end":{"line":56,"column":4}},{"start":{"line":56,"column":4},"end":{"line":56,"column":4}}]},"2":{"line":56,"type":"binary-expr","locations":[{"start":{"line":56,"column":8},"end":{"line":56,"column":29}},{"start":{"line":56,"column":33},"end":{"line":56,"column":54}}]},"3":{"line":61,"type":"cond-expr","locations":[{"start":{"line":61,"column":47},"end":{"line":61,"column":60}},{"start":{"line":61,"column":63},"end":{"line":61,"column":65}}]},"4":{"line":61,"type":"binary-expr","locations":[{"start":{"line":61,"column":19},"end":{"line":61,"column":26}},{"start":{"line":61,"column":30},"end":{"line":61,"column":43}}]},"5":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":4},"end":{"line":63,"column":4}},{"start":{"line":63,"column":4},"end":{"line":63,"column":4}}]},"6":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":9},"end":{"line":68,"column":9}},{"start":{"line":68,"column":9},"end":{"line":68,"column":9}}]},"7":{"line":68,"type":"binary-expr","locations":[{"start":{"line":68,"column":13},"end":{"line":68,"column":32}},{"start":{"line":68,"column":36},"end":{"line":68,"column":63}}]},"8":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":8},"end":{"line":71,"column":8}},{"start":{"line":71,"column":8},"end":{"line":71,"column":8}}]},"9":{"line":224,"type":"if","locations":[{"start":{"line":224,"column":4},"end":{"line":224,"column":4}},{"start":{"line":224,"column":4},"end":{"line":224,"column":4}}]},"10":{"line":225,"type":"binary-expr","locations":[{"start":{"line":225,"column":13},"end":{"line":225,"column":22}},{"start":{"line":225,"column":26},"end":{"line":225,"column":33}}]},"11":{"line":232,"type":"if","locations":[{"start":{"line":232,"column":4},"end":{"line":232,"column":4}},{"start":{"line":232,"column":4},"end":{"line":232,"column":4}}]},"12":{"line":239,"type":"if","locations":[{"start":{"line":239,"column":4},"end":{"line":239,"column":4}},{"start":{"line":239,"column":4},"end":{"line":239,"column":4}}]},"13":{"line":239,"type":"binary-expr","locations":[{"start":{"line":239,"column":8},"end":{"line":239,"column":17}},{"start":{"line":239,"column":21},"end":{"line":239,"column":35}}]},"14":{"line":249,"type":"if","locations":[{"start":{"line":249,"column":4},"end":{"line":249,"column":4}},{"start":{"line":249,"column":4},"end":{"line":249,"column":4}}]},"15":{"line":249,"type":"binary-expr","locations":[{"start":{"line":249,"column":8},"end":{"line":249,"column":22}},{"start":{"line":249,"column":26},"end":{"line":249,"column":40}}]},"16":{"line":259,"type":"if","locations":[{"start":{"line":259,"column":4},"end":{"line":259,"column":4}},{"start":{"line":259,"column":4},"end":{"line":259,"column":4}}]},"17":{"line":259,"type":"binary-expr","locations":[{"start":{"line":259,"column":8},"end":{"line":259,"column":22}},{"start":{"line":259,"column":26},"end":{"line":259,"column":40}}]},"18":{"line":268,"type":"if","locations":[{"start":{"line":268,"column":4},"end":{"line":268,"column":4}},{"start":{"line":268,"column":4},"end":{"line":268,"column":4}}]},"19":{"line":276,"type":"if","locations":[{"start":{"line":276,"column":4},"end":{"line":276,"column":4}},{"start":{"line":276,"column":4},"end":{"line":276,"column":4}}]},"20":{"line":280,"type":"if","locations":[{"start":{"line":280,"column":6},"end":{"line":280,"column":6}},{"start":{"line":280,"column":6},"end":{"line":280,"column":6}}]},"21":{"line":284,"type":"if","locations":[{"start":{"line":284,"column":8},"end":{"line":284,"column":8}},{"start":{"line":284,"column":8},"end":{"line":284,"column":8}}]},"22":{"line":294,"type":"if","locations":[{"start":{"line":294,"column":8},"end":{"line":294,"column":8}},{"start":{"line":294,"column":8},"end":{"line":294,"column":8}}]},"23":{"line":306,"type":"if","locations":[{"start":{"line":306,"column":6},"end":{"line":306,"column":6}},{"start":{"line":306,"column":6},"end":{"line":306,"column":6}}]},"24":{"line":306,"type":"binary-expr","locations":[{"start":{"line":306,"column":10},"end":{"line":306,"column":18}},{"start":{"line":306,"column":22},"end":{"line":306,"column":30}}]},"25":{"line":307,"type":"if","locations":[{"start":{"line":307,"column":8},"end":{"line":307,"column":8}},{"start":{"line":307,"column":8},"end":{"line":307,"column":8}}]},"26":{"line":307,"type":"binary-expr","locations":[{"start":{"line":307,"column":12},"end":{"line":307,"column":29}},{"start":{"line":307,"column":33},"end":{"line":307,"column":42}},{"start":{"line":307,"column":46},"end":{"line":307,"column":55}}]},"27":{"line":311,"type":"if","locations":[{"start":{"line":311,"column":10},"end":{"line":311,"column":10}},{"start":{"line":311,"column":10},"end":{"line":311,"column":10}}]},"28":{"line":311,"type":"binary-expr","locations":[{"start":{"line":311,"column":14},"end":{"line":311,"column":22}},{"start":{"line":311,"column":26},"end":{"line":311,"column":34}}]},"29":{"line":317,"type":"if","locations":[{"start":{"line":317,"column":10},"end":{"line":317,"column":10}},{"start":{"line":317,"column":10},"end":{"line":317,"column":10}}]},"30":{"line":326,"type":"if","locations":[{"start":{"line":326,"column":10},"end":{"line":326,"column":10}},{"start":{"line":326,"column":10},"end":{"line":326,"column":10}}]},"31":{"line":330,"type":"if","locations":[{"start":{"line":330,"column":13},"end":{"line":330,"column":13}},{"start":{"line":330,"column":13},"end":{"line":330,"column":13}}]},"32":{"line":340,"type":"if","locations":[{"start":{"line":340,"column":4},"end":{"line":340,"column":4}},{"start":{"line":340,"column":4},"end":{"line":340,"column":4}}]},"33":{"line":341,"type":"binary-expr","locations":[{"start":{"line":341,"column":13},"end":{"line":341,"column":59}},{"start":{"line":341,"column":63},"end":{"line":341,"column":79}}]},"34":{"line":346,"type":"if","locations":[{"start":{"line":346,"column":6},"end":{"line":346,"column":6}},{"start":{"line":346,"column":6},"end":{"line":346,"column":6}}]},"35":{"line":409,"type":"binary-expr","locations":[{"start":{"line":409,"column":11},"end":{"line":409,"column":39}},{"start":{"line":410,"column":11},"end":{"line":410,"column":44}},{"start":{"line":411,"column":11},"end":{"line":411,"column":44}}]},"36":{"line":439,"type":"binary-expr","locations":[{"start":{"line":439,"column":11},"end":{"line":439,"column":34}},{"start":{"line":440,"column":8},"end":{"line":440,"column":37}},{"start":{"line":441,"column":8},"end":{"line":441,"column":188}}]},"37":{"line":452,"type":"binary-expr","locations":[{"start":{"line":452,"column":11},"end":{"line":452,"column":19}},{"start":{"line":452,"column":23},"end":{"line":452,"column":32}},{"start":{"line":452,"column":37},"end":{"line":452,"column":46}},{"start":{"line":452,"column":50},"end":{"line":452,"column":66}}]},"38":{"line":463,"type":"binary-expr","locations":[{"start":{"line":463,"column":11},"end":{"line":463,"column":19}},{"start":{"line":463,"column":23},"end":{"line":463,"column":36}},{"start":{"line":463,"column":40},"end":{"line":463,"column":53}},{"start":{"line":463,"column":57},"end":{"line":463,"column":70}}]},"39":{"line":472,"type":"binary-expr","locations":[{"start":{"line":472,"column":13},"end":{"line":472,"column":21}},{"start":{"line":472,"column":25},"end":{"line":472,"column":33}},{"start":{"line":472,"column":38},"end":{"line":472,"column":46}}]},"40":{"line":481,"type":"binary-expr","locations":[{"start":{"line":481,"column":12},"end":{"line":481,"column":20}},{"start":{"line":481,"column":24},"end":{"line":481,"column":32}}]},"41":{"line":499,"type":"if","locations":[{"start":{"line":499,"column":4},"end":{"line":499,"column":4}},{"start":{"line":499,"column":4},"end":{"line":499,"column":4}}]},"42":{"line":500,"type":"if","locations":[{"start":{"line":500,"column":6},"end":{"line":500,"column":6}},{"start":{"line":500,"column":6},"end":{"line":500,"column":6}}]},"43":{"line":526,"type":"if","locations":[{"start":{"line":526,"column":4},"end":{"line":526,"column":4}},{"start":{"line":526,"column":4},"end":{"line":526,"column":4}}]},"44":{"line":526,"type":"binary-expr","locations":[{"start":{"line":526,"column":8},"end":{"line":526,"column":19}},{"start":{"line":526,"column":23},"end":{"line":526,"column":36}},{"start":{"line":526,"column":40},"end":{"line":526,"column":52}}]},"45":{"line":532,"type":"binary-expr","locations":[{"start":{"line":532,"column":11},"end":{"line":532,"column":24}},{"start":{"line":532,"column":28},"end":{"line":532,"column":40}}]},"46":{"line":533,"type":"if","locations":[{"start":{"line":533,"column":6},"end":{"line":533,"column":6}},{"start":{"line":533,"column":6},"end":{"line":533,"column":6}}]},"47":{"line":533,"type":"binary-expr","locations":[{"start":{"line":533,"column":10},"end":{"line":533,"column":28}},{"start":{"line":533,"column":32},"end":{"line":533,"column":36}}]},"48":{"line":542,"type":"if","locations":[{"start":{"line":542,"column":6},"end":{"line":542,"column":6}},{"start":{"line":542,"column":6},"end":{"line":542,"column":6}}]},"49":{"line":542,"type":"binary-expr","locations":[{"start":{"line":542,"column":10},"end":{"line":542,"column":23}},{"start":{"line":542,"column":27},"end":{"line":542,"column":39}},{"start":{"line":542,"column":43},"end":{"line":542,"column":54}}]},"50":{"line":554,"type":"if","locations":[{"start":{"line":554,"column":4},"end":{"line":554,"column":4}},{"start":{"line":554,"column":4},"end":{"line":554,"column":4}}]},"51":{"line":558,"type":"if","locations":[{"start":{"line":558,"column":6},"end":{"line":558,"column":6}},{"start":{"line":558,"column":6},"end":{"line":558,"column":6}}]},"52":{"line":580,"type":"if","locations":[{"start":{"line":580,"column":4},"end":{"line":580,"column":4}},{"start":{"line":580,"column":4},"end":{"line":580,"column":4}}]},"53":{"line":581,"type":"if","locations":[{"start":{"line":581,"column":6},"end":{"line":581,"column":6}},{"start":{"line":581,"column":6},"end":{"line":581,"column":6}}]},"54":{"line":581,"type":"binary-expr","locations":[{"start":{"line":581,"column":10},"end":{"line":581,"column":14}},{"start":{"line":581,"column":18},"end":{"line":581,"column":35}}]},"55":{"line":588,"type":"if","locations":[{"start":{"line":588,"column":11},"end":{"line":588,"column":11}},{"start":{"line":588,"column":11},"end":{"line":588,"column":11}}]},"56":{"line":588,"type":"binary-expr","locations":[{"start":{"line":588,"column":15},"end":{"line":588,"column":19}},{"start":{"line":588,"column":23},"end":{"line":588,"column":42}}]},"57":{"line":594,"type":"if","locations":[{"start":{"line":594,"column":11},"end":{"line":594,"column":11}},{"start":{"line":594,"column":11},"end":{"line":594,"column":11}}]},"58":{"line":594,"type":"binary-expr","locations":[{"start":{"line":594,"column":15},"end":{"line":594,"column":19}},{"start":{"line":594,"column":23},"end":{"line":594,"column":42}}]},"59":{"line":601,"type":"if","locations":[{"start":{"line":601,"column":10},"end":{"line":601,"column":10}},{"start":{"line":601,"column":10},"end":{"line":601,"column":10}}]},"60":{"line":601,"type":"binary-expr","locations":[{"start":{"line":601,"column":14},"end":{"line":601,"column":17}},{"start":{"line":601,"column":21},"end":{"line":601,"column":37}}]},"61":{"line":609,"type":"if","locations":[{"start":{"line":609,"column":8},"end":{"line":609,"column":8}},{"start":{"line":609,"column":8},"end":{"line":609,"column":8}}]},"62":{"line":645,"type":"if","locations":[{"start":{"line":645,"column":6},"end":{"line":645,"column":6}},{"start":{"line":645,"column":6},"end":{"line":645,"column":6}}]},"63":{"line":836,"type":"if","locations":[{"start":{"line":836,"column":6},"end":{"line":836,"column":6}},{"start":{"line":836,"column":6},"end":{"line":836,"column":6}}]},"64":{"line":836,"type":"binary-expr","locations":[{"start":{"line":836,"column":10},"end":{"line":836,"column":23}},{"start":{"line":836,"column":27},"end":{"line":836,"column":39}}]},"65":{"line":858,"type":"if","locations":[{"start":{"line":858,"column":4},"end":{"line":858,"column":4}},{"start":{"line":858,"column":4},"end":{"line":858,"column":4}}]},"66":{"line":867,"type":"if","locations":[{"start":{"line":867,"column":4},"end":{"line":867,"column":4}},{"start":{"line":867,"column":4},"end":{"line":867,"column":4}}]},"67":{"line":867,"type":"binary-expr","locations":[{"start":{"line":867,"column":8},"end":{"line":867,"column":20}},{"start":{"line":867,"column":25},"end":{"line":867,"column":60}}]},"68":{"line":872,"type":"binary-expr","locations":[{"start":{"line":872,"column":13},"end":{"line":872,"column":25}},{"start":{"line":872,"column":29},"end":{"line":872,"column":46}}]},"69":{"line":875,"type":"if","locations":[{"start":{"line":875,"column":8},"end":{"line":875,"column":8}},{"start":{"line":875,"column":8},"end":{"line":875,"column":8}}]},"70":{"line":875,"type":"binary-expr","locations":[{"start":{"line":875,"column":12},"end":{"line":875,"column":24}},{"start":{"line":875,"column":28},"end":{"line":875,"column":40}},{"start":{"line":875,"column":44},"end":{"line":875,"column":56}},{"start":{"line":875,"column":60},"end":{"line":875,"column":71}}]},"71":{"line":885,"type":"if","locations":[{"start":{"line":885,"column":6},"end":{"line":885,"column":6}},{"start":{"line":885,"column":6},"end":{"line":885,"column":6}}]},"72":{"line":945,"type":"if","locations":[{"start":{"line":945,"column":6},"end":{"line":945,"column":6}},{"start":{"line":945,"column":6},"end":{"line":945,"column":6}}]},"73":{"line":955,"type":"if","locations":[{"start":{"line":955,"column":11},"end":{"line":955,"column":11}},{"start":{"line":955,"column":11},"end":{"line":955,"column":11}}]},"74":{"line":955,"type":"binary-expr","locations":[{"start":{"line":955,"column":16},"end":{"line":955,"column":46}},{"start":{"line":956,"column":11},"end":{"line":956,"column":24}},{"start":{"line":956,"column":29},"end":{"line":956,"column":33}},{"start":{"line":956,"column":37},"end":{"line":956,"column":56}},{"start":{"line":957,"column":11},"end":{"line":957,"column":41}},{"start":{"line":958,"column":14},"end":{"line":958,"column":34}},{"start":{"line":959,"column":15},"end":{"line":959,"column":35}},{"start":{"line":959,"column":39},"end":{"line":959,"column":54}},{"start":{"line":960,"column":11},"end":{"line":960,"column":23}}]},"75":{"line":991,"type":"if","locations":[{"start":{"line":991,"column":4},"end":{"line":991,"column":4}},{"start":{"line":991,"column":4},"end":{"line":991,"column":4}}]},"76":{"line":1014,"type":"if","locations":[{"start":{"line":1014,"column":4},"end":{"line":1014,"column":4}},{"start":{"line":1014,"column":4},"end":{"line":1014,"column":4}}]},"77":{"line":1014,"type":"binary-expr","locations":[{"start":{"line":1014,"column":8},"end":{"line":1014,"column":20}},{"start":{"line":1014,"column":24},"end":{"line":1014,"column":37}}]},"78":{"line":1016,"type":"cond-expr","locations":[{"start":{"line":1016,"column":27},"end":{"line":1016,"column":32}},{"start":{"line":1016,"column":35},"end":{"line":1016,"column":43}}]},"79":{"line":1086,"type":"if","locations":[{"start":{"line":1086,"column":4},"end":{"line":1086,"column":4}},{"start":{"line":1086,"column":4},"end":{"line":1086,"column":4}}]},"80":{"line":1086,"type":"binary-expr","locations":[{"start":{"line":1086,"column":8},"end":{"line":1086,"column":38}},{"start":{"line":1086,"column":42},"end":{"line":1086,"column":60}}]},"81":{"line":1092,"type":"if","locations":[{"start":{"line":1092,"column":6},"end":{"line":1092,"column":6}},{"start":{"line":1092,"column":6},"end":{"line":1092,"column":6}}]},"82":{"line":1098,"type":"if","locations":[{"start":{"line":1098,"column":8},"end":{"line":1098,"column":8}},{"start":{"line":1098,"column":8},"end":{"line":1098,"column":8}}]},"83":{"line":1108,"type":"if","locations":[{"start":{"line":1108,"column":8},"end":{"line":1108,"column":8}},{"start":{"line":1108,"column":8},"end":{"line":1108,"column":8}}]},"84":{"line":1131,"type":"if","locations":[{"start":{"line":1131,"column":4},"end":{"line":1131,"column":4}},{"start":{"line":1131,"column":4},"end":{"line":1131,"column":4}}]},"85":{"line":1131,"type":"binary-expr","locations":[{"start":{"line":1131,"column":8},"end":{"line":1131,"column":38}},{"start":{"line":1132,"column":9},"end":{"line":1132,"column":42}},{"start":{"line":1132,"column":46},"end":{"line":1132,"column":71}}]},"86":{"line":1162,"type":"binary-expr","locations":[{"start":{"line":1162,"column":12},"end":{"line":1162,"column":24}},{"start":{"line":1162,"column":28},"end":{"line":1162,"column":40}},{"start":{"line":1162,"column":44},"end":{"line":1162,"column":56}},{"start":{"line":1163,"column":9},"end":{"line":1163,"column":15}},{"start":{"line":1163,"column":19},"end":{"line":1163,"column":46}}]},"87":{"line":1166,"type":"if","locations":[{"start":{"line":1166,"column":6},"end":{"line":1166,"column":6}},{"start":{"line":1166,"column":6},"end":{"line":1166,"column":6}}]},"88":{"line":1167,"type":"if","locations":[{"start":{"line":1167,"column":8},"end":{"line":1167,"column":8}},{"start":{"line":1167,"column":8},"end":{"line":1167,"column":8}}]},"89":{"line":1167,"type":"binary-expr","locations":[{"start":{"line":1167,"column":12},"end":{"line":1167,"column":29}},{"start":{"line":1167,"column":33},"end":{"line":1167,"column":52}},{"start":{"line":1167,"column":56},"end":{"line":1167,"column":75}}]},"90":{"line":1172,"type":"if","locations":[{"start":{"line":1172,"column":10},"end":{"line":1172,"column":10}},{"start":{"line":1172,"column":10},"end":{"line":1172,"column":10}}]},"91":{"line":1182,"type":"if","locations":[{"start":{"line":1182,"column":10},"end":{"line":1182,"column":10}},{"start":{"line":1182,"column":10},"end":{"line":1182,"column":10}}]},"92":{"line":1197,"type":"if","locations":[{"start":{"line":1197,"column":11},"end":{"line":1197,"column":11}},{"start":{"line":1197,"column":11},"end":{"line":1197,"column":11}}]},"93":{"line":1202,"type":"if","locations":[{"start":{"line":1202,"column":8},"end":{"line":1202,"column":8}},{"start":{"line":1202,"column":8},"end":{"line":1202,"column":8}}]},"94":{"line":1212,"type":"if","locations":[{"start":{"line":1212,"column":8},"end":{"line":1212,"column":8}},{"start":{"line":1212,"column":8},"end":{"line":1212,"column":8}}]},"95":{"line":1224,"type":"if","locations":[{"start":{"line":1224,"column":8},"end":{"line":1224,"column":8}},{"start":{"line":1224,"column":8},"end":{"line":1224,"column":8}}]},"96":{"line":1247,"type":"if","locations":[{"start":{"line":1247,"column":4},"end":{"line":1247,"column":4}},{"start":{"line":1247,"column":4},"end":{"line":1247,"column":4}}]},"97":{"line":1269,"type":"binary-expr","locations":[{"start":{"line":1269,"column":11},"end":{"line":1269,"column":18}},{"start":{"line":1269,"column":22},"end":{"line":1269,"column":31}}]},"98":{"line":1270,"type":"if","locations":[{"start":{"line":1270,"column":6},"end":{"line":1270,"column":6}},{"start":{"line":1270,"column":6},"end":{"line":1270,"column":6}}]},"99":{"line":1281,"type":"if","locations":[{"start":{"line":1281,"column":4},"end":{"line":1281,"column":4}},{"start":{"line":1281,"column":4},"end":{"line":1281,"column":4}}]},"100":{"line":1297,"type":"if","locations":[{"start":{"line":1297,"column":4},"end":{"line":1297,"column":4}},{"start":{"line":1297,"column":4},"end":{"line":1297,"column":4}}]},"101":{"line":1302,"type":"if","locations":[{"start":{"line":1302,"column":6},"end":{"line":1302,"column":6}},{"start":{"line":1302,"column":6},"end":{"line":1302,"column":6}}]},"102":{"line":1306,"type":"if","locations":[{"start":{"line":1306,"column":8},"end":{"line":1306,"column":8}},{"start":{"line":1306,"column":8},"end":{"line":1306,"column":8}}]},"103":{"line":1319,"type":"if","locations":[{"start":{"line":1319,"column":10},"end":{"line":1319,"column":10}},{"start":{"line":1319,"column":10},"end":{"line":1319,"column":10}}]},"104":{"line":1328,"type":"if","locations":[{"start":{"line":1328,"column":12},"end":{"line":1328,"column":12}},{"start":{"line":1328,"column":12},"end":{"line":1328,"column":12}}]},"105":{"line":1338,"type":"if","locations":[{"start":{"line":1338,"column":10},"end":{"line":1338,"column":10}},{"start":{"line":1338,"column":10},"end":{"line":1338,"column":10}}]},"106":{"line":1385,"type":"if","locations":[{"start":{"line":1385,"column":4},"end":{"line":1385,"column":4}},{"start":{"line":1385,"column":4},"end":{"line":1385,"column":4}}]},"107":{"line":1392,"type":"if","locations":[{"start":{"line":1392,"column":8},"end":{"line":1392,"column":8}},{"start":{"line":1392,"column":8},"end":{"line":1392,"column":8}}]},"108":{"line":1394,"type":"if","locations":[{"start":{"line":1394,"column":10},"end":{"line":1394,"column":10}},{"start":{"line":1394,"column":10},"end":{"line":1394,"column":10}}]},"109":{"line":1397,"type":"if","locations":[{"start":{"line":1397,"column":15},"end":{"line":1397,"column":15}},{"start":{"line":1397,"column":15},"end":{"line":1397,"column":15}}]},"110":{"line":1406,"type":"if","locations":[{"start":{"line":1406,"column":10},"end":{"line":1406,"column":10}},{"start":{"line":1406,"column":10},"end":{"line":1406,"column":10}}]},"111":{"line":1417,"type":"if","locations":[{"start":{"line":1417,"column":6},"end":{"line":1417,"column":6}},{"start":{"line":1417,"column":6},"end":{"line":1417,"column":6}}]},"112":{"line":1441,"type":"if","locations":[{"start":{"line":1441,"column":4},"end":{"line":1441,"column":4}},{"start":{"line":1441,"column":4},"end":{"line":1441,"column":4}}]},"113":{"line":1461,"type":"if","locations":[{"start":{"line":1461,"column":4},"end":{"line":1461,"column":4}},{"start":{"line":1461,"column":4},"end":{"line":1461,"column":4}}]},"114":{"line":1468,"type":"if","locations":[{"start":{"line":1468,"column":6},"end":{"line":1468,"column":6}},{"start":{"line":1468,"column":6},"end":{"line":1468,"column":6}}]},"115":{"line":1488,"type":"if","locations":[{"start":{"line":1488,"column":4},"end":{"line":1488,"column":4}},{"start":{"line":1488,"column":4},"end":{"line":1488,"column":4}}]}},"code":["'use strict';","","var ArgumentsError = require('../error/ArgumentsError');","var deepMap = require('../utils/collection/deepMap');","","function factory (type, config, load, typed) {","  var AccessorNode            = load(require('./node/AccessorNode'));","  var ArrayNode               = load(require('./node/ArrayNode'));","  var AssignmentNode          = load(require('./node/AssignmentNode'));","  var BlockNode               = load(require('./node/BlockNode'));","  var ConditionalNode         = load(require('./node/ConditionalNode'));","  var ConstantNode            = load(require('./node/ConstantNode'));","  var FunctionAssignmentNode  = load(require('./node/FunctionAssignmentNode'));","  var IndexNode               = load(require('./node/IndexNode'));","  var ObjectNode              = load(require('./node/ObjectNode'));","  var OperatorNode            = load(require('./node/OperatorNode'));","  var ParenthesisNode         = load(require('./node/ParenthesisNode'));","  var FunctionNode            = load(require('./node/FunctionNode'));","  var RangeNode               = load(require('./node/RangeNode'));","  var SymbolNode              = load(require('./node/SymbolNode'));","","","  /**","   * Parse an expression. Returns a node tree, which can be evaluated by","   * invoking node.eval();","   *","   * Syntax:","   *","   *     parse(expr)","   *     parse(expr, options)","   *     parse([expr1, expr2, expr3, ...])","   *     parse([expr1, expr2, expr3, ...], options)","   *","   * Example:","   *","   *     var node = parse('sqrt(3^2 + 4^2)');","   *     node.compile(math).eval(); // 5","   *","   *     var scope = {a:3, b:4}","   *     var node = parse('a * b'); // 12","   *     var code = node.compile(math);","   *     code.eval(scope); // 12","   *     scope.a = 5;","   *     code.eval(scope); // 20","   *","   *     var nodes = math.parse(['a = 3', 'b = 4', 'a * b']);","   *     nodes[2].compile(math).eval(); // 12","   *","   * @param {string | string[] | Matrix} expr","   * @param {{nodes: Object<string, Node>}} [options]  Available options:","   *                                                   - `nodes` a set of custom nodes","   * @return {Node | Node[]} node","   * @throws {Error}","   */","  function parse (expr, options) {","    if (arguments.length != 1 && arguments.length != 2) {","      throw new ArgumentsError('parse', arguments.length, 1, 2);","    }","","    // pass extra nodes","    extra_nodes = (options && options.nodes) ? options.nodes : {};","","    if (typeof expr === 'string') {","      // parse a single expression","      expression = expr;","      return parseStart();","    }","    else if (Array.isArray(expr) || expr instanceof type.Matrix) {","      // parse an array or matrix with expressions","      return deepMap(expr, function (elem) {","        if (typeof elem !== 'string') throw new TypeError('String expected');","","        expression = elem;","        return parseStart();","      });","    }","    else {","      // oops","      throw new TypeError('String or matrix expected');","    }","  }","","  // token types enumeration","  var TOKENTYPE = {","    NULL : 0,","    DELIMITER : 1,","    NUMBER : 2,","    SYMBOL : 3,","    UNKNOWN : 4","  };","","  // map with all delimiters","  var DELIMITERS = {","    ',': true,","    '(': true,","    ')': true,","    '[': true,","    ']': true,","    '{': true,","    '}': true,","    '\\\"': true,","    ';': true,","","    '+': true,","    '-': true,","    '*': true,","    '.*': true,","    '/': true,","    './': true,","    '%': true,","    '^': true,","    '.^': true,","    '~': true,","    '!': true,","    '&': true,","    '|': true,","    '^|': true,","    '\\'': true,","    '=': true,","    ':': true,","    '?': true,","","    '==': true,","    '!=': true,","    '<': true,","    '>': true,","    '<=': true,","    '>=': true,","","    '<<': true,","    '>>': true,","    '>>>': true","  };","","  // map with all named delimiters","  var NAMED_DELIMITERS = {","    'mod': true,","    'to': true,","    'in': true,","    'and': true,","    'xor': true,","    'or': true,","    'not': true","  };","","  var extra_nodes = {};             // current extra nodes","  var expression = '';              // current expression","  var comment = '';                 // last parsed comment","  var index = 0;                    // current index in expr","  var c = '';                       // current token character in expr","  var token = '';                   // current token","  var token_type = TOKENTYPE.NULL;  // type of the token","  var nesting_level = 0;            // level of nesting inside parameters, used to ignore newline characters","  var conditional_level = null;     // when a conditional is being parsed, the level of the conditional is stored here","","  /**","   * Get the first character from the expression.","   * The character is stored into the char c. If the end of the expression is","   * reached, the function puts an empty string in c.","   * @private","   */","  function first() {","    index = 0;","    c = expression.charAt(0);","    nesting_level = 0;","    conditional_level = null;","  }","","  /**","   * Get the next character from the expression.","   * The character is stored into the char c. If the end of the expression is","   * reached, the function puts an empty string in c.","   * @private","   */","  function next() {","    index++;","    c = expression.charAt(index);","  }","","  /**","   * Preview the previous character from the expression.","   * @return {string} cNext","   * @private","   */","  function prevPreview() {","    return expression.charAt(index - 1);","  }","","  /**","   * Preview the next character from the expression.","   * @return {string} cNext","   * @private","   */","  function nextPreview() {","    return expression.charAt(index + 1);","  }","","  /**","   * Preview the second next character from the expression.","   * @return {string} cNext","   * @private","   */","  function nextNextPreview() {","    return expression.charAt(index + 2);","  }","","  /**","   * Get next token in the current string expr.","   * The token and token type are available as token and token_type","   * @private","   */","  function getToken() {","    token_type = TOKENTYPE.NULL;","    token = '';","    comment = '';","","    // skip over whitespaces","    // space, tab, and newline when inside parameters","    while (parse.isWhitespace(c, nesting_level)) {","      next();","    }","","    // skip comment","    if (c == '#') {","      while (c != '\\n' && c != '') {","        comment += c;","        next();","      }","    }","","    // check for end of expression","    if (c == '') {","      // token is still empty","      token_type = TOKENTYPE.DELIMITER;","      return;","    }","","    // check for new line character","    if (c == '\\n' && !nesting_level) {","      token_type = TOKENTYPE.DELIMITER;","      token = c;","      next();","      return;","    }","","    // check for delimiters consisting of 3 characters","    var c2 = c + nextPreview();","    var c3 = c2 + nextNextPreview();","    if (c3.length == 3 && DELIMITERS[c3]) {","      token_type = TOKENTYPE.DELIMITER;","      token = c3;","      next();","      next();","      next();","      return;","    }","","    // check for delimiters consisting of 2 characters","    if (c2.length == 2 && DELIMITERS[c2]) {","      token_type = TOKENTYPE.DELIMITER;","      token = c2;","      next();","      next();","      return;","    }","","    // check for delimiters consisting of 1 character","    if (DELIMITERS[c]) {","      token_type = TOKENTYPE.DELIMITER;","      token = c;","      next();","      return;","    }","","    // check for a number","    if (parse.isDigitDot(c)) {","      token_type = TOKENTYPE.NUMBER;","","      // get number, can have a single dot","      if (c == '.') {","        token += c;","        next();","","        if (!parse.isDigit(c)) {","          // this is no number, it is just a dot (can be dot notation)","          token_type = TOKENTYPE.DELIMITER;","        }","      }","      else {","        while (parse.isDigit(c)) {","          token += c;","          next();","        }","        if (parse.isDecimalMark(c, nextPreview())) {","          token += c;","          next();","        }","      }","      while (parse.isDigit(c)) {","        token += c;","        next();","      }","","      // check for exponential notation like \"2.3e-4\", \"1.23e50\" or \"2e+4\"","      c2 = nextPreview();","      if (c == 'E' || c == 'e') {","        if (parse.isDigit(c2) || c2 == '-' || c2 == '+') {","          token += c;","          next();","","          if (c == '+' || c == '-') {","            token += c;","            next();","          }","","          // Scientific notation MUST be followed by an exponent","          if (!parse.isDigit(c)) {","            throw createSyntaxError('Digit expected, got \"' + c + '\"');","          }","","          while (parse.isDigit(c)) {","            token += c;","            next();","          }","","          if (parse.isDecimalMark(c, nextPreview())) {","            throw createSyntaxError('Digit expected, got \"' + c + '\"');","          }","        }","        else if (c2 == '.') {","          next();","          throw createSyntaxError('Digit expected, got \"' + c + '\"');","        }","      }","","      return;","    }","","    // check for variables, functions, named operators","    if (parse.isAlpha(c, prevPreview(), nextPreview())) {","      while (parse.isAlpha(c, prevPreview(), nextPreview()) || parse.isDigit(c)) {","        token += c;","        next();","      }","","      if (NAMED_DELIMITERS.hasOwnProperty(token)) {","        token_type = TOKENTYPE.DELIMITER;","      }","      else {","        token_type = TOKENTYPE.SYMBOL;","      }","","      return;","    }","","    // something unknown is found, wrong characters -> a syntax error","    token_type = TOKENTYPE.UNKNOWN;","    while (c != '') {","      token += c;","      next();","    }","    throw createSyntaxError('Syntax error in part \"' + token + '\"');","  }","","  /**","   * Get next token and skip newline tokens","   */","  function getTokenSkipNewline () {","    do {","      getToken();","    }","    while (token == '\\n');","  }","","  /**","   * Open parameters.","   * New line characters will be ignored until closeParams() is called","   */","  function openParams() {","    nesting_level++;","  }","","  /**","   * Close parameters.","   * New line characters will no longer be ignored","   */","  function closeParams() {","    nesting_level--;","  }","","  /**","   * Checks whether the current character `c` is a valid alpha character:","   *","   * - A latin letter (upper or lower case) Ascii: a-z, A-Z","   * - An underscore                         Ascii: _","   * - A latin letter with accents          Unicode: \\u00C0 - \\u02AF","   * - A greek letter                       Unicode: \\u0370 - \\u03FF","   * - A mathematical alphanumeric symbol   Unicode: \\u{1D400} - \\u{1D7FF} excluding invalid code points","   *","   * The previous and next characters are needed to determine whether","   * this character is part of a unicode surrogate pair.","   *","   * @param {string} c      Current character in the expression","   * @param {string} cPrev  Previous character","   * @param {string} cNext  Next character","   * @return {boolean}","   */","  parse.isAlpha = function isAlpha (c, cPrev, cNext) {","    return parse.isValidLatinOrGreek(c)","        || parse.isValidMathSymbol(c, cNext)","        || parse.isValidMathSymbol(cPrev, c);","  };","","  /**","   * Test whether a character is a valid latin, greek, or letter-like character","   * @param {string} c","   * @return {boolean}","   */","  parse.isValidLatinOrGreek = function isValidLatinOrGreek (c) {","    return /^[a-zA-Z_\\u00C0-\\u02AF\\u0370-\\u03FF\\u2100-\\u214F]$/.test(c);","  };","","  /**","   * Test whether two given 16 bit characters form a surrogate pair of a","   * unicode math symbol.","   *","   * http://unicode-table.com/en/","   * http://www.wikiwand.com/en/Mathematical_operators_and_symbols_in_Unicode","   *","   * Note: In ES6 will be unicode aware:","   * http://stackoverflow.com/questions/280712/javascript-unicode-regexes","   * https://mathiasbynens.be/notes/es6-unicode-regex","   *","   * @param {string} high","   * @param {string} low","   * @return {boolean}","   */","  parse.isValidMathSymbol = function isValidMathSymbol (high, low) {","    return /^[\\uD835]$/.test(high) &&","        /^[\\uDC00-\\uDFFF]$/.test(low) &&","        /^[^\\uDC55\\uDC9D\\uDCA0\\uDCA1\\uDCA3\\uDCA4\\uDCA7\\uDCA8\\uDCAD\\uDCBA\\uDCBC\\uDCC4\\uDD06\\uDD0B\\uDD0C\\uDD15\\uDD1D\\uDD3A\\uDD3F\\uDD45\\uDD47-\\uDD49\\uDD51\\uDEA6\\uDEA7\\uDFCC\\uDFCD]$/.test(low);","  };","","  /**","   * Check whether given character c is a white space character: space, tab, or enter","   * @param {string} c","   * @param {number} nestingLevel","   * @return {boolean}","   */","  parse.isWhitespace = function isWhitespace (c, nestingLevel) {","    // TODO: also take '\\r' carriage return as newline? Or does that give problems on mac?","    return c == ' ' || c == '\\t' || (c == '\\n' && nestingLevel > 0);","  };","","  /**","   * Test whether the character c is a decimal mark (dot).","   * This is the case when it's not the start of a delimiter '.*', './', or '.^'","   * @param {string} c","   * @param {string} cNext","   * @return {boolean}","   */","  parse.isDecimalMark = function isDecimalMark (c, cNext) {","    return c == '.' && cNext !== '/' && cNext !== '*' && cNext !== '^';","  };","","  /**","   * checks if the given char c is a digit or dot","   * @param {string} c   a string with one character","   * @return {boolean}","   */","  parse.isDigitDot = function isDigitDot (c) {","    return ((c >= '0' && c <= '9') || c == '.');","  };","","  /**","   * checks if the given char c is a digit","   * @param {string} c   a string with one character","   * @return {boolean}","   */","  parse.isDigit = function isDigit (c) {","    return (c >= '0' && c <= '9');","  };","","  /**","   * Start of the parse levels below, in order of precedence","   * @return {Node} node","   * @private","   */","  function parseStart () {","    // get the first character in expression","    first();","","    getToken();","","    var node = parseBlock();","","    // check for garbage at the end of the expression","    // an expression ends with a empty character '' and token_type DELIMITER","    if (token != '') {","      if (token_type == TOKENTYPE.DELIMITER) {","        // user entered a not existing operator like \"//\"","","        // TODO: give hints for aliases, for example with \"<>\" give as hint \" did you mean != ?\"","        throw createError('Unexpected operator ' + token);","      }","      else {","        throw createSyntaxError('Unexpected part \"' + token + '\"');","      }","    }","","    return node;","  }","","  /**","   * Parse a block with expressions. Expressions can be separated by a newline","   * character '\\n', or by a semicolon ';'. In case of a semicolon, no output","   * of the preceding line is returned.","   * @return {Node} node","   * @private","   */","  function parseBlock () {","    var node;","    var blocks = [];","    var visible;","","    if (token != '' && token != '\\n' && token != ';') {","      node = parseAssignment();","      node.comment = comment;","    }","","    // TODO: simplify this loop","    while (token == '\\n' || token == ';') {","      if (blocks.length == 0 && node) {","        visible = (token != ';');","        blocks.push({","          node: node,","          visible: visible","        });","      }","","      getToken();","      if (token != '\\n' && token != ';' && token != '') {","        node = parseAssignment();","        node.comment = comment;","","        visible = (token != ';');","        blocks.push({","          node: node,","          visible: visible","        });","      }","    }","","    if (blocks.length > 0) {","      return new BlockNode(blocks);","    }","    else {","      if (!node) {","        node = new ConstantNode('undefined', 'undefined');","        node.comment = comment;","      }","","      return node","    }","  }","","  /**","   * Assignment of a function or variable,","   * - can be a variable like 'a=2.3'","   * - or a updating an existing variable like 'matrix(2,3:5)=[6,7,8]'","   * - defining a function like 'f(x) = x^2'","   * @return {Node} node","   * @private","   */","  function parseAssignment () {","    var name, args, value, valid;","","    var node = parseConditional();","","    if (token == '=') {","      if (node && node.isSymbolNode) {","        // parse a variable assignment like 'a = 2/3'","        name = node.name;","        getTokenSkipNewline();","        value = parseAssignment();","        return new AssignmentNode(new SymbolNode(name), value);","      }","      else if (node && node.isAccessorNode) {","        // parse a matrix subset assignment like 'A[1,2] = 4'","        getTokenSkipNewline();","        value = parseAssignment();","        return new AssignmentNode(node.object, node.index, value);","      }","      else if (node && node.isFunctionNode) {","        // parse function assignment like 'f(x) = x^2'","        valid = true;","        args = [];","","        name = node.name;","        node.args.forEach(function (arg, index) {","          if (arg && arg.isSymbolNode) {","            args[index] = arg.name;","          }","          else {","            valid = false;","          }","        });","","        if (valid) {","          getTokenSkipNewline();","          value = parseAssignment();","          return new FunctionAssignmentNode(name, args, value);","        }","      }","","      throw createSyntaxError('Invalid left hand side of assignment operator =');","    }","","    return node;","  }","","  /**","   * conditional operation","   *","   *     condition ? truePart : falsePart","   *","   * Note: conditional operator is right-associative","   *","   * @return {Node} node","   * @private","   */","  function parseConditional () {","    var node = parseLogicalOr();","","    while (token == '?') {","      // set a conditional level, the range operator will be ignored as long","      // as conditional_level == nesting_level.","      var prev = conditional_level;","      conditional_level = nesting_level;","      getTokenSkipNewline();","","      var condition = node;","      var trueExpr = parseAssignment();","","      if (token != ':') throw createSyntaxError('False part of conditional expression expected');","","      conditional_level = null;","      getTokenSkipNewline();","","      var falseExpr = parseAssignment(); // Note: check for conditional operator again, right associativity","","      node = new ConditionalNode(condition, trueExpr, falseExpr);","","      // restore the previous conditional level","      conditional_level = prev;","    }","","    return node;","  }","","  /**","   * logical or, 'x or y'","   * @return {Node} node","   * @private","   */","  function parseLogicalOr() {","    var node = parseLogicalXor();","","    while (token == 'or') {","      getTokenSkipNewline();","      node = new OperatorNode('or', 'or', [node, parseLogicalXor()]);","    }","","    return node;","  }","","  /**","   * logical exclusive or, 'x xor y'","   * @return {Node} node","   * @private","   */","  function parseLogicalXor() {","    var node = parseLogicalAnd();","","    while (token == 'xor') {","      getTokenSkipNewline();","      node = new OperatorNode('xor', 'xor', [node, parseLogicalAnd()]);","    }","","    return node;","  }","","  /**","   * logical and, 'x and y'","   * @return {Node} node","   * @private","   */","  function parseLogicalAnd() {","    var node = parseBitwiseOr();","","    while (token == 'and') {","      getTokenSkipNewline();","      node = new OperatorNode('and', 'and', [node, parseBitwiseOr()]);","    }","","    return node;","  }","","  /**","   * bitwise or, 'x | y'","   * @return {Node} node","   * @private","   */","  function parseBitwiseOr() {","    var node = parseBitwiseXor();","","    while (token == '|') {","      getTokenSkipNewline();","      node = new OperatorNode('|', 'bitOr', [node, parseBitwiseXor()]);","    }","","    return node;","  }","","  /**","   * bitwise exclusive or (xor), 'x ^| y'","   * @return {Node} node","   * @private","   */","  function parseBitwiseXor() {","    var node = parseBitwiseAnd();","","    while (token == '^|') {","      getTokenSkipNewline();","      node = new OperatorNode('^|', 'bitXor', [node, parseBitwiseAnd()]);","    }","","    return node;","  }","","  /**","   * bitwise and, 'x & y'","   * @return {Node} node","   * @private","   */","  function parseBitwiseAnd () {","    var node = parseRelational();","","    while (token == '&') {","      getTokenSkipNewline();","      node = new OperatorNode('&', 'bitAnd', [node, parseRelational()]);","    }","","    return node;","  }","","  /**","   * relational operators","   * @return {Node} node","   * @private","   */","  function parseRelational () {","    var node, operators, name, fn, params;","","    node = parseShift();","","    operators = {","      '==': 'equal',","      '!=': 'unequal',","      '<': 'smaller',","      '>': 'larger',","      '<=': 'smallerEq',","      '>=': 'largerEq'","    };","    while (token in operators) {","      name = token;","      fn = operators[name];","","      getTokenSkipNewline();","      params = [node, parseShift()];","      node = new OperatorNode(name, fn, params);","    }","","    return node;","  }","","  /**","   * Bitwise left shift, bitwise right arithmetic shift, bitwise right logical shift","   * @return {Node} node","   * @private","   */","  function parseShift () {","    var node, operators, name, fn, params;","","    node = parseConversion();","","    operators = {","      '<<' : 'leftShift',","      '>>' : 'rightArithShift',","      '>>>' : 'rightLogShift'","    };","","    while (token in operators) {","      name = token;","      fn = operators[name];","","      getTokenSkipNewline();","      params = [node, parseConversion()];","      node = new OperatorNode(name, fn, params);","    }","","    return node;","  }","","  /**","   * conversion operators 'to' and 'in'","   * @return {Node} node","   * @private","   */","  function parseConversion () {","    var node, operators, name, fn, params;","","    node = parseRange();","","    operators = {","      'to' : 'to',","      'in' : 'to'   // alias of 'to'","    };","","    while (token in operators) {","      name = token;","      fn = operators[name];","","      getTokenSkipNewline();","      ","      if (name === 'in' && token === '') {","        // end of expression -> this is the unit 'in' ('inch')","        node = new OperatorNode('*', 'multiply', [node, new SymbolNode('in')], true);","      }","      else {","        // operator 'a to b' or 'a in b'","        params = [node, parseRange()];","        node = new OperatorNode(name, fn, params);","      }","    }","","    return node;","  }","","  /**","   * parse range, \"start:end\", \"start:step:end\", \":\", \"start:\", \":end\", etc","   * @return {Node} node","   * @private","   */","  function parseRange () {","    var node, params = [];","","    if (token == ':') {","      // implicit start=1 (one-based)","      node = new ConstantNode('1', 'number');","    }","    else {","      // explicit start","      node = parseAddSubtract();","    }","","    if (token == ':' && (conditional_level !== nesting_level)) {","      // we ignore the range operator when a conditional operator is being processed on the same level","      params.push(node);","","      // parse step and end","      while (token == ':' && params.length < 3) {","        getTokenSkipNewline();","","        if (token == ')' || token == ']' || token == ',' || token == '') {","          // implicit end","          params.push(new SymbolNode('end'));","        }","        else {","          // explicit end","          params.push(parseAddSubtract());","        }","      }","","      if (params.length == 3) {","        // params = [start, step, end]","        node = new RangeNode(params[0], params[2], params[1]); // start, end, step","      }","      else { // length == 2","        // params = [start, end]","        node = new RangeNode(params[0], params[1]); // start, end","      }","    }","","    return node;","  }","","  /**","   * add or subtract","   * @return {Node} node","   * @private","   */","  function parseAddSubtract ()  {","    var node, operators, name, fn, params;","","    node = parseMultiplyDivide();","","    operators = {","      '+': 'add',","      '-': 'subtract'","    };","    while (token in operators) {","      name = token;","      fn = operators[name];","","      getTokenSkipNewline();","      params = [node, parseMultiplyDivide()];","      node = new OperatorNode(name, fn, params);","    }","","    return node;","  }","","  /**","   * multiply, divide, modulus","   * @return {Node} node","   * @private","   */","  function parseMultiplyDivide () {","    var node, last, operators, name, fn;","","    node = parseUnary();","    last = node;","","    operators = {","      '*': 'multiply',","      '.*': 'dotMultiply',","      '/': 'divide',","      './': 'dotDivide',","      '%': 'mod',","      'mod': 'mod'","    };","","    while (true) {","      if (token in operators) {","        // explicit operators","        name = token;","        fn = operators[name];","","        getTokenSkipNewline();","","        last = parseUnary();","        node = new OperatorNode(name, fn, [node, last]);","      }","      else if ((token_type == TOKENTYPE.SYMBOL) ||","          (token == 'in' && (node && node.isConstantNode)) ||","          (token_type == TOKENTYPE.NUMBER &&","              !last.isConstantNode &&","              (!last.isOperatorNode || last.op === '!')) ||","          (token == '(')) {","        // parse implicit multiplication","        //","        // symbol:      implicit multiplication like '2a', '(2+3)a', 'a b'","        // number:      implicit multiplication like '(2+3)2'","        // parenthesis: implicit multiplication like '2(3+4)', '(3+4)(1+2)'","        last = parseUnary();","        node = new OperatorNode('*', 'multiply', [node, last], true /*implicit*/);","      }","      else {","        break;","      }","    }","","    return node;","  }","","  /**","   * Unary plus and minus, and logical and bitwise not","   * @return {Node} node","   * @private","   */","  function parseUnary () {","    var name, params;","    var fn = {","      '-': 'unaryMinus',","      '+': 'unaryPlus',","      '~': 'bitNot',","      'not': 'not'","    }[token];","","    if (fn) {","      name = token;","","      getTokenSkipNewline();","      params = [parseUnary()];","","      return new OperatorNode(name, fn, params);","    }","","    return parsePow();","  }","","  /**","   * power","   * Note: power operator is right associative","   * @return {Node} node","   * @private","   */","  function parsePow () {","    var node, name, fn, params;","","    node = parseLeftHandOperators();","","    if (token == '^' || token == '.^') {","      name = token;","      fn = (name == '^') ? 'pow' : 'dotPow';","","      getTokenSkipNewline();","      params = [node, parseUnary()]; // Go back to unary, we can have '2^-3'","      node = new OperatorNode(name, fn, params);","    }","","    return node;","  }","","  /**","   * Left hand operators: factorial x!, transpose x'","   * @return {Node} node","   * @private","   */","  function parseLeftHandOperators ()  {","    var node, operators, name, fn, params;","","    node = parseCustomNodes();","","    operators = {","      '!': 'factorial',","      '\\'': 'transpose'","    };","","    while (token in operators) {","      name = token;","      fn = operators[name];","","      getToken();","      params = [node];","","      node = new OperatorNode(name, fn, params);","      node = parseAccessors(node);","    }","","    return node;","  }","","  /**","   * Parse a custom node handler. A node handler can be used to process","   * nodes in a custom way, for example for handling a plot.","   *","   * A handler must be passed as second argument of the parse function.","   * - must extend math.expression.node.Node","   * - must contain a function _compile(defs: Object) : string","   * - must contain a function find(filter: Object) : Node[]","   * - must contain a function toString() : string","   * - the constructor is called with a single argument containing all parameters","   *","   * For example:","   *","   *     nodes = {","   *       'plot': PlotHandler","   *     };","   *","   * The constructor of the handler is called as:","   *","   *     node = new PlotHandler(params);","   *","   * The handler will be invoked when evaluating an expression like:","   *","   *     node = math.parse('plot(sin(x), x)', nodes);","   *","   * @return {Node} node","   * @private","   */","  function parseCustomNodes () {","    var params = [], handler;","","    if (token_type == TOKENTYPE.SYMBOL && extra_nodes[token]) {","      handler = extra_nodes[token];","","      getToken();","","      // parse parameters","      if (token == '(') {","        params = [];","","        openParams();","        getToken();","","        if (token != ')') {","          params.push(parseAssignment());","","          // parse a list with parameters","          while (token == ',') {","            getToken();","            params.push(parseAssignment());","          }","        }","","        if (token != ')') {","          throw createSyntaxError('Parenthesis ) expected');","        }","        closeParams();","        getToken();","      }","","      // create a new node handler","      //noinspection JSValidateTypes","      return new handler(params);","    }","","    return parseSymbol();","  }","","  /**","   * parse symbols: functions, variables, constants, units","   * @return {Node} node","   * @private","   */","  function parseSymbol () {","    var node, name;","","    if (token_type == TOKENTYPE.SYMBOL ||","        (token_type == TOKENTYPE.DELIMITER && token in NAMED_DELIMITERS)) {","      name = token;","","      getToken();","","      // parse function parameters and matrix index","      node = new SymbolNode(name);","      node = parseAccessors(node);","      return node;","    }","","    return parseString();","  }","","  /**","   * parse accessors:","   * - function invocation in round brackets (...), for example sqrt(2)","   * - index enclosed in square brackets [...], for example A[2,3]","   * - dot notation for properties, like foo.bar","   * @param {Node} node    Node on which to apply the parameters. If there","   *                       are no parameters in the expression, the node","   *                       itself is returned","   * @param {string[]} [types]  Filter the types of notations","   *                            can be ['(', '[', '.']","   * @return {Node} node","   * @private","   */","  function parseAccessors (node, types) {","    var params;","","    while ((token == '(' || token == '[' || token == '.') &&","        (!types || types.indexOf(token) !== -1)) {","      params = [];","","      if (token == '(') {","        if (node.isSymbolNode || node.isAccessorNode || node.isFunctionNode) {","          // function invocation like fn(2, 3)","          openParams();","          getToken();","","          if (token != ')') {","            params.push(parseAssignment());","","            // parse a list with parameters","            while (token == ',') {","              getToken();","              params.push(parseAssignment());","            }","          }","","          if (token != ')') {","            throw createSyntaxError('Parenthesis ) expected');","          }","          closeParams();","          getToken();","","          node = new FunctionNode(node, params);","        }","        else {","          // implicit multiplication like (2+3)(4+5)","          // don't parse it here but let it be handled by parseMultiplyDivide","          // with correct precedence","          return node;","        }","      }","      else if (token == '[') {","        // index notation like variable[2, 3]","        openParams();","        getToken();","","        if (token != ']') {","          params.push(parseAssignment());","","          // parse a list with parameters","          while (token == ',') {","            getToken();","            params.push(parseAssignment());","          }","        }","","        if (token != ']') {","          throw createSyntaxError('Parenthesis ] expected');","        }","        closeParams();","        getToken();","","        node = new AccessorNode(node, new IndexNode(params));","      }","      else {","        // dot notation like variable.prop","        getToken();","","        if (token_type != TOKENTYPE.SYMBOL) {","          throw createSyntaxError('Property name expected after dot');","        }","        params.push(new ConstantNode(token));","        getToken();","","        var dotNotation = true;","        node = new AccessorNode(node, new IndexNode(params, dotNotation));","      }","    }","","    return node;","  }","","  /**","   * parse a string.","   * A string is enclosed by double quotes","   * @return {Node} node","   * @private","   */","  function parseString () {","    var node, str;","","    if (token == '\"') {","      str = parseStringToken();","","      // create constant","      node = new ConstantNode(str, 'string');","","      // parse index parameters","      node = parseAccessors(node);","","      return node;","    }","","    return parseMatrix();","  }","","  /**","   * Parse a string surrounded by double quotes \"...\"","   * @return {string}","   */","  function parseStringToken () {","    var str = '';","","    while (c != '' && c != '\\\"') {","      if (c == '\\\\') {","        // escape character","        str += c;","        next();","      }","","      str += c;","      next();","    }","","    getToken();","    if (token != '\"') {","      throw createSyntaxError('End of string \" expected');","    }","    getToken();","","    return str;","  }","","  /**","   * parse the matrix","   * @return {Node} node","   * @private","   */","  function parseMatrix () {","    var array, params, rows, cols;","","    if (token == '[') {","      // matrix [...]","      openParams();","      getToken();","","      if (token != ']') {","        // this is a non-empty matrix","        var row = parseRow();","","        if (token == ';') {","          // 2 dimensional array","          rows = 1;","          params = [row];","","          // the rows of the matrix are separated by dot-comma's","          while (token == ';') {","            getToken();","","            params[rows] = parseRow();","            rows++;","          }","","          if (token != ']') {","            throw createSyntaxError('End of matrix ] expected');","          }","          closeParams();","          getToken();","","          // check if the number of columns matches in all rows","          cols = params[0].items.length;","          for (var r = 1; r < rows; r++) {","            if (params[r].items.length != cols) {","              throw createError('Column dimensions mismatch ' +","                  '(' + params[r].items.length + ' != ' + cols + ')');","            }","          }","","          array = new ArrayNode(params);","        }","        else {","          // 1 dimensional vector","          if (token != ']') {","            throw createSyntaxError('End of matrix ] expected');","          }","          closeParams();","          getToken();","","          array = row;","        }","      }","      else {","        // this is an empty matrix \"[ ]\"","        closeParams();","        getToken();","        array = new ArrayNode([]);","      }","","      return parseAccessors(array);","    }","","    return parseObject();","  }","","  /**","   * Parse a single comma-separated row from a matrix, like 'a, b, c'","   * @return {ArrayNode} node","   */","  function parseRow () {","    var params = [parseAssignment()];","    var len = 1;","","    while (token == ',') {","      getToken();","","      // parse expression","      params[len] = parseAssignment();","      len++;","    }","","    return new ArrayNode(params);","  }","","  /**","   * parse an object, enclosed in angle brackets{...}, for example {value: 2}","   * @return {Node} node","   * @private","   */","  function parseObject () {","    if (token == '{') {","      var key;","","      var properties = {};","      do {","        getToken();","","        if (token != '}') {","          // parse key","          if (token == '\"') {","            key = parseStringToken();","          }","          else if (token_type == TOKENTYPE.SYMBOL) {","            key = token;","            getToken();","          }","          else {","            throw createSyntaxError('Symbol or string expected as object key');","          }","","          // parse key/value separator","          if (token != ':') {","            throw createSyntaxError('Colon : expected after object key');","          }","          getToken();","","          // parse key","          properties[key] = parseAssignment();","        }","      }","      while (token == ',');","","      if (token != '}') {","        throw createSyntaxError('Comma , or bracket } expected after object value');","      }","      getToken();","","      var node = new ObjectNode(properties);","","      // parse index parameters","      node = parseAccessors(node);","","      return node;","    }","","    return parseNumber();","  }","","  /**","   * parse a number","   * @return {Node} node","   * @private","   */","  function parseNumber () {","    var number;","","    if (token_type == TOKENTYPE.NUMBER) {","      // this is a number","      number = token;","      getToken();","","      return new ConstantNode(number, 'number');","    }","","    return parseParentheses();","  }","","  /**","   * parentheses","   * @return {Node} node","   * @private","   */","  function parseParentheses () {","    var node;","","    // check if it is a parenthesized expression","    if (token == '(') {","      // parentheses (...)","      openParams();","      getToken();","","      node = parseAssignment(); // start again","","      if (token != ')') {","        throw createSyntaxError('Parenthesis ) expected');","      }","      closeParams();","      getToken();","","      node = new ParenthesisNode(node);","      node = parseAccessors(node);","      return node;","    }","","    return parseEnd();","  }","","  /**","   * Evaluated when the expression is not yet ended but expected to end","   * @return {Node} res","   * @private","   */","  function parseEnd () {","    if (token == '') {","      // syntax error or unexpected end of expression","      throw createSyntaxError('Unexpected end of expression');","    } else {","      throw createSyntaxError('Value expected');","    }","  }","","  /**","   * Shortcut for getting the current row value (one based)","   * Returns the line of the currently handled expression","   * @private","   */","  /* TODO: implement keeping track on the row number","  function row () {","    return null;","  }","  */","","  /**","   * Shortcut for getting the current col value (one based)","   * Returns the column (position) where the last token starts","   * @private","   */","  function col () {","    return index - token.length + 1;","  }","","  /**","   * Create an error","   * @param {string} message","   * @return {SyntaxError} instantiated error","   * @private","   */","  function createSyntaxError (message) {","    var c = col();","    var error = new SyntaxError(message + ' (char ' + c + ')');","    error['char'] = c;","","    return error;","  }","","  /**","   * Create an error","   * @param {string} message","   * @return {Error} instantiated error","   * @private","   */","  function createError (message) {","    var c = col();","    var error = new SyntaxError(message + ' (char ' + c + ')');","    error['char'] = c;","","    return error;","  }","","  return parse;","}","","exports.name = 'parse';","exports.path = 'expression';","exports.factory = factory;",""],"l":{"3":1,"4":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"55":1,"56":0,"57":0,"61":0,"63":0,"65":0,"66":0,"68":0,"70":0,"71":0,"73":0,"74":0,"79":0,"84":0,"93":0,"136":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"162":1,"163":0,"164":0,"165":0,"166":0,"175":1,"176":0,"177":0,"185":1,"186":0,"194":1,"195":0,"203":1,"204":0,"212":1,"213":0,"214":0,"215":0,"219":0,"220":0,"224":0,"225":0,"226":0,"227":0,"232":0,"234":0,"235":0,"239":0,"240":0,"241":0,"242":0,"243":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"268":0,"269":0,"270":0,"271":0,"272":0,"276":0,"277":0,"280":0,"281":0,"282":0,"284":0,"286":0,"290":0,"291":0,"292":0,"294":0,"295":0,"296":0,"299":0,"300":0,"301":0,"305":0,"306":0,"307":0,"308":0,"309":0,"311":0,"312":0,"313":0,"317":0,"318":0,"321":0,"322":0,"323":0,"326":0,"327":0,"330":0,"331":0,"332":0,"336":0,"340":0,"341":0,"342":0,"343":0,"346":0,"347":0,"350":0,"353":0,"357":0,"358":0,"359":0,"360":0,"362":0,"368":1,"369":0,"370":0,"379":1,"380":0,"387":1,"388":0,"408":0,"409":0,"419":0,"420":0,"438":0,"439":0,"450":0,"452":0,"462":0,"463":0,"471":0,"472":0,"480":0,"481":0,"489":1,"491":0,"493":0,"495":0,"499":0,"500":0,"504":0,"507":0,"511":0,"521":1,"522":0,"523":0,"524":0,"526":0,"527":0,"528":0,"532":0,"533":0,"534":0,"535":0,"541":0,"542":0,"543":0,"544":0,"546":0,"547":0,"554":0,"555":0,"558":0,"559":0,"560":0,"563":0,"575":1,"576":0,"578":0,"580":0,"581":0,"583":0,"584":0,"585":0,"586":0,"588":0,"590":0,"591":0,"592":0,"594":0,"596":0,"597":0,"599":0,"600":0,"601":0,"602":0,"605":0,"609":0,"610":0,"611":0,"612":0,"616":0,"619":0,"632":1,"633":0,"635":0,"638":0,"639":0,"640":0,"642":0,"643":0,"645":0,"647":0,"648":0,"650":0,"652":0,"655":0,"658":0,"666":1,"667":0,"669":0,"670":0,"671":0,"674":0,"682":1,"683":0,"685":0,"686":0,"687":0,"690":0,"698":1,"699":0,"701":0,"702":0,"703":0,"706":0,"714":1,"715":0,"717":0,"718":0,"719":0,"722":0,"730":1,"731":0,"733":0,"734":0,"735":0,"738":0,"746":1,"747":0,"749":0,"750":0,"751":0,"754":0,"762":1,"763":0,"765":0,"767":0,"775":0,"776":0,"777":0,"779":0,"780":0,"781":0,"784":0,"792":1,"793":0,"795":0,"797":0,"803":0,"804":0,"805":0,"807":0,"808":0,"809":0,"812":0,"820":1,"821":0,"823":0,"825":0,"830":0,"831":0,"832":0,"834":0,"836":0,"838":0,"842":0,"843":0,"847":0,"855":1,"856":0,"858":0,"860":0,"864":0,"867":0,"869":0,"872":0,"873":0,"875":0,"877":0,"881":0,"885":0,"887":0,"891":0,"895":0,"903":1,"904":0,"906":0,"908":0,"912":0,"913":0,"914":0,"916":0,"917":0,"918":0,"921":0,"929":1,"930":0,"932":0,"933":0,"935":0,"944":0,"945":0,"947":0,"948":0,"950":0,"952":0,"953":0,"955":0,"966":0,"967":0,"970":0,"974":0,"982":1,"983":0,"984":0,"991":0,"992":0,"994":0,"995":0,"997":0,"1000":0,"1009":1,"1010":0,"1012":0,"1014":0,"1015":0,"1016":0,"1018":0,"1019":0,"1020":0,"1023":0,"1031":1,"1032":0,"1034":0,"1036":0,"1041":0,"1042":0,"1043":0,"1045":0,"1046":0,"1048":0,"1049":0,"1052":0,"1083":1,"1084":0,"1086":0,"1087":0,"1089":0,"1092":0,"1093":0,"1095":0,"1096":0,"1098":0,"1099":0,"1102":0,"1103":0,"1104":0,"1108":0,"1109":0,"1111":0,"1112":0,"1117":0,"1120":0,"1128":1,"1129":0,"1131":0,"1133":0,"1135":0,"1138":0,"1139":0,"1140":0,"1143":0,"1159":1,"1160":0,"1162":0,"1164":0,"1166":0,"1167":0,"1169":0,"1170":0,"1172":0,"1173":0,"1176":0,"1177":0,"1178":0,"1182":0,"1183":0,"1185":0,"1186":0,"1188":0,"1194":0,"1197":0,"1199":0,"1200":0,"1202":0,"1203":0,"1206":0,"1207":0,"1208":0,"1212":0,"1213":0,"1215":0,"1216":0,"1218":0,"1222":0,"1224":0,"1225":0,"1227":0,"1228":0,"1230":0,"1231":0,"1235":0,"1244":1,"1245":0,"1247":0,"1248":0,"1251":0,"1254":0,"1256":0,"1259":0,"1266":1,"1267":0,"1269":0,"1270":0,"1272":0,"1273":0,"1276":0,"1277":0,"1280":0,"1281":0,"1282":0,"1284":0,"1286":0,"1294":1,"1295":0,"1297":0,"1299":0,"1300":0,"1302":0,"1304":0,"1306":0,"1308":0,"1309":0,"1312":0,"1313":0,"1315":0,"1316":0,"1319":0,"1320":0,"1322":0,"1323":0,"1326":0,"1327":0,"1328":0,"1329":0,"1334":0,"1338":0,"1339":0,"1341":0,"1342":0,"1344":0,"1349":0,"1350":0,"1351":0,"1354":0,"1357":0,"1364":1,"1365":0,"1366":0,"1368":0,"1369":0,"1372":0,"1373":0,"1376":0,"1384":1,"1385":0,"1386":0,"1388":0,"1389":0,"1390":0,"1392":0,"1394":0,"1395":0,"1397":0,"1398":0,"1399":0,"1402":0,"1406":0,"1407":0,"1409":0,"1412":0,"1417":0,"1418":0,"1420":0,"1422":0,"1425":0,"1427":0,"1430":0,"1438":1,"1439":0,"1441":0,"1443":0,"1444":0,"1446":0,"1449":0,"1457":1,"1458":0,"1461":0,"1463":0,"1464":0,"1466":0,"1468":0,"1469":0,"1471":0,"1472":0,"1474":0,"1475":0,"1476":0,"1479":0,"1487":1,"1488":0,"1490":0,"1492":0,"1512":1,"1513":0,"1522":1,"1523":0,"1524":0,"1525":0,"1527":0,"1536":1,"1537":0,"1538":0,"1539":0,"1541":0,"1544":0,"1547":1,"1548":1,"1549":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/Parser.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/expression/Parser.js","s":{"1":1,"2":1,"3":0,"4":0,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":1,"31":1,"32":1,"33":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":51}}},"2":{"name":"Parser","line":57,"loc":{"start":{"line":57,"column":2},"end":{"line":57,"column":20}}},"3":{"name":"(anonymous_3)","line":79,"loc":{"start":{"line":79,"column":27},"end":{"line":79,"column":43}}},"4":{"name":"(anonymous_4)","line":90,"loc":{"start":{"line":90,"column":29},"end":{"line":90,"column":45}}},"5":{"name":"(anonymous_5)","line":100,"loc":{"start":{"line":100,"column":26},"end":{"line":100,"column":42}}},"6":{"name":"(anonymous_6)","line":113,"loc":{"start":{"line":113,"column":25},"end":{"line":113,"column":41}}},"7":{"name":"(anonymous_7)","line":124,"loc":{"start":{"line":124,"column":28},"end":{"line":124,"column":40}}},"8":{"name":"(anonymous_8)","line":133,"loc":{"start":{"line":133,"column":25},"end":{"line":133,"column":48}}},"9":{"name":"(anonymous_9)","line":142,"loc":{"start":{"line":142,"column":28},"end":{"line":142,"column":44}}},"10":{"name":"(anonymous_10)","line":150,"loc":{"start":{"line":150,"column":27},"end":{"line":150,"column":39}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":47}},"2":{"start":{"line":5,"column":0},"end":{"line":159,"column":1}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":40}},"4":{"start":{"line":7,"column":2},"end":{"line":7,"column":54}},"5":{"start":{"line":57,"column":2},"end":{"line":63,"column":3}},"6":{"start":{"line":58,"column":4},"end":{"line":61,"column":5}},"7":{"start":{"line":59,"column":6},"end":{"line":60,"column":62}},"8":{"start":{"line":62,"column":4},"end":{"line":62,"column":20}},"9":{"start":{"line":68,"column":2},"end":{"line":68,"column":35}},"10":{"start":{"line":69,"column":2},"end":{"line":69,"column":35}},"11":{"start":{"line":79,"column":2},"end":{"line":81,"column":4}},"12":{"start":{"line":80,"column":4},"end":{"line":80,"column":75}},"13":{"start":{"line":90,"column":2},"end":{"line":92,"column":4}},"14":{"start":{"line":91,"column":4},"end":{"line":91,"column":79}},"15":{"start":{"line":100,"column":2},"end":{"line":105,"column":4}},"16":{"start":{"line":102,"column":4},"end":{"line":104,"column":26}},"17":{"start":{"line":113,"column":2},"end":{"line":118,"column":4}},"18":{"start":{"line":115,"column":4},"end":{"line":117,"column":20}},"19":{"start":{"line":124,"column":2},"end":{"line":126,"column":4}},"20":{"start":{"line":125,"column":4},"end":{"line":125,"column":34}},"21":{"start":{"line":133,"column":2},"end":{"line":136,"column":4}},"22":{"start":{"line":135,"column":4},"end":{"line":135,"column":60}},"23":{"start":{"line":142,"column":2},"end":{"line":145,"column":4}},"24":{"start":{"line":144,"column":4},"end":{"line":144,"column":28}},"25":{"start":{"line":150,"column":2},"end":{"line":156,"column":4}},"26":{"start":{"line":151,"column":4},"end":{"line":155,"column":5}},"27":{"start":{"line":152,"column":6},"end":{"line":154,"column":7}},"28":{"start":{"line":153,"column":8},"end":{"line":153,"column":32}},"29":{"start":{"line":158,"column":2},"end":{"line":158,"column":16}},"30":{"start":{"line":161,"column":0},"end":{"line":161,"column":24}},"31":{"start":{"line":162,"column":0},"end":{"line":162,"column":28}},"32":{"start":{"line":163,"column":0},"end":{"line":163,"column":26}},"33":{"start":{"line":164,"column":0},"end":{"line":164,"column":20}}},"branchMap":{"1":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":4},"end":{"line":58,"column":4}},{"start":{"line":58,"column":4},"end":{"line":58,"column":4}}]},"2":{"line":115,"type":"cond-expr","locations":[{"start":{"line":116,"column":10},"end":{"line":116,"column":51}},{"start":{"line":117,"column":10},"end":{"line":117,"column":19}}]},"3":{"line":152,"type":"if","locations":[{"start":{"line":152,"column":6},"end":{"line":152,"column":6}},{"start":{"line":152,"column":6},"end":{"line":152,"column":6}}]}},"code":["'use strict';","","var extend = require('../utils/object').extend;","","function factory (type, config, load, typed, math) {","  var _parse = load(require('./parse'));","  var customs = load(require('./node/utils/customs'));","","  /**","   * @constructor Parser","   * Parser contains methods to evaluate or parse expressions, and has a number","   * of convenience methods to get, set, and remove variables from memory. Parser","   * keeps a scope containing variables in memory, which is used for all","   * evaluations.","   *","   * Methods:","   *    var result = parser.eval(expr);    // evaluate an expression","   *    var value = parser.get(name);      // retrieve a variable from the parser","   *    var values = parser.getAll();      // retrieve all defined variables","   *    parser.set(name, value);           // set a variable in the parser","   *    parser.remove(name);               // clear a variable from the","   *                                       // parsers scope","   *    parser.clear();                    // clear the parsers scope","   *","   * Example usage:","   *    var parser = new Parser();","   *    // Note: there is a convenience method which can be used instead:","   *    // var parser = new math.parser();","   *","   *    // evaluate expressions","   *    parser.eval('sqrt(3^2 + 4^2)');         // 5","   *    parser.eval('sqrt(-4)');                // 2i","   *    parser.eval('2 inch in cm');            // 5.08 cm","   *    parser.eval('cos(45 deg)');             // 0.7071067811865476","   *","   *    // define variables and functions","   *    parser.eval('x = 7 / 2');               // 3.5","   *    parser.eval('x + 3');                   // 6.5","   *    parser.eval('function f(x, y) = x^y');  // f(x, y)","   *    parser.eval('f(2, 3)');                 // 8","   *","   *    // get and set variables and functions","   *    var x = parser.get('x');                // 7","   *    var f = parser.get('f');                // function","   *    var g = f(3, 2);                        // 9","   *    parser.set('h', 500);","   *    var i = parser.eval('h / 2');           // 250","   *    parser.set('hello', function (name) {","   *        return 'hello, ' + name + '!';","   *    });","   *    parser.eval('hello(\"user\")');           // \"hello, user!\"","   *","   *    // clear defined functions and variables","   *    parser.clear();","   *","   */","  function Parser() {","    if (!(this instanceof Parser)) {","      throw new SyntaxError(","          'Constructor must be called with the new operator');","    }","    this.scope = {};","  }","","  /**","   * Attach type information","   */","  Parser.prototype.type = 'Parser';","  Parser.prototype.isParser = true;","","  /**","   * Parse an expression and return the parsed function node.","   * The node tree can be compiled via `code = node.compile(math)`,","   * and the compiled code can be executed as `code.eval([scope])`","   * @param {string} expr","   * @return {Node} node","   * @throws {Error}","   */","  Parser.prototype.parse = function (expr) {","    throw new Error('Parser.parse is deprecated. Use math.parse instead.');","  };","","  /**","   * Parse and compile an expression, return the compiled javascript code.","   * The node can be evaluated via code.eval([scope])","   * @param {string} expr","   * @return {{eval: function}} code","   * @throws {Error}","   */","  Parser.prototype.compile = function (expr) {","    throw new Error('Parser.compile is deprecated. Use math.compile instead.');","  };","","  /**","   * Parse and evaluate the given expression","   * @param {string} expr   A string containing an expression, for example \"2+3\"","   * @return {*} result     The result, or undefined when the expression was empty","   * @throws {Error}","   */","  Parser.prototype.eval = function (expr) {","    // TODO: validate arguments","    return _parse(expr)","        .compile()","        .eval(this.scope);","  };","","  /**","   * Get a variable (a function or variable) by name from the parsers scope.","   * Returns undefined when not found","   * @param {string} name","   * @return {* | undefined} value","   */","  Parser.prototype.get = function (name) {","    // TODO: validate arguments","    return name in this.scope","        ? customs.getSafeProperty(this.scope, name)","        : undefined;","  };","","  /**","   * Get a map with all defined variables","   * @return {Object} values","   */","  Parser.prototype.getAll = function () {","    return extend({}, this.scope);","  };","","  /**","   * Set a symbol (a function or variable) by name from the parsers scope.","   * @param {string} name","   * @param {* | undefined} value","   */","  Parser.prototype.set = function (name, value) {","    // TODO: validate arguments","    return customs.setSafeProperty(this.scope, name, value);","  };","","  /**","   * Remove a variable from the parsers scope","   * @param {string} name","   */","  Parser.prototype.remove = function (name) {","    // TODO: validate arguments","    delete this.scope[name];","  };","","  /**","   * Clear the scope with variables and functions","   */","  Parser.prototype.clear = function () {","    for (var name in this.scope) {","      if (this.scope.hasOwnProperty(name)) {","        delete this.scope[name];","      }","    }","  };","","  return Parser;","}","","exports.name = 'Parser';","exports.path = 'expression';","exports.factory = factory;","exports.math = true; // requires the math namespace as 5th argument",""],"l":{"3":1,"5":1,"6":0,"7":0,"57":1,"58":0,"59":0,"62":0,"68":0,"69":0,"79":0,"80":0,"90":0,"91":0,"100":0,"102":0,"113":0,"115":0,"124":0,"125":0,"133":0,"135":0,"142":0,"144":0,"150":0,"151":0,"152":0,"153":0,"158":0,"161":1,"162":1,"163":1,"164":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/index.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":18,"column":2}}},"branchMap":{},"code":["module.exports = [","  require('./algebra'),","  require('./arithmetic'),","  require('./bitwise'),","  require('./combinatorics'),","  require('./complex'),","  require('./geometry'),","  require('./logical'),","  require('./matrix'),","  require('./probability'),","  require('./relational'),","  require('./special'),","  require('./statistics'),","  require('./string'),","  require('./trigonometry'),","  require('./unit'),","  require('./utils')","];",""],"l":{"1":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/algebra/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/algebra/index.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":15,"column":2}}},"branchMap":{},"code":["module.exports = [","  require('./derivative'),","","  // simplify","  require('./simplify'),","","  // decomposition","  require('./decomposition/lup'),","  require('./decomposition/slu'),","","  // solver","  require('./solver/lsolve'),","  require('./solver/lusolve'),","  require('./solver/usolve')","];",""],"l":{"1":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/algebra/derivative.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/algebra/derivative.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":1,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":1,"210":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0,0,0,0,0,0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0},"fnMap":{"1":{"name":"factory","line":3,"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}}},"2":{"name":"(anonymous_2)","line":51,"loc":{"start":{"line":51,"column":32},"end":{"line":51,"column":67}}},"3":{"name":"(anonymous_3)","line":57,"loc":{"start":{"line":57,"column":24},"end":{"line":57,"column":50}}},"4":{"name":"(anonymous_4)","line":61,"loc":{"start":{"line":61,"column":26},"end":{"line":61,"column":52}}},"5":{"name":"(anonymous_5)","line":64,"loc":{"start":{"line":64,"column":34},"end":{"line":64,"column":69}}},"6":{"name":"(anonymous_6)","line":68,"loc":{"start":{"line":68,"column":22},"end":{"line":68,"column":48}}},"7":{"name":"(anonymous_7)","line":71,"loc":{"start":{"line":71,"column":30},"end":{"line":71,"column":65}}},"8":{"name":"(anonymous_8)","line":75,"loc":{"start":{"line":75,"column":20},"end":{"line":75,"column":46}}},"9":{"name":"(anonymous_9)","line":78,"loc":{"start":{"line":78,"column":28},"end":{"line":78,"column":63}}},"10":{"name":"(anonymous_10)","line":99,"loc":{"start":{"line":99,"column":21},"end":{"line":99,"column":37}}},"11":{"name":"(anonymous_11)","line":104,"loc":{"start":{"line":104,"column":24},"end":{"line":104,"column":43}}},"12":{"name":"(anonymous_12)","line":107,"loc":{"start":{"line":107,"column":38},"end":{"line":107,"column":64}}},"13":{"name":"(anonymous_13)","line":110,"loc":{"start":{"line":110,"column":30},"end":{"line":110,"column":56}}},"14":{"name":"(anonymous_14)","line":138,"loc":{"start":{"line":138,"column":36},"end":{"line":138,"column":64}}},"15":{"name":"(anonymous_15)","line":142,"loc":{"start":{"line":142,"column":34},"end":{"line":142,"column":71}}},"16":{"name":"(anonymous_16)","line":151,"loc":{"start":{"line":151,"column":39},"end":{"line":151,"column":76}}},"17":{"name":"(anonymous_17)","line":155,"loc":{"start":{"line":155,"column":46},"end":{"line":155,"column":83}}},"18":{"name":"(anonymous_18)","line":162,"loc":{"start":{"line":162,"column":51},"end":{"line":162,"column":88}}},"19":{"name":"(anonymous_19)","line":185,"loc":{"start":{"line":185,"column":28},"end":{"line":185,"column":44}}},"20":{"name":"(anonymous_20)","line":189,"loc":{"start":{"line":189,"column":26},"end":{"line":189,"column":54}}},"21":{"name":"(anonymous_21)","line":196,"loc":{"start":{"line":196,"column":31},"end":{"line":196,"column":59}}},"22":{"name":"(anonymous_22)","line":200,"loc":{"start":{"line":200,"column":38},"end":{"line":200,"column":66}}},"23":{"name":"(anonymous_23)","line":207,"loc":{"start":{"line":207,"column":28},"end":{"line":207,"column":56}}},"24":{"name":"(anonymous_24)","line":554,"loc":{"start":{"line":554,"column":28},"end":{"line":554,"column":56}}},"25":{"name":"funcArgsCheck","line":691,"loc":{"start":{"line":691,"column":2},"end":{"line":691,"column":31}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":711,"column":1}},"2":{"start":{"line":4,"column":2},"end":{"line":4,"column":54}},"3":{"start":{"line":5,"column":2},"end":{"line":5,"column":45}},"4":{"start":{"line":6,"column":2},"end":{"line":6,"column":73}},"5":{"start":{"line":7,"column":2},"end":{"line":7,"column":73}},"6":{"start":{"line":8,"column":2},"end":{"line":8,"column":73}},"7":{"start":{"line":9,"column":2},"end":{"line":9,"column":79}},"8":{"start":{"line":10,"column":2},"end":{"line":10,"column":69}},"9":{"start":{"line":50,"column":2},"end":{"line":95,"column":5}},"10":{"start":{"line":52,"column":6},"end":{"line":52,"column":26}},"11":{"start":{"line":53,"column":6},"end":{"line":53,"column":48}},"12":{"start":{"line":54,"column":6},"end":{"line":54,"column":46}},"13":{"start":{"line":55,"column":6},"end":{"line":55,"column":52}},"14":{"start":{"line":58,"column":6},"end":{"line":58,"column":57}},"15":{"start":{"line":62,"column":6},"end":{"line":62,"column":46}},"16":{"start":{"line":65,"column":6},"end":{"line":65,"column":55}},"17":{"start":{"line":69,"column":6},"end":{"line":69,"column":53}},"18":{"start":{"line":72,"column":6},"end":{"line":72,"column":62}},"19":{"start":{"line":76,"column":6},"end":{"line":76,"column":46}},"20":{"start":{"line":79,"column":6},"end":{"line":79,"column":55}},"21":{"start":{"line":97,"column":2},"end":{"line":97,"column":29}},"22":{"start":{"line":99,"column":2},"end":{"line":101,"column":3}},"23":{"start":{"line":100,"column":4},"end":{"line":100,"column":45}},"24":{"start":{"line":103,"column":2},"end":{"line":120,"column":5}},"25":{"start":{"line":105,"column":6},"end":{"line":105,"column":57}},"26":{"start":{"line":108,"column":6},"end":{"line":108,"column":61}},"27":{"start":{"line":111,"column":6},"end":{"line":111,"column":12}},"28":{"start":{"line":112,"column":6},"end":{"line":117,"column":7}},"29":{"start":{"line":113,"column":8},"end":{"line":113,"column":35}},"30":{"start":{"line":116,"column":8},"end":{"line":116,"column":67}},"31":{"start":{"line":118,"column":6},"end":{"line":118,"column":46}},"32":{"start":{"line":137,"column":2},"end":{"line":175,"column":5}},"33":{"start":{"line":139,"column":6},"end":{"line":139,"column":37}},"34":{"start":{"line":145,"column":6},"end":{"line":147,"column":7}},"35":{"start":{"line":146,"column":8},"end":{"line":146,"column":39}},"36":{"start":{"line":148,"column":6},"end":{"line":148,"column":19}},"37":{"start":{"line":152,"column":6},"end":{"line":152,"column":57}},"38":{"start":{"line":156,"column":6},"end":{"line":158,"column":7}},"39":{"start":{"line":157,"column":8},"end":{"line":157,"column":39}},"40":{"start":{"line":159,"column":6},"end":{"line":159,"column":54}},"41":{"start":{"line":163,"column":6},"end":{"line":172,"column":7}},"42":{"start":{"line":164,"column":8},"end":{"line":164,"column":66}},"43":{"start":{"line":165,"column":8},"end":{"line":167,"column":9}},"44":{"start":{"line":166,"column":10},"end":{"line":166,"column":75}},"45":{"start":{"line":169,"column":8},"end":{"line":171,"column":9}},"46":{"start":{"line":170,"column":10},"end":{"line":170,"column":41}},"47":{"start":{"line":173,"column":6},"end":{"line":173,"column":19}},"48":{"start":{"line":184,"column":2},"end":{"line":683,"column":5}},"49":{"start":{"line":186,"column":7},"end":{"line":186,"column":52}},"50":{"start":{"line":190,"column":6},"end":{"line":192,"column":7}},"51":{"start":{"line":191,"column":8},"end":{"line":191,"column":52}},"52":{"start":{"line":193,"column":6},"end":{"line":193,"column":50}},"53":{"start":{"line":197,"column":6},"end":{"line":197,"column":72}},"54":{"start":{"line":201,"column":6},"end":{"line":203,"column":7}},"55":{"start":{"line":202,"column":8},"end":{"line":202,"column":52}},"56":{"start":{"line":204,"column":6},"end":{"line":204,"column":48}},"57":{"start":{"line":208,"column":6},"end":{"line":210,"column":7}},"58":{"start":{"line":209,"column":8},"end":{"line":209,"column":28}},"59":{"start":{"line":212,"column":6},"end":{"line":214,"column":7}},"60":{"start":{"line":213,"column":8},"end":{"line":213,"column":52}},"61":{"start":{"line":216,"column":6},"end":{"line":216,"column":30}},"62":{"start":{"line":217,"column":6},"end":{"line":217,"column":15}},"63":{"start":{"line":219,"column":6},"end":{"line":219,"column":22}},"64":{"start":{"line":220,"column":6},"end":{"line":220,"column":27}},"65":{"start":{"line":222,"column":6},"end":{"line":222,"column":25}},"66":{"start":{"line":223,"column":6},"end":{"line":533,"column":7}},"67":{"start":{"line":226,"column":10},"end":{"line":226,"column":21}},"68":{"start":{"line":227,"column":10},"end":{"line":236,"column":13}},"69":{"start":{"line":237,"column":10},"end":{"line":237,"column":16}},"70":{"start":{"line":241,"column":10},"end":{"line":248,"column":11}},"71":{"start":{"line":242,"column":12},"end":{"line":242,"column":23}},"72":{"start":{"line":243,"column":12},"end":{"line":246,"column":15}},"73":{"start":{"line":247,"column":12},"end":{"line":247,"column":18}},"74":{"start":{"line":251,"column":10},"end":{"line":254,"column":13}},"75":{"start":{"line":257,"column":10},"end":{"line":257,"column":54}},"76":{"start":{"line":259,"column":10},"end":{"line":259,"column":85}},"77":{"start":{"line":261,"column":10},"end":{"line":261,"column":55}},"78":{"start":{"line":263,"column":10},"end":{"line":278,"column":11}},"79":{"start":{"line":265,"column":12},"end":{"line":265,"column":42}},"80":{"start":{"line":266,"column":17},"end":{"line":278,"column":11}},"81":{"start":{"line":268,"column":12},"end":{"line":271,"column":15}},"82":{"start":{"line":274,"column":12},"end":{"line":277,"column":30}},"83":{"start":{"line":280,"column":10},"end":{"line":280,"column":21}},"84":{"start":{"line":281,"column":10},"end":{"line":281,"column":16}},"85":{"start":{"line":284,"column":10},"end":{"line":284,"column":67}},"86":{"start":{"line":285,"column":10},"end":{"line":285,"column":16}},"87":{"start":{"line":288,"column":10},"end":{"line":288,"column":67}},"88":{"start":{"line":289,"column":10},"end":{"line":289,"column":16}},"89":{"start":{"line":292,"column":10},"end":{"line":294,"column":13}},"90":{"start":{"line":295,"column":10},"end":{"line":295,"column":16}},"91":{"start":{"line":298,"column":10},"end":{"line":301,"column":13}},"92":{"start":{"line":302,"column":10},"end":{"line":302,"column":16}},"93":{"start":{"line":305,"column":10},"end":{"line":308,"column":13}},"94":{"start":{"line":309,"column":10},"end":{"line":309,"column":16}},"95":{"start":{"line":312,"column":10},"end":{"line":312,"column":26}},"96":{"start":{"line":313,"column":10},"end":{"line":316,"column":13}},"97":{"start":{"line":317,"column":10},"end":{"line":317,"column":16}},"98":{"start":{"line":320,"column":10},"end":{"line":320,"column":26}},"99":{"start":{"line":321,"column":10},"end":{"line":324,"column":13}},"100":{"start":{"line":325,"column":10},"end":{"line":325,"column":16}},"101":{"start":{"line":328,"column":10},"end":{"line":328,"column":21}},"102":{"start":{"line":329,"column":10},"end":{"line":337,"column":13}},"103":{"start":{"line":338,"column":10},"end":{"line":338,"column":16}},"104":{"start":{"line":341,"column":10},"end":{"line":341,"column":21}},"105":{"start":{"line":342,"column":10},"end":{"line":342,"column":26}},"106":{"start":{"line":343,"column":10},"end":{"line":351,"column":13}},"107":{"start":{"line":352,"column":10},"end":{"line":352,"column":16}},"108":{"start":{"line":355,"column":10},"end":{"line":355,"column":21}},"109":{"start":{"line":356,"column":10},"end":{"line":362,"column":13}},"110":{"start":{"line":363,"column":10},"end":{"line":363,"column":16}},"111":{"start":{"line":366,"column":10},"end":{"line":366,"column":21}},"112":{"start":{"line":367,"column":10},"end":{"line":378,"column":13}},"113":{"start":{"line":379,"column":10},"end":{"line":379,"column":16}},"114":{"start":{"line":382,"column":10},"end":{"line":382,"column":21}},"115":{"start":{"line":383,"column":10},"end":{"line":383,"column":26}},"116":{"start":{"line":384,"column":10},"end":{"line":395,"column":13}},"117":{"start":{"line":396,"column":10},"end":{"line":396,"column":16}},"118":{"start":{"line":399,"column":10},"end":{"line":399,"column":21}},"119":{"start":{"line":400,"column":10},"end":{"line":400,"column":26}},"120":{"start":{"line":401,"column":10},"end":{"line":407,"column":13}},"121":{"start":{"line":408,"column":10},"end":{"line":408,"column":16}},"122":{"start":{"line":411,"column":10},"end":{"line":411,"column":68}},"123":{"start":{"line":412,"column":10},"end":{"line":412,"column":16}},"124":{"start":{"line":415,"column":10},"end":{"line":415,"column":68}},"125":{"start":{"line":416,"column":10},"end":{"line":416,"column":16}},"126":{"start":{"line":419,"column":10},"end":{"line":422,"column":13}},"127":{"start":{"line":423,"column":10},"end":{"line":423,"column":16}},"128":{"start":{"line":426,"column":10},"end":{"line":426,"column":26}},"129":{"start":{"line":427,"column":10},"end":{"line":430,"column":13}},"130":{"start":{"line":431,"column":10},"end":{"line":431,"column":16}},"131":{"start":{"line":434,"column":10},"end":{"line":434,"column":26}},"132":{"start":{"line":435,"column":10},"end":{"line":438,"column":13}},"133":{"start":{"line":439,"column":10},"end":{"line":439,"column":16}},"134":{"start":{"line":442,"column":10},"end":{"line":442,"column":26}},"135":{"start":{"line":443,"column":10},"end":{"line":446,"column":13}},"136":{"start":{"line":447,"column":10},"end":{"line":447,"column":16}},"137":{"start":{"line":450,"column":10},"end":{"line":450,"column":21}},"138":{"start":{"line":451,"column":10},"end":{"line":459,"column":13}},"139":{"start":{"line":460,"column":10},"end":{"line":460,"column":16}},"140":{"start":{"line":463,"column":10},"end":{"line":463,"column":21}},"141":{"start":{"line":464,"column":10},"end":{"line":472,"column":13}},"142":{"start":{"line":473,"column":10},"end":{"line":473,"column":16}},"143":{"start":{"line":476,"column":10},"end":{"line":476,"column":21}},"144":{"start":{"line":477,"column":10},"end":{"line":483,"column":13}},"145":{"start":{"line":484,"column":10},"end":{"line":484,"column":16}},"146":{"start":{"line":487,"column":10},"end":{"line":487,"column":21}},"147":{"start":{"line":488,"column":10},"end":{"line":488,"column":26}},"148":{"start":{"line":489,"column":10},"end":{"line":500,"column":13}},"149":{"start":{"line":501,"column":10},"end":{"line":501,"column":16}},"150":{"start":{"line":504,"column":10},"end":{"line":504,"column":21}},"151":{"start":{"line":505,"column":10},"end":{"line":505,"column":26}},"152":{"start":{"line":506,"column":10},"end":{"line":517,"column":13}},"153":{"start":{"line":518,"column":10},"end":{"line":518,"column":16}},"154":{"start":{"line":521,"column":10},"end":{"line":521,"column":21}},"155":{"start":{"line":522,"column":10},"end":{"line":522,"column":26}},"156":{"start":{"line":523,"column":10},"end":{"line":529,"column":13}},"157":{"start":{"line":530,"column":10},"end":{"line":530,"column":16}},"158":{"start":{"line":532,"column":17},"end":{"line":532,"column":93}},"159":{"start":{"line":535,"column":6},"end":{"line":535,"column":19}},"160":{"start":{"line":536,"column":6},"end":{"line":542,"column":7}},"161":{"start":{"line":537,"column":8},"end":{"line":537,"column":17}},"162":{"start":{"line":538,"column":8},"end":{"line":538,"column":24}},"163":{"start":{"line":540,"column":8},"end":{"line":540,"column":17}},"164":{"start":{"line":541,"column":8},"end":{"line":541,"column":26}},"165":{"start":{"line":547,"column":6},"end":{"line":547,"column":58}},"166":{"start":{"line":548,"column":6},"end":{"line":550,"column":7}},"167":{"start":{"line":549,"column":8},"end":{"line":549,"column":81}},"168":{"start":{"line":551,"column":6},"end":{"line":551,"column":75}},"169":{"start":{"line":555,"column":6},"end":{"line":557,"column":7}},"170":{"start":{"line":556,"column":8},"end":{"line":556,"column":52}},"171":{"start":{"line":559,"column":6},"end":{"line":559,"column":30}},"172":{"start":{"line":560,"column":6},"end":{"line":560,"column":30}},"173":{"start":{"line":562,"column":6},"end":{"line":681,"column":7}},"174":{"start":{"line":566,"column":10},"end":{"line":568,"column":11}},"175":{"start":{"line":567,"column":12},"end":{"line":567,"column":87}},"176":{"start":{"line":571,"column":10},"end":{"line":574,"column":13}},"177":{"start":{"line":577,"column":10},"end":{"line":583,"column":11}},"178":{"start":{"line":578,"column":12},"end":{"line":580,"column":62}},"179":{"start":{"line":582,"column":12},"end":{"line":582,"column":62}},"180":{"start":{"line":586,"column":10},"end":{"line":589,"column":13}},"181":{"start":{"line":592,"column":10},"end":{"line":594,"column":11}},"182":{"start":{"line":593,"column":12},"end":{"line":593,"column":90}},"183":{"start":{"line":597,"column":10},"end":{"line":605,"column":11}},"184":{"start":{"line":598,"column":12},"end":{"line":604,"column":15}},"185":{"start":{"line":608,"column":10},"end":{"line":614,"column":13}},"186":{"start":{"line":616,"column":10},"end":{"line":630,"column":11}},"187":{"start":{"line":618,"column":12},"end":{"line":620,"column":13}},"188":{"start":{"line":619,"column":14},"end":{"line":619,"column":58}},"189":{"start":{"line":623,"column":12},"end":{"line":629,"column":15}},"190":{"start":{"line":632,"column":10},"end":{"line":662,"column":11}},"191":{"start":{"line":633,"column":12},"end":{"line":644,"column":13}},"192":{"start":{"line":634,"column":14},"end":{"line":634,"column":40}},"193":{"start":{"line":637,"column":14},"end":{"line":639,"column":15}},"194":{"start":{"line":638,"column":16},"end":{"line":638,"column":60}},"195":{"start":{"line":641,"column":14},"end":{"line":643,"column":15}},"196":{"start":{"line":642,"column":16},"end":{"line":642,"column":53}},"197":{"start":{"line":647,"column":12},"end":{"line":653,"column":15}},"198":{"start":{"line":655,"column":12},"end":{"line":661,"column":15}},"199":{"start":{"line":665,"column":10},"end":{"line":677,"column":13}},"200":{"start":{"line":680,"column":17},"end":{"line":680,"column":91}},"201":{"start":{"line":691,"column":2},"end":{"line":707,"column":3}},"202":{"start":{"line":693,"column":4},"end":{"line":695,"column":5}},"203":{"start":{"line":694,"column":6},"end":{"line":694,"column":13}},"204":{"start":{"line":701,"column":4},"end":{"line":703,"column":5}},"205":{"start":{"line":702,"column":6},"end":{"line":702,"column":41}},"206":{"start":{"line":705,"column":4},"end":{"line":705,"column":26}},"207":{"start":{"line":706,"column":4},"end":{"line":706,"column":58}},"208":{"start":{"line":710,"column":2},"end":{"line":710,"column":20}},"209":{"start":{"line":713,"column":0},"end":{"line":713,"column":28}},"210":{"start":{"line":714,"column":0},"end":{"line":714,"column":26}}},"branchMap":{"1":{"line":55,"type":"cond-expr","locations":[{"start":{"line":55,"column":32},"end":{"line":55,"column":45}},{"start":{"line":55,"column":48},"end":{"line":55,"column":51}}]},"2":{"line":112,"type":"if","locations":[{"start":{"line":112,"column":6},"end":{"line":112,"column":6}},{"start":{"line":112,"column":6},"end":{"line":112,"column":6}}]},"3":{"line":145,"type":"if","locations":[{"start":{"line":145,"column":6},"end":{"line":145,"column":6}},{"start":{"line":145,"column":6},"end":{"line":145,"column":6}}]},"4":{"line":156,"type":"if","locations":[{"start":{"line":156,"column":6},"end":{"line":156,"column":6}},{"start":{"line":156,"column":6},"end":{"line":156,"column":6}}]},"5":{"line":163,"type":"if","locations":[{"start":{"line":163,"column":6},"end":{"line":163,"column":6}},{"start":{"line":163,"column":6},"end":{"line":163,"column":6}}]},"6":{"line":166,"type":"binary-expr","locations":[{"start":{"line":166,"column":20},"end":{"line":166,"column":63}},{"start":{"line":166,"column":67},"end":{"line":166,"column":74}}]},"7":{"line":169,"type":"if","locations":[{"start":{"line":169,"column":8},"end":{"line":169,"column":8}},{"start":{"line":169,"column":8},"end":{"line":169,"column":8}}]},"8":{"line":190,"type":"if","locations":[{"start":{"line":190,"column":6},"end":{"line":190,"column":6}},{"start":{"line":190,"column":6},"end":{"line":190,"column":6}}]},"9":{"line":201,"type":"if","locations":[{"start":{"line":201,"column":6},"end":{"line":201,"column":6}},{"start":{"line":201,"column":6},"end":{"line":201,"column":6}}]},"10":{"line":208,"type":"if","locations":[{"start":{"line":208,"column":6},"end":{"line":208,"column":6}},{"start":{"line":208,"column":6},"end":{"line":208,"column":6}}]},"11":{"line":212,"type":"if","locations":[{"start":{"line":212,"column":6},"end":{"line":212,"column":6}},{"start":{"line":212,"column":6},"end":{"line":212,"column":6}}]},"12":{"line":223,"type":"switch","locations":[{"start":{"line":224,"column":8},"end":{"line":237,"column":16}},{"start":{"line":238,"column":8},"end":{"line":238,"column":20}},{"start":{"line":239,"column":8},"end":{"line":259,"column":85}},{"start":{"line":260,"column":8},"end":{"line":261,"column":55}},{"start":{"line":262,"column":8},"end":{"line":281,"column":16}},{"start":{"line":282,"column":8},"end":{"line":285,"column":16}},{"start":{"line":286,"column":8},"end":{"line":289,"column":16}},{"start":{"line":290,"column":8},"end":{"line":295,"column":16}},{"start":{"line":296,"column":8},"end":{"line":302,"column":16}},{"start":{"line":303,"column":8},"end":{"line":309,"column":16}},{"start":{"line":310,"column":8},"end":{"line":317,"column":16}},{"start":{"line":318,"column":8},"end":{"line":325,"column":16}},{"start":{"line":326,"column":8},"end":{"line":338,"column":16}},{"start":{"line":339,"column":8},"end":{"line":352,"column":16}},{"start":{"line":353,"column":8},"end":{"line":363,"column":16}},{"start":{"line":364,"column":8},"end":{"line":379,"column":16}},{"start":{"line":380,"column":8},"end":{"line":396,"column":16}},{"start":{"line":397,"column":8},"end":{"line":408,"column":16}},{"start":{"line":409,"column":8},"end":{"line":412,"column":16}},{"start":{"line":413,"column":8},"end":{"line":416,"column":16}},{"start":{"line":417,"column":8},"end":{"line":423,"column":16}},{"start":{"line":424,"column":8},"end":{"line":431,"column":16}},{"start":{"line":432,"column":8},"end":{"line":439,"column":16}},{"start":{"line":440,"column":8},"end":{"line":447,"column":16}},{"start":{"line":448,"column":8},"end":{"line":460,"column":16}},{"start":{"line":461,"column":8},"end":{"line":473,"column":16}},{"start":{"line":474,"column":8},"end":{"line":484,"column":16}},{"start":{"line":485,"column":8},"end":{"line":501,"column":16}},{"start":{"line":502,"column":8},"end":{"line":518,"column":16}},{"start":{"line":519,"column":8},"end":{"line":530,"column":16}},{"start":{"line":531,"column":8},"end":{"line":531,"column":21}},{"start":{"line":532,"column":8},"end":{"line":532,"column":93}}]},"13":{"line":241,"type":"if","locations":[{"start":{"line":241,"column":10},"end":{"line":241,"column":10}},{"start":{"line":241,"column":10},"end":{"line":241,"column":10}}]},"14":{"line":263,"type":"if","locations":[{"start":{"line":263,"column":10},"end":{"line":263,"column":10}},{"start":{"line":263,"column":10},"end":{"line":263,"column":10}}]},"15":{"line":263,"type":"binary-expr","locations":[{"start":{"line":263,"column":14},"end":{"line":263,"column":19}},{"start":{"line":263,"column":23},"end":{"line":263,"column":44}}]},"16":{"line":266,"type":"if","locations":[{"start":{"line":266,"column":17},"end":{"line":266,"column":17}},{"start":{"line":266,"column":17},"end":{"line":266,"column":17}}]},"17":{"line":266,"type":"binary-expr","locations":[{"start":{"line":266,"column":21},"end":{"line":266,"column":25}},{"start":{"line":266,"column":29},"end":{"line":266,"column":67}}]},"18":{"line":270,"type":"binary-expr","locations":[{"start":{"line":270,"column":39},"end":{"line":270,"column":43}},{"start":{"line":270,"column":47},"end":{"line":270,"column":59}}]},"19":{"line":536,"type":"if","locations":[{"start":{"line":536,"column":6},"end":{"line":536,"column":6}},{"start":{"line":536,"column":6},"end":{"line":536,"column":6}}]},"20":{"line":548,"type":"if","locations":[{"start":{"line":548,"column":6},"end":{"line":548,"column":6}},{"start":{"line":548,"column":6},"end":{"line":548,"column":6}}]},"21":{"line":555,"type":"if","locations":[{"start":{"line":555,"column":6},"end":{"line":555,"column":6}},{"start":{"line":555,"column":6},"end":{"line":555,"column":6}}]},"22":{"line":562,"type":"switch","locations":[{"start":{"line":563,"column":8},"end":{"line":563,"column":17}},{"start":{"line":564,"column":8},"end":{"line":574,"column":13}},{"start":{"line":575,"column":8},"end":{"line":589,"column":13}},{"start":{"line":590,"column":8},"end":{"line":614,"column":13}},{"start":{"line":615,"column":8},"end":{"line":677,"column":13}},{"start":{"line":678,"column":8},"end":{"line":678,"column":17}},{"start":{"line":679,"column":8},"end":{"line":679,"column":19}},{"start":{"line":680,"column":8},"end":{"line":680,"column":91}}]},"23":{"line":566,"type":"if","locations":[{"start":{"line":566,"column":10},"end":{"line":566,"column":10}},{"start":{"line":566,"column":10},"end":{"line":566,"column":10}}]},"24":{"line":577,"type":"if","locations":[{"start":{"line":577,"column":10},"end":{"line":577,"column":10}},{"start":{"line":577,"column":10},"end":{"line":577,"column":10}}]},"25":{"line":577,"type":"binary-expr","locations":[{"start":{"line":577,"column":14},"end":{"line":577,"column":44}},{"start":{"line":577,"column":48},"end":{"line":577,"column":78}}]},"26":{"line":578,"type":"cond-expr","locations":[{"start":{"line":579,"column":16},"end":{"line":579,"column":61}},{"start":{"line":580,"column":16},"end":{"line":580,"column":61}}]},"27":{"line":592,"type":"if","locations":[{"start":{"line":592,"column":10},"end":{"line":592,"column":10}},{"start":{"line":592,"column":10},"end":{"line":592,"column":10}}]},"28":{"line":597,"type":"if","locations":[{"start":{"line":597,"column":10},"end":{"line":597,"column":10}},{"start":{"line":597,"column":10},"end":{"line":597,"column":10}}]},"29":{"line":616,"type":"if","locations":[{"start":{"line":616,"column":10},"end":{"line":616,"column":10}},{"start":{"line":616,"column":10},"end":{"line":616,"column":10}}]},"30":{"line":618,"type":"if","locations":[{"start":{"line":618,"column":12},"end":{"line":618,"column":12}},{"start":{"line":618,"column":12},"end":{"line":618,"column":12}}]},"31":{"line":618,"type":"binary-expr","locations":[{"start":{"line":618,"column":16},"end":{"line":618,"column":35}},{"start":{"line":618,"column":40},"end":{"line":618,"column":57}},{"start":{"line":618,"column":61},"end":{"line":618,"column":78}}]},"32":{"line":632,"type":"if","locations":[{"start":{"line":632,"column":10},"end":{"line":632,"column":10}},{"start":{"line":632,"column":10},"end":{"line":632,"column":10}}]},"33":{"line":633,"type":"if","locations":[{"start":{"line":633,"column":12},"end":{"line":633,"column":12}},{"start":{"line":633,"column":12},"end":{"line":633,"column":12}}]},"34":{"line":637,"type":"if","locations":[{"start":{"line":637,"column":14},"end":{"line":637,"column":14}},{"start":{"line":637,"column":14},"end":{"line":637,"column":14}}]},"35":{"line":641,"type":"if","locations":[{"start":{"line":641,"column":14},"end":{"line":641,"column":14}},{"start":{"line":641,"column":14},"end":{"line":641,"column":14}}]},"36":{"line":693,"type":"if","locations":[{"start":{"line":693,"column":4},"end":{"line":693,"column":4}},{"start":{"line":693,"column":4},"end":{"line":693,"column":4}}]},"37":{"line":693,"type":"binary-expr","locations":[{"start":{"line":693,"column":9},"end":{"line":693,"column":27}},{"start":{"line":693,"column":31},"end":{"line":693,"column":53}},{"start":{"line":693,"column":58},"end":{"line":693,"column":79}}]}},"code":["'use strict';","","function factory (type, config, load, typed) {","  var parse = load(require('../../expression/parse'));","  var simplify = load(require('./simplify'));","  var ConstantNode = load(require('../../expression/node/ConstantNode'));","  var FunctionNode = load(require('../../expression/node/FunctionNode'));","  var OperatorNode = load(require('../../expression/node/OperatorNode'));","  var ParenthesisNode = load(require('../../expression/node/ParenthesisNode'));","  var SymbolNode = load(require('../../expression/node/SymbolNode'));","","  /**","   * Takes the derivative of an expression expressed in parser Nodes.","   * The derivative will be taken over the supplied variable in the","   * second parameter. If there are multiple variables in the expression,","   * it will return a partial derivative.","   *","   * This uses rules of differentiation which can be found here:","   *","   * - [Differentiation rules (Wikipedia)](http://en.wikipedia.org/wiki/Differentiation_rules)","   *","   * Syntax:","   *","   *     derivative(expr, variable)","   *     derivative(expr, variable, options)","   *","   * Examples:","   *","   *     math.derivative('x^2', 'x');                     // Node {2 * x}","   *     math.derivative('x^2', 'x', {simplify: false});  // Node {2 * 1 * x ^ (2 - 1)","   *     math.derivative('sin(2x)', 'x'));                // Node {2 * cos(2 * x)}","   *     math.derivative('2*x', 'x').eval();              // number 2","   *     math.derivative('x^2', 'x').eval({x: 4});        // number 8","   *     var f = math.parse('x^2');","   *     var x = math.parse('x');","   *     math.derivative(f, x);                           // Node {2 * x}","   *","   * See also:","   *","   *     simplify, parse, eval","   *","   * @param  {Node | string} expr           The expression to differentiate","   * @param  {SymbolNode | string} variable The variable over which to differentiate","   * @param  {{simplify: boolean}} [options]","   *                         There is one option available, `simplify`, which","   *                         is true by default. When false, output will not","   *                         be simplified.","   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode}    The derivative of `expr`","   */","  var derivative = typed('derivative', {","    'Node, SymbolNode, Object': function (expr, variable, options) {","      var constNodes = {};","      constTag(constNodes, expr, variable.name);","      var res = _derivative(expr, constNodes);","      return options.simplify ? simplify(res) : res;","    },","    'Node, SymbolNode': function (expr, variable) {","      return derivative(expr, variable, {simplify: true})","    },","","    'string, SymbolNode': function (expr, variable) {","      return derivative(parse(expr), variable)","    },","    'string, SymbolNode, Object': function (expr, variable, options) {","      return derivative(parse(expr), variable, options)","    },","","    'string, string': function (expr, variable) {","      return derivative(parse(expr), parse(variable))","    },","    'string, string, Object': function (expr, variable, options) {","      return derivative(parse(expr), parse(variable), options)","    },","","    'Node, string': function (expr, variable) {","      return derivative(expr, parse(variable))","    },","    'Node, string, Object': function (expr, variable, options) {","      return derivative(expr, parse(variable), options)","    }","","    // TODO: replace the 8 signatures above with 4 as soon as typed-function supports optional arguments","","    /* TODO: implement and test syntax with order of derivatives -> implement as an option {order: number}","    'Node, SymbolNode, ConstantNode': function (expr, variable, {order}) {","      var res = expr;","      for (var i = 0; i < order; i++) {","        var constNodes = {};","        constTag(constNodes, expr, variable.name);","        res = _derivative(res, constNodes);","      }","      return res;","    }","    */","  });","","  derivative._simplify = true","","  derivative.toTex = function(deriv) {","    return _derivTex.apply(null, deriv.args);","  }","","  var _derivTex = typed('_derivTex', {","    'Node, SymbolNode': function (expr, x) {","      return _derivTex(expr.toString(), x.toString(), 1);","    },","    'Node, SymbolNode, ConstantNode': function (expr, x, order) {","      return _derivTex(expr.toString(), x.name, order.value);","    },","    'string, string, number': function (expr, x, order) {","      var d;","      if (order === 1) {","        d = \"{d\\\\over d\" + x + \"}\";","      }","      else {","        d = \"{d^{\" + order + \"}\\\\over d\" + x + \"^{\" + order + \"}}\";","      }","      return d + \"\\\\left[\" + expr + \"\\\\right]\"","    }","  });","","  /**","   * Does a depth-first search on the expression tree to identify what Nodes","   * are constants (e.g. 2 + 2), and stores the ones that are constants in","   * constNodes. Classification is done as follows:","   *","   *   1. ConstantNodes are constants.","   *   2. If there exists a SymbolNode, of which we are differentiating over,","   *      in the subtree it is not constant.","   *","   * @param  {Object} constNodes  Holds the nodes that are constant","   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node","   * @param  {string} varName     Variable that we are differentiating","   * @return {boolean}  if node is constant","   */","  // TODO: can we rewrite constTag into a pure function?","  var constTag = typed('constTag', {","    'Object, ConstantNode, string': function (constNodes, node) {","      return constNodes[node] = true;","    },","","    'Object, SymbolNode, string': function (constNodes, node, varName) {","      // Treat other variables like constants. For reasoning, see:","      //   https://en.wikipedia.org/wiki/Partial_derivative","      if (node.name != varName) {","        return constNodes[node] = true;","      }","      return false;","    },","","    'Object, ParenthesisNode, string': function (constNodes, node, varName) {","      return constTag(constNodes, node.content, varName);","    },","","    'Object, FunctionAssignmentNode, string': function (constNodes, node, varName) {","      if (node.params.indexOf(varName) == -1) {","        return constNodes[node] = true;","      }","      return constTag(constNodes, node.expr, varName);","    },","","    'Object, FunctionNode | OperatorNode, string': function (constNodes, node, varName) {","      if (node.args.length != 0) {","        var isConst = constTag(constNodes, node.args[0], varName);","        for (var i = 1; i < node.args.length; ++i) {","          isConst = constTag(constNodes, node.args[i], varName) && isConst;","        }","","        if (isConst) {","          return constNodes[node] = true;","        }","      }","      return false;","    }","  });","","  /**","   * Applies differentiation rules.","   *","   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node","   * @param  {Object} constNodes  Holds the nodes that are constant","   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode}    The derivative of `expr`","   */","  var _derivative = typed('_derivative', {","    'ConstantNode, Object': function (node) {","       return new ConstantNode('0', node.valueType);","    },","","    'SymbolNode, Object': function (node, constNodes) {","      if (constNodes[node] !== undefined) {","        return new ConstantNode('0', config.number);","      }","      return new ConstantNode('1', config.number);","    },","","    'ParenthesisNode, Object': function (node, constNodes) {","      return new ParenthesisNode(_derivative(node.content, constNodes));","    },","","    'FunctionAssignmentNode, Object': function (node, constNodes) {","      if (constNodes[node] !== undefined) {","        return new ConstantNode('0', config.number);","      }","      return _derivative(node.expr, constNodes);","    },","","    'FunctionNode, Object': function (node, constNodes) {","      if (node.args.length != 1) {","        funcArgsCheck(node);","      }","","      if (constNodes[node] !== undefined) {","        return new ConstantNode('0', config.number);","      }","","      var arg1 = node.args[0];","      var arg2;","","      var div = false;       // is output a fraction?","      var negative = false;  // is output negative?","","      var funcDerivative;","      switch (node.name) {","        case 'cbrt':","          // d/dx(cbrt(x)) = 1 / (3x^(2/3))","          div = true;","          funcDerivative = new OperatorNode('*', 'multiply', [","            new ConstantNode('3', config.number),","            new OperatorNode('^', 'pow', [","              arg1,","              new OperatorNode('/', 'divide', [","                new ConstantNode('2', config.number),","                new ConstantNode('3', config.number)","              ])","            ])","          ]);","          break;","        case 'sqrt':","        case 'nthRoot':","          // d/dx(sqrt(x)) = 1 / (2*sqrt(x))","          if (node.args.length == 1) {","            div = true;","            funcDerivative = new OperatorNode('*', 'multiply', [","              new ConstantNode('2', config.number),","              new FunctionNode('sqrt', [arg1])","            ]);","            break;","          }","","          // Rearrange from nthRoot(x, a) -> x^(1/a)","          arg2 = new OperatorNode('/', 'divide', [","            new ConstantNode('1', config.number),","            node.args[1]","          ]);","","          // Is a variable?","          constNodes[arg2] = constNodes[node.args[1]];","","          return _derivative(new OperatorNode('^', 'pow', [arg1, arg2]), constNodes);","        case 'log10':","          arg2 = new ConstantNode('10', config.number);","        case 'log':","          if (!arg2 && node.args.length == 1) {","            // d/dx(log(x)) = 1 / x","            funcDerivative = arg1.clone();","          } else if (arg2 || constNodes[node.args[1]] !== undefined) {","            // d/dx(log(x, c)) = 1 / (x*ln(c))","            funcDerivative = new OperatorNode('*', 'multiply', [","              arg1.clone(),","              new FunctionNode('log', [arg2 || node.args[1]])","            ]);","          } else {","            // d/dx(log(f(x), g(x))) = d/dx(log(f(x)) / log(g(x)))","            return _derivative(new OperatorNode('/', 'divide', [","                new FunctionNode('log', [arg1]),","                new FunctionNode('log', [node.args[1]])","              ]), constNodes);","          }","","          div = true;","          break;","        case 'exp':","          // d/dx(e^x) = e^x","          funcDerivative = new FunctionNode('exp', [arg1.clone()]);","          break;","        case 'sin':","          // d/dx(sin(x)) = cos(x)","          funcDerivative = new FunctionNode('cos', [arg1.clone()]);","          break;","        case 'cos':","          // d/dx(cos(x)) = -sin(x)","          funcDerivative = new OperatorNode('-', 'unaryMinus', [","            new FunctionNode('sin', [arg1.clone()])","          ]);","          break;","        case 'tan':","          // d/dx(tan(x)) = sec(x)^2","          funcDerivative = new OperatorNode('^', 'pow', [","            new FunctionNode('sec', [arg1.clone()]),","            new ConstantNode('2', config.number)","          ]);","          break;","        case 'sec':","          // d/dx(sec(x)) = sec(x)tan(x)","          funcDerivative = new OperatorNode('*', 'multiply', [","            node,","            new FunctionNode('tan', [arg1.clone()])","          ]);","          break;","        case 'csc':","          // d/dx(csc(x)) = -csc(x)cot(x)","          negative = true;","          funcDerivative = new OperatorNode('*', 'multiply', [","            node,","            new FunctionNode('cot', [arg1.clone()])","          ]);","          break;","        case 'cot':","          // d/dx(cot(x)) = -csc(x)^2","          negative = true;","          funcDerivative = new OperatorNode('^', 'pow', [","            new FunctionNode('csc', [arg1.clone()]),","            new ConstantNode('2', config.number)","          ]);","          break;","        case 'asin':","          // d/dx(asin(x)) = 1 / sqrt(1 - x^2)","          div = true;","          funcDerivative = new FunctionNode('sqrt', [","            new OperatorNode('-', 'subtract', [","              new ConstantNode('1', config.number),","              new OperatorNode('^', 'pow', [","                arg1.clone(),","                new ConstantNode('2', config.number)","              ])","            ])","          ]);","          break;","        case 'acos':","          // d/dx(acos(x)) = -1 / sqrt(1 - x^2)","          div = true;","          negative = true;","          funcDerivative = new FunctionNode('sqrt', [","            new OperatorNode('-', 'subtract', [","              new ConstantNode('1', config.number),","              new OperatorNode('^', 'pow', [","                arg1.clone(),","                new ConstantNode('2', config.number)","              ])","            ])","          ]);","          break;","        case 'atan':","          // d/dx(atan(x)) = 1 / (x^2 + 1)","          div = true;","          funcDerivative = new OperatorNode('+', 'add', [","            new OperatorNode('^', 'pow', [","              arg1.clone(),","              new ConstantNode('2', config.number)","            ]),","            new ConstantNode('1', config.number)","          ]);","          break;","        case 'asec':","          // d/dx(asec(x)) = 1 / (|x|*sqrt(x^2 - 1))","          div = true;","          funcDerivative = new OperatorNode('*', 'multiply', [","            new FunctionNode('abs', [arg1.clone()]),","            new FunctionNode('sqrt', [","              new OperatorNode('-', 'subtract', [","                new OperatorNode('^', 'pow', [","                  arg1.clone(),","                  new ConstantNode('2', config.number)","                ]),","                new ConstantNode('1', config.number)","              ])","            ])","          ]);","          break;","        case 'acsc':","          // d/dx(acsc(x)) = -1 / (|x|*sqrt(x^2 - 1))","          div = true;","          negative = true;","          funcDerivative = new OperatorNode('*', 'multiply', [","            new FunctionNode('abs', [arg1.clone()]),","            new FunctionNode('sqrt', [","              new OperatorNode('-', 'subtract', [","                new OperatorNode('^', 'pow', [","                  arg1.clone(),","                  new ConstantNode('2', config.number)","                ]),","                new ConstantNode('1', config.number)","              ])","            ])","          ]);","          break;","        case 'acot':","          // d/dx(acot(x)) = -1 / (x^2 + 1)","          div = true;","          negative = true;","          funcDerivative = new OperatorNode('+', 'add', [","            new OperatorNode('^', 'pow', [","              arg1.clone(),","              new ConstantNode('2', config.number)","            ]),","            new ConstantNode('1', config.number)","          ]);","          break;","        case 'sinh':","          // d/dx(sinh(x)) = cosh(x)","          funcDerivative = new FunctionNode('cosh', [arg1.clone()]);","          break;","        case 'cosh':","          // d/dx(cosh(x)) = sinh(x)","          funcDerivative = new FunctionNode('sinh', [arg1.clone()]);","          break;","        case 'tanh':","          // d/dx(tanh(x)) = sech(x)^2","          funcDerivative = new OperatorNode('^', 'pow', [","            new FunctionNode('sech', [arg1.clone()]),","            new ConstantNode('2', config.number)","          ]);","          break;","        case 'sech':","          // d/dx(sech(x)) = -sech(x)tanh(x)","          negative = true;","          funcDerivative = new OperatorNode('*', 'multiply', [","            node,","            new FunctionNode('tanh', [arg1.clone()])","          ]);","          break;","        case 'csch':","          // d/dx(csch(x)) = -csch(x)coth(x)","          negative = true;","          funcDerivative = new OperatorNode('*', 'multiply', [","            node,","            new FunctionNode('coth', [arg1.clone()])","          ]);","          break;","        case 'coth':","          // d/dx(coth(x)) = -csch(x)^2","          negative = true;","          funcDerivative = new OperatorNode('^', 'pow', [","            new FunctionNode('csch', [arg1.clone()]),","            new ConstantNode('2', config.number)","          ]);","          break;","        case 'asinh':","          // d/dx(asinh(x)) = 1 / sqrt(x^2 + 1)","          div = true;","          funcDerivative = new FunctionNode('sqrt', [","            new OperatorNode('+', 'add', [","              new OperatorNode('^', 'pow', [","                arg1.clone(),","                new ConstantNode('2', config.number)","              ]),","              new ConstantNode('1', config.number)","            ])","          ]);","          break;","        case 'acosh':","          // d/dx(acosh(x)) = 1 / sqrt(x^2 - 1); XXX potentially only for x >= 1 (the real spectrum)","          div = true;","          funcDerivative = new FunctionNode('sqrt', [","            new OperatorNode('-', 'subtract', [","              new OperatorNode('^', 'pow', [","                arg1.clone(),","                new ConstantNode('2', config.number)","              ]),","              new ConstantNode('1', config.number),","            ])","          ]);","          break;","        case 'atanh':","          // d/dx(atanh(x)) = 1 / (1 - x^2)","          div = true;","          funcDerivative = new OperatorNode('-', 'subtract', [","            new ConstantNode('1', config.number),","            new OperatorNode('^', 'pow', [","              arg1.clone(),","              new ConstantNode('2', config.number)","            ])","          ]);","          break;","        case 'asech':","          // d/dx(asech(x)) = -1 / (x*sqrt(1 - x^2))","          div = true;","          negative = true;","          funcDerivative = new OperatorNode('*', 'multiply', [","            arg1.clone(),","            new FunctionNode('sqrt', [","              new OperatorNode('-', 'subtract', [","                new ConstantNode('1', config.number),","                new OperatorNode('^', 'pow', [","                  arg1.clone(),","                  new ConstantNode('2', config.number)","                ])","              ])","            ])","          ]);","          break;","        case 'acsch':","          // d/dx(acsch(x)) = -1 / (|x|*sqrt(x^2 + 1))","          div = true;","          negative = true;","          funcDerivative = new OperatorNode('*', 'multiply', [","            new FunctionNode('abs', [arg1.clone()]),","            new FunctionNode('sqrt', [","              new OperatorNode('+', 'add', [","                new OperatorNode('^', 'pow', [","                  arg1.clone(),","                  new ConstantNode('2', config.number)","                ]),","                new ConstantNode('1', config.number)","              ])","            ])","          ]);","          break;","        case 'acoth':","          // d/dx(acoth(x)) = -1 / (1 - x^2)","          div = true;","          negative = true;","          funcDerivative = new OperatorNode('-', 'subtract', [","            new ConstantNode('1', config.number),","            new OperatorNode('^', 'pow', [","              arg1.clone(),","              new ConstantNode('2', config.number)","            ])","          ]);","          break;","        case 'gamma':  // Needs digamma function, d/dx(gamma(x)) = gamma(x)digamma(x)","        default: throw new Error('Function \"' + node.name + '\" not supported by derivative');","      }","","      var op, func;","      if (div) {","        op = '/';","        func = 'divide';","      } else {","        op = '*';","        func = 'multiply';","      }","","      /* Apply chain rule to all functions:","         F(x)  = f(g(x))","         F'(x) = g'(x)*f'(g(x)) */","      var chainDerivative = _derivative(arg1, constNodes);","      if (negative) {","        chainDerivative = new OperatorNode('-', 'unaryMinus', [chainDerivative]);","      }","      return new OperatorNode(op, func, [chainDerivative, funcDerivative]);","    },","","    'OperatorNode, Object': function (node, constNodes) {","      if (constNodes[node] !== undefined) {","        return new ConstantNode('0', config.number);","      }","","      var arg1 = node.args[0];","      var arg2 = node.args[1];","","      switch (node.op) {","        case '+':","        case '-':","          // d/dx(+/-f(x)) = +/-f'(x)","          if (node.args.length == 1) {","            return new OperatorNode(node.op, node.fn, [_derivative(arg1, constNodes)]);","          }","","          // Linearity of differentiation, d/dx(f(x) +/- g(x)) = f'(x) +/- g'(x)","          return new OperatorNode(node.op, node.fn, [","            _derivative(arg1, constNodes),","            _derivative(arg2, constNodes)","          ]);","        case '*':","          // d/dx(c*f(x)) = c*f'(x)","          if (constNodes[arg1] !== undefined || constNodes[arg2] !== undefined) {","            var newArgs = (constNodes[arg1] !== undefined)","              ? [arg1.clone(), _derivative(arg2, constNodes)]","              : [arg2.clone(), _derivative(arg1, constNodes)];","","            return new OperatorNode('*', 'multiply', newArgs);","          }","","          // Product Rule, d/dx(f(x)*g(x)) = f'(x)*g(x) + f(x)*g'(x)","          return new OperatorNode('+', 'add', [","            new OperatorNode('*', 'multiply', [_derivative(arg1, constNodes), arg2.clone()]),","            new OperatorNode('*', 'multiply', [arg1.clone(), _derivative(arg2, constNodes)])","          ]);","        case '/':","          // d/dx(f(x) / c) = f'(x) / c","          if (constNodes[arg2] !== undefined) {","            return new OperatorNode('/', 'divide', [_derivative(arg1, constNodes), arg2]);","          }","","          // Reciprocal Rule, d/dx(c / f(x)) = -c(f'(x)/f(x)^2)","          if (constNodes[arg1] !== undefined) {","            return new OperatorNode('*', 'multiply', [","              new OperatorNode('-', 'unaryMinus', [arg1]),","              new OperatorNode('/', 'divide', [","                _derivative(arg2, constNodes),","                new OperatorNode('^', 'pow', [arg2.clone(), new ConstantNode('2', config.number)])","              ])","            ]);","          }","","          // Quotient rule, d/dx(f(x) / g(x)) = (f'(x)g(x) - f(x)g'(x)) / g(x)^2","          return new OperatorNode('/', 'divide', [","            new OperatorNode('-', 'subtract', [","              new OperatorNode('*', 'multiply', [_derivative(arg1, constNodes), arg2.clone()]),","              new OperatorNode('*', 'multiply', [arg1.clone(), _derivative(arg2, constNodes)])","            ]),","            new OperatorNode('^', 'pow', [arg2.clone(), new ConstantNode('2', config.number)])","          ]);","        case '^':","          if (constNodes[arg1] !== undefined) {","            // If is secretly constant; 0^f(x) = 1 (in JS), 1^f(x) = 1","            if (arg1.isConstantNode && (arg1.value == '0' || arg1.value == '1')) {","              return new ConstantNode('0', config.number);","            }","","            // d/dx(c^f(x)) = c^f(x)*ln(c)*f'(x)","            return new OperatorNode('*', 'multiply', [","              node,","              new OperatorNode('*', 'multiply', [","                new FunctionNode('log', [arg1.clone()]),","                _derivative(arg2.clone(), constNodes)","              ])","            ]);","          }","","          if (constNodes[arg2] !== undefined) {","            if (arg2.isConstantNode) {","              var expValue = arg2.value;","","              // If is secretly constant; f(x)^0 = 1 -> d/dx(1) = 0","              if (expValue == '0') {","                return new ConstantNode('0', config.number);","              }","              // Ignore exponent; f(x)^1 = f(x)","              if (expValue == '1') {","                return _derivative(arg1, constNodes);","              }","            }","","            // Elementary Power Rule, d/dx(f(x)^c) = c*f'(x)*f(x)^(c-1)","            var powMinusOne = new OperatorNode('^', 'pow', [","              arg1.clone(),","              new OperatorNode('-', 'subtract', [","                arg2,","                new ConstantNode('1', config.number)","              ])","            ]);","","            return new OperatorNode('*', 'multiply', [","              arg2.clone(),","              new OperatorNode('*', 'multiply', [","                _derivative(arg1, constNodes),","                powMinusOne","              ]),","            ]);","          }","","          // Functional Power Rule, d/dx(f^g) = f^g*[f'*(g/f) + g'ln(f)]","          return new OperatorNode('*', 'multiply', [","            new OperatorNode('^', 'pow', [arg1.clone(), arg2.clone()]),","            new OperatorNode('+', 'add', [","              new OperatorNode('*', 'multiply', [","                _derivative(arg1, constNodes),","                new OperatorNode('/', 'divide', [arg2.clone(), arg1.clone()])","              ]),","              new OperatorNode('*', 'multiply', [","                _derivative(arg2, constNodes),","                new FunctionNode('log', [arg1.clone()])","              ])","            ])","          ]);","        case '%':","        case 'mod':","        default: throw new Error('Operator \"' + node.op + '\" not supported by derivative');","      }","    }","  });","","  /**","   * Ensures the number of arguments for a function are correct,","   * and will throw an error otherwise.","   *","   * @param {FunctionNode} node","   */","  function funcArgsCheck(node) {","    //TODO add min, max etc","    if ((node.name == 'log' || node.name == 'nthRoot') && node.args.length == 2) {","      return;","    }","","    // There should be an incorrect number of arguments if we reach here","","    // Change all args to constants to avoid unidentified","    // symbol error when compiling function","    for (var i = 0; i < node.args.length; ++i) {","      node.args[i] = new ConstantNode(0);","    }","","    node.compile().eval();","    throw new Error('Expected TypeError, but none found');","  }","","","  return derivative;","}","","exports.name = 'derivative';","exports.factory = factory;",""],"l":{"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"50":0,"52":0,"53":0,"54":0,"55":0,"58":0,"62":0,"65":0,"69":0,"72":0,"76":0,"79":0,"97":0,"99":0,"100":0,"103":0,"105":0,"108":0,"111":0,"112":0,"113":0,"116":0,"118":0,"137":0,"139":0,"145":0,"146":0,"148":0,"152":0,"156":0,"157":0,"159":0,"163":0,"164":0,"165":0,"166":0,"169":0,"170":0,"173":0,"184":0,"186":0,"190":0,"191":0,"193":0,"197":0,"201":0,"202":0,"204":0,"208":0,"209":0,"212":0,"213":0,"216":0,"217":0,"219":0,"220":0,"222":0,"223":0,"226":0,"227":0,"237":0,"241":0,"242":0,"243":0,"247":0,"251":0,"257":0,"259":0,"261":0,"263":0,"265":0,"266":0,"268":0,"274":0,"280":0,"281":0,"284":0,"285":0,"288":0,"289":0,"292":0,"295":0,"298":0,"302":0,"305":0,"309":0,"312":0,"313":0,"317":0,"320":0,"321":0,"325":0,"328":0,"329":0,"338":0,"341":0,"342":0,"343":0,"352":0,"355":0,"356":0,"363":0,"366":0,"367":0,"379":0,"382":0,"383":0,"384":0,"396":0,"399":0,"400":0,"401":0,"408":0,"411":0,"412":0,"415":0,"416":0,"419":0,"423":0,"426":0,"427":0,"431":0,"434":0,"435":0,"439":0,"442":0,"443":0,"447":0,"450":0,"451":0,"460":0,"463":0,"464":0,"473":0,"476":0,"477":0,"484":0,"487":0,"488":0,"489":0,"501":0,"504":0,"505":0,"506":0,"518":0,"521":0,"522":0,"523":0,"530":0,"532":0,"535":0,"536":0,"537":0,"538":0,"540":0,"541":0,"547":0,"548":0,"549":0,"551":0,"555":0,"556":0,"559":0,"560":0,"562":0,"566":0,"567":0,"571":0,"577":0,"578":0,"582":0,"586":0,"592":0,"593":0,"597":0,"598":0,"608":0,"616":0,"618":0,"619":0,"623":0,"632":0,"633":0,"634":0,"637":0,"638":0,"641":0,"642":0,"647":0,"655":0,"665":0,"680":0,"691":1,"693":0,"694":0,"701":0,"702":0,"705":0,"706":0,"710":0,"713":1,"714":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/algebra/simplify.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/algebra/simplify.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":1,"37":0,"38":0,"39":0,"40":0,"41":0,"42":1,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":1,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":1,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":1,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":1,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":1,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":1,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":1,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":1,"224":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0,0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0,0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0,0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0],"70":[0,0],"71":[0,0],"72":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},"fnMap":{"1":{"name":"factory","line":4,"loc":{"start":{"line":4,"column":0},"end":{"line":4,"column":45}}},"2":{"name":"(anonymous_2)","line":68,"loc":{"start":{"line":68,"column":14},"end":{"line":68,"column":30}}},"3":{"name":"(anonymous_3)","line":72,"loc":{"start":{"line":72,"column":21},"end":{"line":72,"column":44}}},"4":{"name":"(anonymous_4)","line":76,"loc":{"start":{"line":76,"column":12},"end":{"line":76,"column":28}}},"5":{"name":"(anonymous_5)","line":80,"loc":{"start":{"line":80,"column":19},"end":{"line":80,"column":42}}},"6":{"name":"removeParens","line":106,"loc":{"start":{"line":106,"column":2},"end":{"line":106,"column":30}}},"7":{"name":"(anonymous_7)","line":107,"loc":{"start":{"line":107,"column":26},"end":{"line":107,"column":55}}},"8":{"name":"_buildRules","line":193,"loc":{"start":{"line":193,"column":2},"end":{"line":193,"column":30}}},"9":{"name":"_getExpandPlaceholderSymbol","line":246,"loc":{"start":{"line":246,"column":2},"end":{"line":246,"column":41}}},"10":{"name":"(anonymous_10)","line":257,"loc":{"start":{"line":257,"column":20},"end":{"line":257,"column":42}}},"11":{"name":"(anonymous_11)","line":299,"loc":{"start":{"line":299,"column":28},"end":{"line":299,"column":54}}},"12":{"name":"getSplits","line":325,"loc":{"start":{"line":325,"column":2},"end":{"line":325,"column":36}}},"13":{"name":"mergeMatch","line":348,"loc":{"start":{"line":348,"column":2},"end":{"line":348,"column":38}}},"14":{"name":"combineChildMatches","line":383,"loc":{"start":{"line":383,"column":2},"end":{"line":383,"column":45}}},"15":{"name":"mergeChildMatches","line":407,"loc":{"start":{"line":407,"column":2},"end":{"line":407,"column":43}}},"16":{"name":"_ruleMatch","line":432,"loc":{"start":{"line":432,"column":2},"end":{"line":432,"column":43}}},"17":{"name":"_exactMatch","line":565,"loc":{"start":{"line":565,"column":2},"end":{"line":565,"column":29}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":607,"column":1}},"2":{"start":{"line":5,"column":2},"end":{"line":5,"column":54}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":73}},"4":{"start":{"line":7,"column":2},"end":{"line":7,"column":73}},"5":{"start":{"line":8,"column":2},"end":{"line":8,"column":73}},"6":{"start":{"line":9,"column":2},"end":{"line":9,"column":79}},"7":{"start":{"line":10,"column":2},"end":{"line":10,"column":69}},"8":{"start":{"line":11,"column":2},"end":{"line":11,"column":57}},"9":{"start":{"line":12,"column":2},"end":{"line":12,"column":70}},"10":{"start":{"line":14,"column":2},"end":{"line":14,"column":46}},"11":{"start":{"line":15,"column":2},"end":{"line":15,"column":41}},"12":{"start":{"line":16,"column":2},"end":{"line":16,"column":41}},"13":{"start":{"line":17,"column":2},"end":{"line":17,"column":29}},"14":{"start":{"line":18,"column":2},"end":{"line":18,"column":35}},"15":{"start":{"line":19,"column":2},"end":{"line":19,"column":35}},"16":{"start":{"line":20,"column":2},"end":{"line":20,"column":59}},"17":{"start":{"line":67,"column":2},"end":{"line":104,"column":5}},"18":{"start":{"line":69,"column":6},"end":{"line":69,"column":51}},"19":{"start":{"line":73,"column":6},"end":{"line":73,"column":42}},"20":{"start":{"line":77,"column":6},"end":{"line":77,"column":44}},"21":{"start":{"line":81,"column":6},"end":{"line":81,"column":33}},"22":{"start":{"line":83,"column":6},"end":{"line":83,"column":35}},"23":{"start":{"line":84,"column":6},"end":{"line":84,"column":53}},"24":{"start":{"line":85,"column":6},"end":{"line":85,"column":24}},"25":{"start":{"line":86,"column":6},"end":{"line":100,"column":7}},"26":{"start":{"line":87,"column":8},"end":{"line":87,"column":20}},"27":{"start":{"line":88,"column":8},"end":{"line":88,"column":23}},"28":{"start":{"line":89,"column":8},"end":{"line":98,"column":9}},"29":{"start":{"line":90,"column":10},"end":{"line":96,"column":11}},"30":{"start":{"line":91,"column":12},"end":{"line":91,"column":32}},"31":{"start":{"line":94,"column":12},"end":{"line":94,"column":25}},"32":{"start":{"line":95,"column":12},"end":{"line":95,"column":43}},"33":{"start":{"line":97,"column":10},"end":{"line":97,"column":26}},"34":{"start":{"line":99,"column":8},"end":{"line":99,"column":51}},"35":{"start":{"line":102,"column":6},"end":{"line":102,"column":17}},"36":{"start":{"line":106,"column":2},"end":{"line":115,"column":3}},"37":{"start":{"line":107,"column":4},"end":{"line":114,"column":7}},"38":{"start":{"line":108,"column":6},"end":{"line":113,"column":7}},"39":{"start":{"line":109,"column":8},"end":{"line":109,"column":28}},"40":{"start":{"line":112,"column":8},"end":{"line":112,"column":20}},"41":{"start":{"line":126,"column":2},"end":{"line":175,"column":4}},"42":{"start":{"line":193,"column":2},"end":{"line":243,"column":3}},"43":{"start":{"line":195,"column":4},"end":{"line":195,"column":21}},"44":{"start":{"line":196,"column":4},"end":{"line":241,"column":5}},"45":{"start":{"line":197,"column":6},"end":{"line":197,"column":26}},"46":{"start":{"line":198,"column":6},"end":{"line":198,"column":18}},"47":{"start":{"line":199,"column":6},"end":{"line":199,"column":33}},"48":{"start":{"line":200,"column":6},"end":{"line":237,"column":7}},"49":{"start":{"line":202,"column":10},"end":{"line":202,"column":36}},"50":{"start":{"line":203,"column":10},"end":{"line":205,"column":11}},"51":{"start":{"line":204,"column":12},"end":{"line":204,"column":63}},"52":{"start":{"line":206,"column":10},"end":{"line":206,"column":38}},"53":{"start":{"line":209,"column":10},"end":{"line":212,"column":11}},"54":{"start":{"line":213,"column":10},"end":{"line":215,"column":11}},"55":{"start":{"line":214,"column":12},"end":{"line":214,"column":44}},"56":{"start":{"line":216,"column":10},"end":{"line":218,"column":11}},"57":{"start":{"line":217,"column":12},"end":{"line":217,"column":52}},"58":{"start":{"line":220,"column":10},"end":{"line":230,"column":11}},"59":{"start":{"line":221,"column":12},"end":{"line":221,"column":61}},"60":{"start":{"line":222,"column":12},"end":{"line":222,"column":58}},"61":{"start":{"line":223,"column":12},"end":{"line":223,"column":34}},"62":{"start":{"line":224,"column":12},"end":{"line":224,"column":74}},"63":{"start":{"line":227,"column":12},"end":{"line":227,"column":40}},"64":{"start":{"line":228,"column":12},"end":{"line":228,"column":43}},"65":{"start":{"line":229,"column":12},"end":{"line":229,"column":66}},"66":{"start":{"line":231,"column":10},"end":{"line":231,"column":16}},"67":{"start":{"line":233,"column":10},"end":{"line":233,"column":25}},"68":{"start":{"line":234,"column":10},"end":{"line":234,"column":16}},"69":{"start":{"line":236,"column":10},"end":{"line":236,"column":67}},"70":{"start":{"line":240,"column":6},"end":{"line":240,"column":28}},"71":{"start":{"line":242,"column":4},"end":{"line":242,"column":19}},"72":{"start":{"line":245,"column":2},"end":{"line":245,"column":18}},"73":{"start":{"line":246,"column":2},"end":{"line":248,"column":3}},"74":{"start":{"line":247,"column":4},"end":{"line":247,"column":42}},"75":{"start":{"line":256,"column":2},"end":{"line":315,"column":5}},"76":{"start":{"line":262,"column":6},"end":{"line":262,"column":21}},"77":{"start":{"line":267,"column":6},"end":{"line":278,"column":7}},"78":{"start":{"line":268,"column":8},"end":{"line":272,"column":9}},"79":{"start":{"line":269,"column":10},"end":{"line":271,"column":11}},"80":{"start":{"line":270,"column":12},"end":{"line":270,"column":55}},"81":{"start":{"line":274,"column":11},"end":{"line":278,"column":7}},"82":{"start":{"line":275,"column":8},"end":{"line":277,"column":9}},"83":{"start":{"line":276,"column":10},"end":{"line":276,"column":53}},"84":{"start":{"line":281,"column":6},"end":{"line":281,"column":24}},"85":{"start":{"line":282,"column":6},"end":{"line":282,"column":47}},"86":{"start":{"line":286,"column":6},"end":{"line":289,"column":7}},"87":{"start":{"line":287,"column":8},"end":{"line":287,"column":31}},"88":{"start":{"line":288,"column":8},"end":{"line":288,"column":54}},"89":{"start":{"line":291,"column":6},"end":{"line":311,"column":7}},"90":{"start":{"line":295,"column":8},"end":{"line":295,"column":27}},"91":{"start":{"line":299,"column":8},"end":{"line":307,"column":11}},"92":{"start":{"line":300,"column":10},"end":{"line":305,"column":11}},"93":{"start":{"line":301,"column":12},"end":{"line":304,"column":13}},"94":{"start":{"line":302,"column":14},"end":{"line":302,"column":65}},"95":{"start":{"line":303,"column":14},"end":{"line":303,"column":29}},"96":{"start":{"line":306,"column":10},"end":{"line":306,"column":19}},"97":{"start":{"line":313,"column":6},"end":{"line":313,"column":17}},"98":{"start":{"line":325,"column":2},"end":{"line":343,"column":3}},"99":{"start":{"line":326,"column":4},"end":{"line":326,"column":17}},"100":{"start":{"line":327,"column":4},"end":{"line":327,"column":25}},"101":{"start":{"line":328,"column":4},"end":{"line":328,"column":48}},"102":{"start":{"line":329,"column":4},"end":{"line":341,"column":5}},"103":{"start":{"line":330,"column":6},"end":{"line":335,"column":7}},"104":{"start":{"line":331,"column":8},"end":{"line":331,"column":39}},"105":{"start":{"line":332,"column":8},"end":{"line":332,"column":31}},"106":{"start":{"line":333,"column":8},"end":{"line":333,"column":78}},"107":{"start":{"line":334,"column":8},"end":{"line":334,"column":50}},"108":{"start":{"line":338,"column":6},"end":{"line":338,"column":37}},"109":{"start":{"line":339,"column":6},"end":{"line":339,"column":76}},"110":{"start":{"line":340,"column":6},"end":{"line":340,"column":48}},"111":{"start":{"line":342,"column":4},"end":{"line":342,"column":15}},"112":{"start":{"line":348,"column":2},"end":{"line":377,"column":3}},"113":{"start":{"line":349,"column":4},"end":{"line":349,"column":32}},"114":{"start":{"line":352,"column":4},"end":{"line":360,"column":5}},"115":{"start":{"line":353,"column":6},"end":{"line":353,"column":17}},"116":{"start":{"line":355,"column":9},"end":{"line":360,"column":5}},"117":{"start":{"line":356,"column":6},"end":{"line":356,"column":20}},"118":{"start":{"line":358,"column":9},"end":{"line":360,"column":5}},"119":{"start":{"line":359,"column":6},"end":{"line":359,"column":20}},"120":{"start":{"line":363,"column":4},"end":{"line":370,"column":5}},"121":{"start":{"line":364,"column":6},"end":{"line":364,"column":55}},"122":{"start":{"line":365,"column":6},"end":{"line":369,"column":7}},"123":{"start":{"line":366,"column":8},"end":{"line":368,"column":9}},"124":{"start":{"line":367,"column":10},"end":{"line":367,"column":22}},"125":{"start":{"line":372,"column":4},"end":{"line":374,"column":5}},"126":{"start":{"line":373,"column":6},"end":{"line":373,"column":55}},"127":{"start":{"line":376,"column":4},"end":{"line":376,"column":15}},"128":{"start":{"line":383,"column":2},"end":{"line":400,"column":3}},"129":{"start":{"line":384,"column":4},"end":{"line":384,"column":17}},"130":{"start":{"line":386,"column":4},"end":{"line":388,"column":5}},"131":{"start":{"line":387,"column":6},"end":{"line":387,"column":17}},"132":{"start":{"line":390,"column":4},"end":{"line":390,"column":15}},"133":{"start":{"line":391,"column":4},"end":{"line":398,"column":5}},"134":{"start":{"line":392,"column":6},"end":{"line":397,"column":7}},"135":{"start":{"line":393,"column":8},"end":{"line":393,"column":50}},"136":{"start":{"line":394,"column":8},"end":{"line":396,"column":9}},"137":{"start":{"line":395,"column":10},"end":{"line":395,"column":27}},"138":{"start":{"line":399,"column":4},"end":{"line":399,"column":15}},"139":{"start":{"line":407,"column":2},"end":{"line":423,"column":3}},"140":{"start":{"line":408,"column":4},"end":{"line":410,"column":5}},"141":{"start":{"line":409,"column":6},"end":{"line":409,"column":26}},"142":{"start":{"line":412,"column":4},"end":{"line":412,"column":56}},"143":{"start":{"line":413,"column":4},"end":{"line":413,"column":24}},"144":{"start":{"line":414,"column":4},"end":{"line":414,"column":20}},"145":{"start":{"line":415,"column":4},"end":{"line":421,"column":5}},"146":{"start":{"line":416,"column":6},"end":{"line":416,"column":38}},"147":{"start":{"line":417,"column":6},"end":{"line":420,"column":7}},"148":{"start":{"line":418,"column":8},"end":{"line":418,"column":25}},"149":{"start":{"line":419,"column":8},"end":{"line":419,"column":33}},"150":{"start":{"line":422,"column":4},"end":{"line":422,"column":22}},"151":{"start":{"line":432,"column":2},"end":{"line":555,"column":3}},"152":{"start":{"line":438,"column":4},"end":{"line":438,"column":34}},"153":{"start":{"line":440,"column":4},"end":{"line":549,"column":5}},"154":{"start":{"line":444,"column":6},"end":{"line":453,"column":7}},"155":{"start":{"line":445,"column":8},"end":{"line":447,"column":9}},"156":{"start":{"line":446,"column":10},"end":{"line":446,"column":20}},"157":{"start":{"line":449,"column":11},"end":{"line":453,"column":7}},"158":{"start":{"line":450,"column":8},"end":{"line":452,"column":9}},"159":{"start":{"line":451,"column":10},"end":{"line":451,"column":20}},"160":{"start":{"line":456,"column":6},"end":{"line":487,"column":7}},"161":{"start":{"line":458,"column":8},"end":{"line":458,"column":30}},"162":{"start":{"line":459,"column":8},"end":{"line":467,"column":9}},"163":{"start":{"line":460,"column":10},"end":{"line":460,"column":66}},"164":{"start":{"line":461,"column":10},"end":{"line":464,"column":11}},"165":{"start":{"line":463,"column":12},"end":{"line":463,"column":22}},"166":{"start":{"line":466,"column":10},"end":{"line":466,"column":40}},"167":{"start":{"line":468,"column":8},"end":{"line":468,"column":46}},"168":{"start":{"line":470,"column":11},"end":{"line":487,"column":7}},"169":{"start":{"line":473,"column":8},"end":{"line":473,"column":51}},"170":{"start":{"line":474,"column":8},"end":{"line":474,"column":30}},"171":{"start":{"line":475,"column":8},"end":{"line":478,"column":9}},"172":{"start":{"line":476,"column":10},"end":{"line":476,"column":59}},"173":{"start":{"line":477,"column":10},"end":{"line":477,"column":55}},"174":{"start":{"line":479,"column":8},"end":{"line":479,"column":28}},"175":{"start":{"line":481,"column":11},"end":{"line":487,"column":7}},"176":{"start":{"line":482,"column":8},"end":{"line":482,"column":86}},"177":{"start":{"line":486,"column":8},"end":{"line":486,"column":18}},"178":{"start":{"line":489,"column":9},"end":{"line":549,"column":5}},"179":{"start":{"line":494,"column":6},"end":{"line":496,"column":7}},"180":{"start":{"line":495,"column":8},"end":{"line":495,"column":60}},"181":{"start":{"line":497,"column":6},"end":{"line":535,"column":7}},"182":{"start":{"line":501,"column":8},"end":{"line":501,"column":46}},"183":{"start":{"line":503,"column":11},"end":{"line":535,"column":7}},"184":{"start":{"line":505,"column":8},"end":{"line":511,"column":9}},"185":{"start":{"line":506,"column":10},"end":{"line":506,"column":48}},"186":{"start":{"line":510,"column":10},"end":{"line":510,"column":20}},"187":{"start":{"line":513,"column":11},"end":{"line":535,"column":7}},"188":{"start":{"line":515,"column":8},"end":{"line":521,"column":9}},"189":{"start":{"line":517,"column":10},"end":{"line":517,"column":20}},"190":{"start":{"line":520,"column":10},"end":{"line":520,"column":48}},"191":{"start":{"line":523,"column":11},"end":{"line":535,"column":7}},"192":{"start":{"line":525,"column":8},"end":{"line":531,"column":9}},"193":{"start":{"line":526,"column":10},"end":{"line":526,"column":48}},"194":{"start":{"line":530,"column":10},"end":{"line":530,"column":20}},"195":{"start":{"line":534,"column":8},"end":{"line":534,"column":64}},"196":{"start":{"line":537,"column":9},"end":{"line":549,"column":5}},"197":{"start":{"line":539,"column":6},"end":{"line":544,"column":7}},"198":{"start":{"line":543,"column":8},"end":{"line":543,"column":18}},"199":{"start":{"line":548,"column":6},"end":{"line":548,"column":16}},"200":{"start":{"line":554,"column":4},"end":{"line":554,"column":15}},"201":{"start":{"line":565,"column":2},"end":{"line":604,"column":3}},"202":{"start":{"line":566,"column":4},"end":{"line":601,"column":5}},"203":{"start":{"line":567,"column":6},"end":{"line":569,"column":7}},"204":{"start":{"line":568,"column":8},"end":{"line":568,"column":21}},"205":{"start":{"line":571,"column":9},"end":{"line":601,"column":5}},"206":{"start":{"line":572,"column":6},"end":{"line":574,"column":7}},"207":{"start":{"line":573,"column":8},"end":{"line":573,"column":21}},"208":{"start":{"line":576,"column":9},"end":{"line":601,"column":5}},"209":{"start":{"line":578,"column":6},"end":{"line":587,"column":7}},"210":{"start":{"line":579,"column":8},"end":{"line":581,"column":9}},"211":{"start":{"line":580,"column":10},"end":{"line":580,"column":23}},"212":{"start":{"line":583,"column":11},"end":{"line":587,"column":7}},"213":{"start":{"line":584,"column":8},"end":{"line":586,"column":9}},"214":{"start":{"line":585,"column":10},"end":{"line":585,"column":23}},"215":{"start":{"line":589,"column":6},"end":{"line":591,"column":7}},"216":{"start":{"line":590,"column":8},"end":{"line":590,"column":21}},"217":{"start":{"line":593,"column":6},"end":{"line":597,"column":7}},"218":{"start":{"line":594,"column":8},"end":{"line":596,"column":9}},"219":{"start":{"line":595,"column":10},"end":{"line":595,"column":23}},"220":{"start":{"line":600,"column":6},"end":{"line":600,"column":19}},"221":{"start":{"line":603,"column":4},"end":{"line":603,"column":16}},"222":{"start":{"line":606,"column":2},"end":{"line":606,"column":18}},"223":{"start":{"line":609,"column":0},"end":{"line":609,"column":26}},"224":{"start":{"line":610,"column":0},"end":{"line":610,"column":26}}},"branchMap":{"1":{"line":90,"type":"if","locations":[{"start":{"line":90,"column":10},"end":{"line":90,"column":10}},{"start":{"line":90,"column":10},"end":{"line":90,"column":10}}]},"2":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":6},"end":{"line":108,"column":6}},{"start":{"line":108,"column":6},"end":{"line":108,"column":6}}]},"3":{"line":200,"type":"switch","locations":[{"start":{"line":201,"column":8},"end":{"line":206,"column":38}},{"start":{"line":208,"column":8},"end":{"line":231,"column":16}},{"start":{"line":232,"column":8},"end":{"line":234,"column":16}},{"start":{"line":235,"column":8},"end":{"line":236,"column":67}}]},"4":{"line":203,"type":"if","locations":[{"start":{"line":203,"column":10},"end":{"line":203,"column":10}},{"start":{"line":203,"column":10},"end":{"line":203,"column":10}}]},"5":{"line":213,"type":"if","locations":[{"start":{"line":213,"column":10},"end":{"line":213,"column":10}},{"start":{"line":213,"column":10},"end":{"line":213,"column":10}}]},"6":{"line":216,"type":"if","locations":[{"start":{"line":216,"column":10},"end":{"line":216,"column":10}},{"start":{"line":216,"column":10},"end":{"line":216,"column":10}}]},"7":{"line":220,"type":"if","locations":[{"start":{"line":220,"column":10},"end":{"line":220,"column":10}},{"start":{"line":220,"column":10},"end":{"line":220,"column":10}}]},"8":{"line":220,"type":"binary-expr","locations":[{"start":{"line":220,"column":14},"end":{"line":220,"column":38}},{"start":{"line":220,"column":42},"end":{"line":220,"column":66}}]},"9":{"line":267,"type":"if","locations":[{"start":{"line":267,"column":6},"end":{"line":267,"column":6}},{"start":{"line":267,"column":6},"end":{"line":267,"column":6}}]},"10":{"line":267,"type":"binary-expr","locations":[{"start":{"line":267,"column":10},"end":{"line":267,"column":37}},{"start":{"line":267,"column":41},"end":{"line":267,"column":68}}]},"11":{"line":268,"type":"if","locations":[{"start":{"line":268,"column":8},"end":{"line":268,"column":8}},{"start":{"line":268,"column":8},"end":{"line":268,"column":8}}]},"12":{"line":274,"type":"if","locations":[{"start":{"line":274,"column":11},"end":{"line":274,"column":11}},{"start":{"line":274,"column":11},"end":{"line":274,"column":11}}]},"13":{"line":275,"type":"if","locations":[{"start":{"line":275,"column":8},"end":{"line":275,"column":8}},{"start":{"line":275,"column":8},"end":{"line":275,"column":8}}]},"14":{"line":286,"type":"if","locations":[{"start":{"line":286,"column":6},"end":{"line":286,"column":6}},{"start":{"line":286,"column":6},"end":{"line":286,"column":6}}]},"15":{"line":286,"type":"binary-expr","locations":[{"start":{"line":286,"column":10},"end":{"line":286,"column":18}},{"start":{"line":286,"column":22},"end":{"line":286,"column":35}}]},"16":{"line":291,"type":"if","locations":[{"start":{"line":291,"column":6},"end":{"line":291,"column":6}},{"start":{"line":291,"column":6},"end":{"line":291,"column":6}}]},"17":{"line":300,"type":"if","locations":[{"start":{"line":300,"column":10},"end":{"line":300,"column":10}},{"start":{"line":300,"column":10},"end":{"line":300,"column":10}}]},"18":{"line":301,"type":"if","locations":[{"start":{"line":301,"column":12},"end":{"line":301,"column":12}},{"start":{"line":301,"column":12},"end":{"line":301,"column":12}}]},"19":{"line":329,"type":"if","locations":[{"start":{"line":329,"column":4},"end":{"line":329,"column":4}},{"start":{"line":329,"column":4},"end":{"line":329,"column":4}}]},"20":{"line":333,"type":"cond-expr","locations":[{"start":{"line":333,"column":43},"end":{"line":333,"column":55}},{"start":{"line":333,"column":58},"end":{"line":333,"column":77}}]},"21":{"line":339,"type":"cond-expr","locations":[{"start":{"line":339,"column":41},"end":{"line":339,"column":53}},{"start":{"line":339,"column":56},"end":{"line":339,"column":75}}]},"22":{"line":352,"type":"if","locations":[{"start":{"line":352,"column":4},"end":{"line":352,"column":4}},{"start":{"line":352,"column":4},"end":{"line":352,"column":4}}]},"23":{"line":352,"type":"binary-expr","locations":[{"start":{"line":352,"column":8},"end":{"line":352,"column":28}},{"start":{"line":352,"column":32},"end":{"line":352,"column":52}}]},"24":{"line":355,"type":"if","locations":[{"start":{"line":355,"column":9},"end":{"line":355,"column":9}},{"start":{"line":355,"column":9},"end":{"line":355,"column":9}}]},"25":{"line":358,"type":"if","locations":[{"start":{"line":358,"column":9},"end":{"line":358,"column":9}},{"start":{"line":358,"column":9},"end":{"line":358,"column":9}}]},"26":{"line":365,"type":"if","locations":[{"start":{"line":365,"column":6},"end":{"line":365,"column":6}},{"start":{"line":365,"column":6},"end":{"line":365,"column":6}}]},"27":{"line":366,"type":"if","locations":[{"start":{"line":366,"column":8},"end":{"line":366,"column":8}},{"start":{"line":366,"column":8},"end":{"line":366,"column":8}}]},"28":{"line":386,"type":"if","locations":[{"start":{"line":386,"column":4},"end":{"line":386,"column":4}},{"start":{"line":386,"column":4},"end":{"line":386,"column":4}}]},"29":{"line":386,"type":"binary-expr","locations":[{"start":{"line":386,"column":8},"end":{"line":386,"column":26}},{"start":{"line":386,"column":30},"end":{"line":386,"column":48}}]},"30":{"line":394,"type":"if","locations":[{"start":{"line":394,"column":8},"end":{"line":394,"column":8}},{"start":{"line":394,"column":8},"end":{"line":394,"column":8}}]},"31":{"line":408,"type":"if","locations":[{"start":{"line":408,"column":4},"end":{"line":408,"column":4}},{"start":{"line":408,"column":4},"end":{"line":408,"column":4}}]},"32":{"line":417,"type":"if","locations":[{"start":{"line":417,"column":6},"end":{"line":417,"column":6}},{"start":{"line":417,"column":6},"end":{"line":417,"column":6}}]},"33":{"line":440,"type":"if","locations":[{"start":{"line":440,"column":4},"end":{"line":440,"column":4}},{"start":{"line":440,"column":4},"end":{"line":440,"column":4}}]},"34":{"line":440,"type":"binary-expr","locations":[{"start":{"line":440,"column":8},"end":{"line":440,"column":36}},{"start":{"line":440,"column":40},"end":{"line":440,"column":68}},{"start":{"line":441,"column":8},"end":{"line":441,"column":36}},{"start":{"line":441,"column":40},"end":{"line":441,"column":68}}]},"35":{"line":444,"type":"if","locations":[{"start":{"line":444,"column":6},"end":{"line":444,"column":6}},{"start":{"line":444,"column":6},"end":{"line":444,"column":6}}]},"36":{"line":445,"type":"if","locations":[{"start":{"line":445,"column":8},"end":{"line":445,"column":8}},{"start":{"line":445,"column":8},"end":{"line":445,"column":8}}]},"37":{"line":445,"type":"binary-expr","locations":[{"start":{"line":445,"column":12},"end":{"line":445,"column":31}},{"start":{"line":445,"column":35},"end":{"line":445,"column":54}}]},"38":{"line":449,"type":"if","locations":[{"start":{"line":449,"column":11},"end":{"line":449,"column":11}},{"start":{"line":449,"column":11},"end":{"line":449,"column":11}}]},"39":{"line":450,"type":"if","locations":[{"start":{"line":450,"column":8},"end":{"line":450,"column":8}},{"start":{"line":450,"column":8},"end":{"line":450,"column":8}}]},"40":{"line":456,"type":"if","locations":[{"start":{"line":456,"column":6},"end":{"line":456,"column":6}},{"start":{"line":456,"column":6},"end":{"line":456,"column":6}}]},"41":{"line":456,"type":"binary-expr","locations":[{"start":{"line":456,"column":10},"end":{"line":456,"column":32}},{"start":{"line":456,"column":36},"end":{"line":456,"column":58}},{"start":{"line":456,"column":62},"end":{"line":456,"column":82}},{"start":{"line":456,"column":86},"end":{"line":456,"column":93}}]},"42":{"line":461,"type":"if","locations":[{"start":{"line":461,"column":10},"end":{"line":461,"column":10}},{"start":{"line":461,"column":10},"end":{"line":461,"column":10}}]},"43":{"line":470,"type":"if","locations":[{"start":{"line":470,"column":11},"end":{"line":470,"column":11}},{"start":{"line":470,"column":11},"end":{"line":470,"column":11}}]},"44":{"line":470,"type":"binary-expr","locations":[{"start":{"line":470,"column":15},"end":{"line":470,"column":36}},{"start":{"line":470,"column":40},"end":{"line":470,"column":62}}]},"45":{"line":481,"type":"if","locations":[{"start":{"line":481,"column":11},"end":{"line":481,"column":11}},{"start":{"line":481,"column":11},"end":{"line":481,"column":11}}]},"46":{"line":489,"type":"if","locations":[{"start":{"line":489,"column":9},"end":{"line":489,"column":9}},{"start":{"line":489,"column":9},"end":{"line":489,"column":9}}]},"47":{"line":494,"type":"if","locations":[{"start":{"line":494,"column":6},"end":{"line":494,"column":6}},{"start":{"line":494,"column":6},"end":{"line":494,"column":6}}]},"48":{"line":497,"type":"if","locations":[{"start":{"line":497,"column":6},"end":{"line":497,"column":6}},{"start":{"line":497,"column":6},"end":{"line":497,"column":6}}]},"49":{"line":497,"type":"binary-expr","locations":[{"start":{"line":497,"column":10},"end":{"line":497,"column":29}},{"start":{"line":497,"column":33},"end":{"line":497,"column":65}}]},"50":{"line":503,"type":"if","locations":[{"start":{"line":503,"column":11},"end":{"line":503,"column":11}},{"start":{"line":503,"column":11},"end":{"line":503,"column":11}}]},"51":{"line":505,"type":"if","locations":[{"start":{"line":505,"column":8},"end":{"line":505,"column":8}},{"start":{"line":505,"column":8},"end":{"line":505,"column":8}}]},"52":{"line":513,"type":"if","locations":[{"start":{"line":513,"column":11},"end":{"line":513,"column":11}},{"start":{"line":513,"column":11},"end":{"line":513,"column":11}}]},"53":{"line":515,"type":"if","locations":[{"start":{"line":515,"column":8},"end":{"line":515,"column":8}},{"start":{"line":515,"column":8},"end":{"line":515,"column":8}}]},"54":{"line":523,"type":"if","locations":[{"start":{"line":523,"column":11},"end":{"line":523,"column":11}},{"start":{"line":523,"column":11},"end":{"line":523,"column":11}}]},"55":{"line":525,"type":"if","locations":[{"start":{"line":525,"column":8},"end":{"line":525,"column":8}},{"start":{"line":525,"column":8},"end":{"line":525,"column":8}}]},"56":{"line":537,"type":"if","locations":[{"start":{"line":537,"column":9},"end":{"line":537,"column":9}},{"start":{"line":537,"column":9},"end":{"line":537,"column":9}}]},"57":{"line":539,"type":"if","locations":[{"start":{"line":539,"column":6},"end":{"line":539,"column":6}},{"start":{"line":539,"column":6},"end":{"line":539,"column":6}}]},"58":{"line":566,"type":"if","locations":[{"start":{"line":566,"column":4},"end":{"line":566,"column":4}},{"start":{"line":566,"column":4},"end":{"line":566,"column":4}}]},"59":{"line":566,"type":"binary-expr","locations":[{"start":{"line":566,"column":7},"end":{"line":566,"column":32}},{"start":{"line":566,"column":36},"end":{"line":566,"column":61}}]},"60":{"line":567,"type":"if","locations":[{"start":{"line":567,"column":6},"end":{"line":567,"column":6}},{"start":{"line":567,"column":6},"end":{"line":567,"column":6}}]},"61":{"line":571,"type":"if","locations":[{"start":{"line":571,"column":9},"end":{"line":571,"column":9}},{"start":{"line":571,"column":9},"end":{"line":571,"column":9}}]},"62":{"line":571,"type":"binary-expr","locations":[{"start":{"line":571,"column":12},"end":{"line":571,"column":35}},{"start":{"line":571,"column":39},"end":{"line":571,"column":62}}]},"63":{"line":572,"type":"if","locations":[{"start":{"line":572,"column":6},"end":{"line":572,"column":6}},{"start":{"line":572,"column":6},"end":{"line":572,"column":6}}]},"64":{"line":576,"type":"if","locations":[{"start":{"line":576,"column":9},"end":{"line":576,"column":9}},{"start":{"line":576,"column":9},"end":{"line":576,"column":9}}]},"65":{"line":576,"type":"binary-expr","locations":[{"start":{"line":576,"column":12},"end":{"line":576,"column":37}},{"start":{"line":576,"column":41},"end":{"line":576,"column":66}},{"start":{"line":577,"column":12},"end":{"line":577,"column":37}},{"start":{"line":577,"column":41},"end":{"line":577,"column":66}}]},"66":{"line":578,"type":"if","locations":[{"start":{"line":578,"column":6},"end":{"line":578,"column":6}},{"start":{"line":578,"column":6},"end":{"line":578,"column":6}}]},"67":{"line":579,"type":"if","locations":[{"start":{"line":579,"column":8},"end":{"line":579,"column":8}},{"start":{"line":579,"column":8},"end":{"line":579,"column":8}}]},"68":{"line":579,"type":"binary-expr","locations":[{"start":{"line":579,"column":12},"end":{"line":579,"column":25}},{"start":{"line":579,"column":29},"end":{"line":579,"column":42}}]},"69":{"line":583,"type":"if","locations":[{"start":{"line":583,"column":11},"end":{"line":583,"column":11}},{"start":{"line":583,"column":11},"end":{"line":583,"column":11}}]},"70":{"line":584,"type":"if","locations":[{"start":{"line":584,"column":8},"end":{"line":584,"column":8}},{"start":{"line":584,"column":8},"end":{"line":584,"column":8}}]},"71":{"line":589,"type":"if","locations":[{"start":{"line":589,"column":6},"end":{"line":589,"column":6}},{"start":{"line":589,"column":6},"end":{"line":589,"column":6}}]},"72":{"line":594,"type":"if","locations":[{"start":{"line":594,"column":8},"end":{"line":594,"column":8}},{"start":{"line":594,"column":8},"end":{"line":594,"column":8}}]}},"code":["'use strict';","","","function factory (type, config, load, typed) {","  var parse = load(require('../../expression/parse'));","  var ConstantNode = load(require('../../expression/node/ConstantNode'));","  var FunctionNode = load(require('../../expression/node/FunctionNode'));","  var OperatorNode = load(require('../../expression/node/OperatorNode'));","  var ParenthesisNode = load(require('../../expression/node/ParenthesisNode'));","  var SymbolNode = load(require('../../expression/node/SymbolNode'));","  var Node = load(require('../../expression/node/Node'));","  var simplifyConstant = load(require('./simplify/simplifyConstant'));","","  var util = load(require('./simplify/util'));","  var isCommutative = util.isCommutative;","  var isAssociative = util.isAssociative;","  var flatten = util.flatten;","  var unflattenr = util.unflattenr;","  var unflattenl = util.unflattenl;","  var createMakeNodeFunction = util.createMakeNodeFunction;","","  /**","   * Simplify an expression tree.","   *","   * It's possible to pass a custom set of rules to the function as second","   * argument. A rule can be specified as an object, string, or function:","   *","   *     var rules = [","   *       { l: 'n1*n3 + n2*n3', r: '(n1+n2)*n3' },","   *       'n1*n3 + n2*n3 -> (n1+n2)*n3',","   *       function (node) {","   *         // ... return a new node or return the node unchanged","   *         return node","   *       }","   *     ]","   *","   *","   * The default list with rules is exposed on the function as `simplify.rules`","   * and can be used as a basis to built a set of custom rules.","   *","   * For more details on the theory, see:","   *","   * - [Strategies for simplifying math expressions (Stackoverflow)](http://stackoverflow.com/questions/7540227/strategies-for-simplifying-math-expressions)","   * - [Symbolic computation - Simplification (Wikipedia)](https://en.wikipedia.org/wiki/Symbolic_computation#Simplification)","   *","   * Syntax:","   *","   *     simplify(expr)","   *     simplify(expr, rules)","   *","   * Examples:","   *","   *     math.simplify('2 * 1 * x ^ (2 - 1)');      // Node {2 * x}","   *     var f = math.parse('2 * 1 * x ^ (2 - 1)');","   *     math.simplify(f);                          // Node {2 * x}","   *","   * See also:","   *","   *     derivative, parse, eval","   *","   * @param {Node | string} expr","   *            The expression to be simplified","   * @param {Array<{l:string, r: string} | string | function>} [rules]","   *            Optional list with custom rules","   * @return {Node} Returns the simplified form of `expr`","   */","  var simplify = typed('simplify', {","    'string': function (expr) {","      return simplify(parse(expr), simplify.rules);","    },","","    'string, Array': function (expr, rules) {","      return simplify(parse(expr), rules);","    },","","    'Node': function (expr) {","      return simplify(expr, simplify.rules);","    },","","    'Node, Array': function (expr, rules) {","      rules = _buildRules(rules);","","      var res = removeParens(expr);","      var after = res.toString({parenthesis: 'all'});","      var before = null;","      while(before != after) {","        lastsym = 0;","        before = after;","        for (var i=0; i<rules.length; i++) {","          if (typeof rules[i] === 'function') {","            res = rules[i](res);","          }","          else {","            flatten(res);","            res = applyRule(res, rules[i]);","          }","          unflattenl(res); // using left-heavy binary tree here since custom rule functions may expect it","        }","        after = res.toString({parenthesis: 'all'});","      }","","      return res;","    }","  });","","  function removeParens(node) {","    return node.transform(function(node, path, parent) {","      if(node.isParenthesisNode) {","        return node.content;","      }","      else {","        return node;","      }","    });","  }","","  // Array of strings, used to build the ruleSet.","  // Each l (left side) and r (right side) are parsed by","  // the expression parser into a node tree.","  // Left hand sides are matched to subtrees within the","  // expression to be parsed and replaced with the right","  // hand side.","  // TODO: Add support for constraints on constants (either in the form of a '=' expression or a callback [callback allows things like comparing symbols alphabetically])","  // To evaluate lhs constants for rhs constants, use: { l: 'c1+c2', r: 'c3', evaluate: 'c3 = c1 + c2' }. Multiple assignments are separated by ';' in block format.","  // It is possible to get into an infinite loop with conflicting rules","  simplify.rules = [","    { l: 'n^0', r: '1' },","    { l: '0*n', r: '0' },","    { l: 'n/n', r: '1'},","    { l: 'n^1', r: 'n' },","    { l: '+n1', r:'n1' },","    { l: 'n--n1', r:'n+n1' },","    { l: 'log(e)', r:'1' },","","    // temporary rules","    { l: 'n-n1', r:'n+-n1' }, // temporarily replace 'subtract' so we can further flatten the 'add' operator","    { l: '-(c*C)', r: '(-c) * C' }, // make non-constant terms positive","    { l: '-C', r: '(-1) * C' },","    { l: 'n/n1^n2', r:'n*n1^-n2' }, // temporarily replace 'divide' so we can further flatten the 'multiply' operator","    { l: 'n/n1', r:'n*n1^-1' },","","    // collect like factors","    { l: 'n*n', r: 'n^2' },","    { l: 'n * n^n1', r: 'n^(n1+1)' },","    { l: 'n^n1 * n^n2', r: 'n^(n1+n2)' },","","    // collect like terms","    { l: 'n+n', r: '2*n' },","    { l: 'n+-n', r: '0' },","    { l: 'n1*n2 + n2', r: '(n1+1)*n2' },","    { l: 'n1*n3 + n2*n3', r: '(n1+n2)*n3' },","","    simplifyConstant,","","    { l: '(-n)*n1', r: '-(n*n1)' }, // make factors positive (and undo 'make non-constant terms positive')","","    // ordering of constants","    { l: 'c+C', r: 'C+c', context: { 'add': { commutative:false } } },","    { l: 'C*c', r: 'c*C', context: { 'multiply': { commutative:false } } },","","    // undo temporary rules","    { l: '(-1) * n', r: '-n' },","    { l: 'n+-n1', r:'n-n1' },  // undo replace 'subtract'","    { l: 'n*(n1^-1)', r:'n/n1' },  // undo replace 'divide'","    { l: 'n*n1^-n2', r:'n/n1^n2' },","    { l: 'n1^-1', r:'1/n1' },","","    { l: 'n*(n1/n2)', r:'(n*n1)/n2' }, // '*' before '/'","    { l: 'n-(n1+n2)', r:'n-n1-n2' }, // '-' before '+'","    // { l: '(n1/n2)/n3', r: 'n1/(n2*n3)' },","    // { l: '(n*n1)/(n*n2)', r: 'n1/n2' },","","    { l: '1*n', r: 'n' } // this pattern can be produced by simplifyConstant","","  ];","","  /**","   * Parse the string array of rules into nodes","   *","   * Example syntax for rules:","   *","   * Position constants to the left in a product:","   * { l: 'n1 * c1', r: 'c1 * n1' }","   * n1 is any Node, and c1 is a ConstantNode.","   *","   * Apply difference of squares formula:","   * { l: '(n1 - n2) * (n1 + n2)', r: 'n1^2 - n2^2' }","   * n1, n2 mean any Node.","   *","   * Short hand notation:","   * 'n1 * c1 -> c1 * n1'","   */","  function _buildRules(rules) {","    // Array of rules to be used to simplify expressions","    var ruleSet = [];","    for(var i=0; i<rules.length; i++) {","      var rule = rules[i];","      var newRule;","      var ruleType = typeof rule;","      switch (ruleType) {","        case 'string':","          var lr = rule.split('->');","          if (lr.length !== 2) {","            throw SyntaxError('Could not parse rule: ' + rule);","          }","          rule = {l: lr[0], r: lr[1]};","          /* falls through */","        case 'object':","          newRule = {","            l: removeParens(parse(rule.l)),","            r: removeParens(parse(rule.r)),","          }","          if(rule.context) {","            newRule.evaluate = rule.context;","          }","          if(rule.evaluate) {","            newRule.evaluate = parse(rule.evaluate);","          }","","          if (newRule.l.isOperatorNode && isAssociative(newRule.l)) {","            var makeNode = createMakeNodeFunction(newRule.l);","            var expandsym = _getExpandPlaceholderSymbol();","            newRule.expanded = {};","            newRule.expanded.l = makeNode([newRule.l.clone(), expandsym]);","            // Push the expandsym into the deepest possible branch.","            // This helps to match the newRule against nodes returned from getSplits() later on.","            flatten(newRule.expanded.l);","            unflattenr(newRule.expanded.l);","            newRule.expanded.r = makeNode([newRule.r, expandsym]);","          }","          break;","        case 'function':","          newRule = rule;","          break;","        default:","          throw TypeError('Unsupported type of rule: ' + ruleType);","      }","     // console.log('Adding rule: ' + rules[i]);","     // console.log(newRule);","      ruleSet.push(newRule);","    }","    return ruleSet;","  }","","  var lastsym = 0;","  function _getExpandPlaceholderSymbol() {","    return new SymbolNode('_p'+lastsym++);","  }","","  /**","   * Returns a simplfied form of node, or the original node if no simplification was possible.","   *","   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node","   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} The simplified form of `expr`, or the original node if no simplification was possible.","   */","  var applyRule = typed('applyRule', {","    'Node, Object': function (node, rule) {","","      //console.log('Entering applyRule(' + node.toString() + ')');","","      // Do not clone node unless we find a match","      var res = node;","","      // First replace our child nodes with their simplified versions","      // If a child could not be simplified, the assignments will have","      // no effect since the node is returned unchanged","      if (res instanceof OperatorNode || res instanceof FunctionNode) {","        if (res.args) {","          for(var i=0; i<res.args.length; i++) {","            res.args[i] = applyRule(res.args[i], rule);","          }","        }","      }","      else if(res instanceof ParenthesisNode) {","        if(res.content) {","          res.content = applyRule(res.content, rule);","        }","      }","","      // Try to match a rule against this node","      var repl = rule.r;","      var matches = _ruleMatch(rule.l, res)[0];","","      // If the rule is associative operator, we can try matching it while allowing additional terms.","      // This allows us to match rules like 'n+n' to the expression '(1+x)+x' or even 'x+1+x' if the operator is commutative.","      if (!matches && rule.expanded) {","        repl = rule.expanded.r;","        matches = _ruleMatch(rule.expanded.l, res)[0];","      }","","      if (matches) {","        // var before = res.toString({parenthesis: 'all'});","","        // Create a new node by cloning the rhs of the matched rule","        res = repl.clone();","","        // Replace placeholders with their respective nodes","        //console.log('Traversing rule ' + res);","        res = res.transform(function(n, path, parent) {","          if(n.isSymbolNode) {","            if(matches.placeholders.hasOwnProperty(n.name)) {","              var replace = matches.placeholders[n.name].clone();","              return replace;","            }","          }","          return n;","        });","","        // var after = res.toString({parenthesis: 'all'});","        // console.log('Simplified ' + before + ' to ' + after);","      }","","      return res;","    }","  });","","  /**","   * Get (binary) combinations of a flattened binary node","   * e.g. +(node1, node2, node3) -> [","   *        +(node1,  +(node2, node3)),","   *        +(node2,  +(node1, node3)),","   *        +(node3,  +(node1, node2))]","   *","   */","  function getSplits(node, context) {","    var res = [];","    var right, rightArgs;","    var makeNode = createMakeNodeFunction(node);","    if (isCommutative(node, context)) {","      for (var i=0; i<node.args.length; i++) {","        rightArgs = node.args.slice(0);","        rightArgs.splice(i, 1);","        right = (rightArgs.length === 1) ? rightArgs[0] : makeNode(rightArgs);","        res.push(makeNode([node.args[i], right]));","      }","    }","    else {","      rightArgs = node.args.slice(1);","      right = (rightArgs.length === 1) ? rightArgs[0] : makeNode(rightArgs);","      res.push(makeNode([node.args[0], right]));","    }","    return res;","  }","","  /**","   * Returns the set union of two match-placeholders or null if there is a conflict.","   */","  function mergeMatch(match1, match2) {","    var res = {placeholders:{}};","","    // Some matches may not have placeholders; this is OK","    if (!match1.placeholders && !match2.placeholders) {","      return res;","    }","    else if (!match1.placeholders) {","      return match2;","    }","    else if (!match2.placeholders) {","      return match1;","    }","","    // Placeholders with the same key must match exactly","    for (var key in match1.placeholders) {","      res.placeholders[key] = match1.placeholders[key];","      if (match2.placeholders.hasOwnProperty(key)) {","        if (!_exactMatch(match1.placeholders[key], match2.placeholders[key] )) {","          return null;","        }","      }","    }","","    for (var key in match2.placeholders) {","      res.placeholders[key] = match2.placeholders[key];","    }","","    return res;","  }","","  /**","   * Combine two lists of matches by applying mergeMatch to the cartesian product of two lists of matches.","   * Each list represents matches found in one child of a node.","   */","  function combineChildMatches(list1, list2) {","    var res = [];","","    if (list1.length === 0 || list2.length === 0) {","      return res;","    }","","    var merged;","    for (var i1 = 0; i1 < list1.length; i1++) {","      for (var i2 = 0; i2 < list2.length; i2++) {","        merged = mergeMatch(list1[i1], list2[i2]);","        if (merged) {","          res.push(merged);","        }","      }","    }","    return res;","  }","","  /**","   * Combine multiple lists of matches by applying mergeMatch to the cartesian product of two lists of matches.","   * Each list represents matches found in one child of a node.","   * Returns a list of unique matches.","   */","  function mergeChildMatches(childMatches) {","    if (childMatches.length === 0) {","      return childMatches;","    }","","    var sets = childMatches.reduce(combineChildMatches);","    var uniqueSets = [];","    var unique = {};","    for(var i = 0; i < sets.length; i++) {","      var s = JSON.stringify(sets[i]);","      if (!unique[s]) {","        unique[s] = true;","        uniqueSets.push(sets[i]);","      }","    }","    return uniqueSets;","  }","","  /**","   * Determines whether node matches rule.","   *","   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} rule","   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node","   * @return {Object} Information about the match, if it exists.","   */","  function _ruleMatch(rule, node, isSplit) {","//    console.log('Entering _ruleMatch(' + JSON.stringify(rule) + ', ' + JSON.stringify(node) + ')');","//    console.log('rule = ' + rule);","//    console.log('node = ' + node);","","//    console.log('Entering _ruleMatch(' + rule.toString() + ', ' + node.toString() + ')');","    var res = [{placeholders:{}}];","","    if (rule instanceof OperatorNode && node instanceof OperatorNode","     || rule instanceof FunctionNode && node instanceof FunctionNode) {","","      // If the rule is an OperatorNode or a FunctionNode, then node must match exactly","      if (rule instanceof OperatorNode) {","        if (rule.op !== node.op || rule.fn !== node.fn) {","          return [];","        }","      }","      else if (rule instanceof FunctionNode) {","        if (rule.name !== node.name) {","          return [];","        }","      }","","      // rule and node match. Search the children of rule and node.","      if (node.args.length === 1 && rule.args.length === 1 || !isAssociative(node) || isSplit) {","        // Expect non-associative operators to match exactly","        var childMatches = [];","        for (var i = 0; i < rule.args.length; i++) {","          var childMatch = _ruleMatch(rule.args[i], node.args[i]);","          if (childMatch.length === 0) {","            // Child did not match, so stop searching immediately","            return [];","          }","          // The child matched, so add the information returned from the child to our result","          childMatches.push(childMatch);","        }","        res = mergeChildMatches(childMatches);","      }","      else if (node.args.length >= 2 && rule.args.length === 2) { // node is flattened, rule is not","        // Associative operators/functions can be split in different ways so we check if the rule matches each","        // them and return their union.","        var splits = getSplits(node, rule.context);","        var splitMatches = [];","        for(var i = 0; i < splits.length; i++) {","          var matchSet = _ruleMatch(rule, splits[i], true); // recursing at the same tree depth here","          splitMatches = splitMatches.concat(matchSet);","        }","        return splitMatches;","      }","      else if (rule.args.length > 2) {","        throw Error('Unexpected non-binary associative function: ' + rule.toString());","      }","      else {","        // Incorrect number of arguments in rule and node, so no match","        return [];","      }","    }","    else if (rule instanceof SymbolNode) {","      // If the rule is a SymbolNode, then it carries a special meaning","      // according to the first character of the symbol node name.","      // c.* matches a ConstantNode","      // n.* matches any node","      if (rule.name.length === 0) {","        throw new Error('Symbol in rule has 0 length...!?');","      }","      if (rule.name[0] == 'n' || rule.name.substring(0,2) == '_p') {","        // rule matches _anything_, so assign this node to the rule.name placeholder","        // Assign node to the rule.name placeholder.","        // Our parent will check for matches among placeholders.","        res[0].placeholders[rule.name] = node;","      }","      else if (rule.name[0] == 'v') {","        // rule matches any variable thing (not a ConstantNode)","        if(!node.isConstantNode) {","          res[0].placeholders[rule.name] = node;","        }","        else {","          // Mis-match: rule was expecting something other than a ConstantNode","          return [];","        }","      }","      else if (rule.name[0] == 'C') {","        // rule matches anything but a ConstantNode","        if(node instanceof ConstantNode) {","          // Mis-match: rule was expecting not a ConstantNode","          return [];","        }","        else {","          res[0].placeholders[rule.name] = node;","        }","      }","      else if (rule.name[0] == 'c') {","        // rule matches any ConstantNode","        if(node instanceof ConstantNode) {","          res[0].placeholders[rule.name] = node;","        }","        else {","          // Mis-match: rule was expecting a ConstantNode","          return [];","        }","      }","      else {","        throw new Error('Invalid symbol in rule: ' + rule.name);","      }","    }","    else if (rule instanceof ConstantNode) {","      // Literal constant in our rule, so much match node exactly","      if(rule.value === node.value) {","        // The constants match","      }","      else {","        return [];","      }","    }","    else {","      // Some other node was encountered which we aren't prepared for, so no match","      return [];","    }","","    // It's a match!","","    // console.log('_ruleMatch(' + rule.toString() + ', ' + node.toString() + ') found a match');","    return res;","  }","","","  /**","   * Determines whether p and q (and all their children nodes) are identical.","   *","   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} p","   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} q","   * @return {Object} Information about the match, if it exists.","   */","  function _exactMatch(p, q) {","    if(p instanceof ConstantNode && q instanceof ConstantNode) {","      if(p.value !== q.value) {","        return false;","      }","    }","    else if(p instanceof SymbolNode && q instanceof SymbolNode) {","      if(p.name !== q.name) {","        return false;","      }","    }","    else if(p instanceof OperatorNode && q instanceof OperatorNode","         || p instanceof FunctionNode && q instanceof FunctionNode) {","      if (p instanceof OperatorNode) {","        if (p.op !== q.op || p.fn !== q.fn) {","          return false;","        }","      }","      else if (p instanceof FunctionNode) {","        if (p.name !== q.name) {","          return false;","        }","      }","","      if(p.args.length !== q.args.length) {","        return false;","      }","","      for(var i=0; i<p.args.length; i++) {","        if(!_exactMatch(p.args[i], q.args[i])) {","          return false;","        }","      }","    }","    else {","      return false;","    }","","    return true;","  }","","  return simplify;","}","","exports.name = 'simplify';","exports.factory = factory;",""],"l":{"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"67":0,"69":0,"73":0,"77":0,"81":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"94":0,"95":0,"97":0,"99":0,"102":0,"106":1,"107":0,"108":0,"109":0,"112":0,"126":0,"193":1,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"202":0,"203":0,"204":0,"206":0,"209":0,"213":0,"214":0,"216":0,"217":0,"220":0,"221":0,"222":0,"223":0,"224":0,"227":0,"228":0,"229":0,"231":0,"233":0,"234":0,"236":0,"240":0,"242":0,"245":0,"246":1,"247":0,"256":0,"262":0,"267":0,"268":0,"269":0,"270":0,"274":0,"275":0,"276":0,"281":0,"282":0,"286":0,"287":0,"288":0,"291":0,"295":0,"299":0,"300":0,"301":0,"302":0,"303":0,"306":0,"313":0,"325":1,"326":0,"327":0,"328":0,"329":0,"330":0,"331":0,"332":0,"333":0,"334":0,"338":0,"339":0,"340":0,"342":0,"348":1,"349":0,"352":0,"353":0,"355":0,"356":0,"358":0,"359":0,"363":0,"364":0,"365":0,"366":0,"367":0,"372":0,"373":0,"376":0,"383":1,"384":0,"386":0,"387":0,"390":0,"391":0,"392":0,"393":0,"394":0,"395":0,"399":0,"407":1,"408":0,"409":0,"412":0,"413":0,"414":0,"415":0,"416":0,"417":0,"418":0,"419":0,"422":0,"432":1,"438":0,"440":0,"444":0,"445":0,"446":0,"449":0,"450":0,"451":0,"456":0,"458":0,"459":0,"460":0,"461":0,"463":0,"466":0,"468":0,"470":0,"473":0,"474":0,"475":0,"476":0,"477":0,"479":0,"481":0,"482":0,"486":0,"489":0,"494":0,"495":0,"497":0,"501":0,"503":0,"505":0,"506":0,"510":0,"513":0,"515":0,"517":0,"520":0,"523":0,"525":0,"526":0,"530":0,"534":0,"537":0,"539":0,"543":0,"548":0,"554":0,"565":1,"566":0,"567":0,"568":0,"571":0,"572":0,"573":0,"576":0,"578":0,"579":0,"580":0,"583":0,"584":0,"585":0,"589":0,"590":0,"593":0,"594":0,"595":0,"600":0,"603":0,"606":0,"609":1,"610":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/algebra/decomposition/lup.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/algebra/decomposition/lup.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":1,"163":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"fnMap":{"1":{"name":"factory","line":7,"loc":{"start":{"line":7,"column":0},"end":{"line":7,"column":45}}},"2":{"name":"(anonymous_2)","line":51,"loc":{"start":{"line":51,"column":19},"end":{"line":51,"column":32}}},"3":{"name":"(anonymous_3)","line":55,"loc":{"start":{"line":55,"column":20},"end":{"line":55,"column":33}}},"4":{"name":"(anonymous_4)","line":59,"loc":{"start":{"line":59,"column":13},"end":{"line":59,"column":26}}},"5":{"name":"(anonymous_5)","line":73,"loc":{"start":{"line":73,"column":18},"end":{"line":73,"column":31}}},"6":{"name":"(anonymous_6)","line":224,"loc":{"start":{"line":224,"column":16},"end":{"line":224,"column":28}}},"7":{"name":"(anonymous_7)","line":230,"loc":{"start":{"line":230,"column":19},"end":{"line":230,"column":32}}},"8":{"name":"(anonymous_8)","line":260,"loc":{"start":{"line":260,"column":22},"end":{"line":260,"column":38}}},"9":{"name":"(anonymous_9)","line":298,"loc":{"start":{"line":298,"column":30},"end":{"line":298,"column":48}}},"10":{"name":"(anonymous_10)","line":300,"loc":{"start":{"line":300,"column":61},"end":{"line":300,"column":79}}},"11":{"name":"(anonymous_11)","line":314,"loc":{"start":{"line":314,"column":35},"end":{"line":314,"column":51}}},"12":{"name":"(anonymous_12)","line":339,"loc":{"start":{"line":339,"column":31},"end":{"line":339,"column":47}}},"13":{"name":"(anonymous_13)","line":377,"loc":{"start":{"line":377,"column":16},"end":{"line":377,"column":28}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":43}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":25}},"3":{"start":{"line":7,"column":0},"end":{"line":384,"column":1}},"4":{"start":{"line":9,"column":2},"end":{"line":9,"column":69}},"5":{"start":{"line":10,"column":2},"end":{"line":10,"column":50}},"6":{"start":{"line":11,"column":2},"end":{"line":11,"column":62}},"7":{"start":{"line":12,"column":2},"end":{"line":12,"column":68}},"8":{"start":{"line":13,"column":2},"end":{"line":13,"column":72}},"9":{"start":{"line":14,"column":2},"end":{"line":14,"column":60}},"10":{"start":{"line":15,"column":2},"end":{"line":15,"column":56}},"11":{"start":{"line":16,"column":2},"end":{"line":16,"column":66}},"12":{"start":{"line":17,"column":2},"end":{"line":17,"column":64}},"13":{"start":{"line":19,"column":2},"end":{"line":19,"column":39}},"14":{"start":{"line":20,"column":2},"end":{"line":20,"column":37}},"15":{"start":{"line":21,"column":2},"end":{"line":21,"column":21}},"16":{"start":{"line":49,"column":2},"end":{"line":71,"column":5}},"17":{"start":{"line":52,"column":6},"end":{"line":52,"column":26}},"18":{"start":{"line":56,"column":6},"end":{"line":56,"column":27}},"19":{"start":{"line":61,"column":6},"end":{"line":61,"column":24}},"20":{"start":{"line":63,"column":6},"end":{"line":63,"column":27}},"21":{"start":{"line":65,"column":6},"end":{"line":69,"column":8}},"22":{"start":{"line":73,"column":2},"end":{"line":228,"column":4}},"23":{"start":{"line":75,"column":4},"end":{"line":75,"column":26}},"24":{"start":{"line":76,"column":4},"end":{"line":76,"column":29}},"25":{"start":{"line":78,"column":4},"end":{"line":78,"column":36}},"26":{"start":{"line":80,"column":4},"end":{"line":80,"column":37}},"27":{"start":{"line":82,"column":4},"end":{"line":82,"column":19}},"28":{"start":{"line":83,"column":4},"end":{"line":83,"column":26}},"29":{"start":{"line":85,"column":4},"end":{"line":85,"column":19}},"30":{"start":{"line":86,"column":4},"end":{"line":86,"column":29}},"31":{"start":{"line":88,"column":4},"end":{"line":88,"column":16}},"32":{"start":{"line":90,"column":4},"end":{"line":90,"column":15}},"33":{"start":{"line":91,"column":4},"end":{"line":92,"column":15}},"34":{"start":{"line":92,"column":6},"end":{"line":92,"column":15}},"35":{"start":{"line":94,"column":4},"end":{"line":150,"column":5}},"36":{"start":{"line":96,"column":6},"end":{"line":110,"column":7}},"37":{"start":{"line":98,"column":8},"end":{"line":109,"column":9}},"38":{"start":{"line":100,"column":10},"end":{"line":100,"column":35}},"39":{"start":{"line":102,"column":10},"end":{"line":102,"column":20}},"40":{"start":{"line":104,"column":10},"end":{"line":107,"column":11}},"41":{"start":{"line":106,"column":12},"end":{"line":106,"column":69}},"42":{"start":{"line":108,"column":10},"end":{"line":108,"column":47}},"43":{"start":{"line":112,"column":6},"end":{"line":112,"column":17}},"44":{"start":{"line":113,"column":6},"end":{"line":113,"column":20}},"45":{"start":{"line":114,"column":6},"end":{"line":114,"column":18}},"46":{"start":{"line":116,"column":6},"end":{"line":130,"column":7}},"47":{"start":{"line":118,"column":8},"end":{"line":118,"column":27}},"48":{"start":{"line":120,"column":8},"end":{"line":120,"column":26}},"49":{"start":{"line":122,"column":8},"end":{"line":129,"column":9}},"50":{"start":{"line":124,"column":10},"end":{"line":124,"column":17}},"51":{"start":{"line":126,"column":10},"end":{"line":126,"column":23}},"52":{"start":{"line":128,"column":10},"end":{"line":128,"column":18}},"53":{"start":{"line":132,"column":6},"end":{"line":137,"column":7}},"54":{"start":{"line":134,"column":8},"end":{"line":134,"column":40}},"55":{"start":{"line":136,"column":8},"end":{"line":136,"column":43}},"56":{"start":{"line":139,"column":6},"end":{"line":149,"column":7}},"57":{"start":{"line":141,"column":8},"end":{"line":148,"column":9}},"58":{"start":{"line":143,"column":10},"end":{"line":143,"column":31}},"59":{"start":{"line":144,"column":10},"end":{"line":147,"column":11}},"60":{"start":{"line":146,"column":12},"end":{"line":146,"column":55}},"61":{"start":{"line":152,"column":4},"end":{"line":204,"column":5}},"62":{"start":{"line":154,"column":6},"end":{"line":203,"column":7}},"63":{"start":{"line":156,"column":8},"end":{"line":164,"column":9}},"64":{"start":{"line":158,"column":10},"end":{"line":161,"column":11}},"65":{"start":{"line":160,"column":12},"end":{"line":160,"column":26}},"66":{"start":{"line":163,"column":10},"end":{"line":163,"column":24}},"67":{"start":{"line":166,"column":8},"end":{"line":178,"column":9}},"68":{"start":{"line":168,"column":10},"end":{"line":171,"column":11}},"69":{"start":{"line":170,"column":12},"end":{"line":170,"column":37}},"70":{"start":{"line":173,"column":10},"end":{"line":176,"column":11}},"71":{"start":{"line":175,"column":12},"end":{"line":175,"column":28}},"72":{"start":{"line":177,"column":10},"end":{"line":177,"column":19}},"73":{"start":{"line":180,"column":8},"end":{"line":192,"column":9}},"74":{"start":{"line":182,"column":10},"end":{"line":185,"column":11}},"75":{"start":{"line":184,"column":12},"end":{"line":184,"column":37}},"76":{"start":{"line":187,"column":10},"end":{"line":190,"column":11}},"77":{"start":{"line":189,"column":12},"end":{"line":189,"column":28}},"78":{"start":{"line":191,"column":10},"end":{"line":191,"column":19}},"79":{"start":{"line":194,"column":8},"end":{"line":197,"column":9}},"80":{"start":{"line":196,"column":10},"end":{"line":196,"column":26}},"81":{"start":{"line":199,"column":8},"end":{"line":202,"column":9}},"82":{"start":{"line":201,"column":10},"end":{"line":201,"column":35}},"83":{"start":{"line":206,"column":4},"end":{"line":209,"column":7}},"84":{"start":{"line":211,"column":4},"end":{"line":214,"column":7}},"85":{"start":{"line":216,"column":4},"end":{"line":216,"column":16}},"86":{"start":{"line":217,"column":4},"end":{"line":218,"column":19}},"87":{"start":{"line":218,"column":6},"end":{"line":218,"column":19}},"88":{"start":{"line":220,"column":4},"end":{"line":227,"column":6}},"89":{"start":{"line":225,"column":8},"end":{"line":225,"column":90}},"90":{"start":{"line":230,"column":2},"end":{"line":381,"column":4}},"91":{"start":{"line":232,"column":4},"end":{"line":232,"column":26}},"92":{"start":{"line":233,"column":4},"end":{"line":233,"column":29}},"93":{"start":{"line":235,"column":4},"end":{"line":235,"column":36}},"94":{"start":{"line":237,"column":4},"end":{"line":237,"column":27}},"95":{"start":{"line":238,"column":4},"end":{"line":238,"column":25}},"96":{"start":{"line":239,"column":4},"end":{"line":239,"column":21}},"97":{"start":{"line":241,"column":4},"end":{"line":241,"column":21}},"98":{"start":{"line":242,"column":4},"end":{"line":242,"column":20}},"99":{"start":{"line":243,"column":4},"end":{"line":243,"column":18}},"100":{"start":{"line":244,"column":4},"end":{"line":244,"column":26}},"101":{"start":{"line":246,"column":4},"end":{"line":246,"column":21}},"102":{"start":{"line":247,"column":4},"end":{"line":247,"column":20}},"103":{"start":{"line":248,"column":4},"end":{"line":248,"column":18}},"104":{"start":{"line":249,"column":4},"end":{"line":249,"column":29}},"105":{"start":{"line":251,"column":4},"end":{"line":251,"column":16}},"106":{"start":{"line":253,"column":4},"end":{"line":253,"column":19}},"107":{"start":{"line":254,"column":4},"end":{"line":254,"column":19}},"108":{"start":{"line":255,"column":4},"end":{"line":258,"column":5}},"109":{"start":{"line":256,"column":6},"end":{"line":256,"column":19}},"110":{"start":{"line":257,"column":6},"end":{"line":257,"column":19}},"111":{"start":{"line":260,"column":4},"end":{"line":270,"column":6}},"112":{"start":{"line":262,"column":6},"end":{"line":262,"column":24}},"113":{"start":{"line":263,"column":6},"end":{"line":263,"column":24}},"114":{"start":{"line":265,"column":6},"end":{"line":265,"column":20}},"115":{"start":{"line":266,"column":6},"end":{"line":266,"column":20}},"116":{"start":{"line":268,"column":6},"end":{"line":268,"column":20}},"117":{"start":{"line":269,"column":6},"end":{"line":269,"column":20}},"118":{"start":{"line":272,"column":4},"end":{"line":357,"column":5}},"119":{"start":{"line":274,"column":6},"end":{"line":274,"column":26}},"120":{"start":{"line":276,"column":6},"end":{"line":282,"column":7}},"121":{"start":{"line":278,"column":8},"end":{"line":278,"column":34}},"122":{"start":{"line":280,"column":8},"end":{"line":280,"column":24}},"123":{"start":{"line":281,"column":8},"end":{"line":281,"column":23}},"124":{"start":{"line":284,"column":6},"end":{"line":284,"column":32}},"125":{"start":{"line":286,"column":6},"end":{"line":286,"column":22}},"126":{"start":{"line":287,"column":6},"end":{"line":287,"column":26}},"127":{"start":{"line":289,"column":6},"end":{"line":294,"column":7}},"128":{"start":{"line":291,"column":8},"end":{"line":291,"column":21}},"129":{"start":{"line":293,"column":8},"end":{"line":293,"column":37}},"130":{"start":{"line":296,"column":6},"end":{"line":308,"column":7}},"131":{"start":{"line":298,"column":8},"end":{"line":307,"column":11}},"132":{"start":{"line":300,"column":10},"end":{"line":306,"column":13}},"133":{"start":{"line":302,"column":12},"end":{"line":305,"column":13}},"134":{"start":{"line":304,"column":14},"end":{"line":304,"column":70}},"135":{"start":{"line":310,"column":6},"end":{"line":310,"column":17}},"136":{"start":{"line":311,"column":6},"end":{"line":311,"column":27}},"137":{"start":{"line":312,"column":6},"end":{"line":312,"column":27}},"138":{"start":{"line":314,"column":6},"end":{"line":326,"column":9}},"139":{"start":{"line":316,"column":8},"end":{"line":316,"column":26}},"140":{"start":{"line":318,"column":8},"end":{"line":325,"column":9}},"141":{"start":{"line":320,"column":10},"end":{"line":320,"column":17}},"142":{"start":{"line":322,"column":10},"end":{"line":322,"column":23}},"143":{"start":{"line":324,"column":10},"end":{"line":324,"column":18}},"144":{"start":{"line":328,"column":6},"end":{"line":337,"column":7}},"145":{"start":{"line":330,"column":8},"end":{"line":330,"column":71}},"146":{"start":{"line":332,"column":8},"end":{"line":332,"column":71}},"147":{"start":{"line":334,"column":8},"end":{"line":334,"column":24}},"148":{"start":{"line":336,"column":8},"end":{"line":336,"column":27}},"149":{"start":{"line":339,"column":6},"end":{"line":356,"column":9}},"150":{"start":{"line":341,"column":8},"end":{"line":355,"column":9}},"151":{"start":{"line":343,"column":10},"end":{"line":343,"column":26}},"152":{"start":{"line":344,"column":10},"end":{"line":344,"column":25}},"153":{"start":{"line":348,"column":10},"end":{"line":348,"column":35}},"154":{"start":{"line":350,"column":10},"end":{"line":354,"column":11}},"155":{"start":{"line":352,"column":12},"end":{"line":352,"column":28}},"156":{"start":{"line":353,"column":12},"end":{"line":353,"column":27}},"157":{"start":{"line":359,"column":4},"end":{"line":359,"column":30}},"158":{"start":{"line":360,"column":4},"end":{"line":360,"column":30}},"159":{"start":{"line":363,"column":4},"end":{"line":380,"column":6}},"160":{"start":{"line":378,"column":8},"end":{"line":378,"column":90}},"161":{"start":{"line":383,"column":2},"end":{"line":383,"column":13}},"162":{"start":{"line":386,"column":0},"end":{"line":386,"column":21}},"163":{"start":{"line":387,"column":0},"end":{"line":387,"column":26}}},"branchMap":{"1":{"line":96,"type":"if","locations":[{"start":{"line":96,"column":6},"end":{"line":96,"column":6}},{"start":{"line":96,"column":6},"end":{"line":96,"column":6}}]},"2":{"line":122,"type":"if","locations":[{"start":{"line":122,"column":8},"end":{"line":122,"column":8}},{"start":{"line":122,"column":8},"end":{"line":122,"column":8}}]},"3":{"line":132,"type":"if","locations":[{"start":{"line":132,"column":6},"end":{"line":132,"column":6}},{"start":{"line":132,"column":6},"end":{"line":132,"column":6}}]},"4":{"line":139,"type":"if","locations":[{"start":{"line":139,"column":6},"end":{"line":139,"column":6}},{"start":{"line":139,"column":6},"end":{"line":139,"column":6}}]},"5":{"line":144,"type":"if","locations":[{"start":{"line":144,"column":10},"end":{"line":144,"column":10}},{"start":{"line":144,"column":10},"end":{"line":144,"column":10}}]},"6":{"line":156,"type":"if","locations":[{"start":{"line":156,"column":8},"end":{"line":156,"column":8}},{"start":{"line":156,"column":8},"end":{"line":156,"column":8}}]},"7":{"line":158,"type":"if","locations":[{"start":{"line":158,"column":10},"end":{"line":158,"column":10}},{"start":{"line":158,"column":10},"end":{"line":158,"column":10}}]},"8":{"line":166,"type":"if","locations":[{"start":{"line":166,"column":8},"end":{"line":166,"column":8}},{"start":{"line":166,"column":8},"end":{"line":166,"column":8}}]},"9":{"line":168,"type":"if","locations":[{"start":{"line":168,"column":10},"end":{"line":168,"column":10}},{"start":{"line":168,"column":10},"end":{"line":168,"column":10}}]},"10":{"line":173,"type":"if","locations":[{"start":{"line":173,"column":10},"end":{"line":173,"column":10}},{"start":{"line":173,"column":10},"end":{"line":173,"column":10}}]},"11":{"line":180,"type":"if","locations":[{"start":{"line":180,"column":8},"end":{"line":180,"column":8}},{"start":{"line":180,"column":8},"end":{"line":180,"column":8}}]},"12":{"line":182,"type":"if","locations":[{"start":{"line":182,"column":10},"end":{"line":182,"column":10}},{"start":{"line":182,"column":10},"end":{"line":182,"column":10}}]},"13":{"line":187,"type":"if","locations":[{"start":{"line":187,"column":10},"end":{"line":187,"column":10}},{"start":{"line":187,"column":10},"end":{"line":187,"column":10}}]},"14":{"line":194,"type":"if","locations":[{"start":{"line":194,"column":8},"end":{"line":194,"column":8}},{"start":{"line":194,"column":8},"end":{"line":194,"column":8}}]},"15":{"line":199,"type":"if","locations":[{"start":{"line":199,"column":8},"end":{"line":199,"column":8}},{"start":{"line":199,"column":8},"end":{"line":199,"column":8}}]},"16":{"line":276,"type":"if","locations":[{"start":{"line":276,"column":6},"end":{"line":276,"column":6}},{"start":{"line":276,"column":6},"end":{"line":276,"column":6}}]},"17":{"line":296,"type":"if","locations":[{"start":{"line":296,"column":6},"end":{"line":296,"column":6}},{"start":{"line":296,"column":6},"end":{"line":296,"column":6}}]},"18":{"line":302,"type":"if","locations":[{"start":{"line":302,"column":12},"end":{"line":302,"column":12}},{"start":{"line":302,"column":12},"end":{"line":302,"column":12}}]},"19":{"line":318,"type":"if","locations":[{"start":{"line":318,"column":8},"end":{"line":318,"column":8}},{"start":{"line":318,"column":8},"end":{"line":318,"column":8}}]},"20":{"line":328,"type":"if","locations":[{"start":{"line":328,"column":6},"end":{"line":328,"column":6}},{"start":{"line":328,"column":6},"end":{"line":328,"column":6}}]},"21":{"line":341,"type":"if","locations":[{"start":{"line":341,"column":8},"end":{"line":341,"column":8}},{"start":{"line":341,"column":8},"end":{"line":341,"column":8}}]},"22":{"line":350,"type":"if","locations":[{"start":{"line":350,"column":10},"end":{"line":350,"column":10}},{"start":{"line":350,"column":10},"end":{"line":350,"column":10}}]}},"code":["'use strict';","","var util = require('../../../utils/index');","","var object = util.object;","","function factory (type, config, load, typed) {","","  var matrix = load(require('../../../type/matrix/function/matrix'));","  var abs = load(require('../../arithmetic/abs'));","  var addScalar = load(require('../../arithmetic/addScalar'));","  var divideScalar = load(require('../../arithmetic/divideScalar'));","  var multiplyScalar = load(require('../../arithmetic/multiplyScalar'));","  var subtract = load(require('../../arithmetic/subtract'));","  var larger = load(require('../../relational/larger'));","  var equalScalar = load(require('../../relational/equalScalar'));","  var unaryMinus = load(require('../../arithmetic/unaryMinus'));","  ","  var SparseMatrix = type.SparseMatrix;","  var DenseMatrix = type.DenseMatrix;","  var Spa = type.Spa;","  ","  /**","   * Calculate the Matrix LU decomposition with partial pivoting. Matrix `A` is decomposed in two matrices (`L`, `U`) and a","   * row permutation vector `p` where `A[p,:] = L * U`","   *","   * Syntax:","   *","   *    math.lup(A);","   *","   * Example:","   *","   *    var m = [[2, 1], [1, 4]];","   *    var r = math.lup(m);","   *    // r = {","   *    //   L: [[1, 0], [0.5, 1]],","   *    //   U: [[2, 1], [0, 3.5]],","   *    //   P: [0, 1]","   *    // }","   *","   * See also:","   *","   *    slu, lsolve, lusolve, usolve","   *","   * @param {Matrix | Array} A    A two dimensional matrix or array for which to get the LUP decomposition.","   *","   * @return {{L: Array | Matrix, U: Array | Matrix, P: Array.<number>}} The lower triangular matrix, the upper triangular matrix and the permutation matrix.","   */","  var lup = typed('lup', {","","    'DenseMatrix': function (m) {","      return _denseLUP(m);","    },","    ","    'SparseMatrix': function (m) {","      return _sparseLUP(m);","    },","","    'Array': function (a) {","      // create dense matrix from array","      var m = matrix(a);","      // lup, use matrix implementation","      var r = _denseLUP(m);","      // result","      return {","        L: r.L.valueOf(),","        U: r.U.valueOf(),","        p: r.p","      };","    }","  });","","  var _denseLUP = function (m) {","    // rows & columns","    var rows = m._size[0];","    var columns = m._size[1];","    // minimum rows and columns","    var n = Math.min(rows, columns);","    // matrix array, clone original data","    var data = object.clone(m._data);","    // l matrix arrays","    var ldata = [];","    var lsize = [rows, n];","    // u matrix arrays","    var udata = [];","    var usize = [n, columns];","    // vars","    var i, j, k;","    // permutation vector    ","    var p = [];","    for (i = 0; i < rows; i++)","      p[i] = i;    ","    // loop columns","    for (j = 0; j < columns; j++) {","      // skip first column in upper triangular matrix","      if (j > 0) {","        // loop rows","        for (i = 0; i < rows; i++) {","          // min i,j","          var min = Math.min(i, j);","          // v[i, j]","          var s = 0;","          // loop up to min","          for (k = 0; k < min; k++) {","            // s = l[i, k] - data[k, j]","            s = addScalar(s, multiplyScalar(data[i][k], data[k][j]));","          }","          data[i][j] = subtract(data[i][j], s);","        }","      }      ","      // row with larger value in cvector, row >= j","      var pi = j;","      var pabsv = 0;","      var vjj = 0;","      // loop rows","      for (i = j; i < rows; i++) {","        // data @ i, j","        var v = data[i][j];","        // absolute value","        var absv = abs(v);","        // value is greater than pivote value","        if (larger(absv, pabsv)) {","          // store row","          pi = i;","          // update max value","          pabsv = absv;","          // value @ [j, j]","          vjj = v;","        }","      }","      // swap rows (j <-> pi)","      if (j !== pi) {","        // swap values j <-> pi in p","        p[j] = [p[pi], p[pi] = p[j]][0];","        // swap j <-> pi in data","        DenseMatrix._swapRows(j, pi, data);","      }","      // check column is in lower triangular matrix","      if (j < rows) {","        // loop rows (lower triangular matrix)","        for (i = j + 1; i < rows; i++) {","          // value @ i, j","          var vij = data[i][j];","          if (!equalScalar(vij, 0)) {","            // update data","            data[i][j] = divideScalar(data[i][j], vjj);","          }","        }","      }","    }","    // loop columns","    for (j = 0; j < columns; j++) {","      // loop rows","      for (i = 0; i < rows; i++) {","        // initialize row in arrays","        if (j === 0) {","          // check row exists in upper triangular matrix","          if (i < columns) {","            // U","            udata[i] = [];","          }","          // L","          ldata[i] = [];","        }","        // check we are in the upper triangular matrix","        if (i < j) {","          // check row exists in upper triangular matrix","          if (i < columns) {","            // U","            udata[i][j] = data[i][j];","          }","          // check column exists in lower triangular matrix","          if (j < rows) {","            // L","            ldata[i][j] = 0;","          }","          continue;","        }","        // diagonal value","        if (i === j) {","          // check row exists in upper triangular matrix","          if (i < columns) {","            // U","            udata[i][j] = data[i][j];","          }","          // check column exists in lower triangular matrix","          if (j < rows) {","            // L","            ldata[i][j] = 1;","          }","          continue;","        }","        // check row exists in upper triangular matrix","        if (i < columns) {","          // U","          udata[i][j] = 0;","        }","        // check column exists in lower triangular matrix","        if (j < rows) {","          // L","          ldata[i][j] = data[i][j];","        }","      }","    }","    // l matrix","    var l =  new DenseMatrix({","      data: ldata,","      size: lsize","    });","    // u matrix","    var u =  new DenseMatrix({","      data: udata,","      size: usize","    });","    // p vector","    var pv = [];","    for (i = 0, n = p.length; i < n; i++)","      pv[p[i]] = i;","    // return matrices","    return { ","      L: l, ","      U: u, ","      p: pv, ","      toString: function () {","        return 'L: ' + this.L.toString() + '\\nU: ' + this.U.toString() + '\\nP: ' + this.p;","      }","    };","  };","  ","  var _sparseLUP = function (m) {","    // rows & columns","    var rows = m._size[0];","    var columns = m._size[1];","    // minimum rows and columns","    var n = Math.min(rows, columns);","    // matrix arrays (will not be modified, thanks to permutation vector)","    var values = m._values;","    var index = m._index;","    var ptr = m._ptr;","    // l matrix arrays","    var lvalues = [];","    var lindex = [];","    var lptr = [];","    var lsize = [rows, n];","    // u matrix arrays","    var uvalues = [];","    var uindex = [];","    var uptr = [];","    var usize = [n, columns];","    // vars","    var i, j, k;","    // permutation vectors, (current index -> original index) and (original index -> current index)","    var pv_co = [];","    var pv_oc = [];","    for (i = 0; i < rows; i++) {","      pv_co[i] = i;","      pv_oc[i] = i;","    }","    // swap indices in permutation vectors (condition x < y)!","    var swapIndeces = function (x, y) {      ","      // find pv indeces getting data from x and y","      var kx = pv_oc[x];","      var ky = pv_oc[y];","      // update permutation vector current -> original","      pv_co[kx] = y;","      pv_co[ky] = x;","      // update permutation vector original -> current","      pv_oc[x] = ky;","      pv_oc[y] = kx;","    };","    // loop columns","    for (j = 0; j < columns; j++) {","      // sparse accumulator","      var spa = new Spa();            ","      // check lower triangular matrix has a value @ column j","      if (j < rows) {","        // update ptr","        lptr.push(lvalues.length);","        // first value in j column for lower triangular matrix","        lvalues.push(1);","        lindex.push(j);","      }","      // update ptr","      uptr.push(uvalues.length);","      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]","      var k0 = ptr[j];","      var k1 = ptr[j + 1];","      // copy column j into sparse accumulator","      for (k = k0; k < k1; k++) {","        // row","        i = index[k];","        // copy column values into sparse accumulator (use permutation vector)","        spa.set(pv_co[i], values[k]);","      }","      // skip first column in upper triangular matrix","      if (j > 0) {","        // loop rows in column j (above diagonal)","        spa.forEach(0, j - 1, function (k, vkj) {","          // loop rows in column k (L)","          SparseMatrix._forEachRow(k, lvalues, lindex, lptr, function (i, vik) {","            // check row is below k","            if (i > k) {","              // update spa value","              spa.accumulate(i, unaryMinus(multiplyScalar(vik, vkj)));","            }","          });","        });        ","      }","      // row with larger value in spa, row >= j","      var pi = j;","      var vjj = spa.get(j);","      var pabsv = abs(vjj);      ","      // loop values in spa (order by row, below diagonal)","      spa.forEach(j + 1, rows - 1, function (x, v) {","        // absolute value","        var absv = abs(v);","        // value is greater than pivote value","        if (larger(absv, pabsv)) {","          // store row","          pi = x;","          // update max value","          pabsv = absv;","          // value @ [j, j]","          vjj = v;","        }","      });","      // swap rows (j <-> pi)","      if (j !== pi) {","        // swap values j <-> pi in L","        SparseMatrix._swapRows(j, pi, lsize[1], lvalues, lindex, lptr);","        // swap values j <-> pi in U","        SparseMatrix._swapRows(j, pi, usize[1], uvalues, uindex, uptr);","        // swap values in spa","        spa.swap(j, pi);","        // update permutation vector (swap values @ j, pi)","        swapIndeces(j, pi);","      }","      // loop values in spa (order by row)","      spa.forEach(0, rows - 1, function (x, v) {","        // check we are above diagonal","        if (x <= j) {","          // update upper triangular matrix","          uvalues.push(v);","          uindex.push(x);","        }","        else {","          // update value","          v = divideScalar(v, vjj);","          // check value is non zero","          if (!equalScalar(v, 0)) {","            // update lower triangular matrix","            lvalues.push(v);","            lindex.push(x);","          }","        }","      });","    }","    // update ptrs","    uptr.push(uvalues.length);","    lptr.push(lvalues.length);","","    // return matrices","    return {","      L: new SparseMatrix({","        values: lvalues,","        index: lindex,","        ptr: lptr,","        size: lsize","      }), ","      U: new SparseMatrix({","        values: uvalues,","        index: uindex,","        ptr: uptr,","        size: usize","      }),","      p: pv_co,","      toString: function () {","        return 'L: ' + this.L.toString() + '\\nU: ' + this.U.toString() + '\\nP: ' + this.p;","      }","    };","  };","  ","  return lup;","}","","exports.name = 'lup';","exports.factory = factory;",""],"l":{"3":1,"5":1,"7":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"19":0,"20":0,"21":0,"49":0,"52":0,"56":0,"61":0,"63":0,"65":0,"73":0,"75":0,"76":0,"78":0,"80":0,"82":0,"83":0,"85":0,"86":0,"88":0,"90":0,"91":0,"92":0,"94":0,"96":0,"98":0,"100":0,"102":0,"104":0,"106":0,"108":0,"112":0,"113":0,"114":0,"116":0,"118":0,"120":0,"122":0,"124":0,"126":0,"128":0,"132":0,"134":0,"136":0,"139":0,"141":0,"143":0,"144":0,"146":0,"152":0,"154":0,"156":0,"158":0,"160":0,"163":0,"166":0,"168":0,"170":0,"173":0,"175":0,"177":0,"180":0,"182":0,"184":0,"187":0,"189":0,"191":0,"194":0,"196":0,"199":0,"201":0,"206":0,"211":0,"216":0,"217":0,"218":0,"220":0,"225":0,"230":0,"232":0,"233":0,"235":0,"237":0,"238":0,"239":0,"241":0,"242":0,"243":0,"244":0,"246":0,"247":0,"248":0,"249":0,"251":0,"253":0,"254":0,"255":0,"256":0,"257":0,"260":0,"262":0,"263":0,"265":0,"266":0,"268":0,"269":0,"272":0,"274":0,"276":0,"278":0,"280":0,"281":0,"284":0,"286":0,"287":0,"289":0,"291":0,"293":0,"296":0,"298":0,"300":0,"302":0,"304":0,"310":0,"311":0,"312":0,"314":0,"316":0,"318":0,"320":0,"322":0,"324":0,"328":0,"330":0,"332":0,"334":0,"336":0,"339":0,"341":0,"343":0,"344":0,"348":0,"350":0,"352":0,"353":0,"359":0,"360":0,"363":0,"378":0,"383":0,"386":1,"387":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/algebra/decomposition/slu.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/algebra/decomposition/slu.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1,"17":1},"b":{"1":[0,0],"2":[0,0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"factory","line":9,"loc":{"start":{"line":9,"column":0},"end":{"line":9,"column":45}}},"2":{"name":"(anonymous_2)","line":41,"loc":{"start":{"line":41,"column":36},"end":{"line":41,"column":67}}},"3":{"name":"(anonymous_3)","line":61,"loc":{"start":{"line":61,"column":18},"end":{"line":61,"column":30}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":43}},"2":{"start":{"line":5,"column":0},"end":{"line":7,"column":33}},"3":{"start":{"line":9,"column":0},"end":{"line":69,"column":1}},"4":{"start":{"line":11,"column":2},"end":{"line":11,"column":60}},"5":{"start":{"line":12,"column":2},"end":{"line":12,"column":58}},"6":{"start":{"line":39,"column":2},"end":{"line":66,"column":5}},"7":{"start":{"line":43,"column":6},"end":{"line":44,"column":113}},"8":{"start":{"line":44,"column":8},"end":{"line":44,"column":113}},"9":{"start":{"line":46,"column":6},"end":{"line":47,"column":83}},"10":{"start":{"line":47,"column":8},"end":{"line":47,"column":83}},"11":{"start":{"line":50,"column":6},"end":{"line":50,"column":38}},"12":{"start":{"line":53,"column":6},"end":{"line":53,"column":37}},"13":{"start":{"line":56,"column":6},"end":{"line":64,"column":8}},"14":{"start":{"line":62,"column":10},"end":{"line":62,"column":156}},"15":{"start":{"line":68,"column":2},"end":{"line":68,"column":13}},"16":{"start":{"line":71,"column":0},"end":{"line":71,"column":21}},"17":{"start":{"line":72,"column":0},"end":{"line":72,"column":26}}},"branchMap":{"1":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":6},"end":{"line":43,"column":6}},{"start":{"line":43,"column":6},"end":{"line":43,"column":6}}]},"2":{"line":43,"type":"binary-expr","locations":[{"start":{"line":43,"column":10},"end":{"line":43,"column":27}},{"start":{"line":43,"column":31},"end":{"line":43,"column":40}},{"start":{"line":43,"column":44},"end":{"line":43,"column":53}}]},"3":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":6},"end":{"line":46,"column":6}},{"start":{"line":46,"column":6},"end":{"line":46,"column":6}}]},"4":{"line":46,"type":"binary-expr","locations":[{"start":{"line":46,"column":10},"end":{"line":46,"column":23}},{"start":{"line":46,"column":27},"end":{"line":46,"column":40}}]},"5":{"line":62,"type":"cond-expr","locations":[{"start":{"line":62,"column":115},"end":{"line":62,"column":142}},{"start":{"line":62,"column":145},"end":{"line":62,"column":147}}]}},"code":["'use strict';","","var util = require('../../../utils/index');","","var number = util.number,","    ","    isInteger = number.isInteger;","","function factory (type, config, load, typed) {","","  var cs_sqr = load(require('../../algebra/sparse/cs_sqr'));","  var cs_lu = load(require('../../algebra/sparse/cs_lu'));","","  /**","   * Calculate the Sparse Matrix LU decomposition with full pivoting. Sparse Matrix `A` is decomposed in two matrices (`L`, `U`) and two permutation vectors (`pinv`, `q`) where","   *","   * `P * A * Q = L * U`","   *","   * Syntax:","   *","   *    math.slu(A, order, threshold);","   *","   * See also:","   *","   *    lup, lsolve, usolve, lusolve","   *","   * @param {SparseMatrix} A              A two dimensional sparse matrix for which to get the LU decomposition.","   * @param {Number}       order          The Symbolic Ordering and Analysis order:","   *                                       0 - Natural ordering, no permutation vector q is returned","   *                                       1 - Matrix must be square, symbolic ordering and analisis is performed on M = A + A'","   *                                       2 - Symbolic ordering and analisis is performed on M = A' * A. Dense columns from A' are dropped, A recreated from A'. ","   *                                           This is appropriatefor LU factorization of unsymmetric matrices.","   *                                       3 - Symbolic ordering and analisis is performed on M = A' * A. This is best used for LU factorization is matrix M has no dense rows.","   *                                           A dense row is a row with more than 10*sqr(columns) entries.","   * @param {Number}       threshold       Partial pivoting threshold (1 for partial pivoting)","   *","   * @return {Object} The lower triangular matrix, the upper triangular matrix and the permutation vectors.","   */","  var slu = typed('slu', {","","    'SparseMatrix, number, number': function (a, order, threshold) {","      // verify order","      if (!isInteger(order) || order < 0 || order > 3)","        throw new Error('Symbolic Ordering and Analysis order must be an integer number in the interval [0, 3]');","      // verify threshold","      if (threshold < 0 || threshold > 1)","        throw new Error('Partial pivoting threshold must be a number from 0 to 1');","      ","      // perform symbolic ordering and analysis","      var s = cs_sqr(order, a, false);","      ","      // perform lu decomposition","      var f = cs_lu(a, s, threshold);","      ","      // return decomposition","      return {","        L: f.L,","        U: f.U,","        p: f.pinv,","        q: s.q,","        toString: function () {","          return 'L: ' + this.L.toString() + '\\nU: ' + this.U.toString() + '\\np: ' + this.p.toString() + (this.q ? '\\nq: ' + this.q.toString() : '') + '\\n';","        }","      };","    }","  });","","  return slu;","}","","exports.name = 'slu';","exports.factory = factory;",""],"l":{"3":1,"5":1,"9":1,"11":0,"12":0,"39":0,"43":0,"44":0,"46":0,"47":0,"50":0,"53":0,"56":0,"62":0,"68":0,"71":1,"72":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/algebra/solver/lsolve.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/algebra/solver/lsolve.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":1,"70":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"factory","line":3,"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}}},"2":{"name":"(anonymous_2)","line":41,"loc":{"start":{"line":41,"column":36},"end":{"line":41,"column":52}}},"3":{"name":"(anonymous_3)","line":46,"loc":{"start":{"line":46,"column":35},"end":{"line":46,"column":51}}},"4":{"name":"(anonymous_4)","line":51,"loc":{"start":{"line":51,"column":29},"end":{"line":51,"column":45}}},"5":{"name":"(anonymous_5)","line":61,"loc":{"start":{"line":61,"column":34},"end":{"line":61,"column":50}}},"6":{"name":"(anonymous_6)","line":110,"loc":{"start":{"line":110,"column":35},"end":{"line":110,"column":51}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":184,"column":1}},"2":{"start":{"line":5,"column":2},"end":{"line":5,"column":69}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":68}},"4":{"start":{"line":7,"column":2},"end":{"line":7,"column":72}},"5":{"start":{"line":8,"column":2},"end":{"line":8,"column":60}},"6":{"start":{"line":9,"column":2},"end":{"line":9,"column":66}},"7":{"start":{"line":11,"column":2},"end":{"line":11,"column":65}},"8":{"start":{"line":13,"column":2},"end":{"line":13,"column":37}},"9":{"start":{"line":39,"column":2},"end":{"line":59,"column":5}},"10":{"start":{"line":43,"column":6},"end":{"line":43,"column":46}},"11":{"start":{"line":48,"column":6},"end":{"line":48,"column":45}},"12":{"start":{"line":53,"column":6},"end":{"line":53,"column":24}},"13":{"start":{"line":55,"column":6},"end":{"line":55,"column":46}},"14":{"start":{"line":57,"column":6},"end":{"line":57,"column":25}},"15":{"start":{"line":61,"column":2},"end":{"line":108,"column":4}},"16":{"start":{"line":63,"column":4},"end":{"line":63,"column":36}},"17":{"start":{"line":65,"column":4},"end":{"line":65,"column":24}},"18":{"start":{"line":67,"column":4},"end":{"line":67,"column":26}},"19":{"start":{"line":68,"column":4},"end":{"line":68,"column":29}},"20":{"start":{"line":70,"column":4},"end":{"line":70,"column":15}},"21":{"start":{"line":72,"column":4},"end":{"line":72,"column":23}},"22":{"start":{"line":74,"column":4},"end":{"line":102,"column":5}},"23":{"start":{"line":76,"column":6},"end":{"line":76,"column":32}},"24":{"start":{"line":78,"column":6},"end":{"line":78,"column":13}},"25":{"start":{"line":80,"column":6},"end":{"line":99,"column":7}},"26":{"start":{"line":82,"column":8},"end":{"line":82,"column":29}},"27":{"start":{"line":84,"column":8},"end":{"line":87,"column":9}},"28":{"start":{"line":86,"column":10},"end":{"line":86,"column":85}},"29":{"start":{"line":89,"column":8},"end":{"line":89,"column":35}},"30":{"start":{"line":91,"column":8},"end":{"line":94,"column":9}},"31":{"start":{"line":93,"column":10},"end":{"line":93,"column":82}},"32":{"start":{"line":98,"column":8},"end":{"line":98,"column":15}},"33":{"start":{"line":101,"column":6},"end":{"line":101,"column":18}},"34":{"start":{"line":104,"column":4},"end":{"line":107,"column":7}},"35":{"start":{"line":110,"column":2},"end":{"line":181,"column":4}},"36":{"start":{"line":112,"column":4},"end":{"line":112,"column":36}},"37":{"start":{"line":114,"column":4},"end":{"line":114,"column":24}},"38":{"start":{"line":116,"column":4},"end":{"line":116,"column":26}},"39":{"start":{"line":117,"column":4},"end":{"line":117,"column":29}},"40":{"start":{"line":119,"column":4},"end":{"line":119,"column":27}},"41":{"start":{"line":120,"column":4},"end":{"line":120,"column":25}},"42":{"start":{"line":121,"column":4},"end":{"line":121,"column":21}},"43":{"start":{"line":123,"column":4},"end":{"line":123,"column":13}},"44":{"start":{"line":125,"column":4},"end":{"line":125,"column":15}},"45":{"start":{"line":127,"column":4},"end":{"line":175,"column":5}},"46":{"start":{"line":129,"column":6},"end":{"line":129,"column":32}},"47":{"start":{"line":131,"column":6},"end":{"line":174,"column":7}},"48":{"start":{"line":133,"column":8},"end":{"line":133,"column":20}},"49":{"start":{"line":135,"column":8},"end":{"line":135,"column":25}},"50":{"start":{"line":136,"column":8},"end":{"line":136,"column":24}},"51":{"start":{"line":138,"column":8},"end":{"line":138,"column":27}},"52":{"start":{"line":140,"column":8},"end":{"line":153,"column":9}},"53":{"start":{"line":142,"column":10},"end":{"line":142,"column":23}},"54":{"start":{"line":144,"column":10},"end":{"line":152,"column":11}},"55":{"start":{"line":146,"column":12},"end":{"line":146,"column":28}},"56":{"start":{"line":148,"column":15},"end":{"line":152,"column":11}},"57":{"start":{"line":150,"column":12},"end":{"line":150,"column":36}},"58":{"start":{"line":151,"column":12},"end":{"line":151,"column":27}},"59":{"start":{"line":155,"column":8},"end":{"line":158,"column":9}},"60":{"start":{"line":157,"column":10},"end":{"line":157,"column":85}},"61":{"start":{"line":160,"column":8},"end":{"line":160,"column":39}},"62":{"start":{"line":162,"column":8},"end":{"line":167,"column":9}},"63":{"start":{"line":164,"column":10},"end":{"line":164,"column":24}},"64":{"start":{"line":166,"column":10},"end":{"line":166,"column":82}},"65":{"start":{"line":169,"column":8},"end":{"line":169,"column":20}},"66":{"start":{"line":173,"column":8},"end":{"line":173,"column":19}},"67":{"start":{"line":177,"column":4},"end":{"line":180,"column":7}},"68":{"start":{"line":183,"column":2},"end":{"line":183,"column":16}},"69":{"start":{"line":186,"column":0},"end":{"line":186,"column":24}},"70":{"start":{"line":187,"column":0},"end":{"line":187,"column":26}}},"branchMap":{"1":{"line":76,"type":"binary-expr","locations":[{"start":{"line":76,"column":15},"end":{"line":76,"column":26}},{"start":{"line":76,"column":30},"end":{"line":76,"column":31}}]},"2":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":6},"end":{"line":80,"column":6}},{"start":{"line":80,"column":6},"end":{"line":80,"column":6}}]},"3":{"line":84,"type":"if","locations":[{"start":{"line":84,"column":8},"end":{"line":84,"column":8}},{"start":{"line":84,"column":8},"end":{"line":84,"column":8}}]},"4":{"line":93,"type":"binary-expr","locations":[{"start":{"line":93,"column":31},"end":{"line":93,"column":42}},{"start":{"line":93,"column":46},"end":{"line":93,"column":47}}]},"5":{"line":129,"type":"binary-expr","locations":[{"start":{"line":129,"column":15},"end":{"line":129,"column":26}},{"start":{"line":129,"column":30},"end":{"line":129,"column":31}}]},"6":{"line":131,"type":"if","locations":[{"start":{"line":131,"column":6},"end":{"line":131,"column":6}},{"start":{"line":131,"column":6},"end":{"line":131,"column":6}}]},"7":{"line":144,"type":"if","locations":[{"start":{"line":144,"column":10},"end":{"line":144,"column":10}},{"start":{"line":144,"column":10},"end":{"line":144,"column":10}}]},"8":{"line":148,"type":"if","locations":[{"start":{"line":148,"column":15},"end":{"line":148,"column":15}},{"start":{"line":148,"column":15},"end":{"line":148,"column":15}}]},"9":{"line":155,"type":"if","locations":[{"start":{"line":155,"column":8},"end":{"line":155,"column":8}},{"start":{"line":155,"column":8},"end":{"line":155,"column":8}}]},"10":{"line":166,"type":"binary-expr","locations":[{"start":{"line":166,"column":31},"end":{"line":166,"column":42}},{"start":{"line":166,"column":46},"end":{"line":166,"column":47}}]}},"code":["'use strict';","","function factory (type, config, load, typed) {","","  var matrix = load(require('../../../type/matrix/function/matrix'));","  var divideScalar = load(require('../../arithmetic/divideScalar'));","  var multiplyScalar = load(require('../../arithmetic/multiplyScalar'));","  var subtract = load(require('../../arithmetic/subtract'));","  var equalScalar = load(require('../../relational/equalScalar'));","","  var solveValidation = load(require('./utils/solveValidation'));","","  var DenseMatrix = type.DenseMatrix;","","  /** ","   * Solves the linear equation system by forwards substitution. Matrix must be a lower triangular matrix.","   *","   * `L * x = b`","   *","   * Syntax:","   *","   *    math.lsolve(L, b);","   *","   * Examples:","   *","   *    var a = [[-2, 3], [2, 1]];","   *    var b = [11, 9];","   *    var x = lsolve(a, b);  // [[-5.5], [20]]","   *","   * See also:","   *","   *    lup, slu, usolve, lusolve","   *","   * @param {Matrix, Array} L       A N x N matrix or array (L)","   * @param {Matrix, Array} b       A column vector with the b values","   *","   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)","   */","  var lsolve = typed('lsolve', {","","    'SparseMatrix, Array | Matrix': function (m, b) {","      // process matrix","      return _sparseForwardSubstitution(m, b);","    },","    ","    'DenseMatrix, Array | Matrix': function (m, b) {","      // process matrix","      return _denseForwardSubstitution(m, b);","    },","    ","    'Array, Array | Matrix': function (a, b) {","      // create dense matrix from array","      var m = matrix(a);","      // use matrix implementation","      var r = _denseForwardSubstitution(m, b);","      // result","      return r.valueOf();","    }","  });","","  var _denseForwardSubstitution = function (m, b) {","    // validate matrix and vector, return copy of column vector b","    b = solveValidation(m, b, true);","    // column vector data","    var bdata = b._data;","    // rows & columns","    var rows = m._size[0];","    var columns = m._size[1];","    // result","    var x = [];","    // data","    var data = m._data;","    // forward solve m * x = b, loop columns","    for (var j = 0; j < columns; j++) {","      // b[j]","      var bj = bdata[j][0] || 0;","      // x[j]","      var xj;","      // forward substitution (outer product) avoids inner looping when bj == 0","      if (!equalScalar(bj, 0)) {","        // value @ [j, j]","        var vjj = data[j][j];","        // check vjj","        if (equalScalar(vjj, 0)) {","          // system cannot be solved","          throw new Error('Linear system cannot be solved since matrix is singular');","        }","        // calculate xj","        xj = divideScalar(bj, vjj);","        // loop rows","        for (var i = j + 1; i < rows; i++) {","          // update copy of b","          bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, data[i][j]))];","        }","      }","      else {","        // zero @ j","        xj = 0;","      }","      // update x","      x[j] = [xj];","    }","    // return vector","    return new DenseMatrix({","      data: x,","      size: [rows, 1]","    });","  };","","  var _sparseForwardSubstitution = function (m, b) {","    // validate matrix and vector, return copy of column vector b","    b = solveValidation(m, b, true);","    // column vector data","    var bdata = b._data;","    // rows & columns","    var rows = m._size[0];","    var columns = m._size[1];","    // matrix arrays","    var values = m._values;","    var index = m._index;","    var ptr = m._ptr;","    // vars","    var i, k;","    // result","    var x = [];","    // forward solve m * x = b, loop columns","    for (var j = 0; j < columns; j++) {","      // b[j]","      var bj = bdata[j][0] || 0;","      // forward substitution (outer product) avoids inner looping when bj == 0","      if (!equalScalar(bj, 0)) {","        // value @ [j, j]","        var vjj = 0;","        // lower triangular matrix values & index (column j)","        var jvalues = [];","        var jindex = [];","        // last index in column","        var l = ptr[j + 1];","        // values in column, find value @ [j, j]","        for (k = ptr[j]; k < l; k++) {","          // row","          i = index[k];","          // check row (rows are not sorted!)","          if (i === j) {","            // update vjj","            vjj = values[k];","          }","          else if (i > j) {","            // store lower triangular","            jvalues.push(values[k]);","            jindex.push(i);","          }","        }","        // at this point we must have a value @ [j, j]","        if (equalScalar(vjj, 0)) {","          // system cannot be solved, there is no value @ [j, j]","          throw new Error('Linear system cannot be solved since matrix is singular');","        }","        // calculate xj","        var xj = divideScalar(bj, vjj);","        // loop lower triangular","        for (k = 0, l = jindex.length; k < l; k++) {","          // row","          i = jindex[k];","          // update copy of b","          bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, jvalues[k]))];","        }","        // update x","        x[j] = [xj];","      }","      else {","        // update x","        x[j] = [0];","      }","    }","    // return vector","    return new DenseMatrix({","      data: x,","      size: [rows, 1]","    });","  };","","  return lsolve;","}","","exports.name = 'lsolve';","exports.factory = factory;",""],"l":{"3":1,"5":0,"6":0,"7":0,"8":0,"9":0,"11":0,"13":0,"39":0,"43":0,"48":0,"53":0,"55":0,"57":0,"61":0,"63":0,"65":0,"67":0,"68":0,"70":0,"72":0,"74":0,"76":0,"78":0,"80":0,"82":0,"84":0,"86":0,"89":0,"91":0,"93":0,"98":0,"101":0,"104":0,"110":0,"112":0,"114":0,"116":0,"117":0,"119":0,"120":0,"121":0,"123":0,"125":0,"127":0,"129":0,"131":0,"133":0,"135":0,"136":0,"138":0,"140":0,"142":0,"144":0,"146":0,"148":0,"150":0,"151":0,"155":0,"157":0,"160":0,"162":0,"164":0,"166":0,"169":0,"173":0,"177":0,"183":0,"186":1,"187":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/algebra/solver/lusolve.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/algebra/solver/lusolve.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":1,"41":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":52,"loc":{"start":{"line":52,"column":29},"end":{"line":52,"column":45}}},"3":{"name":"(anonymous_3)","line":63,"loc":{"start":{"line":63,"column":35},"end":{"line":63,"column":51}}},"4":{"name":"(anonymous_4)","line":70,"loc":{"start":{"line":70,"column":36},"end":{"line":70,"column":52}}},"5":{"name":"(anonymous_5)","line":77,"loc":{"start":{"line":77,"column":52},"end":{"line":77,"column":86}}},"6":{"name":"(anonymous_6)","line":84,"loc":{"start":{"line":84,"column":30},"end":{"line":84,"column":46}}},"7":{"name":"(anonymous_7)","line":90,"loc":{"start":{"line":90,"column":18},"end":{"line":90,"column":31}}},"8":{"name":"(anonymous_8)","line":101,"loc":{"start":{"line":101,"column":17},"end":{"line":101,"column":42}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":28}},"2":{"start":{"line":5,"column":0},"end":{"line":122,"column":1}},"3":{"start":{"line":7,"column":2},"end":{"line":7,"column":69}},"4":{"start":{"line":8,"column":2},"end":{"line":8,"column":50}},"5":{"start":{"line":9,"column":2},"end":{"line":9,"column":50}},"6":{"start":{"line":10,"column":2},"end":{"line":10,"column":53}},"7":{"start":{"line":12,"column":2},"end":{"line":12,"column":65}},"8":{"start":{"line":14,"column":2},"end":{"line":14,"column":41}},"9":{"start":{"line":15,"column":2},"end":{"line":15,"column":41}},"10":{"start":{"line":50,"column":2},"end":{"line":88,"column":5}},"11":{"start":{"line":54,"column":6},"end":{"line":54,"column":20}},"12":{"start":{"line":56,"column":6},"end":{"line":56,"column":21}},"13":{"start":{"line":58,"column":6},"end":{"line":58,"column":47}},"14":{"start":{"line":60,"column":6},"end":{"line":60,"column":25}},"15":{"start":{"line":65,"column":6},"end":{"line":65,"column":21}},"16":{"start":{"line":67,"column":6},"end":{"line":67,"column":46}},"17":{"start":{"line":72,"column":6},"end":{"line":72,"column":21}},"18":{"start":{"line":74,"column":6},"end":{"line":74,"column":46}},"19":{"start":{"line":79,"column":6},"end":{"line":79,"column":39}},"20":{"start":{"line":81,"column":6},"end":{"line":81,"column":45}},"21":{"start":{"line":86,"column":6},"end":{"line":86,"column":45}},"22":{"start":{"line":90,"column":2},"end":{"line":99,"column":4}},"23":{"start":{"line":92,"column":4},"end":{"line":93,"column":15}},"24":{"start":{"line":93,"column":6},"end":{"line":93,"column":15}},"25":{"start":{"line":95,"column":4},"end":{"line":96,"column":23}},"26":{"start":{"line":96,"column":6},"end":{"line":96,"column":23}},"27":{"start":{"line":98,"column":4},"end":{"line":98,"column":59}},"28":{"start":{"line":101,"column":2},"end":{"line":119,"column":4}},"29":{"start":{"line":103,"column":4},"end":{"line":103,"column":21}},"30":{"start":{"line":104,"column":4},"end":{"line":104,"column":21}},"31":{"start":{"line":106,"column":4},"end":{"line":106,"column":37}},"32":{"start":{"line":108,"column":4},"end":{"line":109,"column":37}},"33":{"start":{"line":109,"column":6},"end":{"line":109,"column":37}},"34":{"start":{"line":111,"column":4},"end":{"line":111,"column":25}},"35":{"start":{"line":113,"column":4},"end":{"line":113,"column":25}},"36":{"start":{"line":115,"column":4},"end":{"line":116,"column":37}},"37":{"start":{"line":116,"column":6},"end":{"line":116,"column":37}},"38":{"start":{"line":118,"column":4},"end":{"line":118,"column":13}},"39":{"start":{"line":121,"column":2},"end":{"line":121,"column":17}},"40":{"start":{"line":124,"column":0},"end":{"line":124,"column":25}},"41":{"start":{"line":125,"column":0},"end":{"line":125,"column":26}}},"branchMap":{"1":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":4},"end":{"line":92,"column":4}},{"start":{"line":92,"column":4},"end":{"line":92,"column":4}}]},"2":{"line":92,"type":"binary-expr","locations":[{"start":{"line":92,"column":8},"end":{"line":92,"column":9}},{"start":{"line":92,"column":13},"end":{"line":92,"column":32}}]},"3":{"line":95,"type":"if","locations":[{"start":{"line":95,"column":4},"end":{"line":95,"column":4}},{"start":{"line":95,"column":4},"end":{"line":95,"column":4}}]},"4":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":4},"end":{"line":108,"column":4}},{"start":{"line":108,"column":4},"end":{"line":108,"column":4}}]},"5":{"line":115,"type":"if","locations":[{"start":{"line":115,"column":4},"end":{"line":115,"column":4}},{"start":{"line":115,"column":4},"end":{"line":115,"column":4}}]}},"code":["'use strict';","","var isArray = Array.isArray;","","function factory (type, config, load, typed) {","  ","  var matrix = load(require('../../../type/matrix/function/matrix'));","  var lup = load(require('../decomposition/lup'));","  var slu = load(require('../decomposition/slu'));","  var cs_ipvec = load(require('../sparse/cs_ipvec'));","","  var solveValidation = load(require('./utils/solveValidation'));","","  var usolve = load(require('./usolve'));","  var lsolve = load(require('./lsolve'));","","  /**","   * Solves the linear system `A * x = b` where `A` is an [n x n] matrix and `b` is a [n] column vector.","   *","   * Syntax:","   *","   *    math.lusolve(A, b)     // returns column vector with the solution to the linear system A * x = b","   *    math.lusolve(lup, b)   // returns column vector with the solution to the linear system A * x = b, lup = math.lup(A)","   *","   * Examples:","   *","   *    var m = [[1, 0, 0, 0], [0, 2, 0, 0], [0, 0, 3, 0], [0, 0, 0, 4]];","   *","   *    var x = math.lusolve(m, [-1, -1, -1, -1]);        // x = [[-1], [-0.5], [-1/3], [-0.25]]","   *","   *    var f = math.lup(m);","   *    var x1 = math.lusolve(f, [-1, -1, -1, -1]);       // x1 = [[-1], [-0.5], [-1/3], [-0.25]]","   *    var x2 = math.lusolve(f, [1, 2, 1, -1]);          // x2 = [[1], [1], [1/3], [-0.25]]","   *","   *    var a = [[-2, 3], [2, 1]];","   *    var b = [11, 9];","   *    var x = lusolve(a, b);  // [[-5.5], [20]]","   *","   * See also:","   *","   *    lup, slu, lsolve, usolve","   *","   * @param {Matrix | Array | Object} A      Invertible Matrix or the Matrix LU decomposition","   * @param {Matrix | Array} b               Column Vector","   * @param {number} [order]                 The Symbolic Ordering and Analysis order, see slu for details. Matrix must be a SparseMatrix","   * @param {Number} [threshold]             Partial pivoting threshold (1 for partial pivoting), see slu for details. Matrix must be a SparseMatrix.","   *","   * @return {DenseMatrix | Array}           Column vector with the solution to the linear system A * x = b","   */","  var lusolve = typed('lusolve', {","    ","    'Array, Array | Matrix': function (a, b) {","      // convert a to matrix","      a = matrix(a);","      // matrix lup decomposition","      var d = lup(a);","      // solve","      var x = _lusolve(d.L, d.U, d.p, null, b);","      // convert result to array","      return x.valueOf();","    },","    ","    'DenseMatrix, Array | Matrix': function (a, b) {","      // matrix lup decomposition","      var d = lup(a);","      // solve","      return _lusolve(d.L, d.U, d.p, null, b);","    },","    ","    'SparseMatrix, Array | Matrix': function (a, b) {","      // matrix lup decomposition","      var d = lup(a);","      // solve","      return _lusolve(d.L, d.U, d.p, null, b);","    },","    ","    'SparseMatrix, Array | Matrix, number, number': function (a, b, order, threshold) {","      // matrix lu decomposition","      var d = slu(a, order, threshold);","      // solve","      return _lusolve(d.L, d.U, d.p, d.q, b);","    },","","    'Object, Array | Matrix': function (d, b) {","      // solve","      return _lusolve(d.L, d.U, d.p, d.q, b);","    }","  });","  ","  var _toMatrix = function (a) {","    // check it is a matrix","    if (a && a.isMatrix === true)","      return a;","    // check array","    if (isArray(a))","      return matrix(a);","    // throw","    throw new TypeError('Invalid Matrix LU decomposition');","  };","  ","  var _lusolve = function (l, u, p, q, b) {","    // verify L, U, P","    l = _toMatrix(l);","    u = _toMatrix(u);","    // validate matrix and vector","    b = solveValidation(l, b, false);","    // apply row permutations if needed (b is a DenseMatrix)","    if (p)","      b._data = cs_ipvec(p, b._data);","    // use forward substitution to resolve L * y = b","    var y = lsolve(l, b);","    // use backward substitution to resolve U * x = y","    var x = usolve(u, y);","    // apply column permutations if needed (x is a DenseMatrix)","    if (q)","      x._data = cs_ipvec(q, x._data);","    // return solution","    return x;","  };","","  return lusolve;","}","","exports.name = 'lusolve';","exports.factory = factory;",""],"l":{"3":1,"5":1,"7":0,"8":0,"9":0,"10":0,"12":0,"14":0,"15":0,"50":0,"54":0,"56":0,"58":0,"60":0,"65":0,"67":0,"72":0,"74":0,"79":0,"81":0,"86":0,"90":0,"92":0,"93":0,"95":0,"96":0,"98":0,"101":0,"103":0,"104":0,"106":0,"108":0,"109":0,"111":0,"113":0,"115":0,"116":0,"118":0,"121":0,"124":1,"125":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/algebra/solver/usolve.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/algebra/solver/usolve.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":1,"71":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"factory","line":3,"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}}},"2":{"name":"(anonymous_2)","line":41,"loc":{"start":{"line":41,"column":36},"end":{"line":41,"column":52}}},"3":{"name":"(anonymous_3)","line":46,"loc":{"start":{"line":46,"column":35},"end":{"line":46,"column":51}}},"4":{"name":"(anonymous_4)","line":51,"loc":{"start":{"line":51,"column":29},"end":{"line":51,"column":45}}},"5":{"name":"(anonymous_5)","line":61,"loc":{"start":{"line":61,"column":35},"end":{"line":61,"column":51}}},"6":{"name":"(anonymous_6)","line":110,"loc":{"start":{"line":110,"column":36},"end":{"line":110,"column":52}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":185,"column":1}},"2":{"start":{"line":5,"column":2},"end":{"line":5,"column":69}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":68}},"4":{"start":{"line":7,"column":2},"end":{"line":7,"column":72}},"5":{"start":{"line":8,"column":2},"end":{"line":8,"column":60}},"6":{"start":{"line":9,"column":2},"end":{"line":9,"column":66}},"7":{"start":{"line":11,"column":2},"end":{"line":11,"column":65}},"8":{"start":{"line":13,"column":2},"end":{"line":13,"column":37}},"9":{"start":{"line":39,"column":2},"end":{"line":59,"column":5}},"10":{"start":{"line":43,"column":6},"end":{"line":43,"column":47}},"11":{"start":{"line":48,"column":6},"end":{"line":48,"column":46}},"12":{"start":{"line":53,"column":6},"end":{"line":53,"column":24}},"13":{"start":{"line":55,"column":6},"end":{"line":55,"column":47}},"14":{"start":{"line":57,"column":6},"end":{"line":57,"column":25}},"15":{"start":{"line":61,"column":2},"end":{"line":108,"column":4}},"16":{"start":{"line":63,"column":4},"end":{"line":63,"column":36}},"17":{"start":{"line":65,"column":4},"end":{"line":65,"column":24}},"18":{"start":{"line":67,"column":4},"end":{"line":67,"column":26}},"19":{"start":{"line":68,"column":4},"end":{"line":68,"column":29}},"20":{"start":{"line":70,"column":4},"end":{"line":70,"column":15}},"21":{"start":{"line":72,"column":4},"end":{"line":72,"column":23}},"22":{"start":{"line":74,"column":4},"end":{"line":102,"column":5}},"23":{"start":{"line":76,"column":6},"end":{"line":76,"column":32}},"24":{"start":{"line":78,"column":6},"end":{"line":78,"column":13}},"25":{"start":{"line":80,"column":6},"end":{"line":99,"column":7}},"26":{"start":{"line":82,"column":8},"end":{"line":82,"column":29}},"27":{"start":{"line":84,"column":8},"end":{"line":87,"column":9}},"28":{"start":{"line":86,"column":10},"end":{"line":86,"column":85}},"29":{"start":{"line":89,"column":8},"end":{"line":89,"column":35}},"30":{"start":{"line":91,"column":8},"end":{"line":94,"column":9}},"31":{"start":{"line":93,"column":10},"end":{"line":93,"column":82}},"32":{"start":{"line":98,"column":8},"end":{"line":98,"column":15}},"33":{"start":{"line":101,"column":6},"end":{"line":101,"column":18}},"34":{"start":{"line":104,"column":4},"end":{"line":107,"column":7}},"35":{"start":{"line":110,"column":2},"end":{"line":182,"column":4}},"36":{"start":{"line":112,"column":4},"end":{"line":112,"column":36}},"37":{"start":{"line":114,"column":4},"end":{"line":114,"column":24}},"38":{"start":{"line":116,"column":4},"end":{"line":116,"column":26}},"39":{"start":{"line":117,"column":4},"end":{"line":117,"column":29}},"40":{"start":{"line":119,"column":4},"end":{"line":119,"column":27}},"41":{"start":{"line":120,"column":4},"end":{"line":120,"column":25}},"42":{"start":{"line":121,"column":4},"end":{"line":121,"column":21}},"43":{"start":{"line":123,"column":4},"end":{"line":123,"column":13}},"44":{"start":{"line":125,"column":4},"end":{"line":125,"column":15}},"45":{"start":{"line":127,"column":4},"end":{"line":176,"column":5}},"46":{"start":{"line":129,"column":6},"end":{"line":129,"column":32}},"47":{"start":{"line":131,"column":6},"end":{"line":175,"column":7}},"48":{"start":{"line":133,"column":8},"end":{"line":133,"column":20}},"49":{"start":{"line":135,"column":8},"end":{"line":135,"column":25}},"50":{"start":{"line":136,"column":8},"end":{"line":136,"column":24}},"51":{"start":{"line":138,"column":8},"end":{"line":138,"column":23}},"52":{"start":{"line":139,"column":8},"end":{"line":139,"column":27}},"53":{"start":{"line":141,"column":8},"end":{"line":154,"column":9}},"54":{"start":{"line":143,"column":10},"end":{"line":143,"column":23}},"55":{"start":{"line":145,"column":10},"end":{"line":153,"column":11}},"56":{"start":{"line":147,"column":12},"end":{"line":147,"column":28}},"57":{"start":{"line":149,"column":15},"end":{"line":153,"column":11}},"58":{"start":{"line":151,"column":12},"end":{"line":151,"column":36}},"59":{"start":{"line":152,"column":12},"end":{"line":152,"column":27}},"60":{"start":{"line":156,"column":8},"end":{"line":159,"column":9}},"61":{"start":{"line":158,"column":10},"end":{"line":158,"column":85}},"62":{"start":{"line":161,"column":8},"end":{"line":161,"column":39}},"63":{"start":{"line":163,"column":8},"end":{"line":168,"column":9}},"64":{"start":{"line":165,"column":10},"end":{"line":165,"column":24}},"65":{"start":{"line":167,"column":10},"end":{"line":167,"column":77}},"66":{"start":{"line":170,"column":8},"end":{"line":170,"column":20}},"67":{"start":{"line":174,"column":8},"end":{"line":174,"column":19}},"68":{"start":{"line":178,"column":4},"end":{"line":181,"column":7}},"69":{"start":{"line":184,"column":2},"end":{"line":184,"column":16}},"70":{"start":{"line":187,"column":0},"end":{"line":187,"column":24}},"71":{"start":{"line":188,"column":0},"end":{"line":188,"column":26}}},"branchMap":{"1":{"line":76,"type":"binary-expr","locations":[{"start":{"line":76,"column":15},"end":{"line":76,"column":26}},{"start":{"line":76,"column":30},"end":{"line":76,"column":31}}]},"2":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":6},"end":{"line":80,"column":6}},{"start":{"line":80,"column":6},"end":{"line":80,"column":6}}]},"3":{"line":84,"type":"if","locations":[{"start":{"line":84,"column":8},"end":{"line":84,"column":8}},{"start":{"line":84,"column":8},"end":{"line":84,"column":8}}]},"4":{"line":93,"type":"binary-expr","locations":[{"start":{"line":93,"column":31},"end":{"line":93,"column":42}},{"start":{"line":93,"column":46},"end":{"line":93,"column":47}}]},"5":{"line":129,"type":"binary-expr","locations":[{"start":{"line":129,"column":15},"end":{"line":129,"column":26}},{"start":{"line":129,"column":30},"end":{"line":129,"column":31}}]},"6":{"line":131,"type":"if","locations":[{"start":{"line":131,"column":6},"end":{"line":131,"column":6}},{"start":{"line":131,"column":6},"end":{"line":131,"column":6}}]},"7":{"line":145,"type":"if","locations":[{"start":{"line":145,"column":10},"end":{"line":145,"column":10}},{"start":{"line":145,"column":10},"end":{"line":145,"column":10}}]},"8":{"line":149,"type":"if","locations":[{"start":{"line":149,"column":15},"end":{"line":149,"column":15}},{"start":{"line":149,"column":15},"end":{"line":149,"column":15}}]},"9":{"line":156,"type":"if","locations":[{"start":{"line":156,"column":8},"end":{"line":156,"column":8}},{"start":{"line":156,"column":8},"end":{"line":156,"column":8}}]}},"code":["'use strict';","","function factory (type, config, load, typed) {","","  var matrix = load(require('../../../type/matrix/function/matrix'));","  var divideScalar = load(require('../../arithmetic/divideScalar'));","  var multiplyScalar = load(require('../../arithmetic/multiplyScalar'));","  var subtract = load(require('../../arithmetic/subtract'));","  var equalScalar = load(require('../../relational/equalScalar'));","","  var solveValidation = load(require('./utils/solveValidation'));","  ","  var DenseMatrix = type.DenseMatrix;","","  /**","   * Solves the linear equation system by backward substitution. Matrix must be an upper triangular matrix.","   *","   * `U * x = b`","   *","   * Syntax:","   *","   *    math.usolve(U, b);","   *","   * Examples:","   *","   *    var a = [[-2, 3], [2, 1]];","   *    var b = [11, 9];","   *    var x = usolve(a, b);  // [[8], [9]]","   *","   * See also:","   *","   *    lup, slu, usolve, lusolve","   *","   * @param {Matrix, Array} U       A N x N matrix or array (U)","   * @param {Matrix, Array} b       A column vector with the b values","   *","   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)","   */","  var usolve = typed('usolve', {","    ","    'SparseMatrix, Array | Matrix': function (m, b) {","      // process matrix","      return _sparseBackwardSubstitution(m, b);","    },","","    'DenseMatrix, Array | Matrix': function (m, b) {","      // process matrix","      return _denseBackwardSubstitution(m, b);","    },","","    'Array, Array | Matrix': function (a, b) {","      // create dense matrix from array","      var m = matrix(a);","      // use matrix implementation","      var r = _denseBackwardSubstitution(m, b);","      // result","      return r.valueOf();","    }","  });","","  var _denseBackwardSubstitution = function (m, b) {","    // validate matrix and vector, return copy of column vector b","    b = solveValidation(m, b, true);","    // column vector data","    var bdata = b._data;","    // rows & columns","    var rows = m._size[0];","    var columns = m._size[1];","    // result","    var x = [];","    // arrays","    var data = m._data;","    // backward solve m * x = b, loop columns (backwards)","    for (var j = columns - 1; j >= 0 ; j--) {","      // b[j]","      var bj = bdata[j][0] || 0;","      // x[j]","      var xj;","      // backward substitution (outer product) avoids inner looping when bj == 0","      if (!equalScalar(bj, 0)) {","        // value @ [j, j]","        var vjj = data[j][j];","        // check vjj","        if (equalScalar(vjj, 0)) {","          // system cannot be solved","          throw new Error('Linear system cannot be solved since matrix is singular');","        }","        // calculate xj","        xj = divideScalar(bj, vjj);        ","        // loop rows","        for (var i = j - 1; i >= 0; i--) {","          // update copy of b","          bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, data[i][j]))];","        }","      }","      else {","        // zero value @ j","        xj = 0;","      }","      // update x","      x[j] = [xj];","    }","    // return column vector","    return new DenseMatrix({","      data: x,","      size: [rows, 1]","    });","  };","  ","  var _sparseBackwardSubstitution = function (m, b) {","    // validate matrix and vector, return copy of column vector b","    b = solveValidation(m, b, true);","    // column vector data","    var bdata = b._data;","    // rows & columns","    var rows = m._size[0];","    var columns = m._size[1];","    // matrix arrays","    var values = m._values;","    var index = m._index;","    var ptr = m._ptr;","    // vars","    var i, k;","    // result","    var x = [];","    // backward solve m * x = b, loop columns (backwards)","    for (var j = columns - 1; j >= 0 ; j--) {","      // b[j]","      var bj = bdata[j][0] || 0;","      // backward substitution (outer product) avoids inner looping when bj == 0","      if (!equalScalar(bj, 0)) {","        // value @ [j, j]","        var vjj = 0;","        // upper triangular matrix values & index (column j)","        var jvalues = [];","        var jindex = [];","        // first & last indeces in column","        var f = ptr[j];","        var l = ptr[j + 1];","        // values in column, find value @ [j, j], loop backwards","        for (k = l - 1; k >= f; k--) {","          // row","          i = index[k];","          // check row","          if (i === j) {","            // update vjj","            vjj = values[k];","          }","          else if (i < j) {","            // store upper triangular","            jvalues.push(values[k]);","            jindex.push(i);","          }","        }","        // at this point we must have a value @ [j, j]","        if (equalScalar(vjj, 0)) {","          // system cannot be solved, there is no value @ [j, j]","          throw new Error('Linear system cannot be solved since matrix is singular');","        }","        // calculate xj","        var xj = divideScalar(bj, vjj);","        // loop upper triangular","        for (k = 0, l = jindex.length; k < l; k++) {","          // row","          i = jindex[k];","          // update copy of b","          bdata[i] = [subtract(bdata[i][0], multiplyScalar(xj, jvalues[k]))];","        }","        // update x","        x[j] = [xj];","      }","      else {","        // update x","        x[j] = [0];","      }","    }","    // return vector","    return new DenseMatrix({","      data: x,","      size: [rows, 1]","    });","  };","  ","  return usolve;","}","","exports.name = 'usolve';","exports.factory = factory;",""],"l":{"3":1,"5":0,"6":0,"7":0,"8":0,"9":0,"11":0,"13":0,"39":0,"43":0,"48":0,"53":0,"55":0,"57":0,"61":0,"63":0,"65":0,"67":0,"68":0,"70":0,"72":0,"74":0,"76":0,"78":0,"80":0,"82":0,"84":0,"86":0,"89":0,"91":0,"93":0,"98":0,"101":0,"104":0,"110":0,"112":0,"114":0,"116":0,"117":0,"119":0,"120":0,"121":0,"123":0,"125":0,"127":0,"129":0,"131":0,"133":0,"135":0,"136":0,"138":0,"139":0,"141":0,"143":0,"145":0,"147":0,"149":0,"151":0,"152":0,"156":0,"158":0,"161":0,"163":0,"165":0,"167":0,"170":0,"174":0,"178":0,"184":0,"187":1,"188":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/index.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":33,"column":2}}},"branchMap":{},"code":["module.exports = [","  require('./abs'),","  require('./add'),","  require('./addScalar'),","  require('./cbrt'),","  require('./ceil'),","  require('./cube'),","  require('./divide'),","  require('./dotDivide'),","  require('./dotMultiply'),","  require('./dotPow'),","  require('./exp'),","  require('./fix'),","  require('./floor'),","  require('./gcd'),","  require('./hypot'),","  require('./lcm'),","  require('./log'),","  require('./log10'),","  require('./mod'),","  require('./multiply'),","  require('./norm'),","  require('./nthRoot'),","  require('./pow'),","  require('./round'),","  require('./sign'),","  require('./sqrt'),","  require('./square'),","  require('./subtract'),","  require('./unaryMinus'),","  require('./unaryPlus'),","  require('./xgcd')","];",""],"l":{"1":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/abs.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/abs.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1,"12":1},"b":{},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":15},"end":{"line":33,"column":28}}},"3":{"name":"(anonymous_3)","line":37,"loc":{"start":{"line":37,"column":17},"end":{"line":37,"column":30}}},"4":{"name":"(anonymous_4)","line":41,"loc":{"start":{"line":41,"column":16},"end":{"line":41,"column":29}}},"5":{"name":"(anonymous_5)","line":45,"loc":{"start":{"line":45,"column":22},"end":{"line":45,"column":35}}},"6":{"name":"(anonymous_6)","line":50,"loc":{"start":{"line":50,"column":12},"end":{"line":50,"column":24}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":58,"column":1}},"3":{"start":{"line":30,"column":2},"end":{"line":53,"column":5}},"4":{"start":{"line":34,"column":6},"end":{"line":34,"column":21}},"5":{"start":{"line":38,"column":6},"end":{"line":38,"column":21}},"6":{"start":{"line":42,"column":6},"end":{"line":42,"column":21}},"7":{"start":{"line":47,"column":6},"end":{"line":47,"column":35}},"8":{"start":{"line":51,"column":6},"end":{"line":51,"column":21}},"9":{"start":{"line":55,"column":2},"end":{"line":55,"column":47}},"10":{"start":{"line":57,"column":2},"end":{"line":57,"column":13}},"11":{"start":{"line":60,"column":0},"end":{"line":60,"column":21}},"12":{"start":{"line":61,"column":0},"end":{"line":61,"column":26}}},"branchMap":{},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","","function factory (type, config, load, typed) {","  /**","   * Calculate the absolute value of a number. For matrices, the function is","   * evaluated element wise.","   *","   * Syntax:","   *","   *    math.abs(x)","   *","   * Examples:","   *","   *    math.abs(3.5);                // returns number 3.5","   *    math.abs(-4.2);               // returns number 4.2","   *","   *    math.abs([3, -5, -1, 0, 2]);  // returns Array [3, 5, 1, 0, 2]","   *","   * See also:","   *","   *    sign","   *","   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x","   *            A number or matrix for which to get the absolute value","   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}","   *            Absolute value of `x`","   */","  var abs = typed('abs', {","    'number': Math.abs,","","    'Complex': function (x) {","      return x.abs();","    },","","    'BigNumber': function (x) {","      return x.abs();","    },","","    'Fraction': function (x) {","      return x.abs();","    },","","    'Array | Matrix': function (x) {","      // deep map collection, skip zeros since abs(0) = 0","      return deepMap(x, abs, true);","    },","","    'Unit': function(x) {","      return x.abs();","    }","  });","","  abs.toTex = {1: '\\\\left|${args[0]}\\\\right|'};","","  return abs;","}","","exports.name = 'abs';","exports.factory = factory;",""],"l":{"3":1,"5":1,"30":0,"34":0,"38":0,"42":0,"47":0,"51":0,"55":0,"57":0,"60":1,"61":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/add.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/add.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":1,"53":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":54,"loc":{"start":{"line":54,"column":22},"end":{"line":54,"column":38}}},"3":{"name":"(anonymous_3)","line":88,"loc":{"start":{"line":88,"column":20},"end":{"line":88,"column":36}}},"4":{"name":"(anonymous_4)","line":93,"loc":{"start":{"line":93,"column":21},"end":{"line":93,"column":37}}},"5":{"name":"(anonymous_5)","line":98,"loc":{"start":{"line":98,"column":21},"end":{"line":98,"column":37}}},"6":{"name":"(anonymous_6)","line":103,"loc":{"start":{"line":103,"column":19},"end":{"line":103,"column":35}}},"7":{"name":"(anonymous_7)","line":118,"loc":{"start":{"line":118,"column":19},"end":{"line":118,"column":35}}},"8":{"name":"(anonymous_8)","line":133,"loc":{"start":{"line":133,"column":18},"end":{"line":133,"column":34}}},"9":{"name":"(anonymous_9)","line":138,"loc":{"start":{"line":138,"column":18},"end":{"line":138,"column":34}}},"10":{"name":"(anonymous_10)","line":145,"loc":{"start":{"line":145,"column":24},"end":{"line":145,"column":46}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":50}},"2":{"start":{"line":5,"column":0},"end":{"line":161,"column":1}},"3":{"start":{"line":7,"column":2},"end":{"line":7,"column":66}},"4":{"start":{"line":8,"column":2},"end":{"line":8,"column":47}},"5":{"start":{"line":9,"column":2},"end":{"line":9,"column":46}},"6":{"start":{"line":11,"column":2},"end":{"line":11,"column":73}},"7":{"start":{"line":12,"column":2},"end":{"line":12,"column":73}},"8":{"start":{"line":13,"column":2},"end":{"line":13,"column":73}},"9":{"start":{"line":14,"column":2},"end":{"line":14,"column":73}},"10":{"start":{"line":15,"column":2},"end":{"line":15,"column":73}},"11":{"start":{"line":51,"column":2},"end":{"line":154,"column":28}},"12":{"start":{"line":56,"column":6},"end":{"line":56,"column":12}},"13":{"start":{"line":59,"column":6},"end":{"line":84,"column":7}},"14":{"start":{"line":61,"column":10},"end":{"line":70,"column":11}},"15":{"start":{"line":64,"column":14},"end":{"line":64,"column":47}},"16":{"start":{"line":65,"column":14},"end":{"line":65,"column":20}},"17":{"start":{"line":68,"column":14},"end":{"line":68,"column":53}},"18":{"start":{"line":69,"column":14},"end":{"line":69,"column":20}},"19":{"start":{"line":71,"column":10},"end":{"line":71,"column":16}},"20":{"start":{"line":73,"column":10},"end":{"line":82,"column":11}},"21":{"start":{"line":76,"column":14},"end":{"line":76,"column":54}},"22":{"start":{"line":77,"column":14},"end":{"line":77,"column":20}},"23":{"start":{"line":80,"column":14},"end":{"line":80,"column":47}},"24":{"start":{"line":81,"column":14},"end":{"line":81,"column":20}},"25":{"start":{"line":83,"column":10},"end":{"line":83,"column":16}},"26":{"start":{"line":85,"column":6},"end":{"line":85,"column":15}},"27":{"start":{"line":90,"column":6},"end":{"line":90,"column":49}},"28":{"start":{"line":95,"column":6},"end":{"line":95,"column":31}},"29":{"start":{"line":100,"column":6},"end":{"line":100,"column":31}},"30":{"start":{"line":105,"column":6},"end":{"line":105,"column":12}},"31":{"start":{"line":107,"column":6},"end":{"line":114,"column":7}},"32":{"start":{"line":109,"column":10},"end":{"line":109,"column":50}},"33":{"start":{"line":110,"column":10},"end":{"line":110,"column":16}},"34":{"start":{"line":112,"column":10},"end":{"line":112,"column":50}},"35":{"start":{"line":113,"column":10},"end":{"line":113,"column":16}},"36":{"start":{"line":115,"column":6},"end":{"line":115,"column":15}},"37":{"start":{"line":120,"column":6},"end":{"line":120,"column":12}},"38":{"start":{"line":122,"column":6},"end":{"line":129,"column":7}},"39":{"start":{"line":124,"column":10},"end":{"line":124,"column":49}},"40":{"start":{"line":125,"column":10},"end":{"line":125,"column":16}},"41":{"start":{"line":127,"column":10},"end":{"line":127,"column":49}},"42":{"start":{"line":128,"column":10},"end":{"line":128,"column":16}},"43":{"start":{"line":130,"column":6},"end":{"line":130,"column":15}},"44":{"start":{"line":135,"column":6},"end":{"line":135,"column":67}},"45":{"start":{"line":140,"column":6},"end":{"line":140,"column":66}},"46":{"start":{"line":146,"column":6},"end":{"line":146,"column":29}},"47":{"start":{"line":148,"column":6},"end":{"line":150,"column":7}},"48":{"start":{"line":149,"column":8},"end":{"line":149,"column":38}},"49":{"start":{"line":152,"column":6},"end":{"line":152,"column":20}},"50":{"start":{"line":156,"column":2},"end":{"line":158,"column":4}},"51":{"start":{"line":160,"column":2},"end":{"line":160,"column":13}},"52":{"start":{"line":163,"column":0},"end":{"line":163,"column":21}},"53":{"start":{"line":164,"column":0},"end":{"line":164,"column":26}}},"branchMap":{"1":{"line":59,"type":"switch","locations":[{"start":{"line":60,"column":8},"end":{"line":71,"column":16}},{"start":{"line":72,"column":8},"end":{"line":83,"column":16}}]},"2":{"line":61,"type":"switch","locations":[{"start":{"line":62,"column":12},"end":{"line":65,"column":20}},{"start":{"line":66,"column":12},"end":{"line":69,"column":20}}]},"3":{"line":73,"type":"switch","locations":[{"start":{"line":74,"column":12},"end":{"line":77,"column":20}},{"start":{"line":78,"column":12},"end":{"line":81,"column":20}}]},"4":{"line":107,"type":"switch","locations":[{"start":{"line":108,"column":8},"end":{"line":110,"column":16}},{"start":{"line":111,"column":8},"end":{"line":113,"column":16}}]},"5":{"line":122,"type":"switch","locations":[{"start":{"line":123,"column":8},"end":{"line":125,"column":16}},{"start":{"line":126,"column":8},"end":{"line":128,"column":16}}]}},"code":["'use strict';","","var extend = require('../../utils/object').extend;","","function factory (type, config, load, typed) {","","  var matrix = load(require('../../type/matrix/function/matrix'));","  var addScalar = load(require('./addScalar'));","  var latex = require('../../utils/latex.js');","  ","  var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));","  var algorithm04 = load(require('../../type/matrix/utils/algorithm04'));","  var algorithm10 = load(require('../../type/matrix/utils/algorithm10'));","  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));","  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));","","  /**","   * Add two or more values, `x + y`.","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.add(x, y)","   *    math.add(x, y, z, ...)","   *","   * Examples:","   *","   *    math.add(2, 3);               // returns number 5","   *    math.add(2, 3, 4);            // returns number 9","   *","   *    var a = math.complex(2, 3);","   *    var b = math.complex(-4, 1);","   *    math.add(a, b);               // returns Complex -2 + 4i","   *","   *    math.add([1, 2, 3], 4);       // returns Array [5, 6, 7]","   *","   *    var c = math.unit('5 cm');","   *    var d = math.unit('2.1 mm');","   *    math.add(c, d);               // returns Unit 52.1 mm","   *","   *    math.add(\"2.3\", \"4\");         // returns number 6.3","   *","   * See also:","   *","   *    subtract, sum","   *","   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to add","   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to add","   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Sum of `x` and `y`","   */","  var add = typed('add', extend({","    // we extend the signatures of addScalar with signatures dealing with matrices","","    'Matrix, Matrix': function (x, y) {","      // result","      var c;","      ","      // process matrix storage","      switch (x.storage()) {","        case 'sparse':","          switch (y.storage()) {","            case 'sparse':","              // sparse + sparse","              c = algorithm04(x, y, addScalar);","              break;","            default:","              // sparse + dense","              c = algorithm01(y, x, addScalar, true);","              break;","          }","          break;","        default:","          switch (y.storage()) {","            case 'sparse':","              // dense + sparse","              c = algorithm01(x, y, addScalar, false);","              break;","            default:","              // dense + dense","              c = algorithm13(x, y, addScalar);","              break;","          }","          break;","      }","      return c;","    },","    ","    'Array, Array': function (x, y) {","      // use matrix implementation","      return add(matrix(x), matrix(y)).valueOf();","    },","    ","    'Array, Matrix': function (x, y) {","      // use matrix implementation","      return add(matrix(x), y);","    },","    ","    'Matrix, Array': function (x, y) {","      // use matrix implementation","      return add(x, matrix(y));","    },","    ","    'Matrix, any': function (x, y) {","      // result","      var c;","      // check storage format","      switch (x.storage()) {","        case 'sparse':","          c = algorithm10(x, y, addScalar, false);","          break;","        default:","          c = algorithm14(x, y, addScalar, false);","          break;","      }","      return c;","    },","    ","    'any, Matrix': function (x, y) {","      // result","      var c;","      // check storage format","      switch (y.storage()) {","        case 'sparse':","          c = algorithm10(y, x, addScalar, true);","          break;","        default:","          c = algorithm14(y, x, addScalar, true);","          break;","      }","      return c;","    },","    ","    'Array, any': function (x, y) {","      // use matrix implementation","      return algorithm14(matrix(x), y, addScalar, false).valueOf();","    },","","    'any, Array': function (x, y) {","      // use matrix implementation","      return algorithm14(matrix(y), x, addScalar, true).valueOf();","    },","","    'any, any': addScalar,","","    'any, any, ...any': function (x, y, rest) {","      var result = add(x, y);","","      for (var i = 0; i < rest.length; i++) {","        result = add(result, rest[i]);","      }","","      return result;","    }","  }, addScalar.signatures));","","  add.toTex = {","    2: '\\\\left(${args[0]}' + latex.operators['add'] + '${args[1]}\\\\right)'","  };","  ","  return add;","}","","exports.name = 'add';","exports.factory = factory;",""],"l":{"3":1,"5":1,"7":0,"8":0,"9":0,"11":0,"12":0,"13":0,"14":0,"15":0,"51":0,"56":0,"59":0,"61":0,"64":0,"65":0,"68":0,"69":0,"71":0,"73":0,"76":0,"77":0,"80":0,"81":0,"83":0,"85":0,"90":0,"95":0,"100":0,"105":0,"107":0,"109":0,"110":0,"112":0,"113":0,"115":0,"120":0,"122":0,"124":0,"125":0,"127":0,"128":0,"130":0,"135":0,"140":0,"146":0,"148":0,"149":0,"152":0,"156":0,"160":0,"163":1,"164":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/addScalar.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/addScalar.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"factory","line":3,"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":44}}},"2":{"name":"(anonymous_2)","line":20,"loc":{"start":{"line":20,"column":22},"end":{"line":20,"column":38}}},"3":{"name":"(anonymous_3)","line":24,"loc":{"start":{"line":24,"column":24},"end":{"line":24,"column":40}}},"4":{"name":"(anonymous_4)","line":28,"loc":{"start":{"line":28,"column":28},"end":{"line":28,"column":44}}},"5":{"name":"(anonymous_5)","line":32,"loc":{"start":{"line":32,"column":26},"end":{"line":32,"column":42}}},"6":{"name":"(anonymous_6)","line":36,"loc":{"start":{"line":36,"column":18},"end":{"line":36,"column":34}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":49,"column":1}},"2":{"start":{"line":18,"column":2},"end":{"line":46,"column":5}},"3":{"start":{"line":21,"column":6},"end":{"line":21,"column":19}},"4":{"start":{"line":25,"column":6},"end":{"line":25,"column":22}},"5":{"start":{"line":29,"column":6},"end":{"line":29,"column":23}},"6":{"start":{"line":33,"column":6},"end":{"line":33,"column":22}},"7":{"start":{"line":37,"column":6},"end":{"line":37,"column":95}},"8":{"start":{"line":37,"column":27},"end":{"line":37,"column":95}},"9":{"start":{"line":38,"column":6},"end":{"line":38,"column":95}},"10":{"start":{"line":38,"column":27},"end":{"line":38,"column":95}},"11":{"start":{"line":39,"column":6},"end":{"line":39,"column":65}},"12":{"start":{"line":39,"column":27},"end":{"line":39,"column":65}},"13":{"start":{"line":41,"column":6},"end":{"line":41,"column":26}},"14":{"start":{"line":42,"column":6},"end":{"line":42,"column":42}},"15":{"start":{"line":43,"column":6},"end":{"line":43,"column":28}},"16":{"start":{"line":44,"column":6},"end":{"line":44,"column":17}},"17":{"start":{"line":48,"column":2},"end":{"line":48,"column":13}},"18":{"start":{"line":51,"column":0},"end":{"line":51,"column":26}}},"branchMap":{"1":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":6},"end":{"line":37,"column":6}},{"start":{"line":37,"column":6},"end":{"line":37,"column":6}}]},"2":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":6},"end":{"line":38,"column":6}},{"start":{"line":38,"column":6},"end":{"line":38,"column":6}}]},"3":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":6},"end":{"line":39,"column":6}},{"start":{"line":39,"column":6},"end":{"line":39,"column":6}}]}},"code":["'use strict';","","function factory(type, config, load, typed) {","","  /**","   * Add two scalar values, `x + y`.","   * This function is meant for internal use: it is used by the public function","   * `add`","   *","   * This function does not support collections (Array or Matrix), and does","   * not validate the number of of inputs.","   *","   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to add","   * @param  {number | BigNumber | Fraction | Complex} y          Second value to add","   * @return {number | BigNumber | Fraction | Complex | Unit}                      Sum of `x` and `y`","   * @private","   */","  var add = typed('add', {","","    'number, number': function (x, y) {","      return x + y;","    },","","    'Complex, Complex': function (x, y) {","      return x.add(y);","    },","","    'BigNumber, BigNumber': function (x, y) {","      return x.plus(y);","    },","","    'Fraction, Fraction': function (x, y) {","      return x.add(y);","    },","","    'Unit, Unit': function (x, y) {","      if (x.value == null) throw new Error('Parameter x contains a unit with undefined value');","      if (y.value == null) throw new Error('Parameter y contains a unit with undefined value');","      if (!x.equalBase(y)) throw new Error('Units do not match');","","      var res = x.clone();","      res.value = add(res.value, y.value);","      res.fixPrefix = false;","      return res;","    }","  });","","  return add;","}","","exports.factory = factory;",""],"l":{"3":1,"18":1,"21":0,"25":0,"29":0,"33":0,"37":0,"38":0,"39":0,"41":0,"42":0,"43":0,"44":0,"48":1,"51":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/cbrt.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/cbrt.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":1,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":1,"52":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[1,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":58,"loc":{"start":{"line":58,"column":17},"end":{"line":58,"column":30}}},"3":{"name":"(anonymous_3)","line":64,"loc":{"start":{"line":64,"column":22},"end":{"line":64,"column":35}}},"4":{"name":"_cbrtComplex","line":79,"loc":{"start":{"line":79,"column":2},"end":{"line":79,"column":37}}},"5":{"name":"_cbrtUnit","line":111,"loc":{"start":{"line":111,"column":2},"end":{"line":111,"column":24}}},"6":{"name":"(anonymous_6)","line":162,"loc":{"start":{"line":162,"column":31},"end":{"line":162,"column":44}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":150,"column":1}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":49}},"4":{"start":{"line":7,"column":2},"end":{"line":7,"column":56}},"5":{"start":{"line":8,"column":2},"end":{"line":8,"column":66}},"6":{"start":{"line":49,"column":2},"end":{"line":68,"column":5}},"7":{"start":{"line":59,"column":6},"end":{"line":59,"column":22}},"8":{"start":{"line":66,"column":6},"end":{"line":66,"column":36}},"9":{"start":{"line":79,"column":2},"end":{"line":103,"column":3}},"10":{"start":{"line":82,"column":4},"end":{"line":82,"column":28}},"11":{"start":{"line":83,"column":4},"end":{"line":83,"column":22}},"12":{"start":{"line":86,"column":4},"end":{"line":87,"column":42}},"13":{"start":{"line":89,"column":4},"end":{"line":102,"column":5}},"14":{"start":{"line":90,"column":6},"end":{"line":96,"column":8}},"15":{"start":{"line":98,"column":6},"end":{"line":98,"column":61}},"16":{"start":{"line":101,"column":6},"end":{"line":101,"column":23}},"17":{"start":{"line":111,"column":2},"end":{"line":145,"column":3}},"18":{"start":{"line":112,"column":4},"end":{"line":144,"column":5}},"19":{"start":{"line":113,"column":6},"end":{"line":113,"column":29}},"20":{"start":{"line":114,"column":6},"end":{"line":114,"column":25}},"21":{"start":{"line":115,"column":6},"end":{"line":115,"column":33}},"22":{"start":{"line":116,"column":6},"end":{"line":116,"column":43}},"23":{"start":{"line":117,"column":6},"end":{"line":117,"column":20}},"24":{"start":{"line":120,"column":6},"end":{"line":120,"column":39}},"25":{"start":{"line":121,"column":6},"end":{"line":123,"column":7}},"26":{"start":{"line":122,"column":8},"end":{"line":122,"column":38}},"27":{"start":{"line":126,"column":6},"end":{"line":126,"column":16}},"28":{"start":{"line":127,"column":6},"end":{"line":135,"column":7}},"29":{"start":{"line":128,"column":8},"end":{"line":128,"column":45}},"30":{"start":{"line":130,"column":11},"end":{"line":135,"column":7}},"31":{"start":{"line":131,"column":8},"end":{"line":131,"column":40}},"32":{"start":{"line":134,"column":8},"end":{"line":134,"column":20}},"33":{"start":{"line":137,"column":6},"end":{"line":137,"column":32}},"34":{"start":{"line":139,"column":6},"end":{"line":141,"column":7}},"35":{"start":{"line":140,"column":8},"end":{"line":140,"column":48}},"36":{"start":{"line":143,"column":6},"end":{"line":143,"column":20}},"37":{"start":{"line":147,"column":2},"end":{"line":147,"column":44}},"38":{"start":{"line":149,"column":2},"end":{"line":149,"column":14}},"39":{"start":{"line":162,"column":0},"end":{"line":182,"column":2}},"40":{"start":{"line":163,"column":2},"end":{"line":165,"column":3}},"41":{"start":{"line":164,"column":4},"end":{"line":164,"column":13}},"42":{"start":{"line":167,"column":2},"end":{"line":167,"column":21}},"43":{"start":{"line":168,"column":2},"end":{"line":168,"column":13}},"44":{"start":{"line":169,"column":2},"end":{"line":171,"column":3}},"45":{"start":{"line":170,"column":4},"end":{"line":170,"column":11}},"46":{"start":{"line":173,"column":2},"end":{"line":179,"column":3}},"47":{"start":{"line":174,"column":4},"end":{"line":174,"column":39}},"48":{"start":{"line":176,"column":4},"end":{"line":176,"column":56}},"49":{"start":{"line":178,"column":4},"end":{"line":178,"column":15}},"50":{"start":{"line":181,"column":2},"end":{"line":181,"column":35}},"51":{"start":{"line":184,"column":0},"end":{"line":184,"column":22}},"52":{"start":{"line":185,"column":0},"end":{"line":185,"column":26}}},"branchMap":{"1":{"line":89,"type":"if","locations":[{"start":{"line":89,"column":4},"end":{"line":89,"column":4}},{"start":{"line":89,"column":4},"end":{"line":89,"column":4}}]},"2":{"line":98,"type":"cond-expr","locations":[{"start":{"line":98,"column":43},"end":{"line":98,"column":46}},{"start":{"line":98,"column":49},"end":{"line":98,"column":60}}]},"3":{"line":112,"type":"if","locations":[{"start":{"line":112,"column":4},"end":{"line":112,"column":4}},{"start":{"line":112,"column":4},"end":{"line":112,"column":4}}]},"4":{"line":112,"type":"binary-expr","locations":[{"start":{"line":112,"column":7},"end":{"line":112,"column":14}},{"start":{"line":112,"column":18},"end":{"line":112,"column":35}}]},"5":{"line":121,"type":"if","locations":[{"start":{"line":121,"column":6},"end":{"line":121,"column":6}},{"start":{"line":121,"column":6},"end":{"line":121,"column":6}}]},"6":{"line":127,"type":"if","locations":[{"start":{"line":127,"column":6},"end":{"line":127,"column":6}},{"start":{"line":127,"column":6},"end":{"line":127,"column":6}}]},"7":{"line":127,"type":"binary-expr","locations":[{"start":{"line":127,"column":10},"end":{"line":127,"column":17}},{"start":{"line":127,"column":21},"end":{"line":127,"column":40}}]},"8":{"line":130,"type":"if","locations":[{"start":{"line":130,"column":11},"end":{"line":130,"column":11}},{"start":{"line":130,"column":11},"end":{"line":130,"column":11}}]},"9":{"line":130,"type":"binary-expr","locations":[{"start":{"line":130,"column":15},"end":{"line":130,"column":22}},{"start":{"line":130,"column":26},"end":{"line":130,"column":44}}]},"10":{"line":139,"type":"if","locations":[{"start":{"line":139,"column":6},"end":{"line":139,"column":6}},{"start":{"line":139,"column":6},"end":{"line":139,"column":6}}]},"11":{"line":162,"type":"binary-expr","locations":[{"start":{"line":162,"column":18},"end":{"line":162,"column":27}},{"start":{"line":162,"column":31},"end":{"line":182,"column":1}}]},"12":{"line":163,"type":"if","locations":[{"start":{"line":163,"column":2},"end":{"line":163,"column":2}},{"start":{"line":163,"column":2},"end":{"line":163,"column":2}}]},"13":{"line":169,"type":"if","locations":[{"start":{"line":169,"column":2},"end":{"line":169,"column":2}},{"start":{"line":169,"column":2},"end":{"line":169,"column":2}}]},"14":{"line":173,"type":"if","locations":[{"start":{"line":173,"column":2},"end":{"line":173,"column":2}},{"start":{"line":173,"column":2},"end":{"line":173,"column":2}}]},"15":{"line":181,"type":"cond-expr","locations":[{"start":{"line":181,"column":18},"end":{"line":181,"column":25}},{"start":{"line":181,"column":28},"end":{"line":181,"column":34}}]}},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","","function factory (type, config, load, typed) {","  var unaryMinus = load(require('./unaryMinus'));","  var isNegative = load(require('../utils/isNegative'));","  var matrix = load(require('../../type/matrix/function/matrix'));","","  /**","   * Calculate the cubic root of a value.","   *","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.cbrt(x)","   *    math.cbrt(x, allRoots)","   *","   * Examples:","   *","   *    math.cbrt(27);                  // returns 3","   *    math.cube(3);                   // returns 27","   *    math.cbrt(-64);                 // returns -4","   *    math.cbrt(math.unit('27 m^3')); // returns Unit 3 m","   *    math.cbrt([27, 64, 125]);       // returns [3, 4, 5]","   *","   *    var x = math.complex('8i');","   *    math.cbrt(x);                   // returns Complex 1.7320508075689 + i","   *    math.cbrt(x, true);             // returns Matrix [","   *                                    //    1.7320508075689 + i","   *                                    //   -1.7320508075689 + i","   *                                    //   -2i","   *                                    // ]","   *","   * See also:","   *","   *    square, sqrt, cube","   *","   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x","   *            Value for which to calculate the cubic root.","   * @param {boolean} [allRoots]  Optional, false by default. Only applicable","   *            when `x` is a number or complex number. If true, all complex","   *            roots are returned, if false (default) the principal root is","   *            returned.","   * @return {number | BigNumber | Complex | Unit | Array | Matrix}","   *            Returns the cubic root of `x`","   */","  var cbrt = typed('cbrt', {","    'number': _cbrtNumber,","    // note: signature 'number, boolean' is also supported,","    //       created by typed as it knows how to convert number to Complex","","    'Complex': _cbrtComplex,","","    'Complex, boolean': _cbrtComplex,","","    'BigNumber': function (x) {","      return x.cbrt();","    },","","    'Unit': _cbrtUnit,","","    'Array | Matrix': function (x) {","      // deep map collection, skip zeros since cbrt(0) = 0","      return deepMap(x, cbrt, true);","    }","  });","","  /**","   * Calculate the cubic root for a complex number","   * @param {Complex} x","   * @param {boolean} [allRoots]   If true, the function will return an array","   *                               with all three roots. If false or undefined,","   *                               the principal root is returned.","   * @returns {Complex | Array.<Complex> | Matrix.<Complex>} Returns the cubic root(s) of x","   * @private","   */","  function _cbrtComplex(x, allRoots) {","    // https://www.wikiwand.com/en/Cube_root#/Complex_numbers","","    var arg_3 = x.arg() / 3;","    var abs = x.abs();","","    // principal root:","    var principal = new type.Complex(_cbrtNumber(abs), 0).mul(","        new type.Complex(0, arg_3).exp());","","    if (allRoots) {","      var all = [","          principal,","          new type.Complex(_cbrtNumber(abs), 0).mul(","            new type.Complex(0, arg_3 + Math.PI * 2 / 3).exp()),","          new type.Complex(_cbrtNumber(abs), 0).mul(","            new type.Complex(0, arg_3 - Math.PI * 2 / 3).exp())","      ];","","      return (config.matrix === 'Array') ? all : matrix(all);","    }","    else {","      return principal;","    }","  }","","  /**","   * Calculate the cubic root for a Unit","   * @param {Unit} x","   * @return {Unit} Returns the cubic root of x","   * @private","   */","  function _cbrtUnit(x) {","    if(x.value && x.value.isComplex) {","      var result = x.clone();","      result.value = 1.0;","      result = result.pow(1.0/3);           // Compute the units","      result.value = _cbrtComplex(x.value); // Compute the value","      return result;","    }","    else {","      var negate = isNegative(x.value);","      if (negate) {","        x.value = unaryMinus(x.value);","      }","","      // TODO: create a helper function for this","      var third;","      if (x.value && x.value.isBigNumber) {","        third = new type.BigNumber(1).div(3);","      }","      else if (x.value && x.value.isFraction) {","        third = new type.Fraction(1, 3);","      }","      else {","        third = 1/3;","      }","","      var result = x.pow(third);","","      if (negate) {","        result.value = unaryMinus(result.value);","      }","","      return result;","    }","  }","","  cbrt.toTex = {1: '\\\\sqrt[3]{${args[0]}}'};","","  return cbrt;","}","","/**"," * Calculate cbrt for a number"," *"," * Code from es6-shim.js:"," *   https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1564-L1577"," *"," * @param {number} x"," * @returns {number | Complex} Returns the cubic root of x"," * @private"," */","var _cbrtNumber = Math.cbrt || function (x) {","  if (x === 0) {","    return x;","  }","","  var negate = x < 0;","  var result;","  if (negate) {","    x = -x;","  }","","  if (isFinite(x)) {","    result = Math.exp(Math.log(x) / 3);","    // from http://en.wikipedia.org/wiki/Cube_root#Numerical_methods","    result = (x / (result * result) + (2 * result)) / 3;","  } else {","    result = x;","  }","","  return negate ? -result : result;","};","","exports.name = 'cbrt';","exports.factory = factory;",""],"l":{"3":1,"5":1,"6":0,"7":0,"8":0,"49":0,"59":0,"66":0,"79":1,"82":0,"83":0,"86":0,"89":0,"90":0,"98":0,"101":0,"111":1,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"120":0,"121":0,"122":0,"126":0,"127":0,"128":0,"130":0,"131":0,"134":0,"137":0,"139":0,"140":0,"143":0,"147":0,"149":0,"162":1,"163":0,"164":0,"167":0,"168":0,"169":0,"170":0,"173":0,"174":0,"176":0,"178":0,"181":0,"184":1,"185":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/ceil.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/ceil.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1,"11":1},"b":{},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":37,"loc":{"start":{"line":37,"column":15},"end":{"line":37,"column":28}}},"3":{"name":"(anonymous_3)","line":41,"loc":{"start":{"line":41,"column":17},"end":{"line":41,"column":30}}},"4":{"name":"(anonymous_4)","line":45,"loc":{"start":{"line":45,"column":16},"end":{"line":45,"column":29}}},"5":{"name":"(anonymous_5)","line":49,"loc":{"start":{"line":49,"column":22},"end":{"line":49,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":58,"column":1}},"3":{"start":{"line":34,"column":2},"end":{"line":53,"column":5}},"4":{"start":{"line":38,"column":6},"end":{"line":38,"column":22}},"5":{"start":{"line":42,"column":6},"end":{"line":42,"column":22}},"6":{"start":{"line":46,"column":6},"end":{"line":46,"column":22}},"7":{"start":{"line":51,"column":6},"end":{"line":51,"column":36}},"8":{"start":{"line":55,"column":2},"end":{"line":55,"column":60}},"9":{"start":{"line":57,"column":2},"end":{"line":57,"column":14}},"10":{"start":{"line":60,"column":0},"end":{"line":60,"column":22}},"11":{"start":{"line":61,"column":0},"end":{"line":61,"column":26}}},"branchMap":{},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","","function factory (type, config, load, typed) {","  /**","   * Round a value towards plus infinity","   * If `x` is complex, both real and imaginary part are rounded towards plus infinity.","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.ceil(x)","   *","   * Examples:","   *","   *    math.ceil(3.2);               // returns number 4","   *    math.ceil(3.8);               // returns number 4","   *    math.ceil(-4.2);              // returns number -4","   *    math.ceil(-4.7);              // returns number -4","   *","   *    var c = math.complex(3.2, -2.7);","   *    math.ceil(c);                 // returns Complex 4 - 2i","   *","   *    math.ceil([3.2, 3.8, -4.7]);  // returns Array [4, 4, -4]","   *","   * See also:","   *","   *    floor, fix, round","   *","   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded","   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value","   */","  var ceil = typed('ceil', {","    'number': Math.ceil,","","    'Complex': function (x) {","      return x.ceil();","    },","","    'BigNumber': function (x) {","      return x.ceil();","    },","","    'Fraction': function (x) {","      return x.ceil();","    },","","    'Array | Matrix': function (x) {","      // deep map collection, skip zeros since ceil(0) = 0","      return deepMap(x, ceil, true);","    }","  });","","  ceil.toTex = {1: '\\\\left\\\\lceil${args[0]}\\\\right\\\\rceil'};","","  return ceil;","}","","exports.name = 'ceil';","exports.factory = factory;",""],"l":{"3":1,"5":1,"34":0,"38":0,"42":0,"46":0,"51":0,"55":0,"57":0,"60":1,"61":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/cube.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/cube.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1,"13":1},"b":{},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":32,"loc":{"start":{"line":32,"column":14},"end":{"line":32,"column":27}}},"3":{"name":"(anonymous_3)","line":36,"loc":{"start":{"line":36,"column":15},"end":{"line":36,"column":28}}},"4":{"name":"(anonymous_4)","line":40,"loc":{"start":{"line":40,"column":17},"end":{"line":40,"column":30}}},"5":{"name":"(anonymous_5)","line":44,"loc":{"start":{"line":44,"column":16},"end":{"line":44,"column":29}}},"6":{"name":"(anonymous_6)","line":48,"loc":{"start":{"line":48,"column":22},"end":{"line":48,"column":35}}},"7":{"name":"(anonymous_7)","line":53,"loc":{"start":{"line":53,"column":12},"end":{"line":53,"column":24}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":61,"column":1}},"3":{"start":{"line":31,"column":2},"end":{"line":56,"column":5}},"4":{"start":{"line":33,"column":6},"end":{"line":33,"column":23}},"5":{"start":{"line":37,"column":6},"end":{"line":37,"column":29}},"6":{"start":{"line":41,"column":6},"end":{"line":41,"column":33}},"7":{"start":{"line":45,"column":6},"end":{"line":45,"column":22}},"8":{"start":{"line":50,"column":6},"end":{"line":50,"column":36}},"9":{"start":{"line":54,"column":6},"end":{"line":54,"column":22}},"10":{"start":{"line":58,"column":2},"end":{"line":58,"column":50}},"11":{"start":{"line":60,"column":2},"end":{"line":60,"column":14}},"12":{"start":{"line":63,"column":0},"end":{"line":63,"column":22}},"13":{"start":{"line":64,"column":0},"end":{"line":64,"column":26}}},"branchMap":{},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","","function factory (type, config, load, typed) {","","  /**","   * Compute the cube of a value, `x * x * x`.","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.cube(x)","   *","   * Examples:","   *","   *    math.cube(2);            // returns number 8","   *    math.pow(2, 3);          // returns number 8","   *    math.cube(4);            // returns number 64","   *    4 * 4 * 4;               // returns number 64","   *","   *    math.cube([1, 2, 3, 4]); // returns Array [1, 8, 27, 64]","   *","   * See also:","   *","   *    multiply, square, pow, cbrt","   *","   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x  Number for which to calculate the cube","   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} Cube of x","   */","  var cube = typed('cube', {","    'number': function (x) {","      return x * x * x;","    },","","    'Complex': function (x) {","      return x.mul(x).mul(x); // Is faster than pow(x, 3)","    },","","    'BigNumber': function (x) {","      return x.times(x).times(x);","    },","","    'Fraction': function (x) {","      return x.pow(3); // Is faster than mul()mul()mul()","    },","","    'Array | Matrix': function (x) {","      // deep map collection, skip zeros since cube(0) = 0","      return deepMap(x, cube, true);","    },","","    'Unit': function(x) {","      return x.pow(3);","    }","  });","","  cube.toTex = {1: '\\\\left(${args[0]}\\\\right)^3'};","","  return cube;","}","","exports.name = 'cube';","exports.factory = factory;",""],"l":{"3":1,"5":1,"31":0,"33":0,"37":0,"41":0,"45":0,"50":0,"54":0,"58":0,"60":0,"63":1,"64":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/divide.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/divide.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":1,"23":1},"b":{"1":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":49,"loc":{"start":{"line":49,"column":38},"end":{"line":49,"column":54}}},"3":{"name":"(anonymous_3)","line":57,"loc":{"start":{"line":57,"column":19},"end":{"line":57,"column":35}}},"4":{"name":"(anonymous_4)","line":73,"loc":{"start":{"line":73,"column":18},"end":{"line":73,"column":34}}},"5":{"name":"(anonymous_5)","line":78,"loc":{"start":{"line":78,"column":27},"end":{"line":78,"column":43}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":50}},"2":{"start":{"line":5,"column":0},"end":{"line":86,"column":1}},"3":{"start":{"line":7,"column":2},"end":{"line":7,"column":53}},"4":{"start":{"line":8,"column":2},"end":{"line":8,"column":49}},"5":{"start":{"line":9,"column":2},"end":{"line":9,"column":52}},"6":{"start":{"line":10,"column":2},"end":{"line":10,"column":72}},"7":{"start":{"line":12,"column":2},"end":{"line":12,"column":73}},"8":{"start":{"line":13,"column":2},"end":{"line":13,"column":73}},"9":{"start":{"line":46,"column":2},"end":{"line":81,"column":31}},"10":{"start":{"line":54,"column":6},"end":{"line":54,"column":33}},"11":{"start":{"line":59,"column":6},"end":{"line":59,"column":12}},"12":{"start":{"line":62,"column":6},"end":{"line":69,"column":7}},"13":{"start":{"line":64,"column":10},"end":{"line":64,"column":53}},"14":{"start":{"line":65,"column":10},"end":{"line":65,"column":16}},"15":{"start":{"line":67,"column":10},"end":{"line":67,"column":53}},"16":{"start":{"line":68,"column":10},"end":{"line":68,"column":16}},"17":{"start":{"line":70,"column":6},"end":{"line":70,"column":15}},"18":{"start":{"line":75,"column":6},"end":{"line":75,"column":70}},"19":{"start":{"line":79,"column":6},"end":{"line":79,"column":33}},"20":{"start":{"line":83,"column":2},"end":{"line":83,"column":55}},"21":{"start":{"line":85,"column":2},"end":{"line":85,"column":16}},"22":{"start":{"line":88,"column":0},"end":{"line":88,"column":24}},"23":{"start":{"line":89,"column":0},"end":{"line":89,"column":26}}},"branchMap":{"1":{"line":62,"type":"switch","locations":[{"start":{"line":63,"column":8},"end":{"line":65,"column":16}},{"start":{"line":66,"column":8},"end":{"line":68,"column":16}}]}},"code":["'use strict';","","var extend = require('../../utils/object').extend;","","function factory (type, config, load, typed) {","","  var divideScalar = load(require('./divideScalar'));","  var multiply     = load(require('./multiply'));","  var inv          = load(require('../matrix/inv'));","  var matrix       = load(require('../../type/matrix/function/matrix'));","","  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));","  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));","  ","  /**","   * Divide two values, `x / y`.","   * To divide matrices, `x` is multiplied with the inverse of `y`: `x * inv(y)`.","   *","   * Syntax:","   *","   *    math.divide(x, y)","   *","   * Examples:","   *","   *    math.divide(2, 3);            // returns number 0.6666666666666666","   *","   *    var a = math.complex(5, 14);","   *    var b = math.complex(4, 1);","   *    math.divide(a, b);            // returns Complex 2 + 3i","   *","   *    var c = [[7, -6], [13, -4]];","   *    var d = [[1, 2], [4, 3]];","   *    math.divide(c, d);            // returns Array [[-9, 4], [-11, 6]]","   *","   *    var e = math.unit('18 km');","   *    math.divide(e, 4.5);          // returns Unit 4 km","   *","   * See also:","   *","   *    multiply","   *","   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x   Numerator","   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} y          Denominator","   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                      Quotient, `x / y`","   */","  var divide = typed('divide', extend({","    // we extend the signatures of divideScalar with signatures dealing with matrices","","    'Array | Matrix, Array | Matrix': function (x, y) {","      // TODO: implement matrix right division using pseudo inverse","      // http://www.mathworks.nl/help/matlab/ref/mrdivide.html","      // http://www.gnu.org/software/octave/doc/interpreter/Arithmetic-Ops.html","      // http://stackoverflow.com/questions/12263932/how-does-gnu-octave-matrix-division-work-getting-unexpected-behaviour","      return multiply(x, inv(y));","    },","","    'Matrix, any': function (x, y) {","      // result","      var c;","","      // process storage format","      switch (x.storage()) {","        case 'sparse':","          c = algorithm11(x, y, divideScalar, false);","          break;","        case 'dense':","          c = algorithm14(x, y, divideScalar, false);","          break;","      }","      return c;","    },","    ","    'Array, any': function (x, y) {","      // use matrix implementation","      return algorithm14(matrix(x), y, divideScalar, false).valueOf();","    },","","    'any, Array | Matrix': function (x, y) {","      return multiply(x, inv(y));","    }","  }, divideScalar.signatures));","","  divide.toTex = {2: '\\\\frac{${args[0]}}{${args[1]}}'};","","  return divide;","}","","exports.name = 'divide';","exports.factory = factory;",""],"l":{"3":1,"5":1,"7":0,"8":0,"9":0,"10":0,"12":0,"13":0,"46":0,"54":0,"59":0,"62":0,"64":0,"65":0,"67":0,"68":0,"70":0,"75":0,"79":0,"83":0,"85":0,"88":1,"89":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/dotDivide.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/dotDivide.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":1,"50":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"fnMap":{"1":{"name":"factory","line":3,"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}}},"2":{"name":"(anonymous_2)","line":47,"loc":{"start":{"line":47,"column":22},"end":{"line":47,"column":38}}},"3":{"name":"(anonymous_3)","line":81,"loc":{"start":{"line":81,"column":20},"end":{"line":81,"column":36}}},"4":{"name":"(anonymous_4)","line":86,"loc":{"start":{"line":86,"column":21},"end":{"line":86,"column":37}}},"5":{"name":"(anonymous_5)","line":91,"loc":{"start":{"line":91,"column":21},"end":{"line":91,"column":37}}},"6":{"name":"(anonymous_6)","line":96,"loc":{"start":{"line":96,"column":19},"end":{"line":96,"column":35}}},"7":{"name":"(anonymous_7)","line":111,"loc":{"start":{"line":111,"column":19},"end":{"line":111,"column":35}}},"8":{"name":"(anonymous_8)","line":126,"loc":{"start":{"line":126,"column":18},"end":{"line":126,"column":34}}},"9":{"name":"(anonymous_9)","line":131,"loc":{"start":{"line":131,"column":18},"end":{"line":131,"column":34}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":142,"column":1}},"2":{"start":{"line":5,"column":2},"end":{"line":5,"column":66}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":53}},"4":{"start":{"line":7,"column":2},"end":{"line":7,"column":43}},"5":{"start":{"line":9,"column":2},"end":{"line":9,"column":73}},"6":{"start":{"line":10,"column":2},"end":{"line":10,"column":73}},"7":{"start":{"line":11,"column":2},"end":{"line":11,"column":73}},"8":{"start":{"line":12,"column":2},"end":{"line":12,"column":73}},"9":{"start":{"line":13,"column":2},"end":{"line":13,"column":73}},"10":{"start":{"line":14,"column":2},"end":{"line":14,"column":73}},"11":{"start":{"line":15,"column":2},"end":{"line":15,"column":73}},"12":{"start":{"line":43,"column":2},"end":{"line":135,"column":5}},"13":{"start":{"line":49,"column":6},"end":{"line":49,"column":12}},"14":{"start":{"line":52,"column":6},"end":{"line":77,"column":7}},"15":{"start":{"line":54,"column":10},"end":{"line":63,"column":11}},"16":{"start":{"line":57,"column":14},"end":{"line":57,"column":57}},"17":{"start":{"line":58,"column":14},"end":{"line":58,"column":20}},"18":{"start":{"line":61,"column":14},"end":{"line":61,"column":56}},"19":{"start":{"line":62,"column":14},"end":{"line":62,"column":20}},"20":{"start":{"line":64,"column":10},"end":{"line":64,"column":16}},"21":{"start":{"line":66,"column":10},"end":{"line":75,"column":11}},"22":{"start":{"line":69,"column":14},"end":{"line":69,"column":57}},"23":{"start":{"line":70,"column":14},"end":{"line":70,"column":20}},"24":{"start":{"line":73,"column":14},"end":{"line":73,"column":50}},"25":{"start":{"line":74,"column":14},"end":{"line":74,"column":20}},"26":{"start":{"line":76,"column":10},"end":{"line":76,"column":16}},"27":{"start":{"line":78,"column":6},"end":{"line":78,"column":15}},"28":{"start":{"line":83,"column":6},"end":{"line":83,"column":55}},"29":{"start":{"line":88,"column":6},"end":{"line":88,"column":37}},"30":{"start":{"line":93,"column":6},"end":{"line":93,"column":37}},"31":{"start":{"line":98,"column":6},"end":{"line":98,"column":12}},"32":{"start":{"line":100,"column":6},"end":{"line":107,"column":7}},"33":{"start":{"line":102,"column":10},"end":{"line":102,"column":53}},"34":{"start":{"line":103,"column":10},"end":{"line":103,"column":16}},"35":{"start":{"line":105,"column":10},"end":{"line":105,"column":53}},"36":{"start":{"line":106,"column":10},"end":{"line":106,"column":16}},"37":{"start":{"line":108,"column":6},"end":{"line":108,"column":15}},"38":{"start":{"line":113,"column":6},"end":{"line":113,"column":12}},"39":{"start":{"line":115,"column":6},"end":{"line":122,"column":7}},"40":{"start":{"line":117,"column":10},"end":{"line":117,"column":52}},"41":{"start":{"line":118,"column":10},"end":{"line":118,"column":16}},"42":{"start":{"line":120,"column":10},"end":{"line":120,"column":52}},"43":{"start":{"line":121,"column":10},"end":{"line":121,"column":16}},"44":{"start":{"line":123,"column":6},"end":{"line":123,"column":15}},"45":{"start":{"line":128,"column":6},"end":{"line":128,"column":70}},"46":{"start":{"line":133,"column":6},"end":{"line":133,"column":69}},"47":{"start":{"line":137,"column":2},"end":{"line":139,"column":4}},"48":{"start":{"line":141,"column":2},"end":{"line":141,"column":19}},"49":{"start":{"line":144,"column":0},"end":{"line":144,"column":27}},"50":{"start":{"line":145,"column":0},"end":{"line":145,"column":26}}},"branchMap":{"1":{"line":52,"type":"switch","locations":[{"start":{"line":53,"column":8},"end":{"line":64,"column":16}},{"start":{"line":65,"column":8},"end":{"line":76,"column":16}}]},"2":{"line":54,"type":"switch","locations":[{"start":{"line":55,"column":12},"end":{"line":58,"column":20}},{"start":{"line":59,"column":12},"end":{"line":62,"column":20}}]},"3":{"line":66,"type":"switch","locations":[{"start":{"line":67,"column":12},"end":{"line":70,"column":20}},{"start":{"line":71,"column":12},"end":{"line":74,"column":20}}]},"4":{"line":100,"type":"switch","locations":[{"start":{"line":101,"column":8},"end":{"line":103,"column":16}},{"start":{"line":104,"column":8},"end":{"line":106,"column":16}}]},"5":{"line":115,"type":"switch","locations":[{"start":{"line":116,"column":8},"end":{"line":118,"column":16}},{"start":{"line":119,"column":8},"end":{"line":121,"column":16}}]}},"code":["'use strict';","","function factory (type, config, load, typed) {","","  var matrix = load(require('../../type/matrix/function/matrix'));","  var divideScalar = load(require('./divideScalar'));","  var latex = require('../../utils/latex');","  ","  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));","  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));","  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));","  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));","  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));","  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));","  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));","","  /**","   * Divide two matrices element wise. The function accepts both matrices and","   * scalar values.","   *","   * Syntax:","   *","   *    math.dotDivide(x, y)","   *","   * Examples:","   *","   *    math.dotDivide(2, 4);   // returns 0.5","   *","   *    a = [[9, 5], [6, 1]];","   *    b = [[3, 2], [5, 2]];","   *","   *    math.dotDivide(a, b);   // returns [[3, 2.5], [1.2, 0.5]]","   *    math.divide(a, b);      // returns [[1.75, 0.75], [-1.75, 2.25]]","   *","   * See also:","   *","   *    divide, multiply, dotMultiply","   *","   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Numerator","   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Denominator","   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Quotient, `x ./ y`","   */","  var dotDivide = typed('dotDivide', {","    ","    'any, any': divideScalar,","    ","    'Matrix, Matrix': function (x, y) {","      // result","      var c;","","      // process matrix storage","      switch (x.storage()) {","        case 'sparse':","          switch (y.storage()) {","            case 'sparse':","              // sparse ./ sparse","              c = algorithm07(x, y, divideScalar, false);","              break;","            default:","              // sparse ./ dense","              c = algorithm02(y, x, divideScalar, true);","              break;","          }","          break;","        default:","          switch (y.storage()) {","            case 'sparse':","              // dense ./ sparse","              c = algorithm03(x, y, divideScalar, false);","              break;","            default:","              // dense ./ dense","              c = algorithm13(x, y, divideScalar);","              break;","          }","          break;","      }","      return c;","    },","","    'Array, Array': function (x, y) {","      // use matrix implementation","      return dotDivide(matrix(x), matrix(y)).valueOf();","    },","","    'Array, Matrix': function (x, y) {","      // use matrix implementation","      return dotDivide(matrix(x), y);","    },","","    'Matrix, Array': function (x, y) {","      // use matrix implementation","      return dotDivide(x, matrix(y));","    },","","    'Matrix, any': function (x, y) {","      // result","      var c;","      // check storage format","      switch (x.storage()) {","        case 'sparse':","          c = algorithm11(x, y, divideScalar, false);","          break;","        default:","          c = algorithm14(x, y, divideScalar, false);","          break;","      }","      return c;","    },","","    'any, Matrix': function (x, y) {","      // result","      var c;","      // check storage format","      switch (y.storage()) {","        case 'sparse':","          c = algorithm12(y, x, divideScalar, true);","          break;","        default:","          c = algorithm14(y, x, divideScalar, true);","          break;","      }","      return c;","    },","","    'Array, any': function (x, y) {","      // use matrix implementation","      return algorithm14(matrix(x), y, divideScalar, false).valueOf();","    },","","    'any, Array': function (x, y) {","      // use matrix implementation","      return algorithm14(matrix(y), x, divideScalar, true).valueOf();","    }","  });","","  dotDivide.toTex = {","    2: '\\\\left(${args[0]}' + latex.operators['dotDivide'] + '${args[1]}\\\\right)'","  };","  ","  return dotDivide;","}","","exports.name = 'dotDivide';","exports.factory = factory;",""],"l":{"3":1,"5":0,"6":0,"7":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"43":0,"49":0,"52":0,"54":0,"57":0,"58":0,"61":0,"62":0,"64":0,"66":0,"69":0,"70":0,"73":0,"74":0,"76":0,"78":0,"83":0,"88":0,"93":0,"98":0,"100":0,"102":0,"103":0,"105":0,"106":0,"108":0,"113":0,"115":0,"117":0,"118":0,"120":0,"121":0,"123":0,"128":0,"133":0,"137":0,"141":0,"144":1,"145":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/dotMultiply.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/dotMultiply.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":1,"48":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"fnMap":{"1":{"name":"factory","line":3,"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}}},"2":{"name":"(anonymous_2)","line":45,"loc":{"start":{"line":45,"column":22},"end":{"line":45,"column":38}}},"3":{"name":"(anonymous_3)","line":79,"loc":{"start":{"line":79,"column":20},"end":{"line":79,"column":36}}},"4":{"name":"(anonymous_4)","line":84,"loc":{"start":{"line":84,"column":21},"end":{"line":84,"column":37}}},"5":{"name":"(anonymous_5)","line":89,"loc":{"start":{"line":89,"column":21},"end":{"line":89,"column":37}}},"6":{"name":"(anonymous_6)","line":94,"loc":{"start":{"line":94,"column":19},"end":{"line":94,"column":35}}},"7":{"name":"(anonymous_7)","line":109,"loc":{"start":{"line":109,"column":19},"end":{"line":109,"column":35}}},"8":{"name":"(anonymous_8)","line":124,"loc":{"start":{"line":124,"column":18},"end":{"line":124,"column":34}}},"9":{"name":"(anonymous_9)","line":129,"loc":{"start":{"line":129,"column":18},"end":{"line":129,"column":34}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":140,"column":1}},"2":{"start":{"line":5,"column":2},"end":{"line":5,"column":66}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":57}},"4":{"start":{"line":7,"column":2},"end":{"line":7,"column":43}},"5":{"start":{"line":9,"column":2},"end":{"line":9,"column":73}},"6":{"start":{"line":10,"column":2},"end":{"line":10,"column":73}},"7":{"start":{"line":11,"column":2},"end":{"line":11,"column":73}},"8":{"start":{"line":12,"column":2},"end":{"line":12,"column":73}},"9":{"start":{"line":13,"column":2},"end":{"line":13,"column":73}},"10":{"start":{"line":41,"column":2},"end":{"line":133,"column":5}},"11":{"start":{"line":47,"column":6},"end":{"line":47,"column":12}},"12":{"start":{"line":50,"column":6},"end":{"line":75,"column":7}},"13":{"start":{"line":52,"column":10},"end":{"line":61,"column":11}},"14":{"start":{"line":55,"column":14},"end":{"line":55,"column":59}},"15":{"start":{"line":56,"column":14},"end":{"line":56,"column":20}},"16":{"start":{"line":59,"column":14},"end":{"line":59,"column":58}},"17":{"start":{"line":60,"column":14},"end":{"line":60,"column":20}},"18":{"start":{"line":62,"column":10},"end":{"line":62,"column":16}},"19":{"start":{"line":64,"column":10},"end":{"line":73,"column":11}},"20":{"start":{"line":67,"column":14},"end":{"line":67,"column":59}},"21":{"start":{"line":68,"column":14},"end":{"line":68,"column":20}},"22":{"start":{"line":71,"column":14},"end":{"line":71,"column":52}},"23":{"start":{"line":72,"column":14},"end":{"line":72,"column":20}},"24":{"start":{"line":74,"column":10},"end":{"line":74,"column":16}},"25":{"start":{"line":76,"column":6},"end":{"line":76,"column":15}},"26":{"start":{"line":81,"column":6},"end":{"line":81,"column":57}},"27":{"start":{"line":86,"column":6},"end":{"line":86,"column":39}},"28":{"start":{"line":91,"column":6},"end":{"line":91,"column":39}},"29":{"start":{"line":96,"column":6},"end":{"line":96,"column":12}},"30":{"start":{"line":98,"column":6},"end":{"line":105,"column":7}},"31":{"start":{"line":100,"column":10},"end":{"line":100,"column":55}},"32":{"start":{"line":101,"column":10},"end":{"line":101,"column":16}},"33":{"start":{"line":103,"column":10},"end":{"line":103,"column":55}},"34":{"start":{"line":104,"column":10},"end":{"line":104,"column":16}},"35":{"start":{"line":106,"column":6},"end":{"line":106,"column":15}},"36":{"start":{"line":111,"column":6},"end":{"line":111,"column":12}},"37":{"start":{"line":113,"column":6},"end":{"line":120,"column":7}},"38":{"start":{"line":115,"column":10},"end":{"line":115,"column":54}},"39":{"start":{"line":116,"column":10},"end":{"line":116,"column":16}},"40":{"start":{"line":118,"column":10},"end":{"line":118,"column":54}},"41":{"start":{"line":119,"column":10},"end":{"line":119,"column":16}},"42":{"start":{"line":121,"column":6},"end":{"line":121,"column":15}},"43":{"start":{"line":126,"column":6},"end":{"line":126,"column":72}},"44":{"start":{"line":131,"column":6},"end":{"line":131,"column":71}},"45":{"start":{"line":135,"column":2},"end":{"line":137,"column":4}},"46":{"start":{"line":139,"column":2},"end":{"line":139,"column":21}},"47":{"start":{"line":142,"column":0},"end":{"line":142,"column":29}},"48":{"start":{"line":143,"column":0},"end":{"line":143,"column":26}}},"branchMap":{"1":{"line":50,"type":"switch","locations":[{"start":{"line":51,"column":8},"end":{"line":62,"column":16}},{"start":{"line":63,"column":8},"end":{"line":74,"column":16}}]},"2":{"line":52,"type":"switch","locations":[{"start":{"line":53,"column":12},"end":{"line":56,"column":20}},{"start":{"line":57,"column":12},"end":{"line":60,"column":20}}]},"3":{"line":64,"type":"switch","locations":[{"start":{"line":65,"column":12},"end":{"line":68,"column":20}},{"start":{"line":69,"column":12},"end":{"line":72,"column":20}}]},"4":{"line":98,"type":"switch","locations":[{"start":{"line":99,"column":8},"end":{"line":101,"column":16}},{"start":{"line":102,"column":8},"end":{"line":104,"column":16}}]},"5":{"line":113,"type":"switch","locations":[{"start":{"line":114,"column":8},"end":{"line":116,"column":16}},{"start":{"line":117,"column":8},"end":{"line":119,"column":16}}]}},"code":["'use strict';","","function factory (type, config, load, typed) {","","  var matrix = load(require('../../type/matrix/function/matrix'));","  var multiplyScalar = load(require('./multiplyScalar'));","  var latex = require('../../utils/latex');","","  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));","  var algorithm09 = load(require('../../type/matrix/utils/algorithm09'));","  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));","  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));","  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));","","  /**","   * Multiply two matrices element wise. The function accepts both matrices and","   * scalar values.","   *","   * Syntax:","   *","   *    math.dotMultiply(x, y)","   *","   * Examples:","   *","   *    math.dotMultiply(2, 4); // returns 8","   *","   *    a = [[9, 5], [6, 1]];","   *    b = [[3, 2], [5, 2]];","   *","   *    math.dotMultiply(a, b); // returns [[27, 10], [30, 2]]","   *    math.multiply(a, b);    // returns [[52, 28], [23, 14]]","   *","   * See also:","   *","   *    multiply, divide, dotDivide","   *","   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Left hand value","   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Right hand value","   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Multiplication of `x` and `y`","   */","  var dotMultiply = typed('dotMultiply', {","    ","    'any, any': multiplyScalar,","    ","    'Matrix, Matrix': function (x, y) {","      // result","      var c;","","      // process matrix storage","      switch (x.storage()) {","        case 'sparse':","          switch (y.storage()) {","            case 'sparse':","              // sparse .* sparse","              c = algorithm09(x, y, multiplyScalar, false);","              break;","            default:","              // sparse .* dense","              c = algorithm02(y, x, multiplyScalar, true);","              break;","          }","          break;","        default:","          switch (y.storage()) {","            case 'sparse':","              // dense .* sparse","              c = algorithm02(x, y, multiplyScalar, false);","              break;","            default:","              // dense .* dense","              c = algorithm13(x, y, multiplyScalar);","              break;","          }","          break;","      }","      return c;","    },","    ","    'Array, Array': function (x, y) {","      // use matrix implementation","      return dotMultiply(matrix(x), matrix(y)).valueOf();","    },","    ","    'Array, Matrix': function (x, y) {","      // use matrix implementation","      return dotMultiply(matrix(x), y);","    },","","    'Matrix, Array': function (x, y) {","      // use matrix implementation","      return dotMultiply(x, matrix(y));","    },","","    'Matrix, any': function (x, y) {","      // result","      var c;","      // check storage format","      switch (x.storage()) {","        case 'sparse':","          c = algorithm11(x, y, multiplyScalar, false);","          break;","        default:","          c = algorithm14(x, y, multiplyScalar, false);","          break;","      }","      return c;","    },","","    'any, Matrix': function (x, y) {","      // result","      var c;","      // check storage format","      switch (y.storage()) {","        case 'sparse':","          c = algorithm11(y, x, multiplyScalar, true);","          break;","        default:","          c = algorithm14(y, x, multiplyScalar, true);","          break;","      }","      return c;","    },","","    'Array, any': function (x, y) {","      // use matrix implementation","      return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();","    },","","    'any, Array': function (x, y) {","      // use matrix implementation","      return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();","    }","  });","","  dotMultiply.toTex = {","    2: '\\\\left(${args[0]}' + latex.operators['dotMultiply'] + '${args[1]}\\\\right)'","  };","  ","  return dotMultiply;","}","","exports.name = 'dotMultiply';","exports.factory = factory;",""],"l":{"3":1,"5":0,"6":0,"7":0,"9":0,"10":0,"11":0,"12":0,"13":0,"41":0,"47":0,"50":0,"52":0,"55":0,"56":0,"59":0,"60":0,"62":0,"64":0,"67":0,"68":0,"71":0,"72":0,"74":0,"76":0,"81":0,"86":0,"91":0,"96":0,"98":0,"100":0,"101":0,"103":0,"104":0,"106":0,"111":0,"113":0,"115":0,"116":0,"118":0,"119":0,"121":0,"126":0,"131":0,"135":0,"139":0,"142":1,"143":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/dotPow.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/dotPow.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":1,"49":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"fnMap":{"1":{"name":"factory","line":3,"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}}},"2":{"name":"(anonymous_2)","line":43,"loc":{"start":{"line":43,"column":22},"end":{"line":43,"column":38}}},"3":{"name":"(anonymous_3)","line":77,"loc":{"start":{"line":77,"column":20},"end":{"line":77,"column":36}}},"4":{"name":"(anonymous_4)","line":82,"loc":{"start":{"line":82,"column":21},"end":{"line":82,"column":37}}},"5":{"name":"(anonymous_5)","line":87,"loc":{"start":{"line":87,"column":21},"end":{"line":87,"column":37}}},"6":{"name":"(anonymous_6)","line":92,"loc":{"start":{"line":92,"column":19},"end":{"line":92,"column":35}}},"7":{"name":"(anonymous_7)","line":107,"loc":{"start":{"line":107,"column":19},"end":{"line":107,"column":35}}},"8":{"name":"(anonymous_8)","line":122,"loc":{"start":{"line":122,"column":18},"end":{"line":122,"column":34}}},"9":{"name":"(anonymous_9)","line":127,"loc":{"start":{"line":127,"column":18},"end":{"line":127,"column":34}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":138,"column":1}},"2":{"start":{"line":5,"column":2},"end":{"line":5,"column":66}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":35}},"4":{"start":{"line":7,"column":2},"end":{"line":7,"column":43}},"5":{"start":{"line":9,"column":2},"end":{"line":9,"column":73}},"6":{"start":{"line":10,"column":2},"end":{"line":10,"column":73}},"7":{"start":{"line":11,"column":2},"end":{"line":11,"column":73}},"8":{"start":{"line":12,"column":2},"end":{"line":12,"column":73}},"9":{"start":{"line":13,"column":2},"end":{"line":13,"column":73}},"10":{"start":{"line":14,"column":2},"end":{"line":14,"column":73}},"11":{"start":{"line":39,"column":2},"end":{"line":131,"column":5}},"12":{"start":{"line":45,"column":6},"end":{"line":45,"column":12}},"13":{"start":{"line":48,"column":6},"end":{"line":73,"column":7}},"14":{"start":{"line":50,"column":10},"end":{"line":59,"column":11}},"15":{"start":{"line":53,"column":14},"end":{"line":53,"column":48}},"16":{"start":{"line":54,"column":14},"end":{"line":54,"column":20}},"17":{"start":{"line":57,"column":14},"end":{"line":57,"column":47}},"18":{"start":{"line":58,"column":14},"end":{"line":58,"column":20}},"19":{"start":{"line":60,"column":10},"end":{"line":60,"column":16}},"20":{"start":{"line":62,"column":10},"end":{"line":71,"column":11}},"21":{"start":{"line":65,"column":14},"end":{"line":65,"column":48}},"22":{"start":{"line":66,"column":14},"end":{"line":66,"column":20}},"23":{"start":{"line":69,"column":14},"end":{"line":69,"column":41}},"24":{"start":{"line":70,"column":14},"end":{"line":70,"column":20}},"25":{"start":{"line":72,"column":10},"end":{"line":72,"column":16}},"26":{"start":{"line":74,"column":6},"end":{"line":74,"column":15}},"27":{"start":{"line":79,"column":6},"end":{"line":79,"column":52}},"28":{"start":{"line":84,"column":6},"end":{"line":84,"column":34}},"29":{"start":{"line":89,"column":6},"end":{"line":89,"column":34}},"30":{"start":{"line":94,"column":6},"end":{"line":94,"column":12}},"31":{"start":{"line":96,"column":6},"end":{"line":103,"column":7}},"32":{"start":{"line":98,"column":10},"end":{"line":98,"column":47}},"33":{"start":{"line":99,"column":10},"end":{"line":99,"column":16}},"34":{"start":{"line":101,"column":10},"end":{"line":101,"column":47}},"35":{"start":{"line":102,"column":10},"end":{"line":102,"column":16}},"36":{"start":{"line":104,"column":6},"end":{"line":104,"column":15}},"37":{"start":{"line":109,"column":6},"end":{"line":109,"column":12}},"38":{"start":{"line":111,"column":6},"end":{"line":118,"column":7}},"39":{"start":{"line":113,"column":10},"end":{"line":113,"column":46}},"40":{"start":{"line":114,"column":10},"end":{"line":114,"column":16}},"41":{"start":{"line":116,"column":10},"end":{"line":116,"column":46}},"42":{"start":{"line":117,"column":10},"end":{"line":117,"column":16}},"43":{"start":{"line":119,"column":6},"end":{"line":119,"column":15}},"44":{"start":{"line":124,"column":6},"end":{"line":124,"column":64}},"45":{"start":{"line":129,"column":6},"end":{"line":129,"column":63}},"46":{"start":{"line":133,"column":2},"end":{"line":135,"column":4}},"47":{"start":{"line":137,"column":2},"end":{"line":137,"column":16}},"48":{"start":{"line":140,"column":0},"end":{"line":140,"column":24}},"49":{"start":{"line":141,"column":0},"end":{"line":141,"column":26}}},"branchMap":{"1":{"line":48,"type":"switch","locations":[{"start":{"line":49,"column":8},"end":{"line":60,"column":16}},{"start":{"line":61,"column":8},"end":{"line":72,"column":16}}]},"2":{"line":50,"type":"switch","locations":[{"start":{"line":51,"column":12},"end":{"line":54,"column":20}},{"start":{"line":55,"column":12},"end":{"line":58,"column":20}}]},"3":{"line":62,"type":"switch","locations":[{"start":{"line":63,"column":12},"end":{"line":66,"column":20}},{"start":{"line":67,"column":12},"end":{"line":70,"column":20}}]},"4":{"line":96,"type":"switch","locations":[{"start":{"line":97,"column":8},"end":{"line":99,"column":16}},{"start":{"line":100,"column":8},"end":{"line":102,"column":16}}]},"5":{"line":111,"type":"switch","locations":[{"start":{"line":112,"column":8},"end":{"line":114,"column":16}},{"start":{"line":115,"column":8},"end":{"line":117,"column":16}}]}},"code":["'use strict';","","function factory (type, config, load, typed) {","","  var matrix = load(require('../../type/matrix/function/matrix'));","  var pow = load(require('./pow'));","  var latex = require('../../utils/latex');","","  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));","  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));","  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));","  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));","  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));","  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));","","  /**","   * Calculates the power of x to y element wise.","   *","   * Syntax:","   *","   *    math.dotPow(x, y)","   *","   * Examples:","   *","   *    math.dotPow(2, 3);            // returns number 8","   *","   *    var a = [[1, 2], [4, 3]];","   *    math.dotPow(a, 2);            // returns Array [[1, 4], [16, 9]]","   *    math.pow(a, 2);               // returns Array [[9, 8], [16, 17]]","   *","   * See also:","   *","   *    pow, sqrt, multiply","   *","   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base","   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y  The exponent","   * @return {number | BigNumber | Complex | Unit | Array | Matrix}                     The value of `x` to the power `y`","   */","  var dotPow = typed('dotPow', {","    ","    'any, any': pow,","    ","    'Matrix, Matrix': function (x, y) {","      // result","      var c;","","      // process matrix storage","      switch (x.storage()) {","        case 'sparse':","          switch (y.storage()) {","            case 'sparse':","              // sparse .^ sparse","              c = algorithm07(x, y, pow, false);","              break;","            default:","              // sparse .^ dense","              c = algorithm03(y, x, pow, true);","              break;","          }","          break;","        default:","          switch (y.storage()) {","            case 'sparse':","              // dense .^ sparse","              c = algorithm03(x, y, pow, false);","              break;","            default:","              // dense .^ dense","              c = algorithm13(x, y, pow);","              break;","          }","          break;","      }","      return c;","    },","","    'Array, Array': function (x, y) {","      // use matrix implementation","      return dotPow(matrix(x), matrix(y)).valueOf();","    },","","    'Array, Matrix': function (x, y) {","      // use matrix implementation","      return dotPow(matrix(x), y);","    },","","    'Matrix, Array': function (x, y) {","      // use matrix implementation","      return dotPow(x, matrix(y));","    },","","    'Matrix, any': function (x, y) {","      // result","      var c;","      // check storage format","      switch (x.storage()) {","        case 'sparse':","          c = algorithm11(x, y, dotPow, false);","          break;","        default:","          c = algorithm14(x, y, dotPow, false);","          break;","      }","      return c;","    },","","    'any, Matrix': function (x, y) {","      // result","      var c;","      // check storage format","      switch (y.storage()) {","        case 'sparse':","          c = algorithm12(y, x, dotPow, true);","          break;","        default:","          c = algorithm14(y, x, dotPow, true);","          break;","      }","      return c;","    },","","    'Array, any': function (x, y) {","      // use matrix implementation","      return algorithm14(matrix(x), y, dotPow, false).valueOf();","    },","","    'any, Array': function (x, y) {","      // use matrix implementation","      return algorithm14(matrix(y), x, dotPow, true).valueOf();","    }","  });","","  dotPow.toTex = {","    2: '\\\\left(${args[0]}' + latex.operators['dotPow'] + '${args[1]}\\\\right)'","  };","  ","  return dotPow;","}","","exports.name = 'dotPow';","exports.factory = factory;",""],"l":{"3":1,"5":0,"6":0,"7":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"39":0,"45":0,"48":0,"50":0,"53":0,"54":0,"57":0,"58":0,"60":0,"62":0,"65":0,"66":0,"69":0,"70":0,"72":0,"74":0,"79":0,"84":0,"89":0,"94":0,"96":0,"98":0,"99":0,"101":0,"102":0,"104":0,"109":0,"111":0,"113":0,"114":0,"116":0,"117":0,"119":0,"124":0,"129":0,"133":0,"137":0,"140":1,"141":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/exp.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/exp.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1,"10":1},"b":{},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":37,"loc":{"start":{"line":37,"column":15},"end":{"line":37,"column":28}}},"3":{"name":"(anonymous_3)","line":41,"loc":{"start":{"line":41,"column":17},"end":{"line":41,"column":30}}},"4":{"name":"(anonymous_4)","line":45,"loc":{"start":{"line":45,"column":22},"end":{"line":45,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":54,"column":1}},"3":{"start":{"line":34,"column":2},"end":{"line":49,"column":5}},"4":{"start":{"line":38,"column":6},"end":{"line":38,"column":21}},"5":{"start":{"line":42,"column":6},"end":{"line":42,"column":21}},"6":{"start":{"line":47,"column":6},"end":{"line":47,"column":29}},"7":{"start":{"line":51,"column":2},"end":{"line":51,"column":52}},"8":{"start":{"line":53,"column":2},"end":{"line":53,"column":13}},"9":{"start":{"line":56,"column":0},"end":{"line":56,"column":21}},"10":{"start":{"line":57,"column":0},"end":{"line":57,"column":26}}},"branchMap":{},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","","function factory (type, config, load, typed) {","  /**","   * Calculate the exponent of a value.","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.exp(x)","   *","   * Examples:","   *","   *    math.exp(2);                  // returns number 7.3890560989306495","   *    math.pow(math.e, 2);          // returns number 7.3890560989306495","   *    math.log(math.exp(2));        // returns number 2","   *","   *    math.exp([1, 2, 3]);","   *    // returns Array [","   *    //   2.718281828459045,","   *    //   7.3890560989306495,","   *    //   20.085536923187668","   *    // ]","   *","   * See also:","   *","   *    log, pow","   *","   * @param {number | BigNumber | Complex | Array | Matrix} x  A number or matrix to exponentiate","   * @return {number | BigNumber | Complex | Array | Matrix} Exponent of `x`","   */","  var exp = typed('exp', {","    'number': Math.exp,","","    'Complex': function (x) {","      return x.exp();","    },","","    'BigNumber': function (x) {","      return x.exp();","    },","","    'Array | Matrix': function (x) {","      // TODO: exp(sparse) should return a dense matrix since exp(0)==1","      return deepMap(x, exp);","    }","  });","","  exp.toTex = {1: '\\\\exp\\\\left(${args[0]}\\\\right)'};","","  return exp;","}","","exports.name = 'exp';","exports.factory = factory;",""],"l":{"3":1,"5":1,"34":0,"38":0,"42":0,"47":0,"51":0,"53":0,"56":1,"57":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/fix.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/fix.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1,"12":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":34,"loc":{"start":{"line":34,"column":14},"end":{"line":34,"column":27}}},"3":{"name":"(anonymous_3)","line":38,"loc":{"start":{"line":38,"column":15},"end":{"line":38,"column":28}}},"4":{"name":"(anonymous_4)","line":45,"loc":{"start":{"line":45,"column":17},"end":{"line":45,"column":30}}},"5":{"name":"(anonymous_5)","line":49,"loc":{"start":{"line":49,"column":16},"end":{"line":49,"column":29}}},"6":{"name":"(anonymous_6)","line":53,"loc":{"start":{"line":53,"column":22},"end":{"line":53,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":62,"column":1}},"3":{"start":{"line":33,"column":2},"end":{"line":57,"column":5}},"4":{"start":{"line":35,"column":6},"end":{"line":35,"column":52}},"5":{"start":{"line":39,"column":6},"end":{"line":42,"column":8}},"6":{"start":{"line":46,"column":6},"end":{"line":46,"column":51}},"7":{"start":{"line":50,"column":6},"end":{"line":50,"column":44}},"8":{"start":{"line":55,"column":6},"end":{"line":55,"column":35}},"9":{"start":{"line":59,"column":2},"end":{"line":59,"column":64}},"10":{"start":{"line":61,"column":2},"end":{"line":61,"column":13}},"11":{"start":{"line":64,"column":0},"end":{"line":64,"column":21}},"12":{"start":{"line":65,"column":0},"end":{"line":65,"column":26}}},"branchMap":{"1":{"line":35,"type":"cond-expr","locations":[{"start":{"line":35,"column":23},"end":{"line":35,"column":36}},{"start":{"line":35,"column":39},"end":{"line":35,"column":51}}]},"2":{"line":40,"type":"cond-expr","locations":[{"start":{"line":40,"column":23},"end":{"line":40,"column":39}},{"start":{"line":40,"column":42},"end":{"line":40,"column":57}}]},"3":{"line":41,"type":"cond-expr","locations":[{"start":{"line":41,"column":23},"end":{"line":41,"column":39}},{"start":{"line":41,"column":42},"end":{"line":41,"column":57}}]},"4":{"line":46,"type":"cond-expr","locations":[{"start":{"line":46,"column":30},"end":{"line":46,"column":38}},{"start":{"line":46,"column":41},"end":{"line":46,"column":50}}]},"5":{"line":50,"type":"cond-expr","locations":[{"start":{"line":50,"column":23},"end":{"line":50,"column":31}},{"start":{"line":50,"column":34},"end":{"line":50,"column":43}}]}},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","","function factory (type, config, load, typed) {","  /**","   * Round a value towards zero.","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.fix(x)","   *","   * Examples:","   *","   *    math.fix(3.2);                // returns number 3","   *    math.fix(3.8);                // returns number 3","   *    math.fix(-4.2);               // returns number -4","   *    math.fix(-4.7);               // returns number -4","   *","   *    var c = math.complex(3.2, -2.7);","   *    math.fix(c);                  // returns Complex 3 - 2i","   *","   *    math.fix([3.2, 3.8, -4.7]);   // returns Array [3, 3, -4]","   *","   * See also:","   *","   *    ceil, floor, round","   *","   * @param {number | BigNumber | Fraction | Complex | Array | Matrix} x Number to be rounded","   * @return {number | BigNumber | Fraction | Complex | Array | Matrix}            Rounded value","   */","  var fix = typed('fix', {","    'number': function (x) {","      return (x > 0) ? Math.floor(x) : Math.ceil(x);","    },","","    'Complex': function (x) {","      return new type.Complex(","          (x.re > 0) ? Math.floor(x.re) : Math.ceil(x.re),","          (x.im > 0) ? Math.floor(x.im) : Math.ceil(x.im)","      );","    },","","    'BigNumber': function (x) {","      return x.isNegative() ? x.ceil() : x.floor();","    },","","    'Fraction': function (x) {","      return x.s < 0 ? x.ceil() : x.floor();","    },","","    'Array | Matrix': function (x) {","      // deep map collection, skip zeros since fix(0) = 0","      return deepMap(x, fix, true);","    }","  });","","  fix.toTex = {1: '\\\\mathrm{${name}}\\\\left(${args[0]}\\\\right)'};","","  return fix;","}","","exports.name = 'fix';","exports.factory = factory;",""],"l":{"3":1,"5":1,"33":0,"35":0,"39":0,"46":0,"50":0,"55":0,"59":0,"61":0,"64":1,"65":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/floor.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/floor.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1,"11":1},"b":{},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":36,"loc":{"start":{"line":36,"column":15},"end":{"line":36,"column":28}}},"3":{"name":"(anonymous_3)","line":40,"loc":{"start":{"line":40,"column":17},"end":{"line":40,"column":30}}},"4":{"name":"(anonymous_4)","line":44,"loc":{"start":{"line":44,"column":16},"end":{"line":44,"column":29}}},"5":{"name":"(anonymous_5)","line":48,"loc":{"start":{"line":48,"column":22},"end":{"line":48,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":57,"column":1}},"3":{"start":{"line":33,"column":2},"end":{"line":52,"column":5}},"4":{"start":{"line":37,"column":6},"end":{"line":37,"column":23}},"5":{"start":{"line":41,"column":6},"end":{"line":41,"column":23}},"6":{"start":{"line":45,"column":6},"end":{"line":45,"column":23}},"7":{"start":{"line":50,"column":6},"end":{"line":50,"column":37}},"8":{"start":{"line":54,"column":2},"end":{"line":54,"column":63}},"9":{"start":{"line":56,"column":2},"end":{"line":56,"column":15}},"10":{"start":{"line":59,"column":0},"end":{"line":59,"column":23}},"11":{"start":{"line":60,"column":0},"end":{"line":60,"column":26}}},"branchMap":{},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","","function factory (type, config, load, typed) {","  /**","   * Round a value towards minus infinity.","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.floor(x)","   *","   * Examples:","   *","   *    math.floor(3.2);              // returns number 3","   *    math.floor(3.8);              // returns number 3","   *    math.floor(-4.2);             // returns number -5","   *    math.floor(-4.7);             // returns number -5","   *","   *    var c = math.complex(3.2, -2.7);","   *    math.floor(c);                // returns Complex 3 - 3i","   *","   *    math.floor([3.2, 3.8, -4.7]); // returns Array [3, 3, -5]","   *","   * See also:","   *","   *    ceil, fix, round","   *","   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded","   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value","   */","  var floor = typed('floor', {","    'number': Math.floor,","","    'Complex': function (x) {","      return x.floor();","    },","","    'BigNumber': function (x) {","      return x.floor();","    },","","    'Fraction': function (x) {","      return x.floor();","    },","","    'Array | Matrix': function (x) {","      // deep map collection, skip zeros since floor(0) = 0","      return deepMap(x, floor, true);","    }","  });","","  floor.toTex = {1: '\\\\left\\\\lfloor${args[0]}\\\\right\\\\rfloor'};","","  return floor;","}","","exports.name = 'floor';","exports.factory = factory;",""],"l":{"3":1,"5":1,"33":0,"37":0,"41":0,"45":0,"50":0,"54":0,"56":0,"59":1,"60":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/gcd.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/gcd.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":1,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":1,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":1,"70":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":46,"loc":{"start":{"line":46,"column":26},"end":{"line":46,"column":42}}},"3":{"name":"(anonymous_3)","line":50,"loc":{"start":{"line":50,"column":22},"end":{"line":50,"column":38}}},"4":{"name":"(anonymous_4)","line":84,"loc":{"start":{"line":84,"column":20},"end":{"line":84,"column":36}}},"5":{"name":"(anonymous_5)","line":89,"loc":{"start":{"line":89,"column":21},"end":{"line":89,"column":37}}},"6":{"name":"(anonymous_6)","line":94,"loc":{"start":{"line":94,"column":21},"end":{"line":94,"column":37}}},"7":{"name":"(anonymous_7)","line":99,"loc":{"start":{"line":99,"column":34},"end":{"line":99,"column":50}}},"8":{"name":"(anonymous_8)","line":114,"loc":{"start":{"line":114,"column":34},"end":{"line":114,"column":50}}},"9":{"name":"(anonymous_9)","line":129,"loc":{"start":{"line":129,"column":33},"end":{"line":129,"column":49}}},"10":{"name":"(anonymous_10)","line":134,"loc":{"start":{"line":134,"column":33},"end":{"line":134,"column":49}}},"11":{"name":"(anonymous_11)","line":140,"loc":{"start":{"line":140,"column":120},"end":{"line":140,"column":142}}},"12":{"name":"_gcdBigNumber","line":160,"loc":{"start":{"line":160,"column":2},"end":{"line":160,"column":31}}},"13":{"name":"_gcd","line":183,"loc":{"start":{"line":183,"column":0},"end":{"line":183,"column":20}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":174,"column":1}},"3":{"start":{"line":7,"column":2},"end":{"line":7,"column":66}},"4":{"start":{"line":9,"column":2},"end":{"line":9,"column":73}},"5":{"start":{"line":10,"column":2},"end":{"line":10,"column":73}},"6":{"start":{"line":11,"column":2},"end":{"line":11,"column":73}},"7":{"start":{"line":12,"column":2},"end":{"line":12,"column":73}},"8":{"start":{"line":13,"column":2},"end":{"line":13,"column":73}},"9":{"start":{"line":40,"column":2},"end":{"line":147,"column":5}},"10":{"start":{"line":47,"column":6},"end":{"line":47,"column":22}},"11":{"start":{"line":52,"column":6},"end":{"line":52,"column":12}},"12":{"start":{"line":55,"column":6},"end":{"line":80,"column":7}},"13":{"start":{"line":57,"column":10},"end":{"line":66,"column":11}},"14":{"start":{"line":60,"column":14},"end":{"line":60,"column":41}},"15":{"start":{"line":61,"column":14},"end":{"line":61,"column":20}},"16":{"start":{"line":64,"column":14},"end":{"line":64,"column":47}},"17":{"start":{"line":65,"column":14},"end":{"line":65,"column":20}},"18":{"start":{"line":67,"column":10},"end":{"line":67,"column":16}},"19":{"start":{"line":69,"column":10},"end":{"line":78,"column":11}},"20":{"start":{"line":72,"column":14},"end":{"line":72,"column":48}},"21":{"start":{"line":73,"column":14},"end":{"line":73,"column":20}},"22":{"start":{"line":76,"column":14},"end":{"line":76,"column":41}},"23":{"start":{"line":77,"column":14},"end":{"line":77,"column":20}},"24":{"start":{"line":79,"column":10},"end":{"line":79,"column":16}},"25":{"start":{"line":81,"column":6},"end":{"line":81,"column":15}},"26":{"start":{"line":86,"column":6},"end":{"line":86,"column":49}},"27":{"start":{"line":91,"column":6},"end":{"line":91,"column":31}},"28":{"start":{"line":96,"column":6},"end":{"line":96,"column":31}},"29":{"start":{"line":101,"column":6},"end":{"line":101,"column":12}},"30":{"start":{"line":103,"column":6},"end":{"line":110,"column":7}},"31":{"start":{"line":105,"column":10},"end":{"line":105,"column":44}},"32":{"start":{"line":106,"column":10},"end":{"line":106,"column":16}},"33":{"start":{"line":108,"column":10},"end":{"line":108,"column":44}},"34":{"start":{"line":109,"column":10},"end":{"line":109,"column":16}},"35":{"start":{"line":111,"column":6},"end":{"line":111,"column":15}},"36":{"start":{"line":116,"column":6},"end":{"line":116,"column":12}},"37":{"start":{"line":118,"column":6},"end":{"line":125,"column":7}},"38":{"start":{"line":120,"column":10},"end":{"line":120,"column":43}},"39":{"start":{"line":121,"column":10},"end":{"line":121,"column":16}},"40":{"start":{"line":123,"column":10},"end":{"line":123,"column":43}},"41":{"start":{"line":124,"column":10},"end":{"line":124,"column":16}},"42":{"start":{"line":126,"column":6},"end":{"line":126,"column":15}},"43":{"start":{"line":131,"column":6},"end":{"line":131,"column":61}},"44":{"start":{"line":136,"column":6},"end":{"line":136,"column":60}},"45":{"start":{"line":141,"column":6},"end":{"line":141,"column":26}},"46":{"start":{"line":142,"column":6},"end":{"line":144,"column":7}},"47":{"start":{"line":143,"column":8},"end":{"line":143,"column":32}},"48":{"start":{"line":145,"column":6},"end":{"line":145,"column":17}},"49":{"start":{"line":149,"column":2},"end":{"line":149,"column":44}},"50":{"start":{"line":151,"column":2},"end":{"line":151,"column":13}},"51":{"start":{"line":160,"column":2},"end":{"line":173,"column":3}},"52":{"start":{"line":161,"column":4},"end":{"line":163,"column":5}},"53":{"start":{"line":162,"column":6},"end":{"line":162,"column":76}},"54":{"start":{"line":166,"column":4},"end":{"line":166,"column":37}},"55":{"start":{"line":167,"column":4},"end":{"line":171,"column":5}},"56":{"start":{"line":168,"column":6},"end":{"line":168,"column":23}},"57":{"start":{"line":169,"column":6},"end":{"line":169,"column":12}},"58":{"start":{"line":170,"column":6},"end":{"line":170,"column":12}},"59":{"start":{"line":172,"column":4},"end":{"line":172,"column":36}},"60":{"start":{"line":183,"column":0},"end":{"line":196,"column":1}},"61":{"start":{"line":184,"column":2},"end":{"line":186,"column":3}},"62":{"start":{"line":185,"column":4},"end":{"line":185,"column":74}},"63":{"start":{"line":189,"column":2},"end":{"line":189,"column":8}},"64":{"start":{"line":190,"column":2},"end":{"line":194,"column":3}},"65":{"start":{"line":191,"column":4},"end":{"line":191,"column":14}},"66":{"start":{"line":192,"column":4},"end":{"line":192,"column":10}},"67":{"start":{"line":193,"column":4},"end":{"line":193,"column":10}},"68":{"start":{"line":195,"column":2},"end":{"line":195,"column":26}},"69":{"start":{"line":198,"column":0},"end":{"line":198,"column":21}},"70":{"start":{"line":199,"column":0},"end":{"line":199,"column":26}}},"branchMap":{"1":{"line":55,"type":"switch","locations":[{"start":{"line":56,"column":8},"end":{"line":67,"column":16}},{"start":{"line":68,"column":8},"end":{"line":79,"column":16}}]},"2":{"line":57,"type":"switch","locations":[{"start":{"line":58,"column":12},"end":{"line":61,"column":20}},{"start":{"line":62,"column":12},"end":{"line":65,"column":20}}]},"3":{"line":69,"type":"switch","locations":[{"start":{"line":70,"column":12},"end":{"line":73,"column":20}},{"start":{"line":74,"column":12},"end":{"line":77,"column":20}}]},"4":{"line":103,"type":"switch","locations":[{"start":{"line":104,"column":8},"end":{"line":106,"column":16}},{"start":{"line":107,"column":8},"end":{"line":109,"column":16}}]},"5":{"line":118,"type":"switch","locations":[{"start":{"line":119,"column":8},"end":{"line":121,"column":16}},{"start":{"line":122,"column":8},"end":{"line":124,"column":16}}]},"6":{"line":161,"type":"if","locations":[{"start":{"line":161,"column":4},"end":{"line":161,"column":4}},{"start":{"line":161,"column":4},"end":{"line":161,"column":4}}]},"7":{"line":161,"type":"binary-expr","locations":[{"start":{"line":161,"column":8},"end":{"line":161,"column":18}},{"start":{"line":161,"column":22},"end":{"line":161,"column":32}}]},"8":{"line":172,"type":"cond-expr","locations":[{"start":{"line":172,"column":24},"end":{"line":172,"column":31}},{"start":{"line":172,"column":34},"end":{"line":172,"column":35}}]},"9":{"line":184,"type":"if","locations":[{"start":{"line":184,"column":2},"end":{"line":184,"column":2}},{"start":{"line":184,"column":2},"end":{"line":184,"column":2}}]},"10":{"line":184,"type":"binary-expr","locations":[{"start":{"line":184,"column":6},"end":{"line":184,"column":19}},{"start":{"line":184,"column":23},"end":{"line":184,"column":36}}]},"11":{"line":195,"type":"cond-expr","locations":[{"start":{"line":195,"column":19},"end":{"line":195,"column":21}},{"start":{"line":195,"column":24},"end":{"line":195,"column":25}}]}},"code":["'use strict';","","var isInteger = require('../../utils/number').isInteger;","","function factory (type, config, load, typed) {","","  var matrix = load(require('../../type/matrix/function/matrix'));","","  var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));","  var algorithm04 = load(require('../../type/matrix/utils/algorithm04'));","  var algorithm10 = load(require('../../type/matrix/utils/algorithm10'));","  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));","  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));","","  /**","   * Calculate the greatest common divisor for two or more values or arrays.","   *","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.gcd(a, b)","   *    math.gcd(a, b, c, ...)","   *","   * Examples:","   *","   *    math.gcd(8, 12);              // returns 4","   *    math.gcd(-4, 6);              // returns 2","   *    math.gcd(25, 15, -10);        // returns 5","   *","   *    math.gcd([8, -4], [12, 6]);   // returns [4, 2]","   *","   * See also:","   *","   *    lcm, xgcd","   *","   * @param {... number | BigNumber | Fraction | Array | Matrix} args  Two or more integer numbers","   * @return {number | BigNumber | Fraction | Array | Matrix}                           The greatest common divisor","   */","  var gcd = typed('gcd', {","","    'number, number': _gcd,","","    'BigNumber, BigNumber': _gcdBigNumber,","","    'Fraction, Fraction': function (x, y) {","      return x.gcd(y);","    },","","    'Matrix, Matrix': function (x, y) {","      // result","      var c;","","      // process matrix storage","      switch (x.storage()) {","        case 'sparse':","          switch (y.storage()) {","            case 'sparse':","              // sparse + sparse","              c = algorithm04(x, y, gcd);","              break;","            default:","              // sparse + dense","              c = algorithm01(y, x, gcd, true);","              break;","          }","          break;","        default:","          switch (y.storage()) {","            case 'sparse':","              // dense + sparse","              c = algorithm01(x, y, gcd, false);","              break;","            default:","              // dense + dense","              c = algorithm13(x, y, gcd);","              break;","          }","          break;","      }","      return c;","    },","","    'Array, Array': function (x, y) {","      // use matrix implementation","      return gcd(matrix(x), matrix(y)).valueOf();","    },","","    'Array, Matrix': function (x, y) {","      // use matrix implementation","      return gcd(matrix(x), y);","    },","","    'Matrix, Array': function (x, y) {","      // use matrix implementation","      return gcd(x, matrix(y));","    },","    ","    'Matrix, number | BigNumber': function (x, y) {","      // result","      var c;","      // check storage format","      switch (x.storage()) {","        case 'sparse':","          c = algorithm10(x, y, gcd, false);","          break;","        default:","          c = algorithm14(x, y, gcd, false);","          break;","      }","      return c;","    },","","    'number | BigNumber, Matrix': function (x, y) {","      // result","      var c;","      // check storage format","      switch (y.storage()) {","        case 'sparse':","          c = algorithm10(y, x, gcd, true);","          break;","        default:","          c = algorithm14(y, x, gcd, true);","          break;","      }","      return c;","    },","","    'Array, number | BigNumber': function (x, y) {","      // use matrix implementation","      return algorithm14(matrix(x), y, gcd, false).valueOf();","    },","","    'number | BigNumber, Array': function (x, y) {","      // use matrix implementation","      return algorithm14(matrix(y), x, gcd, true).valueOf();","    },","","    // TODO: need a smarter notation here","    'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function (a, b, args) {","      var res = gcd(a, b);","      for (var i = 0; i < args.length; i++) {","        res = gcd(res, args[i]);","      }","      return res;","    }","  });","","  gcd.toTex = '\\\\gcd\\\\left(${args}\\\\right)';","","  return gcd;","","  /**","   * Calculate gcd for BigNumbers","   * @param {BigNumber} a","   * @param {BigNumber} b","   * @returns {BigNumber} Returns greatest common denominator of a and b","   * @private","   */","  function _gcdBigNumber(a, b) {","    if (!a.isInt() || !b.isInt()) {","      throw new Error('Parameters in function gcd must be integer numbers');","    }","","    // http://en.wikipedia.org/wiki/Euclidean_algorithm","    var zero = new type.BigNumber(0);","    while (!b.isZero()) {","      var r = a.mod(b);","      a = b;","      b = r;","    }","    return a.lt(zero) ? a.neg() : a;","  }","}","","/**"," * Calculate gcd for numbers"," * @param {number} a"," * @param {number} b"," * @returns {number} Returns the greatest common denominator of a and b"," * @private"," */","function _gcd(a, b) {","  if (!isInteger(a) || !isInteger(b)) {","    throw new Error('Parameters in function gcd must be integer numbers');","  }","","  // http://en.wikipedia.org/wiki/Euclidean_algorithm","  var r;","  while (b != 0) {","    r = a % b;","    a = b;","    b = r;","  }","  return (a < 0) ? -a : a;","}","","exports.name = 'gcd';","exports.factory = factory;",""],"l":{"3":1,"5":1,"7":0,"9":0,"10":0,"11":0,"12":0,"13":0,"40":0,"47":0,"52":0,"55":0,"57":0,"60":0,"61":0,"64":0,"65":0,"67":0,"69":0,"72":0,"73":0,"76":0,"77":0,"79":0,"81":0,"86":0,"91":0,"96":0,"101":0,"103":0,"105":0,"106":0,"108":0,"109":0,"111":0,"116":0,"118":0,"120":0,"121":0,"123":0,"124":0,"126":0,"131":0,"136":0,"141":0,"142":0,"143":0,"145":0,"149":0,"151":0,"160":1,"161":0,"162":0,"166":0,"167":0,"168":0,"169":0,"170":0,"172":0,"183":1,"184":0,"185":0,"189":0,"190":0,"191":0,"192":0,"193":0,"195":0,"198":1,"199":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/hypot.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/hypot.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":1,"27":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":43,"loc":{"start":{"line":43,"column":13},"end":{"line":43,"column":26}}},"3":{"name":"(anonymous_3)","line":47,"loc":{"start":{"line":47,"column":14},"end":{"line":47,"column":27}}},"4":{"name":"_hypot","line":58,"loc":{"start":{"line":58,"column":2},"end":{"line":58,"column":25}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":51}},"2":{"start":{"line":5,"column":0},"end":{"line":81,"column":1}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":35}},"4":{"start":{"line":7,"column":2},"end":{"line":7,"column":41}},"5":{"start":{"line":8,"column":2},"end":{"line":8,"column":47}},"6":{"start":{"line":9,"column":2},"end":{"line":9,"column":51}},"7":{"start":{"line":10,"column":2},"end":{"line":10,"column":37}},"8":{"start":{"line":11,"column":2},"end":{"line":11,"column":55}},"9":{"start":{"line":12,"column":2},"end":{"line":12,"column":56}},"10":{"start":{"line":40,"column":2},"end":{"line":50,"column":5}},"11":{"start":{"line":44,"column":6},"end":{"line":44,"column":44}},"12":{"start":{"line":48,"column":6},"end":{"line":48,"column":54}},"13":{"start":{"line":58,"column":2},"end":{"line":76,"column":3}},"14":{"start":{"line":61,"column":4},"end":{"line":61,"column":19}},"15":{"start":{"line":62,"column":4},"end":{"line":62,"column":20}},"16":{"start":{"line":64,"column":4},"end":{"line":73,"column":5}},"17":{"start":{"line":65,"column":6},"end":{"line":65,"column":31}},"18":{"start":{"line":66,"column":6},"end":{"line":72,"column":7}},"19":{"start":{"line":67,"column":8},"end":{"line":67,"column":92}},"20":{"start":{"line":68,"column":8},"end":{"line":68,"column":32}},"21":{"start":{"line":69,"column":8},"end":{"line":69,"column":24}},"22":{"start":{"line":71,"column":8},"end":{"line":71,"column":115}},"23":{"start":{"line":75,"column":4},"end":{"line":75,"column":43}},"24":{"start":{"line":78,"column":2},"end":{"line":78,"column":48}},"25":{"start":{"line":80,"column":2},"end":{"line":80,"column":15}},"26":{"start":{"line":83,"column":0},"end":{"line":83,"column":23}},"27":{"start":{"line":84,"column":0},"end":{"line":84,"column":26}}},"branchMap":{"1":{"line":66,"type":"if","locations":[{"start":{"line":66,"column":6},"end":{"line":66,"column":6}},{"start":{"line":66,"column":6},"end":{"line":66,"column":6}}]},"2":{"line":71,"type":"cond-expr","locations":[{"start":{"line":71,"column":49},"end":{"line":71,"column":105}},{"start":{"line":71,"column":108},"end":{"line":71,"column":113}}]}},"code":["'use strict';","","var flatten = require('../../utils/array').flatten;","","function factory (type, config, load, typed) {","  var abs = load(require('./abs'));","  var add = load(require('./addScalar'));","  var divide = load(require('./divideScalar'));","  var multiply = load(require('./multiplyScalar'));","  var sqrt = load(require('./sqrt'));","  var smaller = load(require('../relational/smaller'));","  var isPositive = load(require('../utils/isPositive'));","","  /**","   * Calculate the hypotenusa of a list with values. The hypotenusa is defined as:","   *","   *     hypot(a, b, c, ...) = sqrt(a^2 + b^2 + c^2 + ...)","   *","   * For matrix input, the hypotenusa is calculated for all values in the matrix.","   *","   * Syntax:","   *","   *     math.hypot(a, b, ...)","   *     math.hypot([a, b, c, ...])","   *","   * Examples:","   *","   *     math.hypot(3, 4);      // 5","   *     math.hypot(3, 4, 5);   // 7.0710678118654755","   *     math.hypot([3, 4, 5]); // 7.0710678118654755","   *     math.hypot(-2);        // 2","   *","   * See also:","   *","   *     abs, norm","   *","   * @param {... number | BigNumber} args","   * @return {number | BigNumber} Returns the hypothenusa of the input values.","   */","  var hypot = typed('hypot', {","    '... number | BigNumber': _hypot,","","    'Array': function (x) {","      return hypot.apply(hypot, flatten(x));","    },","","    'Matrix': function (x) {","      return hypot.apply(hypot, flatten(x.toArray()));","    }","  });","","  /**","   * Calculate the hypotenusa for an Array with values","   * @param {Array.<number | BigNumber>} args","   * @return {number | BigNumber} Returns the result","   * @private","   */","  function _hypot (args) {","    // code based on `hypot` from es6-shim:","    // https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1619-L1633","    var result = 0;","    var largest = 0;","","    for (var i = 0; i < args.length; i++) {","      var value = abs(args[i]);","      if (smaller(largest, value)) {","        result = multiply(result, multiply(divide(largest, value), divide(largest, value)));","        result = add(result, 1);","        largest = value;","      } else {","        result = add(result, isPositive(value) ? multiply(divide(value, largest), divide(value, largest)) : value);","      }","    }","","    return multiply(largest, sqrt(result));","  }","","  hypot.toTex = '\\\\hypot\\\\left(${args}\\\\right)';","","  return hypot;","}","","exports.name = 'hypot';","exports.factory = factory;",""],"l":{"3":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"40":0,"44":0,"48":0,"58":1,"61":0,"62":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"71":0,"75":0,"78":0,"80":0,"83":1,"84":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/lcm.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/lcm.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":1,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":1,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":1,"75":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":49,"loc":{"start":{"line":49,"column":26},"end":{"line":49,"column":42}}},"3":{"name":"(anonymous_3)","line":54,"loc":{"start":{"line":54,"column":22},"end":{"line":54,"column":38}}},"4":{"name":"(anonymous_4)","line":88,"loc":{"start":{"line":88,"column":20},"end":{"line":88,"column":36}}},"5":{"name":"(anonymous_5)","line":93,"loc":{"start":{"line":93,"column":21},"end":{"line":93,"column":37}}},"6":{"name":"(anonymous_6)","line":98,"loc":{"start":{"line":98,"column":21},"end":{"line":98,"column":37}}},"7":{"name":"(anonymous_7)","line":103,"loc":{"start":{"line":103,"column":34},"end":{"line":103,"column":50}}},"8":{"name":"(anonymous_8)","line":118,"loc":{"start":{"line":118,"column":34},"end":{"line":118,"column":50}}},"9":{"name":"(anonymous_9)","line":133,"loc":{"start":{"line":133,"column":33},"end":{"line":133,"column":49}}},"10":{"name":"(anonymous_10)","line":138,"loc":{"start":{"line":138,"column":33},"end":{"line":138,"column":49}}},"11":{"name":"(anonymous_11)","line":144,"loc":{"start":{"line":144,"column":120},"end":{"line":144,"column":142}}},"12":{"name":"_lcmBigNumber","line":164,"loc":{"start":{"line":164,"column":2},"end":{"line":164,"column":31}}},"13":{"name":"_lcm","line":192,"loc":{"start":{"line":192,"column":0},"end":{"line":192,"column":21}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":183,"column":1}},"3":{"start":{"line":7,"column":2},"end":{"line":7,"column":66}},"4":{"start":{"line":9,"column":2},"end":{"line":9,"column":73}},"5":{"start":{"line":10,"column":2},"end":{"line":10,"column":73}},"6":{"start":{"line":11,"column":2},"end":{"line":11,"column":73}},"7":{"start":{"line":12,"column":2},"end":{"line":12,"column":73}},"8":{"start":{"line":13,"column":2},"end":{"line":13,"column":73}},"9":{"start":{"line":44,"column":2},"end":{"line":151,"column":5}},"10":{"start":{"line":51,"column":6},"end":{"line":51,"column":22}},"11":{"start":{"line":56,"column":6},"end":{"line":56,"column":12}},"12":{"start":{"line":59,"column":6},"end":{"line":84,"column":7}},"13":{"start":{"line":61,"column":10},"end":{"line":70,"column":11}},"14":{"start":{"line":64,"column":14},"end":{"line":64,"column":41}},"15":{"start":{"line":65,"column":14},"end":{"line":65,"column":20}},"16":{"start":{"line":68,"column":14},"end":{"line":68,"column":47}},"17":{"start":{"line":69,"column":14},"end":{"line":69,"column":20}},"18":{"start":{"line":71,"column":10},"end":{"line":71,"column":16}},"19":{"start":{"line":73,"column":10},"end":{"line":82,"column":11}},"20":{"start":{"line":76,"column":14},"end":{"line":76,"column":48}},"21":{"start":{"line":77,"column":14},"end":{"line":77,"column":20}},"22":{"start":{"line":80,"column":14},"end":{"line":80,"column":41}},"23":{"start":{"line":81,"column":14},"end":{"line":81,"column":20}},"24":{"start":{"line":83,"column":10},"end":{"line":83,"column":16}},"25":{"start":{"line":85,"column":6},"end":{"line":85,"column":15}},"26":{"start":{"line":90,"column":6},"end":{"line":90,"column":49}},"27":{"start":{"line":95,"column":6},"end":{"line":95,"column":31}},"28":{"start":{"line":100,"column":6},"end":{"line":100,"column":31}},"29":{"start":{"line":105,"column":6},"end":{"line":105,"column":12}},"30":{"start":{"line":107,"column":6},"end":{"line":114,"column":7}},"31":{"start":{"line":109,"column":10},"end":{"line":109,"column":44}},"32":{"start":{"line":110,"column":10},"end":{"line":110,"column":16}},"33":{"start":{"line":112,"column":10},"end":{"line":112,"column":44}},"34":{"start":{"line":113,"column":10},"end":{"line":113,"column":16}},"35":{"start":{"line":115,"column":6},"end":{"line":115,"column":15}},"36":{"start":{"line":120,"column":6},"end":{"line":120,"column":12}},"37":{"start":{"line":122,"column":6},"end":{"line":129,"column":7}},"38":{"start":{"line":124,"column":10},"end":{"line":124,"column":43}},"39":{"start":{"line":125,"column":10},"end":{"line":125,"column":16}},"40":{"start":{"line":127,"column":10},"end":{"line":127,"column":43}},"41":{"start":{"line":128,"column":10},"end":{"line":128,"column":16}},"42":{"start":{"line":130,"column":6},"end":{"line":130,"column":15}},"43":{"start":{"line":135,"column":6},"end":{"line":135,"column":61}},"44":{"start":{"line":140,"column":6},"end":{"line":140,"column":60}},"45":{"start":{"line":145,"column":6},"end":{"line":145,"column":26}},"46":{"start":{"line":146,"column":6},"end":{"line":148,"column":7}},"47":{"start":{"line":147,"column":8},"end":{"line":147,"column":32}},"48":{"start":{"line":149,"column":6},"end":{"line":149,"column":17}},"49":{"start":{"line":153,"column":2},"end":{"line":153,"column":24}},"50":{"start":{"line":155,"column":2},"end":{"line":155,"column":13}},"51":{"start":{"line":164,"column":2},"end":{"line":182,"column":3}},"52":{"start":{"line":165,"column":4},"end":{"line":167,"column":5}},"53":{"start":{"line":166,"column":6},"end":{"line":166,"column":76}},"54":{"start":{"line":169,"column":4},"end":{"line":171,"column":5}},"55":{"start":{"line":170,"column":6},"end":{"line":170,"column":35}},"56":{"start":{"line":175,"column":4},"end":{"line":175,"column":26}},"57":{"start":{"line":176,"column":4},"end":{"line":180,"column":5}},"58":{"start":{"line":177,"column":6},"end":{"line":177,"column":16}},"59":{"start":{"line":178,"column":6},"end":{"line":178,"column":19}},"60":{"start":{"line":179,"column":6},"end":{"line":179,"column":12}},"61":{"start":{"line":181,"column":4},"end":{"line":181,"column":29}},"62":{"start":{"line":192,"column":0},"end":{"line":211,"column":1}},"63":{"start":{"line":193,"column":2},"end":{"line":195,"column":3}},"64":{"start":{"line":194,"column":4},"end":{"line":194,"column":74}},"65":{"start":{"line":197,"column":2},"end":{"line":199,"column":3}},"66":{"start":{"line":198,"column":4},"end":{"line":198,"column":13}},"67":{"start":{"line":203,"column":2},"end":{"line":203,"column":8}},"68":{"start":{"line":204,"column":2},"end":{"line":204,"column":19}},"69":{"start":{"line":205,"column":2},"end":{"line":209,"column":3}},"70":{"start":{"line":206,"column":4},"end":{"line":206,"column":10}},"71":{"start":{"line":207,"column":4},"end":{"line":207,"column":14}},"72":{"start":{"line":208,"column":4},"end":{"line":208,"column":10}},"73":{"start":{"line":210,"column":2},"end":{"line":210,"column":28}},"74":{"start":{"line":213,"column":0},"end":{"line":213,"column":21}},"75":{"start":{"line":214,"column":0},"end":{"line":214,"column":26}}},"branchMap":{"1":{"line":59,"type":"switch","locations":[{"start":{"line":60,"column":8},"end":{"line":71,"column":16}},{"start":{"line":72,"column":8},"end":{"line":83,"column":16}}]},"2":{"line":61,"type":"switch","locations":[{"start":{"line":62,"column":12},"end":{"line":65,"column":20}},{"start":{"line":66,"column":12},"end":{"line":69,"column":20}}]},"3":{"line":73,"type":"switch","locations":[{"start":{"line":74,"column":12},"end":{"line":77,"column":20}},{"start":{"line":78,"column":12},"end":{"line":81,"column":20}}]},"4":{"line":107,"type":"switch","locations":[{"start":{"line":108,"column":8},"end":{"line":110,"column":16}},{"start":{"line":111,"column":8},"end":{"line":113,"column":16}}]},"5":{"line":122,"type":"switch","locations":[{"start":{"line":123,"column":8},"end":{"line":125,"column":16}},{"start":{"line":126,"column":8},"end":{"line":128,"column":16}}]},"6":{"line":165,"type":"if","locations":[{"start":{"line":165,"column":4},"end":{"line":165,"column":4}},{"start":{"line":165,"column":4},"end":{"line":165,"column":4}}]},"7":{"line":165,"type":"binary-expr","locations":[{"start":{"line":165,"column":8},"end":{"line":165,"column":18}},{"start":{"line":165,"column":22},"end":{"line":165,"column":32}}]},"8":{"line":169,"type":"if","locations":[{"start":{"line":169,"column":4},"end":{"line":169,"column":4}},{"start":{"line":169,"column":4},"end":{"line":169,"column":4}}]},"9":{"line":169,"type":"binary-expr","locations":[{"start":{"line":169,"column":8},"end":{"line":169,"column":18}},{"start":{"line":169,"column":22},"end":{"line":169,"column":32}}]},"10":{"line":193,"type":"if","locations":[{"start":{"line":193,"column":2},"end":{"line":193,"column":2}},{"start":{"line":193,"column":2},"end":{"line":193,"column":2}}]},"11":{"line":193,"type":"binary-expr","locations":[{"start":{"line":193,"column":6},"end":{"line":193,"column":19}},{"start":{"line":193,"column":23},"end":{"line":193,"column":36}}]},"12":{"line":197,"type":"if","locations":[{"start":{"line":197,"column":2},"end":{"line":197,"column":2}},{"start":{"line":197,"column":2},"end":{"line":197,"column":2}}]},"13":{"line":197,"type":"binary-expr","locations":[{"start":{"line":197,"column":6},"end":{"line":197,"column":12}},{"start":{"line":197,"column":16},"end":{"line":197,"column":22}}]}},"code":["'use strict';","","var isInteger = require('../../utils/number').isInteger;","","function factory (type, config, load, typed) {","  ","  var matrix = load(require('../../type/matrix/function/matrix'));","","  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));","  var algorithm06 = load(require('../../type/matrix/utils/algorithm06'));","  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));","  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));","  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));","","  /**","   * Calculate the least common multiple for two or more values or arrays.","   *","   * lcm is defined as:","   *","   *     lcm(a, b) = abs(a * b) / gcd(a, b)","   *","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.lcm(a, b)","   *    math.lcm(a, b, c, ...)","   *","   * Examples:","   *","   *    math.lcm(4, 6);               // returns 12","   *    math.lcm(6, 21);              // returns 42","   *    math.lcm(6, 21, 5);           // returns 210","   *","   *    math.lcm([4, 6], [6, 21]);    // returns [12, 42]","   *","   * See also:","   *","   *    gcd, xgcd","   *","   * @param {... number | BigNumber | Array | Matrix} args  Two or more integer numbers","   * @return {number | BigNumber | Array | Matrix}                           The least common multiple","   */","  var lcm = typed('lcm', {","    'number, number': _lcm,","","    'BigNumber, BigNumber': _lcmBigNumber,","","    'Fraction, Fraction': function (x, y) {","","      return x.lcm(y);","    },","","    'Matrix, Matrix': function (x, y) {","      // result","      var c;","","      // process matrix storage","      switch (x.storage()) {","        case 'sparse':","          switch (y.storage()) {","            case 'sparse':","              // sparse + sparse","              c = algorithm06(x, y, lcm);","              break;","            default:","              // sparse + dense","              c = algorithm02(y, x, lcm, true);","              break;","          }","          break;","        default:","          switch (y.storage()) {","            case 'sparse':","              // dense + sparse","              c = algorithm02(x, y, lcm, false);","              break;","            default:","              // dense + dense","              c = algorithm13(x, y, lcm);","              break;","          }","          break;","      }","      return c;","    },","","    'Array, Array': function (x, y) {","      // use matrix implementation","      return lcm(matrix(x), matrix(y)).valueOf();","    },","","    'Array, Matrix': function (x, y) {","      // use matrix implementation","      return lcm(matrix(x), y);","    },","","    'Matrix, Array': function (x, y) {","      // use matrix implementation","      return lcm(x, matrix(y));","    },","","    'Matrix, number | BigNumber': function (x, y) {","      // result","      var c;","      // check storage format","      switch (x.storage()) {","        case 'sparse':","          c = algorithm11(x, y, lcm, false);","          break;","        default:","          c = algorithm14(x, y, lcm, false);","          break;","      }","      return c;","    },","","    'number | BigNumber, Matrix': function (x, y) {","      // result","      var c;","      // check storage format","      switch (y.storage()) {","        case 'sparse':","          c = algorithm11(y, x, lcm, true);","          break;","        default:","          c = algorithm14(y, x, lcm, true);","          break;","      }","      return c;","    },","","    'Array, number | BigNumber': function (x, y) {","      // use matrix implementation","      return algorithm14(matrix(x), y, lcm, false).valueOf();","    },","","    'number | BigNumber, Array': function (x, y) {","      // use matrix implementation","      return algorithm14(matrix(y), x, lcm, true).valueOf();","    },","","    // TODO: need a smarter notation here","    'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function (a, b, args) {","      var res = lcm(a, b);","      for (var i = 0; i < args.length; i++) {","        res = lcm(res, args[i]);","      }","      return res;","    }","  });","","  lcm.toTex = undefined;  // use default template","","  return lcm;","","  /**","   * Calculate lcm for two BigNumbers","   * @param {BigNumber} a","   * @param {BigNumber} b","   * @returns {BigNumber} Returns the least common multiple of a and b","   * @private","   */","  function _lcmBigNumber(a, b) {","    if (!a.isInt() || !b.isInt()) {","      throw new Error('Parameters in function lcm must be integer numbers');","    }","","    if (a.isZero() || b.isZero()) {","      return new type.BigNumber(0);","    }","","    // http://en.wikipedia.org/wiki/Euclidean_algorithm","    // evaluate lcm here inline to reduce overhead","    var prod = a.times(b);","    while (!b.isZero()) {","      var t = b;","      b = a.mod(t);","      a = t;","    }","    return prod.div(a).abs();","  }","}","","/**"," * Calculate lcm for two numbers"," * @param {number} a"," * @param {number} b"," * @returns {number} Returns the least common multiple of a and b"," * @private"," */","function _lcm (a, b) {","  if (!isInteger(a) || !isInteger(b)) {","    throw new Error('Parameters in function lcm must be integer numbers');","  }","","  if (a == 0 || b == 0) {","    return 0;","  }","","  // http://en.wikipedia.org/wiki/Euclidean_algorithm","  // evaluate lcm here inline to reduce overhead","  var t;","  var prod = a * b;","  while (b != 0) {","    t = b;","    b = a % t;","    a = t;","  }","  return Math.abs(prod / a);","}","","exports.name = 'lcm';","exports.factory = factory;",""],"l":{"3":1,"5":1,"7":0,"9":0,"10":0,"11":0,"12":0,"13":0,"44":0,"51":0,"56":0,"59":0,"61":0,"64":0,"65":0,"68":0,"69":0,"71":0,"73":0,"76":0,"77":0,"80":0,"81":0,"83":0,"85":0,"90":0,"95":0,"100":0,"105":0,"107":0,"109":0,"110":0,"112":0,"113":0,"115":0,"120":0,"122":0,"124":0,"125":0,"127":0,"128":0,"130":0,"135":0,"140":0,"145":0,"146":0,"147":0,"149":0,"153":0,"155":0,"164":1,"165":0,"166":0,"169":0,"170":0,"175":0,"176":0,"177":0,"178":0,"179":0,"181":0,"192":1,"193":0,"194":0,"197":0,"198":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"210":0,"213":1,"214":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/log.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/log.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1,"17":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":43,"loc":{"start":{"line":43,"column":14},"end":{"line":43,"column":27}}},"3":{"name":"(anonymous_3)","line":53,"loc":{"start":{"line":53,"column":15},"end":{"line":53,"column":28}}},"4":{"name":"(anonymous_4)","line":57,"loc":{"start":{"line":57,"column":17},"end":{"line":57,"column":30}}},"5":{"name":"(anonymous_5)","line":67,"loc":{"start":{"line":67,"column":22},"end":{"line":67,"column":35}}},"6":{"name":"(anonymous_6)","line":71,"loc":{"start":{"line":71,"column":16},"end":{"line":71,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":83,"column":1}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":53}},"4":{"start":{"line":42,"column":2},"end":{"line":75,"column":5}},"5":{"start":{"line":44,"column":6},"end":{"line":50,"column":7}},"6":{"start":{"line":45,"column":8},"end":{"line":45,"column":27}},"7":{"start":{"line":49,"column":8},"end":{"line":49,"column":44}},"8":{"start":{"line":54,"column":6},"end":{"line":54,"column":21}},"9":{"start":{"line":58,"column":6},"end":{"line":64,"column":7}},"10":{"start":{"line":59,"column":8},"end":{"line":59,"column":22}},"11":{"start":{"line":63,"column":8},"end":{"line":63,"column":55}},"12":{"start":{"line":68,"column":6},"end":{"line":68,"column":29}},"13":{"start":{"line":73,"column":6},"end":{"line":73,"column":45}},"14":{"start":{"line":77,"column":2},"end":{"line":80,"column":4}},"15":{"start":{"line":82,"column":2},"end":{"line":82,"column":13}},"16":{"start":{"line":85,"column":0},"end":{"line":85,"column":21}},"17":{"start":{"line":86,"column":0},"end":{"line":86,"column":26}}},"branchMap":{"1":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":6},"end":{"line":44,"column":6}},{"start":{"line":44,"column":6},"end":{"line":44,"column":6}}]},"2":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":10},"end":{"line":44,"column":16}},{"start":{"line":44,"column":20},"end":{"line":44,"column":38}}]},"3":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":6},"end":{"line":58,"column":6}},{"start":{"line":58,"column":6},"end":{"line":58,"column":6}}]},"4":{"line":58,"type":"binary-expr","locations":[{"start":{"line":58,"column":10},"end":{"line":58,"column":25}},{"start":{"line":58,"column":29},"end":{"line":58,"column":47}}]}},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","","function factory (type, config, load, typed) {","  var divideScalar = load(require('./divideScalar'));","","  /**","   * Calculate the logarithm of a value.","   *","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.log(x)","   *    math.log(x, base)","   *","   * Examples:","   *","   *    math.log(3.5);                  // returns 1.252762968495368","   *    math.exp(math.log(2.4));        // returns 2.4","   *","   *    math.pow(10, 4);                // returns 10000","   *    math.log(10000, 10);            // returns 4","   *    math.log(10000) / math.log(10); // returns 4","   *","   *    math.log(1024, 2);              // returns 10","   *    math.pow(2, 10);                // returns 1024","   *","   * See also:","   *","   *    exp, log10","   *","   * @param {number | BigNumber | Complex | Array | Matrix} x","   *            Value for which to calculate the logarithm.","   * @param {number | BigNumber | Complex} [base=e]","   *            Optional base for the logarithm. If not provided, the natural","   *            logarithm of `x` is calculated.","   * @return {number | BigNumber | Complex | Array | Matrix}","   *            Returns the logarithm of `x`","   */","  var log = typed('log', {","    'number': function (x) {","      if (x >= 0 || config.predictable) {","        return Math.log(x);","      }","      else {","        // negative value -> complex value computation","        return new type.Complex(x, 0).log();","      }","    },","","    'Complex': function (x) {","      return x.log();","    },","","    'BigNumber': function (x) {","      if (!x.isNegative() || config.predictable) {","        return x.ln();","      }","      else {","        // downgrade to number, return Complex valued result","        return new type.Complex(x.toNumber(), 0).log();","      }","    },","","    'Array | Matrix': function (x) {","      return deepMap(x, log);","    },","","    'any, any': function (x, base) {","      // calculate logarithm for a specified base, log(x, base)","      return divideScalar(log(x), log(base));","    }","  });","","  log.toTex = {","    1: '\\\\ln\\\\left(${args[0]}\\\\right)',","    2: '\\\\log_{${args[1]}}\\\\left(${args[0]}\\\\right)'","  };","","  return log;","}","","exports.name = 'log';","exports.factory = factory;",""],"l":{"3":1,"5":1,"6":0,"42":0,"44":0,"45":0,"49":0,"54":0,"58":0,"59":0,"63":0,"68":0,"73":0,"77":0,"82":0,"85":1,"86":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/log10.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/log10.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":1,"15":0,"16":1,"17":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[1,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":32,"loc":{"start":{"line":32,"column":14},"end":{"line":32,"column":27}}},"3":{"name":"(anonymous_3)","line":42,"loc":{"start":{"line":42,"column":15},"end":{"line":42,"column":28}}},"4":{"name":"(anonymous_4)","line":46,"loc":{"start":{"line":46,"column":17},"end":{"line":46,"column":30}}},"5":{"name":"(anonymous_5)","line":56,"loc":{"start":{"line":56,"column":22},"end":{"line":56,"column":35}}},"6":{"name":"(anonymous_6)","line":72,"loc":{"start":{"line":72,"column":27},"end":{"line":72,"column":40}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":64,"column":1}},"3":{"start":{"line":31,"column":2},"end":{"line":59,"column":5}},"4":{"start":{"line":33,"column":6},"end":{"line":39,"column":7}},"5":{"start":{"line":34,"column":8},"end":{"line":34,"column":25}},"6":{"start":{"line":38,"column":8},"end":{"line":38,"column":59}},"7":{"start":{"line":43,"column":6},"end":{"line":43,"column":54}},"8":{"start":{"line":47,"column":6},"end":{"line":53,"column":7}},"9":{"start":{"line":48,"column":8},"end":{"line":48,"column":23}},"10":{"start":{"line":52,"column":8},"end":{"line":52,"column":70}},"11":{"start":{"line":57,"column":6},"end":{"line":57,"column":31}},"12":{"start":{"line":61,"column":2},"end":{"line":61,"column":59}},"13":{"start":{"line":63,"column":2},"end":{"line":63,"column":15}},"14":{"start":{"line":72,"column":0},"end":{"line":74,"column":2}},"15":{"start":{"line":73,"column":2},"end":{"line":73,"column":33}},"16":{"start":{"line":76,"column":0},"end":{"line":76,"column":23}},"17":{"start":{"line":77,"column":0},"end":{"line":77,"column":26}}},"branchMap":{"1":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":6},"end":{"line":33,"column":6}},{"start":{"line":33,"column":6},"end":{"line":33,"column":6}}]},"2":{"line":33,"type":"binary-expr","locations":[{"start":{"line":33,"column":10},"end":{"line":33,"column":16}},{"start":{"line":33,"column":20},"end":{"line":33,"column":38}}]},"3":{"line":47,"type":"if","locations":[{"start":{"line":47,"column":6},"end":{"line":47,"column":6}},{"start":{"line":47,"column":6},"end":{"line":47,"column":6}}]},"4":{"line":47,"type":"binary-expr","locations":[{"start":{"line":47,"column":10},"end":{"line":47,"column":25}},{"start":{"line":47,"column":29},"end":{"line":47,"column":47}}]},"5":{"line":72,"type":"binary-expr","locations":[{"start":{"line":72,"column":13},"end":{"line":72,"column":23}},{"start":{"line":72,"column":27},"end":{"line":74,"column":1}}]}},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","","function factory (type, config, load, typed) {","  /**","   * Calculate the 10-base logarithm of a value. This is the same as calculating `log(x, 10)`.","   *","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.log10(x)","   *","   * Examples:","   *","   *    math.log10(0.00001);            // returns -5","   *    math.log10(10000);              // returns 4","   *    math.log(10000) / math.log(10); // returns 4","   *    math.pow(10, 4);                // returns 10000","   *","   * See also:","   *","   *    exp, log","   *","   * @param {number | BigNumber | Complex | Array | Matrix} x","   *            Value for which to calculate the logarithm.","   * @return {number | BigNumber | Complex | Array | Matrix}","   *            Returns the 10-base logarithm of `x`","   */","  var log10 = typed('log10', {","    'number': function (x) {","      if (x >= 0 || config.predictable) {","        return _log10(x);","      }","      else {","        // negative value -> complex value computation","        return new type.Complex(x, 0).log().div(Math.LN10);","      }","    },","","    'Complex': function (x) {","      return new type.Complex(x).log().div(Math.LN10);","    },","","    'BigNumber': function (x) {","      if (!x.isNegative() || config.predictable) {","        return x.log();","      }","      else {","        // downgrade to number, return Complex valued result","        return new type.Complex(x.toNumber(), 0).log().div(Math.LN10);","      }","    },","","    'Array | Matrix': function (x) {","      return deepMap(x, log10);","    }","  });","","  log10.toTex = {1: '\\\\log_{10}\\\\left(${args[0]}\\\\right)'};","","  return log10;","}","","/**"," * Calculate the 10-base logarithm of a number"," * @param {number} x"," * @return {number}"," * @private"," */","var _log10 = Math.log10 || function (x) {","  return Math.log(x) / Math.LN10;","};","","exports.name = 'log10';","exports.factory = factory;","",""],"l":{"3":1,"5":1,"31":0,"33":0,"34":0,"38":0,"43":0,"47":0,"48":0,"52":0,"57":0,"61":0,"63":0,"72":1,"73":0,"76":1,"77":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/mod.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/mod.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":1,"51":0,"52":0,"53":0,"54":0,"55":0,"56":1,"57":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},"fnMap":{"1":{"name":"factory","line":3,"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}}},"2":{"name":"(anonymous_2)","line":55,"loc":{"start":{"line":55,"column":28},"end":{"line":55,"column":44}}},"3":{"name":"(anonymous_3)","line":59,"loc":{"start":{"line":59,"column":26},"end":{"line":59,"column":42}}},"4":{"name":"(anonymous_4)","line":63,"loc":{"start":{"line":63,"column":22},"end":{"line":63,"column":38}}},"5":{"name":"(anonymous_5)","line":97,"loc":{"start":{"line":97,"column":20},"end":{"line":97,"column":36}}},"6":{"name":"(anonymous_6)","line":102,"loc":{"start":{"line":102,"column":21},"end":{"line":102,"column":37}}},"7":{"name":"(anonymous_7)","line":107,"loc":{"start":{"line":107,"column":21},"end":{"line":107,"column":37}}},"8":{"name":"(anonymous_8)","line":112,"loc":{"start":{"line":112,"column":19},"end":{"line":112,"column":35}}},"9":{"name":"(anonymous_9)","line":127,"loc":{"start":{"line":127,"column":19},"end":{"line":127,"column":35}}},"10":{"name":"(anonymous_10)","line":142,"loc":{"start":{"line":142,"column":18},"end":{"line":142,"column":34}}},"11":{"name":"(anonymous_11)","line":147,"loc":{"start":{"line":147,"column":18},"end":{"line":147,"column":34}}},"12":{"name":"_mod","line":166,"loc":{"start":{"line":166,"column":2},"end":{"line":166,"column":22}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":181,"column":1}},"2":{"start":{"line":5,"column":2},"end":{"line":5,"column":66}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":43}},"4":{"start":{"line":8,"column":2},"end":{"line":8,"column":73}},"5":{"start":{"line":9,"column":2},"end":{"line":9,"column":73}},"6":{"start":{"line":10,"column":2},"end":{"line":10,"column":73}},"7":{"start":{"line":11,"column":2},"end":{"line":11,"column":73}},"8":{"start":{"line":12,"column":2},"end":{"line":12,"column":73}},"9":{"start":{"line":13,"column":2},"end":{"line":13,"column":73}},"10":{"start":{"line":14,"column":2},"end":{"line":14,"column":73}},"11":{"start":{"line":51,"column":2},"end":{"line":151,"column":5}},"12":{"start":{"line":56,"column":6},"end":{"line":56,"column":39}},"13":{"start":{"line":60,"column":6},"end":{"line":60,"column":22}},"14":{"start":{"line":65,"column":6},"end":{"line":65,"column":12}},"15":{"start":{"line":68,"column":6},"end":{"line":93,"column":7}},"16":{"start":{"line":70,"column":10},"end":{"line":79,"column":11}},"17":{"start":{"line":73,"column":14},"end":{"line":73,"column":48}},"18":{"start":{"line":74,"column":14},"end":{"line":74,"column":20}},"19":{"start":{"line":77,"column":14},"end":{"line":77,"column":47}},"20":{"start":{"line":78,"column":14},"end":{"line":78,"column":20}},"21":{"start":{"line":80,"column":10},"end":{"line":80,"column":16}},"22":{"start":{"line":82,"column":10},"end":{"line":91,"column":11}},"23":{"start":{"line":85,"column":14},"end":{"line":85,"column":48}},"24":{"start":{"line":86,"column":14},"end":{"line":86,"column":20}},"25":{"start":{"line":89,"column":14},"end":{"line":89,"column":41}},"26":{"start":{"line":90,"column":14},"end":{"line":90,"column":20}},"27":{"start":{"line":92,"column":10},"end":{"line":92,"column":16}},"28":{"start":{"line":94,"column":6},"end":{"line":94,"column":15}},"29":{"start":{"line":99,"column":6},"end":{"line":99,"column":49}},"30":{"start":{"line":104,"column":6},"end":{"line":104,"column":31}},"31":{"start":{"line":109,"column":6},"end":{"line":109,"column":31}},"32":{"start":{"line":114,"column":6},"end":{"line":114,"column":12}},"33":{"start":{"line":116,"column":6},"end":{"line":123,"column":7}},"34":{"start":{"line":118,"column":10},"end":{"line":118,"column":44}},"35":{"start":{"line":119,"column":10},"end":{"line":119,"column":16}},"36":{"start":{"line":121,"column":10},"end":{"line":121,"column":44}},"37":{"start":{"line":122,"column":10},"end":{"line":122,"column":16}},"38":{"start":{"line":124,"column":6},"end":{"line":124,"column":15}},"39":{"start":{"line":129,"column":6},"end":{"line":129,"column":12}},"40":{"start":{"line":131,"column":6},"end":{"line":138,"column":7}},"41":{"start":{"line":133,"column":10},"end":{"line":133,"column":43}},"42":{"start":{"line":134,"column":10},"end":{"line":134,"column":16}},"43":{"start":{"line":136,"column":10},"end":{"line":136,"column":43}},"44":{"start":{"line":137,"column":10},"end":{"line":137,"column":16}},"45":{"start":{"line":139,"column":6},"end":{"line":139,"column":15}},"46":{"start":{"line":144,"column":6},"end":{"line":144,"column":61}},"47":{"start":{"line":149,"column":6},"end":{"line":149,"column":60}},"48":{"start":{"line":153,"column":2},"end":{"line":155,"column":4}},"49":{"start":{"line":157,"column":2},"end":{"line":157,"column":13}},"50":{"start":{"line":166,"column":2},"end":{"line":180,"column":3}},"51":{"start":{"line":167,"column":4},"end":{"line":179,"column":5}},"52":{"start":{"line":171,"column":6},"end":{"line":171,"column":39}},"53":{"start":{"line":173,"column":9},"end":{"line":179,"column":5}},"54":{"start":{"line":174,"column":6},"end":{"line":174,"column":15}},"55":{"start":{"line":178,"column":6},"end":{"line":178,"column":69}},"56":{"start":{"line":183,"column":0},"end":{"line":183,"column":21}},"57":{"start":{"line":184,"column":0},"end":{"line":184,"column":26}}},"branchMap":{"1":{"line":56,"type":"cond-expr","locations":[{"start":{"line":56,"column":26},"end":{"line":56,"column":27}},{"start":{"line":56,"column":30},"end":{"line":56,"column":38}}]},"2":{"line":68,"type":"switch","locations":[{"start":{"line":69,"column":8},"end":{"line":80,"column":16}},{"start":{"line":81,"column":8},"end":{"line":92,"column":16}}]},"3":{"line":70,"type":"switch","locations":[{"start":{"line":71,"column":12},"end":{"line":74,"column":20}},{"start":{"line":75,"column":12},"end":{"line":78,"column":20}}]},"4":{"line":82,"type":"switch","locations":[{"start":{"line":83,"column":12},"end":{"line":86,"column":20}},{"start":{"line":87,"column":12},"end":{"line":90,"column":20}}]},"5":{"line":116,"type":"switch","locations":[{"start":{"line":117,"column":8},"end":{"line":119,"column":16}},{"start":{"line":120,"column":8},"end":{"line":122,"column":16}}]},"6":{"line":131,"type":"switch","locations":[{"start":{"line":132,"column":8},"end":{"line":134,"column":16}},{"start":{"line":135,"column":8},"end":{"line":137,"column":16}}]},"7":{"line":167,"type":"if","locations":[{"start":{"line":167,"column":4},"end":{"line":167,"column":4}},{"start":{"line":167,"column":4},"end":{"line":167,"column":4}}]},"8":{"line":173,"type":"if","locations":[{"start":{"line":173,"column":9},"end":{"line":173,"column":9}},{"start":{"line":173,"column":9},"end":{"line":173,"column":9}}]}},"code":["'use strict';","","function factory (type, config, load, typed) {","","  var matrix = load(require('../../type/matrix/function/matrix'));","  var latex = require('../../utils/latex');","","  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));","  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));","  var algorithm05 = load(require('../../type/matrix/utils/algorithm05'));","  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));","  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));","  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));","  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));","  ","  /**","   * Calculates the modulus, the remainder of an integer division.","   *","   * For matrices, the function is evaluated element wise.","   *","   * The modulus is defined as:","   *","   *     x - y * floor(x / y)","   *","   * See http://en.wikipedia.org/wiki/Modulo_operation.","   *","   * Syntax:","   *","   *    math.mod(x, y)","   *","   * Examples:","   *","   *    math.mod(8, 3);                // returns 2","   *    math.mod(11, 2);               // returns 1","   *","   *    function isOdd(x) {","   *      return math.mod(x, 2) != 0;","   *    }","   *","   *    isOdd(2);                      // returns false","   *    isOdd(3);                      // returns true","   *","   * See also:","   *","   *    divide","   *","   * @param  {number | BigNumber | Fraction | Array | Matrix} x Dividend","   * @param  {number | BigNumber | Fraction | Array | Matrix} y Divisor","   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the remainder of `x` divided by `y`.","   */","  var mod = typed('mod', {","","    'number, number': _mod,","","    'BigNumber, BigNumber': function (x, y) {","      return y.isZero() ? x : x.mod(y);","    },","","    'Fraction, Fraction': function (x, y) {","      return x.mod(y);","    },","","    'Matrix, Matrix': function (x, y) {","      // result","      var c;","","      // process matrix storage","      switch (x.storage()) {","        case 'sparse':","          switch (y.storage()) {","            case 'sparse':","              // mod(sparse, sparse)","              c = algorithm05(x, y, mod, false);","              break;","            default:","              // mod(sparse, dense)","              c = algorithm02(y, x, mod, true);","              break;","          }","          break;","        default:","          switch (y.storage()) {","            case 'sparse':","              // mod(dense, sparse)","              c = algorithm03(x, y, mod, false);","              break;","            default:","              // mod(dense, dense)","              c = algorithm13(x, y, mod);","              break;","          }","          break;","      }","      return c;","    },","    ","    'Array, Array': function (x, y) {","      // use matrix implementation","      return mod(matrix(x), matrix(y)).valueOf();","    },","","    'Array, Matrix': function (x, y) {","      // use matrix implementation","      return mod(matrix(x), y);","    },","","    'Matrix, Array': function (x, y) {","      // use matrix implementation","      return mod(x, matrix(y));","    },","","    'Matrix, any': function (x, y) {","      // result","      var c;","      // check storage format","      switch (x.storage()) {","        case 'sparse':","          c = algorithm11(x, y, mod, false);","          break;","        default:","          c = algorithm14(x, y, mod, false);","          break;","      }","      return c;","    },","","    'any, Matrix': function (x, y) {","      // result","      var c;","      // check storage format","      switch (y.storage()) {","        case 'sparse':","          c = algorithm12(y, x, mod, true);","          break;","        default:","          c = algorithm14(y, x, mod, true);","          break;","      }","      return c;","    },","","    'Array, any': function (x, y) {","      // use matrix implementation","      return algorithm14(matrix(x), y, mod, false).valueOf();","    },","","    'any, Array': function (x, y) {","      // use matrix implementation","      return algorithm14(matrix(y), x, mod, true).valueOf();","    }","  });","","  mod.toTex = {","    2: '\\\\left(${args[0]}' + latex.operators['mod'] + '${args[1]}\\\\right)'","  };","","  return mod;","","  /**","   * Calculate the modulus of two numbers","   * @param {number} x","   * @param {number} y","   * @returns {number} res","   * @private","   */","  function _mod(x, y) {","    if (y > 0) {","      // We don't use JavaScript's % operator here as this doesn't work","      // correctly for x < 0 and x == 0","      // see http://en.wikipedia.org/wiki/Modulo_operation","      return x - y * Math.floor(x / y);","    }","    else if (y === 0) {","      return x;","    }","    else { // y < 0","      // TODO: implement mod for a negative divisor","      throw new Error('Cannot calculate mod for a negative divisor');","    }","  }","}","","exports.name = 'mod';","exports.factory = factory;",""],"l":{"3":1,"5":0,"6":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"51":0,"56":0,"60":0,"65":0,"68":0,"70":0,"73":0,"74":0,"77":0,"78":0,"80":0,"82":0,"85":0,"86":0,"89":0,"90":0,"92":0,"94":0,"99":0,"104":0,"109":0,"114":0,"116":0,"118":0,"119":0,"121":0,"122":0,"124":0,"129":0,"131":0,"133":0,"134":0,"136":0,"137":0,"139":0,"144":0,"149":0,"153":0,"157":0,"166":1,"167":0,"171":0,"173":0,"174":0,"178":0,"183":1,"184":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/multiply.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/multiply.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0,"270":0,"271":0,"272":0,"273":0,"274":0,"275":0,"276":0,"277":0,"278":0,"279":0,"280":0,"281":0,"282":0,"283":0,"284":0,"285":0,"286":0,"287":0,"288":0,"289":0,"290":0,"291":0,"292":0,"293":0,"294":0,"295":0,"296":0,"297":0,"298":0,"299":0,"300":0,"301":0,"302":0,"303":0,"304":0,"305":0,"306":0,"307":0,"308":0,"309":0,"310":0,"311":0,"312":0,"313":0,"314":0,"315":0,"316":0,"317":0,"318":0,"319":0,"320":0,"321":0,"322":0,"323":0,"324":0,"325":0,"326":0,"327":0,"328":0,"329":0,"330":0,"331":0,"332":0,"333":0,"334":0,"335":0,"336":0,"337":0,"338":0,"339":0,"340":0,"341":0,"342":0,"343":0,"344":0,"345":0,"346":0,"347":0,"348":0,"349":0,"350":0,"351":0,"352":0,"353":0,"354":0,"355":0,"356":0,"357":0,"358":0,"359":0,"360":0,"361":0,"362":0,"363":0,"364":0,"365":0,"366":0,"367":0,"368":0,"369":1,"370":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0,0],"9":[0,0,0],"10":[0,0],"11":[0,0],"12":[0,0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0,0,0],"18":[0],"19":[0,0],"20":[0,0,0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0,0,0],"27":[0,0],"28":[0,0,0,0],"29":[0,0],"30":[0,0],"31":[0,0,0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0,0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0,0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0,0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0},"fnMap":{"1":{"name":"factory","line":6,"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":45}}},"2":{"name":"(anonymous_2)","line":56,"loc":{"start":{"line":56,"column":20},"end":{"line":56,"column":36}}},"3":{"name":"(anonymous_3)","line":66,"loc":{"start":{"line":66,"column":22},"end":{"line":66,"column":38}}},"4":{"name":"(anonymous_4)","line":93,"loc":{"start":{"line":93,"column":21},"end":{"line":93,"column":37}}},"5":{"name":"(anonymous_5)","line":98,"loc":{"start":{"line":98,"column":21},"end":{"line":98,"column":37}}},"6":{"name":"(anonymous_6)","line":103,"loc":{"start":{"line":103,"column":19},"end":{"line":103,"column":35}}},"7":{"name":"(anonymous_7)","line":119,"loc":{"start":{"line":119,"column":19},"end":{"line":119,"column":35}}},"8":{"name":"(anonymous_8)","line":134,"loc":{"start":{"line":134,"column":18},"end":{"line":134,"column":34}}},"9":{"name":"(anonymous_9)","line":139,"loc":{"start":{"line":139,"column":18},"end":{"line":139,"column":34}}},"10":{"name":"(anonymous_10)","line":146,"loc":{"start":{"line":146,"column":24},"end":{"line":146,"column":46}}},"11":{"name":"(anonymous_11)","line":157,"loc":{"start":{"line":157,"column":34},"end":{"line":157,"column":58}}},"12":{"name":"(anonymous_12)","line":215,"loc":{"start":{"line":215,"column":30},"end":{"line":215,"column":49}}},"13":{"name":"(anonymous_13)","line":261,"loc":{"start":{"line":261,"column":30},"end":{"line":261,"column":46}}},"14":{"name":"(anonymous_14)","line":278,"loc":{"start":{"line":278,"column":35},"end":{"line":278,"column":51}}},"15":{"name":"(anonymous_15)","line":338,"loc":{"start":{"line":338,"column":30},"end":{"line":338,"column":46}}},"16":{"name":"(anonymous_16)","line":356,"loc":{"start":{"line":356,"column":30},"end":{"line":356,"column":46}}},"17":{"name":"(anonymous_17)","line":388,"loc":{"start":{"line":388,"column":35},"end":{"line":388,"column":51}}},"18":{"name":"(anonymous_18)","line":449,"loc":{"start":{"line":449,"column":40},"end":{"line":449,"column":56}}},"19":{"name":"(anonymous_19)","line":517,"loc":{"start":{"line":517,"column":41},"end":{"line":517,"column":57}}},"20":{"name":"(anonymous_20)","line":628,"loc":{"start":{"line":628,"column":36},"end":{"line":628,"column":52}}},"21":{"name":"(anonymous_21)","line":732,"loc":{"start":{"line":732,"column":41},"end":{"line":732,"column":57}}},"22":{"name":"(anonymous_22)","line":845,"loc":{"start":{"line":845,"column":42},"end":{"line":845,"column":58}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":50}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":41}},"3":{"start":{"line":6,"column":0},"end":{"line":967,"column":1}},"4":{"start":{"line":7,"column":2},"end":{"line":7,"column":43}},"5":{"start":{"line":9,"column":2},"end":{"line":9,"column":66}},"6":{"start":{"line":10,"column":2},"end":{"line":10,"column":47}},"7":{"start":{"line":11,"column":2},"end":{"line":11,"column":57}},"8":{"start":{"line":12,"column":2},"end":{"line":12,"column":63}},"9":{"start":{"line":14,"column":2},"end":{"line":14,"column":73}},"10":{"start":{"line":15,"column":2},"end":{"line":15,"column":73}},"11":{"start":{"line":17,"column":2},"end":{"line":17,"column":37}},"12":{"start":{"line":18,"column":2},"end":{"line":18,"column":39}},"13":{"start":{"line":53,"column":2},"end":{"line":155,"column":33}},"14":{"start":{"line":58,"column":6},"end":{"line":58,"column":62}},"15":{"start":{"line":61,"column":6},"end":{"line":61,"column":45}},"16":{"start":{"line":63,"column":6},"end":{"line":63,"column":58}},"17":{"start":{"line":68,"column":6},"end":{"line":68,"column":27}},"18":{"start":{"line":69,"column":6},"end":{"line":69,"column":27}},"19":{"start":{"line":72,"column":6},"end":{"line":72,"column":46}},"20":{"start":{"line":75,"column":6},"end":{"line":83,"column":7}},"21":{"start":{"line":77,"column":8},"end":{"line":80,"column":9}},"22":{"start":{"line":79,"column":10},"end":{"line":79,"column":55}},"23":{"start":{"line":82,"column":8},"end":{"line":82,"column":43}},"24":{"start":{"line":85,"column":6},"end":{"line":88,"column":7}},"25":{"start":{"line":87,"column":8},"end":{"line":87,"column":43}},"26":{"start":{"line":90,"column":6},"end":{"line":90,"column":41}},"27":{"start":{"line":95,"column":6},"end":{"line":95,"column":36}},"28":{"start":{"line":100,"column":6},"end":{"line":100,"column":49}},"29":{"start":{"line":105,"column":6},"end":{"line":105,"column":12}},"30":{"start":{"line":108,"column":6},"end":{"line":115,"column":7}},"31":{"start":{"line":110,"column":10},"end":{"line":110,"column":55}},"32":{"start":{"line":111,"column":10},"end":{"line":111,"column":16}},"33":{"start":{"line":113,"column":10},"end":{"line":113,"column":55}},"34":{"start":{"line":114,"column":10},"end":{"line":114,"column":16}},"35":{"start":{"line":116,"column":6},"end":{"line":116,"column":15}},"36":{"start":{"line":121,"column":6},"end":{"line":121,"column":12}},"37":{"start":{"line":123,"column":6},"end":{"line":130,"column":7}},"38":{"start":{"line":125,"column":10},"end":{"line":125,"column":54}},"39":{"start":{"line":126,"column":10},"end":{"line":126,"column":16}},"40":{"start":{"line":128,"column":10},"end":{"line":128,"column":54}},"41":{"start":{"line":129,"column":10},"end":{"line":129,"column":16}},"42":{"start":{"line":131,"column":6},"end":{"line":131,"column":15}},"43":{"start":{"line":136,"column":6},"end":{"line":136,"column":72}},"44":{"start":{"line":141,"column":6},"end":{"line":141,"column":71}},"45":{"start":{"line":147,"column":6},"end":{"line":147,"column":34}},"46":{"start":{"line":149,"column":6},"end":{"line":151,"column":7}},"47":{"start":{"line":150,"column":8},"end":{"line":150,"column":43}},"48":{"start":{"line":153,"column":6},"end":{"line":153,"column":20}},"49":{"start":{"line":157,"column":2},"end":{"line":205,"column":4}},"50":{"start":{"line":159,"column":4},"end":{"line":204,"column":5}},"51":{"start":{"line":162,"column":8},"end":{"line":179,"column":9}},"52":{"start":{"line":165,"column":12},"end":{"line":168,"column":13}},"53":{"start":{"line":167,"column":14},"end":{"line":167,"column":110}},"54":{"start":{"line":169,"column":12},"end":{"line":169,"column":18}},"55":{"start":{"line":172,"column":12},"end":{"line":175,"column":13}},"56":{"start":{"line":174,"column":14},"end":{"line":174,"column":151}},"57":{"start":{"line":176,"column":12},"end":{"line":176,"column":18}},"58":{"start":{"line":178,"column":12},"end":{"line":178,"column":124}},"59":{"start":{"line":180,"column":8},"end":{"line":180,"column":14}},"60":{"start":{"line":183,"column":8},"end":{"line":200,"column":9}},"61":{"start":{"line":186,"column":12},"end":{"line":189,"column":13}},"62":{"start":{"line":188,"column":14},"end":{"line":188,"column":154}},"63":{"start":{"line":190,"column":12},"end":{"line":190,"column":18}},"64":{"start":{"line":193,"column":12},"end":{"line":196,"column":13}},"65":{"start":{"line":195,"column":14},"end":{"line":195,"column":156}},"66":{"start":{"line":197,"column":12},"end":{"line":197,"column":18}},"67":{"start":{"line":199,"column":12},"end":{"line":199,"column":124}},"68":{"start":{"line":201,"column":8},"end":{"line":201,"column":14}},"69":{"start":{"line":203,"column":8},"end":{"line":203,"column":120}},"70":{"start":{"line":215,"column":2},"end":{"line":251,"column":4}},"71":{"start":{"line":217,"column":4},"end":{"line":218,"column":59}},"72":{"start":{"line":218,"column":6},"end":{"line":218,"column":59}},"73":{"start":{"line":221,"column":4},"end":{"line":221,"column":24}},"74":{"start":{"line":222,"column":4},"end":{"line":222,"column":26}},"75":{"start":{"line":224,"column":4},"end":{"line":224,"column":24}},"76":{"start":{"line":225,"column":4},"end":{"line":225,"column":26}},"77":{"start":{"line":228,"column":4},"end":{"line":228,"column":11}},"78":{"start":{"line":230,"column":4},"end":{"line":230,"column":23}},"79":{"start":{"line":232,"column":4},"end":{"line":232,"column":28}},"80":{"start":{"line":235,"column":4},"end":{"line":241,"column":5}},"81":{"start":{"line":237,"column":6},"end":{"line":237,"column":15}},"82":{"start":{"line":239,"column":6},"end":{"line":239,"column":43}},"83":{"start":{"line":240,"column":6},"end":{"line":240,"column":48}},"84":{"start":{"line":244,"column":4},"end":{"line":244,"column":35}},"85":{"start":{"line":246,"column":4},"end":{"line":249,"column":5}},"86":{"start":{"line":248,"column":6},"end":{"line":248,"column":40}},"87":{"start":{"line":250,"column":4},"end":{"line":250,"column":13}},"88":{"start":{"line":261,"column":2},"end":{"line":268,"column":4}},"89":{"start":{"line":263,"column":4},"end":{"line":266,"column":5}},"90":{"start":{"line":265,"column":8},"end":{"line":265,"column":48}},"91":{"start":{"line":267,"column":4},"end":{"line":267,"column":39}},"92":{"start":{"line":278,"column":2},"end":{"line":328,"column":4}},"93":{"start":{"line":280,"column":4},"end":{"line":280,"column":24}},"94":{"start":{"line":281,"column":4},"end":{"line":281,"column":24}},"95":{"start":{"line":282,"column":4},"end":{"line":282,"column":26}},"96":{"start":{"line":284,"column":4},"end":{"line":284,"column":24}},"97":{"start":{"line":285,"column":4},"end":{"line":285,"column":24}},"98":{"start":{"line":286,"column":4},"end":{"line":286,"column":26}},"99":{"start":{"line":288,"column":4},"end":{"line":288,"column":27}},"100":{"start":{"line":289,"column":4},"end":{"line":289,"column":28}},"101":{"start":{"line":292,"column":4},"end":{"line":292,"column":11}},"102":{"start":{"line":294,"column":4},"end":{"line":294,"column":23}},"103":{"start":{"line":296,"column":4},"end":{"line":296,"column":28}},"104":{"start":{"line":299,"column":4},"end":{"line":305,"column":5}},"105":{"start":{"line":301,"column":6},"end":{"line":301,"column":15}},"106":{"start":{"line":303,"column":6},"end":{"line":303,"column":43}},"107":{"start":{"line":304,"column":6},"end":{"line":304,"column":48}},"108":{"start":{"line":308,"column":4},"end":{"line":308,"column":15}},"109":{"start":{"line":311,"column":4},"end":{"line":320,"column":5}},"110":{"start":{"line":313,"column":6},"end":{"line":313,"column":42}},"111":{"start":{"line":315,"column":6},"end":{"line":318,"column":7}},"112":{"start":{"line":317,"column":8},"end":{"line":317,"column":49}},"113":{"start":{"line":319,"column":6},"end":{"line":319,"column":17}},"114":{"start":{"line":323,"column":4},"end":{"line":327,"column":7}},"115":{"start":{"line":338,"column":2},"end":{"line":346,"column":4}},"116":{"start":{"line":340,"column":4},"end":{"line":345,"column":5}},"117":{"start":{"line":342,"column":8},"end":{"line":342,"column":48}},"118":{"start":{"line":344,"column":8},"end":{"line":344,"column":49}},"119":{"start":{"line":356,"column":2},"end":{"line":378,"column":4}},"120":{"start":{"line":358,"column":4},"end":{"line":377,"column":5}},"121":{"start":{"line":361,"column":8},"end":{"line":366,"column":9}},"122":{"start":{"line":363,"column":12},"end":{"line":363,"column":57}},"123":{"start":{"line":365,"column":12},"end":{"line":365,"column":58}},"124":{"start":{"line":367,"column":8},"end":{"line":367,"column":14}},"125":{"start":{"line":370,"column":8},"end":{"line":375,"column":9}},"126":{"start":{"line":372,"column":12},"end":{"line":372,"column":58}},"127":{"start":{"line":374,"column":12},"end":{"line":374,"column":59}},"128":{"start":{"line":376,"column":8},"end":{"line":376,"column":14}},"129":{"start":{"line":388,"column":2},"end":{"line":439,"column":4}},"130":{"start":{"line":390,"column":4},"end":{"line":390,"column":24}},"131":{"start":{"line":391,"column":4},"end":{"line":391,"column":24}},"132":{"start":{"line":392,"column":4},"end":{"line":392,"column":26}},"133":{"start":{"line":394,"column":4},"end":{"line":394,"column":24}},"134":{"start":{"line":395,"column":4},"end":{"line":395,"column":26}},"135":{"start":{"line":397,"column":4},"end":{"line":397,"column":25}},"136":{"start":{"line":398,"column":4},"end":{"line":398,"column":28}},"137":{"start":{"line":401,"column":4},"end":{"line":401,"column":11}},"138":{"start":{"line":403,"column":4},"end":{"line":403,"column":23}},"139":{"start":{"line":405,"column":4},"end":{"line":405,"column":28}},"140":{"start":{"line":408,"column":4},"end":{"line":414,"column":5}},"141":{"start":{"line":410,"column":6},"end":{"line":410,"column":15}},"142":{"start":{"line":412,"column":6},"end":{"line":412,"column":43}},"143":{"start":{"line":413,"column":6},"end":{"line":413,"column":48}},"144":{"start":{"line":417,"column":4},"end":{"line":417,"column":15}},"145":{"start":{"line":420,"column":4},"end":{"line":431,"column":5}},"146":{"start":{"line":422,"column":6},"end":{"line":422,"column":25}},"147":{"start":{"line":424,"column":6},"end":{"line":424,"column":37}},"148":{"start":{"line":426,"column":6},"end":{"line":429,"column":7}},"149":{"start":{"line":428,"column":8},"end":{"line":428,"column":44}},"150":{"start":{"line":430,"column":6},"end":{"line":430,"column":17}},"151":{"start":{"line":434,"column":4},"end":{"line":438,"column":7}},"152":{"start":{"line":449,"column":2},"end":{"line":507,"column":4}},"153":{"start":{"line":451,"column":4},"end":{"line":451,"column":24}},"154":{"start":{"line":452,"column":4},"end":{"line":452,"column":24}},"155":{"start":{"line":453,"column":4},"end":{"line":453,"column":26}},"156":{"start":{"line":455,"column":4},"end":{"line":455,"column":24}},"157":{"start":{"line":456,"column":4},"end":{"line":456,"column":24}},"158":{"start":{"line":457,"column":4},"end":{"line":457,"column":26}},"159":{"start":{"line":459,"column":4},"end":{"line":459,"column":25}},"160":{"start":{"line":460,"column":4},"end":{"line":460,"column":28}},"161":{"start":{"line":461,"column":4},"end":{"line":461,"column":28}},"162":{"start":{"line":464,"column":4},"end":{"line":464,"column":11}},"163":{"start":{"line":466,"column":4},"end":{"line":466,"column":23}},"164":{"start":{"line":468,"column":4},"end":{"line":468,"column":28}},"165":{"start":{"line":471,"column":4},"end":{"line":477,"column":5}},"166":{"start":{"line":473,"column":6},"end":{"line":473,"column":15}},"167":{"start":{"line":475,"column":6},"end":{"line":475,"column":43}},"168":{"start":{"line":476,"column":6},"end":{"line":476,"column":48}},"169":{"start":{"line":480,"column":4},"end":{"line":480,"column":15}},"170":{"start":{"line":483,"column":4},"end":{"line":499,"column":5}},"171":{"start":{"line":485,"column":6},"end":{"line":485,"column":25}},"172":{"start":{"line":487,"column":6},"end":{"line":487,"column":16}},"173":{"start":{"line":489,"column":6},"end":{"line":498,"column":7}},"174":{"start":{"line":491,"column":8},"end":{"line":491,"column":42}},"175":{"start":{"line":493,"column":8},"end":{"line":496,"column":9}},"176":{"start":{"line":495,"column":10},"end":{"line":495,"column":49}},"177":{"start":{"line":497,"column":8},"end":{"line":497,"column":22}},"178":{"start":{"line":502,"column":4},"end":{"line":506,"column":7}},"179":{"start":{"line":517,"column":2},"end":{"line":618,"column":4}},"180":{"start":{"line":519,"column":4},"end":{"line":519,"column":24}},"181":{"start":{"line":520,"column":4},"end":{"line":520,"column":24}},"182":{"start":{"line":521,"column":4},"end":{"line":521,"column":26}},"183":{"start":{"line":523,"column":4},"end":{"line":523,"column":28}},"184":{"start":{"line":524,"column":4},"end":{"line":524,"column":26}},"185":{"start":{"line":525,"column":4},"end":{"line":525,"column":22}},"186":{"start":{"line":526,"column":4},"end":{"line":526,"column":24}},"187":{"start":{"line":527,"column":4},"end":{"line":527,"column":26}},"188":{"start":{"line":529,"column":4},"end":{"line":530,"column":80}},"189":{"start":{"line":530,"column":6},"end":{"line":530,"column":80}},"190":{"start":{"line":532,"column":4},"end":{"line":532,"column":25}},"191":{"start":{"line":533,"column":4},"end":{"line":533,"column":28}},"192":{"start":{"line":536,"column":4},"end":{"line":536,"column":11}},"193":{"start":{"line":538,"column":4},"end":{"line":538,"column":23}},"194":{"start":{"line":540,"column":4},"end":{"line":540,"column":28}},"195":{"start":{"line":542,"column":4},"end":{"line":542,"column":25}},"196":{"start":{"line":544,"column":4},"end":{"line":544,"column":17}},"197":{"start":{"line":547,"column":4},"end":{"line":556,"column":5}},"198":{"start":{"line":549,"column":6},"end":{"line":549,"column":15}},"199":{"start":{"line":551,"column":6},"end":{"line":551,"column":43}},"200":{"start":{"line":552,"column":6},"end":{"line":552,"column":48}},"201":{"start":{"line":553,"column":6},"end":{"line":553,"column":45}},"202":{"start":{"line":555,"column":6},"end":{"line":555,"column":34}},"203":{"start":{"line":559,"column":4},"end":{"line":559,"column":21}},"204":{"start":{"line":560,"column":4},"end":{"line":560,"column":20}},"205":{"start":{"line":561,"column":4},"end":{"line":561,"column":18}},"206":{"start":{"line":563,"column":4},"end":{"line":569,"column":7}},"207":{"start":{"line":572,"column":4},"end":{"line":612,"column":5}},"208":{"start":{"line":574,"column":6},"end":{"line":574,"column":31}},"209":{"start":{"line":576,"column":6},"end":{"line":576,"column":25}},"210":{"start":{"line":577,"column":6},"end":{"line":577,"column":29}},"211":{"start":{"line":579,"column":6},"end":{"line":611,"column":7}},"212":{"start":{"line":581,"column":8},"end":{"line":581,"column":21}},"213":{"start":{"line":583,"column":8},"end":{"line":610,"column":9}},"214":{"start":{"line":585,"column":10},"end":{"line":585,"column":27}},"215":{"start":{"line":587,"column":10},"end":{"line":587,"column":18}},"216":{"start":{"line":589,"column":10},"end":{"line":603,"column":11}},"217":{"start":{"line":591,"column":12},"end":{"line":591,"column":32}},"218":{"start":{"line":593,"column":12},"end":{"line":602,"column":13}},"219":{"start":{"line":595,"column":14},"end":{"line":595,"column":50}},"220":{"start":{"line":597,"column":14},"end":{"line":597,"column":26}},"221":{"start":{"line":601,"column":14},"end":{"line":601,"column":59}},"222":{"start":{"line":605,"column":10},"end":{"line":609,"column":11}},"223":{"start":{"line":607,"column":12},"end":{"line":607,"column":27}},"224":{"start":{"line":608,"column":12},"end":{"line":608,"column":30}},"225":{"start":{"line":614,"column":4},"end":{"line":614,"column":35}},"226":{"start":{"line":617,"column":4},"end":{"line":617,"column":13}},"227":{"start":{"line":628,"column":2},"end":{"line":722,"column":4}},"228":{"start":{"line":630,"column":4},"end":{"line":630,"column":28}},"229":{"start":{"line":631,"column":4},"end":{"line":631,"column":26}},"230":{"start":{"line":632,"column":4},"end":{"line":632,"column":22}},"231":{"start":{"line":633,"column":4},"end":{"line":633,"column":26}},"232":{"start":{"line":635,"column":4},"end":{"line":636,"column":80}},"233":{"start":{"line":636,"column":6},"end":{"line":636,"column":80}},"234":{"start":{"line":638,"column":4},"end":{"line":638,"column":24}},"235":{"start":{"line":639,"column":4},"end":{"line":639,"column":26}},"236":{"start":{"line":641,"column":4},"end":{"line":641,"column":27}},"237":{"start":{"line":642,"column":4},"end":{"line":642,"column":27}},"238":{"start":{"line":644,"column":4},"end":{"line":644,"column":21}},"239":{"start":{"line":645,"column":4},"end":{"line":645,"column":20}},"240":{"start":{"line":646,"column":4},"end":{"line":646,"column":18}},"241":{"start":{"line":649,"column":4},"end":{"line":649,"column":11}},"242":{"start":{"line":651,"column":4},"end":{"line":651,"column":23}},"243":{"start":{"line":653,"column":4},"end":{"line":653,"column":28}},"244":{"start":{"line":655,"column":4},"end":{"line":655,"column":25}},"245":{"start":{"line":657,"column":4},"end":{"line":657,"column":17}},"246":{"start":{"line":660,"column":4},"end":{"line":669,"column":5}},"247":{"start":{"line":662,"column":6},"end":{"line":662,"column":15}},"248":{"start":{"line":664,"column":6},"end":{"line":664,"column":43}},"249":{"start":{"line":665,"column":6},"end":{"line":665,"column":48}},"250":{"start":{"line":666,"column":6},"end":{"line":666,"column":45}},"251":{"start":{"line":668,"column":6},"end":{"line":668,"column":34}},"252":{"start":{"line":672,"column":4},"end":{"line":672,"column":15}},"253":{"start":{"line":674,"column":4},"end":{"line":674,"column":15}},"254":{"start":{"line":677,"column":4},"end":{"line":677,"column":16}},"255":{"start":{"line":679,"column":4},"end":{"line":703,"column":5}},"256":{"start":{"line":681,"column":6},"end":{"line":681,"column":26}},"257":{"start":{"line":683,"column":6},"end":{"line":702,"column":7}},"258":{"start":{"line":685,"column":8},"end":{"line":701,"column":9}},"259":{"start":{"line":687,"column":10},"end":{"line":687,"column":30}},"260":{"start":{"line":689,"column":10},"end":{"line":700,"column":11}},"261":{"start":{"line":691,"column":12},"end":{"line":691,"column":25}},"262":{"start":{"line":693,"column":12},"end":{"line":693,"column":28}},"263":{"start":{"line":695,"column":12},"end":{"line":695,"column":41}},"264":{"start":{"line":699,"column":12},"end":{"line":699,"column":52}},"265":{"start":{"line":705,"column":4},"end":{"line":710,"column":5}},"266":{"start":{"line":707,"column":6},"end":{"line":707,"column":25}},"267":{"start":{"line":709,"column":6},"end":{"line":709,"column":25}},"268":{"start":{"line":712,"column":4},"end":{"line":712,"column":28}},"269":{"start":{"line":715,"column":4},"end":{"line":721,"column":7}},"270":{"start":{"line":732,"column":2},"end":{"line":835,"column":4}},"271":{"start":{"line":734,"column":4},"end":{"line":734,"column":28}},"272":{"start":{"line":735,"column":4},"end":{"line":735,"column":26}},"273":{"start":{"line":736,"column":4},"end":{"line":736,"column":22}},"274":{"start":{"line":737,"column":4},"end":{"line":737,"column":26}},"275":{"start":{"line":739,"column":4},"end":{"line":740,"column":80}},"276":{"start":{"line":740,"column":6},"end":{"line":740,"column":80}},"277":{"start":{"line":742,"column":4},"end":{"line":742,"column":24}},"278":{"start":{"line":743,"column":4},"end":{"line":743,"column":26}},"279":{"start":{"line":745,"column":4},"end":{"line":745,"column":27}},"280":{"start":{"line":746,"column":4},"end":{"line":746,"column":27}},"281":{"start":{"line":747,"column":4},"end":{"line":747,"column":30}},"282":{"start":{"line":750,"column":4},"end":{"line":750,"column":11}},"283":{"start":{"line":752,"column":4},"end":{"line":752,"column":23}},"284":{"start":{"line":754,"column":4},"end":{"line":754,"column":28}},"285":{"start":{"line":756,"column":4},"end":{"line":756,"column":25}},"286":{"start":{"line":758,"column":4},"end":{"line":758,"column":17}},"287":{"start":{"line":761,"column":4},"end":{"line":770,"column":5}},"288":{"start":{"line":763,"column":6},"end":{"line":763,"column":15}},"289":{"start":{"line":765,"column":6},"end":{"line":765,"column":43}},"290":{"start":{"line":766,"column":6},"end":{"line":766,"column":48}},"291":{"start":{"line":767,"column":6},"end":{"line":767,"column":45}},"292":{"start":{"line":769,"column":6},"end":{"line":769,"column":34}},"293":{"start":{"line":773,"column":4},"end":{"line":773,"column":21}},"294":{"start":{"line":774,"column":4},"end":{"line":774,"column":20}},"295":{"start":{"line":775,"column":4},"end":{"line":775,"column":18}},"296":{"start":{"line":777,"column":4},"end":{"line":783,"column":7}},"297":{"start":{"line":786,"column":4},"end":{"line":786,"column":15}},"298":{"start":{"line":788,"column":4},"end":{"line":788,"column":15}},"299":{"start":{"line":791,"column":4},"end":{"line":829,"column":5}},"300":{"start":{"line":793,"column":6},"end":{"line":793,"column":31}},"301":{"start":{"line":795,"column":6},"end":{"line":795,"column":24}},"302":{"start":{"line":797,"column":6},"end":{"line":821,"column":7}},"303":{"start":{"line":799,"column":8},"end":{"line":799,"column":33}},"304":{"start":{"line":801,"column":8},"end":{"line":820,"column":9}},"305":{"start":{"line":803,"column":10},"end":{"line":819,"column":11}},"306":{"start":{"line":805,"column":12},"end":{"line":805,"column":32}},"307":{"start":{"line":807,"column":12},"end":{"line":818,"column":13}},"308":{"start":{"line":809,"column":14},"end":{"line":809,"column":27}},"309":{"start":{"line":811,"column":14},"end":{"line":811,"column":30}},"310":{"start":{"line":813,"column":14},"end":{"line":813,"column":44}},"311":{"start":{"line":817,"column":14},"end":{"line":817,"column":55}},"312":{"start":{"line":823,"column":6},"end":{"line":828,"column":7}},"313":{"start":{"line":825,"column":8},"end":{"line":825,"column":27}},"314":{"start":{"line":827,"column":8},"end":{"line":827,"column":27}},"315":{"start":{"line":831,"column":4},"end":{"line":831,"column":35}},"316":{"start":{"line":834,"column":4},"end":{"line":834,"column":13}},"317":{"start":{"line":845,"column":2},"end":{"line":960,"column":4}},"318":{"start":{"line":847,"column":4},"end":{"line":847,"column":28}},"319":{"start":{"line":848,"column":4},"end":{"line":848,"column":26}},"320":{"start":{"line":849,"column":4},"end":{"line":849,"column":22}},"321":{"start":{"line":850,"column":4},"end":{"line":850,"column":26}},"322":{"start":{"line":852,"column":4},"end":{"line":852,"column":28}},"323":{"start":{"line":853,"column":4},"end":{"line":853,"column":26}},"324":{"start":{"line":854,"column":4},"end":{"line":854,"column":22}},"325":{"start":{"line":855,"column":4},"end":{"line":855,"column":26}},"326":{"start":{"line":858,"column":4},"end":{"line":858,"column":27}},"327":{"start":{"line":859,"column":4},"end":{"line":859,"column":30}},"328":{"start":{"line":861,"column":4},"end":{"line":861,"column":36}},"329":{"start":{"line":864,"column":4},"end":{"line":864,"column":11}},"330":{"start":{"line":866,"column":4},"end":{"line":866,"column":23}},"331":{"start":{"line":868,"column":4},"end":{"line":868,"column":28}},"332":{"start":{"line":871,"column":4},"end":{"line":877,"column":5}},"333":{"start":{"line":873,"column":6},"end":{"line":873,"column":15}},"334":{"start":{"line":875,"column":6},"end":{"line":875,"column":43}},"335":{"start":{"line":876,"column":6},"end":{"line":876,"column":48}},"336":{"start":{"line":880,"column":4},"end":{"line":880,"column":42}},"337":{"start":{"line":881,"column":4},"end":{"line":881,"column":20}},"338":{"start":{"line":882,"column":4},"end":{"line":882,"column":18}},"339":{"start":{"line":884,"column":4},"end":{"line":890,"column":7}},"340":{"start":{"line":893,"column":4},"end":{"line":893,"column":36}},"341":{"start":{"line":895,"column":4},"end":{"line":895,"column":15}},"342":{"start":{"line":897,"column":4},"end":{"line":897,"column":43}},"343":{"start":{"line":899,"column":4},"end":{"line":954,"column":5}},"344":{"start":{"line":901,"column":6},"end":{"line":901,"column":31}},"345":{"start":{"line":903,"column":6},"end":{"line":903,"column":24}},"346":{"start":{"line":905,"column":6},"end":{"line":943,"column":7}},"347":{"start":{"line":907,"column":8},"end":{"line":907,"column":24}},"348":{"start":{"line":909,"column":8},"end":{"line":942,"column":9}},"349":{"start":{"line":911,"column":10},"end":{"line":927,"column":11}},"350":{"start":{"line":913,"column":12},"end":{"line":913,"column":28}},"351":{"start":{"line":915,"column":12},"end":{"line":926,"column":13}},"352":{"start":{"line":917,"column":14},"end":{"line":917,"column":27}},"353":{"start":{"line":919,"column":14},"end":{"line":919,"column":30}},"354":{"start":{"line":921,"column":14},"end":{"line":921,"column":51}},"355":{"start":{"line":925,"column":14},"end":{"line":925,"column":62}},"356":{"start":{"line":931,"column":10},"end":{"line":941,"column":11}},"357":{"start":{"line":933,"column":12},"end":{"line":933,"column":28}},"358":{"start":{"line":935,"column":12},"end":{"line":940,"column":13}},"359":{"start":{"line":937,"column":14},"end":{"line":937,"column":27}},"360":{"start":{"line":939,"column":14},"end":{"line":939,"column":30}},"361":{"start":{"line":945,"column":6},"end":{"line":953,"column":7}},"362":{"start":{"line":947,"column":8},"end":{"line":952,"column":9}},"363":{"start":{"line":949,"column":10},"end":{"line":949,"column":29}},"364":{"start":{"line":951,"column":10},"end":{"line":951,"column":29}},"365":{"start":{"line":956,"column":4},"end":{"line":956,"column":35}},"366":{"start":{"line":959,"column":4},"end":{"line":959,"column":13}},"367":{"start":{"line":962,"column":2},"end":{"line":964,"column":4}},"368":{"start":{"line":966,"column":2},"end":{"line":966,"column":18}},"369":{"start":{"line":969,"column":0},"end":{"line":969,"column":26}},"370":{"start":{"line":970,"column":0},"end":{"line":970,"column":26}}},"branchMap":{"1":{"line":63,"type":"cond-expr","locations":[{"start":{"line":63,"column":42},"end":{"line":63,"column":53}},{"start":{"line":63,"column":56},"end":{"line":63,"column":57}}]},"2":{"line":63,"type":"binary-expr","locations":[{"start":{"line":63,"column":14},"end":{"line":63,"column":15}},{"start":{"line":63,"column":19},"end":{"line":63,"column":38}}]},"3":{"line":75,"type":"if","locations":[{"start":{"line":75,"column":6},"end":{"line":75,"column":6}},{"start":{"line":75,"column":6},"end":{"line":75,"column":6}}]},"4":{"line":77,"type":"if","locations":[{"start":{"line":77,"column":8},"end":{"line":77,"column":8}},{"start":{"line":77,"column":8},"end":{"line":77,"column":8}}]},"5":{"line":85,"type":"if","locations":[{"start":{"line":85,"column":6},"end":{"line":85,"column":6}},{"start":{"line":85,"column":6},"end":{"line":85,"column":6}}]},"6":{"line":108,"type":"switch","locations":[{"start":{"line":109,"column":8},"end":{"line":111,"column":16}},{"start":{"line":112,"column":8},"end":{"line":114,"column":16}}]},"7":{"line":123,"type":"switch","locations":[{"start":{"line":124,"column":8},"end":{"line":126,"column":16}},{"start":{"line":127,"column":8},"end":{"line":129,"column":16}}]},"8":{"line":159,"type":"switch","locations":[{"start":{"line":160,"column":6},"end":{"line":180,"column":14}},{"start":{"line":181,"column":6},"end":{"line":201,"column":14}},{"start":{"line":202,"column":6},"end":{"line":203,"column":120}}]},"9":{"line":162,"type":"switch","locations":[{"start":{"line":163,"column":10},"end":{"line":169,"column":18}},{"start":{"line":170,"column":10},"end":{"line":176,"column":18}},{"start":{"line":177,"column":10},"end":{"line":178,"column":124}}]},"10":{"line":165,"type":"if","locations":[{"start":{"line":165,"column":12},"end":{"line":165,"column":12}},{"start":{"line":165,"column":12},"end":{"line":165,"column":12}}]},"11":{"line":172,"type":"if","locations":[{"start":{"line":172,"column":12},"end":{"line":172,"column":12}},{"start":{"line":172,"column":12},"end":{"line":172,"column":12}}]},"12":{"line":183,"type":"switch","locations":[{"start":{"line":184,"column":10},"end":{"line":190,"column":18}},{"start":{"line":191,"column":10},"end":{"line":197,"column":18}},{"start":{"line":198,"column":10},"end":{"line":199,"column":124}}]},"13":{"line":186,"type":"if","locations":[{"start":{"line":186,"column":12},"end":{"line":186,"column":12}},{"start":{"line":186,"column":12},"end":{"line":186,"column":12}}]},"14":{"line":193,"type":"if","locations":[{"start":{"line":193,"column":12},"end":{"line":193,"column":12}},{"start":{"line":193,"column":12},"end":{"line":193,"column":12}}]},"15":{"line":217,"type":"if","locations":[{"start":{"line":217,"column":4},"end":{"line":217,"column":4}},{"start":{"line":217,"column":4},"end":{"line":217,"column":4}}]},"16":{"line":235,"type":"if","locations":[{"start":{"line":235,"column":4},"end":{"line":235,"column":4}},{"start":{"line":235,"column":4},"end":{"line":235,"column":4}}]},"17":{"line":235,"type":"binary-expr","locations":[{"start":{"line":235,"column":8},"end":{"line":235,"column":11}},{"start":{"line":235,"column":15},"end":{"line":235,"column":18}},{"start":{"line":235,"column":22},"end":{"line":235,"column":33}},{"start":{"line":235,"column":37},"end":{"line":235,"column":60}}]},"18":{"line":263,"type":"switch","locations":[{"start":{"line":264,"column":6},"end":{"line":265,"column":48}}]},"19":{"line":299,"type":"if","locations":[{"start":{"line":299,"column":4},"end":{"line":299,"column":4}},{"start":{"line":299,"column":4},"end":{"line":299,"column":4}}]},"20":{"line":299,"type":"binary-expr","locations":[{"start":{"line":299,"column":8},"end":{"line":299,"column":11}},{"start":{"line":299,"column":15},"end":{"line":299,"column":18}},{"start":{"line":299,"column":22},"end":{"line":299,"column":33}},{"start":{"line":299,"column":37},"end":{"line":299,"column":60}}]},"21":{"line":340,"type":"switch","locations":[{"start":{"line":341,"column":6},"end":{"line":342,"column":48}},{"start":{"line":343,"column":6},"end":{"line":344,"column":49}}]},"22":{"line":358,"type":"switch","locations":[{"start":{"line":359,"column":6},"end":{"line":367,"column":14}},{"start":{"line":368,"column":6},"end":{"line":376,"column":14}}]},"23":{"line":361,"type":"switch","locations":[{"start":{"line":362,"column":10},"end":{"line":363,"column":57}},{"start":{"line":364,"column":10},"end":{"line":365,"column":58}}]},"24":{"line":370,"type":"switch","locations":[{"start":{"line":371,"column":10},"end":{"line":372,"column":58}},{"start":{"line":373,"column":10},"end":{"line":374,"column":59}}]},"25":{"line":408,"type":"if","locations":[{"start":{"line":408,"column":4},"end":{"line":408,"column":4}},{"start":{"line":408,"column":4},"end":{"line":408,"column":4}}]},"26":{"line":408,"type":"binary-expr","locations":[{"start":{"line":408,"column":8},"end":{"line":408,"column":11}},{"start":{"line":408,"column":15},"end":{"line":408,"column":18}},{"start":{"line":408,"column":22},"end":{"line":408,"column":33}},{"start":{"line":408,"column":37},"end":{"line":408,"column":60}}]},"27":{"line":471,"type":"if","locations":[{"start":{"line":471,"column":4},"end":{"line":471,"column":4}},{"start":{"line":471,"column":4},"end":{"line":471,"column":4}}]},"28":{"line":471,"type":"binary-expr","locations":[{"start":{"line":471,"column":8},"end":{"line":471,"column":11}},{"start":{"line":471,"column":15},"end":{"line":471,"column":18}},{"start":{"line":471,"column":22},"end":{"line":471,"column":33}},{"start":{"line":471,"column":37},"end":{"line":471,"column":60}}]},"29":{"line":529,"type":"if","locations":[{"start":{"line":529,"column":4},"end":{"line":529,"column":4}},{"start":{"line":529,"column":4},"end":{"line":529,"column":4}}]},"30":{"line":547,"type":"if","locations":[{"start":{"line":547,"column":4},"end":{"line":547,"column":4}},{"start":{"line":547,"column":4},"end":{"line":547,"column":4}}]},"31":{"line":547,"type":"binary-expr","locations":[{"start":{"line":547,"column":8},"end":{"line":547,"column":11}},{"start":{"line":547,"column":15},"end":{"line":547,"column":18}},{"start":{"line":547,"column":22},"end":{"line":547,"column":33}},{"start":{"line":547,"column":37},"end":{"line":547,"column":60}}]},"32":{"line":579,"type":"if","locations":[{"start":{"line":579,"column":6},"end":{"line":579,"column":6}},{"start":{"line":579,"column":6},"end":{"line":579,"column":6}}]},"33":{"line":593,"type":"if","locations":[{"start":{"line":593,"column":12},"end":{"line":593,"column":12}},{"start":{"line":593,"column":12},"end":{"line":593,"column":12}}]},"34":{"line":605,"type":"if","locations":[{"start":{"line":605,"column":10},"end":{"line":605,"column":10}},{"start":{"line":605,"column":10},"end":{"line":605,"column":10}}]},"35":{"line":605,"type":"binary-expr","locations":[{"start":{"line":605,"column":14},"end":{"line":605,"column":27}},{"start":{"line":605,"column":31},"end":{"line":605,"column":45}}]},"36":{"line":635,"type":"if","locations":[{"start":{"line":635,"column":4},"end":{"line":635,"column":4}},{"start":{"line":635,"column":4},"end":{"line":635,"column":4}}]},"37":{"line":660,"type":"if","locations":[{"start":{"line":660,"column":4},"end":{"line":660,"column":4}},{"start":{"line":660,"column":4},"end":{"line":660,"column":4}}]},"38":{"line":660,"type":"binary-expr","locations":[{"start":{"line":660,"column":8},"end":{"line":660,"column":11}},{"start":{"line":660,"column":15},"end":{"line":660,"column":18}},{"start":{"line":660,"column":22},"end":{"line":660,"column":33}},{"start":{"line":660,"column":37},"end":{"line":660,"column":60}}]},"39":{"line":683,"type":"if","locations":[{"start":{"line":683,"column":6},"end":{"line":683,"column":6}},{"start":{"line":683,"column":6},"end":{"line":683,"column":6}}]},"40":{"line":689,"type":"if","locations":[{"start":{"line":689,"column":10},"end":{"line":689,"column":10}},{"start":{"line":689,"column":10},"end":{"line":689,"column":10}}]},"41":{"line":739,"type":"if","locations":[{"start":{"line":739,"column":4},"end":{"line":739,"column":4}},{"start":{"line":739,"column":4},"end":{"line":739,"column":4}}]},"42":{"line":761,"type":"if","locations":[{"start":{"line":761,"column":4},"end":{"line":761,"column":4}},{"start":{"line":761,"column":4},"end":{"line":761,"column":4}}]},"43":{"line":761,"type":"binary-expr","locations":[{"start":{"line":761,"column":8},"end":{"line":761,"column":11}},{"start":{"line":761,"column":15},"end":{"line":761,"column":18}},{"start":{"line":761,"column":22},"end":{"line":761,"column":33}},{"start":{"line":761,"column":37},"end":{"line":761,"column":60}}]},"44":{"line":801,"type":"if","locations":[{"start":{"line":801,"column":8},"end":{"line":801,"column":8}},{"start":{"line":801,"column":8},"end":{"line":801,"column":8}}]},"45":{"line":807,"type":"if","locations":[{"start":{"line":807,"column":12},"end":{"line":807,"column":12}},{"start":{"line":807,"column":12},"end":{"line":807,"column":12}}]},"46":{"line":861,"type":"binary-expr","locations":[{"start":{"line":861,"column":17},"end":{"line":861,"column":24}},{"start":{"line":861,"column":28},"end":{"line":861,"column":35}}]},"47":{"line":871,"type":"if","locations":[{"start":{"line":871,"column":4},"end":{"line":871,"column":4}},{"start":{"line":871,"column":4},"end":{"line":871,"column":4}}]},"48":{"line":871,"type":"binary-expr","locations":[{"start":{"line":871,"column":8},"end":{"line":871,"column":11}},{"start":{"line":871,"column":15},"end":{"line":871,"column":18}},{"start":{"line":871,"column":22},"end":{"line":871,"column":33}},{"start":{"line":871,"column":37},"end":{"line":871,"column":60}}]},"49":{"line":880,"type":"cond-expr","locations":[{"start":{"line":880,"column":27},"end":{"line":880,"column":29}},{"start":{"line":880,"column":32},"end":{"line":880,"column":41}}]},"50":{"line":893,"type":"cond-expr","locations":[{"start":{"line":893,"column":21},"end":{"line":893,"column":23}},{"start":{"line":893,"column":26},"end":{"line":893,"column":35}}]},"51":{"line":909,"type":"if","locations":[{"start":{"line":909,"column":8},"end":{"line":909,"column":8}},{"start":{"line":909,"column":8},"end":{"line":909,"column":8}}]},"52":{"line":915,"type":"if","locations":[{"start":{"line":915,"column":12},"end":{"line":915,"column":12}},{"start":{"line":915,"column":12},"end":{"line":915,"column":12}}]},"53":{"line":935,"type":"if","locations":[{"start":{"line":935,"column":12},"end":{"line":935,"column":12}},{"start":{"line":935,"column":12},"end":{"line":935,"column":12}}]},"54":{"line":945,"type":"if","locations":[{"start":{"line":945,"column":6},"end":{"line":945,"column":6}},{"start":{"line":945,"column":6},"end":{"line":945,"column":6}}]}},"code":["'use strict';","","var extend = require('../../utils/object').extend;","var array = require('../../utils/array');","","function factory (type, config, load, typed) {","  var latex = require('../../utils/latex');","","  var matrix = load(require('../../type/matrix/function/matrix'));","  var addScalar = load(require('./addScalar'));","  var multiplyScalar = load(require('./multiplyScalar'));","  var equalScalar = load(require('../relational/equalScalar'));","","  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));","  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));","  ","  var DenseMatrix = type.DenseMatrix;","  var SparseMatrix = type.SparseMatrix;","","  /**","   * Multiply two or more values, `x * y`.","   * For matrices, the matrix product is calculated.","   *","   * Syntax:","   *","   *    math.multiply(x, y)","   *    math.multiply(x, y, z, ...)","   *","   * Examples:","   *","   *    math.multiply(4, 5.2);        // returns number 20.8","   *    math.multiply(2, 3, 4);       // returns number 24","   *","   *    var a = math.complex(2, 3);","   *    var b = math.complex(4, 1);","   *    math.multiply(a, b);          // returns Complex 5 + 14i","   *","   *    var c = [[1, 2], [4, 3]];","   *    var d = [[1, 2, 3], [3, -4, 7]];","   *    math.multiply(c, d);          // returns Array [[7, -6, 17], [13, -4, 33]]","   *","   *    var e = math.unit('2.1 km');","   *    math.multiply(3, e);          // returns Unit 6.3 km","   *","   * See also:","   *","   *    divide, prod, cross, dot","   *","   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to multiply","   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to multiply","   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Multiplication of `x` and `y`","   */","  var multiply = typed('multiply', extend({","    // we extend the signatures of multiplyScalar with signatures dealing with matrices","","    'Array, Array': function (x, y) {","      // check dimensions","      _validateMatrixDimensions(array.size(x), array.size(y));","","      // use dense matrix implementation","      var m = multiply(matrix(x), matrix(y));","      // return array or scalar","      return (m && m.isMatrix === true) ? m.valueOf() : m;","    },","","    'Matrix, Matrix': function (x, y) {","      // dimensions","      var xsize = x.size();","      var ysize = y.size();","","      // check dimensions","      _validateMatrixDimensions(xsize, ysize);","","      // process dimensions","      if (xsize.length === 1) {","        // process y dimensions","        if (ysize.length === 1) {","          // Vector * Vector","          return _multiplyVectorVector(x, y, xsize[0]);","        }","        // Vector * Matrix","        return _multiplyVectorMatrix(x, y);","      }","      // process y dimensions","      if (ysize.length === 1) {","        // Matrix * Vector","        return _multiplyMatrixVector(x, y);","      }","      // Matrix * Matrix","      return _multiplyMatrixMatrix(x, y);","    },","","    'Matrix, Array': function (x, y) {","      // use Matrix * Matrix implementation","      return multiply(x, matrix(y));","    },","","    'Array, Matrix': function (x, y) {","      // use Matrix * Matrix implementation","      return multiply(matrix(x, y.storage()), y);","    },","","    'Matrix, any': function (x, y) {","      // result","      var c;","      ","      // process storage format","      switch (x.storage()) {","        case 'sparse':","          c = algorithm11(x, y, multiplyScalar, false);","          break;","        case 'dense':","          c = algorithm14(x, y, multiplyScalar, false);","          break;","      }","      return c;","    },","","    'any, Matrix': function (x, y) {","      // result","      var c;","      // check storage format","      switch (y.storage()) {","        case 'sparse':","          c = algorithm11(y, x, multiplyScalar, true);","          break;","        case 'dense':","          c = algorithm14(y, x, multiplyScalar, true);","          break;","      }","      return c;","    },","","    'Array, any': function (x, y) {","      // use matrix implementation","      return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();","    },","","    'any, Array': function (x, y) {","      // use matrix implementation","      return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();","    },","","    'any, any': multiplyScalar,","","    'any, any, ...any': function (x, y, rest) {","      var result = multiply(x, y);","","      for (var i = 0; i < rest.length; i++) {","        result = multiply(result, rest[i]);","      }","","      return result;","    }","  }, multiplyScalar.signatures));","","  var _validateMatrixDimensions = function (size1, size2) {","    // check left operand dimensions","    switch (size1.length) {","      case 1:","        // check size2","        switch (size2.length) {","          case 1:","            // Vector x Vector","            if (size1[0] !== size2[0]) {","              // throw error","              throw new RangeError('Dimension mismatch in multiplication. Vectors must have the same length');","            }","            break;","          case 2:","            // Vector x Matrix","            if (size1[0] !== size2[0]) {","              // throw error","              throw new RangeError('Dimension mismatch in multiplication. Vector length (' + size1[0] + ') must match Matrix rows (' + size2[0] + ')');","            }","            break;","          default:","            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');","        }","        break;","      case 2:","        // check size2","        switch (size2.length) {","          case 1:","            // Matrix x Vector","            if (size1[1] !== size2[0]) {","              // throw error","              throw new RangeError('Dimension mismatch in multiplication. Matrix columns (' + size1[1] + ') must match Vector length (' + size2[0] + ')');","            }","            break;","          case 2:","            // Matrix x Matrix","            if (size1[1] !== size2[0]) {","              // throw error","              throw new RangeError('Dimension mismatch in multiplication. Matrix A columns (' + size1[1] + ') must match Matrix B rows (' + size2[0] + ')');","            }","            break;","          default:","            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');","        }","        break;","      default:","        throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix A has ' + size1.length + ' dimensions)');","    }","  };","","  /**","   * C = A * B","   *","   * @param {Matrix} a            Dense Vector   (N)","   * @param {Matrix} b            Dense Vector   (N)","   *","   * @return {number}             Scalar value","   */","  var _multiplyVectorVector = function (a, b, n) {","    // check empty vector","    if (n === 0)","      throw new Error('Cannot multiply two empty vectors');","","    // a dense","    var adata = a._data;","    var adt = a._datatype;","    // b dense","    var bdata = b._data;","    var bdt = b._datatype;","","    // datatype","    var dt;","    // addScalar signature to use","    var af = addScalar;","    // multiplyScalar signature to use","    var mf = multiplyScalar;","","    // process data types","    if (adt && bdt && adt === bdt && typeof adt === 'string') {","      // datatype","      dt = adt;","      // find signatures that matches (dt, dt)","      af = typed.find(addScalar, [dt, dt]);","      mf = typed.find(multiplyScalar, [dt, dt]);","    }","    ","    // result (do not initialize it with zero)","    var c = mf(adata[0], bdata[0]);","    // loop data","    for (var i = 1; i < n; i++) {","      // multiply and accumulate","      c = af(c, mf(adata[i], bdata[i]));","    }","    return c;","  };","","  /**","   * C = A * B","   *","   * @param {Matrix} a            Dense Vector   (M)","   * @param {Matrix} b            Matrix         (MxN)","   *","   * @return {Matrix}             Dense Vector   (N)","   */","  var _multiplyVectorMatrix = function (a, b) {","    // process storage","    switch (b.storage()) {","      case 'dense':","        return _multiplyVectorDenseMatrix(a, b);","    }","    throw new Error('Not implemented');","  };","","  /**","   * C = A * B","   *","   * @param {Matrix} a            Dense Vector   (M)","   * @param {Matrix} b            Dense Matrix   (MxN)","   *","   * @return {Matrix}             Dense Vector   (N)","   */","  var _multiplyVectorDenseMatrix = function (a, b) {","    // a dense","    var adata = a._data;","    var asize = a._size;","    var adt = a._datatype;","    // b dense","    var bdata = b._data;","    var bsize = b._size;","    var bdt = b._datatype;","    // rows & columns","    var alength = asize[0];","    var bcolumns = bsize[1];","","    // datatype","    var dt;","    // addScalar signature to use","    var af = addScalar;","    // multiplyScalar signature to use","    var mf = multiplyScalar;","","    // process data types","    if (adt && bdt && adt === bdt && typeof adt === 'string') {","      // datatype","      dt = adt;","      // find signatures that matches (dt, dt)","      af = typed.find(addScalar, [dt, dt]);","      mf = typed.find(multiplyScalar, [dt, dt]);","    }","","    // result","    var c = [];","","    // loop matrix columns","    for (var j = 0; j < bcolumns; j++) {","      // sum (do not initialize it with zero)","      var sum = mf(adata[0], bdata[0][j]);      ","      // loop vector","      for (var i = 1; i < alength; i++) {","        // multiply & accumulate","        sum = af(sum, mf(adata[i], bdata[i][j]));","      }","      c[j] = sum;","    }","","    // return matrix","    return new DenseMatrix({","      data: c,","      size: [bcolumns],","      datatype: dt","    });","  };","","  /**","   * C = A * B","   *","   * @param {Matrix} a            Matrix         (MxN)","   * @param {Matrix} b            Dense Vector   (N)","   *","   * @return {Matrix}             Dense Vector   (M)","   */","  var _multiplyMatrixVector = function (a, b) {","    // process storage","    switch (a.storage()) {","      case 'dense':","        return _multiplyDenseMatrixVector(a, b);","      case 'sparse':","        return _multiplySparseMatrixVector(a, b);","    }","  };","","  /**","   * C = A * B","   *","   * @param {Matrix} a            Matrix         (MxN)","   * @param {Matrix} b            Matrix         (NxC)","   *","   * @return {Matrix}             Matrix         (MxC)","   */","  var _multiplyMatrixMatrix = function (a, b) {","    // process storage","    switch (a.storage()) {","      case 'dense':","        // process storage","        switch (b.storage()) {","          case 'dense':","            return _multiplyDenseMatrixDenseMatrix(a, b);","          case 'sparse':","            return _multiplyDenseMatrixSparseMatrix(a, b);","        }","        break;","      case 'sparse':","        // process storage","        switch (b.storage()) {","          case 'dense':","            return _multiplySparseMatrixDenseMatrix(a, b);","          case 'sparse':","            return _multiplySparseMatrixSparseMatrix(a, b);","        }","        break;","    }","  };","","  /**","   * C = A * B","   *","   * @param {Matrix} a            DenseMatrix  (MxN)","   * @param {Matrix} b            Dense Vector (N)","   *","   * @return {Matrix}             Dense Vector (M) ","   */ ","  var _multiplyDenseMatrixVector = function (a, b) {","    // a dense","    var adata = a._data;","    var asize = a._size;","    var adt = a._datatype;","    // b dense","    var bdata = b._data;","    var bdt = b._datatype;","    // rows & columns","    var arows = asize[0];","    var acolumns = asize[1];","","    // datatype","    var dt;","    // addScalar signature to use","    var af = addScalar;","    // multiplyScalar signature to use","    var mf = multiplyScalar;","","    // process data types","    if (adt && bdt && adt === bdt && typeof adt === 'string') {","      // datatype","      dt = adt;","      // find signatures that matches (dt, dt)","      af = typed.find(addScalar, [dt, dt]);","      mf = typed.find(multiplyScalar, [dt, dt]);","    }","","    // result","    var c = [];","","    // loop matrix a rows","    for (var i = 0; i < arows; i++) {","      // current row","      var row = adata[i];","      // sum (do not initialize it with zero)","      var sum = mf(row[0], bdata[0]);","      // loop matrix a columns","      for (var j = 1; j < acolumns; j++) {","        // multiply & accumulate","        sum = af(sum, mf(row[j], bdata[j]));","      }","      c[i] = sum;","    }","","    // return matrix","    return new DenseMatrix({","      data: c,","      size: [arows],","      datatype: dt","    });","  };","","  /**","   * C = A * B","   *","   * @param {Matrix} a            DenseMatrix    (MxN)","   * @param {Matrix} b            DenseMatrix    (NxC)","   *","   * @return {Matrix}             DenseMatrix    (MxC)","   */","  var _multiplyDenseMatrixDenseMatrix = function (a, b) {","    // a dense","    var adata = a._data;","    var asize = a._size;","    var adt = a._datatype;","    // b dense","    var bdata = b._data;","    var bsize = b._size;","    var bdt = b._datatype;","    // rows & columns","    var arows = asize[0];","    var acolumns = asize[1];","    var bcolumns = bsize[1];","","    // datatype","    var dt;","    // addScalar signature to use","    var af = addScalar;","    // multiplyScalar signature to use","    var mf = multiplyScalar;","","    // process data types","    if (adt && bdt && adt === bdt && typeof adt === 'string') {","      // datatype","      dt = adt;","      // find signatures that matches (dt, dt)","      af = typed.find(addScalar, [dt, dt]);","      mf = typed.find(multiplyScalar, [dt, dt]);","    }","    ","    // result","    var c = [];","","    // loop matrix a rows","    for (var i = 0; i < arows; i++) {","      // current row","      var row = adata[i];","      // initialize row array","      c[i] = [];","      // loop matrix b columns","      for (var j = 0; j < bcolumns; j++) {","        // sum (avoid initializing sum to zero)","        var sum = mf(row[0], bdata[0][j]);","        // loop matrix a columns","        for (var x = 1; x < acolumns; x++) {","          // multiply & accumulate","          sum = af(sum, mf(row[x], bdata[x][j]));","        }","        c[i][j] = sum;","      }","    }","","    // return matrix","    return new DenseMatrix({","      data: c,","      size: [arows, bcolumns],","      datatype: dt","    });","  };","","  /**","   * C = A * B","   *","   * @param {Matrix} a            DenseMatrix    (MxN)","   * @param {Matrix} b            SparseMatrix   (NxC)","   *","   * @return {Matrix}             SparseMatrix   (MxC)","   */","  var _multiplyDenseMatrixSparseMatrix = function (a, b) {","    // a dense","    var adata = a._data;","    var asize = a._size;","    var adt = a._datatype;","    // b sparse","    var bvalues = b._values;","    var bindex = b._index;","    var bptr = b._ptr;","    var bsize = b._size;","    var bdt = b._datatype;","    // validate b matrix","    if (!bvalues)","      throw new Error('Cannot multiply Dense Matrix times Pattern only Matrix');","    // rows & columns","    var arows = asize[0];","    var bcolumns = bsize[1];","    ","    // datatype","    var dt;","    // addScalar signature to use","    var af = addScalar;","    // multiplyScalar signature to use","    var mf = multiplyScalar;","    // equalScalar signature to use","    var eq = equalScalar;","    // zero value","    var zero = 0;","","    // process data types","    if (adt && bdt && adt === bdt && typeof adt === 'string') {","      // datatype","      dt = adt;","      // find signatures that matches (dt, dt)","      af = typed.find(addScalar, [dt, dt]);","      mf = typed.find(multiplyScalar, [dt, dt]);","      eq = typed.find(equalScalar, [dt, dt]);","      // convert 0 to the same datatype","      zero = typed.convert(0, dt);","    }","","    // result","    var cvalues = [];","    var cindex = [];","    var cptr = [];","    // c matrix","    var c = new SparseMatrix({","      values : cvalues,","      index: cindex,","      ptr: cptr,","      size: [arows, bcolumns],","      datatype: dt","    });","","    // loop b columns","    for (var jb = 0; jb < bcolumns; jb++) {","      // update ptr","      cptr[jb] = cindex.length;","      // indeces in column jb","      var kb0 = bptr[jb];","      var kb1 = bptr[jb + 1];","      // do not process column jb if no data exists","      if (kb1 > kb0) {","        // last row mark processed","        var last = 0;","        // loop a rows","        for (var i = 0; i < arows; i++) {","          // column mark","          var mark = i + 1;","          // C[i, jb]","          var cij;","          // values in b column j","          for (var kb = kb0; kb < kb1; kb++) {","            // row","            var ib = bindex[kb];","            // check value has been initialized","            if (last !== mark) {","              // first value in column jb","              cij = mf(adata[i][ib], bvalues[kb]);","              // update mark","              last = mark;","            }","            else {","              // accumulate value","              cij = af(cij, mf(adata[i][ib], bvalues[kb]));","            }","          }","          // check column has been processed and value != 0","          if (last === mark && !eq(cij, zero)) {","            // push row & value","            cindex.push(i);","            cvalues.push(cij);","          }","        }","      }","    }","    // update ptr","    cptr[bcolumns] = cindex.length;","","    // return sparse matrix","    return c;","  };","","  /**","   * C = A * B","   *","   * @param {Matrix} a            SparseMatrix    (MxN)","   * @param {Matrix} b            Dense Vector (N)","   *","   * @return {Matrix}             SparseMatrix    (M, 1) ","   */","  var _multiplySparseMatrixVector = function (a, b) {","    // a sparse","    var avalues = a._values;","    var aindex = a._index;","    var aptr = a._ptr;","    var adt = a._datatype;","    // validate a matrix","    if (!avalues)","      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');","    // b dense","    var bdata = b._data;","    var bdt = b._datatype;","    // rows & columns","    var arows = a._size[0];","    var brows = b._size[0];","    // result","    var cvalues = [];","    var cindex = [];","    var cptr = [];","    ","    // datatype","    var dt;","    // addScalar signature to use","    var af = addScalar;","    // multiplyScalar signature to use","    var mf = multiplyScalar;","    // equalScalar signature to use","    var eq = equalScalar;","    // zero value","    var zero = 0;","","    // process data types","    if (adt && bdt && adt === bdt && typeof adt === 'string') {","      // datatype","      dt = adt;","      // find signatures that matches (dt, dt)","      af = typed.find(addScalar, [dt, dt]);","      mf = typed.find(multiplyScalar, [dt, dt]);","      eq = typed.find(equalScalar, [dt, dt]);","      // convert 0 to the same datatype","      zero = typed.convert(0, dt);","    }","","    // workspace","    var x = [];","    // vector with marks indicating a value x[i] exists in a given column","    var w = [];","","    // update ptr","    cptr[0] = 0;","    // rows in b","    for (var ib = 0; ib < brows; ib++) {","      // b[ib]","      var vbi = bdata[ib];","      // check b[ib] != 0, avoid loops","      if (!eq(vbi, zero)) {","        // A values & index in ib column","        for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {","          // a row","          var ia = aindex[ka];","          // check value exists in current j","          if (!w[ia]) {","            // ia is new entry in j","            w[ia] = true;","            // add i to pattern of C","            cindex.push(ia);","            // x(ia) = A","            x[ia] = mf(vbi, avalues[ka]);","          }","          else {","            // i exists in C already","            x[ia] = af(x[ia], mf(vbi, avalues[ka]));","          }","        }","      }","    }","    // copy values from x to column jb of c","    for (var p1 = cindex.length, p = 0; p < p1; p++) {","      // row","      var ic = cindex[p];","      // copy value","      cvalues[p] = x[ic];","    }","    // update ptr","    cptr[1] = cindex.length;","","    // return sparse matrix","    return new SparseMatrix({","      values : cvalues,","      index: cindex,","      ptr: cptr,","      size: [arows, 1],","      datatype: dt","    });","  };","","  /**","   * C = A * B","   *","   * @param {Matrix} a            SparseMatrix      (MxN)","   * @param {Matrix} b            DenseMatrix       (NxC)","   *","   * @return {Matrix}             SparseMatrix      (MxC)","   */","  var _multiplySparseMatrixDenseMatrix = function (a, b) {","    // a sparse","    var avalues = a._values;","    var aindex = a._index;","    var aptr = a._ptr;","    var adt = a._datatype;","    // validate a matrix","    if (!avalues)","      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');","    // b dense","    var bdata = b._data;","    var bdt = b._datatype;","    // rows & columns","    var arows = a._size[0];","    var brows = b._size[0];","    var bcolumns = b._size[1];","","    // datatype","    var dt;","    // addScalar signature to use","    var af = addScalar;","    // multiplyScalar signature to use","    var mf = multiplyScalar;","    // equalScalar signature to use","    var eq = equalScalar;","    // zero value","    var zero = 0;","","    // process data types","    if (adt && bdt && adt === bdt && typeof adt === 'string') {","      // datatype","      dt = adt;","      // find signatures that matches (dt, dt)","      af = typed.find(addScalar, [dt, dt]);","      mf = typed.find(multiplyScalar, [dt, dt]);","      eq = typed.find(equalScalar, [dt, dt]);","      // convert 0 to the same datatype","      zero = typed.convert(0, dt);","    }","","    // result","    var cvalues = [];","    var cindex = [];","    var cptr = [];","    // c matrix","    var c = new SparseMatrix({","      values : cvalues,","      index: cindex,","      ptr: cptr,","      size: [arows, bcolumns],","      datatype: dt","    });","","    // workspace","    var x = [];","    // vector with marks indicating a value x[i] exists in a given column","    var w = [];","","    // loop b columns","    for (var jb = 0; jb < bcolumns; jb++) {","      // update ptr","      cptr[jb] = cindex.length;","      // mark in workspace for current column","      var mark = jb + 1;","      // rows in jb","      for (var ib = 0; ib < brows; ib++) {","        // b[ib, jb]","        var vbij = bdata[ib][jb];","        // check b[ib, jb] != 0, avoid loops","        if (!eq(vbij, zero)) {","          // A values & index in ib column","          for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {","            // a row","            var ia = aindex[ka];","            // check value exists in current j","            if (w[ia] !== mark) {","              // ia is new entry in j","              w[ia] = mark;","              // add i to pattern of C","              cindex.push(ia);","              // x(ia) = A","              x[ia] = mf(vbij, avalues[ka]);","            }","            else {","              // i exists in C already","              x[ia] = af(x[ia], mf(vbij, avalues[ka]));","            }","          }","        }","      }","      // copy values from x to column jb of c","      for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {","        // row","        var ic = cindex[p];","        // copy value","        cvalues[p] = x[ic];","      }","    }","    // update ptr","    cptr[bcolumns] = cindex.length;","","    // return sparse matrix","    return c;","  };","","  /**","   * C = A * B","   *","   * @param {Matrix} a            SparseMatrix      (MxN)","   * @param {Matrix} b            SparseMatrix      (NxC)","   *","   * @return {Matrix}             SparseMatrix      (MxC)","   */","  var _multiplySparseMatrixSparseMatrix = function (a, b) {","    // a sparse","    var avalues = a._values;","    var aindex = a._index;","    var aptr = a._ptr;","    var adt = a._datatype;","    // b sparse","    var bvalues = b._values;","    var bindex = b._index;","    var bptr = b._ptr;","    var bdt = b._datatype;","    ","    // rows & columns","    var arows = a._size[0];","    var bcolumns = b._size[1];","    // flag indicating both matrices (a & b) contain data","    var values = avalues && bvalues;","","    // datatype","    var dt;","    // addScalar signature to use","    var af = addScalar;","    // multiplyScalar signature to use","    var mf = multiplyScalar;","","    // process data types","    if (adt && bdt && adt === bdt && typeof adt === 'string') {","      // datatype","      dt = adt;","      // find signatures that matches (dt, dt)","      af = typed.find(addScalar, [dt, dt]);","      mf = typed.find(multiplyScalar, [dt, dt]);","    }","    ","    // result","    var cvalues = values ? [] : undefined;","    var cindex = [];","    var cptr = [];","    // c matrix","    var c = new SparseMatrix({","      values : cvalues,","      index: cindex,","      ptr: cptr,","      size: [arows, bcolumns],","      datatype: dt","    });","","    // workspace","    var x = values ? [] : undefined;","    // vector with marks indicating a value x[i] exists in a given column","    var w = [];","    // variables","    var ka, ka0, ka1, kb, kb0, kb1, ia, ib;","    // loop b columns","    for (var jb = 0; jb < bcolumns; jb++) {","      // update ptr","      cptr[jb] = cindex.length;","      // mark in workspace for current column","      var mark = jb + 1;","      // B values & index in j","      for (kb0 = bptr[jb], kb1 = bptr[jb + 1], kb = kb0; kb < kb1; kb++) {","        // b row","        ib = bindex[kb];","        // check we need to process values","        if (values) {","          // loop values in a[:,ib]","          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {","            // row","            ia = aindex[ka];","            // check value exists in current j","            if (w[ia] !== mark) {","              // ia is new entry in j","              w[ia] = mark;","              // add i to pattern of C","              cindex.push(ia);","              // x(ia) = A","              x[ia] = mf(bvalues[kb], avalues[ka]);","            }","            else {","              // i exists in C already","              x[ia] = af(x[ia], mf(bvalues[kb], avalues[ka]));","            }","          }","        }","        else {","          // loop values in a[:,ib]","          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {","            // row","            ia = aindex[ka];","            // check value exists in current j","            if (w[ia] !== mark) {","              // ia is new entry in j","              w[ia] = mark;","              // add i to pattern of C","              cindex.push(ia);","            }","          }","        }","      }","      // check we need to process matrix values (pattern matrix)","      if (values) {","        // copy values from x to column jb of c","        for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {","          // row","          var ic = cindex[p];","          // copy value","          cvalues[p] = x[ic];","        }","      }","    }","    // update ptr","    cptr[bcolumns] = cindex.length;","","    // return sparse matrix","    return c;","  };","","  multiply.toTex = {","    2: '\\\\left(${args[0]}' + latex.operators['multiply'] + '${args[1]}\\\\right)'","  };","","  return multiply;","}","","exports.name = 'multiply';","exports.factory = factory;",""],"l":{"3":1,"4":1,"6":1,"7":0,"9":0,"10":0,"11":0,"12":0,"14":0,"15":0,"17":0,"18":0,"53":0,"58":0,"61":0,"63":0,"68":0,"69":0,"72":0,"75":0,"77":0,"79":0,"82":0,"85":0,"87":0,"90":0,"95":0,"100":0,"105":0,"108":0,"110":0,"111":0,"113":0,"114":0,"116":0,"121":0,"123":0,"125":0,"126":0,"128":0,"129":0,"131":0,"136":0,"141":0,"147":0,"149":0,"150":0,"153":0,"157":0,"159":0,"162":0,"165":0,"167":0,"169":0,"172":0,"174":0,"176":0,"178":0,"180":0,"183":0,"186":0,"188":0,"190":0,"193":0,"195":0,"197":0,"199":0,"201":0,"203":0,"215":0,"217":0,"218":0,"221":0,"222":0,"224":0,"225":0,"228":0,"230":0,"232":0,"235":0,"237":0,"239":0,"240":0,"244":0,"246":0,"248":0,"250":0,"261":0,"263":0,"265":0,"267":0,"278":0,"280":0,"281":0,"282":0,"284":0,"285":0,"286":0,"288":0,"289":0,"292":0,"294":0,"296":0,"299":0,"301":0,"303":0,"304":0,"308":0,"311":0,"313":0,"315":0,"317":0,"319":0,"323":0,"338":0,"340":0,"342":0,"344":0,"356":0,"358":0,"361":0,"363":0,"365":0,"367":0,"370":0,"372":0,"374":0,"376":0,"388":0,"390":0,"391":0,"392":0,"394":0,"395":0,"397":0,"398":0,"401":0,"403":0,"405":0,"408":0,"410":0,"412":0,"413":0,"417":0,"420":0,"422":0,"424":0,"426":0,"428":0,"430":0,"434":0,"449":0,"451":0,"452":0,"453":0,"455":0,"456":0,"457":0,"459":0,"460":0,"461":0,"464":0,"466":0,"468":0,"471":0,"473":0,"475":0,"476":0,"480":0,"483":0,"485":0,"487":0,"489":0,"491":0,"493":0,"495":0,"497":0,"502":0,"517":0,"519":0,"520":0,"521":0,"523":0,"524":0,"525":0,"526":0,"527":0,"529":0,"530":0,"532":0,"533":0,"536":0,"538":0,"540":0,"542":0,"544":0,"547":0,"549":0,"551":0,"552":0,"553":0,"555":0,"559":0,"560":0,"561":0,"563":0,"572":0,"574":0,"576":0,"577":0,"579":0,"581":0,"583":0,"585":0,"587":0,"589":0,"591":0,"593":0,"595":0,"597":0,"601":0,"605":0,"607":0,"608":0,"614":0,"617":0,"628":0,"630":0,"631":0,"632":0,"633":0,"635":0,"636":0,"638":0,"639":0,"641":0,"642":0,"644":0,"645":0,"646":0,"649":0,"651":0,"653":0,"655":0,"657":0,"660":0,"662":0,"664":0,"665":0,"666":0,"668":0,"672":0,"674":0,"677":0,"679":0,"681":0,"683":0,"685":0,"687":0,"689":0,"691":0,"693":0,"695":0,"699":0,"705":0,"707":0,"709":0,"712":0,"715":0,"732":0,"734":0,"735":0,"736":0,"737":0,"739":0,"740":0,"742":0,"743":0,"745":0,"746":0,"747":0,"750":0,"752":0,"754":0,"756":0,"758":0,"761":0,"763":0,"765":0,"766":0,"767":0,"769":0,"773":0,"774":0,"775":0,"777":0,"786":0,"788":0,"791":0,"793":0,"795":0,"797":0,"799":0,"801":0,"803":0,"805":0,"807":0,"809":0,"811":0,"813":0,"817":0,"823":0,"825":0,"827":0,"831":0,"834":0,"845":0,"847":0,"848":0,"849":0,"850":0,"852":0,"853":0,"854":0,"855":0,"858":0,"859":0,"861":0,"864":0,"866":0,"868":0,"871":0,"873":0,"875":0,"876":0,"880":0,"881":0,"882":0,"884":0,"893":0,"895":0,"897":0,"899":0,"901":0,"903":0,"905":0,"907":0,"909":0,"911":0,"913":0,"915":0,"917":0,"919":0,"921":0,"925":0,"931":0,"933":0,"935":0,"937":0,"939":0,"945":0,"947":0,"949":0,"951":0,"956":0,"959":0,"962":0,"966":0,"969":1,"970":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/norm.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/norm.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":1,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":1,"78":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},"fnMap":{"1":{"name":"factory","line":3,"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}}},"2":{"name":"(anonymous_2)","line":59,"loc":{"start":{"line":59,"column":15},"end":{"line":59,"column":28}}},"3":{"name":"(anonymous_3)","line":63,"loc":{"start":{"line":63,"column":17},"end":{"line":63,"column":30}}},"4":{"name":"(anonymous_4)","line":68,"loc":{"start":{"line":68,"column":23},"end":{"line":68,"column":36}}},"5":{"name":"(anonymous_5)","line":73,"loc":{"start":{"line":73,"column":13},"end":{"line":73,"column":26}}},"6":{"name":"(anonymous_6)","line":77,"loc":{"start":{"line":77,"column":14},"end":{"line":77,"column":27}}},"7":{"name":"(anonymous_7)","line":81,"loc":{"start":{"line":81,"column":82},"end":{"line":81,"column":95}}},"8":{"name":"(anonymous_8)","line":86,"loc":{"start":{"line":86,"column":42},"end":{"line":86,"column":58}}},"9":{"name":"(anonymous_9)","line":90,"loc":{"start":{"line":90,"column":43},"end":{"line":90,"column":59}}},"10":{"name":"_norm","line":102,"loc":{"start":{"line":102,"column":2},"end":{"line":102,"column":24}}},"11":{"name":"(anonymous_11)","line":114,"loc":{"start":{"line":114,"column":10},"end":{"line":114,"column":27}}},"12":{"name":"(anonymous_12)","line":127,"loc":{"start":{"line":127,"column":10},"end":{"line":127,"column":27}}},"13":{"name":"(anonymous_13)","line":145,"loc":{"start":{"line":145,"column":12},"end":{"line":145,"column":29}}},"14":{"name":"(anonymous_14)","line":166,"loc":{"start":{"line":166,"column":10},"end":{"line":166,"column":34}}},"15":{"name":"(anonymous_15)","line":183,"loc":{"start":{"line":183,"column":10},"end":{"line":183,"column":34}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":212,"column":1}},"2":{"start":{"line":5,"column":2},"end":{"line":5,"column":55}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":55}},"4":{"start":{"line":7,"column":2},"end":{"line":7,"column":55}},"5":{"start":{"line":8,"column":2},"end":{"line":8,"column":56}},"6":{"start":{"line":9,"column":2},"end":{"line":9,"column":60}},"7":{"start":{"line":10,"column":2},"end":{"line":10,"column":63}},"8":{"start":{"line":11,"column":2},"end":{"line":11,"column":58}},"9":{"start":{"line":12,"column":2},"end":{"line":12,"column":59}},"10":{"start":{"line":13,"column":2},"end":{"line":13,"column":71}},"11":{"start":{"line":14,"column":2},"end":{"line":14,"column":53}},"12":{"start":{"line":15,"column":2},"end":{"line":15,"column":57}},"13":{"start":{"line":56,"column":2},"end":{"line":93,"column":5}},"14":{"start":{"line":60,"column":6},"end":{"line":60,"column":21}},"15":{"start":{"line":65,"column":6},"end":{"line":65,"column":21}},"16":{"start":{"line":70,"column":6},"end":{"line":70,"column":25}},"17":{"start":{"line":74,"column":6},"end":{"line":74,"column":33}},"18":{"start":{"line":78,"column":6},"end":{"line":78,"column":25}},"19":{"start":{"line":83,"column":6},"end":{"line":83,"column":21}},"20":{"start":{"line":87,"column":6},"end":{"line":87,"column":33}},"21":{"start":{"line":91,"column":6},"end":{"line":91,"column":25}},"22":{"start":{"line":102,"column":2},"end":{"line":204,"column":3}},"23":{"start":{"line":104,"column":4},"end":{"line":104,"column":25}},"24":{"start":{"line":107,"column":4},"end":{"line":155,"column":5}},"25":{"start":{"line":109,"column":6},"end":{"line":121,"column":7}},"26":{"start":{"line":111,"column":8},"end":{"line":111,"column":21}},"27":{"start":{"line":113,"column":8},"end":{"line":119,"column":16}},"28":{"start":{"line":115,"column":12},"end":{"line":115,"column":31}},"29":{"start":{"line":116,"column":12},"end":{"line":117,"column":23}},"30":{"start":{"line":117,"column":14},"end":{"line":117,"column":23}},"31":{"start":{"line":120,"column":8},"end":{"line":120,"column":20}},"32":{"start":{"line":122,"column":6},"end":{"line":134,"column":7}},"33":{"start":{"line":124,"column":8},"end":{"line":124,"column":17}},"34":{"start":{"line":126,"column":8},"end":{"line":132,"column":16}},"35":{"start":{"line":128,"column":12},"end":{"line":128,"column":31}},"36":{"start":{"line":129,"column":12},"end":{"line":130,"column":23}},"37":{"start":{"line":130,"column":14},"end":{"line":130,"column":23}},"38":{"start":{"line":133,"column":8},"end":{"line":133,"column":25}},"39":{"start":{"line":135,"column":6},"end":{"line":137,"column":7}},"40":{"start":{"line":136,"column":8},"end":{"line":136,"column":27}},"41":{"start":{"line":138,"column":6},"end":{"line":152,"column":7}},"42":{"start":{"line":140,"column":8},"end":{"line":150,"column":9}},"43":{"start":{"line":142,"column":10},"end":{"line":142,"column":20}},"44":{"start":{"line":144,"column":10},"end":{"line":148,"column":18}},"45":{"start":{"line":146,"column":14},"end":{"line":146,"column":45}},"46":{"start":{"line":149,"column":10},"end":{"line":149,"column":31}},"47":{"start":{"line":151,"column":8},"end":{"line":151,"column":40}},"48":{"start":{"line":154,"column":6},"end":{"line":154,"column":53}},"49":{"start":{"line":157,"column":4},"end":{"line":203,"column":5}},"50":{"start":{"line":159,"column":6},"end":{"line":175,"column":7}},"51":{"start":{"line":161,"column":8},"end":{"line":161,"column":19}},"52":{"start":{"line":163,"column":8},"end":{"line":163,"column":21}},"53":{"start":{"line":165,"column":8},"end":{"line":173,"column":16}},"54":{"start":{"line":167,"column":12},"end":{"line":167,"column":29}},"55":{"start":{"line":168,"column":12},"end":{"line":168,"column":48}},"56":{"start":{"line":169,"column":12},"end":{"line":170,"column":24}},"57":{"start":{"line":170,"column":14},"end":{"line":170,"column":24}},"58":{"start":{"line":171,"column":12},"end":{"line":171,"column":22}},"59":{"start":{"line":174,"column":8},"end":{"line":174,"column":20}},"60":{"start":{"line":176,"column":6},"end":{"line":192,"column":7}},"61":{"start":{"line":178,"column":8},"end":{"line":178,"column":19}},"62":{"start":{"line":180,"column":8},"end":{"line":180,"column":21}},"63":{"start":{"line":182,"column":8},"end":{"line":190,"column":16}},"64":{"start":{"line":184,"column":12},"end":{"line":184,"column":29}},"65":{"start":{"line":185,"column":12},"end":{"line":185,"column":48}},"66":{"start":{"line":186,"column":12},"end":{"line":187,"column":24}},"67":{"start":{"line":187,"column":14},"end":{"line":187,"column":24}},"68":{"start":{"line":188,"column":12},"end":{"line":188,"column":22}},"69":{"start":{"line":191,"column":8},"end":{"line":191,"column":20}},"70":{"start":{"line":193,"column":6},"end":{"line":196,"column":7}},"71":{"start":{"line":195,"column":8},"end":{"line":195,"column":54}},"72":{"start":{"line":197,"column":6},"end":{"line":200,"column":7}},"73":{"start":{"line":199,"column":8},"end":{"line":199,"column":118}},"74":{"start":{"line":202,"column":6},"end":{"line":202,"column":53}},"75":{"start":{"line":206,"column":2},"end":{"line":209,"column":4}},"76":{"start":{"line":211,"column":2},"end":{"line":211,"column":14}},"77":{"start":{"line":214,"column":0},"end":{"line":214,"column":22}},"78":{"start":{"line":215,"column":0},"end":{"line":215,"column":26}}},"branchMap":{"1":{"line":107,"type":"if","locations":[{"start":{"line":107,"column":4},"end":{"line":107,"column":4}},{"start":{"line":107,"column":4},"end":{"line":107,"column":4}}]},"2":{"line":109,"type":"if","locations":[{"start":{"line":109,"column":6},"end":{"line":109,"column":6}},{"start":{"line":109,"column":6},"end":{"line":109,"column":6}}]},"3":{"line":109,"type":"binary-expr","locations":[{"start":{"line":109,"column":10},"end":{"line":109,"column":40}},{"start":{"line":109,"column":44},"end":{"line":109,"column":55}}]},"4":{"line":116,"type":"if","locations":[{"start":{"line":116,"column":12},"end":{"line":116,"column":12}},{"start":{"line":116,"column":12},"end":{"line":116,"column":12}}]},"5":{"line":122,"type":"if","locations":[{"start":{"line":122,"column":6},"end":{"line":122,"column":6}},{"start":{"line":122,"column":6},"end":{"line":122,"column":6}}]},"6":{"line":122,"type":"binary-expr","locations":[{"start":{"line":122,"column":10},"end":{"line":122,"column":40}},{"start":{"line":122,"column":44},"end":{"line":122,"column":56}}]},"7":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":12},"end":{"line":129,"column":12}},{"start":{"line":129,"column":12},"end":{"line":129,"column":12}}]},"8":{"line":129,"type":"binary-expr","locations":[{"start":{"line":129,"column":16},"end":{"line":129,"column":21}},{"start":{"line":129,"column":25},"end":{"line":129,"column":41}}]},"9":{"line":133,"type":"binary-expr","locations":[{"start":{"line":133,"column":15},"end":{"line":133,"column":19}},{"start":{"line":133,"column":23},"end":{"line":133,"column":24}}]},"10":{"line":135,"type":"if","locations":[{"start":{"line":135,"column":6},"end":{"line":135,"column":6}},{"start":{"line":135,"column":6},"end":{"line":135,"column":6}}]},"11":{"line":138,"type":"if","locations":[{"start":{"line":138,"column":6},"end":{"line":138,"column":6}},{"start":{"line":138,"column":6},"end":{"line":138,"column":6}}]},"12":{"line":138,"type":"binary-expr","locations":[{"start":{"line":138,"column":10},"end":{"line":138,"column":31}},{"start":{"line":138,"column":35},"end":{"line":138,"column":44}}]},"13":{"line":140,"type":"if","locations":[{"start":{"line":140,"column":8},"end":{"line":140,"column":8}},{"start":{"line":140,"column":8},"end":{"line":140,"column":8}}]},"14":{"line":157,"type":"if","locations":[{"start":{"line":157,"column":4},"end":{"line":157,"column":4}},{"start":{"line":157,"column":4},"end":{"line":157,"column":4}}]},"15":{"line":159,"type":"if","locations":[{"start":{"line":159,"column":6},"end":{"line":159,"column":6}},{"start":{"line":159,"column":6},"end":{"line":159,"column":6}}]},"16":{"line":168,"type":"binary-expr","locations":[{"start":{"line":168,"column":25},"end":{"line":168,"column":29}},{"start":{"line":168,"column":33},"end":{"line":168,"column":34}}]},"17":{"line":169,"type":"if","locations":[{"start":{"line":169,"column":12},"end":{"line":169,"column":12}},{"start":{"line":169,"column":12},"end":{"line":169,"column":12}}]},"18":{"line":176,"type":"if","locations":[{"start":{"line":176,"column":6},"end":{"line":176,"column":6}},{"start":{"line":176,"column":6},"end":{"line":176,"column":6}}]},"19":{"line":176,"type":"binary-expr","locations":[{"start":{"line":176,"column":10},"end":{"line":176,"column":40}},{"start":{"line":176,"column":44},"end":{"line":176,"column":55}}]},"20":{"line":185,"type":"binary-expr","locations":[{"start":{"line":185,"column":25},"end":{"line":185,"column":29}},{"start":{"line":185,"column":33},"end":{"line":185,"column":34}}]},"21":{"line":186,"type":"if","locations":[{"start":{"line":186,"column":12},"end":{"line":186,"column":12}},{"start":{"line":186,"column":12},"end":{"line":186,"column":12}}]},"22":{"line":193,"type":"if","locations":[{"start":{"line":193,"column":6},"end":{"line":193,"column":6}},{"start":{"line":193,"column":6},"end":{"line":193,"column":6}}]},"23":{"line":197,"type":"if","locations":[{"start":{"line":197,"column":6},"end":{"line":197,"column":6}},{"start":{"line":197,"column":6},"end":{"line":197,"column":6}}]}},"code":["'use strict';","","function factory (type, config, load, typed) {","  ","  var abs         = load(require('../arithmetic/abs'));","  var add         = load(require('../arithmetic/add'));","  var pow         = load(require('../arithmetic/pow'));","  var sqrt        = load(require('../arithmetic/sqrt'));","  var multiply    = load(require('../arithmetic/multiply'));","  var equalScalar = load(require('../relational/equalScalar'));","  var larger      = load(require('../relational/larger'));","  var smaller     = load(require('../relational/smaller'));","  var matrix      = load(require('../../type/matrix/function/matrix'));","  var trace       = load(require('../matrix/trace'));","  var transpose   = load(require('../matrix/transpose'));","","","  /**","   * Calculate the norm of a number, vector or matrix.","   *","   * The second parameter p is optional. If not provided, it defaults to 2.","   *","   * Syntax:","   *","   *    math.norm(x)","   *    math.norm(x, p)","   *","   * Examples:","   *","   *    math.abs(-3.5);                         // returns 3.5","   *    math.norm(-3.5);                        // returns 3.5","   *","   *    math.norm(math.complex(3, -4));         // returns 5","   *","   *    math.norm([1, 2, -3], Infinity);        // returns 3","   *    math.norm([1, 2, -3], -Infinity);       // returns 1","   *","   *    math.norm([3, 4], 2);                   // returns 5","   *","   *    math.norm([[1, 2], [3, 4]], 1)          // returns 6","   *    math.norm([[1, 2], [3, 4]], 'inf');     // returns 7","   *    math.norm([[1, 2], [3, 4]], 'fro');     // returns 5.477225575051661","   *","   * See also:","   *","   *    abs, hypot","   *","   * @param  {number | BigNumber | Complex | Array | Matrix} x","   *            Value for which to calculate the norm","   * @param  {number | BigNumber | string} [p=2]","   *            Vector space.","   *            Supported numbers include Infinity and -Infinity.","   *            Supported strings are: 'inf', '-inf', and 'fro' (The Frobenius norm)","   * @return {number | BigNumber} the p-norm","   */","  var norm = typed('norm', {","    'number': Math.abs,","","    'Complex': function (x) {","      return x.abs();","    },","","    'BigNumber': function (x) {","      // norm(x) = abs(x)","      return x.abs();","    },","    ","    'boolean | null' : function (x) {","      // norm(x) = abs(x)","      return Math.abs(x);","    },","","    'Array': function (x) {","      return _norm(matrix(x), 2);","    },","    ","    'Matrix': function (x) {","      return _norm(x, 2);","    },","","    'number | Complex | BigNumber | boolean | null, number | BigNumber | string': function (x) {","      // ignore second parameter, TODO: remove the option of second parameter for these types","      return norm(x);","    },","","    'Array, number | BigNumber | string': function (x, p) {","      return _norm(matrix(x), p);","    },","    ","    'Matrix, number | BigNumber | string': function (x, p) {","      return _norm(x, p);","    }","  });","","  /**","   * Calculate the norm for an array","   * @param {Array} x","   * @param {number | string} p","   * @returns {number} Returns the norm","   * @private","   */","  function _norm (x, p) {","    // size","    var sizeX = x.size();","    ","    // check if it is a vector","    if (sizeX.length == 1) {","      // check p","      if (p === Number.POSITIVE_INFINITY || p === 'inf') {","        // norm(x, Infinity) = max(abs(x))","        var pinf = 0;","        // skip zeros since abs(0) == 0","        x.forEach(","          function (value) {","            var v = abs(value);","            if (larger(v, pinf))","              pinf = v;","          },","          true);","        return pinf;","      }","      if (p === Number.NEGATIVE_INFINITY || p === '-inf') {","        // norm(x, -Infinity) = min(abs(x))","        var ninf;","        // skip zeros since abs(0) == 0","        x.forEach(","          function (value) {","            var v = abs(value);","            if (!ninf || smaller(v, ninf))","              ninf = v;","          },","          true);","        return ninf || 0;","      }","      if (p === 'fro') {","        return _norm(x, 2);","      }","      if (typeof p === 'number' && !isNaN(p)) {","        // check p != 0","        if (!equalScalar(p, 0)) {","          // norm(x, p) = sum(abs(xi) ^ p) ^ 1/p","          var n = 0;","          // skip zeros since abs(0) == 0","          x.forEach(","            function (value) {","              n = add(pow(abs(value), p), n);","            },","            true);","          return pow(n, 1 / p);","        }","        return Number.POSITIVE_INFINITY;","      }","      // invalid parameter value","      throw new Error('Unsupported parameter value');","    }","    // MxN matrix","    if (sizeX.length == 2) {","      // check p","      if (p === 1) {","        // norm(x) = the largest column sum","        var c = [];","        // result","        var maxc = 0;","        // skip zeros since abs(0) == 0","        x.forEach(","          function (value, index) {","            var j = index[1];","            var cj = add(c[j] || 0, abs(value));","            if (larger(cj, maxc))","              maxc = cj;","            c[j] = cj;","          },","          true);","        return maxc;","      }","      if (p === Number.POSITIVE_INFINITY || p === 'inf') {","        // norm(x) = the largest row sum","        var r = [];","        // result","        var maxr = 0;","        // skip zeros since abs(0) == 0","        x.forEach(","          function (value, index) {","            var i = index[0];","            var ri = add(r[i] || 0, abs(value));","            if (larger(ri, maxr))","              maxr = ri;","            r[i] = ri;","          },","          true);","        return maxr;","      }","      if (p === 'fro') {","        // norm(x) = sqrt(sum(diag(x'x)))","        return sqrt(trace(multiply(transpose(x), x)));","      }","      if (p === 2) {","        // not implemented","        throw new Error('Unsupported parameter value, missing implementation of matrix singular value decomposition');","      }","      // invalid parameter value","      throw new Error('Unsupported parameter value');","    }","  }","","  norm.toTex = {","    1: '\\\\left\\\\|${args[0]}\\\\right\\\\|',","    2: undefined  // use default template","  };","","  return norm;","}","","exports.name = 'norm';","exports.factory = factory;",""],"l":{"3":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"56":0,"60":0,"65":0,"70":0,"74":0,"78":0,"83":0,"87":0,"91":0,"102":1,"104":0,"107":0,"109":0,"111":0,"113":0,"115":0,"116":0,"117":0,"120":0,"122":0,"124":0,"126":0,"128":0,"129":0,"130":0,"133":0,"135":0,"136":0,"138":0,"140":0,"142":0,"144":0,"146":0,"149":0,"151":0,"154":0,"157":0,"159":0,"161":0,"163":0,"165":0,"167":0,"168":0,"169":0,"170":0,"171":0,"174":0,"176":0,"178":0,"180":0,"182":0,"184":0,"185":0,"186":0,"187":0,"188":0,"191":0,"193":0,"195":0,"197":0,"199":0,"202":0,"206":0,"211":0,"214":1,"215":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/nthRoot.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/nthRoot.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":1,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":1,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":1,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":1,"105":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},"fnMap":{"1":{"name":"factory","line":3,"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}}},"2":{"name":"(anonymous_2)","line":45,"loc":{"start":{"line":45,"column":14},"end":{"line":45,"column":27}}},"3":{"name":"(anonymous_3)","line":50,"loc":{"start":{"line":50,"column":17},"end":{"line":50,"column":30}}},"4":{"name":"(anonymous_4)","line":53,"loc":{"start":{"line":53,"column":16},"end":{"line":53,"column":28}}},"5":{"name":"(anonymous_5)","line":59,"loc":{"start":{"line":59,"column":22},"end":{"line":59,"column":35}}},"6":{"name":"(anonymous_6)","line":63,"loc":{"start":{"line":63,"column":22},"end":{"line":63,"column":38}}},"7":{"name":"(anonymous_7)","line":111,"loc":{"start":{"line":111,"column":20},"end":{"line":111,"column":36}}},"8":{"name":"(anonymous_8)","line":116,"loc":{"start":{"line":116,"column":21},"end":{"line":116,"column":37}}},"9":{"name":"(anonymous_9)","line":121,"loc":{"start":{"line":121,"column":21},"end":{"line":121,"column":37}}},"10":{"name":"(anonymous_10)","line":126,"loc":{"start":{"line":126,"column":34},"end":{"line":126,"column":50}}},"11":{"name":"(anonymous_11)","line":141,"loc":{"start":{"line":141,"column":34},"end":{"line":141,"column":50}}},"12":{"name":"(anonymous_12)","line":164,"loc":{"start":{"line":164,"column":33},"end":{"line":164,"column":49}}},"13":{"name":"(anonymous_13)","line":169,"loc":{"start":{"line":169,"column":33},"end":{"line":169,"column":49}}},"14":{"name":"_bigNthRoot","line":186,"loc":{"start":{"line":186,"column":2},"end":{"line":186,"column":32}}},"15":{"name":"_nthRoot","line":227,"loc":{"start":{"line":227,"column":0},"end":{"line":227,"column":27}}},"16":{"name":"_nthComplexRoot","line":284,"loc":{"start":{"line":284,"column":0},"end":{"line":284,"column":34}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":218,"column":1}},"2":{"start":{"line":5,"column":2},"end":{"line":5,"column":66}},"3":{"start":{"line":7,"column":2},"end":{"line":7,"column":73}},"4":{"start":{"line":8,"column":2},"end":{"line":8,"column":73}},"5":{"start":{"line":9,"column":2},"end":{"line":9,"column":73}},"6":{"start":{"line":10,"column":2},"end":{"line":10,"column":73}},"7":{"start":{"line":11,"column":2},"end":{"line":11,"column":73}},"8":{"start":{"line":12,"column":2},"end":{"line":12,"column":73}},"9":{"start":{"line":43,"column":2},"end":{"line":173,"column":5}},"10":{"start":{"line":46,"column":6},"end":{"line":46,"column":28}},"11":{"start":{"line":51,"column":6},"end":{"line":51,"column":51}},"12":{"start":{"line":54,"column":6},"end":{"line":54,"column":35}},"13":{"start":{"line":60,"column":6},"end":{"line":60,"column":27}},"14":{"start":{"line":65,"column":6},"end":{"line":65,"column":12}},"15":{"start":{"line":68,"column":6},"end":{"line":107,"column":7}},"16":{"start":{"line":70,"column":10},"end":{"line":86,"column":11}},"17":{"start":{"line":73,"column":14},"end":{"line":80,"column":15}},"18":{"start":{"line":75,"column":16},"end":{"line":75,"column":47}},"19":{"start":{"line":79,"column":16},"end":{"line":79,"column":57}},"20":{"start":{"line":81,"column":14},"end":{"line":81,"column":20}},"21":{"start":{"line":84,"column":14},"end":{"line":84,"column":51}},"22":{"start":{"line":85,"column":14},"end":{"line":85,"column":20}},"23":{"start":{"line":87,"column":10},"end":{"line":87,"column":16}},"24":{"start":{"line":89,"column":10},"end":{"line":105,"column":11}},"25":{"start":{"line":92,"column":14},"end":{"line":99,"column":15}},"26":{"start":{"line":94,"column":16},"end":{"line":94,"column":54}},"27":{"start":{"line":98,"column":16},"end":{"line":98,"column":57}},"28":{"start":{"line":100,"column":14},"end":{"line":100,"column":20}},"29":{"start":{"line":103,"column":14},"end":{"line":103,"column":45}},"30":{"start":{"line":104,"column":14},"end":{"line":104,"column":20}},"31":{"start":{"line":106,"column":10},"end":{"line":106,"column":16}},"32":{"start":{"line":108,"column":6},"end":{"line":108,"column":15}},"33":{"start":{"line":113,"column":6},"end":{"line":113,"column":53}},"34":{"start":{"line":118,"column":6},"end":{"line":118,"column":35}},"35":{"start":{"line":123,"column":6},"end":{"line":123,"column":35}},"36":{"start":{"line":128,"column":6},"end":{"line":128,"column":12}},"37":{"start":{"line":130,"column":6},"end":{"line":137,"column":7}},"38":{"start":{"line":132,"column":10},"end":{"line":132,"column":48}},"39":{"start":{"line":133,"column":10},"end":{"line":133,"column":16}},"40":{"start":{"line":135,"column":10},"end":{"line":135,"column":48}},"41":{"start":{"line":136,"column":10},"end":{"line":136,"column":16}},"42":{"start":{"line":138,"column":6},"end":{"line":138,"column":15}},"43":{"start":{"line":143,"column":6},"end":{"line":143,"column":12}},"44":{"start":{"line":145,"column":6},"end":{"line":160,"column":7}},"45":{"start":{"line":148,"column":10},"end":{"line":155,"column":11}},"46":{"start":{"line":150,"column":12},"end":{"line":150,"column":49}},"47":{"start":{"line":154,"column":12},"end":{"line":154,"column":53}},"48":{"start":{"line":156,"column":10},"end":{"line":156,"column":16}},"49":{"start":{"line":158,"column":10},"end":{"line":158,"column":47}},"50":{"start":{"line":159,"column":10},"end":{"line":159,"column":16}},"51":{"start":{"line":161,"column":6},"end":{"line":161,"column":15}},"52":{"start":{"line":166,"column":6},"end":{"line":166,"column":45}},"53":{"start":{"line":171,"column":6},"end":{"line":171,"column":45}},"54":{"start":{"line":175,"column":2},"end":{"line":175,"column":56}},"55":{"start":{"line":177,"column":2},"end":{"line":177,"column":17}},"56":{"start":{"line":186,"column":2},"end":{"line":217,"column":3}},"57":{"start":{"line":187,"column":4},"end":{"line":187,"column":45}},"58":{"start":{"line":188,"column":4},"end":{"line":188,"column":63}},"59":{"start":{"line":189,"column":4},"end":{"line":189,"column":37}},"60":{"start":{"line":191,"column":4},"end":{"line":191,"column":25}},"61":{"start":{"line":192,"column":4},"end":{"line":192,"column":32}},"62":{"start":{"line":193,"column":4},"end":{"line":195,"column":5}},"63":{"start":{"line":194,"column":6},"end":{"line":194,"column":24}},"64":{"start":{"line":197,"column":4},"end":{"line":199,"column":5}},"65":{"start":{"line":198,"column":6},"end":{"line":198,"column":47}},"66":{"start":{"line":200,"column":4},"end":{"line":202,"column":5}},"67":{"start":{"line":201,"column":6},"end":{"line":201,"column":62}},"68":{"start":{"line":205,"column":4},"end":{"line":207,"column":5}},"69":{"start":{"line":206,"column":6},"end":{"line":206,"column":41}},"70":{"start":{"line":208,"column":4},"end":{"line":210,"column":5}},"71":{"start":{"line":209,"column":6},"end":{"line":209,"column":28}},"72":{"start":{"line":212,"column":4},"end":{"line":212,"column":39}},"73":{"start":{"line":215,"column":4},"end":{"line":215,"column":32}},"74":{"start":{"line":216,"column":4},"end":{"line":216,"column":77}},"75":{"start":{"line":227,"column":0},"end":{"line":276,"column":1}},"76":{"start":{"line":228,"column":2},"end":{"line":228,"column":21}},"77":{"start":{"line":229,"column":2},"end":{"line":231,"column":3}},"78":{"start":{"line":230,"column":4},"end":{"line":230,"column":17}},"79":{"start":{"line":233,"column":2},"end":{"line":235,"column":3}},"80":{"start":{"line":234,"column":4},"end":{"line":234,"column":45}},"81":{"start":{"line":236,"column":2},"end":{"line":238,"column":3}},"82":{"start":{"line":237,"column":4},"end":{"line":237,"column":60}},"83":{"start":{"line":241,"column":2},"end":{"line":243,"column":3}},"84":{"start":{"line":242,"column":4},"end":{"line":242,"column":30}},"85":{"start":{"line":244,"column":2},"end":{"line":246,"column":3}},"86":{"start":{"line":245,"column":4},"end":{"line":245,"column":23}},"87":{"start":{"line":248,"column":2},"end":{"line":248,"column":40}},"88":{"start":{"line":251,"column":2},"end":{"line":251,"column":21}},"89":{"start":{"line":252,"column":2},"end":{"line":252,"column":25}},"90":{"start":{"line":284,"column":0},"end":{"line":296,"column":1}},"91":{"start":{"line":285,"column":2},"end":{"line":285,"column":66}},"92":{"start":{"line":285,"column":16},"end":{"line":285,"column":66}},"93":{"start":{"line":286,"column":2},"end":{"line":286,"column":59}},"94":{"start":{"line":286,"column":18},"end":{"line":286,"column":59}},"95":{"start":{"line":287,"column":2},"end":{"line":287,"column":65}},"96":{"start":{"line":287,"column":22},"end":{"line":287,"column":65}},"97":{"start":{"line":288,"column":2},"end":{"line":288,"column":20}},"98":{"start":{"line":289,"column":2},"end":{"line":289,"column":20}},"99":{"start":{"line":290,"column":2},"end":{"line":290,"column":17}},"100":{"start":{"line":291,"column":2},"end":{"line":291,"column":32}},"101":{"start":{"line":292,"column":2},"end":{"line":294,"column":3}},"102":{"start":{"line":293,"column":4},"end":{"line":293,"column":58}},"103":{"start":{"line":295,"column":2},"end":{"line":295,"column":15}},"104":{"start":{"line":298,"column":0},"end":{"line":298,"column":25}},"105":{"start":{"line":299,"column":0},"end":{"line":299,"column":26}}},"branchMap":{"1":{"line":68,"type":"switch","locations":[{"start":{"line":69,"column":8},"end":{"line":87,"column":16}},{"start":{"line":88,"column":8},"end":{"line":106,"column":16}}]},"2":{"line":70,"type":"switch","locations":[{"start":{"line":71,"column":12},"end":{"line":81,"column":20}},{"start":{"line":82,"column":12},"end":{"line":85,"column":20}}]},"3":{"line":73,"type":"if","locations":[{"start":{"line":73,"column":14},"end":{"line":73,"column":14}},{"start":{"line":73,"column":14},"end":{"line":73,"column":14}}]},"4":{"line":89,"type":"switch","locations":[{"start":{"line":90,"column":12},"end":{"line":100,"column":20}},{"start":{"line":101,"column":12},"end":{"line":104,"column":20}}]},"5":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":14},"end":{"line":92,"column":14}},{"start":{"line":92,"column":14},"end":{"line":92,"column":14}}]},"6":{"line":130,"type":"switch","locations":[{"start":{"line":131,"column":8},"end":{"line":133,"column":16}},{"start":{"line":134,"column":8},"end":{"line":136,"column":16}}]},"7":{"line":145,"type":"switch","locations":[{"start":{"line":146,"column":8},"end":{"line":156,"column":16}},{"start":{"line":157,"column":8},"end":{"line":159,"column":16}}]},"8":{"line":148,"type":"if","locations":[{"start":{"line":148,"column":10},"end":{"line":148,"column":10}},{"start":{"line":148,"column":10},"end":{"line":148,"column":10}}]},"9":{"line":193,"type":"if","locations":[{"start":{"line":193,"column":4},"end":{"line":193,"column":4}},{"start":{"line":193,"column":4},"end":{"line":193,"column":4}}]},"10":{"line":197,"type":"if","locations":[{"start":{"line":197,"column":4},"end":{"line":197,"column":4}},{"start":{"line":197,"column":4},"end":{"line":197,"column":4}}]},"11":{"line":200,"type":"if","locations":[{"start":{"line":200,"column":4},"end":{"line":200,"column":4}},{"start":{"line":200,"column":4},"end":{"line":200,"column":4}}]},"12":{"line":200,"type":"binary-expr","locations":[{"start":{"line":200,"column":8},"end":{"line":200,"column":22}},{"start":{"line":200,"column":26},"end":{"line":200,"column":54}}]},"13":{"line":205,"type":"if","locations":[{"start":{"line":205,"column":4},"end":{"line":205,"column":4}},{"start":{"line":205,"column":4},"end":{"line":205,"column":4}}]},"14":{"line":206,"type":"cond-expr","locations":[{"start":{"line":206,"column":19},"end":{"line":206,"column":36}},{"start":{"line":206,"column":39},"end":{"line":206,"column":40}}]},"15":{"line":208,"type":"if","locations":[{"start":{"line":208,"column":4},"end":{"line":208,"column":4}},{"start":{"line":208,"column":4},"end":{"line":208,"column":4}}]},"16":{"line":209,"type":"cond-expr","locations":[{"start":{"line":209,"column":19},"end":{"line":209,"column":23}},{"start":{"line":209,"column":26},"end":{"line":209,"column":27}}]},"17":{"line":215,"type":"cond-expr","locations":[{"start":{"line":215,"column":20},"end":{"line":215,"column":27}},{"start":{"line":215,"column":30},"end":{"line":215,"column":31}}]},"18":{"line":216,"type":"cond-expr","locations":[{"start":{"line":216,"column":37},"end":{"line":216,"column":47}},{"start":{"line":216,"column":50},"end":{"line":216,"column":51}}]},"19":{"line":229,"type":"if","locations":[{"start":{"line":229,"column":2},"end":{"line":229,"column":2}},{"start":{"line":229,"column":2},"end":{"line":229,"column":2}}]},"20":{"line":233,"type":"if","locations":[{"start":{"line":233,"column":2},"end":{"line":233,"column":2}},{"start":{"line":233,"column":2},"end":{"line":233,"column":2}}]},"21":{"line":236,"type":"if","locations":[{"start":{"line":236,"column":2},"end":{"line":236,"column":2}},{"start":{"line":236,"column":2},"end":{"line":236,"column":2}}]},"22":{"line":236,"type":"binary-expr","locations":[{"start":{"line":236,"column":6},"end":{"line":236,"column":11}},{"start":{"line":236,"column":16},"end":{"line":236,"column":39}}]},"23":{"line":241,"type":"if","locations":[{"start":{"line":241,"column":2},"end":{"line":241,"column":2}},{"start":{"line":241,"column":2},"end":{"line":241,"column":2}}]},"24":{"line":242,"type":"cond-expr","locations":[{"start":{"line":242,"column":17},"end":{"line":242,"column":25}},{"start":{"line":242,"column":28},"end":{"line":242,"column":29}}]},"25":{"line":244,"type":"if","locations":[{"start":{"line":244,"column":2},"end":{"line":244,"column":2}},{"start":{"line":244,"column":2},"end":{"line":244,"column":2}}]},"26":{"line":245,"type":"cond-expr","locations":[{"start":{"line":245,"column":17},"end":{"line":245,"column":18}},{"start":{"line":245,"column":21},"end":{"line":245,"column":22}}]},"27":{"line":251,"type":"cond-expr","locations":[{"start":{"line":251,"column":14},"end":{"line":251,"column":16}},{"start":{"line":251,"column":19},"end":{"line":251,"column":20}}]},"28":{"line":252,"type":"cond-expr","locations":[{"start":{"line":252,"column":15},"end":{"line":252,"column":20}},{"start":{"line":252,"column":23},"end":{"line":252,"column":24}}]},"29":{"line":285,"type":"if","locations":[{"start":{"line":285,"column":2},"end":{"line":285,"column":2}},{"start":{"line":285,"column":2},"end":{"line":285,"column":2}}]},"30":{"line":286,"type":"if","locations":[{"start":{"line":286,"column":2},"end":{"line":286,"column":2}},{"start":{"line":286,"column":2},"end":{"line":286,"column":2}}]},"31":{"line":287,"type":"if","locations":[{"start":{"line":287,"column":2},"end":{"line":287,"column":2}},{"start":{"line":287,"column":2},"end":{"line":287,"column":2}}]}},"code":["'use strict';","","function factory (type, config, load, typed) {","","  var matrix = load(require('../../type/matrix/function/matrix'));","","  var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));","  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));","  var algorithm06 = load(require('../../type/matrix/utils/algorithm06'));","  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));","  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));","  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));","","  /**","   * Calculate the nth root of a value.","   * The principal nth root of a positive real number A, is the positive real","   * solution of the equation","   *","   *     x^root = A","   *","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *     math.nthRoot(a)","   *     math.nthRoot(a, root)","   *","   * Examples:","   *","   *     math.nthRoot(9, 2);    // returns 3, as 3^2 == 9","   *     math.sqrt(9);          // returns 3, as 3^2 == 9","   *     math.nthRoot(64, 3);   // returns 4, as 4^3 == 64","   *","   * See also:","   *","   *     sqrt, pow","   *","   * @param {number | BigNumber | Array | Matrix | Complex} a","   *              Value for which to calculate the nth root","   * @param {number | BigNumber} [root=2]    The root.","   * @return {number | Complex | Array | Matrix} Returns the nth root of `a`","   */","  var nthRoot = typed('nthRoot', {","    ","    'number': function (x) {","      return _nthRoot(x, 2);","    },","    'number, number': _nthRoot,","","    'BigNumber': function (x) {","      return _bigNthRoot(x, new type.BigNumber(2));","    },","    'Complex' : function(x) {","      return _nthComplexRoot(x, 2);","    }, ","    'Complex, number' : _nthComplexRoot,","    'BigNumber, BigNumber': _bigNthRoot,","","    'Array | Matrix': function (x) {","      return nthRoot(x, 2);","    },","    ","    'Matrix, Matrix': function (x, y) {","      // result","      var c;","","      // process matrix storage","      switch (x.storage()) {","        case 'sparse':","          switch (y.storage()) {","            case 'sparse':","              // density must be one (no zeros in matrix)","              if (y.density() === 1) {","                // sparse + sparse","                c = algorithm06(x, y, nthRoot);","              }","              else {","                // throw exception","                throw new Error('Root must be non-zero');","              }","              break;","            default:","              // sparse + dense","              c = algorithm02(y, x, nthRoot, true);","              break;","          }","          break;","        default:","          switch (y.storage()) {","            case 'sparse':","              // density must be one (no zeros in matrix)","              if (y.density() === 1) {","                // dense + sparse","                c = algorithm01(x, y, nthRoot, false);","              }","              else {","                // throw exception","                throw new Error('Root must be non-zero');","              }","              break;","            default:","              // dense + dense","              c = algorithm13(x, y, nthRoot);","              break;","          }","          break;","      }","      return c;","    },","","    'Array, Array': function (x, y) {","      // use matrix implementation","      return nthRoot(matrix(x), matrix(y)).valueOf();","    },","","    'Array, Matrix': function (x, y) {","      // use matrix implementation","      return nthRoot(matrix(x), y);","    },","","    'Matrix, Array': function (x, y) {","      // use matrix implementation","      return nthRoot(x, matrix(y));","    },","    ","    'Matrix, number | BigNumber': function (x, y) {","      // result","      var c;","      // check storage format","      switch (x.storage()) {","        case 'sparse':","          c = algorithm11(x, y, nthRoot, false);","          break;","        default:","          c = algorithm14(x, y, nthRoot, false);","          break;","      }","      return c;","    },","","    'number | BigNumber, Matrix': function (x, y) {","      // result","      var c;","      // check storage format","      switch (y.storage()) {","        case 'sparse':","          // density must be one (no zeros in matrix)","          if (y.density() === 1) {","            // sparse - scalar","            c = algorithm11(y, x, nthRoot, true);","          }","          else {","            // throw exception","            throw new Error('Root must be non-zero');","          }","          break;","        default:","          c = algorithm14(y, x, nthRoot, true);","          break;","      }","      return c;","    },","","    'Array, number | BigNumber': function (x, y) {","      // use matrix implementation","      return nthRoot(matrix(x), y).valueOf();","    },","","    'number | BigNumber, Array': function (x, y) {","      // use matrix implementation","      return nthRoot(x, matrix(y)).valueOf();","    }","  });","","  nthRoot.toTex = {2: '\\\\sqrt[${args[1]}]{${args[0]}}'};","","  return nthRoot;","","  /**","   * Calculate the nth root of a for BigNumbers, solve x^root == a","   * http://rosettacode.org/wiki/Nth_root#JavaScript","   * @param {BigNumber} a","   * @param {BigNumber} root","   * @private","   */","  function _bigNthRoot(a, root) {","    var precision = type.BigNumber.precision;","    var Big = type.BigNumber.clone({precision: precision + 2});","    var zero = new type.BigNumber(0);","","    var one = new Big(1);","    var inv = root.isNegative();","    if (inv) {","      root = root.neg();","    }","","    if (root.isZero()) {","      throw new Error('Root must be non-zero');","    }","    if (a.isNegative() && !root.abs().mod(2).equals(1)) {","      throw new Error('Root must be odd when a is negative.');","    }","","    // edge cases zero and infinity","    if (a.isZero()) {","      return inv ? new Big(Infinity) : 0;","    }","    if (!a.isFinite()) {","      return inv ? zero : a;","    }","","    var x = a.abs().pow(one.div(root));","    // If a < 0, we require that root is an odd integer,","    // so (-1) ^ (1/root) = -1","    x = a.isNeg() ? x.neg() : x;","    return new type.BigNumber((inv ? one.div(x) : x).toPrecision(precision));","  }","}","","/**"," * Calculate the nth root of a, solve x^root == a"," * http://rosettacode.org/wiki/Nth_root#JavaScript"," * @param {number} a"," * @param {number} root"," * @private"," */","function _nthRoot(a, root) {","  var inv = root < 0;","  if (inv) {","    root = -root;","  }","","  if (root === 0) {","    throw new Error('Root must be non-zero');","  }","  if (a < 0 && (Math.abs(root) % 2 != 1)) {","    throw new Error('Root must be odd when a is negative.');","  }","","  // edge cases zero and infinity","  if (a == 0) {","    return inv ? Infinity : 0;","  }","  if (!isFinite(a)) {","    return inv ? 0 : a;","  }","","  var x = Math.pow(Math.abs(a), 1/root);","  // If a < 0, we require that root is an odd integer,","  // so (-1) ^ (1/root) = -1","  x = a < 0 ? -x : x;","  return inv ? 1 / x : x;","","  // Very nice algorithm, but fails with nthRoot(-2, 3).","  // Newton's method has some well-known problems at times:","  // https://en.wikipedia.org/wiki/Newton%27s_method#Failure_analysis","  /*","  var x = 1; // Initial guess","  var xPrev = 1;","  var i = 0;","  var iMax = 10000;","  do {","    var delta = (a / Math.pow(x, root - 1) - x) / root;","    xPrev = x;","    x = x + delta;","    i++;","  }","  while (xPrev !== x && i < iMax);","","  if (xPrev !== x) {","    throw new Error('Function nthRoot failed to converge');","  }","","  return inv ? 1 / x : x;","  */","}","","/**"," * Calculate the nth root of a Complex Number a using De Moviers Theorem."," * @param  {Complex} a"," * @param  {number} root"," * @return {Array} array or n Complex Roots in Polar Form."," */","function _nthComplexRoot(a, root) {","  if (root < 0) throw new Error('Root must be greater than zero');","  if (root === 0) throw new Error('Root must be non-zero');","  if (root % 1 !== 0) throw new Error('Root must be an integer');  ","  var arg = a.arg();","  var abs = a.abs();","  var roots = [];","  var r = Math.pow(abs, 1/root);","  for(var k = 0; k < root; k++) {","    roots.push({r: r, phi: (arg + 2 * Math.PI * k)/root});","  }","  return roots;","}","","exports.name = 'nthRoot';","exports.factory = factory;",""],"l":{"3":1,"5":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"43":0,"46":0,"51":0,"54":0,"60":0,"65":0,"68":0,"70":0,"73":0,"75":0,"79":0,"81":0,"84":0,"85":0,"87":0,"89":0,"92":0,"94":0,"98":0,"100":0,"103":0,"104":0,"106":0,"108":0,"113":0,"118":0,"123":0,"128":0,"130":0,"132":0,"133":0,"135":0,"136":0,"138":0,"143":0,"145":0,"148":0,"150":0,"154":0,"156":0,"158":0,"159":0,"161":0,"166":0,"171":0,"175":0,"177":0,"186":1,"187":0,"188":0,"189":0,"191":0,"192":0,"193":0,"194":0,"197":0,"198":0,"200":0,"201":0,"205":0,"206":0,"208":0,"209":0,"212":0,"215":0,"216":0,"227":1,"228":0,"229":0,"230":0,"233":0,"234":0,"236":0,"237":0,"241":0,"242":0,"244":0,"245":0,"248":0,"251":0,"252":0,"284":1,"285":0,"286":0,"287":0,"288":0,"289":0,"290":0,"291":0,"292":0,"293":0,"295":0,"298":1,"299":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/pow.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/pow.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":1,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":1,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":1,"51":0,"52":0,"53":0,"54":1,"55":1},"b":{"1":[0,0],"2":[0,0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"fnMap":{"1":{"name":"factory","line":6,"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":45}}},"2":{"name":"(anonymous_2)","line":49,"loc":{"start":{"line":49,"column":24},"end":{"line":49,"column":40}}},"3":{"name":"(anonymous_3)","line":53,"loc":{"start":{"line":53,"column":28},"end":{"line":53,"column":44}}},"4":{"name":"(anonymous_4)","line":62,"loc":{"start":{"line":62,"column":26},"end":{"line":62,"column":42}}},"5":{"name":"(anonymous_5)","line":78,"loc":{"start":{"line":78,"column":24},"end":{"line":78,"column":40}}},"6":{"name":"(anonymous_6)","line":84,"loc":{"start":{"line":84,"column":25},"end":{"line":84,"column":41}}},"7":{"name":"(anonymous_7)","line":88,"loc":{"start":{"line":88,"column":20},"end":{"line":88,"column":36}}},"8":{"name":"_pow","line":101,"loc":{"start":{"line":101,"column":2},"end":{"line":101,"column":22}}},"9":{"name":"_powArray","line":138,"loc":{"start":{"line":138,"column":2},"end":{"line":138,"column":27}}},"10":{"name":"_powMatrix","line":170,"loc":{"start":{"line":170,"column":2},"end":{"line":170,"column":29}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":45}},"3":{"start":{"line":6,"column":0},"end":{"line":181,"column":1}},"4":{"start":{"line":7,"column":2},"end":{"line":7,"column":43}},"5":{"start":{"line":8,"column":2},"end":{"line":8,"column":43}},"6":{"start":{"line":9,"column":2},"end":{"line":9,"column":45}},"7":{"start":{"line":10,"column":2},"end":{"line":10,"column":66}},"8":{"start":{"line":11,"column":2},"end":{"line":11,"column":72}},"9":{"start":{"line":12,"column":2},"end":{"line":12,"column":50}},"10":{"start":{"line":46,"column":2},"end":{"line":92,"column":5}},"11":{"start":{"line":50,"column":6},"end":{"line":50,"column":22}},"12":{"start":{"line":54,"column":6},"end":{"line":59,"column":7}},"13":{"start":{"line":55,"column":8},"end":{"line":55,"column":24}},"14":{"start":{"line":58,"column":8},"end":{"line":58,"column":70}},"15":{"start":{"line":63,"column":6},"end":{"line":73,"column":6}},"16":{"start":{"line":64,"column":8},"end":{"line":69,"column":9}},"17":{"start":{"line":65,"column":10},"end":{"line":65,"column":96}},"18":{"start":{"line":68,"column":10},"end":{"line":68,"column":48}},"19":{"start":{"line":72,"column":8},"end":{"line":72,"column":24}},"20":{"start":{"line":79,"column":6},"end":{"line":79,"column":40}},"21":{"start":{"line":85,"column":6},"end":{"line":85,"column":41}},"22":{"start":{"line":89,"column":6},"end":{"line":89,"column":22}},"23":{"start":{"line":101,"column":2},"end":{"line":129,"column":3}},"24":{"start":{"line":105,"column":4},"end":{"line":121,"column":5}},"25":{"start":{"line":107,"column":6},"end":{"line":118,"column":7}},"26":{"start":{"line":108,"column":8},"end":{"line":108,"column":32}},"27":{"start":{"line":109,"column":8},"end":{"line":109,"column":33}},"28":{"start":{"line":110,"column":8},"end":{"line":114,"column":9}},"29":{"start":{"line":111,"column":10},"end":{"line":113,"column":11}},"30":{"start":{"line":112,"column":12},"end":{"line":112,"column":66}},"31":{"start":{"line":123,"column":4},"end":{"line":128,"column":5}},"32":{"start":{"line":124,"column":6},"end":{"line":124,"column":28}},"33":{"start":{"line":127,"column":6},"end":{"line":127,"column":46}},"34":{"start":{"line":138,"column":2},"end":{"line":161,"column":3}},"35":{"start":{"line":139,"column":4},"end":{"line":141,"column":5}},"36":{"start":{"line":140,"column":6},"end":{"line":140,"column":88}},"37":{"start":{"line":143,"column":4},"end":{"line":143,"column":20}},"38":{"start":{"line":144,"column":4},"end":{"line":146,"column":5}},"39":{"start":{"line":145,"column":6},"end":{"line":145,"column":94}},"40":{"start":{"line":147,"column":4},"end":{"line":149,"column":5}},"41":{"start":{"line":148,"column":6},"end":{"line":148,"column":87}},"42":{"start":{"line":151,"column":4},"end":{"line":151,"column":34}},"43":{"start":{"line":152,"column":4},"end":{"line":152,"column":15}},"44":{"start":{"line":153,"column":4},"end":{"line":159,"column":5}},"45":{"start":{"line":154,"column":6},"end":{"line":156,"column":7}},"46":{"start":{"line":155,"column":8},"end":{"line":155,"column":32}},"47":{"start":{"line":157,"column":6},"end":{"line":157,"column":14}},"48":{"start":{"line":158,"column":6},"end":{"line":158,"column":28}},"49":{"start":{"line":160,"column":4},"end":{"line":160,"column":15}},"50":{"start":{"line":170,"column":2},"end":{"line":172,"column":3}},"51":{"start":{"line":171,"column":4},"end":{"line":171,"column":45}},"52":{"start":{"line":176,"column":2},"end":{"line":178,"column":4}},"53":{"start":{"line":180,"column":2},"end":{"line":180,"column":13}},"54":{"start":{"line":183,"column":0},"end":{"line":183,"column":21}},"55":{"start":{"line":184,"column":0},"end":{"line":184,"column":26}}},"branchMap":{"1":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":6},"end":{"line":54,"column":6}},{"start":{"line":54,"column":6},"end":{"line":54,"column":6}}]},"2":{"line":54,"type":"binary-expr","locations":[{"start":{"line":54,"column":10},"end":{"line":54,"column":23}},{"start":{"line":54,"column":27},"end":{"line":54,"column":33}},{"start":{"line":54,"column":37},"end":{"line":54,"column":55}}]},"3":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":6},"end":{"line":63,"column":6}},{"start":{"line":63,"column":6},"end":{"line":63,"column":6}}]},"4":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":8},"end":{"line":64,"column":8}},{"start":{"line":64,"column":8},"end":{"line":64,"column":8}}]},"5":{"line":105,"type":"if","locations":[{"start":{"line":105,"column":4},"end":{"line":105,"column":4}},{"start":{"line":105,"column":4},"end":{"line":105,"column":4}}]},"6":{"line":105,"type":"binary-expr","locations":[{"start":{"line":105,"column":8},"end":{"line":105,"column":26}},{"start":{"line":105,"column":30},"end":{"line":105,"column":43}},{"start":{"line":105,"column":47},"end":{"line":105,"column":52}}]},"7":{"line":110,"type":"if","locations":[{"start":{"line":110,"column":8},"end":{"line":110,"column":8}},{"start":{"line":110,"column":8},"end":{"line":110,"column":8}}]},"8":{"line":110,"type":"binary-expr","locations":[{"start":{"line":110,"column":11},"end":{"line":110,"column":21}},{"start":{"line":110,"column":25},"end":{"line":110,"column":57}}]},"9":{"line":111,"type":"if","locations":[{"start":{"line":111,"column":10},"end":{"line":111,"column":10}},{"start":{"line":111,"column":10},"end":{"line":111,"column":10}}]},"10":{"line":112,"type":"cond-expr","locations":[{"start":{"line":112,"column":40},"end":{"line":112,"column":41}},{"start":{"line":112,"column":44},"end":{"line":112,"column":46}}]},"11":{"line":123,"type":"if","locations":[{"start":{"line":123,"column":4},"end":{"line":123,"column":4}},{"start":{"line":123,"column":4},"end":{"line":123,"column":4}}]},"12":{"line":123,"type":"binary-expr","locations":[{"start":{"line":123,"column":8},"end":{"line":123,"column":20}},{"start":{"line":123,"column":24},"end":{"line":123,"column":30}},{"start":{"line":123,"column":34},"end":{"line":123,"column":52}}]},"13":{"line":139,"type":"if","locations":[{"start":{"line":139,"column":4},"end":{"line":139,"column":4}},{"start":{"line":139,"column":4},"end":{"line":139,"column":4}}]},"14":{"line":139,"type":"binary-expr","locations":[{"start":{"line":139,"column":8},"end":{"line":139,"column":21}},{"start":{"line":139,"column":25},"end":{"line":139,"column":30}}]},"15":{"line":144,"type":"if","locations":[{"start":{"line":144,"column":4},"end":{"line":144,"column":4}},{"start":{"line":144,"column":4},"end":{"line":144,"column":4}}]},"16":{"line":147,"type":"if","locations":[{"start":{"line":147,"column":4},"end":{"line":147,"column":4}},{"start":{"line":147,"column":4},"end":{"line":147,"column":4}}]},"17":{"line":154,"type":"if","locations":[{"start":{"line":154,"column":6},"end":{"line":154,"column":6}},{"start":{"line":154,"column":6},"end":{"line":154,"column":6}}]}},"code":["'use strict';","","var isInteger = require('../../utils/number').isInteger;","var size = require('../../utils/array').size;","","function factory (type, config, load, typed) {","  var latex = require('../../utils/latex');","  var eye = load(require('../matrix/eye'));","  var multiply = load(require('./multiply'));","  var matrix = load(require('../../type/matrix/function/matrix'));","  var fraction = load(require('../../type/fraction/function/fraction'));","  var number = load(require('../../type/number'));","","  /**","   * Calculates the power of x to y, `x ^ y`.","   * Matrix exponentiation is supported for square matrices `x`, and positive","   * integer exponents `y`.","   *","   * For cubic roots of negative numbers, the function returns the principal","   * root by default. In order to let the function return the real root,","   * math.js can be configured with `math.config({predictable: true})`.","   * To retrieve all cubic roots of a value, use `math.cbrt(x, true)`.","   *","   * Syntax:","   *","   *    math.pow(x, y)","   *","   * Examples:","   *","   *    math.pow(2, 3);               // returns number 8","   *","   *    var a = math.complex(2, 3);","   *    math.pow(a, 2)                // returns Complex -5 + 12i","   *","   *    var b = [[1, 2], [4, 3]];","   *    math.pow(b, 2);               // returns Array [[9, 8], [16, 17]]","   *","   * See also:","   *","   *    multiply, sqrt, cbrt, nthRoot","   *","   * @param  {number | BigNumber | Complex | Array | Matrix} x  The base","   * @param  {number | BigNumber | Complex} y                   The exponent","   * @return {number | BigNumber | Complex | Array | Matrix} The value of `x` to the power `y`","   */","  var pow = typed('pow', {","    'number, number': _pow,","","    'Complex, Complex': function (x, y) {","      return x.pow(y);","    },","","    'BigNumber, BigNumber': function (x, y) {","      if (y.isInteger() || x >= 0 || config.predictable) {","        return x.pow(y);","      }","      else {","        return new type.Complex(x.toNumber(), 0).pow(y.toNumber(), 0);","      }","    },","","    'Fraction, Fraction': function (x, y) {","      if (y.d !== 1) {","        if (config.predictable) {","          throw new Error('Function pow does not support non-integer exponents for fractions.');","        }","        else {","          return _pow(x.valueOf(), y.valueOf());","        }","      }","      else {","        return x.pow(y);","     }","    },","","    'Array, number': _powArray,","","    'Array, BigNumber': function (x, y) {","      return _powArray(x, y.toNumber());","    },","","    'Matrix, number': _powMatrix,","","    'Matrix, BigNumber': function (x, y) {","      return _powMatrix(x, y.toNumber());","    },","","    'Unit, number': function (x, y) {","      return x.pow(y);","    }","","  });","","  /**","   * Calculates the power of x to y, x^y, for two numbers.","   * @param {number} x","   * @param {number} y","   * @return {number | Complex} res","   * @private","   */","  function _pow(x, y) {","","    // Alternatively could define a 'realmode' config option or something, but","    // 'predictable' will work for now","    if (config.predictable && !isInteger(y) && x < 0) {","      // Check to see if y can be represented as a fraction","      try {","        var yFrac = fraction(y);","        var yNum = number(yFrac);","        if(y === yNum || Math.abs((y - yNum) / y) < 1e-14) {","          if(yFrac.d % 2 === 1) {","            return (yFrac.n % 2 === 0 ? 1 : -1) * Math.pow(-x, y);","          }","        }","      }","      catch (ex) {","        // fraction() throws an error if y is Infinity, etc.","      }","","      // Unable to express y as a fraction, so continue on","    }","","    if (isInteger(y) || x >= 0 || config.predictable) {","      return Math.pow(x, y);","    }","    else {","      return new type.Complex(x, 0).pow(y, 0);","    }","  }","","  /**","   * Calculate the power of a 2d array","   * @param {Array} x     must be a 2 dimensional, square matrix","   * @param {number} y    a positive, integer value","   * @returns {Array}","   * @private","   */","  function _powArray(x, y) {","    if (!isInteger(y) || y < 0) {","      throw new TypeError('For A^b, b must be a positive integer (value is ' + y + ')');","    }","    // verify that A is a 2 dimensional square matrix","    var s = size(x);","    if (s.length != 2) {","      throw new Error('For A^b, A must be 2 dimensional (A has ' + s.length + ' dimensions)');","    }","    if (s[0] != s[1]) {","      throw new Error('For A^b, A must be square (size is ' + s[0] + 'x' + s[1] + ')');","    }","","    var res = eye(s[0]).valueOf();","    var px = x;","    while (y >= 1) {","      if ((y & 1) == 1) {","        res = multiply(px, res);","      }","      y >>= 1;","      px = multiply(px, px);","    }","    return res;","  }","","  /**","   * Calculate the power of a 2d matrix","   * @param {Matrix} x     must be a 2 dimensional, square matrix","   * @param {number} y    a positive, integer value","   * @returns {Matrix}","   * @private","   */","  function _powMatrix (x, y) {","    return matrix(_powArray(x.valueOf(), y));","  }","","","","  pow.toTex = {","    2: '\\\\left(${args[0]}\\\\right)' + latex.operators['pow'] + '{${args[1]}}'","  };","","  return pow;","}","","exports.name = 'pow';","exports.factory = factory;",""],"l":{"3":1,"4":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"46":0,"50":0,"54":0,"55":0,"58":0,"63":0,"64":0,"65":0,"68":0,"72":0,"79":0,"85":0,"89":0,"101":1,"105":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"123":0,"124":0,"127":0,"138":1,"139":0,"140":0,"143":0,"144":0,"145":0,"147":0,"148":0,"151":0,"152":0,"153":0,"154":0,"155":0,"157":0,"158":0,"160":0,"170":1,"171":0,"176":0,"180":0,"183":1,"184":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/round.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/round.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":1,"59":0,"60":1,"61":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},"fnMap":{"1":{"name":"factory","line":9,"loc":{"start":{"line":9,"column":0},"end":{"line":9,"column":45}}},"2":{"name":"(anonymous_2)","line":53,"loc":{"start":{"line":53,"column":22},"end":{"line":53,"column":38}}},"3":{"name":"(anonymous_3)","line":60,"loc":{"start":{"line":60,"column":15},"end":{"line":60,"column":28}}},"4":{"name":"(anonymous_4)","line":64,"loc":{"start":{"line":64,"column":23},"end":{"line":64,"column":39}}},"5":{"name":"(anonymous_5)","line":70,"loc":{"start":{"line":70,"column":26},"end":{"line":70,"column":42}}},"6":{"name":"(anonymous_6)","line":77,"loc":{"start":{"line":77,"column":25},"end":{"line":77,"column":41}}},"7":{"name":"(anonymous_7)","line":83,"loc":{"start":{"line":83,"column":17},"end":{"line":83,"column":30}}},"8":{"name":"(anonymous_8)","line":87,"loc":{"start":{"line":87,"column":28},"end":{"line":87,"column":44}}},"9":{"name":"(anonymous_9)","line":93,"loc":{"start":{"line":93,"column":16},"end":{"line":93,"column":29}}},"10":{"name":"(anonymous_10)","line":97,"loc":{"start":{"line":97,"column":24},"end":{"line":97,"column":40}}},"11":{"name":"(anonymous_11)","line":102,"loc":{"start":{"line":102,"column":22},"end":{"line":102,"column":35}}},"12":{"name":"(anonymous_12)","line":107,"loc":{"start":{"line":107,"column":34},"end":{"line":107,"column":50}}},"13":{"name":"(anonymous_13)","line":122,"loc":{"start":{"line":122,"column":44},"end":{"line":122,"column":60}}},"14":{"name":"(anonymous_14)","line":142,"loc":{"start":{"line":142,"column":33},"end":{"line":142,"column":49}}},"15":{"name":"(anonymous_15)","line":147,"loc":{"start":{"line":147,"column":43},"end":{"line":147,"column":59}}},"16":{"name":"_round","line":169,"loc":{"start":{"line":169,"column":0},"end":{"line":169,"column":34}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":52}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":56}},"4":{"start":{"line":7,"column":0},"end":{"line":7,"column":71}},"5":{"start":{"line":9,"column":0},"end":{"line":159,"column":1}},"6":{"start":{"line":10,"column":2},"end":{"line":10,"column":66}},"7":{"start":{"line":11,"column":2},"end":{"line":11,"column":63}},"8":{"start":{"line":12,"column":2},"end":{"line":12,"column":47}},"9":{"start":{"line":14,"column":2},"end":{"line":14,"column":73}},"10":{"start":{"line":15,"column":2},"end":{"line":15,"column":73}},"11":{"start":{"line":16,"column":2},"end":{"line":16,"column":73}},"12":{"start":{"line":49,"column":2},"end":{"line":151,"column":5}},"13":{"start":{"line":54,"column":6},"end":{"line":54,"column":57}},"14":{"start":{"line":54,"column":28},"end":{"line":54,"column":56}},"15":{"start":{"line":55,"column":6},"end":{"line":55,"column":113}},"16":{"start":{"line":55,"column":28},"end":{"line":55,"column":112}},"17":{"start":{"line":57,"column":6},"end":{"line":57,"column":26}},"18":{"start":{"line":61,"column":6},"end":{"line":61,"column":23}},"19":{"start":{"line":65,"column":6},"end":{"line":65,"column":47}},"20":{"start":{"line":65,"column":18},"end":{"line":65,"column":46}},"21":{"start":{"line":67,"column":6},"end":{"line":67,"column":24}},"22":{"start":{"line":71,"column":6},"end":{"line":71,"column":56}},"23":{"start":{"line":71,"column":27},"end":{"line":71,"column":55}},"24":{"start":{"line":73,"column":6},"end":{"line":73,"column":28}},"25":{"start":{"line":74,"column":6},"end":{"line":74,"column":25}},"26":{"start":{"line":78,"column":6},"end":{"line":78,"column":56}},"27":{"start":{"line":78,"column":27},"end":{"line":78,"column":55}},"28":{"start":{"line":80,"column":6},"end":{"line":80,"column":65}},"29":{"start":{"line":84,"column":6},"end":{"line":84,"column":34}},"30":{"start":{"line":88,"column":6},"end":{"line":88,"column":56}},"31":{"start":{"line":88,"column":27},"end":{"line":88,"column":55}},"32":{"start":{"line":90,"column":6},"end":{"line":90,"column":45}},"33":{"start":{"line":94,"column":6},"end":{"line":94,"column":23}},"34":{"start":{"line":98,"column":6},"end":{"line":98,"column":47}},"35":{"start":{"line":98,"column":18},"end":{"line":98,"column":46}},"36":{"start":{"line":99,"column":6},"end":{"line":99,"column":24}},"37":{"start":{"line":104,"column":6},"end":{"line":104,"column":37}},"38":{"start":{"line":109,"column":6},"end":{"line":109,"column":12}},"39":{"start":{"line":111,"column":6},"end":{"line":118,"column":7}},"40":{"start":{"line":113,"column":10},"end":{"line":113,"column":46}},"41":{"start":{"line":114,"column":10},"end":{"line":114,"column":16}},"42":{"start":{"line":116,"column":10},"end":{"line":116,"column":46}},"43":{"start":{"line":117,"column":10},"end":{"line":117,"column":16}},"44":{"start":{"line":119,"column":6},"end":{"line":119,"column":15}},"45":{"start":{"line":124,"column":6},"end":{"line":137,"column":7}},"46":{"start":{"line":126,"column":8},"end":{"line":126,"column":14}},"47":{"start":{"line":128,"column":8},"end":{"line":135,"column":9}},"48":{"start":{"line":130,"column":12},"end":{"line":130,"column":47}},"49":{"start":{"line":131,"column":12},"end":{"line":131,"column":18}},"50":{"start":{"line":133,"column":12},"end":{"line":133,"column":47}},"51":{"start":{"line":134,"column":12},"end":{"line":134,"column":18}},"52":{"start":{"line":136,"column":8},"end":{"line":136,"column":17}},"53":{"start":{"line":139,"column":6},"end":{"line":139,"column":42}},"54":{"start":{"line":144,"column":6},"end":{"line":144,"column":63}},"55":{"start":{"line":149,"column":6},"end":{"line":149,"column":62}},"56":{"start":{"line":153,"column":2},"end":{"line":156,"column":4}},"57":{"start":{"line":158,"column":2},"end":{"line":158,"column":15}},"58":{"start":{"line":169,"column":0},"end":{"line":171,"column":1}},"59":{"start":{"line":170,"column":2},"end":{"line":170,"column":46}},"60":{"start":{"line":173,"column":0},"end":{"line":173,"column":23}},"61":{"start":{"line":174,"column":0},"end":{"line":174,"column":26}}},"branchMap":{"1":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":6},"end":{"line":54,"column":6}},{"start":{"line":54,"column":6},"end":{"line":54,"column":6}}]},"2":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":6},"end":{"line":55,"column":6}},{"start":{"line":55,"column":6},"end":{"line":55,"column":6}}]},"3":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":10},"end":{"line":55,"column":15}},{"start":{"line":55,"column":19},"end":{"line":55,"column":25}}]},"4":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":6},"end":{"line":65,"column":6}},{"start":{"line":65,"column":6},"end":{"line":65,"column":6}}]},"5":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":6},"end":{"line":71,"column":6}},{"start":{"line":71,"column":6},"end":{"line":71,"column":6}}]},"6":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":6},"end":{"line":78,"column":6}},{"start":{"line":78,"column":6},"end":{"line":78,"column":6}}]},"7":{"line":88,"type":"if","locations":[{"start":{"line":88,"column":6},"end":{"line":88,"column":6}},{"start":{"line":88,"column":6},"end":{"line":88,"column":6}}]},"8":{"line":98,"type":"if","locations":[{"start":{"line":98,"column":6},"end":{"line":98,"column":6}},{"start":{"line":98,"column":6},"end":{"line":98,"column":6}}]},"9":{"line":111,"type":"switch","locations":[{"start":{"line":112,"column":8},"end":{"line":114,"column":16}},{"start":{"line":115,"column":8},"end":{"line":117,"column":16}}]},"10":{"line":124,"type":"if","locations":[{"start":{"line":124,"column":6},"end":{"line":124,"column":6}},{"start":{"line":124,"column":6},"end":{"line":124,"column":6}}]},"11":{"line":128,"type":"switch","locations":[{"start":{"line":129,"column":10},"end":{"line":131,"column":18}},{"start":{"line":132,"column":10},"end":{"line":134,"column":18}}]}},"code":["'use strict';","","var isInteger = require('../../utils/number').isInteger;","var toFixed = require('../../utils/number').toFixed;","var deepMap = require('../../utils/collection/deepMap');","","var NO_INT = 'Number of decimals in function round must be an integer';","","function factory (type, config, load, typed) {","  var matrix = load(require('../../type/matrix/function/matrix'));","  var equalScalar = load(require('../relational/equalScalar'));","  var zeros = load(require('../matrix/zeros'));","","  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));","  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));","  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));","  ","  /**","   * Round a value towards the nearest integer.","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.round(x)","   *    math.round(x, n)","   *","   * Examples:","   *","   *    math.round(3.2);              // returns number 3","   *    math.round(3.8);              // returns number 4","   *    math.round(-4.2);             // returns number -4","   *    math.round(-4.7);             // returns number -5","   *    math.round(math.pi, 3);       // returns number 3.142","   *    math.round(123.45678, 2);     // returns number 123.46","   *","   *    var c = math.complex(3.2, -2.7);","   *    math.round(c);                // returns Complex 3 - 3i","   *","   *    math.round([3.2, 3.8, -4.7]); // returns Array [3, 4, -5]","   *","   * See also:","   *","   *    ceil, fix, floor","   *","   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded","   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals","   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value","   */","  var round = typed('round', {","","    'number': Math.round,","","    'number, number': function (x, n) {","      if (!isInteger(n))   {throw new TypeError(NO_INT);}","      if (n < 0 || n > 15) {throw new Error('Number of decimals in function round must be in te range of 0-15');}","","      return _round(x, n);","    },","","    'Complex': function (x) {","      return x.round();","    },","","    'Complex, number': function (x, n) {","      if (n % 1) {throw new TypeError(NO_INT);}","      ","      return x.round(n);","    },","","    'Complex, BigNumber': function (x, n) {","      if (!n.isInteger()) {throw new TypeError(NO_INT);}","","      var _n = n.toNumber();","      return x.round(_n);","    },","","    'number, BigNumber': function (x, n) {","      if (!n.isInteger()) {throw new TypeError(NO_INT);}","","      return new type.BigNumber(x).toDecimalPlaces(n.toNumber());","    },","","    'BigNumber': function (x) {","      return x.toDecimalPlaces(0);","    },","","    'BigNumber, BigNumber': function (x, n) {","      if (!n.isInteger()) {throw new TypeError(NO_INT);}","","      return x.toDecimalPlaces(n.toNumber());","    },","","    'Fraction': function (x) {","      return x.round();","    },","","    'Fraction, number': function (x, n) {","      if (n % 1) {throw new TypeError(NO_INT);}","      return x.round(n);","    },","","    'Array | Matrix': function (x) {","      // deep map collection, skip zeros since round(0) = 0","      return deepMap(x, round, true);","    },","","    'Matrix, number | BigNumber': function (x, y) {","      // result","      var c;","      // check storage format","      switch (x.storage()) {","        case 'sparse':","          c = algorithm11(x, y, round, false);","          break;","        default:","          c = algorithm14(x, y, round, false);","          break;","      }","      return c;","    },","","    'number | Complex | BigNumber, Matrix': function (x, y) {","      // check scalar is zero","      if (!equalScalar(x, 0)) {","        // result","        var c;","        // check storage format","        switch (y.storage()) {","          case 'sparse':","            c = algorithm12(y, x, round, true);","            break;","          default:","            c = algorithm14(y, x, round, true);","            break;","        }","        return c;","      }","      // do not execute algorithm, result will be a zero matrix","      return zeros(y.size(), y.storage());","    },","","    'Array, number | BigNumber': function (x, y) {","      // use matrix implementation","      return algorithm14(matrix(x), y, round, false).valueOf();","    },","","    'number | Complex | BigNumber, Array': function (x, y) {","      // use matrix implementation","      return algorithm14(matrix(y), x, round, true).valueOf();","    }","  });","","  round.toTex = {","    1: '\\\\left\\\\lfloor${args[0]}\\\\right\\\\rceil',","    2: undefined  // use default template","  };","","  return round;","}","","/**"," * round a number to the given number of decimals, or to zero if decimals is"," * not provided"," * @param {number} value"," * @param {number} decimals       number of decimals, between 0 and 15 (0 by default)"," * @return {number} roundedValue"," * @private"," */","function _round (value, decimals) {","  return parseFloat(toFixed(value, decimals));","}","","exports.name = 'round';","exports.factory = factory;",""],"l":{"3":1,"4":1,"5":1,"7":1,"9":1,"10":0,"11":0,"12":0,"14":0,"15":0,"16":0,"49":0,"54":0,"55":0,"57":0,"61":0,"65":0,"67":0,"71":0,"73":0,"74":0,"78":0,"80":0,"84":0,"88":0,"90":0,"94":0,"98":0,"99":0,"104":0,"109":0,"111":0,"113":0,"114":0,"116":0,"117":0,"119":0,"124":0,"126":0,"128":0,"130":0,"131":0,"133":0,"134":0,"136":0,"139":0,"144":0,"149":0,"153":0,"158":0,"169":1,"170":0,"173":1,"174":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/sign.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/sign.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1,"13":1},"b":{},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"factory","line":6,"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":45}}},"2":{"name":"(anonymous_2)","line":40,"loc":{"start":{"line":40,"column":15},"end":{"line":40,"column":28}}},"3":{"name":"(anonymous_3)","line":44,"loc":{"start":{"line":44,"column":17},"end":{"line":44,"column":30}}},"4":{"name":"(anonymous_4)","line":48,"loc":{"start":{"line":48,"column":16},"end":{"line":48,"column":29}}},"5":{"name":"(anonymous_5)","line":52,"loc":{"start":{"line":52,"column":22},"end":{"line":52,"column":35}}},"6":{"name":"(anonymous_6)","line":57,"loc":{"start":{"line":57,"column":12},"end":{"line":57,"column":24}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":43}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":56}},"3":{"start":{"line":6,"column":0},"end":{"line":65,"column":1}},"4":{"start":{"line":37,"column":2},"end":{"line":60,"column":5}},"5":{"start":{"line":41,"column":6},"end":{"line":41,"column":22}},"6":{"start":{"line":45,"column":6},"end":{"line":45,"column":42}},"7":{"start":{"line":49,"column":6},"end":{"line":49,"column":39}},"8":{"start":{"line":54,"column":6},"end":{"line":54,"column":36}},"9":{"start":{"line":58,"column":6},"end":{"line":58,"column":27}},"10":{"start":{"line":62,"column":2},"end":{"line":62,"column":65}},"11":{"start":{"line":64,"column":2},"end":{"line":64,"column":14}},"12":{"start":{"line":67,"column":0},"end":{"line":67,"column":22}},"13":{"start":{"line":68,"column":0},"end":{"line":68,"column":26}}},"branchMap":{},"code":["'use strict';","","var number = require('../../utils/number');","var deepMap = require('../../utils/collection/deepMap');","","function factory (type, config, load, typed) {","  /**","   * Compute the sign of a value. The sign of a value x is:","   *","   * -  1 when x > 1","   * - -1 when x < 0","   * -  0 when x == 0","   *","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.sign(x)","   *","   * Examples:","   *","   *    math.sign(3.5);               // returns 1","   *    math.sign(-4.2);              // returns -1","   *    math.sign(0);                 // returns 0","   *","   *    math.sign([3, 5, -2, 0, 2]);  // returns [1, 1, -1, 0, 1]","   *","   * See also:","   *","   *    abs","   *","   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x","   *            The number for which to determine the sign","   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}e","   *            The sign of `x`","   */","  var sign = typed('sign', {","    'number': number.sign,","","    'Complex': function (x) {","      return x.sign();","    },","","    'BigNumber': function (x) {","      return new type.BigNumber(x.cmp(0));","    },","","    'Fraction': function (x) {","      return new type.Fraction(x.s, 1);","    },","","    'Array | Matrix': function (x) {","      // deep map collection, skip zeros since sign(0) = 0","      return deepMap(x, sign, true);","    },","","    'Unit': function(x) {","      return sign(x.value);","    }","  });","","  sign.toTex = {1: '\\\\mathrm{${name}}\\\\left(${args[0]}\\\\right)'};","","  return sign;","}","","exports.name = 'sign';","exports.factory = factory;","",""],"l":{"3":1,"4":1,"6":1,"37":0,"41":0,"45":0,"49":0,"54":0,"58":0,"62":0,"64":0,"67":1,"68":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/sqrt.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/sqrt.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1,"17":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":15},"end":{"line":33,"column":28}}},"3":{"name":"(anonymous_3)","line":37,"loc":{"start":{"line":37,"column":17},"end":{"line":37,"column":30}}},"4":{"name":"(anonymous_4)","line":47,"loc":{"start":{"line":47,"column":22},"end":{"line":47,"column":35}}},"5":{"name":"(anonymous_5)","line":52,"loc":{"start":{"line":52,"column":12},"end":{"line":52,"column":25}}},"6":{"name":"_sqrtNumber","line":65,"loc":{"start":{"line":65,"column":2},"end":{"line":65,"column":26}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":77,"column":1}},"3":{"start":{"line":30,"column":2},"end":{"line":57,"column":5}},"4":{"start":{"line":34,"column":8},"end":{"line":34,"column":24}},"5":{"start":{"line":38,"column":6},"end":{"line":44,"column":7}},"6":{"start":{"line":39,"column":8},"end":{"line":39,"column":24}},"7":{"start":{"line":43,"column":8},"end":{"line":43,"column":41}},"8":{"start":{"line":49,"column":6},"end":{"line":49,"column":36}},"9":{"start":{"line":54,"column":6},"end":{"line":54,"column":24}},"10":{"start":{"line":65,"column":2},"end":{"line":72,"column":3}},"11":{"start":{"line":66,"column":4},"end":{"line":71,"column":5}},"12":{"start":{"line":67,"column":6},"end":{"line":67,"column":26}},"13":{"start":{"line":70,"column":6},"end":{"line":70,"column":43}},"14":{"start":{"line":74,"column":2},"end":{"line":74,"column":41}},"15":{"start":{"line":76,"column":2},"end":{"line":76,"column":14}},"16":{"start":{"line":79,"column":0},"end":{"line":79,"column":22}},"17":{"start":{"line":80,"column":0},"end":{"line":80,"column":26}}},"branchMap":{"1":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":6},"end":{"line":38,"column":6}},{"start":{"line":38,"column":6},"end":{"line":38,"column":6}}]},"2":{"line":38,"type":"binary-expr","locations":[{"start":{"line":38,"column":10},"end":{"line":38,"column":25}},{"start":{"line":38,"column":29},"end":{"line":38,"column":47}}]},"3":{"line":66,"type":"if","locations":[{"start":{"line":66,"column":4},"end":{"line":66,"column":4}},{"start":{"line":66,"column":4},"end":{"line":66,"column":4}}]},"4":{"line":66,"type":"binary-expr","locations":[{"start":{"line":66,"column":8},"end":{"line":66,"column":14}},{"start":{"line":66,"column":18},"end":{"line":66,"column":36}}]}},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","","function factory (type, config, load, typed) {","  /**","   * Calculate the square root of a value.","   *","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.sqrt(x)","   *","   * Examples:","   *","   *    math.sqrt(25);                // returns 5","   *    math.square(5);               // returns 25","   *    math.sqrt(-4);                // returns Complex 2i","   *","   * See also:","   *","   *    square, multiply, cube, cbrt","   *","   * @param {number | BigNumber | Complex | Array | Matrix | Unit} x","   *            Value for which to calculate the square root.","   * @return {number | BigNumber | Complex | Array | Matrix | Unit}","   *            Returns the square root of `x`","   */","  var sqrt = typed('sqrt', {","    'number': _sqrtNumber,","","    'Complex': function (x) {","        return x.sqrt();","    },","","    'BigNumber': function (x) {","      if (!x.isNegative() || config.predictable) {","        return x.sqrt();","      }","      else {","        // negative value -> downgrade to number to do complex value computation","        return _sqrtNumber(x.toNumber());","      }","    },","","    'Array | Matrix': function (x) {","      // deep map collection, skip zeros since sqrt(0) = 0","      return deepMap(x, sqrt, true);","    },","","    'Unit': function (x) {","      // Someday will work for complex units when they are implemented","      return x.pow(0.5);","    }","","  });","","  /**","   * Calculate sqrt for a number","   * @param {number} x","   * @returns {number | Complex} Returns the square root of x","   * @private","   */","  function _sqrtNumber(x) {","    if (x >= 0 || config.predictable) {","      return Math.sqrt(x);","    }","    else {","      return new type.Complex(x, 0).sqrt();","    }","  }","","  sqrt.toTex = {1: '\\\\sqrt{${args[0]}}'};","","  return sqrt;","}","","exports.name = 'sqrt';","exports.factory = factory;",""],"l":{"3":1,"5":1,"30":0,"34":0,"38":0,"39":0,"43":0,"49":0,"54":0,"65":1,"66":0,"67":0,"70":0,"74":0,"76":0,"79":1,"80":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/square.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/square.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1,"13":1},"b":{},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":14},"end":{"line":33,"column":27}}},"3":{"name":"(anonymous_3)","line":37,"loc":{"start":{"line":37,"column":15},"end":{"line":37,"column":28}}},"4":{"name":"(anonymous_4)","line":41,"loc":{"start":{"line":41,"column":17},"end":{"line":41,"column":30}}},"5":{"name":"(anonymous_5)","line":45,"loc":{"start":{"line":45,"column":16},"end":{"line":45,"column":29}}},"6":{"name":"(anonymous_6)","line":49,"loc":{"start":{"line":49,"column":22},"end":{"line":49,"column":35}}},"7":{"name":"(anonymous_7)","line":54,"loc":{"start":{"line":54,"column":12},"end":{"line":54,"column":24}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":62,"column":1}},"3":{"start":{"line":32,"column":2},"end":{"line":57,"column":5}},"4":{"start":{"line":34,"column":6},"end":{"line":34,"column":19}},"5":{"start":{"line":38,"column":6},"end":{"line":38,"column":22}},"6":{"start":{"line":42,"column":6},"end":{"line":42,"column":24}},"7":{"start":{"line":46,"column":6},"end":{"line":46,"column":22}},"8":{"start":{"line":51,"column":6},"end":{"line":51,"column":38}},"9":{"start":{"line":55,"column":6},"end":{"line":55,"column":22}},"10":{"start":{"line":59,"column":2},"end":{"line":59,"column":52}},"11":{"start":{"line":61,"column":2},"end":{"line":61,"column":16}},"12":{"start":{"line":64,"column":0},"end":{"line":64,"column":24}},"13":{"start":{"line":65,"column":0},"end":{"line":65,"column":26}}},"branchMap":{},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","","function factory (type, config, load, typed) {","  /**","   * Compute the square of a value, `x * x`.","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.square(x)","   *","   * Examples:","   *","   *    math.square(2);           // returns number 4","   *    math.square(3);           // returns number 9","   *    math.pow(3, 2);           // returns number 9","   *    math.multiply(3, 3);      // returns number 9","   *","   *    math.square([1, 2, 3, 4]);  // returns Array [1, 4, 9, 16]","   *","   * See also:","   *","   *    multiply, cube, sqrt, pow","   *","   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x","   *            Number for which to calculate the square","   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}","   *            Squared value","   */","  var square = typed('square', {","    'number': function (x) {","      return x * x;","    },","","    'Complex': function (x) {","      return x.mul(x);","    },","","    'BigNumber': function (x) {","      return x.times(x);","    },","","    'Fraction': function (x) {","      return x.mul(x);","    },","","    'Array | Matrix': function (x) {","      // deep map collection, skip zeros since square(0) = 0","      return deepMap(x, square, true);","    },","","    'Unit': function(x) {","      return x.pow(2);","    }","  });","","  square.toTex = {1: '\\\\left(${args[0]}\\\\right)^2'};","","  return square;","}","","exports.name = 'square';","exports.factory = factory;",""],"l":{"3":1,"5":1,"32":0,"34":0,"38":0,"42":0,"46":0,"51":0,"55":0,"59":0,"61":0,"64":1,"65":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/subtract.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/subtract.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":1,"69":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":56,"loc":{"start":{"line":56,"column":22},"end":{"line":56,"column":38}}},"3":{"name":"(anonymous_3)","line":60,"loc":{"start":{"line":60,"column":24},"end":{"line":60,"column":40}}},"4":{"name":"(anonymous_4)","line":64,"loc":{"start":{"line":64,"column":28},"end":{"line":64,"column":44}}},"5":{"name":"(anonymous_5)","line":68,"loc":{"start":{"line":68,"column":26},"end":{"line":68,"column":42}}},"6":{"name":"(anonymous_6)","line":72,"loc":{"start":{"line":72,"column":18},"end":{"line":72,"column":34}}},"7":{"name":"(anonymous_7)","line":92,"loc":{"start":{"line":92,"column":22},"end":{"line":92,"column":38}}},"8":{"name":"(anonymous_8)","line":134,"loc":{"start":{"line":134,"column":20},"end":{"line":134,"column":36}}},"9":{"name":"(anonymous_9)","line":139,"loc":{"start":{"line":139,"column":21},"end":{"line":139,"column":37}}},"10":{"name":"(anonymous_10)","line":144,"loc":{"start":{"line":144,"column":21},"end":{"line":144,"column":37}}},"11":{"name":"(anonymous_11)","line":149,"loc":{"start":{"line":149,"column":19},"end":{"line":149,"column":35}}},"12":{"name":"(anonymous_12)","line":165,"loc":{"start":{"line":165,"column":19},"end":{"line":165,"column":35}}},"13":{"name":"(anonymous_13)","line":180,"loc":{"start":{"line":180,"column":18},"end":{"line":180,"column":34}}},"14":{"name":"(anonymous_14)","line":185,"loc":{"start":{"line":185,"column":18},"end":{"line":185,"column":34}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":59}},"2":{"start":{"line":5,"column":0},"end":{"line":196,"column":1}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":43}},"4":{"start":{"line":8,"column":2},"end":{"line":8,"column":66}},"5":{"start":{"line":9,"column":2},"end":{"line":9,"column":47}},"6":{"start":{"line":10,"column":2},"end":{"line":10,"column":49}},"7":{"start":{"line":12,"column":2},"end":{"line":12,"column":73}},"8":{"start":{"line":13,"column":2},"end":{"line":13,"column":73}},"9":{"start":{"line":14,"column":2},"end":{"line":14,"column":73}},"10":{"start":{"line":15,"column":2},"end":{"line":15,"column":73}},"11":{"start":{"line":16,"column":2},"end":{"line":16,"column":73}},"12":{"start":{"line":17,"column":2},"end":{"line":17,"column":73}},"13":{"start":{"line":54,"column":2},"end":{"line":189,"column":5}},"14":{"start":{"line":57,"column":6},"end":{"line":57,"column":19}},"15":{"start":{"line":61,"column":6},"end":{"line":61,"column":22}},"16":{"start":{"line":65,"column":6},"end":{"line":65,"column":24}},"17":{"start":{"line":69,"column":6},"end":{"line":69,"column":22}},"18":{"start":{"line":73,"column":6},"end":{"line":75,"column":7}},"19":{"start":{"line":74,"column":8},"end":{"line":74,"column":76}},"20":{"start":{"line":77,"column":6},"end":{"line":79,"column":7}},"21":{"start":{"line":78,"column":8},"end":{"line":78,"column":76}},"22":{"start":{"line":81,"column":6},"end":{"line":83,"column":7}},"23":{"start":{"line":82,"column":8},"end":{"line":82,"column":46}},"24":{"start":{"line":85,"column":6},"end":{"line":85,"column":26}},"25":{"start":{"line":86,"column":6},"end":{"line":86,"column":47}},"26":{"start":{"line":87,"column":6},"end":{"line":87,"column":28}},"27":{"start":{"line":89,"column":6},"end":{"line":89,"column":17}},"28":{"start":{"line":94,"column":6},"end":{"line":94,"column":27}},"29":{"start":{"line":95,"column":6},"end":{"line":95,"column":27}},"30":{"start":{"line":98,"column":6},"end":{"line":99,"column":61}},"31":{"start":{"line":99,"column":8},"end":{"line":99,"column":61}},"32":{"start":{"line":102,"column":6},"end":{"line":102,"column":12}},"33":{"start":{"line":105,"column":6},"end":{"line":130,"column":7}},"34":{"start":{"line":107,"column":10},"end":{"line":116,"column":11}},"35":{"start":{"line":110,"column":14},"end":{"line":110,"column":46}},"36":{"start":{"line":111,"column":14},"end":{"line":111,"column":20}},"37":{"start":{"line":114,"column":14},"end":{"line":114,"column":52}},"38":{"start":{"line":115,"column":14},"end":{"line":115,"column":20}},"39":{"start":{"line":117,"column":10},"end":{"line":117,"column":16}},"40":{"start":{"line":119,"column":10},"end":{"line":128,"column":11}},"41":{"start":{"line":122,"column":14},"end":{"line":122,"column":53}},"42":{"start":{"line":123,"column":14},"end":{"line":123,"column":20}},"43":{"start":{"line":126,"column":14},"end":{"line":126,"column":46}},"44":{"start":{"line":127,"column":14},"end":{"line":127,"column":20}},"45":{"start":{"line":129,"column":10},"end":{"line":129,"column":16}},"46":{"start":{"line":131,"column":6},"end":{"line":131,"column":15}},"47":{"start":{"line":136,"column":6},"end":{"line":136,"column":54}},"48":{"start":{"line":141,"column":6},"end":{"line":141,"column":36}},"49":{"start":{"line":146,"column":6},"end":{"line":146,"column":36}},"50":{"start":{"line":151,"column":6},"end":{"line":151,"column":12}},"51":{"start":{"line":153,"column":6},"end":{"line":161,"column":7}},"52":{"start":{"line":156,"column":10},"end":{"line":156,"column":55}},"53":{"start":{"line":157,"column":10},"end":{"line":157,"column":16}},"54":{"start":{"line":159,"column":10},"end":{"line":159,"column":42}},"55":{"start":{"line":160,"column":10},"end":{"line":160,"column":16}},"56":{"start":{"line":162,"column":6},"end":{"line":162,"column":15}},"57":{"start":{"line":167,"column":6},"end":{"line":167,"column":12}},"58":{"start":{"line":169,"column":6},"end":{"line":176,"column":7}},"59":{"start":{"line":171,"column":10},"end":{"line":171,"column":48}},"60":{"start":{"line":172,"column":10},"end":{"line":172,"column":16}},"61":{"start":{"line":174,"column":10},"end":{"line":174,"column":48}},"62":{"start":{"line":175,"column":10},"end":{"line":175,"column":16}},"63":{"start":{"line":177,"column":6},"end":{"line":177,"column":15}},"64":{"start":{"line":182,"column":6},"end":{"line":182,"column":66}},"65":{"start":{"line":187,"column":6},"end":{"line":187,"column":65}},"66":{"start":{"line":191,"column":2},"end":{"line":193,"column":4}},"67":{"start":{"line":195,"column":2},"end":{"line":195,"column":18}},"68":{"start":{"line":198,"column":0},"end":{"line":198,"column":26}},"69":{"start":{"line":199,"column":0},"end":{"line":199,"column":26}}},"branchMap":{"1":{"line":73,"type":"if","locations":[{"start":{"line":73,"column":6},"end":{"line":73,"column":6}},{"start":{"line":73,"column":6},"end":{"line":73,"column":6}}]},"2":{"line":77,"type":"if","locations":[{"start":{"line":77,"column":6},"end":{"line":77,"column":6}},{"start":{"line":77,"column":6},"end":{"line":77,"column":6}}]},"3":{"line":81,"type":"if","locations":[{"start":{"line":81,"column":6},"end":{"line":81,"column":6}},{"start":{"line":81,"column":6},"end":{"line":81,"column":6}}]},"4":{"line":98,"type":"if","locations":[{"start":{"line":98,"column":6},"end":{"line":98,"column":6}},{"start":{"line":98,"column":6},"end":{"line":98,"column":6}}]},"5":{"line":105,"type":"switch","locations":[{"start":{"line":106,"column":8},"end":{"line":117,"column":16}},{"start":{"line":118,"column":8},"end":{"line":129,"column":16}}]},"6":{"line":107,"type":"switch","locations":[{"start":{"line":108,"column":12},"end":{"line":111,"column":20}},{"start":{"line":112,"column":12},"end":{"line":115,"column":20}}]},"7":{"line":119,"type":"switch","locations":[{"start":{"line":120,"column":12},"end":{"line":123,"column":20}},{"start":{"line":124,"column":12},"end":{"line":127,"column":20}}]},"8":{"line":153,"type":"switch","locations":[{"start":{"line":154,"column":8},"end":{"line":157,"column":16}},{"start":{"line":158,"column":8},"end":{"line":160,"column":16}}]},"9":{"line":169,"type":"switch","locations":[{"start":{"line":170,"column":8},"end":{"line":172,"column":16}},{"start":{"line":173,"column":8},"end":{"line":175,"column":16}}]}},"code":["'use strict';","","var DimensionError = require('../../error/DimensionError');","","function factory (type, config, load, typed) {","  var latex = require('../../utils/latex');","","  var matrix = load(require('../../type/matrix/function/matrix'));","  var addScalar = load(require('./addScalar'));","  var unaryMinus = load(require('./unaryMinus'));","","  var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));","  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));","  var algorithm05 = load(require('../../type/matrix/utils/algorithm05'));","  var algorithm10 = load(require('../../type/matrix/utils/algorithm10'));","  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));","  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));","","  // TODO: split function subtract in two: subtract and subtractScalar","","  /**","   * Subtract two values, `x - y`.","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.subtract(x, y)","   *","   * Examples:","   *","   *    math.subtract(5.3, 2);        // returns number 3.3","   *","   *    var a = math.complex(2, 3);","   *    var b = math.complex(4, 1);","   *    math.subtract(a, b);          // returns Complex -2 + 2i","   *","   *    math.subtract([5, 7, 4], 4);  // returns Array [1, 3, 0]","   *","   *    var c = math.unit('2.1 km');","   *    var d = math.unit('500m');","   *    math.subtract(c, d);          // returns Unit 1.6 km","   *","   * See also:","   *","   *    add","   *","   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x","   *            Initial value","   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y","   *            Value to subtract from `x`","   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}","   *            Subtraction of `x` and `y`","   */","  var subtract = typed('subtract', {","","    'number, number': function (x, y) {","      return x - y;","    },","","    'Complex, Complex': function (x, y) {","      return x.sub(y);","    },","","    'BigNumber, BigNumber': function (x, y) {","      return x.minus(y);","    },","","    'Fraction, Fraction': function (x, y) {","      return x.sub(y);","    },","","    'Unit, Unit': function (x, y) {","      if (x.value == null) {","        throw new Error('Parameter x contains a unit with undefined value');","      }","","      if (y.value == null) {","        throw new Error('Parameter y contains a unit with undefined value');","      }","","      if (!x.equalBase(y)) {","        throw new Error('Units do not match');","      }","","      var res = x.clone();","      res.value = subtract(res.value, y.value);","      res.fixPrefix = false;","","      return res;","    },","    ","    'Matrix, Matrix': function (x, y) {","      // matrix sizes","      var xsize = x.size();","      var ysize = y.size();","","      // check dimensions","      if (xsize.length !== ysize.length)","        throw new DimensionError(xsize.length, ysize.length);","","      // result","      var c;","","      // process matrix storage","      switch (x.storage()) {","        case 'sparse':","          switch (y.storage()) {","            case 'sparse':","              // sparse - sparse","              c = algorithm05(x, y, subtract);","              break;","            default:","              // sparse - dense","              c = algorithm03(y, x, subtract, true);","              break;","          }","          break;","        default:","          switch (y.storage()) {","            case 'sparse':","              // dense - sparse","              c = algorithm01(x, y, subtract, false);","              break;","            default:","              // dense - dense","              c = algorithm13(x, y, subtract);","              break;","          }","          break;","      }","      return c;","    },","    ","    'Array, Array': function (x, y) {","      // use matrix implementation","      return subtract(matrix(x), matrix(y)).valueOf();","    },","","    'Array, Matrix': function (x, y) {","      // use matrix implementation","      return subtract(matrix(x), y);","    },","","    'Matrix, Array': function (x, y) {","      // use matrix implementation","      return subtract(x, matrix(y));","    },","    ","    'Matrix, any': function (x, y) {","      // result","      var c;","      // check storage format","      switch (x.storage()) {","        case 'sparse':","          // algorithm 7 is faster than 9 since it calls f() for nonzero items only!","          c = algorithm10(x, unaryMinus(y), addScalar);","          break;","        default:","          c = algorithm14(x, y, subtract);","          break;","      }","      return c;","    },","","    'any, Matrix': function (x, y) {","      // result","      var c;","      // check storage format","      switch (y.storage()) {","        case 'sparse':","          c = algorithm10(y, x, subtract, true);","          break;","        default:","          c = algorithm14(y, x, subtract, true);","          break;","      }","      return c;","    },","","    'Array, any': function (x, y) {","      // use matrix implementation","      return algorithm14(matrix(x), y, subtract, false).valueOf();","    },","","    'any, Array': function (x, y) {","      // use matrix implementation","      return algorithm14(matrix(y), x, subtract, true).valueOf();","    }","  });","","  subtract.toTex = {","    2: '\\\\left(${args[0]}' + latex.operators['subtract'] + '${args[1]}\\\\right)'","  };","","  return subtract;","}","","exports.name = 'subtract';","exports.factory = factory;",""],"l":{"3":1,"5":1,"6":0,"8":0,"9":0,"10":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"54":0,"57":0,"61":0,"65":0,"69":0,"73":0,"74":0,"77":0,"78":0,"81":0,"82":0,"85":0,"86":0,"87":0,"89":0,"94":0,"95":0,"98":0,"99":0,"102":0,"105":0,"107":0,"110":0,"111":0,"114":0,"115":0,"117":0,"119":0,"122":0,"123":0,"126":0,"127":0,"129":0,"131":0,"136":0,"141":0,"146":0,"151":0,"153":0,"156":0,"157":0,"159":0,"160":0,"162":0,"167":0,"169":0,"171":0,"172":0,"174":0,"175":0,"177":0,"182":0,"187":0,"191":0,"195":0,"198":1,"199":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/unaryMinus.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/unaryMinus.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":1,"16":1},"b":{},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":32,"loc":{"start":{"line":32,"column":14},"end":{"line":32,"column":27}}},"3":{"name":"(anonymous_3)","line":36,"loc":{"start":{"line":36,"column":15},"end":{"line":36,"column":28}}},"4":{"name":"(anonymous_4)","line":40,"loc":{"start":{"line":40,"column":17},"end":{"line":40,"column":30}}},"5":{"name":"(anonymous_5)","line":44,"loc":{"start":{"line":44,"column":16},"end":{"line":44,"column":29}}},"6":{"name":"(anonymous_6)","line":48,"loc":{"start":{"line":48,"column":12},"end":{"line":48,"column":25}}},"7":{"name":"(anonymous_7)","line":54,"loc":{"start":{"line":54,"column":22},"end":{"line":54,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":67,"column":1}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":43}},"4":{"start":{"line":31,"column":2},"end":{"line":60,"column":5}},"5":{"start":{"line":33,"column":6},"end":{"line":33,"column":16}},"6":{"start":{"line":37,"column":6},"end":{"line":37,"column":21}},"7":{"start":{"line":41,"column":6},"end":{"line":41,"column":21}},"8":{"start":{"line":45,"column":6},"end":{"line":45,"column":21}},"9":{"start":{"line":49,"column":6},"end":{"line":49,"column":26}},"10":{"start":{"line":50,"column":6},"end":{"line":50,"column":38}},"11":{"start":{"line":51,"column":6},"end":{"line":51,"column":17}},"12":{"start":{"line":56,"column":6},"end":{"line":56,"column":42}},"13":{"start":{"line":62,"column":2},"end":{"line":64,"column":4}},"14":{"start":{"line":66,"column":2},"end":{"line":66,"column":20}},"15":{"start":{"line":69,"column":0},"end":{"line":69,"column":28}},"16":{"start":{"line":70,"column":0},"end":{"line":70,"column":26}}},"branchMap":{},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","","function factory (type, config, load, typed) {","  var latex = require('../../utils/latex');","","  /**","   * Inverse the sign of a value, apply a unary minus operation.","   *","   * For matrices, the function is evaluated element wise. Boolean values and","   * strings will be converted to a number. For complex numbers, both real and","   * complex value are inverted.","   *","   * Syntax:","   *","   *    math.unaryMinus(x)","   *","   * Examples:","   *","   *    math.unaryMinus(3.5);      // returns -3.5","   *    math.unaryMinus(-4.2);     // returns 4.2","   *","   * See also:","   *","   *    add, subtract, unaryPlus","   *","   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Number to be inverted.","   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Returns the value with inverted sign.","   */","  var unaryMinus = typed('unaryMinus', {","    'number': function (x) {","      return -x;","    },","","    'Complex': function (x) {","      return x.neg();","    },","","    'BigNumber': function (x) {","      return x.neg();","    },","","    'Fraction': function (x) {","      return x.neg();","    },","","    'Unit': function (x) {","      var res = x.clone();","      res.value = unaryMinus(x.value);","      return res;","    },","","    'Array | Matrix': function (x) {","      // deep map collection, skip zeros since unaryMinus(0) = 0","      return deepMap(x, unaryMinus, true);","    }","","    // TODO: add support for string","  });","","  unaryMinus.toTex = {","    1: latex.operators['unaryMinus'] + '\\\\left(${args[0]}\\\\right)'","  };","","  return unaryMinus;","}","","exports.name = 'unaryMinus';","exports.factory = factory;",""],"l":{"3":1,"5":1,"6":0,"31":0,"33":0,"37":0,"41":0,"45":0,"49":0,"50":0,"51":0,"56":0,"62":0,"66":0,"69":1,"70":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/unaryPlus.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/unaryPlus.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":1,"15":1},"b":{"1":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":14},"end":{"line":33,"column":27}}},"3":{"name":"(anonymous_3)","line":37,"loc":{"start":{"line":37,"column":15},"end":{"line":37,"column":28}}},"4":{"name":"(anonymous_4)","line":41,"loc":{"start":{"line":41,"column":17},"end":{"line":41,"column":30}}},"5":{"name":"(anonymous_5)","line":45,"loc":{"start":{"line":45,"column":16},"end":{"line":45,"column":29}}},"6":{"name":"(anonymous_6)","line":49,"loc":{"start":{"line":49,"column":12},"end":{"line":49,"column":25}}},"7":{"name":"(anonymous_7)","line":53,"loc":{"start":{"line":53,"column":22},"end":{"line":53,"column":35}}},"8":{"name":"(anonymous_8)","line":58,"loc":{"start":{"line":58,"column":31},"end":{"line":58,"column":44}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":69,"column":1}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":43}},"4":{"start":{"line":32,"column":2},"end":{"line":62,"column":5}},"5":{"start":{"line":34,"column":6},"end":{"line":34,"column":15}},"6":{"start":{"line":38,"column":6},"end":{"line":38,"column":15}},"7":{"start":{"line":42,"column":6},"end":{"line":42,"column":15}},"8":{"start":{"line":46,"column":6},"end":{"line":46,"column":15}},"9":{"start":{"line":50,"column":6},"end":{"line":50,"column":23}},"10":{"start":{"line":55,"column":6},"end":{"line":55,"column":41}},"11":{"start":{"line":60,"column":6},"end":{"line":60,"column":73}},"12":{"start":{"line":64,"column":2},"end":{"line":66,"column":4}},"13":{"start":{"line":68,"column":2},"end":{"line":68,"column":19}},"14":{"start":{"line":71,"column":0},"end":{"line":71,"column":27}},"15":{"start":{"line":72,"column":0},"end":{"line":72,"column":26}}},"branchMap":{"1":{"line":60,"type":"cond-expr","locations":[{"start":{"line":60,"column":46},"end":{"line":60,"column":68}},{"start":{"line":60,"column":70},"end":{"line":60,"column":72}}]}},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","","function factory (type, config, load, typed) {","  var latex = require('../../utils/latex');","","  /**","   * Unary plus operation.","   * Boolean values and strings will be converted to a number, numeric values will be returned as is.","   *","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.unaryPlus(x)","   *","   * Examples:","   *","   *    math.unaryPlus(3.5);      // returns 3.5","   *    math.unaryPlus(1);     // returns 1","   *","   * See also:","   *","   *    unaryMinus, add, subtract","   *","   * @param  {number | BigNumber | Fraction | string | Complex | Unit | Array | Matrix} x","   *            Input value","   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}","   *            Returns the input value when numeric, converts to a number when input is non-numeric.","   */","  var unaryPlus = typed('unaryPlus', {","    'number': function (x) {","      return x;","    },","","    'Complex': function (x) {","      return x; // complex numbers are immutable","    },","","    'BigNumber': function (x) {","      return x; // bignumbers are immutable","    },","","    'Fraction': function (x) {","      return x; // fractions are immutable","    },","","    'Unit': function (x) {","      return x.clone();","    },","","    'Array | Matrix': function (x) {","      // deep map collection, skip zeros since unaryPlus(0) = 0","      return deepMap(x, unaryPlus, true);","    },","","    'boolean | string | null': function (x) {","      // convert to a number or bignumber","      return (config.number == 'BigNumber') ? new type.BigNumber(+x): +x;","    }","  });","","  unaryPlus.toTex = {","    1: latex.operators['unaryPlus'] + '\\\\left(${args[0]}\\\\right)'","  };","","  return unaryPlus;","}","","exports.name = 'unaryPlus';","exports.factory = factory;",""],"l":{"3":1,"5":1,"6":0,"32":0,"34":0,"38":0,"42":0,"46":0,"50":0,"55":0,"60":0,"64":0,"68":0,"71":1,"72":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/xgcd.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/arithmetic/xgcd.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":1,"48":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"_xgcd","line":48,"loc":{"start":{"line":48,"column":2},"end":{"line":48,"column":24}}},"3":{"name":"_xgcdBigNumber","line":93,"loc":{"start":{"line":93,"column":2},"end":{"line":93,"column":32}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":134,"column":1}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":66}},"4":{"start":{"line":31,"column":2},"end":{"line":35,"column":5}},"5":{"start":{"line":37,"column":2},"end":{"line":37,"column":25}},"6":{"start":{"line":39,"column":2},"end":{"line":39,"column":14}},"7":{"start":{"line":48,"column":2},"end":{"line":84,"column":3}},"8":{"start":{"line":50,"column":4},"end":{"line":54,"column":25}},"9":{"start":{"line":56,"column":4},"end":{"line":58,"column":5}},"10":{"start":{"line":57,"column":6},"end":{"line":57,"column":77}},"11":{"start":{"line":60,"column":4},"end":{"line":74,"column":5}},"12":{"start":{"line":61,"column":6},"end":{"line":61,"column":28}},"13":{"start":{"line":62,"column":6},"end":{"line":62,"column":18}},"14":{"start":{"line":64,"column":6},"end":{"line":64,"column":12}},"15":{"start":{"line":65,"column":6},"end":{"line":65,"column":24}},"16":{"start":{"line":66,"column":6},"end":{"line":66,"column":16}},"17":{"start":{"line":68,"column":6},"end":{"line":68,"column":12}},"18":{"start":{"line":69,"column":6},"end":{"line":69,"column":24}},"19":{"start":{"line":70,"column":6},"end":{"line":70,"column":16}},"20":{"start":{"line":72,"column":6},"end":{"line":72,"column":12}},"21":{"start":{"line":73,"column":6},"end":{"line":73,"column":12}},"22":{"start":{"line":76,"column":4},"end":{"line":76,"column":12}},"23":{"start":{"line":77,"column":4},"end":{"line":82,"column":5}},"24":{"start":{"line":78,"column":6},"end":{"line":78,"column":33}},"25":{"start":{"line":81,"column":6},"end":{"line":81,"column":38}},"26":{"start":{"line":83,"column":4},"end":{"line":83,"column":59}},"27":{"start":{"line":93,"column":2},"end":{"line":133,"column":3}},"28":{"start":{"line":95,"column":4},"end":{"line":103,"column":21}},"29":{"start":{"line":105,"column":4},"end":{"line":107,"column":5}},"30":{"start":{"line":106,"column":6},"end":{"line":106,"column":77}},"31":{"start":{"line":109,"column":4},"end":{"line":123,"column":5}},"32":{"start":{"line":110,"column":6},"end":{"line":110,"column":27}},"33":{"start":{"line":111,"column":6},"end":{"line":111,"column":19}},"34":{"start":{"line":113,"column":6},"end":{"line":113,"column":12}},"35":{"start":{"line":114,"column":6},"end":{"line":114,"column":34}},"36":{"start":{"line":115,"column":6},"end":{"line":115,"column":16}},"37":{"start":{"line":117,"column":6},"end":{"line":117,"column":12}},"38":{"start":{"line":118,"column":6},"end":{"line":118,"column":34}},"39":{"start":{"line":119,"column":6},"end":{"line":119,"column":16}},"40":{"start":{"line":121,"column":6},"end":{"line":121,"column":12}},"41":{"start":{"line":122,"column":6},"end":{"line":122,"column":12}},"42":{"start":{"line":125,"column":4},"end":{"line":125,"column":12}},"43":{"start":{"line":126,"column":4},"end":{"line":131,"column":5}},"44":{"start":{"line":127,"column":6},"end":{"line":127,"column":48}},"45":{"start":{"line":130,"column":6},"end":{"line":130,"column":48}},"46":{"start":{"line":132,"column":4},"end":{"line":132,"column":59}},"47":{"start":{"line":136,"column":0},"end":{"line":136,"column":22}},"48":{"start":{"line":137,"column":0},"end":{"line":137,"column":26}}},"branchMap":{"1":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":4},"end":{"line":56,"column":4}},{"start":{"line":56,"column":4},"end":{"line":56,"column":4}}]},"2":{"line":56,"type":"binary-expr","locations":[{"start":{"line":56,"column":8},"end":{"line":56,"column":21}},{"start":{"line":56,"column":25},"end":{"line":56,"column":38}}]},"3":{"line":77,"type":"if","locations":[{"start":{"line":77,"column":4},"end":{"line":77,"column":4}},{"start":{"line":77,"column":4},"end":{"line":77,"column":4}}]},"4":{"line":81,"type":"cond-expr","locations":[{"start":{"line":81,"column":20},"end":{"line":81,"column":25}},{"start":{"line":81,"column":28},"end":{"line":81,"column":29}}]},"5":{"line":83,"type":"cond-expr","locations":[{"start":{"line":83,"column":41},"end":{"line":83,"column":44}},{"start":{"line":83,"column":47},"end":{"line":83,"column":58}}]},"6":{"line":105,"type":"if","locations":[{"start":{"line":105,"column":4},"end":{"line":105,"column":4}},{"start":{"line":105,"column":4},"end":{"line":105,"column":4}}]},"7":{"line":105,"type":"binary-expr","locations":[{"start":{"line":105,"column":8},"end":{"line":105,"column":18}},{"start":{"line":105,"column":22},"end":{"line":105,"column":32}}]},"8":{"line":126,"type":"if","locations":[{"start":{"line":126,"column":4},"end":{"line":126,"column":4}},{"start":{"line":126,"column":4},"end":{"line":126,"column":4}}]},"9":{"line":130,"type":"cond-expr","locations":[{"start":{"line":130,"column":30},"end":{"line":130,"column":35}},{"start":{"line":130,"column":38},"end":{"line":130,"column":39}}]},"10":{"line":132,"type":"cond-expr","locations":[{"start":{"line":132,"column":41},"end":{"line":132,"column":44}},{"start":{"line":132,"column":47},"end":{"line":132,"column":58}}]}},"code":["'use strict';","","var isInteger = require('../../utils/number').isInteger;","","function factory (type, config, load, typed) {","  var matrix = load(require('../../type/matrix/function/matrix'));","","  /**","   * Calculate the extended greatest common divisor for two values.","   * See http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm.","   *","   * Syntax:","   *","   *    math.xgcd(a, b)","   *","   * Examples:","   *","   *    math.xgcd(8, 12);             // returns [4, -1, 1]","   *    math.gcd(8, 12);              // returns 4","   *    math.xgcd(36163, 21199);      // returns [1247, -7, 12]","   *","   * See also:","   *","   *    gcd, lcm","   *","   * @param {number | BigNumber} a  An integer number","   * @param {number | BigNumber} b  An integer number","   * @return {Array}              Returns an array containing 3 integers `[div, m, n]`","   *                              where `div = gcd(a, b)` and `a*m + b*n = div`","   */","  var xgcd = typed('xgcd', {","    'number, number': _xgcd,","    'BigNumber, BigNumber': _xgcdBigNumber","    // TODO: implement support for Fraction","  });","","  xgcd.toTex = undefined; // use default template","","  return xgcd;","","  /**","   * Calculate xgcd for two numbers","   * @param {number} a","   * @param {number} b","   * @return {number} result","   * @private","   */","  function _xgcd (a, b) {","    // source: http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm","    var t, // used to swap two variables","        q, // quotient","        r, // remainder","        x = 0, lastx = 1,","        y = 1, lasty = 0;","","    if (!isInteger(a) || !isInteger(b)) {","      throw new Error('Parameters in function xgcd must be integer numbers');","    }","","    while (b) {","      q = Math.floor(a / b);","      r = a - q*b;","","      t = x;","      x = lastx - q * x;","      lastx = t;","","      t = y;","      y = lasty - q * y;","      lasty = t;","","      a = b;","      b = r;","    }","","    var res;","    if (a < 0) {","      res = [-a, -lastx, -lasty];","    }","    else {","      res = [a, a ? lastx : 0, lasty];","    }","    return (config.matrix === 'Array') ? res : matrix(res);","  }","","  /**","   * Calculate xgcd for two BigNumbers","   * @param {BigNumber} a","   * @param {BigNumber} b","   * @return {BigNumber[]} result","   * @private","   */","  function _xgcdBigNumber(a, b) {","    // source: http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm","    var t, // used to swap two variables","        q, // quotient","        r, // remainder","        zero = new type.BigNumber(0),","        one = new type.BigNumber(1),","        x = zero,","        lastx = one,","        y = one,","        lasty = zero;","","    if (!a.isInt() || !b.isInt()) {","      throw new Error('Parameters in function xgcd must be integer numbers');","    }","","    while (!b.isZero()) {","      q = a.div(b).floor();","      r = a.mod(b);","","      t = x;","      x = lastx.minus(q.times(x));","      lastx = t;","","      t = y;","      y = lasty.minus(q.times(y));","      lasty = t;","","      a = b;","      b = r;","    }","","    var res;","    if (a.lt(zero)) {","      res = [a.neg(), lastx.neg(), lasty.neg()];","    }","    else {","      res = [a, !a.isZero() ? lastx : 0, lasty];","    }","    return (config.matrix === 'Array') ? res : matrix(res);","  }","}","","exports.name = 'xgcd';","exports.factory = factory;",""],"l":{"3":1,"5":1,"6":0,"31":0,"37":0,"39":0,"48":1,"50":0,"56":0,"57":0,"60":0,"61":0,"62":0,"64":0,"65":0,"66":0,"68":0,"69":0,"70":0,"72":0,"73":0,"76":0,"77":0,"78":0,"81":0,"83":0,"93":1,"95":0,"105":0,"106":0,"109":0,"110":0,"111":0,"113":0,"114":0,"115":0,"117":0,"118":0,"119":0,"121":0,"122":0,"125":0,"126":0,"127":0,"130":0,"132":0,"136":1,"137":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/bitwise/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/bitwise/index.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":9,"column":2}}},"branchMap":{},"code":["module.exports = [","  require('./bitAnd'),","  require('./bitNot'),","  require('./bitOr'),","  require('./bitXor'),","  require('./leftShift'),","  require('./rightArithShift'),","  require('./rightLogShift')","];",""],"l":{"1":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/bitwise/bitAnd.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/bitwise/bitAnd.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":1,"52":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"fnMap":{"1":{"name":"factory","line":6,"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":45}}},"2":{"name":"(anonymous_2)","line":41,"loc":{"start":{"line":41,"column":22},"end":{"line":41,"column":38}}},"3":{"name":"(anonymous_3)","line":51,"loc":{"start":{"line":51,"column":22},"end":{"line":51,"column":38}}},"4":{"name":"(anonymous_4)","line":85,"loc":{"start":{"line":85,"column":20},"end":{"line":85,"column":36}}},"5":{"name":"(anonymous_5)","line":90,"loc":{"start":{"line":90,"column":21},"end":{"line":90,"column":37}}},"6":{"name":"(anonymous_6)","line":95,"loc":{"start":{"line":95,"column":21},"end":{"line":95,"column":37}}},"7":{"name":"(anonymous_7)","line":100,"loc":{"start":{"line":100,"column":19},"end":{"line":100,"column":35}}},"8":{"name":"(anonymous_8)","line":115,"loc":{"start":{"line":115,"column":19},"end":{"line":115,"column":35}}},"9":{"name":"(anonymous_9)","line":130,"loc":{"start":{"line":130,"column":18},"end":{"line":130,"column":34}}},"10":{"name":"(anonymous_10)","line":135,"loc":{"start":{"line":135,"column":18},"end":{"line":135,"column":34}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":56}},"3":{"start":{"line":6,"column":0},"end":{"line":146,"column":1}},"4":{"start":{"line":7,"column":2},"end":{"line":7,"column":43}},"5":{"start":{"line":9,"column":2},"end":{"line":9,"column":66}},"6":{"start":{"line":11,"column":2},"end":{"line":11,"column":73}},"7":{"start":{"line":12,"column":2},"end":{"line":12,"column":73}},"8":{"start":{"line":13,"column":2},"end":{"line":13,"column":73}},"9":{"start":{"line":14,"column":2},"end":{"line":14,"column":73}},"10":{"start":{"line":15,"column":2},"end":{"line":15,"column":73}},"11":{"start":{"line":39,"column":2},"end":{"line":139,"column":5}},"12":{"start":{"line":42,"column":6},"end":{"line":44,"column":7}},"13":{"start":{"line":43,"column":8},"end":{"line":43,"column":64}},"14":{"start":{"line":46,"column":6},"end":{"line":46,"column":19}},"15":{"start":{"line":53,"column":6},"end":{"line":53,"column":12}},"16":{"start":{"line":56,"column":6},"end":{"line":81,"column":7}},"17":{"start":{"line":58,"column":10},"end":{"line":67,"column":11}},"18":{"start":{"line":61,"column":14},"end":{"line":61,"column":51}},"19":{"start":{"line":62,"column":14},"end":{"line":62,"column":20}},"20":{"start":{"line":65,"column":14},"end":{"line":65,"column":50}},"21":{"start":{"line":66,"column":14},"end":{"line":66,"column":20}},"22":{"start":{"line":68,"column":10},"end":{"line":68,"column":16}},"23":{"start":{"line":70,"column":10},"end":{"line":79,"column":11}},"24":{"start":{"line":73,"column":14},"end":{"line":73,"column":51}},"25":{"start":{"line":74,"column":14},"end":{"line":74,"column":20}},"26":{"start":{"line":77,"column":14},"end":{"line":77,"column":44}},"27":{"start":{"line":78,"column":14},"end":{"line":78,"column":20}},"28":{"start":{"line":80,"column":10},"end":{"line":80,"column":16}},"29":{"start":{"line":82,"column":6},"end":{"line":82,"column":15}},"30":{"start":{"line":87,"column":6},"end":{"line":87,"column":52}},"31":{"start":{"line":92,"column":6},"end":{"line":92,"column":34}},"32":{"start":{"line":97,"column":6},"end":{"line":97,"column":34}},"33":{"start":{"line":102,"column":6},"end":{"line":102,"column":12}},"34":{"start":{"line":104,"column":6},"end":{"line":111,"column":7}},"35":{"start":{"line":106,"column":10},"end":{"line":106,"column":47}},"36":{"start":{"line":107,"column":10},"end":{"line":107,"column":16}},"37":{"start":{"line":109,"column":10},"end":{"line":109,"column":47}},"38":{"start":{"line":110,"column":10},"end":{"line":110,"column":16}},"39":{"start":{"line":112,"column":6},"end":{"line":112,"column":15}},"40":{"start":{"line":117,"column":6},"end":{"line":117,"column":12}},"41":{"start":{"line":119,"column":6},"end":{"line":126,"column":7}},"42":{"start":{"line":121,"column":10},"end":{"line":121,"column":46}},"43":{"start":{"line":122,"column":10},"end":{"line":122,"column":16}},"44":{"start":{"line":124,"column":10},"end":{"line":124,"column":46}},"45":{"start":{"line":125,"column":10},"end":{"line":125,"column":16}},"46":{"start":{"line":127,"column":6},"end":{"line":127,"column":15}},"47":{"start":{"line":132,"column":6},"end":{"line":132,"column":64}},"48":{"start":{"line":137,"column":6},"end":{"line":137,"column":63}},"49":{"start":{"line":141,"column":2},"end":{"line":143,"column":4}},"50":{"start":{"line":145,"column":2},"end":{"line":145,"column":16}},"51":{"start":{"line":148,"column":0},"end":{"line":148,"column":24}},"52":{"start":{"line":149,"column":0},"end":{"line":149,"column":26}}},"branchMap":{"1":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":6},"end":{"line":42,"column":6}},{"start":{"line":42,"column":6},"end":{"line":42,"column":6}}]},"2":{"line":42,"type":"binary-expr","locations":[{"start":{"line":42,"column":10},"end":{"line":42,"column":23}},{"start":{"line":42,"column":27},"end":{"line":42,"column":40}}]},"3":{"line":56,"type":"switch","locations":[{"start":{"line":57,"column":8},"end":{"line":68,"column":16}},{"start":{"line":69,"column":8},"end":{"line":80,"column":16}}]},"4":{"line":58,"type":"switch","locations":[{"start":{"line":59,"column":12},"end":{"line":62,"column":20}},{"start":{"line":63,"column":12},"end":{"line":66,"column":20}}]},"5":{"line":70,"type":"switch","locations":[{"start":{"line":71,"column":12},"end":{"line":74,"column":20}},{"start":{"line":75,"column":12},"end":{"line":78,"column":20}}]},"6":{"line":104,"type":"switch","locations":[{"start":{"line":105,"column":8},"end":{"line":107,"column":16}},{"start":{"line":108,"column":8},"end":{"line":110,"column":16}}]},"7":{"line":119,"type":"switch","locations":[{"start":{"line":120,"column":8},"end":{"line":122,"column":16}},{"start":{"line":123,"column":8},"end":{"line":125,"column":16}}]}},"code":["'use strict';","","var isInteger = require('../../utils/number').isInteger;","var bigBitAnd = require('../../utils/bignumber/bitAnd');","","function factory (type, config, load, typed) {","  var latex = require('../../utils/latex');","","  var matrix = load(require('../../type/matrix/function/matrix'));","","  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));","  var algorithm06 = load(require('../../type/matrix/utils/algorithm06'));","  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));","  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));","  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));","  ","  /**","   * Bitwise AND two values, `x & y`.","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.bitAnd(x, y)","   *","   * Examples:","   *","   *    math.bitAnd(53, 131);               // returns number 1","   *","   *    math.bitAnd([1, 12, 31], 42);       // returns Array [0, 8, 10]","   *","   * See also:","   *","   *    bitNot, bitOr, bitXor, leftShift, rightArithShift, rightLogShift","   *","   * @param  {number | BigNumber | Array | Matrix} x First value to and","   * @param  {number | BigNumber | Array | Matrix} y Second value to and","   * @return {number | BigNumber | Array | Matrix} AND of `x` and `y`","   */","  var bitAnd = typed('bitAnd', {","","    'number, number': function (x, y) {","      if (!isInteger(x) || !isInteger(y)) {","        throw new Error('Integers expected in function bitAnd');","      }","","      return x & y;","    },","","    'BigNumber, BigNumber': bigBitAnd,","","    'Matrix, Matrix': function (x, y) {","      // result","      var c;","","      // process matrix storage","      switch (x.storage()) {","        case 'sparse':","          switch (y.storage()) {","            case 'sparse':","              // sparse & sparse","              c = algorithm06(x, y, bitAnd, false);","              break;","            default:","              // sparse & dense","              c = algorithm02(y, x, bitAnd, true);","              break;","          }","          break;","        default:","          switch (y.storage()) {","            case 'sparse':","              // dense & sparse","              c = algorithm02(x, y, bitAnd, false);","              break;","            default:","              // dense & dense","              c = algorithm13(x, y, bitAnd);","              break;","          }","          break;","      }","      return c;","    },","    ","    'Array, Array': function (x, y) {","      // use matrix implementation","      return bitAnd(matrix(x), matrix(y)).valueOf();","    },","","    'Array, Matrix': function (x, y) {","      // use matrix implementation","      return bitAnd(matrix(x), y);","    },","","    'Matrix, Array': function (x, y) {","      // use matrix implementation","      return bitAnd(x, matrix(y));","    },","    ","    'Matrix, any': function (x, y) {","      // result","      var c;","      // check storage format","      switch (x.storage()) {","        case 'sparse':","          c = algorithm11(x, y, bitAnd, false);","          break;","        default:","          c = algorithm14(x, y, bitAnd, false);","          break;","      }","      return c;","    },","","    'any, Matrix': function (x, y) {","      // result","      var c;","      // check storage format","      switch (y.storage()) {","        case 'sparse':","          c = algorithm11(y, x, bitAnd, true);","          break;","        default:","          c = algorithm14(y, x, bitAnd, true);","          break;","      }","      return c;","    },","","    'Array, any': function (x, y) {","      // use matrix implementation","      return algorithm14(matrix(x), y, bitAnd, false).valueOf();","    },","","    'any, Array': function (x, y) {","      // use matrix implementation","      return algorithm14(matrix(y), x, bitAnd, true).valueOf();","    }","  });","","  bitAnd.toTex = {","    2: '\\\\left(${args[0]}' + latex.operators['bitAnd'] + '${args[1]}\\\\right)'","  };","","  return bitAnd;","}","","exports.name = 'bitAnd';","exports.factory = factory;",""],"l":{"3":1,"4":1,"6":1,"7":0,"9":0,"11":0,"12":0,"13":0,"14":0,"15":0,"39":0,"42":0,"43":0,"46":0,"53":0,"56":0,"58":0,"61":0,"62":0,"65":0,"66":0,"68":0,"70":0,"73":0,"74":0,"77":0,"78":0,"80":0,"82":0,"87":0,"92":0,"97":0,"102":0,"104":0,"106":0,"107":0,"109":0,"110":0,"112":0,"117":0,"119":0,"121":0,"122":0,"124":0,"125":0,"127":0,"132":0,"137":0,"141":0,"145":0,"148":1,"149":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/utils/bignumber/bitAnd.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/utils/bignumber/bitAnd.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0},"b":{"1":[0,0],"2":[0,0,0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"bitAnd","line":24,"loc":{"start":{"line":24,"column":17},"end":{"line":24,"column":39}}},"2":{"name":"(anonymous_2)","line":67,"loc":{"start":{"line":67,"column":23},"end":{"line":67,"column":39}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":35}},"2":{"start":{"line":24,"column":0},"end":{"line":68,"column":2}},"3":{"start":{"line":25,"column":2},"end":{"line":27,"column":3}},"4":{"start":{"line":26,"column":4},"end":{"line":26,"column":60}},"5":{"start":{"line":29,"column":2},"end":{"line":29,"column":32}},"6":{"start":{"line":30,"column":2},"end":{"line":32,"column":3}},"7":{"start":{"line":31,"column":4},"end":{"line":31,"column":30}},"8":{"start":{"line":34,"column":2},"end":{"line":36,"column":3}},"9":{"start":{"line":35,"column":4},"end":{"line":35,"column":13}},"10":{"start":{"line":37,"column":2},"end":{"line":39,"column":3}},"11":{"start":{"line":38,"column":4},"end":{"line":38,"column":13}},"12":{"start":{"line":41,"column":2},"end":{"line":66,"column":3}},"13":{"start":{"line":42,"column":4},"end":{"line":47,"column":5}},"14":{"start":{"line":43,"column":6},"end":{"line":45,"column":7}},"15":{"start":{"line":44,"column":8},"end":{"line":44,"column":17}},"16":{"start":{"line":46,"column":6},"end":{"line":46,"column":30}},"17":{"start":{"line":48,"column":4},"end":{"line":56,"column":5}},"18":{"start":{"line":49,"column":6},"end":{"line":51,"column":7}},"19":{"start":{"line":50,"column":8},"end":{"line":50,"column":17}},"20":{"start":{"line":52,"column":6},"end":{"line":54,"column":7}},"21":{"start":{"line":53,"column":8},"end":{"line":53,"column":32}},"22":{"start":{"line":55,"column":6},"end":{"line":55,"column":15}},"23":{"start":{"line":57,"column":4},"end":{"line":65,"column":5}},"24":{"start":{"line":58,"column":6},"end":{"line":60,"column":7}},"25":{"start":{"line":59,"column":8},"end":{"line":59,"column":17}},"26":{"start":{"line":61,"column":6},"end":{"line":63,"column":7}},"27":{"start":{"line":62,"column":8},"end":{"line":62,"column":32}},"28":{"start":{"line":64,"column":6},"end":{"line":64,"column":15}},"29":{"start":{"line":67,"column":2},"end":{"line":67,"column":57}},"30":{"start":{"line":67,"column":41},"end":{"line":67,"column":54}}},"branchMap":{"1":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":2},"end":{"line":25,"column":2}},{"start":{"line":25,"column":2},"end":{"line":25,"column":2}}]},"2":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":7},"end":{"line":25,"column":19}},{"start":{"line":25,"column":23},"end":{"line":25,"column":37}},{"start":{"line":25,"column":43},"end":{"line":25,"column":55}},{"start":{"line":25,"column":59},"end":{"line":25,"column":73}}]},"3":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":2},"end":{"line":30,"column":2}},{"start":{"line":30,"column":2},"end":{"line":30,"column":2}}]},"4":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":6},"end":{"line":30,"column":15}},{"start":{"line":30,"column":19},"end":{"line":30,"column":28}}]},"5":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":2},"end":{"line":34,"column":2}},{"start":{"line":34,"column":2},"end":{"line":34,"column":2}}]},"6":{"line":34,"type":"binary-expr","locations":[{"start":{"line":34,"column":6},"end":{"line":34,"column":16}},{"start":{"line":34,"column":20},"end":{"line":34,"column":28}},{"start":{"line":34,"column":32},"end":{"line":34,"column":39}}]},"7":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":2},"end":{"line":37,"column":2}},{"start":{"line":37,"column":2},"end":{"line":37,"column":2}}]},"8":{"line":37,"type":"binary-expr","locations":[{"start":{"line":37,"column":6},"end":{"line":37,"column":16}},{"start":{"line":37,"column":20},"end":{"line":37,"column":28}}]},"9":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":2},"end":{"line":41,"column":2}},{"start":{"line":41,"column":2},"end":{"line":41,"column":2}}]},"10":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":6},"end":{"line":41,"column":19}},{"start":{"line":41,"column":23},"end":{"line":41,"column":36}}]},"11":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":4},"end":{"line":42,"column":4}},{"start":{"line":42,"column":4},"end":{"line":42,"column":4}}]},"12":{"line":42,"type":"binary-expr","locations":[{"start":{"line":42,"column":8},"end":{"line":42,"column":21}},{"start":{"line":42,"column":25},"end":{"line":42,"column":38}}]},"13":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":6},"end":{"line":43,"column":6}},{"start":{"line":43,"column":6},"end":{"line":43,"column":6}}]},"14":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":4},"end":{"line":48,"column":4}},{"start":{"line":48,"column":4},"end":{"line":48,"column":4}}]},"15":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":6},"end":{"line":49,"column":6}},{"start":{"line":49,"column":6},"end":{"line":49,"column":6}}]},"16":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":6},"end":{"line":52,"column":6}},{"start":{"line":52,"column":6},"end":{"line":52,"column":6}}]},"17":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":4},"end":{"line":57,"column":4}},{"start":{"line":57,"column":4},"end":{"line":57,"column":4}}]},"18":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":6},"end":{"line":58,"column":6}},{"start":{"line":58,"column":6},"end":{"line":58,"column":6}}]},"19":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":6},"end":{"line":61,"column":6}},{"start":{"line":61,"column":6},"end":{"line":61,"column":6}}]}},"code":["var bitwise = require('./bitwise');","","/**"," * Bitwise and for Bignumbers"," *"," * Special Cases:"," *   N &  n =  N"," *   n &  0 =  0"," *   n & -1 =  n"," *   n &  n =  n"," *   I &  I =  I"," *  -I & -I = -I"," *   I & -I =  0"," *   I &  n =  n"," *   I & -n =  I"," *  -I &  n =  0"," *  -I & -n = -I"," *"," * @param {BigNumber} x"," * @param {BigNumber} y"," * @return {BigNumber} Result of `x` & `y`, is fully precise"," * @private"," */","module.exports = function bitAnd(x, y) {","  if ((x.isFinite() && !x.isInteger()) || (y.isFinite() && !y.isInteger())) {","    throw new Error('Integers expected in function bitAnd');","  }","","  var BigNumber = x.constructor;","  if (x.isNaN() || y.isNaN()) {","    return new BigNumber(NaN);","  }","","  if (x.isZero() || y.eq(-1) || x.eq(y)) {","    return x;","  }","  if (y.isZero() || x.eq(-1)) {","    return y;","  }","","  if (!x.isFinite() || !y.isFinite()) {","    if (!x.isFinite() && !y.isFinite()) {","      if (x.isNegative() == y.isNegative()) {","        return x;","      }","      return new BigNumber(0);","    }","    if (!x.isFinite()) {","      if (y.isNegative()) {","        return x;","      }","      if (x.isNegative()) {","        return new BigNumber(0);","      }","      return y;","    }","    if (!y.isFinite()) {","      if (x.isNegative()) {","        return y;","      }","      if (y.isNegative()) {","        return new BigNumber(0);","      }","      return x;","    }","  }","  return bitwise(x, y, function (a, b) { return a & b });","};",""],"l":{"1":1,"24":1,"25":0,"26":0,"29":0,"30":0,"31":0,"34":0,"35":0,"37":0,"38":0,"41":0,"42":0,"43":0,"44":0,"46":0,"48":0,"49":0,"50":0,"52":0,"53":0,"55":0,"57":0,"58":0,"59":0,"61":0,"62":0,"64":0,"67":0}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/utils/bignumber/bitwise.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/utils/bignumber/bitwise.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":1,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"bitwise","line":10,"loc":{"start":{"line":10,"column":17},"end":{"line":10,"column":46}}},"2":{"name":"decCoefficientToBinaryString","line":76,"loc":{"start":{"line":76,"column":0},"end":{"line":76,"column":42}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":33}},"2":{"start":{"line":10,"column":0},"end":{"line":73,"column":2}},"3":{"start":{"line":11,"column":2},"end":{"line":11,"column":32}},"4":{"start":{"line":13,"column":2},"end":{"line":13,"column":19}},"5":{"start":{"line":14,"column":2},"end":{"line":14,"column":25}},"6":{"start":{"line":15,"column":2},"end":{"line":15,"column":25}},"7":{"start":{"line":16,"column":2},"end":{"line":23,"column":3}},"8":{"start":{"line":17,"column":4},"end":{"line":17,"column":52}},"9":{"start":{"line":18,"column":4},"end":{"line":20,"column":5}},"10":{"start":{"line":19,"column":6},"end":{"line":19,"column":20}},"11":{"start":{"line":22,"column":4},"end":{"line":22,"column":44}},"12":{"start":{"line":24,"column":2},"end":{"line":31,"column":3}},"13":{"start":{"line":25,"column":4},"end":{"line":25,"column":52}},"14":{"start":{"line":26,"column":4},"end":{"line":28,"column":5}},"15":{"start":{"line":27,"column":6},"end":{"line":27,"column":20}},"16":{"start":{"line":30,"column":4},"end":{"line":30,"column":44}},"17":{"start":{"line":33,"column":2},"end":{"line":33,"column":32}},"18":{"start":{"line":34,"column":2},"end":{"line":42,"column":3}},"19":{"start":{"line":35,"column":4},"end":{"line":35,"column":20}},"20":{"start":{"line":36,"column":4},"end":{"line":36,"column":20}},"21":{"start":{"line":37,"column":4},"end":{"line":37,"column":20}},"22":{"start":{"line":39,"column":4},"end":{"line":39,"column":20}},"23":{"start":{"line":40,"column":4},"end":{"line":40,"column":20}},"24":{"start":{"line":41,"column":4},"end":{"line":41,"column":20}},"25":{"start":{"line":44,"column":2},"end":{"line":44,"column":32}},"26":{"start":{"line":45,"column":2},"end":{"line":45,"column":31}},"27":{"start":{"line":46,"column":2},"end":{"line":46,"column":42}},"28":{"start":{"line":47,"column":2},"end":{"line":47,"column":45}},"29":{"start":{"line":48,"column":2},"end":{"line":48,"column":34}},"30":{"start":{"line":49,"column":2},"end":{"line":49,"column":29}},"31":{"start":{"line":51,"column":2},"end":{"line":51,"column":37}},"32":{"start":{"line":52,"column":2},"end":{"line":52,"column":37}},"33":{"start":{"line":54,"column":2},"end":{"line":59,"column":3}},"34":{"start":{"line":55,"column":4},"end":{"line":57,"column":5}},"35":{"start":{"line":56,"column":6},"end":{"line":56,"column":37}},"36":{"start":{"line":58,"column":4},"end":{"line":58,"column":35}},"37":{"start":{"line":60,"column":2},"end":{"line":65,"column":3}},"38":{"start":{"line":61,"column":4},"end":{"line":63,"column":5}},"39":{"start":{"line":62,"column":6},"end":{"line":62,"column":37}},"40":{"start":{"line":64,"column":4},"end":{"line":64,"column":35}},"41":{"start":{"line":67,"column":2},"end":{"line":67,"column":42}},"42":{"start":{"line":69,"column":2},"end":{"line":71,"column":3}},"43":{"start":{"line":70,"column":4},"end":{"line":70,"column":25}},"44":{"start":{"line":72,"column":2},"end":{"line":72,"column":16}},"45":{"start":{"line":76,"column":0},"end":{"line":124,"column":1}},"46":{"start":{"line":78,"column":2},"end":{"line":78,"column":14}},"47":{"start":{"line":79,"column":2},"end":{"line":79,"column":20}},"48":{"start":{"line":81,"column":2},"end":{"line":88,"column":3}},"49":{"start":{"line":82,"column":4},"end":{"line":82,"column":22}},"50":{"start":{"line":83,"column":4},"end":{"line":85,"column":5}},"51":{"start":{"line":84,"column":6},"end":{"line":84,"column":18}},"52":{"start":{"line":87,"column":4},"end":{"line":87,"column":11}},"53":{"start":{"line":90,"column":2},"end":{"line":90,"column":8}},"54":{"start":{"line":91,"column":2},"end":{"line":91,"column":50}},"55":{"start":{"line":93,"column":2},"end":{"line":93,"column":15}},"56":{"start":{"line":94,"column":2},"end":{"line":94,"column":35}},"57":{"start":{"line":95,"column":2},"end":{"line":95,"column":24}},"58":{"start":{"line":96,"column":2},"end":{"line":103,"column":3}},"59":{"start":{"line":97,"column":4},"end":{"line":102,"column":5}},"60":{"start":{"line":99,"column":6},"end":{"line":99,"column":41}},"61":{"start":{"line":100,"column":11},"end":{"line":102,"column":5}},"62":{"start":{"line":101,"column":6},"end":{"line":101,"column":51}},"63":{"start":{"line":106,"column":2},"end":{"line":106,"column":16}},"64":{"start":{"line":107,"column":2},"end":{"line":121,"column":3}},"65":{"start":{"line":108,"column":4},"end":{"line":108,"column":57}},"66":{"start":{"line":110,"column":4},"end":{"line":110,"column":35}},"67":{"start":{"line":111,"column":4},"end":{"line":120,"column":5}},"68":{"start":{"line":112,"column":6},"end":{"line":119,"column":7}},"69":{"start":{"line":113,"column":8},"end":{"line":115,"column":9}},"70":{"start":{"line":114,"column":10},"end":{"line":114,"column":25}},"71":{"start":{"line":117,"column":8},"end":{"line":117,"column":34}},"72":{"start":{"line":118,"column":8},"end":{"line":118,"column":20}},"73":{"start":{"line":123,"column":2},"end":{"line":123,"column":23}}},"branchMap":{"1":{"line":16,"type":"if","locations":[{"start":{"line":16,"column":2},"end":{"line":16,"column":2}},{"start":{"line":16,"column":2},"end":{"line":16,"column":2}}]},"2":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":2},"end":{"line":24,"column":2}},{"start":{"line":24,"column":2},"end":{"line":24,"column":2}}]},"3":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":2},"end":{"line":34,"column":2}},{"start":{"line":34,"column":2},"end":{"line":34,"column":2}}]},"4":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":4},"end":{"line":55,"column":4}},{"start":{"line":55,"column":4},"end":{"line":55,"column":4}}]},"5":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":4},"end":{"line":61,"column":4}},{"start":{"line":61,"column":4},"end":{"line":61,"column":4}}]},"6":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":2},"end":{"line":69,"column":2}},{"start":{"line":69,"column":2},"end":{"line":69,"column":2}}]},"7":{"line":94,"type":"binary-expr","locations":[{"start":{"line":94,"column":23},"end":{"line":94,"column":28}},{"start":{"line":94,"column":32},"end":{"line":94,"column":33}}]},"8":{"line":96,"type":"if","locations":[{"start":{"line":96,"column":2},"end":{"line":96,"column":2}},{"start":{"line":96,"column":2},"end":{"line":96,"column":2}}]},"9":{"line":97,"type":"if","locations":[{"start":{"line":97,"column":4},"end":{"line":97,"column":4}},{"start":{"line":97,"column":4},"end":{"line":97,"column":4}}]},"10":{"line":100,"type":"if","locations":[{"start":{"line":100,"column":11},"end":{"line":100,"column":11}},{"start":{"line":100,"column":11},"end":{"line":100,"column":11}}]},"11":{"line":112,"type":"if","locations":[{"start":{"line":112,"column":6},"end":{"line":112,"column":6}},{"start":{"line":112,"column":6},"end":{"line":112,"column":6}}]},"12":{"line":113,"type":"if","locations":[{"start":{"line":113,"column":8},"end":{"line":113,"column":8}},{"start":{"line":113,"column":8},"end":{"line":113,"column":8}}]}},"code":["var bitNot = require('./bitNot');","","/**"," * Applies bitwise function to numbers"," * @param {BigNumber} x"," * @param {BigNumber} y"," * @param {function (a, b)} func"," * @return {BigNumber}"," */","module.exports = function bitwise(x, y, func) {","  var BigNumber = x.constructor;","","  var xBits, yBits;","  var xSign = +(x.s < 0);","  var ySign = +(y.s < 0);","  if (xSign) {","    xBits = decCoefficientToBinaryString(bitNot(x));","    for (var i = 0; i < xBits.length; ++i) {","      xBits[i] ^= 1;","    }","  } else {","    xBits = decCoefficientToBinaryString(x);","  }","  if (ySign) {","    yBits = decCoefficientToBinaryString(bitNot(y));","    for (var i = 0; i < yBits.length; ++i) {","      yBits[i] ^= 1;","    }","  } else {","    yBits = decCoefficientToBinaryString(y);","  }","","  var minBits, maxBits, minSign;","  if (xBits.length <= yBits.length) {","    minBits = xBits;","    maxBits = yBits;","    minSign = xSign;","  } else {","    minBits = yBits;","    maxBits = xBits;","    minSign = ySign;","  }","","  var shortLen = minBits.length;","  var longLen = maxBits.length;","  var expFuncVal = func(xSign, ySign) ^ 1;","  var outVal = new BigNumber(expFuncVal ^ 1);","  var twoPower = new BigNumber(1);","  var two = new BigNumber(2);","","  var prevPrec = BigNumber.precision;","  BigNumber.config({precision: 1E9});","","  while (shortLen > 0) {","    if (func(minBits[--shortLen], maxBits[--longLen]) == expFuncVal) {","      outVal = outVal.plus(twoPower);","    }","    twoPower = twoPower.times(two);","  }","  while (longLen > 0) {","    if (func(minSign, maxBits[--longLen]) == expFuncVal) {","      outVal = outVal.plus(twoPower);","    }","    twoPower = twoPower.times(two);","  }","","  BigNumber.config({precision: prevPrec});","","  if (expFuncVal == 0) {","    outVal.s = -outVal.s;","  }","  return outVal;","};","","/* Extracted from decimal.js, and edited to specialize. */","function decCoefficientToBinaryString (x) {","  // Convert to string","  var a = x.d; // array with digits","  var r = a[0] + '';","","  for (var i = 1; i < a.length; ++i) {","    var s = a[i] + '';","    for (var z = 7 - s.length; z--; ) {","      s = '0' + s;","    }","","    r += s;","  }","","  var j;","  for (j = r.length - 1; r.charAt(j) == '0'; --j);","","  var xe = x.e;","  var str = r.slice(0, j + 1 || 1);","  var strL = str.length;","  if (xe > 0) {","    if (++xe > strL) {","      // Append zeros.","      for (xe -= strL; xe--; str += '0');","    } else if (xe < strL) {","      str = str.slice(0, xe) + '.' + str.slice(xe);","    }","  }","","  // Convert from base 10 (decimal) to base 2","  var arr = [0];","  for (var i = 0; i < str.length; ) {","    for (var arrL = arr.length; arrL--; arr[arrL] *= 10);","","    arr[0] += str.charAt(i++) << 0;  // convert to int","    for (var j = 0; j < arr.length; ++j) {","      if (arr[j] > 1) {","        if (arr[j + 1] == null) {","          arr[j + 1] = 0;","        }","","        arr[j + 1] += arr[j] >> 1;","        arr[j] &= 1;","      }","    }","  }","","  return arr.reverse();","}",""],"l":{"1":1,"10":1,"11":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"22":0,"24":0,"25":0,"26":0,"27":0,"30":0,"33":0,"34":0,"35":0,"36":0,"37":0,"39":0,"40":0,"41":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"51":0,"52":0,"54":0,"55":0,"56":0,"58":0,"60":0,"61":0,"62":0,"64":0,"67":0,"69":0,"70":0,"72":0,"76":1,"78":0,"79":0,"81":0,"82":0,"83":0,"84":0,"87":0,"90":0,"91":0,"93":0,"94":0,"95":0,"96":0,"97":0,"99":0,"100":0,"101":0,"106":0,"107":0,"108":0,"110":0,"111":0,"112":0,"113":0,"114":0,"117":0,"118":0,"123":0}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/utils/bignumber/bitNot.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/utils/bignumber/bitNot.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"bitNot","line":7,"loc":{"start":{"line":7,"column":17},"end":{"line":7,"column":37}}}},"statementMap":{"1":{"start":{"line":7,"column":0},"end":{"line":21,"column":2}},"2":{"start":{"line":8,"column":2},"end":{"line":10,"column":3}},"3":{"start":{"line":9,"column":4},"end":{"line":9,"column":59}},"4":{"start":{"line":12,"column":2},"end":{"line":12,"column":32}},"5":{"start":{"line":13,"column":2},"end":{"line":13,"column":37}},"6":{"start":{"line":14,"column":2},"end":{"line":14,"column":37}},"7":{"start":{"line":16,"column":2},"end":{"line":16,"column":35}},"8":{"start":{"line":17,"column":2},"end":{"line":17,"column":21}},"9":{"start":{"line":19,"column":2},"end":{"line":19,"column":42}},"10":{"start":{"line":20,"column":2},"end":{"line":20,"column":11}}},"branchMap":{"1":{"line":8,"type":"if","locations":[{"start":{"line":8,"column":2},"end":{"line":8,"column":2}},{"start":{"line":8,"column":2},"end":{"line":8,"column":2}}]},"2":{"line":8,"type":"binary-expr","locations":[{"start":{"line":8,"column":6},"end":{"line":8,"column":18}},{"start":{"line":8,"column":22},"end":{"line":8,"column":36}}]},"3":{"line":17,"type":"binary-expr","locations":[{"start":{"line":17,"column":8},"end":{"line":17,"column":12}},{"start":{"line":17,"column":16},"end":{"line":17,"column":20}}]}},"code":["/**"," * Bitwise not"," * @param {BigNumber} value"," * @return {BigNumber} Result of ~`x`, fully precise"," *"," */","module.exports = function bitNot (x) {","  if (x.isFinite() && !x.isInteger()) {","    throw new Error('Integer expected in function bitNot');","  }","","  var BigNumber = x.constructor;","  var prevPrec = BigNumber.precision;","  BigNumber.config({precision: 1E9});","","  var x = x.plus(new BigNumber(1));","  x.s = -x.s || null;","","  BigNumber.config({precision: prevPrec});","  return x;","};",""],"l":{"7":1,"8":0,"9":0,"12":0,"13":0,"14":0,"16":0,"17":0,"19":0,"20":0}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/bitwise/bitNot.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/bitwise/bitNot.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1,"14":1},"b":{"1":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"factory","line":7,"loc":{"start":{"line":7,"column":0},"end":{"line":7,"column":45}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":14},"end":{"line":33,"column":27}}},"3":{"name":"(anonymous_3)","line":43,"loc":{"start":{"line":43,"column":22},"end":{"line":43,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":56}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":56}},"4":{"start":{"line":7,"column":0},"end":{"line":53,"column":1}},"5":{"start":{"line":8,"column":2},"end":{"line":8,"column":43}},"6":{"start":{"line":32,"column":2},"end":{"line":46,"column":5}},"7":{"start":{"line":34,"column":6},"end":{"line":36,"column":7}},"8":{"start":{"line":35,"column":8},"end":{"line":35,"column":63}},"9":{"start":{"line":38,"column":6},"end":{"line":38,"column":16}},"10":{"start":{"line":44,"column":6},"end":{"line":44,"column":32}},"11":{"start":{"line":48,"column":2},"end":{"line":50,"column":4}},"12":{"start":{"line":52,"column":2},"end":{"line":52,"column":16}},"13":{"start":{"line":55,"column":0},"end":{"line":55,"column":24}},"14":{"start":{"line":56,"column":0},"end":{"line":56,"column":26}}},"branchMap":{"1":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":6},"end":{"line":34,"column":6}},{"start":{"line":34,"column":6},"end":{"line":34,"column":6}}]}},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","var bigBitNot = require('../../utils/bignumber/bitNot');","var isInteger = require('../../utils/number').isInteger;","","function factory (type, config, load, typed) {","  var latex = require('../../utils/latex');","","  /**","   * Bitwise NOT value, `~x`.","   * For matrices, the function is evaluated element wise.","   * For units, the function is evaluated on the best prefix base.","   *","   * Syntax:","   *","   *    math.bitNot(x)","   *","   * Examples:","   *","   *    math.bitNot(1);               // returns number -2","   *","   *    math.bitNot([2, -3, 4]);      // returns Array [-3, 2, 5]","   *","   * See also:","   *","   *    bitAnd, bitOr, bitXor, leftShift, rightArithShift, rightLogShift","   *","   * @param  {number | BigNumber | Array | Matrix} x Value to not","   * @return {number | BigNumber | Array | Matrix} NOT of `x`","   */","  var bitNot = typed('bitNot', {","    'number': function (x) {","      if (!isInteger(x)) {","        throw new Error('Integer expected in function bitNot');","      }","","      return ~x;","    },","","    'BigNumber': bigBitNot,","","    'Array | Matrix': function (x) {","      return deepMap(x, bitNot);","    }","  });","","  bitNot.toTex = {","    1: latex.operators['bitNot'] + '\\\\left(${args[0]}\\\\right)'","  };","","  return bitNot;","}","","exports.name = 'bitNot';","exports.factory = factory;",""],"l":{"3":1,"4":1,"5":1,"7":1,"8":0,"32":0,"34":0,"35":0,"38":0,"44":0,"48":0,"52":0,"55":1,"56":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/bitwise/bitOr.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/bitwise/bitOr.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":1,"52":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"fnMap":{"1":{"name":"factory","line":6,"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":45}}},"2":{"name":"(anonymous_2)","line":42,"loc":{"start":{"line":42,"column":22},"end":{"line":42,"column":38}}},"3":{"name":"(anonymous_3)","line":52,"loc":{"start":{"line":52,"column":22},"end":{"line":52,"column":38}}},"4":{"name":"(anonymous_4)","line":85,"loc":{"start":{"line":85,"column":20},"end":{"line":85,"column":36}}},"5":{"name":"(anonymous_5)","line":90,"loc":{"start":{"line":90,"column":21},"end":{"line":90,"column":37}}},"6":{"name":"(anonymous_6)","line":95,"loc":{"start":{"line":95,"column":21},"end":{"line":95,"column":37}}},"7":{"name":"(anonymous_7)","line":100,"loc":{"start":{"line":100,"column":19},"end":{"line":100,"column":35}}},"8":{"name":"(anonymous_8)","line":115,"loc":{"start":{"line":115,"column":19},"end":{"line":115,"column":35}}},"9":{"name":"(anonymous_9)","line":130,"loc":{"start":{"line":130,"column":18},"end":{"line":130,"column":34}}},"10":{"name":"(anonymous_10)","line":135,"loc":{"start":{"line":135,"column":18},"end":{"line":135,"column":34}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":54}},"3":{"start":{"line":6,"column":0},"end":{"line":146,"column":1}},"4":{"start":{"line":7,"column":2},"end":{"line":7,"column":43}},"5":{"start":{"line":9,"column":2},"end":{"line":9,"column":66}},"6":{"start":{"line":11,"column":2},"end":{"line":11,"column":73}},"7":{"start":{"line":12,"column":2},"end":{"line":12,"column":73}},"8":{"start":{"line":13,"column":2},"end":{"line":13,"column":73}},"9":{"start":{"line":14,"column":2},"end":{"line":14,"column":73}},"10":{"start":{"line":15,"column":2},"end":{"line":15,"column":73}},"11":{"start":{"line":40,"column":2},"end":{"line":139,"column":5}},"12":{"start":{"line":43,"column":6},"end":{"line":45,"column":7}},"13":{"start":{"line":44,"column":8},"end":{"line":44,"column":63}},"14":{"start":{"line":47,"column":6},"end":{"line":47,"column":19}},"15":{"start":{"line":54,"column":6},"end":{"line":54,"column":12}},"16":{"start":{"line":57,"column":6},"end":{"line":81,"column":7}},"17":{"start":{"line":59,"column":10},"end":{"line":68,"column":11}},"18":{"start":{"line":62,"column":14},"end":{"line":62,"column":43}},"19":{"start":{"line":63,"column":14},"end":{"line":63,"column":20}},"20":{"start":{"line":66,"column":14},"end":{"line":66,"column":49}},"21":{"start":{"line":67,"column":14},"end":{"line":67,"column":20}},"22":{"start":{"line":69,"column":10},"end":{"line":69,"column":16}},"23":{"start":{"line":71,"column":10},"end":{"line":79,"column":11}},"24":{"start":{"line":74,"column":14},"end":{"line":74,"column":50}},"25":{"start":{"line":75,"column":14},"end":{"line":75,"column":20}},"26":{"start":{"line":77,"column":14},"end":{"line":77,"column":43}},"27":{"start":{"line":78,"column":14},"end":{"line":78,"column":20}},"28":{"start":{"line":80,"column":10},"end":{"line":80,"column":16}},"29":{"start":{"line":82,"column":6},"end":{"line":82,"column":15}},"30":{"start":{"line":87,"column":6},"end":{"line":87,"column":51}},"31":{"start":{"line":92,"column":6},"end":{"line":92,"column":33}},"32":{"start":{"line":97,"column":6},"end":{"line":97,"column":33}},"33":{"start":{"line":102,"column":6},"end":{"line":102,"column":12}},"34":{"start":{"line":104,"column":6},"end":{"line":111,"column":7}},"35":{"start":{"line":106,"column":10},"end":{"line":106,"column":46}},"36":{"start":{"line":107,"column":10},"end":{"line":107,"column":16}},"37":{"start":{"line":109,"column":10},"end":{"line":109,"column":46}},"38":{"start":{"line":110,"column":10},"end":{"line":110,"column":16}},"39":{"start":{"line":112,"column":6},"end":{"line":112,"column":15}},"40":{"start":{"line":117,"column":6},"end":{"line":117,"column":12}},"41":{"start":{"line":119,"column":6},"end":{"line":126,"column":7}},"42":{"start":{"line":121,"column":10},"end":{"line":121,"column":45}},"43":{"start":{"line":122,"column":10},"end":{"line":122,"column":16}},"44":{"start":{"line":124,"column":10},"end":{"line":124,"column":45}},"45":{"start":{"line":125,"column":10},"end":{"line":125,"column":16}},"46":{"start":{"line":127,"column":6},"end":{"line":127,"column":15}},"47":{"start":{"line":132,"column":6},"end":{"line":132,"column":63}},"48":{"start":{"line":137,"column":6},"end":{"line":137,"column":62}},"49":{"start":{"line":141,"column":2},"end":{"line":143,"column":4}},"50":{"start":{"line":145,"column":2},"end":{"line":145,"column":15}},"51":{"start":{"line":148,"column":0},"end":{"line":148,"column":23}},"52":{"start":{"line":149,"column":0},"end":{"line":149,"column":26}}},"branchMap":{"1":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":6},"end":{"line":43,"column":6}},{"start":{"line":43,"column":6},"end":{"line":43,"column":6}}]},"2":{"line":43,"type":"binary-expr","locations":[{"start":{"line":43,"column":10},"end":{"line":43,"column":23}},{"start":{"line":43,"column":27},"end":{"line":43,"column":40}}]},"3":{"line":57,"type":"switch","locations":[{"start":{"line":58,"column":8},"end":{"line":69,"column":16}},{"start":{"line":70,"column":8},"end":{"line":80,"column":16}}]},"4":{"line":59,"type":"switch","locations":[{"start":{"line":60,"column":12},"end":{"line":63,"column":20}},{"start":{"line":64,"column":12},"end":{"line":67,"column":20}}]},"5":{"line":71,"type":"switch","locations":[{"start":{"line":72,"column":12},"end":{"line":75,"column":20}},{"start":{"line":76,"column":12},"end":{"line":78,"column":20}}]},"6":{"line":104,"type":"switch","locations":[{"start":{"line":105,"column":8},"end":{"line":107,"column":16}},{"start":{"line":108,"column":8},"end":{"line":110,"column":16}}]},"7":{"line":119,"type":"switch","locations":[{"start":{"line":120,"column":8},"end":{"line":122,"column":16}},{"start":{"line":123,"column":8},"end":{"line":125,"column":16}}]}},"code":["'use strict';","","var isInteger = require('../../utils/number').isInteger;","var bigBitOr = require('../../utils/bignumber/bitOr');","","function factory (type, config, load, typed) {","  var latex = require('../../utils/latex');","","  var matrix = load(require('../../type/matrix/function/matrix'));","","  var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));","  var algorithm04 = load(require('../../type/matrix/utils/algorithm04'));","  var algorithm10 = load(require('../../type/matrix/utils/algorithm10'));","  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));","  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));","  ","  /**","   * Bitwise OR two values, `x | y`.","   * For matrices, the function is evaluated element wise.","   * For units, the function is evaluated on the lowest print base.","   *","   * Syntax:","   *","   *    math.bitOr(x, y)","   *","   * Examples:","   *","   *    math.bitOr(1, 2);               // returns number 3","   *","   *    math.bitOr([1, 2, 3], 4);       // returns Array [5, 6, 7]","   *","   * See also:","   *","   *    bitAnd, bitNot, bitXor, leftShift, rightArithShift, rightLogShift","   *","   * @param  {number | BigNumber | Array | Matrix} x First value to or","   * @param  {number | BigNumber | Array | Matrix} y Second value to or","   * @return {number | BigNumber | Array | Matrix} OR of `x` and `y`","   */","  var bitOr = typed('bitOr', {","","    'number, number': function (x, y) {","      if (!isInteger(x) || !isInteger(y)) {","        throw new Error('Integers expected in function bitOr');","      }","","      return x | y;","    },","","    'BigNumber, BigNumber': bigBitOr,","","    'Matrix, Matrix': function (x, y) {","      // result","      var c;","","      // process matrix storage","      switch (x.storage()) {","        case 'sparse':","          switch (y.storage()) {","            case 'sparse':","              // sparse + sparse","              c = algorithm04(x, y, bitOr);","              break;","            default:","              // sparse + dense","              c = algorithm01(y, x, bitOr, true);","              break;","          }","          break;","        default:","          switch (y.storage()) {","            case 'sparse':","              // dense + sparse","              c = algorithm01(x, y, bitOr, false);","              break;","            default:","              c = algorithm13(x, y, bitOr);","              break;","          }","          break;","      }","      return c;","    },","","    'Array, Array': function (x, y) {","      // use matrix implementation","      return bitOr(matrix(x), matrix(y)).valueOf();","    },","","    'Array, Matrix': function (x, y) {","      // use matrix implementation","      return bitOr(matrix(x), y);","    },","","    'Matrix, Array': function (x, y) {","      // use matrix implementation","      return bitOr(x, matrix(y));","    },","","    'Matrix, any': function (x, y) {","      // result","      var c;","      // check storage format","      switch (x.storage()) {","        case 'sparse':","          c = algorithm10(x, y, bitOr, false);","          break;","        default:","          c = algorithm14(x, y, bitOr, false);","          break;","      }","      return c;","    },","","    'any, Matrix': function (x, y) {","      // result","      var c;","      // check storage format","      switch (y.storage()) {","        case 'sparse':","          c = algorithm10(y, x, bitOr, true);","          break;","        default:","          c = algorithm14(y, x, bitOr, true);","          break;","      }","      return c;","    },","","    'Array, any': function (x, y) {","      // use matrix implementation","      return algorithm14(matrix(x), y, bitOr, false).valueOf();","    },","","    'any, Array': function (x, y) {","      // use matrix implementation","      return algorithm14(matrix(y), x, bitOr, true).valueOf();","    }","  });","","  bitOr.toTex = {","    2: '\\\\left(${args[0]}' + latex.operators['bitOr'] + '${args[1]}\\\\right)'","  };","","  return bitOr;","}","","exports.name = 'bitOr';","exports.factory = factory;",""],"l":{"3":1,"4":1,"6":1,"7":0,"9":0,"11":0,"12":0,"13":0,"14":0,"15":0,"40":0,"43":0,"44":0,"47":0,"54":0,"57":0,"59":0,"62":0,"63":0,"66":0,"67":0,"69":0,"71":0,"74":0,"75":0,"77":0,"78":0,"80":0,"82":0,"87":0,"92":0,"97":0,"102":0,"104":0,"106":0,"107":0,"109":0,"110":0,"112":0,"117":0,"119":0,"121":0,"122":0,"124":0,"125":0,"127":0,"132":0,"137":0,"141":0,"145":0,"148":1,"149":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/utils/bignumber/bitOr.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/utils/bignumber/bitOr.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0},"b":{"1":[0,0],"2":[0,0,0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0,0,0,0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"bitOr","line":23,"loc":{"start":{"line":23,"column":17},"end":{"line":23,"column":39}}},"2":{"name":"(anonymous_2)","line":52,"loc":{"start":{"line":52,"column":23},"end":{"line":52,"column":39}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":35}},"2":{"start":{"line":23,"column":0},"end":{"line":53,"column":2}},"3":{"start":{"line":24,"column":2},"end":{"line":26,"column":3}},"4":{"start":{"line":25,"column":4},"end":{"line":25,"column":59}},"5":{"start":{"line":28,"column":2},"end":{"line":28,"column":32}},"6":{"start":{"line":29,"column":2},"end":{"line":31,"column":3}},"7":{"start":{"line":30,"column":4},"end":{"line":30,"column":30}},"8":{"start":{"line":33,"column":2},"end":{"line":33,"column":33}},"9":{"start":{"line":34,"column":2},"end":{"line":36,"column":3}},"10":{"start":{"line":35,"column":4},"end":{"line":35,"column":13}},"11":{"start":{"line":37,"column":2},"end":{"line":39,"column":3}},"12":{"start":{"line":38,"column":4},"end":{"line":38,"column":13}},"13":{"start":{"line":41,"column":2},"end":{"line":50,"column":3}},"14":{"start":{"line":42,"column":4},"end":{"line":45,"column":5}},"15":{"start":{"line":44,"column":6},"end":{"line":44,"column":20}},"16":{"start":{"line":46,"column":4},"end":{"line":48,"column":5}},"17":{"start":{"line":47,"column":6},"end":{"line":47,"column":34}},"18":{"start":{"line":49,"column":4},"end":{"line":49,"column":32}},"19":{"start":{"line":52,"column":2},"end":{"line":52,"column":57}},"20":{"start":{"line":52,"column":41},"end":{"line":52,"column":54}}},"branchMap":{"1":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":2},"end":{"line":24,"column":2}},{"start":{"line":24,"column":2},"end":{"line":24,"column":2}}]},"2":{"line":24,"type":"binary-expr","locations":[{"start":{"line":24,"column":7},"end":{"line":24,"column":19}},{"start":{"line":24,"column":23},"end":{"line":24,"column":37}},{"start":{"line":24,"column":43},"end":{"line":24,"column":55}},{"start":{"line":24,"column":59},"end":{"line":24,"column":73}}]},"3":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":2},"end":{"line":29,"column":2}},{"start":{"line":29,"column":2},"end":{"line":29,"column":2}}]},"4":{"line":29,"type":"binary-expr","locations":[{"start":{"line":29,"column":6},"end":{"line":29,"column":15}},{"start":{"line":29,"column":19},"end":{"line":29,"column":28}}]},"5":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":2},"end":{"line":34,"column":2}},{"start":{"line":34,"column":2},"end":{"line":34,"column":2}}]},"6":{"line":34,"type":"binary-expr","locations":[{"start":{"line":34,"column":6},"end":{"line":34,"column":16}},{"start":{"line":34,"column":20},"end":{"line":34,"column":32}},{"start":{"line":34,"column":36},"end":{"line":34,"column":43}}]},"7":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":2},"end":{"line":37,"column":2}},{"start":{"line":37,"column":2},"end":{"line":37,"column":2}}]},"8":{"line":37,"type":"binary-expr","locations":[{"start":{"line":37,"column":6},"end":{"line":37,"column":16}},{"start":{"line":37,"column":20},"end":{"line":37,"column":32}}]},"9":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":2},"end":{"line":41,"column":2}},{"start":{"line":41,"column":2},"end":{"line":41,"column":2}}]},"10":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":6},"end":{"line":41,"column":19}},{"start":{"line":41,"column":23},"end":{"line":41,"column":36}}]},"11":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":4},"end":{"line":42,"column":4}},{"start":{"line":42,"column":4},"end":{"line":42,"column":4}}]},"12":{"line":42,"type":"binary-expr","locations":[{"start":{"line":42,"column":9},"end":{"line":42,"column":22}},{"start":{"line":42,"column":26},"end":{"line":42,"column":41}},{"start":{"line":42,"column":45},"end":{"line":42,"column":59}},{"start":{"line":43,"column":9},"end":{"line":43,"column":23}},{"start":{"line":43,"column":27},"end":{"line":43,"column":42}},{"start":{"line":43,"column":46},"end":{"line":43,"column":59}}]},"13":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":4},"end":{"line":46,"column":4}},{"start":{"line":46,"column":4},"end":{"line":46,"column":4}}]},"14":{"line":46,"type":"binary-expr","locations":[{"start":{"line":46,"column":8},"end":{"line":46,"column":22}},{"start":{"line":46,"column":26},"end":{"line":46,"column":40}}]},"15":{"line":47,"type":"cond-expr","locations":[{"start":{"line":47,"column":28},"end":{"line":47,"column":29}},{"start":{"line":47,"column":32},"end":{"line":47,"column":33}}]},"16":{"line":49,"type":"cond-expr","locations":[{"start":{"line":49,"column":26},"end":{"line":49,"column":27}},{"start":{"line":49,"column":30},"end":{"line":49,"column":31}}]}},"code":["var bitwise = require('./bitwise');","","/**"," * Bitwise OR for BigNumbers"," *"," * Special Cases:"," *   N |  n =  N"," *   n |  0 =  n"," *   n | -1 = -1"," *   n |  n =  n"," *   I |  I =  I"," *  -I | -I = -I"," *   I | -n = -1"," *   I | -I = -1"," *   I |  n =  I"," *  -I |  n = -I"," *  -I | -n = -n"," *"," * @param {BigNumber} x"," * @param {BigNumber} y"," * @return {BigNumber} Result of `x` | `y`, fully precise"," */","module.exports = function bitOr (x, y) {","  if ((x.isFinite() && !x.isInteger()) || (y.isFinite() && !y.isInteger())) {","    throw new Error('Integers expected in function bitOr');","  }","","  var BigNumber = x.constructor;","  if (x.isNaN() || y.isNaN()) {","    return new BigNumber(NaN);","  }","","  var negOne = new BigNumber(-1);","  if (x.isZero() || y.eq(negOne) || x.eq(y)) {","    return y;","  }","  if (y.isZero() || x.eq(negOne)) {","    return x;","  }","","  if (!x.isFinite() || !y.isFinite()) {","    if ((!x.isFinite() && !x.isNegative() && y.isNegative()) ||","        (x.isNegative() && !y.isNegative() && !y.isFinite())) {","      return negOne;","    }","    if (x.isNegative() && y.isNegative()) {","      return x.isFinite() ? x : y;","    }","    return x.isFinite() ? y : x;","  }","","  return bitwise(x, y, function (a, b) { return a | b });","};",""],"l":{"1":1,"23":1,"24":0,"25":0,"28":0,"29":0,"30":0,"33":0,"34":0,"35":0,"37":0,"38":0,"41":0,"42":0,"44":0,"46":0,"47":0,"49":0,"52":0}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/bitwise/bitXor.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/bitwise/bitXor.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":1,"52":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"fnMap":{"1":{"name":"factory","line":6,"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":45}}},"2":{"name":"(anonymous_2)","line":41,"loc":{"start":{"line":41,"column":22},"end":{"line":41,"column":38}}},"3":{"name":"(anonymous_3)","line":51,"loc":{"start":{"line":51,"column":22},"end":{"line":51,"column":38}}},"4":{"name":"(anonymous_4)","line":85,"loc":{"start":{"line":85,"column":20},"end":{"line":85,"column":36}}},"5":{"name":"(anonymous_5)","line":90,"loc":{"start":{"line":90,"column":21},"end":{"line":90,"column":37}}},"6":{"name":"(anonymous_6)","line":95,"loc":{"start":{"line":95,"column":21},"end":{"line":95,"column":37}}},"7":{"name":"(anonymous_7)","line":100,"loc":{"start":{"line":100,"column":19},"end":{"line":100,"column":35}}},"8":{"name":"(anonymous_8)","line":115,"loc":{"start":{"line":115,"column":19},"end":{"line":115,"column":35}}},"9":{"name":"(anonymous_9)","line":130,"loc":{"start":{"line":130,"column":18},"end":{"line":130,"column":34}}},"10":{"name":"(anonymous_10)","line":135,"loc":{"start":{"line":135,"column":18},"end":{"line":135,"column":34}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":56}},"3":{"start":{"line":6,"column":0},"end":{"line":146,"column":1}},"4":{"start":{"line":7,"column":2},"end":{"line":7,"column":43}},"5":{"start":{"line":9,"column":2},"end":{"line":9,"column":66}},"6":{"start":{"line":11,"column":2},"end":{"line":11,"column":73}},"7":{"start":{"line":12,"column":2},"end":{"line":12,"column":73}},"8":{"start":{"line":13,"column":2},"end":{"line":13,"column":73}},"9":{"start":{"line":14,"column":2},"end":{"line":14,"column":73}},"10":{"start":{"line":15,"column":2},"end":{"line":15,"column":73}},"11":{"start":{"line":39,"column":2},"end":{"line":139,"column":5}},"12":{"start":{"line":42,"column":6},"end":{"line":44,"column":7}},"13":{"start":{"line":43,"column":8},"end":{"line":43,"column":64}},"14":{"start":{"line":46,"column":6},"end":{"line":46,"column":19}},"15":{"start":{"line":53,"column":6},"end":{"line":53,"column":12}},"16":{"start":{"line":56,"column":6},"end":{"line":81,"column":7}},"17":{"start":{"line":58,"column":10},"end":{"line":67,"column":11}},"18":{"start":{"line":61,"column":14},"end":{"line":61,"column":44}},"19":{"start":{"line":62,"column":14},"end":{"line":62,"column":20}},"20":{"start":{"line":65,"column":14},"end":{"line":65,"column":50}},"21":{"start":{"line":66,"column":14},"end":{"line":66,"column":20}},"22":{"start":{"line":68,"column":10},"end":{"line":68,"column":16}},"23":{"start":{"line":70,"column":10},"end":{"line":79,"column":11}},"24":{"start":{"line":73,"column":14},"end":{"line":73,"column":51}},"25":{"start":{"line":74,"column":14},"end":{"line":74,"column":20}},"26":{"start":{"line":77,"column":14},"end":{"line":77,"column":44}},"27":{"start":{"line":78,"column":14},"end":{"line":78,"column":20}},"28":{"start":{"line":80,"column":10},"end":{"line":80,"column":16}},"29":{"start":{"line":82,"column":6},"end":{"line":82,"column":15}},"30":{"start":{"line":87,"column":6},"end":{"line":87,"column":52}},"31":{"start":{"line":92,"column":6},"end":{"line":92,"column":34}},"32":{"start":{"line":97,"column":6},"end":{"line":97,"column":34}},"33":{"start":{"line":102,"column":6},"end":{"line":102,"column":12}},"34":{"start":{"line":104,"column":6},"end":{"line":111,"column":7}},"35":{"start":{"line":106,"column":10},"end":{"line":106,"column":47}},"36":{"start":{"line":107,"column":10},"end":{"line":107,"column":16}},"37":{"start":{"line":109,"column":10},"end":{"line":109,"column":47}},"38":{"start":{"line":110,"column":10},"end":{"line":110,"column":16}},"39":{"start":{"line":112,"column":6},"end":{"line":112,"column":15}},"40":{"start":{"line":117,"column":6},"end":{"line":117,"column":12}},"41":{"start":{"line":119,"column":6},"end":{"line":126,"column":7}},"42":{"start":{"line":121,"column":10},"end":{"line":121,"column":46}},"43":{"start":{"line":122,"column":10},"end":{"line":122,"column":16}},"44":{"start":{"line":124,"column":10},"end":{"line":124,"column":46}},"45":{"start":{"line":125,"column":10},"end":{"line":125,"column":16}},"46":{"start":{"line":127,"column":6},"end":{"line":127,"column":15}},"47":{"start":{"line":132,"column":6},"end":{"line":132,"column":64}},"48":{"start":{"line":137,"column":6},"end":{"line":137,"column":63}},"49":{"start":{"line":141,"column":2},"end":{"line":143,"column":4}},"50":{"start":{"line":145,"column":2},"end":{"line":145,"column":16}},"51":{"start":{"line":148,"column":0},"end":{"line":148,"column":24}},"52":{"start":{"line":149,"column":0},"end":{"line":149,"column":26}}},"branchMap":{"1":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":6},"end":{"line":42,"column":6}},{"start":{"line":42,"column":6},"end":{"line":42,"column":6}}]},"2":{"line":42,"type":"binary-expr","locations":[{"start":{"line":42,"column":10},"end":{"line":42,"column":23}},{"start":{"line":42,"column":27},"end":{"line":42,"column":40}}]},"3":{"line":56,"type":"switch","locations":[{"start":{"line":57,"column":8},"end":{"line":68,"column":16}},{"start":{"line":69,"column":8},"end":{"line":80,"column":16}}]},"4":{"line":58,"type":"switch","locations":[{"start":{"line":59,"column":12},"end":{"line":62,"column":20}},{"start":{"line":63,"column":12},"end":{"line":66,"column":20}}]},"5":{"line":70,"type":"switch","locations":[{"start":{"line":71,"column":12},"end":{"line":74,"column":20}},{"start":{"line":75,"column":12},"end":{"line":78,"column":20}}]},"6":{"line":104,"type":"switch","locations":[{"start":{"line":105,"column":8},"end":{"line":107,"column":16}},{"start":{"line":108,"column":8},"end":{"line":110,"column":16}}]},"7":{"line":119,"type":"switch","locations":[{"start":{"line":120,"column":8},"end":{"line":122,"column":16}},{"start":{"line":123,"column":8},"end":{"line":125,"column":16}}]}},"code":["'use strict';","","var isInteger = require('../../utils/number').isInteger;","var bigBitXor = require('../../utils/bignumber/bitXor');","","function factory (type, config, load, typed) {","  var latex = require('../../utils/latex');","","  var matrix = load(require('../../type/matrix/function/matrix'));","","  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));","  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));","  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));","  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));","  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));","","  /**","   * Bitwise XOR two values, `x ^ y`.","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.bitXor(x, y)","   *","   * Examples:","   *","   *    math.bitXor(1, 2);               // returns number 3","   *","   *    math.bitXor([2, 3, 4], 4);       // returns Array [6, 7, 0]","   *","   * See also:","   *","   *    bitAnd, bitNot, bitOr, leftShift, rightArithShift, rightLogShift","   *","   * @param  {number | BigNumber | Array | Matrix} x First value to xor","   * @param  {number | BigNumber | Array | Matrix} y Second value to xor","   * @return {number | BigNumber | Array | Matrix} XOR of `x` and `y`","   */","  var bitXor = typed('bitXor', {","","    'number, number': function (x, y) {","      if (!isInteger(x) || !isInteger(y)) {","        throw new Error('Integers expected in function bitXor');","      }","","      return x ^ y;","    },","","    'BigNumber, BigNumber': bigBitXor,","","    'Matrix, Matrix': function (x, y) {","      // result","      var c;","","      // process matrix storage","      switch (x.storage()) {","        case 'sparse':","          switch (y.storage()) {","            case 'sparse':","              // sparse + sparse","              c = algorithm07(x, y, bitXor);","              break;","            default:","              // sparse + dense","              c = algorithm03(y, x, bitXor, true);","              break;","          }","          break;","        default:","          switch (y.storage()) {","            case 'sparse':","              // dense + sparse","              c = algorithm03(x, y, bitXor, false);","              break;","            default:","              // dense + dense","              c = algorithm13(x, y, bitXor);","              break;","          }","          break;","      }","      return c;","    },","","    'Array, Array': function (x, y) {","      // use matrix implementation","      return bitXor(matrix(x), matrix(y)).valueOf();","    },","","    'Array, Matrix': function (x, y) {","      // use matrix implementation","      return bitXor(matrix(x), y);","    },","","    'Matrix, Array': function (x, y) {","      // use matrix implementation","      return bitXor(x, matrix(y));","    },","","    'Matrix, any': function (x, y) {","      // result","      var c;","      // check storage format","      switch (x.storage()) {","        case 'sparse':","          c = algorithm12(x, y, bitXor, false);","          break;","        default:","          c = algorithm14(x, y, bitXor, false);","          break;","      }","      return c;","    },","","    'any, Matrix': function (x, y) {","      // result","      var c;","      // check storage format","      switch (y.storage()) {","        case 'sparse':","          c = algorithm12(y, x, bitXor, true);","          break;","        default:","          c = algorithm14(y, x, bitXor, true);","          break;","      }","      return c;","    },","","    'Array, any': function (x, y) {","      // use matrix implementation","      return algorithm14(matrix(x), y, bitXor, false).valueOf();","    },","","    'any, Array': function (x, y) {","      // use matrix implementation","      return algorithm14(matrix(y), x, bitXor, true).valueOf();","    }","  });","","  bitXor.toTex = {","    2: '\\\\left(${args[0]}' + latex.operators['bitXor'] + '${args[1]}\\\\right)'","  };","","  return bitXor;","}","","exports.name = 'bitXor';","exports.factory = factory;",""],"l":{"3":1,"4":1,"6":1,"7":0,"9":0,"11":0,"12":0,"13":0,"14":0,"15":0,"39":0,"42":0,"43":0,"46":0,"53":0,"56":0,"58":0,"61":0,"62":0,"65":0,"66":0,"68":0,"70":0,"73":0,"74":0,"77":0,"78":0,"80":0,"82":0,"87":0,"92":0,"97":0,"102":0,"104":0,"106":0,"107":0,"109":0,"110":0,"112":0,"117":0,"119":0,"121":0,"122":0,"124":0,"125":0,"127":0,"132":0,"137":0,"141":0,"145":0,"148":1,"149":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/utils/bignumber/bitXor.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/utils/bignumber/bitXor.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0},"b":{"1":[0,0],"2":[0,0,0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"bitXor","line":23,"loc":{"start":{"line":23,"column":17},"end":{"line":23,"column":39}}},"2":{"name":"(anonymous_2)","line":59,"loc":{"start":{"line":59,"column":23},"end":{"line":59,"column":39}}}},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":35}},"2":{"start":{"line":2,"column":0},"end":{"line":2,"column":33}},"3":{"start":{"line":23,"column":0},"end":{"line":60,"column":2}},"4":{"start":{"line":24,"column":2},"end":{"line":26,"column":3}},"5":{"start":{"line":25,"column":4},"end":{"line":25,"column":60}},"6":{"start":{"line":28,"column":2},"end":{"line":28,"column":32}},"7":{"start":{"line":29,"column":2},"end":{"line":31,"column":3}},"8":{"start":{"line":30,"column":4},"end":{"line":30,"column":30}},"9":{"start":{"line":32,"column":2},"end":{"line":34,"column":3}},"10":{"start":{"line":33,"column":4},"end":{"line":33,"column":13}},"11":{"start":{"line":35,"column":2},"end":{"line":37,"column":3}},"12":{"start":{"line":36,"column":4},"end":{"line":36,"column":13}},"13":{"start":{"line":39,"column":2},"end":{"line":41,"column":3}},"14":{"start":{"line":40,"column":4},"end":{"line":40,"column":28}},"15":{"start":{"line":43,"column":2},"end":{"line":43,"column":33}},"16":{"start":{"line":44,"column":2},"end":{"line":46,"column":3}},"17":{"start":{"line":45,"column":4},"end":{"line":45,"column":21}},"18":{"start":{"line":47,"column":2},"end":{"line":49,"column":3}},"19":{"start":{"line":48,"column":4},"end":{"line":48,"column":21}},"20":{"start":{"line":51,"column":2},"end":{"line":58,"column":3}},"21":{"start":{"line":52,"column":4},"end":{"line":54,"column":5}},"22":{"start":{"line":53,"column":6},"end":{"line":53,"column":20}},"23":{"start":{"line":55,"column":4},"end":{"line":57,"column":21}},"24":{"start":{"line":59,"column":2},"end":{"line":59,"column":57}},"25":{"start":{"line":59,"column":41},"end":{"line":59,"column":54}}},"branchMap":{"1":{"line":24,"type":"if","locations":[{"start":{"line":24,"column":2},"end":{"line":24,"column":2}},{"start":{"line":24,"column":2},"end":{"line":24,"column":2}}]},"2":{"line":24,"type":"binary-expr","locations":[{"start":{"line":24,"column":7},"end":{"line":24,"column":19}},{"start":{"line":24,"column":23},"end":{"line":24,"column":37}},{"start":{"line":24,"column":43},"end":{"line":24,"column":55}},{"start":{"line":24,"column":59},"end":{"line":24,"column":73}}]},"3":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":2},"end":{"line":29,"column":2}},{"start":{"line":29,"column":2},"end":{"line":29,"column":2}}]},"4":{"line":29,"type":"binary-expr","locations":[{"start":{"line":29,"column":6},"end":{"line":29,"column":15}},{"start":{"line":29,"column":19},"end":{"line":29,"column":28}}]},"5":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":2},"end":{"line":32,"column":2}},{"start":{"line":32,"column":2},"end":{"line":32,"column":2}}]},"6":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":2},"end":{"line":35,"column":2}},{"start":{"line":35,"column":2},"end":{"line":35,"column":2}}]},"7":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":2},"end":{"line":39,"column":2}},{"start":{"line":39,"column":2},"end":{"line":39,"column":2}}]},"8":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":2},"end":{"line":44,"column":2}},{"start":{"line":44,"column":2},"end":{"line":44,"column":2}}]},"9":{"line":47,"type":"if","locations":[{"start":{"line":47,"column":2},"end":{"line":47,"column":2}},{"start":{"line":47,"column":2},"end":{"line":47,"column":2}}]},"10":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":2},"end":{"line":51,"column":2}},{"start":{"line":51,"column":2},"end":{"line":51,"column":2}}]},"11":{"line":51,"type":"binary-expr","locations":[{"start":{"line":51,"column":6},"end":{"line":51,"column":19}},{"start":{"line":51,"column":23},"end":{"line":51,"column":36}}]},"12":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":4},"end":{"line":52,"column":4}},{"start":{"line":52,"column":4},"end":{"line":52,"column":4}}]},"13":{"line":52,"type":"binary-expr","locations":[{"start":{"line":52,"column":8},"end":{"line":52,"column":21}},{"start":{"line":52,"column":25},"end":{"line":52,"column":38}}]},"14":{"line":55,"type":"cond-expr","locations":[{"start":{"line":56,"column":11},"end":{"line":56,"column":19}},{"start":{"line":57,"column":10},"end":{"line":57,"column":19}}]}},"code":["var bitwise = require('./bitwise');","var bitNot = require('./bitNot');","","/**"," * Bitwise XOR for BigNumbers"," *"," * Special Cases:"," *   N ^  n =  N"," *   n ^  0 =  n"," *   n ^  n =  0"," *   n ^ -1 = ~n"," *   I ^  n =  I"," *   I ^ -n = -I"," *   I ^ -I = -1"," *  -I ^  n = -I"," *  -I ^ -n =  I"," *"," * @param {BigNumber} x"," * @param {BigNumber} y"," * @return {BigNumber} Result of `x` ^ `y`, fully precise"," *"," */","module.exports = function bitXor(x, y) {","  if ((x.isFinite() && !x.isInteger()) || (y.isFinite() && !y.isInteger())) {","    throw new Error('Integers expected in function bitXor');","  }","","  var BigNumber = x.constructor;","  if (x.isNaN() || y.isNaN()) {","    return new BigNumber(NaN);","  }","  if (x.isZero()) {","    return y;","  }","  if (y.isZero()) {","    return x;","  }","","  if (x.eq(y)) {","    return new BigNumber(0);","  }","","  var negOne = new BigNumber(-1);","  if (x.eq(negOne)) {","    return bitNot(y);","  }","  if (y.eq(negOne)) {","    return bitNot(x);","  }","","  if (!x.isFinite() || !y.isFinite()) {","    if (!x.isFinite() && !y.isFinite()) {","      return negOne;","    }","    return new BigNumber(x.isNegative() == y.isNegative()","        ?  Infinity","        : -Infinity);","  }","  return bitwise(x, y, function (a, b) { return a ^ b });","};",""],"l":{"1":1,"2":1,"23":1,"24":0,"25":0,"28":0,"29":0,"30":0,"32":0,"33":0,"35":0,"36":0,"39":0,"40":0,"43":0,"44":0,"45":0,"47":0,"48":0,"51":0,"52":0,"53":0,"55":0,"59":0}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/bitwise/leftShift.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/bitwise/leftShift.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":1,"60":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"fnMap":{"1":{"name":"factory","line":6,"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":45}}},"2":{"name":"(anonymous_2)","line":46,"loc":{"start":{"line":46,"column":22},"end":{"line":46,"column":38}}},"3":{"name":"(anonymous_3)","line":56,"loc":{"start":{"line":56,"column":22},"end":{"line":56,"column":38}}},"4":{"name":"(anonymous_4)","line":90,"loc":{"start":{"line":90,"column":20},"end":{"line":90,"column":36}}},"5":{"name":"(anonymous_5)","line":95,"loc":{"start":{"line":95,"column":21},"end":{"line":95,"column":37}}},"6":{"name":"(anonymous_6)","line":100,"loc":{"start":{"line":100,"column":21},"end":{"line":100,"column":37}}},"7":{"name":"(anonymous_7)","line":105,"loc":{"start":{"line":105,"column":34},"end":{"line":105,"column":50}}},"8":{"name":"(anonymous_8)","line":124,"loc":{"start":{"line":124,"column":34},"end":{"line":124,"column":50}}},"9":{"name":"(anonymous_9)","line":143,"loc":{"start":{"line":143,"column":33},"end":{"line":143,"column":49}}},"10":{"name":"(anonymous_10)","line":148,"loc":{"start":{"line":148,"column":33},"end":{"line":148,"column":49}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":62}},"3":{"start":{"line":6,"column":0},"end":{"line":159,"column":1}},"4":{"start":{"line":7,"column":2},"end":{"line":7,"column":43}},"5":{"start":{"line":9,"column":2},"end":{"line":9,"column":66}},"6":{"start":{"line":10,"column":2},"end":{"line":10,"column":63}},"7":{"start":{"line":11,"column":2},"end":{"line":11,"column":47}},"8":{"start":{"line":13,"column":2},"end":{"line":13,"column":73}},"9":{"start":{"line":14,"column":2},"end":{"line":14,"column":73}},"10":{"start":{"line":15,"column":2},"end":{"line":15,"column":73}},"11":{"start":{"line":16,"column":2},"end":{"line":16,"column":73}},"12":{"start":{"line":17,"column":2},"end":{"line":17,"column":73}},"13":{"start":{"line":18,"column":2},"end":{"line":18,"column":73}},"14":{"start":{"line":19,"column":2},"end":{"line":19,"column":73}},"15":{"start":{"line":44,"column":2},"end":{"line":152,"column":5}},"16":{"start":{"line":47,"column":6},"end":{"line":49,"column":7}},"17":{"start":{"line":48,"column":8},"end":{"line":48,"column":67}},"18":{"start":{"line":51,"column":6},"end":{"line":51,"column":20}},"19":{"start":{"line":58,"column":6},"end":{"line":58,"column":12}},"20":{"start":{"line":61,"column":6},"end":{"line":86,"column":7}},"21":{"start":{"line":63,"column":10},"end":{"line":72,"column":11}},"22":{"start":{"line":66,"column":14},"end":{"line":66,"column":54}},"23":{"start":{"line":67,"column":14},"end":{"line":67,"column":20}},"24":{"start":{"line":70,"column":14},"end":{"line":70,"column":53}},"25":{"start":{"line":71,"column":14},"end":{"line":71,"column":20}},"26":{"start":{"line":73,"column":10},"end":{"line":73,"column":16}},"27":{"start":{"line":75,"column":10},"end":{"line":84,"column":11}},"28":{"start":{"line":78,"column":14},"end":{"line":78,"column":54}},"29":{"start":{"line":79,"column":14},"end":{"line":79,"column":20}},"30":{"start":{"line":82,"column":14},"end":{"line":82,"column":47}},"31":{"start":{"line":83,"column":14},"end":{"line":83,"column":20}},"32":{"start":{"line":85,"column":10},"end":{"line":85,"column":16}},"33":{"start":{"line":87,"column":6},"end":{"line":87,"column":15}},"34":{"start":{"line":92,"column":6},"end":{"line":92,"column":55}},"35":{"start":{"line":97,"column":6},"end":{"line":97,"column":37}},"36":{"start":{"line":102,"column":6},"end":{"line":102,"column":37}},"37":{"start":{"line":107,"column":6},"end":{"line":120,"column":7}},"38":{"start":{"line":109,"column":8},"end":{"line":109,"column":14}},"39":{"start":{"line":111,"column":8},"end":{"line":118,"column":9}},"40":{"start":{"line":113,"column":12},"end":{"line":113,"column":52}},"41":{"start":{"line":114,"column":12},"end":{"line":114,"column":18}},"42":{"start":{"line":116,"column":12},"end":{"line":116,"column":52}},"43":{"start":{"line":117,"column":12},"end":{"line":117,"column":18}},"44":{"start":{"line":119,"column":8},"end":{"line":119,"column":17}},"45":{"start":{"line":121,"column":6},"end":{"line":121,"column":23}},"46":{"start":{"line":126,"column":6},"end":{"line":139,"column":7}},"47":{"start":{"line":128,"column":8},"end":{"line":128,"column":14}},"48":{"start":{"line":130,"column":8},"end":{"line":137,"column":9}},"49":{"start":{"line":132,"column":12},"end":{"line":132,"column":51}},"50":{"start":{"line":133,"column":12},"end":{"line":133,"column":18}},"51":{"start":{"line":135,"column":12},"end":{"line":135,"column":51}},"52":{"start":{"line":136,"column":12},"end":{"line":136,"column":18}},"53":{"start":{"line":138,"column":8},"end":{"line":138,"column":17}},"54":{"start":{"line":140,"column":6},"end":{"line":140,"column":42}},"55":{"start":{"line":145,"column":6},"end":{"line":145,"column":47}},"56":{"start":{"line":150,"column":6},"end":{"line":150,"column":47}},"57":{"start":{"line":154,"column":2},"end":{"line":156,"column":4}},"58":{"start":{"line":158,"column":2},"end":{"line":158,"column":19}},"59":{"start":{"line":161,"column":0},"end":{"line":161,"column":27}},"60":{"start":{"line":162,"column":0},"end":{"line":162,"column":26}}},"branchMap":{"1":{"line":47,"type":"if","locations":[{"start":{"line":47,"column":6},"end":{"line":47,"column":6}},{"start":{"line":47,"column":6},"end":{"line":47,"column":6}}]},"2":{"line":47,"type":"binary-expr","locations":[{"start":{"line":47,"column":10},"end":{"line":47,"column":23}},{"start":{"line":47,"column":27},"end":{"line":47,"column":40}}]},"3":{"line":61,"type":"switch","locations":[{"start":{"line":62,"column":8},"end":{"line":73,"column":16}},{"start":{"line":74,"column":8},"end":{"line":85,"column":16}}]},"4":{"line":63,"type":"switch","locations":[{"start":{"line":64,"column":12},"end":{"line":67,"column":20}},{"start":{"line":68,"column":12},"end":{"line":71,"column":20}}]},"5":{"line":75,"type":"switch","locations":[{"start":{"line":76,"column":12},"end":{"line":79,"column":20}},{"start":{"line":80,"column":12},"end":{"line":83,"column":20}}]},"6":{"line":107,"type":"if","locations":[{"start":{"line":107,"column":6},"end":{"line":107,"column":6}},{"start":{"line":107,"column":6},"end":{"line":107,"column":6}}]},"7":{"line":111,"type":"switch","locations":[{"start":{"line":112,"column":10},"end":{"line":114,"column":18}},{"start":{"line":115,"column":10},"end":{"line":117,"column":18}}]},"8":{"line":126,"type":"if","locations":[{"start":{"line":126,"column":6},"end":{"line":126,"column":6}},{"start":{"line":126,"column":6},"end":{"line":126,"column":6}}]},"9":{"line":130,"type":"switch","locations":[{"start":{"line":131,"column":10},"end":{"line":133,"column":18}},{"start":{"line":134,"column":10},"end":{"line":136,"column":18}}]}},"code":["'use strict';","","var isInteger = require('../../utils/number').isInteger;","var bigLeftShift = require('../../utils/bignumber/leftShift');","","function factory (type, config, load, typed) {","  var latex = require('../../utils/latex');","","  var matrix = load(require('../../type/matrix/function/matrix'));","  var equalScalar = load(require('../relational/equalScalar'));","  var zeros = load(require('../matrix/zeros'));","","  var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));","  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));","  var algorithm08 = load(require('../../type/matrix/utils/algorithm08'));","  var algorithm10 = load(require('../../type/matrix/utils/algorithm10'));","  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));","  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));","  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));","","  /**","   * Bitwise left logical shift of a value x by y number of bits, `x << y`.","   * For matrices, the function is evaluated element wise.","   * For units, the function is evaluated on the best prefix base.","   *","   * Syntax:","   *","   *    math.leftShift(x, y)","   *","   * Examples:","   *","   *    math.leftShift(1, 2);               // returns number 4","   *","   *    math.leftShift([1, 2, 3], 4);       // returns Array [16, 32, 64]","   *","   * See also:","   *","   *    leftShift, bitNot, bitOr, bitXor, rightArithShift, rightLogShift","   *","   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted","   * @param  {number | BigNumber} y Amount of shifts","   * @return {number | BigNumber | Array | Matrix} `x` shifted left `y` times","   */","  var leftShift = typed('leftShift', {","    ","    'number, number': function (x, y) {","      if (!isInteger(x) || !isInteger(y)) {","        throw new Error('Integers expected in function leftShift');","      }","","      return x << y;","    },","","    'BigNumber, BigNumber': bigLeftShift,","","    'Matrix, Matrix': function (x, y) {","      // result","      var c;","","      // process matrix storage","      switch (x.storage()) {","        case 'sparse':","          switch (y.storage()) {","            case 'sparse':","              // sparse & sparse","              c = algorithm08(x, y, leftShift, false);","              break;","            default:","              // sparse & dense","              c = algorithm02(y, x, leftShift, true);","              break;","          }","          break;","        default:","          switch (y.storage()) {","            case 'sparse':","              // dense & sparse","              c = algorithm01(x, y, leftShift, false);","              break;","            default:","              // dense & dense","              c = algorithm13(x, y, leftShift);","              break;","          }","          break;","      }","      return c;","    },","","    'Array, Array': function (x, y) {","      // use matrix implementation","      return leftShift(matrix(x), matrix(y)).valueOf();","    },","","    'Array, Matrix': function (x, y) {","      // use matrix implementation","      return leftShift(matrix(x), y);","    },","","    'Matrix, Array': function (x, y) {","      // use matrix implementation","      return leftShift(x, matrix(y));","    },","","    'Matrix, number | BigNumber': function (x, y) {","      // check scalar","      if (!equalScalar(y, 0)) {","        // result","        var c;","        // check storage format","        switch (x.storage()) {","          case 'sparse':","            c = algorithm11(x, y, leftShift, false);","            break;","          default:","            c = algorithm14(x, y, leftShift, false);","            break;","        }","        return c;","      }","      return x.clone();","    },","","    'number | BigNumber, Matrix': function (x, y) {","      // check scalar","      if (!equalScalar(x, 0)) {","        // result","        var c;","        // check storage format","        switch (y.storage()) {","          case 'sparse':","            c = algorithm10(y, x, leftShift, true);","            break;","          default:","            c = algorithm14(y, x, leftShift, true);","            break;","        }","        return c;","      }","      return zeros(y.size(), y.storage());","    },","","    'Array, number | BigNumber': function (x, y) {","      // use matrix implementation","      return leftShift(matrix(x), y).valueOf();","    },","","    'number | BigNumber, Array': function (x, y) {","      // use matrix implementation","      return leftShift(x, matrix(y)).valueOf();","    }","  });","","  leftShift.toTex = {","    2: '\\\\left(${args[0]}' + latex.operators['leftShift'] + '${args[1]}\\\\right)'","  };","","  return leftShift;","}","","exports.name = 'leftShift';","exports.factory = factory;",""],"l":{"3":1,"4":1,"6":1,"7":0,"9":0,"10":0,"11":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"44":0,"47":0,"48":0,"51":0,"58":0,"61":0,"63":0,"66":0,"67":0,"70":0,"71":0,"73":0,"75":0,"78":0,"79":0,"82":0,"83":0,"85":0,"87":0,"92":0,"97":0,"102":0,"107":0,"109":0,"111":0,"113":0,"114":0,"116":0,"117":0,"119":0,"121":0,"126":0,"128":0,"130":0,"132":0,"133":0,"135":0,"136":0,"138":0,"140":0,"145":0,"150":0,"154":0,"158":0,"161":1,"162":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/utils/bignumber/leftShift.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/utils/bignumber/leftShift.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"b":{"1":[0,0],"2":[0,0,0,0],"3":[0,0],"4":[0,0,0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"leftShift","line":20,"loc":{"start":{"line":20,"column":17},"end":{"line":20,"column":43}}}},"statementMap":{"1":{"start":{"line":20,"column":0},"end":{"line":41,"column":2}},"2":{"start":{"line":21,"column":2},"end":{"line":23,"column":3}},"3":{"start":{"line":22,"column":4},"end":{"line":22,"column":63}},"4":{"start":{"line":25,"column":2},"end":{"line":25,"column":32}},"5":{"start":{"line":26,"column":2},"end":{"line":28,"column":3}},"6":{"start":{"line":27,"column":4},"end":{"line":27,"column":30}},"7":{"start":{"line":29,"column":2},"end":{"line":31,"column":3}},"8":{"start":{"line":30,"column":4},"end":{"line":30,"column":13}},"9":{"start":{"line":32,"column":2},"end":{"line":34,"column":3}},"10":{"start":{"line":33,"column":4},"end":{"line":33,"column":30}},"11":{"start":{"line":37,"column":2},"end":{"line":39,"column":3}},"12":{"start":{"line":38,"column":4},"end":{"line":38,"column":51}},"13":{"start":{"line":40,"column":2},"end":{"line":40,"column":42}}},"branchMap":{"1":{"line":21,"type":"if","locations":[{"start":{"line":21,"column":2},"end":{"line":21,"column":2}},{"start":{"line":21,"column":2},"end":{"line":21,"column":2}}]},"2":{"line":21,"type":"binary-expr","locations":[{"start":{"line":21,"column":7},"end":{"line":21,"column":19}},{"start":{"line":21,"column":23},"end":{"line":21,"column":37}},{"start":{"line":21,"column":43},"end":{"line":21,"column":55}},{"start":{"line":21,"column":59},"end":{"line":21,"column":73}}]},"3":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":2},"end":{"line":26,"column":2}},{"start":{"line":26,"column":2},"end":{"line":26,"column":2}}]},"4":{"line":26,"type":"binary-expr","locations":[{"start":{"line":26,"column":6},"end":{"line":26,"column":15}},{"start":{"line":26,"column":19},"end":{"line":26,"column":28}},{"start":{"line":26,"column":33},"end":{"line":26,"column":47}},{"start":{"line":26,"column":51},"end":{"line":26,"column":62}}]},"5":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":2},"end":{"line":29,"column":2}},{"start":{"line":29,"column":2},"end":{"line":29,"column":2}}]},"6":{"line":29,"type":"binary-expr","locations":[{"start":{"line":29,"column":6},"end":{"line":29,"column":16}},{"start":{"line":29,"column":20},"end":{"line":29,"column":30}}]},"7":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":2},"end":{"line":32,"column":2}},{"start":{"line":32,"column":2},"end":{"line":32,"column":2}}]},"8":{"line":32,"type":"binary-expr","locations":[{"start":{"line":32,"column":6},"end":{"line":32,"column":19}},{"start":{"line":32,"column":23},"end":{"line":32,"column":36}}]},"9":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":2},"end":{"line":37,"column":2}},{"start":{"line":37,"column":2},"end":{"line":37,"column":2}}]}},"code":["","/**"," * Bitwise left shift"," *"," * Special Cases:"," *  n << -n = N"," *  n <<  N = N"," *  N <<  n = N"," *  n <<  0 = n"," *  0 <<  n = 0"," *  I <<  I = N"," *  I <<  n = I"," *  n <<  I = I"," *"," * @param {BigNumber} x"," * @param {BigNumber} y"," * @return {BigNumber} Result of `x` << `y`"," *"," */","module.exports = function leftShift (x, y) {","  if ((x.isFinite() && !x.isInteger()) || (y.isFinite() && !y.isInteger())) {","    throw new Error('Integers expected in function leftShift');","  }","","  var BigNumber = x.constructor;","  if (x.isNaN() || y.isNaN() || (y.isNegative() && !y.isZero())) {","    return new BigNumber(NaN);","  }","  if (x.isZero() || y.isZero()) {","    return x;","  }","  if (!x.isFinite() && !y.isFinite()) {","    return new BigNumber(NaN);","  }","","  // Math.pow(2, y) is fully precise for y < 55, and fast","  if (y.lt(55)) {","    return x.times(Math.pow(2, y.toNumber()) + '');","  }","  return x.times(new BigNumber(2).pow(y));","};",""],"l":{"20":1,"21":0,"22":0,"25":0,"26":0,"27":0,"29":0,"30":0,"32":0,"33":0,"37":0,"38":0,"40":0}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/bitwise/rightArithShift.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/bitwise/rightArithShift.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":1,"60":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"fnMap":{"1":{"name":"factory","line":6,"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":45}}},"2":{"name":"(anonymous_2)","line":46,"loc":{"start":{"line":46,"column":22},"end":{"line":46,"column":38}}},"3":{"name":"(anonymous_3)","line":56,"loc":{"start":{"line":56,"column":22},"end":{"line":56,"column":38}}},"4":{"name":"(anonymous_4)","line":90,"loc":{"start":{"line":90,"column":20},"end":{"line":90,"column":36}}},"5":{"name":"(anonymous_5)","line":95,"loc":{"start":{"line":95,"column":21},"end":{"line":95,"column":37}}},"6":{"name":"(anonymous_6)","line":100,"loc":{"start":{"line":100,"column":21},"end":{"line":100,"column":37}}},"7":{"name":"(anonymous_7)","line":105,"loc":{"start":{"line":105,"column":34},"end":{"line":105,"column":50}}},"8":{"name":"(anonymous_8)","line":124,"loc":{"start":{"line":124,"column":34},"end":{"line":124,"column":50}}},"9":{"name":"(anonymous_9)","line":143,"loc":{"start":{"line":143,"column":33},"end":{"line":143,"column":49}}},"10":{"name":"(anonymous_10)","line":148,"loc":{"start":{"line":148,"column":33},"end":{"line":148,"column":49}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":74}},"3":{"start":{"line":6,"column":0},"end":{"line":159,"column":1}},"4":{"start":{"line":7,"column":2},"end":{"line":7,"column":43}},"5":{"start":{"line":9,"column":2},"end":{"line":9,"column":66}},"6":{"start":{"line":10,"column":2},"end":{"line":10,"column":63}},"7":{"start":{"line":11,"column":2},"end":{"line":11,"column":47}},"8":{"start":{"line":13,"column":2},"end":{"line":13,"column":73}},"9":{"start":{"line":14,"column":2},"end":{"line":14,"column":73}},"10":{"start":{"line":15,"column":2},"end":{"line":15,"column":73}},"11":{"start":{"line":16,"column":2},"end":{"line":16,"column":73}},"12":{"start":{"line":17,"column":2},"end":{"line":17,"column":73}},"13":{"start":{"line":18,"column":2},"end":{"line":18,"column":73}},"14":{"start":{"line":19,"column":2},"end":{"line":19,"column":73}},"15":{"start":{"line":44,"column":2},"end":{"line":152,"column":5}},"16":{"start":{"line":47,"column":6},"end":{"line":49,"column":7}},"17":{"start":{"line":48,"column":8},"end":{"line":48,"column":73}},"18":{"start":{"line":51,"column":6},"end":{"line":51,"column":20}},"19":{"start":{"line":58,"column":6},"end":{"line":58,"column":12}},"20":{"start":{"line":61,"column":6},"end":{"line":86,"column":7}},"21":{"start":{"line":63,"column":10},"end":{"line":72,"column":11}},"22":{"start":{"line":66,"column":14},"end":{"line":66,"column":60}},"23":{"start":{"line":67,"column":14},"end":{"line":67,"column":20}},"24":{"start":{"line":70,"column":14},"end":{"line":70,"column":59}},"25":{"start":{"line":71,"column":14},"end":{"line":71,"column":20}},"26":{"start":{"line":73,"column":10},"end":{"line":73,"column":16}},"27":{"start":{"line":75,"column":10},"end":{"line":84,"column":11}},"28":{"start":{"line":78,"column":14},"end":{"line":78,"column":60}},"29":{"start":{"line":79,"column":14},"end":{"line":79,"column":20}},"30":{"start":{"line":82,"column":14},"end":{"line":82,"column":53}},"31":{"start":{"line":83,"column":14},"end":{"line":83,"column":20}},"32":{"start":{"line":85,"column":10},"end":{"line":85,"column":16}},"33":{"start":{"line":87,"column":6},"end":{"line":87,"column":15}},"34":{"start":{"line":92,"column":6},"end":{"line":92,"column":61}},"35":{"start":{"line":97,"column":6},"end":{"line":97,"column":43}},"36":{"start":{"line":102,"column":6},"end":{"line":102,"column":43}},"37":{"start":{"line":107,"column":6},"end":{"line":120,"column":7}},"38":{"start":{"line":109,"column":8},"end":{"line":109,"column":14}},"39":{"start":{"line":111,"column":8},"end":{"line":118,"column":9}},"40":{"start":{"line":113,"column":12},"end":{"line":113,"column":58}},"41":{"start":{"line":114,"column":12},"end":{"line":114,"column":18}},"42":{"start":{"line":116,"column":12},"end":{"line":116,"column":58}},"43":{"start":{"line":117,"column":12},"end":{"line":117,"column":18}},"44":{"start":{"line":119,"column":8},"end":{"line":119,"column":17}},"45":{"start":{"line":121,"column":6},"end":{"line":121,"column":23}},"46":{"start":{"line":126,"column":6},"end":{"line":139,"column":7}},"47":{"start":{"line":128,"column":8},"end":{"line":128,"column":14}},"48":{"start":{"line":130,"column":8},"end":{"line":137,"column":9}},"49":{"start":{"line":132,"column":12},"end":{"line":132,"column":57}},"50":{"start":{"line":133,"column":12},"end":{"line":133,"column":18}},"51":{"start":{"line":135,"column":12},"end":{"line":135,"column":57}},"52":{"start":{"line":136,"column":12},"end":{"line":136,"column":18}},"53":{"start":{"line":138,"column":8},"end":{"line":138,"column":17}},"54":{"start":{"line":140,"column":6},"end":{"line":140,"column":42}},"55":{"start":{"line":145,"column":6},"end":{"line":145,"column":53}},"56":{"start":{"line":150,"column":6},"end":{"line":150,"column":53}},"57":{"start":{"line":154,"column":2},"end":{"line":156,"column":4}},"58":{"start":{"line":158,"column":2},"end":{"line":158,"column":25}},"59":{"start":{"line":161,"column":0},"end":{"line":161,"column":33}},"60":{"start":{"line":162,"column":0},"end":{"line":162,"column":26}}},"branchMap":{"1":{"line":47,"type":"if","locations":[{"start":{"line":47,"column":6},"end":{"line":47,"column":6}},{"start":{"line":47,"column":6},"end":{"line":47,"column":6}}]},"2":{"line":47,"type":"binary-expr","locations":[{"start":{"line":47,"column":10},"end":{"line":47,"column":23}},{"start":{"line":47,"column":27},"end":{"line":47,"column":40}}]},"3":{"line":61,"type":"switch","locations":[{"start":{"line":62,"column":8},"end":{"line":73,"column":16}},{"start":{"line":74,"column":8},"end":{"line":85,"column":16}}]},"4":{"line":63,"type":"switch","locations":[{"start":{"line":64,"column":12},"end":{"line":67,"column":20}},{"start":{"line":68,"column":12},"end":{"line":71,"column":20}}]},"5":{"line":75,"type":"switch","locations":[{"start":{"line":76,"column":12},"end":{"line":79,"column":20}},{"start":{"line":80,"column":12},"end":{"line":83,"column":20}}]},"6":{"line":107,"type":"if","locations":[{"start":{"line":107,"column":6},"end":{"line":107,"column":6}},{"start":{"line":107,"column":6},"end":{"line":107,"column":6}}]},"7":{"line":111,"type":"switch","locations":[{"start":{"line":112,"column":10},"end":{"line":114,"column":18}},{"start":{"line":115,"column":10},"end":{"line":117,"column":18}}]},"8":{"line":126,"type":"if","locations":[{"start":{"line":126,"column":6},"end":{"line":126,"column":6}},{"start":{"line":126,"column":6},"end":{"line":126,"column":6}}]},"9":{"line":130,"type":"switch","locations":[{"start":{"line":131,"column":10},"end":{"line":133,"column":18}},{"start":{"line":134,"column":10},"end":{"line":136,"column":18}}]}},"code":["'use strict';","","var isInteger = require('../../utils/number').isInteger;","var bigRightArithShift = require('../../utils/bignumber/rightArithShift');","","function factory (type, config, load, typed) {","  var latex = require('../../utils/latex');","  ","  var matrix = load(require('../../type/matrix/function/matrix'));","  var equalScalar = load(require('../relational/equalScalar'));","  var zeros = load(require('../matrix/zeros'));","","  var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));","  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));","  var algorithm08 = load(require('../../type/matrix/utils/algorithm08'));","  var algorithm10 = load(require('../../type/matrix/utils/algorithm10'));","  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));","  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));","  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));","","  /**","   * Bitwise right arithmetic shift of a value x by y number of bits, `x >> y`.","   * For matrices, the function is evaluated element wise.","   * For units, the function is evaluated on the best prefix base.","   *","   * Syntax:","   *","   *    math.rightArithShift(x, y)","   *","   * Examples:","   *","   *    math.rightArithShift(4, 2);               // returns number 1","   *","   *    math.rightArithShift([16, -32, 64], 4);   // returns Array [1, -2, 3]","   *","   * See also:","   *","   *    bitAnd, bitNot, bitOr, bitXor, rightArithShift, rightLogShift","   *","   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted","   * @param  {number | BigNumber} y Amount of shifts","   * @return {number | BigNumber | Array | Matrix} `x` sign-filled shifted right `y` times","   */","  var rightArithShift = typed('rightArithShift', {","","    'number, number': function (x, y) {","      if (!isInteger(x) || !isInteger(y)) {","        throw new Error('Integers expected in function rightArithShift');","      }","","      return x >> y;","    },","","    'BigNumber, BigNumber': bigRightArithShift,","","    'Matrix, Matrix': function (x, y) {","      // result","      var c;","","      // process matrix storage","      switch (x.storage()) {","        case 'sparse':","          switch (y.storage()) {","            case 'sparse':","              // sparse & sparse","              c = algorithm08(x, y, rightArithShift, false);","              break;","            default:","              // sparse & dense","              c = algorithm02(y, x, rightArithShift, true);","              break;","          }","          break;","        default:","          switch (y.storage()) {","            case 'sparse':","              // dense & sparse","              c = algorithm01(x, y, rightArithShift, false);","              break;","            default:","              // dense & dense","              c = algorithm13(x, y, rightArithShift);","              break;","          }","          break;","      }","      return c;","    },","","    'Array, Array': function (x, y) {","      // use matrix implementation","      return rightArithShift(matrix(x), matrix(y)).valueOf();","    },","","    'Array, Matrix': function (x, y) {","      // use matrix implementation","      return rightArithShift(matrix(x), y);","    },","","    'Matrix, Array': function (x, y) {","      // use matrix implementation","      return rightArithShift(x, matrix(y));","    },","","    'Matrix, number | BigNumber': function (x, y) {","      // check scalar","      if (!equalScalar(y, 0)) {","        // result","        var c;","        // check storage format","        switch (x.storage()) {","          case 'sparse':","            c = algorithm11(x, y, rightArithShift, false);","            break;","          default:","            c = algorithm14(x, y, rightArithShift, false);","            break;","        }","        return c;","      }","      return x.clone();","    },","","    'number | BigNumber, Matrix': function (x, y) {","      // check scalar","      if (!equalScalar(x, 0)) {","        // result","        var c;","        // check storage format","        switch (y.storage()) {","          case 'sparse':","            c = algorithm10(y, x, rightArithShift, true);","            break;","          default:","            c = algorithm14(y, x, rightArithShift, true);","            break;","        }","        return c;","      }","      return zeros(y.size(), y.storage());","    },","","    'Array, number | BigNumber': function (x, y) {","      // use matrix implementation","      return rightArithShift(matrix(x), y).valueOf();","    },","","    'number | BigNumber, Array': function (x, y) {","      // use matrix implementation","      return rightArithShift(x, matrix(y)).valueOf();","    }","  });","","  rightArithShift.toTex = {","    2: '\\\\left(${args[0]}' + latex.operators['rightArithShift'] + '${args[1]}\\\\right)'","  };","","  return rightArithShift;","}","","exports.name = 'rightArithShift';","exports.factory = factory;",""],"l":{"3":1,"4":1,"6":1,"7":0,"9":0,"10":0,"11":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"44":0,"47":0,"48":0,"51":0,"58":0,"61":0,"63":0,"66":0,"67":0,"70":0,"71":0,"73":0,"75":0,"78":0,"79":0,"82":0,"83":0,"85":0,"87":0,"92":0,"97":0,"102":0,"107":0,"109":0,"111":0,"113":0,"114":0,"116":0,"117":0,"119":0,"121":0,"126":0,"128":0,"130":0,"132":0,"133":0,"135":0,"136":0,"138":0,"140":0,"145":0,"150":0,"154":0,"158":0,"161":1,"162":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/utils/bignumber/rightArithShift.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/utils/bignumber/rightArithShift.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},"b":{"1":[0,0],"2":[0,0,0,0],"3":[0,0],"4":[0,0,0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"rightArithShift","line":20,"loc":{"start":{"line":20,"column":17},"end":{"line":20,"column":49}}}},"statementMap":{"1":{"start":{"line":20,"column":0},"end":{"line":47,"column":2}},"2":{"start":{"line":21,"column":2},"end":{"line":23,"column":3}},"3":{"start":{"line":22,"column":4},"end":{"line":22,"column":69}},"4":{"start":{"line":25,"column":2},"end":{"line":25,"column":32}},"5":{"start":{"line":26,"column":2},"end":{"line":28,"column":3}},"6":{"start":{"line":27,"column":4},"end":{"line":27,"column":30}},"7":{"start":{"line":29,"column":2},"end":{"line":31,"column":3}},"8":{"start":{"line":30,"column":4},"end":{"line":30,"column":13}},"9":{"start":{"line":32,"column":2},"end":{"line":40,"column":3}},"10":{"start":{"line":33,"column":4},"end":{"line":35,"column":5}},"11":{"start":{"line":34,"column":6},"end":{"line":34,"column":31}},"12":{"start":{"line":36,"column":4},"end":{"line":38,"column":5}},"13":{"start":{"line":37,"column":6},"end":{"line":37,"column":32}},"14":{"start":{"line":39,"column":4},"end":{"line":39,"column":28}},"15":{"start":{"line":43,"column":2},"end":{"line":45,"column":3}},"16":{"start":{"line":44,"column":4},"end":{"line":44,"column":57}},"17":{"start":{"line":46,"column":2},"end":{"line":46,"column":48}}},"branchMap":{"1":{"line":21,"type":"if","locations":[{"start":{"line":21,"column":2},"end":{"line":21,"column":2}},{"start":{"line":21,"column":2},"end":{"line":21,"column":2}}]},"2":{"line":21,"type":"binary-expr","locations":[{"start":{"line":21,"column":7},"end":{"line":21,"column":19}},{"start":{"line":21,"column":23},"end":{"line":21,"column":37}},{"start":{"line":21,"column":43},"end":{"line":21,"column":55}},{"start":{"line":21,"column":59},"end":{"line":21,"column":73}}]},"3":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":2},"end":{"line":26,"column":2}},{"start":{"line":26,"column":2},"end":{"line":26,"column":2}}]},"4":{"line":26,"type":"binary-expr","locations":[{"start":{"line":26,"column":6},"end":{"line":26,"column":15}},{"start":{"line":26,"column":19},"end":{"line":26,"column":28}},{"start":{"line":26,"column":33},"end":{"line":26,"column":47}},{"start":{"line":26,"column":51},"end":{"line":26,"column":62}}]},"5":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":2},"end":{"line":29,"column":2}},{"start":{"line":29,"column":2},"end":{"line":29,"column":2}}]},"6":{"line":29,"type":"binary-expr","locations":[{"start":{"line":29,"column":6},"end":{"line":29,"column":16}},{"start":{"line":29,"column":20},"end":{"line":29,"column":30}}]},"7":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":2},"end":{"line":32,"column":2}},{"start":{"line":32,"column":2},"end":{"line":32,"column":2}}]},"8":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":4},"end":{"line":33,"column":4}},{"start":{"line":33,"column":4},"end":{"line":33,"column":4}}]},"9":{"line":36,"type":"if","locations":[{"start":{"line":36,"column":4},"end":{"line":36,"column":4}},{"start":{"line":36,"column":4},"end":{"line":36,"column":4}}]},"10":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":2},"end":{"line":43,"column":2}},{"start":{"line":43,"column":2},"end":{"line":43,"column":2}}]}},"code":["/*"," * Special Cases:"," *   n >> -n =  N"," *   n >>  N =  N"," *   N >>  n =  N"," *   I >>  I =  N"," *   n >>  0 =  n"," *   I >>  n =  I"," *  -I >>  n = -I"," *  -I >>  I = -I"," *   n >>  I =  I"," *  -n >>  I = -1"," *   0 >>  n =  0"," *"," * @param {BigNumber} value"," * @param {BigNumber} value"," * @return {BigNumber} Result of `x` >> `y`"," *"," */","module.exports = function rightArithShift (x, y) {","  if ((x.isFinite() && !x.isInteger()) || (y.isFinite() && !y.isInteger())) {","    throw new Error('Integers expected in function rightArithShift');","  }","","  var BigNumber = x.constructor;","  if (x.isNaN() || y.isNaN() || (y.isNegative() && !y.isZero())) {","    return new BigNumber(NaN);","  }","  if (x.isZero() || y.isZero()) {","    return x;","  }","  if (!y.isFinite()) {","    if (x.isNegative()) {","      return new BigNumber(-1);","    }","    if (!x.isFinite()) {","      return new BigNumber(NaN);","    }","    return new BigNumber(0);","  }","","  // Math.pow(2, y) is fully precise for y < 55, and fast","  if (y.lt(55)) {","    return x.div(Math.pow(2, y.toNumber()) + '').floor();","  }","  return x.div(new BigNumber(2).pow(y)).floor();","};",""],"l":{"20":1,"21":0,"22":0,"25":0,"26":0,"27":0,"29":0,"30":0,"32":0,"33":0,"34":0,"36":0,"37":0,"39":0,"43":0,"44":0,"46":0}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/bitwise/rightLogShift.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/bitwise/rightLogShift.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":1,"59":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":46,"loc":{"start":{"line":46,"column":22},"end":{"line":46,"column":38}}},"3":{"name":"(anonymous_3)","line":56,"loc":{"start":{"line":56,"column":22},"end":{"line":56,"column":38}}},"4":{"name":"(anonymous_4)","line":90,"loc":{"start":{"line":90,"column":20},"end":{"line":90,"column":36}}},"5":{"name":"(anonymous_5)","line":95,"loc":{"start":{"line":95,"column":21},"end":{"line":95,"column":37}}},"6":{"name":"(anonymous_6)","line":100,"loc":{"start":{"line":100,"column":21},"end":{"line":100,"column":37}}},"7":{"name":"(anonymous_7)","line":105,"loc":{"start":{"line":105,"column":34},"end":{"line":105,"column":50}}},"8":{"name":"(anonymous_8)","line":124,"loc":{"start":{"line":124,"column":34},"end":{"line":124,"column":50}}},"9":{"name":"(anonymous_9)","line":143,"loc":{"start":{"line":143,"column":33},"end":{"line":143,"column":49}}},"10":{"name":"(anonymous_10)","line":148,"loc":{"start":{"line":148,"column":33},"end":{"line":148,"column":49}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":159,"column":1}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":43}},"4":{"start":{"line":8,"column":2},"end":{"line":8,"column":66}},"5":{"start":{"line":9,"column":2},"end":{"line":9,"column":63}},"6":{"start":{"line":10,"column":2},"end":{"line":10,"column":47}},"7":{"start":{"line":12,"column":2},"end":{"line":12,"column":73}},"8":{"start":{"line":13,"column":2},"end":{"line":13,"column":73}},"9":{"start":{"line":14,"column":2},"end":{"line":14,"column":73}},"10":{"start":{"line":15,"column":2},"end":{"line":15,"column":73}},"11":{"start":{"line":16,"column":2},"end":{"line":16,"column":73}},"12":{"start":{"line":17,"column":2},"end":{"line":17,"column":73}},"13":{"start":{"line":18,"column":2},"end":{"line":18,"column":73}},"14":{"start":{"line":44,"column":2},"end":{"line":152,"column":5}},"15":{"start":{"line":47,"column":6},"end":{"line":49,"column":7}},"16":{"start":{"line":48,"column":8},"end":{"line":48,"column":71}},"17":{"start":{"line":51,"column":6},"end":{"line":51,"column":21}},"18":{"start":{"line":58,"column":6},"end":{"line":58,"column":12}},"19":{"start":{"line":61,"column":6},"end":{"line":86,"column":7}},"20":{"start":{"line":63,"column":10},"end":{"line":72,"column":11}},"21":{"start":{"line":66,"column":14},"end":{"line":66,"column":58}},"22":{"start":{"line":67,"column":14},"end":{"line":67,"column":20}},"23":{"start":{"line":70,"column":14},"end":{"line":70,"column":57}},"24":{"start":{"line":71,"column":14},"end":{"line":71,"column":20}},"25":{"start":{"line":73,"column":10},"end":{"line":73,"column":16}},"26":{"start":{"line":75,"column":10},"end":{"line":84,"column":11}},"27":{"start":{"line":78,"column":14},"end":{"line":78,"column":58}},"28":{"start":{"line":79,"column":14},"end":{"line":79,"column":20}},"29":{"start":{"line":82,"column":14},"end":{"line":82,"column":51}},"30":{"start":{"line":83,"column":14},"end":{"line":83,"column":20}},"31":{"start":{"line":85,"column":10},"end":{"line":85,"column":16}},"32":{"start":{"line":87,"column":6},"end":{"line":87,"column":15}},"33":{"start":{"line":92,"column":6},"end":{"line":92,"column":59}},"34":{"start":{"line":97,"column":6},"end":{"line":97,"column":41}},"35":{"start":{"line":102,"column":6},"end":{"line":102,"column":41}},"36":{"start":{"line":107,"column":6},"end":{"line":120,"column":7}},"37":{"start":{"line":109,"column":8},"end":{"line":109,"column":14}},"38":{"start":{"line":111,"column":8},"end":{"line":118,"column":9}},"39":{"start":{"line":113,"column":12},"end":{"line":113,"column":56}},"40":{"start":{"line":114,"column":12},"end":{"line":114,"column":18}},"41":{"start":{"line":116,"column":12},"end":{"line":116,"column":56}},"42":{"start":{"line":117,"column":12},"end":{"line":117,"column":18}},"43":{"start":{"line":119,"column":8},"end":{"line":119,"column":17}},"44":{"start":{"line":121,"column":6},"end":{"line":121,"column":23}},"45":{"start":{"line":126,"column":6},"end":{"line":139,"column":7}},"46":{"start":{"line":128,"column":8},"end":{"line":128,"column":14}},"47":{"start":{"line":130,"column":8},"end":{"line":137,"column":9}},"48":{"start":{"line":132,"column":12},"end":{"line":132,"column":55}},"49":{"start":{"line":133,"column":12},"end":{"line":133,"column":18}},"50":{"start":{"line":135,"column":12},"end":{"line":135,"column":55}},"51":{"start":{"line":136,"column":12},"end":{"line":136,"column":18}},"52":{"start":{"line":138,"column":8},"end":{"line":138,"column":17}},"53":{"start":{"line":140,"column":6},"end":{"line":140,"column":42}},"54":{"start":{"line":145,"column":6},"end":{"line":145,"column":51}},"55":{"start":{"line":150,"column":6},"end":{"line":150,"column":51}},"56":{"start":{"line":154,"column":2},"end":{"line":156,"column":4}},"57":{"start":{"line":158,"column":2},"end":{"line":158,"column":23}},"58":{"start":{"line":161,"column":0},"end":{"line":161,"column":31}},"59":{"start":{"line":162,"column":0},"end":{"line":162,"column":26}}},"branchMap":{"1":{"line":47,"type":"if","locations":[{"start":{"line":47,"column":6},"end":{"line":47,"column":6}},{"start":{"line":47,"column":6},"end":{"line":47,"column":6}}]},"2":{"line":47,"type":"binary-expr","locations":[{"start":{"line":47,"column":10},"end":{"line":47,"column":23}},{"start":{"line":47,"column":27},"end":{"line":47,"column":40}}]},"3":{"line":61,"type":"switch","locations":[{"start":{"line":62,"column":8},"end":{"line":73,"column":16}},{"start":{"line":74,"column":8},"end":{"line":85,"column":16}}]},"4":{"line":63,"type":"switch","locations":[{"start":{"line":64,"column":12},"end":{"line":67,"column":20}},{"start":{"line":68,"column":12},"end":{"line":71,"column":20}}]},"5":{"line":75,"type":"switch","locations":[{"start":{"line":76,"column":12},"end":{"line":79,"column":20}},{"start":{"line":80,"column":12},"end":{"line":83,"column":20}}]},"6":{"line":107,"type":"if","locations":[{"start":{"line":107,"column":6},"end":{"line":107,"column":6}},{"start":{"line":107,"column":6},"end":{"line":107,"column":6}}]},"7":{"line":111,"type":"switch","locations":[{"start":{"line":112,"column":10},"end":{"line":114,"column":18}},{"start":{"line":115,"column":10},"end":{"line":117,"column":18}}]},"8":{"line":126,"type":"if","locations":[{"start":{"line":126,"column":6},"end":{"line":126,"column":6}},{"start":{"line":126,"column":6},"end":{"line":126,"column":6}}]},"9":{"line":130,"type":"switch","locations":[{"start":{"line":131,"column":10},"end":{"line":133,"column":18}},{"start":{"line":134,"column":10},"end":{"line":136,"column":18}}]}},"code":["'use strict';","","var isInteger = require('../../utils/number').isInteger;","","function factory (type, config, load, typed) {","  var latex = require('../../utils/latex');","","  var matrix = load(require('../../type/matrix/function/matrix'));","  var equalScalar = load(require('../relational/equalScalar'));","  var zeros = load(require('../matrix/zeros'));","","  var algorithm01 = load(require('../../type/matrix/utils/algorithm01'));","  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));","  var algorithm08 = load(require('../../type/matrix/utils/algorithm08'));","  var algorithm10 = load(require('../../type/matrix/utils/algorithm10'));","  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));","  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));","  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));","  ","  /**","   * Bitwise right logical shift of value x by y number of bits, `x >>> y`.","   * For matrices, the function is evaluated element wise.","   * For units, the function is evaluated on the best prefix base.","   *","   * Syntax:","   *","   *    math.rightLogShift(x, y)","   *","   * Examples:","   *","   *    math.rightLogShift(4, 2);               // returns number 1","   *","   *    math.rightLogShift([16, -32, 64], 4);   // returns Array [1, 2, 3]","   *","   * See also:","   *","   *    bitAnd, bitNot, bitOr, bitXor, leftShift, rightLogShift","   *","   * @param  {number | Array | Matrix} x Value to be shifted","   * @param  {number} y Amount of shifts","   * @return {number | Array | Matrix} `x` zero-filled shifted right `y` times","   */","","  var rightLogShift = typed('rightLogShift', {","","    'number, number': function (x, y) {","      if (!isInteger(x) || !isInteger(y)) {","        throw new Error('Integers expected in function rightLogShift');","      }","","      return x >>> y;","    },","","    // 'BigNumber, BigNumber': ..., // TODO: implement BigNumber support for rightLogShift","","    'Matrix, Matrix': function (x, y) {","      // result","      var c;","","      // process matrix storage","      switch (x.storage()) {","        case 'sparse':","          switch (y.storage()) {","            case 'sparse':","              // sparse & sparse","              c = algorithm08(x, y, rightLogShift, false);","              break;","            default:","              // sparse & dense","              c = algorithm02(y, x, rightLogShift, true);","              break;","          }","          break;","        default:","          switch (y.storage()) {","            case 'sparse':","              // dense & sparse","              c = algorithm01(x, y, rightLogShift, false);","              break;","            default:","              // dense & dense","              c = algorithm13(x, y, rightLogShift);","              break;","          }","          break;","      }","      return c;","    },","","    'Array, Array': function (x, y) {","      // use matrix implementation","      return rightLogShift(matrix(x), matrix(y)).valueOf();","    },","","    'Array, Matrix': function (x, y) {","      // use matrix implementation","      return rightLogShift(matrix(x), y);","    },","","    'Matrix, Array': function (x, y) {","      // use matrix implementation","      return rightLogShift(x, matrix(y));","    },","","    'Matrix, number | BigNumber': function (x, y) {","      // check scalar","      if (!equalScalar(y, 0)) {","        // result","        var c;","        // check storage format","        switch (x.storage()) {","          case 'sparse':","            c = algorithm11(x, y, rightLogShift, false);","            break;","          default:","            c = algorithm14(x, y, rightLogShift, false);","            break;","        }","        return c;","      }","      return x.clone();","    },","","    'number | BigNumber, Matrix': function (x, y) {","      // check scalar","      if (!equalScalar(x, 0)) {","        // result","        var c;","        // check storage format","        switch (y.storage()) {","          case 'sparse':","            c = algorithm10(y, x, rightLogShift, true);","            break;","          default:","            c = algorithm14(y, x, rightLogShift, true);","            break;","        }","        return c;","      }","      return zeros(y.size(), y.storage());","    },","","    'Array, number | BigNumber': function (x, y) {","      // use matrix implementation","      return rightLogShift(matrix(x), y).valueOf();","    },","","    'number | BigNumber, Array': function (x, y) {","      // use matrix implementation","      return rightLogShift(x, matrix(y)).valueOf();","    }","  });","","  rightLogShift.toTex = {","    2: '\\\\left(${args[0]}' + latex.operators['rightLogShift'] + '${args[1]}\\\\right)'","  };","","  return rightLogShift;","}","","exports.name = 'rightLogShift';","exports.factory = factory;",""],"l":{"3":1,"5":1,"6":0,"8":0,"9":0,"10":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"44":0,"47":0,"48":0,"51":0,"58":0,"61":0,"63":0,"66":0,"67":0,"70":0,"71":0,"73":0,"75":0,"78":0,"79":0,"82":0,"83":0,"85":0,"87":0,"92":0,"97":0,"102":0,"107":0,"109":0,"111":0,"113":0,"114":0,"116":0,"117":0,"119":0,"121":0,"126":0,"128":0,"130":0,"132":0,"133":0,"135":0,"136":0,"138":0,"140":0,"145":0,"150":0,"154":0,"158":0,"161":1,"162":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/combinatorics/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/combinatorics/index.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":6,"column":2}}},"branchMap":{},"code":["module.exports = [","  require('./bellNumbers'),","  require('./composition'),","  require('./stirlingS2'),","  require('./catalan')","];",""],"l":{"1":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/combinatorics/bellNumbers.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/combinatorics/bellNumbers.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":1,"16":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"factory","line":3,"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}}},"2":{"name":"(anonymous_2)","line":31,"loc":{"start":{"line":31,"column":26},"end":{"line":31,"column":39}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":50,"column":1}},"2":{"start":{"line":4,"column":2},"end":{"line":4,"column":47}},"3":{"start":{"line":5,"column":2},"end":{"line":5,"column":49}},"4":{"start":{"line":6,"column":2},"end":{"line":6,"column":56}},"5":{"start":{"line":7,"column":2},"end":{"line":7,"column":54}},"6":{"start":{"line":30,"column":2},"end":{"line":45,"column":5}},"7":{"start":{"line":33,"column":6},"end":{"line":35,"column":7}},"8":{"start":{"line":34,"column":8},"end":{"line":34,"column":91}},"9":{"start":{"line":38,"column":6},"end":{"line":38,"column":21}},"10":{"start":{"line":39,"column":6},"end":{"line":41,"column":7}},"11":{"start":{"line":40,"column":8},"end":{"line":40,"column":47}},"12":{"start":{"line":43,"column":6},"end":{"line":43,"column":20}},"13":{"start":{"line":47,"column":2},"end":{"line":47,"column":54}},"14":{"start":{"line":49,"column":2},"end":{"line":49,"column":21}},"15":{"start":{"line":52,"column":0},"end":{"line":52,"column":29}},"16":{"start":{"line":53,"column":0},"end":{"line":53,"column":26}}},"branchMap":{"1":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":6},"end":{"line":33,"column":6}},{"start":{"line":33,"column":6},"end":{"line":33,"column":6}}]},"2":{"line":33,"type":"binary-expr","locations":[{"start":{"line":33,"column":10},"end":{"line":33,"column":23}},{"start":{"line":33,"column":27},"end":{"line":33,"column":40}}]}},"code":["'use strict';","","function factory (type, config, load, typed) {","  var add = load(require('../arithmetic/add'));","  var stirlingS2 = load(require('./stirlingS2'));","  var isNegative = load(require('../utils/isNegative'));","  var isInteger = load(require('../utils/isInteger'));","","  /**","   * The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S.","   * bellNumbers only takes integer arguments.","   * The following condition must be enforced: n >= 0","   *","   * Syntax:","   *","   *   math.bellNumbers(n)","   *","   * Examples:","   *","   *    math.bellNumbers(3); // returns 5;","   *    math.bellNumbers(8); // returns 4140;","   *","   * See also:","   *","   *    stirlingS2","   *","   * @param {Number | BigNumber} n    Total number of objects in the set","   * @return {Number | BigNumber}     B(n)","   */","  var bellNumbers = typed('bellNumbers', {","    'number | BigNumber': function (n) {","","      if (!isInteger(n) || isNegative(n)) {","        throw new TypeError('Non-negative integer value expected in function bellNumbers');","      }","","      // Sum (k=0, n) S(n,k).","      var result = 0;","      for(var i = 0; i <= n; i++) {","        result = add(result, stirlingS2(n, i));","      }","","      return result;","    }","  });","","  bellNumbers.toTex = {1: '\\\\mathrm{B}_{${args[0]}}'};","","  return bellNumbers;","}","","exports.name = 'bellNumbers';","exports.factory = factory;",""],"l":{"3":1,"4":0,"5":0,"6":0,"7":0,"30":0,"33":0,"34":0,"38":0,"39":0,"40":0,"43":0,"47":0,"49":0,"52":1,"53":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/combinatorics/composition.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/combinatorics/composition.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":1,"16":1},"b":{"1":[0,0],"2":[0,0,0,0],"3":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"factory","line":3,"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":46},"end":{"line":33,"column":62}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":48,"column":1}},"2":{"start":{"line":4,"column":2},"end":{"line":4,"column":66}},"3":{"start":{"line":5,"column":2},"end":{"line":5,"column":53}},"4":{"start":{"line":6,"column":2},"end":{"line":6,"column":56}},"5":{"start":{"line":7,"column":2},"end":{"line":7,"column":54}},"6":{"start":{"line":8,"column":2},"end":{"line":8,"column":53}},"7":{"start":{"line":32,"column":2},"end":{"line":43,"column":5}},"8":{"start":{"line":34,"column":6},"end":{"line":39,"column":7}},"9":{"start":{"line":35,"column":8},"end":{"line":35,"column":87}},"10":{"start":{"line":37,"column":11},"end":{"line":39,"column":7}},"11":{"start":{"line":38,"column":8},"end":{"line":38,"column":89}},"12":{"start":{"line":41,"column":6},"end":{"line":41,"column":50}},"13":{"start":{"line":45,"column":2},"end":{"line":45,"column":32}},"14":{"start":{"line":47,"column":2},"end":{"line":47,"column":21}},"15":{"start":{"line":50,"column":0},"end":{"line":50,"column":29}},"16":{"start":{"line":51,"column":0},"end":{"line":51,"column":26}}},"branchMap":{"1":{"line":34,"type":"if","locations":[{"start":{"line":34,"column":6},"end":{"line":34,"column":6}},{"start":{"line":34,"column":6},"end":{"line":34,"column":6}}]},"2":{"line":34,"type":"binary-expr","locations":[{"start":{"line":34,"column":10},"end":{"line":34,"column":23}},{"start":{"line":34,"column":27},"end":{"line":34,"column":41}},{"start":{"line":34,"column":45},"end":{"line":34,"column":58}},{"start":{"line":34,"column":62},"end":{"line":34,"column":76}}]},"3":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":11},"end":{"line":37,"column":11}},{"start":{"line":37,"column":11},"end":{"line":37,"column":11}}]}},"code":["'use strict';","","function factory (type, config, load, typed) {","  var combinations = load(require('../probability/combinations'));","  var add = load(require('../arithmetic/addScalar'));","  var isPositive = load(require('../utils/isPositive'));","  var isInteger = load(require('../utils/isInteger'));","  var larger = load(require('../relational/larger'));","","  /**","   * The composition counts of n into k parts.","   *","   * composition only takes integer arguments.","   * The following condition must be enforced: k <= n.","   *","   * Syntax:","   *","   *   math.composition(n, k)","   *","   * Examples:","   *","   *    math.composition(5, 3); // returns 6","   *","   * See also:","   *","   *    combinations","   *","   * @param {Number | BigNumber} n    Total number of objects in the set","   * @param {Number | BigNumber} k    Number of objects in the subset","   * @return {Number | BigNumber}     Returns the composition counts of n into k parts.","   */","  var composition =  typed('composition', {","    'number | BigNumber, number | BigNumber': function (n, k) {","      if (!isInteger(n) || !isPositive(n) || !isInteger(k) || !isPositive(k)) {","        throw new TypeError('Positive integer value expected in function composition');","      }","      else if (larger(k, n)) {","        throw new TypeError('k must be less than or equal to n in function composition');","      }","","      return combinations(add(n, -1), add(k, -1));","    }","  });","","  composition.toTex = undefined; // use default template","","  return composition;","}","","exports.name = 'composition';","exports.factory = factory;",""],"l":{"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"32":0,"34":0,"35":0,"37":0,"38":0,"41":0,"45":0,"47":0,"50":1,"51":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/combinatorics/stirlingS2.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/combinatorics/stirlingS2.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1,"28":1},"b":{"1":[0,0],"2":[0,0,0,0],"3":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"factory","line":3,"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}}},"2":{"name":"(anonymous_2)","line":40,"loc":{"start":{"line":40,"column":46},"end":{"line":40,"column":62}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":66,"column":1}},"2":{"start":{"line":4,"column":2},"end":{"line":4,"column":47}},"3":{"start":{"line":5,"column":2},"end":{"line":5,"column":57}},"4":{"start":{"line":6,"column":2},"end":{"line":6,"column":57}},"5":{"start":{"line":7,"column":2},"end":{"line":7,"column":53}},"6":{"start":{"line":8,"column":2},"end":{"line":8,"column":47}},"7":{"start":{"line":9,"column":2},"end":{"line":9,"column":60}},"8":{"start":{"line":10,"column":2},"end":{"line":10,"column":66}},"9":{"start":{"line":11,"column":2},"end":{"line":11,"column":56}},"10":{"start":{"line":12,"column":2},"end":{"line":12,"column":54}},"11":{"start":{"line":13,"column":2},"end":{"line":13,"column":53}},"12":{"start":{"line":39,"column":2},"end":{"line":61,"column":5}},"13":{"start":{"line":41,"column":6},"end":{"line":46,"column":7}},"14":{"start":{"line":42,"column":8},"end":{"line":42,"column":90}},"15":{"start":{"line":44,"column":11},"end":{"line":46,"column":7}},"16":{"start":{"line":45,"column":8},"end":{"line":45,"column":88}},"17":{"start":{"line":49,"column":6},"end":{"line":49,"column":36}},"18":{"start":{"line":50,"column":6},"end":{"line":50,"column":21}},"19":{"start":{"line":51,"column":6},"end":{"line":57,"column":7}},"20":{"start":{"line":52,"column":8},"end":{"line":52,"column":49}},"21":{"start":{"line":53,"column":8},"end":{"line":53,"column":41}},"22":{"start":{"line":54,"column":8},"end":{"line":54,"column":30}},"23":{"start":{"line":56,"column":8},"end":{"line":56,"column":80}},"24":{"start":{"line":59,"column":6},"end":{"line":59,"column":40}},"25":{"start":{"line":63,"column":2},"end":{"line":63,"column":62}},"26":{"start":{"line":65,"column":2},"end":{"line":65,"column":20}},"27":{"start":{"line":68,"column":0},"end":{"line":68,"column":28}},"28":{"start":{"line":69,"column":0},"end":{"line":69,"column":26}}},"branchMap":{"1":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":6},"end":{"line":41,"column":6}},{"start":{"line":41,"column":6},"end":{"line":41,"column":6}}]},"2":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":10},"end":{"line":41,"column":23}},{"start":{"line":41,"column":27},"end":{"line":41,"column":40}},{"start":{"line":41,"column":44},"end":{"line":41,"column":57}},{"start":{"line":41,"column":61},"end":{"line":41,"column":74}}]},"3":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":11},"end":{"line":44,"column":11}},{"start":{"line":44,"column":11},"end":{"line":44,"column":11}}]}},"code":["'use strict';","","function factory (type, config, load, typed) {","  var add = load(require('../arithmetic/add'));","  var subtract = load(require('../arithmetic/subtract'));","  var multiply = load(require('../arithmetic/multiply'));","  var divide = load(require('../arithmetic/divide'));","  var pow = load(require('../arithmetic/pow'));","  var factorial = load(require('../probability/factorial'));","  var combinations = load(require('../probability/combinations'));","  var isNegative = load(require('../utils/isNegative'));","  var isInteger = load(require('../utils/isInteger'));","  var larger = load(require('../relational/larger'));","","  /**","   * The Stirling numbers of the second kind, counts the number of ways to partition","   * a set of n labelled objects into k nonempty unlabelled subsets.","   * stirlingS2 only takes integer arguments.","   * The following condition must be enforced: k <= n.","   *","   *  If n = k or k = 1, then s(n,k) = 1","   *","   * Syntax:","   *","   *   math.stirlingS2(n, k)","   *","   * Examples:","   *","   *    math.stirlingS2(5, 3); //returns 25","   *","   * See also:","   *","   *    Bell numbers","   *","   * @param {Number | BigNumber} n    Total number of objects in the set","   * @param {Number | BigNumber} k    Number of objects in the subset","   * @return {Number | BigNumber}     S(n,k)","   */","  var stirlingS2 = typed('stirlingS2', {","    'number | BigNumber, number | BigNumber': function (n, k) {","      if (!isInteger(n) || isNegative(n) || !isInteger(k) || isNegative(k)) {","        throw new TypeError('Non-negative integer value expected in function stirlingS2');","      }","      else if (larger(k, n)) {","        throw new TypeError('k must be less than or equal to n in function stirlingS2');","      }","","      // 1/k! Sum(i=0 -> k) [(-1)^(k-i)*C(k,j)* i^n]","      var kFactorial = factorial(k);","      var result = 0;","      for(var i = 0; i <= k; i++) {","        var negativeOne = pow(-1, subtract(k,i));","        var kChooseI = combinations(k,i);","        var iPower = pow(i,n);","","        result = add(result, multiply(multiply(kChooseI, iPower), negativeOne));","      }","","      return divide(result, kFactorial);","    }","  });","","  stirlingS2.toTex = {2: '\\\\mathrm{S}\\\\left(${args}\\\\right)'};","","  return stirlingS2;","}","","exports.name = 'stirlingS2';","exports.factory = factory;",""],"l":{"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"39":0,"41":0,"42":0,"44":0,"45":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"56":0,"59":0,"63":0,"65":0,"68":1,"69":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/combinatorics/catalan.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/combinatorics/catalan.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":1,"15":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"factory","line":3,"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}}},"2":{"name":"(anonymous_2)","line":34,"loc":{"start":{"line":34,"column":26},"end":{"line":34,"column":39}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":48,"column":1}},"2":{"start":{"line":4,"column":2},"end":{"line":4,"column":47}},"3":{"start":{"line":5,"column":2},"end":{"line":5,"column":53}},"4":{"start":{"line":6,"column":2},"end":{"line":6,"column":57}},"5":{"start":{"line":7,"column":2},"end":{"line":7,"column":66}},"6":{"start":{"line":8,"column":2},"end":{"line":8,"column":56}},"7":{"start":{"line":9,"column":2},"end":{"line":9,"column":54}},"8":{"start":{"line":33,"column":2},"end":{"line":43,"column":5}},"9":{"start":{"line":36,"column":6},"end":{"line":38,"column":7}},"10":{"start":{"line":37,"column":8},"end":{"line":37,"column":87}},"11":{"start":{"line":40,"column":6},"end":{"line":40,"column":62}},"12":{"start":{"line":45,"column":2},"end":{"line":45,"column":50}},"13":{"start":{"line":47,"column":2},"end":{"line":47,"column":17}},"14":{"start":{"line":50,"column":0},"end":{"line":50,"column":25}},"15":{"start":{"line":51,"column":0},"end":{"line":51,"column":26}}},"branchMap":{"1":{"line":36,"type":"if","locations":[{"start":{"line":36,"column":6},"end":{"line":36,"column":6}},{"start":{"line":36,"column":6},"end":{"line":36,"column":6}}]},"2":{"line":36,"type":"binary-expr","locations":[{"start":{"line":36,"column":10},"end":{"line":36,"column":23}},{"start":{"line":36,"column":27},"end":{"line":36,"column":40}}]}},"code":["'use strict';","","function factory (type, config, load, typed) {","  var add = load(require('../arithmetic/add'));","  var divide = load(require('../arithmetic/divide'));","  var multiply = load(require('../arithmetic/multiply'));","  var combinations = load(require('../probability/combinations'));","  var isNegative = load(require('../utils/isNegative'));","  var isInteger = load(require('../utils/isInteger'));","","","  /**","   * The Catalan Numbers enumerate combinatorial structures of many different types.","   * catalan only takes integer arguments.","   * The following condition must be enforced: n >= 0","   *","   * Syntax:","   *","   *   math.catalan(n)","   *","   * Examples:","   *","   *    math.catalan(3); // returns 5;","   *    math.catalan(8); // returns 1430;","   *","   * See also:","   *","   *    bellNumbers","   *","   * @param {Number | BigNumber} n    nth Catalan number","   * @return {Number | BigNumber}     Cn(n)","   */","  var catalan = typed('catalan', {","    'number | BigNumber': function (n) {","","      if (!isInteger(n) || isNegative(n)) {","        throw new TypeError('Non-negative integer value expected in function catalan');","      }","       ","      return divide(combinations(multiply(n,2), n), add(n,1));","","    }","  });","","  catalan.toTex = {1: '\\\\mathrm{C}_{${args[0]}}'};","","  return catalan;","}","","exports.name = 'catalan';","exports.factory = factory;",""],"l":{"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"33":0,"36":0,"37":0,"40":0,"45":0,"47":0,"50":1,"51":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/complex/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/complex/index.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":6,"column":2}}},"branchMap":{},"code":["module.exports = [","  require('./arg'),","  require('./conj'),","  require('./im'),","  require('./re')","];",""],"l":{"1":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/complex/arg.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/complex/arg.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1,"11":1},"b":{},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":34,"loc":{"start":{"line":34,"column":14},"end":{"line":34,"column":27}}},"3":{"name":"(anonymous_3)","line":38,"loc":{"start":{"line":38,"column":17},"end":{"line":38,"column":30}}},"4":{"name":"(anonymous_4)","line":42,"loc":{"start":{"line":42,"column":15},"end":{"line":42,"column":28}}},"5":{"name":"(anonymous_5)","line":48,"loc":{"start":{"line":48,"column":22},"end":{"line":48,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":56,"column":1}},"3":{"start":{"line":33,"column":2},"end":{"line":51,"column":5}},"4":{"start":{"line":35,"column":6},"end":{"line":35,"column":30}},"5":{"start":{"line":39,"column":6},"end":{"line":39,"column":40}},"6":{"start":{"line":43,"column":6},"end":{"line":43,"column":21}},"7":{"start":{"line":49,"column":6},"end":{"line":49,"column":29}},"8":{"start":{"line":53,"column":2},"end":{"line":53,"column":52}},"9":{"start":{"line":55,"column":2},"end":{"line":55,"column":13}},"10":{"start":{"line":58,"column":0},"end":{"line":58,"column":21}},"11":{"start":{"line":59,"column":0},"end":{"line":59,"column":26}}},"branchMap":{},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","","function factory (type, config, load, typed) {","  /**","   * Compute the argument of a complex value.","   * For a complex number `a + bi`, the argument is computed as `atan2(b, a)`.","   *","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.arg(x)","   *","   * Examples:","   *","   *    var a = math.complex(2, 2);","   *    math.arg(a) / math.pi;          // returns number 0.25","   *","   *    var b = math.complex('2 + 3i');","   *    math.arg(b);                    // returns number 0.982793723247329","   *    math.atan2(3, 2);               // returns number 0.982793723247329","   *","   * See also:","   *","   *    re, im, conj, abs","   *","   * @param {number | BigNumber | Complex | Array | Matrix} x","   *            A complex number or array with complex numbers","   * @return {number | BigNumber | Array | Matrix} The argument of x","   */","  var arg = typed('arg', {","    'number': function (x) {","      return Math.atan2(0, x);","    },","","    'BigNumber': function (x) {","      return type.BigNumber.atan2(0, x);","    },","","    'Complex': function (x) {","      return x.arg();","    },","","    // TODO: implement BigNumber support for function arg","","    'Array | Matrix': function (x) {","      return deepMap(x, arg);","    }","  });","","  arg.toTex = {1: '\\\\arg\\\\left(${args[0]}\\\\right)'};","","  return arg;","}","","exports.name = 'arg';","exports.factory = factory;",""],"l":{"3":1,"5":1,"33":0,"35":0,"39":0,"43":0,"49":0,"53":0,"55":0,"58":1,"59":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/complex/conj.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/complex/conj.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1,"11":1},"b":{},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":32,"loc":{"start":{"line":32,"column":14},"end":{"line":32,"column":27}}},"3":{"name":"(anonymous_3)","line":36,"loc":{"start":{"line":36,"column":17},"end":{"line":36,"column":30}}},"4":{"name":"(anonymous_4)","line":40,"loc":{"start":{"line":40,"column":15},"end":{"line":40,"column":28}}},"5":{"name":"(anonymous_5)","line":44,"loc":{"start":{"line":44,"column":22},"end":{"line":44,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":52,"column":1}},"3":{"start":{"line":31,"column":2},"end":{"line":47,"column":5}},"4":{"start":{"line":33,"column":6},"end":{"line":33,"column":15}},"5":{"start":{"line":37,"column":6},"end":{"line":37,"column":15}},"6":{"start":{"line":41,"column":6},"end":{"line":41,"column":27}},"7":{"start":{"line":45,"column":6},"end":{"line":45,"column":30}},"8":{"start":{"line":49,"column":2},"end":{"line":49,"column":50}},"9":{"start":{"line":51,"column":2},"end":{"line":51,"column":14}},"10":{"start":{"line":54,"column":0},"end":{"line":54,"column":22}},"11":{"start":{"line":55,"column":0},"end":{"line":55,"column":26}}},"branchMap":{},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","","function factory (type, config, load, typed) {","  /**","   * Compute the complex conjugate of a complex value.","   * If `x = a+bi`, the complex conjugate of `x` is `a - bi`.","   *","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.conj(x)","   *","   * Examples:","   *","   *    math.conj(math.complex('2 + 3i'));  // returns Complex 2 - 3i","   *    math.conj(math.complex('2 - 3i'));  // returns Complex 2 + 3i","   *    math.conj(math.complex('-5.2i'));  // returns Complex 5.2i","   *","   * See also:","   *","   *    re, im, arg, abs","   *","   * @param {number | BigNumber | Complex | Array | Matrix} x","   *            A complex number or array with complex numbers","   * @return {number | BigNumber | Complex | Array | Matrix}","   *            The complex conjugate of x","   */","  var conj = typed('conj', {","    'number': function (x) {","      return x;","    },","","    'BigNumber': function (x) {","      return x;","    },","","    'Complex': function (x) {","      return x.conjugate();","    },","","    'Array | Matrix': function (x) {","      return deepMap(x, conj);","    }","  });","","  conj.toTex = {1: '\\\\left(${args[0]}\\\\right)^*'};","","  return conj;","}","","exports.name = 'conj';","exports.factory = factory;",""],"l":{"3":1,"5":1,"31":0,"33":0,"37":0,"41":0,"45":0,"49":0,"51":0,"54":1,"55":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/complex/im.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/complex/im.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1,"11":1},"b":{},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":34,"loc":{"start":{"line":34,"column":14},"end":{"line":34,"column":27}}},"3":{"name":"(anonymous_3)","line":38,"loc":{"start":{"line":38,"column":17},"end":{"line":38,"column":30}}},"4":{"name":"(anonymous_4)","line":42,"loc":{"start":{"line":42,"column":15},"end":{"line":42,"column":28}}},"5":{"name":"(anonymous_5)","line":46,"loc":{"start":{"line":46,"column":22},"end":{"line":46,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":54,"column":1}},"3":{"start":{"line":33,"column":2},"end":{"line":49,"column":5}},"4":{"start":{"line":35,"column":6},"end":{"line":35,"column":15}},"5":{"start":{"line":39,"column":6},"end":{"line":39,"column":35}},"6":{"start":{"line":43,"column":6},"end":{"line":43,"column":18}},"7":{"start":{"line":47,"column":6},"end":{"line":47,"column":28}},"8":{"start":{"line":51,"column":2},"end":{"line":51,"column":64}},"9":{"start":{"line":53,"column":2},"end":{"line":53,"column":12}},"10":{"start":{"line":56,"column":0},"end":{"line":56,"column":20}},"11":{"start":{"line":57,"column":0},"end":{"line":57,"column":26}}},"branchMap":{},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","","function factory (type, config, load, typed) {","  /**","   * Get the imaginary part of a complex number.","   * For a complex number `a + bi`, the function returns `b`.","   *","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.im(x)","   *","   * Examples:","   *","   *    var a = math.complex(2, 3);","   *    math.re(a);                     // returns number 2","   *    math.im(a);                     // returns number 3","   *","   *    math.re(math.complex('-5.2i')); // returns number -5.2","   *    math.re(math.complex(2.4));     // returns number 0","   *","   * See also:","   *","   *    re, conj, abs, arg","   *","   * @param {number | BigNumber | Complex | Array | Matrix} x","   *            A complex number or array with complex numbers","   * @return {number | BigNumber | Array | Matrix} The imaginary part of x","   */","  var im = typed('im', {","    'number': function (x) {","      return 0;","    },","","    'BigNumber': function (x) {","      return new type.BigNumber(0);","    },","","    'Complex': function (x) {","      return x.im;","    },","","    'Array | Matrix': function (x) {","      return deepMap(x, im);","    }","  });","","  im.toTex = {1: '\\\\Im\\\\left\\\\lbrace${args[0]}\\\\right\\\\rbrace'};","","  return im;","}","","exports.name = 'im';","exports.factory = factory;",""],"l":{"3":1,"5":1,"33":0,"35":0,"39":0,"43":0,"47":0,"51":0,"53":0,"56":1,"57":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/complex/re.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/complex/re.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1,"11":1},"b":{},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":34,"loc":{"start":{"line":34,"column":14},"end":{"line":34,"column":27}}},"3":{"name":"(anonymous_3)","line":38,"loc":{"start":{"line":38,"column":17},"end":{"line":38,"column":30}}},"4":{"name":"(anonymous_4)","line":42,"loc":{"start":{"line":42,"column":15},"end":{"line":42,"column":28}}},"5":{"name":"(anonymous_5)","line":46,"loc":{"start":{"line":46,"column":22},"end":{"line":46,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":54,"column":1}},"3":{"start":{"line":33,"column":2},"end":{"line":49,"column":5}},"4":{"start":{"line":35,"column":6},"end":{"line":35,"column":15}},"5":{"start":{"line":39,"column":6},"end":{"line":39,"column":15}},"6":{"start":{"line":43,"column":6},"end":{"line":43,"column":18}},"7":{"start":{"line":47,"column":6},"end":{"line":47,"column":28}},"8":{"start":{"line":51,"column":2},"end":{"line":51,"column":64}},"9":{"start":{"line":53,"column":2},"end":{"line":53,"column":12}},"10":{"start":{"line":56,"column":0},"end":{"line":56,"column":20}},"11":{"start":{"line":57,"column":0},"end":{"line":57,"column":26}}},"branchMap":{},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","","function factory (type, config, load, typed) {","  /**","   * Get the real part of a complex number.","   * For a complex number `a + bi`, the function returns `a`.","   *","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.re(x)","   *","   * Examples:","   *","   *    var a = math.complex(2, 3);","   *    math.re(a);                     // returns number 2","   *    math.im(a);                     // returns number 3","   *","   *    math.re(math.complex('-5.2i')); // returns number 0","   *    math.re(math.complex(2.4));     // returns number 2.4","   *","   * See also:","   *","   *    im, conj, abs, arg","   *","   * @param {number | BigNumber | Complex | Array | Matrix} x","   *            A complex number or array with complex numbers","   * @return {number | BigNumber | Array | Matrix} The real part of x","   */","  var re = typed('re', {","    'number': function (x) {","      return x;","    },","","    'BigNumber': function (x) {","      return x;","    },","","    'Complex': function (x) {","      return x.re;","    },","","    'Array | Matrix': function (x) {","      return deepMap(x, re);","    }","  });","","  re.toTex = {1: '\\\\Re\\\\left\\\\lbrace${args[0]}\\\\right\\\\rbrace'};","","  return re;","}","","exports.name = 're';","exports.factory = factory;",""],"l":{"3":1,"5":1,"33":0,"35":0,"39":0,"43":0,"47":0,"51":0,"53":0,"56":1,"57":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/geometry/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/geometry/index.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":4,"column":2}}},"branchMap":{},"code":["module.exports = [","  require('./intersect'),","  require('./distance')","];",""],"l":{"1":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/geometry/intersect.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/geometry/intersect.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":1,"39":0,"40":1,"41":0,"42":1,"43":0,"44":1,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":1,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":1,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":1,"79":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0,0],"15":[0,0,0,0],"16":[0,0,0,0,0],"17":[0,0],"18":[0,0],"19":[0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},"fnMap":{"1":{"name":"factory","line":3,"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}}},"2":{"name":"(anonymous_2)","line":39,"loc":{"start":{"line":39,"column":27},"end":{"line":39,"column":50}}},"3":{"name":"(anonymous_3)","line":47,"loc":{"start":{"line":47,"column":34},"end":{"line":47,"column":56}}},"4":{"name":"(anonymous_4)","line":69,"loc":{"start":{"line":69,"column":30},"end":{"line":69,"column":53}}},"5":{"name":"(anonymous_5)","line":73,"loc":{"start":{"line":73,"column":38},"end":{"line":73,"column":60}}},"6":{"name":"_2d","line":79,"loc":{"start":{"line":79,"column":2},"end":{"line":79,"column":18}}},"7":{"name":"_3d","line":83,"loc":{"start":{"line":83,"column":2},"end":{"line":83,"column":18}}},"8":{"name":"_4d","line":87,"loc":{"start":{"line":87,"column":2},"end":{"line":87,"column":18}}},"9":{"name":"_intersect2d","line":91,"loc":{"start":{"line":91,"column":2},"end":{"line":91,"column":43}}},"10":{"name":"_intersect3d","line":104,"loc":{"start":{"line":104,"column":2},"end":{"line":104,"column":71}}},"11":{"name":"_intersectLinePlane","line":127,"loc":{"start":{"line":127,"column":2},"end":{"line":127,"column":66}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":139,"column":1}},"2":{"start":{"line":5,"column":2},"end":{"line":5,"column":47}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":47}},"4":{"start":{"line":7,"column":2},"end":{"line":7,"column":66}},"5":{"start":{"line":8,"column":2},"end":{"line":8,"column":57}},"6":{"start":{"line":9,"column":2},"end":{"line":9,"column":57}},"7":{"start":{"line":38,"column":2},"end":{"line":77,"column":5}},"8":{"start":{"line":40,"column":6},"end":{"line":40,"column":95}},"9":{"start":{"line":40,"column":21},"end":{"line":40,"column":93}},"10":{"start":{"line":41,"column":6},"end":{"line":41,"column":96}},"11":{"start":{"line":41,"column":21},"end":{"line":41,"column":94}},"12":{"start":{"line":42,"column":6},"end":{"line":42,"column":98}},"13":{"start":{"line":42,"column":25},"end":{"line":42,"column":96}},"14":{"start":{"line":44,"column":6},"end":{"line":44,"column":109}},"15":{"start":{"line":48,"column":6},"end":{"line":66,"column":7}},"16":{"start":{"line":49,"column":8},"end":{"line":49,"column":97}},"17":{"start":{"line":49,"column":23},"end":{"line":49,"column":95}},"18":{"start":{"line":50,"column":8},"end":{"line":50,"column":98}},"19":{"start":{"line":50,"column":23},"end":{"line":50,"column":96}},"20":{"start":{"line":51,"column":8},"end":{"line":51,"column":97}},"21":{"start":{"line":51,"column":23},"end":{"line":51,"column":95}},"22":{"start":{"line":52,"column":8},"end":{"line":52,"column":98}},"23":{"start":{"line":52,"column":23},"end":{"line":52,"column":96}},"24":{"start":{"line":54,"column":8},"end":{"line":54,"column":40}},"25":{"start":{"line":56,"column":11},"end":{"line":66,"column":7}},"26":{"start":{"line":57,"column":8},"end":{"line":57,"column":97}},"27":{"start":{"line":57,"column":23},"end":{"line":57,"column":95}},"28":{"start":{"line":58,"column":8},"end":{"line":58,"column":98}},"29":{"start":{"line":58,"column":23},"end":{"line":58,"column":96}},"30":{"start":{"line":59,"column":8},"end":{"line":59,"column":97}},"31":{"start":{"line":59,"column":23},"end":{"line":59,"column":95}},"32":{"start":{"line":60,"column":8},"end":{"line":60,"column":98}},"33":{"start":{"line":60,"column":23},"end":{"line":60,"column":96}},"34":{"start":{"line":62,"column":8},"end":{"line":62,"column":100}},"35":{"start":{"line":65,"column":8},"end":{"line":65,"column":83}},"36":{"start":{"line":70,"column":6},"end":{"line":70,"column":74}},"37":{"start":{"line":75,"column":6},"end":{"line":75,"column":83}},"38":{"start":{"line":79,"column":2},"end":{"line":81,"column":3}},"39":{"start":{"line":80,"column":4},"end":{"line":80,"column":82}},"40":{"start":{"line":83,"column":2},"end":{"line":85,"column":3}},"41":{"start":{"line":84,"column":4},"end":{"line":84,"column":110}},"42":{"start":{"line":87,"column":2},"end":{"line":89,"column":3}},"43":{"start":{"line":88,"column":4},"end":{"line":88,"column":138}},"44":{"start":{"line":91,"column":2},"end":{"line":102,"column":3}},"45":{"start":{"line":92,"column":4},"end":{"line":92,"column":17}},"46":{"start":{"line":93,"column":4},"end":{"line":93,"column":17}},"47":{"start":{"line":94,"column":4},"end":{"line":94,"column":31}},"48":{"start":{"line":95,"column":4},"end":{"line":95,"column":31}},"49":{"start":{"line":96,"column":4},"end":{"line":96,"column":40}},"50":{"start":{"line":97,"column":4},"end":{"line":99,"column":5}},"51":{"start":{"line":98,"column":6},"end":{"line":98,"column":18}},"52":{"start":{"line":100,"column":4},"end":{"line":100,"column":74}},"53":{"start":{"line":101,"column":4},"end":{"line":101,"column":36}},"54":{"start":{"line":104,"column":2},"end":{"line":125,"column":3}},"55":{"start":{"line":105,"column":4},"end":{"line":105,"column":80}},"56":{"start":{"line":106,"column":4},"end":{"line":106,"column":80}},"57":{"start":{"line":107,"column":4},"end":{"line":107,"column":80}},"58":{"start":{"line":108,"column":4},"end":{"line":108,"column":80}},"59":{"start":{"line":109,"column":4},"end":{"line":109,"column":80}},"60":{"start":{"line":110,"column":4},"end":{"line":110,"column":75}},"61":{"start":{"line":111,"column":4},"end":{"line":111,"column":46}},"62":{"start":{"line":113,"column":4},"end":{"line":113,"column":34}},"63":{"start":{"line":114,"column":4},"end":{"line":114,"column":34}},"64":{"start":{"line":115,"column":4},"end":{"line":115,"column":34}},"65":{"start":{"line":116,"column":4},"end":{"line":116,"column":34}},"66":{"start":{"line":117,"column":4},"end":{"line":117,"column":34}},"67":{"start":{"line":118,"column":4},"end":{"line":118,"column":34}},"68":{"start":{"line":119,"column":4},"end":{"line":124,"column":5}},"69":{"start":{"line":120,"column":6},"end":{"line":120,"column":29}},"70":{"start":{"line":123,"column":6},"end":{"line":123,"column":18}},"71":{"start":{"line":127,"column":2},"end":{"line":136,"column":3}},"72":{"start":{"line":128,"column":4},"end":{"line":128,"column":73}},"73":{"start":{"line":129,"column":4},"end":{"line":129,"column":32}},"74":{"start":{"line":130,"column":4},"end":{"line":130,"column":32}},"75":{"start":{"line":131,"column":4},"end":{"line":131,"column":32}},"76":{"start":{"line":132,"column":4},"end":{"line":132,"column":24}},"77":{"start":{"line":138,"column":2},"end":{"line":138,"column":19}},"78":{"start":{"line":141,"column":0},"end":{"line":141,"column":27}},"79":{"start":{"line":142,"column":0},"end":{"line":142,"column":26}}},"branchMap":{"1":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":6},"end":{"line":40,"column":6}},{"start":{"line":40,"column":6},"end":{"line":40,"column":6}}]},"2":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":6},"end":{"line":41,"column":6}},{"start":{"line":41,"column":6},"end":{"line":41,"column":6}}]},"3":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":6},"end":{"line":42,"column":6}},{"start":{"line":42,"column":6},"end":{"line":42,"column":6}}]},"4":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":6},"end":{"line":48,"column":6}},{"start":{"line":48,"column":6},"end":{"line":48,"column":6}}]},"5":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":8},"end":{"line":49,"column":8}},{"start":{"line":49,"column":8},"end":{"line":49,"column":8}}]},"6":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":8},"end":{"line":50,"column":8}},{"start":{"line":50,"column":8},"end":{"line":50,"column":8}}]},"7":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":8},"end":{"line":51,"column":8}},{"start":{"line":51,"column":8},"end":{"line":51,"column":8}}]},"8":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":8},"end":{"line":52,"column":8}},{"start":{"line":52,"column":8},"end":{"line":52,"column":8}}]},"9":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":11},"end":{"line":56,"column":11}},{"start":{"line":56,"column":11},"end":{"line":56,"column":11}}]},"10":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":8},"end":{"line":57,"column":8}},{"start":{"line":57,"column":8},"end":{"line":57,"column":8}}]},"11":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":8},"end":{"line":58,"column":8}},{"start":{"line":58,"column":8},"end":{"line":58,"column":8}}]},"12":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":8},"end":{"line":59,"column":8}},{"start":{"line":59,"column":8},"end":{"line":59,"column":8}}]},"13":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":8},"end":{"line":60,"column":8}},{"start":{"line":60,"column":8},"end":{"line":60,"column":8}}]},"14":{"line":80,"type":"binary-expr","locations":[{"start":{"line":80,"column":11},"end":{"line":80,"column":25}},{"start":{"line":80,"column":29},"end":{"line":80,"column":53}},{"start":{"line":80,"column":57},"end":{"line":80,"column":81}}]},"15":{"line":84,"type":"binary-expr","locations":[{"start":{"line":84,"column":11},"end":{"line":84,"column":25}},{"start":{"line":84,"column":29},"end":{"line":84,"column":53}},{"start":{"line":84,"column":57},"end":{"line":84,"column":81}},{"start":{"line":84,"column":85},"end":{"line":84,"column":109}}]},"16":{"line":88,"type":"binary-expr","locations":[{"start":{"line":88,"column":11},"end":{"line":88,"column":25}},{"start":{"line":88,"column":29},"end":{"line":88,"column":53}},{"start":{"line":88,"column":57},"end":{"line":88,"column":81}},{"start":{"line":88,"column":85},"end":{"line":88,"column":109}},{"start":{"line":88,"column":113},"end":{"line":88,"column":137}}]},"17":{"line":97,"type":"if","locations":[{"start":{"line":97,"column":4},"end":{"line":97,"column":4}},{"start":{"line":97,"column":4},"end":{"line":97,"column":4}}]},"18":{"line":119,"type":"if","locations":[{"start":{"line":119,"column":4},"end":{"line":119,"column":4}},{"start":{"line":119,"column":4},"end":{"line":119,"column":4}}]},"19":{"line":119,"type":"binary-expr","locations":[{"start":{"line":119,"column":8},"end":{"line":119,"column":19}},{"start":{"line":119,"column":23},"end":{"line":119,"column":34}},{"start":{"line":119,"column":38},"end":{"line":119,"column":49}}]}},"code":["'use strict';","","function factory (type, config, load, typed) {","","  var abs = load(require('../arithmetic/abs'));","  var add = load(require('../arithmetic/add'));","  var matrix = load(require('../../type/matrix/function/matrix'));","  var multiply = load(require('../arithmetic/multiply'));","  var subtract = load(require('../arithmetic/subtract'));","","  /**","   * Calculates the point of intersection of two lines in two or three dimensions","   * and of a line and a plane in three dimensions. The inputs are in the form of","   * arrays or 1 dimensional matrices. The line intersection functions return null","   * if the lines do not meet.","   *","   * Note: Fill the plane coefficients as `x + y + z = c` and not as `x + y + z + c = 0`.","   *","   * Syntax:","   *","   *    math.intersect(endPoint1Line1, endPoint2Line1, endPoint1Line2, endPoint2Line2)","   *    math.intersect(endPoint1, endPoint2, planeCoefficients)","   *","   * Examples:","   *","   *    math.intersect([0, 0], [10, 10], [10, 0], [0, 10]);              // Returns [5, 5]","   *    math.intersect([0, 0, 0], [10, 10, 0], [10, 0, 0], [0, 10, 0]);  // Returns [5, 5, 0]","   *    math.intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6]);            // Returns [7, -4, 3]","   *","   * @param  {Array | Matrix} w   Co-ordinates of first end-point of first line","   * @param  {Array | Matrix} x   Co-ordinates of second end-point of first line","   * @param  {Array | Matrix} y   Co-ordinates of first end-point of second line","   *                              OR Co-efficients of the plane's equation","   * @param  {Array | Matrix} z   Co-ordinates of second end-point of second line","   *                              OR null if the calculation is for line and plane","   * @return {Array}              Returns the point of intersection of lines/lines-planes","   */","  var intersect = typed('intersect', {","    'Array, Array, Array': function (x, y, plane) {","      if (!_3d(x)) { throw new TypeError('Array with 3 numbers expected for first argument'); }","      if (!_3d(y)) { throw new TypeError('Array with 3 numbers expected for second argument'); }","      if (!_4d(plane)) { throw new TypeError('Array with 4 numbers expected as third argument'); }","","      return _intersectLinePlane(x[0], x[1], x[2], y[0], y[1], y[2], plane[0], plane[1], plane[2], plane[3]);","    },","","    'Array, Array, Array, Array': function (w, x, y, z) {","      if (w.length === 2) {","        if (!_2d(w)) { throw new TypeError('Array with 2 numbers expected for first argument'); }","        if (!_2d(x)) { throw new TypeError('Array with 2 numbers expected for second argument'); }","        if (!_2d(y)) { throw new TypeError('Array with 2 numbers expected for third argument'); }","        if (!_2d(z)) { throw new TypeError('Array with 2 numbers expected for fourth argument'); }","","        return _intersect2d(w, x, y, z);","      }","      else if (w.length === 3) {","        if (!_3d(w)) { throw new TypeError('Array with 3 numbers expected for first argument'); }","        if (!_3d(x)) { throw new TypeError('Array with 3 numbers expected for second argument'); }","        if (!_3d(y)) { throw new TypeError('Array with 3 numbers expected for third argument'); }","        if (!_3d(z)) { throw new TypeError('Array with 3 numbers expected for fourth argument'); }","","        return _intersect3d(w[0], w[1], w[2], x[0], x[1], x[2], y[0], y[1], y[2], z[0], z[1], z[2]);","      }","      else {","        throw new TypeError('Arrays with two or thee dimensional points expected');","      }","    },","","    'Matrix, Matrix, Matrix': function (x, y, plane) {","      return matrix(intersect(x.valueOf(), y.valueOf(), plane.valueOf()));","    },","","    'Matrix, Matrix, Matrix, Matrix': function (w, x, y, z) {","      // TODO: output matrix type should match input matrix type","      return matrix(intersect(w.valueOf(), x.valueOf(), y.valueOf(), z.valueOf()));","    }","  });","","  function _2d(x) {","    return x.length === 2 && typeof x[0] === 'number' && typeof x[1] === 'number';","  }","","  function _3d(x) {","    return x.length === 3 && typeof x[0] === 'number' && typeof x[1] === 'number' && typeof x[2] === 'number';","  }","","  function _4d(x) {","    return x.length === 4 && typeof x[0] === 'number' && typeof x[1] === 'number' && typeof x[2] === 'number' && typeof x[3] === 'number';","  }","","  function _intersect2d(p1a, p1b, p2a, p2b){","    var o1 = p1a;","    var o2 = p2a;","    var d1 = subtract(o1, p1b);","    var d2 = subtract(o2, p2b);","    var det = d1[0]*d2[1] - d2[0]*d1[1];","    if (abs(det) < config.epsilon) {","      return null;","    }","    var t = (d2[0]*o1[1] - d2[1]*o1[0] - d2[0]*o2[1] + d2[1]*o2[0]) / det;","    return add(multiply(d1, t), o1); ","  }","","  function _intersect3d(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4){","    var d1343 = (x1 - x3)*(x4 - x3) + (y1 - y3)*(y4 - y3) + (z1 - z3)*(z4 - z3);","    var d4321 = (x4 - x3)*(x2 - x1) + (y4 - y3)*(y2 - y1) + (z4 - z3)*(z2 - z1);","    var d1321 = (x1 - x3)*(x2 - x1) + (y1 - y3)*(y2 - y1) + (z1 - z3)*(z2 - z1);","    var d4343 = (x4 - x3)*(x4 - x3) + (y4 - y3)*(y4 - y3) + (z4 - z3)*(z4 - z3);","    var d2121 = (x2 - x1)*(x2 - x1) + (y2 - y1)*(y2 - y1) + (z2 - z1)*(z2 - z1);","    var ta = ( d1343*d4321 - d1321*d4343 ) / ( d2121*d4343 - d4321*d4321 );","    var tb = ( d1343 + ta * d4321 ) / (d4343);","","    var pax = x1 + ta * (x2 - x1);","    var pay = y1 + ta * (y2 - y1);","    var paz = z1 + ta * (z2 - z1);","    var pbx = x3 + tb * (x4 - x3);","    var pby = y3 + tb * (y4 - y3);","    var pbz = z3 + tb * (z4 - z3);","    if (pax === pbx && pay === pby && paz === pbz){","      return [pax, pay, paz];","    }","    else{","      return null;","    }","  }","","  function _intersectLinePlane(x1, y1, z1, x2, y2, z2, x, y, z, c){","    var t = (c - x1*x - y1*y - z1*z)/(x2*x + y2*y + z2*z - x1 - y1 - z1);","    var px = x1 + t * (x2 - x1);","    var py = y1 + t * (y2 - y1);","    var pz = z1 + t * (z2 - z1);","    return [px, py, pz];","    // TODO: Add cases when line is parallel to the plane:","    //       (a) no intersection,","    //       (b) line contained in plane","  }","","  return intersect;","}","","exports.name = 'intersect';","exports.factory = factory;",""],"l":{"3":1,"5":0,"6":0,"7":0,"8":0,"9":0,"38":0,"40":0,"41":0,"42":0,"44":0,"48":0,"49":0,"50":0,"51":0,"52":0,"54":0,"56":0,"57":0,"58":0,"59":0,"60":0,"62":0,"65":0,"70":0,"75":0,"79":1,"80":0,"83":1,"84":0,"87":1,"88":0,"91":1,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"100":0,"101":0,"104":1,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"123":0,"127":1,"128":0,"129":0,"130":0,"131":0,"132":0,"138":0,"141":1,"142":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/geometry/distance.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/geometry/distance.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":1,"95":0,"96":0,"97":0,"98":1,"99":0,"100":0,"101":0,"102":1,"103":0,"104":0,"105":0,"106":1,"107":0,"108":0,"109":0,"110":0,"111":0,"112":1,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":1,"124":0,"125":0,"126":0,"127":0,"128":1,"129":0,"130":0,"131":0,"132":0,"133":0,"134":1,"135":0,"136":0,"137":0,"138":0,"139":0,"140":1,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":1,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":1,"157":1},"b":{"1":[0,0],"2":[0,0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0,0,0,0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0,0,0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0,0,0,0,0,0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0,0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0,0,0,0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0],"57":[0,0,0],"58":[0,0],"59":[0,0,0,0,0,0],"60":[0,0],"61":[0,0,0],"62":[0,0],"63":[0,0,0],"64":[0,0],"65":[0,0,0,0],"66":[0,0],"67":[0,0,0,0],"68":[0,0],"69":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},"fnMap":{"1":{"name":"factory","line":3,"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}}},"2":{"name":"(anonymous_2)","line":59,"loc":{"start":{"line":59,"column":27},"end":{"line":59,"column":44}}},"3":{"name":"(anonymous_3)","line":76,"loc":{"start":{"line":76,"column":30},"end":{"line":76,"column":47}}},"4":{"name":"(anonymous_4)","line":98,"loc":{"start":{"line":98,"column":20},"end":{"line":98,"column":34}}},"5":{"name":"(anonymous_5)","line":131,"loc":{"start":{"line":131,"column":22},"end":{"line":131,"column":36}}},"6":{"name":"(anonymous_6)","line":188,"loc":{"start":{"line":188,"column":13},"end":{"line":188,"column":26}}},"7":{"name":"_2d","line":197,"loc":{"start":{"line":197,"column":0},"end":{"line":197,"column":15}}},"8":{"name":"_3d","line":205,"loc":{"start":{"line":205,"column":0},"end":{"line":205,"column":15}}},"9":{"name":"_parametricLine","line":213,"loc":{"start":{"line":213,"column":0},"end":{"line":213,"column":27}}},"10":{"name":"_objectToArray","line":222,"loc":{"start":{"line":222,"column":0},"end":{"line":222,"column":26}}},"11":{"name":"_pairwise","line":231,"loc":{"start":{"line":231,"column":0},"end":{"line":231,"column":21}}},"12":{"name":"_distancePointLine2D","line":253,"loc":{"start":{"line":253,"column":0},"end":{"line":253,"column":44}}},"13":{"name":"_distancePointLine3D","line":260,"loc":{"start":{"line":260,"column":0},"end":{"line":260,"column":59}}},"14":{"name":"_distance2d","line":268,"loc":{"start":{"line":268,"column":0},"end":{"line":268,"column":36}}},"15":{"name":"_distance3d","line":276,"loc":{"start":{"line":276,"column":0},"end":{"line":276,"column":44}}},"16":{"name":"_distancePairwise","line":285,"loc":{"start":{"line":285,"column":0},"end":{"line":285,"column":29}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":195,"column":1}},"2":{"start":{"line":4,"column":2},"end":{"line":4,"column":66}},"3":{"start":{"line":58,"column":2},"end":{"line":193,"column":5}},"4":{"start":{"line":61,"column":6},"end":{"line":74,"column":7}},"5":{"start":{"line":62,"column":8},"end":{"line":62,"column":97}},"6":{"start":{"line":62,"column":23},"end":{"line":62,"column":95}},"7":{"start":{"line":63,"column":8},"end":{"line":63,"column":98}},"8":{"start":{"line":63,"column":23},"end":{"line":63,"column":96}},"9":{"start":{"line":64,"column":8},"end":{"line":64,"column":97}},"10":{"start":{"line":64,"column":23},"end":{"line":64,"column":95}},"11":{"start":{"line":65,"column":8},"end":{"line":65,"column":40}},"12":{"start":{"line":66,"column":8},"end":{"line":66,"column":30}},"13":{"start":{"line":67,"column":8},"end":{"line":67,"column":33}},"14":{"start":{"line":68,"column":8},"end":{"line":68,"column":28}},"15":{"start":{"line":70,"column":8},"end":{"line":70,"column":74}},"16":{"start":{"line":73,"column":8},"end":{"line":73,"column":60}},"17":{"start":{"line":77,"column":6},"end":{"line":96,"column":7}},"18":{"start":{"line":78,"column":8},"end":{"line":78,"column":94}},"19":{"start":{"line":78,"column":23},"end":{"line":78,"column":92}},"20":{"start":{"line":79,"column":8},"end":{"line":79,"column":102}},"21":{"start":{"line":79,"column":23},"end":{"line":79,"column":100}},"22":{"start":{"line":80,"column":8},"end":{"line":80,"column":102}},"23":{"start":{"line":80,"column":23},"end":{"line":80,"column":100}},"24":{"start":{"line":81,"column":8},"end":{"line":92,"column":9}},"25":{"start":{"line":83,"column":10},"end":{"line":83,"column":74}},"26":{"start":{"line":84,"column":10},"end":{"line":84,"column":40}},"27":{"start":{"line":85,"column":10},"end":{"line":85,"column":43}},"28":{"start":{"line":86,"column":10},"end":{"line":86,"column":34}},"29":{"start":{"line":88,"column":10},"end":{"line":88,"column":84}},"30":{"start":{"line":91,"column":10},"end":{"line":91,"column":56}},"31":{"start":{"line":95,"column":8},"end":{"line":95,"column":60}},"32":{"start":{"line":100,"column":6},"end":{"line":129,"column":7}},"33":{"start":{"line":101,"column":8},"end":{"line":101,"column":97}},"34":{"start":{"line":101,"column":23},"end":{"line":101,"column":95}},"35":{"start":{"line":102,"column":8},"end":{"line":102,"column":98}},"36":{"start":{"line":102,"column":23},"end":{"line":102,"column":96}},"37":{"start":{"line":104,"column":8},"end":{"line":104,"column":66}},"38":{"start":{"line":107,"column":11},"end":{"line":129,"column":7}},"39":{"start":{"line":108,"column":8},"end":{"line":108,"column":97}},"40":{"start":{"line":108,"column":23},"end":{"line":108,"column":95}},"41":{"start":{"line":109,"column":8},"end":{"line":109,"column":110}},"42":{"start":{"line":109,"column":35},"end":{"line":109,"column":108}},"43":{"start":{"line":111,"column":8},"end":{"line":111,"column":90}},"44":{"start":{"line":114,"column":11},"end":{"line":129,"column":7}},"45":{"start":{"line":115,"column":8},"end":{"line":115,"column":97}},"46":{"start":{"line":115,"column":23},"end":{"line":115,"column":95}},"47":{"start":{"line":116,"column":8},"end":{"line":116,"column":98}},"48":{"start":{"line":116,"column":23},"end":{"line":116,"column":96}},"49":{"start":{"line":118,"column":8},"end":{"line":118,"column":51}},"50":{"start":{"line":121,"column":11},"end":{"line":129,"column":7}},"51":{"start":{"line":122,"column":8},"end":{"line":122,"column":97}},"52":{"start":{"line":122,"column":23},"end":{"line":122,"column":95}},"53":{"start":{"line":123,"column":8},"end":{"line":123,"column":98}},"54":{"start":{"line":123,"column":23},"end":{"line":123,"column":96}},"55":{"start":{"line":125,"column":8},"end":{"line":125,"column":63}},"56":{"start":{"line":128,"column":8},"end":{"line":128,"column":60}},"57":{"start":{"line":132,"column":6},"end":{"line":186,"column":7}},"58":{"start":{"line":133,"column":8},"end":{"line":133,"column":94}},"59":{"start":{"line":133,"column":23},"end":{"line":133,"column":92}},"60":{"start":{"line":134,"column":8},"end":{"line":134,"column":112}},"61":{"start":{"line":134,"column":23},"end":{"line":134,"column":110}},"62":{"start":{"line":135,"column":8},"end":{"line":142,"column":9}},"63":{"start":{"line":138,"column":10},"end":{"line":138,"column":98}},"64":{"start":{"line":141,"column":10},"end":{"line":141,"column":56}},"65":{"start":{"line":145,"column":11},"end":{"line":186,"column":7}},"66":{"start":{"line":146,"column":8},"end":{"line":146,"column":102}},"67":{"start":{"line":146,"column":23},"end":{"line":146,"column":100}},"68":{"start":{"line":147,"column":8},"end":{"line":147,"column":111}},"69":{"start":{"line":147,"column":35},"end":{"line":147,"column":109}},"70":{"start":{"line":148,"column":8},"end":{"line":156,"column":9}},"71":{"start":{"line":152,"column":10},"end":{"line":152,"column":101}},"72":{"start":{"line":155,"column":10},"end":{"line":155,"column":56}},"73":{"start":{"line":159,"column":11},"end":{"line":186,"column":7}},"74":{"start":{"line":160,"column":8},"end":{"line":160,"column":100}},"75":{"start":{"line":160,"column":23},"end":{"line":160,"column":98}},"76":{"start":{"line":161,"column":8},"end":{"line":161,"column":100}},"77":{"start":{"line":161,"column":23},"end":{"line":161,"column":98}},"78":{"start":{"line":162,"column":8},"end":{"line":169,"column":9}},"79":{"start":{"line":165,"column":10},"end":{"line":165,"column":81}},"80":{"start":{"line":168,"column":10},"end":{"line":168,"column":56}},"81":{"start":{"line":172,"column":11},"end":{"line":186,"column":7}},"82":{"start":{"line":173,"column":8},"end":{"line":173,"column":111}},"83":{"start":{"line":173,"column":23},"end":{"line":173,"column":109}},"84":{"start":{"line":174,"column":8},"end":{"line":174,"column":111}},"85":{"start":{"line":174,"column":23},"end":{"line":174,"column":109}},"86":{"start":{"line":175,"column":8},"end":{"line":182,"column":9}},"87":{"start":{"line":178,"column":10},"end":{"line":178,"column":107}},"88":{"start":{"line":181,"column":10},"end":{"line":181,"column":56}},"89":{"start":{"line":185,"column":8},"end":{"line":185,"column":60}},"90":{"start":{"line":189,"column":6},"end":{"line":189,"column":119}},"91":{"start":{"line":189,"column":29},"end":{"line":189,"column":117}},"92":{"start":{"line":191,"column":6},"end":{"line":191,"column":36}},"93":{"start":{"line":194,"column":2},"end":{"line":194,"column":18}},"94":{"start":{"line":197,"column":0},"end":{"line":203,"column":1}},"95":{"start":{"line":199,"column":2},"end":{"line":201,"column":3}},"96":{"start":{"line":200,"column":4},"end":{"line":200,"column":26}},"97":{"start":{"line":202,"column":2},"end":{"line":202,"column":62}},"98":{"start":{"line":205,"column":0},"end":{"line":211,"column":1}},"99":{"start":{"line":207,"column":2},"end":{"line":209,"column":3}},"100":{"start":{"line":208,"column":4},"end":{"line":208,"column":26}},"101":{"start":{"line":210,"column":2},"end":{"line":210,"column":90}},"102":{"start":{"line":213,"column":0},"end":{"line":220,"column":1}},"103":{"start":{"line":214,"column":2},"end":{"line":216,"column":3}},"104":{"start":{"line":215,"column":4},"end":{"line":215,"column":26}},"105":{"start":{"line":217,"column":2},"end":{"line":218,"column":85}},"106":{"start":{"line":222,"column":0},"end":{"line":229,"column":1}},"107":{"start":{"line":223,"column":2},"end":{"line":223,"column":28}},"108":{"start":{"line":224,"column":2},"end":{"line":224,"column":13}},"109":{"start":{"line":225,"column":2},"end":{"line":227,"column":3}},"110":{"start":{"line":226,"column":4},"end":{"line":226,"column":23}},"111":{"start":{"line":228,"column":2},"end":{"line":228,"column":11}},"112":{"start":{"line":231,"column":0},"end":{"line":251,"column":1}},"113":{"start":{"line":233,"column":2},"end":{"line":249,"column":3}},"114":{"start":{"line":234,"column":4},"end":{"line":238,"column":5}},"115":{"start":{"line":235,"column":6},"end":{"line":237,"column":7}},"116":{"start":{"line":236,"column":8},"end":{"line":236,"column":21}},"117":{"start":{"line":240,"column":7},"end":{"line":249,"column":3}},"118":{"start":{"line":241,"column":4},"end":{"line":245,"column":5}},"119":{"start":{"line":242,"column":6},"end":{"line":244,"column":7}},"120":{"start":{"line":243,"column":8},"end":{"line":243,"column":21}},"121":{"start":{"line":248,"column":4},"end":{"line":248,"column":17}},"122":{"start":{"line":250,"column":2},"end":{"line":250,"column":14}},"123":{"start":{"line":253,"column":0},"end":{"line":258,"column":1}},"124":{"start":{"line":254,"column":2},"end":{"line":254,"column":37}},"125":{"start":{"line":255,"column":2},"end":{"line":255,"column":39}},"126":{"start":{"line":256,"column":2},"end":{"line":256,"column":25}},"127":{"start":{"line":257,"column":2},"end":{"line":257,"column":16}},"128":{"start":{"line":260,"column":0},"end":{"line":266,"column":1}},"129":{"start":{"line":261,"column":2},"end":{"line":261,"column":93}},"130":{"start":{"line":262,"column":2},"end":{"line":262,"column":69}},"131":{"start":{"line":263,"column":2},"end":{"line":263,"column":43}},"132":{"start":{"line":264,"column":2},"end":{"line":264,"column":23}},"133":{"start":{"line":265,"column":2},"end":{"line":265,"column":16}},"134":{"start":{"line":268,"column":0},"end":{"line":274,"column":1}},"135":{"start":{"line":269,"column":2},"end":{"line":269,"column":22}},"136":{"start":{"line":270,"column":2},"end":{"line":270,"column":22}},"137":{"start":{"line":271,"column":2},"end":{"line":271,"column":47}},"138":{"start":{"line":272,"column":2},"end":{"line":272,"column":39}},"139":{"start":{"line":273,"column":2},"end":{"line":273,"column":16}},"140":{"start":{"line":276,"column":0},"end":{"line":283,"column":1}},"141":{"start":{"line":277,"column":2},"end":{"line":277,"column":22}},"142":{"start":{"line":278,"column":2},"end":{"line":278,"column":22}},"143":{"start":{"line":279,"column":2},"end":{"line":279,"column":22}},"144":{"start":{"line":280,"column":2},"end":{"line":280,"column":63}},"145":{"start":{"line":281,"column":2},"end":{"line":281,"column":39}},"146":{"start":{"line":282,"column":2},"end":{"line":282,"column":16}},"147":{"start":{"line":285,"column":0},"end":{"line":298,"column":1}},"148":{"start":{"line":286,"column":2},"end":{"line":286,"column":18}},"149":{"start":{"line":287,"column":2},"end":{"line":296,"column":3}},"150":{"start":{"line":288,"column":4},"end":{"line":295,"column":5}},"151":{"start":{"line":289,"column":6},"end":{"line":294,"column":7}},"152":{"start":{"line":290,"column":8},"end":{"line":290,"column":69}},"153":{"start":{"line":292,"column":11},"end":{"line":294,"column":7}},"154":{"start":{"line":293,"column":8},"end":{"line":293,"column":87}},"155":{"start":{"line":297,"column":2},"end":{"line":297,"column":16}},"156":{"start":{"line":300,"column":0},"end":{"line":300,"column":26}},"157":{"start":{"line":301,"column":0},"end":{"line":301,"column":26}}},"branchMap":{"1":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":6},"end":{"line":61,"column":6}},{"start":{"line":61,"column":6},"end":{"line":61,"column":6}}]},"2":{"line":61,"type":"binary-expr","locations":[{"start":{"line":61,"column":10},"end":{"line":61,"column":23}},{"start":{"line":61,"column":27},"end":{"line":61,"column":40}},{"start":{"line":61,"column":44},"end":{"line":61,"column":57}}]},"3":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":8},"end":{"line":62,"column":8}},{"start":{"line":62,"column":8},"end":{"line":62,"column":8}}]},"4":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":8},"end":{"line":63,"column":8}},{"start":{"line":63,"column":8},"end":{"line":63,"column":8}}]},"5":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":8},"end":{"line":64,"column":8}},{"start":{"line":64,"column":8},"end":{"line":64,"column":8}}]},"6":{"line":77,"type":"if","locations":[{"start":{"line":77,"column":6},"end":{"line":77,"column":6}},{"start":{"line":77,"column":6},"end":{"line":77,"column":6}}]},"7":{"line":77,"type":"binary-expr","locations":[{"start":{"line":77,"column":10},"end":{"line":77,"column":36}},{"start":{"line":77,"column":40},"end":{"line":77,"column":66}},{"start":{"line":77,"column":70},"end":{"line":77,"column":96}}]},"8":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":8},"end":{"line":78,"column":8}},{"start":{"line":78,"column":8},"end":{"line":78,"column":8}}]},"9":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":8},"end":{"line":79,"column":8}},{"start":{"line":79,"column":8},"end":{"line":79,"column":8}}]},"10":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":8},"end":{"line":80,"column":8}},{"start":{"line":80,"column":8},"end":{"line":80,"column":8}}]},"11":{"line":81,"type":"if","locations":[{"start":{"line":81,"column":8},"end":{"line":81,"column":8}},{"start":{"line":81,"column":8},"end":{"line":81,"column":8}}]},"12":{"line":81,"type":"binary-expr","locations":[{"start":{"line":81,"column":12},"end":{"line":81,"column":38}},{"start":{"line":81,"column":42},"end":{"line":81,"column":68}},{"start":{"line":81,"column":72},"end":{"line":81,"column":102}},{"start":{"line":82,"column":10},"end":{"line":82,"column":40}},{"start":{"line":82,"column":44},"end":{"line":82,"column":74}},{"start":{"line":82,"column":78},"end":{"line":82,"column":108}}]},"13":{"line":100,"type":"if","locations":[{"start":{"line":100,"column":6},"end":{"line":100,"column":6}},{"start":{"line":100,"column":6},"end":{"line":100,"column":6}}]},"14":{"line":100,"type":"binary-expr","locations":[{"start":{"line":100,"column":10},"end":{"line":100,"column":23}},{"start":{"line":100,"column":27},"end":{"line":100,"column":40}}]},"15":{"line":101,"type":"if","locations":[{"start":{"line":101,"column":8},"end":{"line":101,"column":8}},{"start":{"line":101,"column":8},"end":{"line":101,"column":8}}]},"16":{"line":102,"type":"if","locations":[{"start":{"line":102,"column":8},"end":{"line":102,"column":8}},{"start":{"line":102,"column":8},"end":{"line":102,"column":8}}]},"17":{"line":107,"type":"if","locations":[{"start":{"line":107,"column":11},"end":{"line":107,"column":11}},{"start":{"line":107,"column":11},"end":{"line":107,"column":11}}]},"18":{"line":107,"type":"binary-expr","locations":[{"start":{"line":107,"column":15},"end":{"line":107,"column":28}},{"start":{"line":107,"column":32},"end":{"line":107,"column":45}}]},"19":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":8},"end":{"line":108,"column":8}},{"start":{"line":108,"column":8},"end":{"line":108,"column":8}}]},"20":{"line":109,"type":"if","locations":[{"start":{"line":109,"column":8},"end":{"line":109,"column":8}},{"start":{"line":109,"column":8},"end":{"line":109,"column":8}}]},"21":{"line":114,"type":"if","locations":[{"start":{"line":114,"column":11},"end":{"line":114,"column":11}},{"start":{"line":114,"column":11},"end":{"line":114,"column":11}}]},"22":{"line":114,"type":"binary-expr","locations":[{"start":{"line":114,"column":15},"end":{"line":114,"column":28}},{"start":{"line":114,"column":32},"end":{"line":114,"column":45}}]},"23":{"line":115,"type":"if","locations":[{"start":{"line":115,"column":8},"end":{"line":115,"column":8}},{"start":{"line":115,"column":8},"end":{"line":115,"column":8}}]},"24":{"line":116,"type":"if","locations":[{"start":{"line":116,"column":8},"end":{"line":116,"column":8}},{"start":{"line":116,"column":8},"end":{"line":116,"column":8}}]},"25":{"line":121,"type":"if","locations":[{"start":{"line":121,"column":11},"end":{"line":121,"column":11}},{"start":{"line":121,"column":11},"end":{"line":121,"column":11}}]},"26":{"line":121,"type":"binary-expr","locations":[{"start":{"line":121,"column":14},"end":{"line":121,"column":27}},{"start":{"line":121,"column":31},"end":{"line":121,"column":44}}]},"27":{"line":122,"type":"if","locations":[{"start":{"line":122,"column":8},"end":{"line":122,"column":8}},{"start":{"line":122,"column":8},"end":{"line":122,"column":8}}]},"28":{"line":123,"type":"if","locations":[{"start":{"line":123,"column":8},"end":{"line":123,"column":8}},{"start":{"line":123,"column":8},"end":{"line":123,"column":8}}]},"29":{"line":132,"type":"if","locations":[{"start":{"line":132,"column":6},"end":{"line":132,"column":6}},{"start":{"line":132,"column":6},"end":{"line":132,"column":6}}]},"30":{"line":132,"type":"binary-expr","locations":[{"start":{"line":132,"column":10},"end":{"line":132,"column":36}},{"start":{"line":132,"column":40},"end":{"line":132,"column":66}}]},"31":{"line":133,"type":"if","locations":[{"start":{"line":133,"column":8},"end":{"line":133,"column":8}},{"start":{"line":133,"column":8},"end":{"line":133,"column":8}}]},"32":{"line":134,"type":"if","locations":[{"start":{"line":134,"column":8},"end":{"line":134,"column":8}},{"start":{"line":134,"column":8},"end":{"line":134,"column":8}}]},"33":{"line":135,"type":"if","locations":[{"start":{"line":135,"column":8},"end":{"line":135,"column":8}},{"start":{"line":135,"column":8},"end":{"line":135,"column":8}}]},"34":{"line":135,"type":"binary-expr","locations":[{"start":{"line":135,"column":12},"end":{"line":135,"column":38}},{"start":{"line":135,"column":42},"end":{"line":135,"column":68}},{"start":{"line":135,"column":72},"end":{"line":135,"column":102}},{"start":{"line":136,"column":10},"end":{"line":136,"column":40}},{"start":{"line":136,"column":44},"end":{"line":136,"column":74}}]},"35":{"line":145,"type":"if","locations":[{"start":{"line":145,"column":11},"end":{"line":145,"column":11}},{"start":{"line":145,"column":11},"end":{"line":145,"column":11}}]},"36":{"line":145,"type":"binary-expr","locations":[{"start":{"line":145,"column":15},"end":{"line":145,"column":41}},{"start":{"line":145,"column":45},"end":{"line":145,"column":71}}]},"37":{"line":146,"type":"if","locations":[{"start":{"line":146,"column":8},"end":{"line":146,"column":8}},{"start":{"line":146,"column":8},"end":{"line":146,"column":8}}]},"38":{"line":147,"type":"if","locations":[{"start":{"line":147,"column":8},"end":{"line":147,"column":8}},{"start":{"line":147,"column":8},"end":{"line":147,"column":8}}]},"39":{"line":148,"type":"if","locations":[{"start":{"line":148,"column":8},"end":{"line":148,"column":8}},{"start":{"line":148,"column":8},"end":{"line":148,"column":8}}]},"40":{"line":148,"type":"binary-expr","locations":[{"start":{"line":148,"column":12},"end":{"line":148,"column":38}},{"start":{"line":148,"column":42},"end":{"line":148,"column":68}},{"start":{"line":148,"column":72},"end":{"line":148,"column":94}},{"start":{"line":149,"column":10},"end":{"line":149,"column":32}},{"start":{"line":149,"column":36},"end":{"line":149,"column":58}},{"start":{"line":149,"column":62},"end":{"line":149,"column":83}},{"start":{"line":150,"column":10},"end":{"line":150,"column":31}},{"start":{"line":150,"column":35},"end":{"line":150,"column":56}}]},"41":{"line":159,"type":"if","locations":[{"start":{"line":159,"column":11},"end":{"line":159,"column":11}},{"start":{"line":159,"column":11},"end":{"line":159,"column":11}}]},"42":{"line":159,"type":"binary-expr","locations":[{"start":{"line":159,"column":15},"end":{"line":159,"column":41}},{"start":{"line":159,"column":45},"end":{"line":159,"column":71}}]},"43":{"line":160,"type":"if","locations":[{"start":{"line":160,"column":8},"end":{"line":160,"column":8}},{"start":{"line":160,"column":8},"end":{"line":160,"column":8}}]},"44":{"line":161,"type":"if","locations":[{"start":{"line":161,"column":8},"end":{"line":161,"column":8}},{"start":{"line":161,"column":8},"end":{"line":161,"column":8}}]},"45":{"line":162,"type":"if","locations":[{"start":{"line":162,"column":8},"end":{"line":162,"column":8}},{"start":{"line":162,"column":8},"end":{"line":162,"column":8}}]},"46":{"line":162,"type":"binary-expr","locations":[{"start":{"line":162,"column":12},"end":{"line":162,"column":41}},{"start":{"line":162,"column":45},"end":{"line":162,"column":74}},{"start":{"line":163,"column":10},"end":{"line":163,"column":39}},{"start":{"line":163,"column":43},"end":{"line":163,"column":72}}]},"47":{"line":172,"type":"if","locations":[{"start":{"line":172,"column":11},"end":{"line":172,"column":11}},{"start":{"line":172,"column":11},"end":{"line":172,"column":11}}]},"48":{"line":172,"type":"binary-expr","locations":[{"start":{"line":172,"column":14},"end":{"line":172,"column":40}},{"start":{"line":172,"column":44},"end":{"line":172,"column":70}}]},"49":{"line":173,"type":"if","locations":[{"start":{"line":173,"column":8},"end":{"line":173,"column":8}},{"start":{"line":173,"column":8},"end":{"line":173,"column":8}}]},"50":{"line":174,"type":"if","locations":[{"start":{"line":174,"column":8},"end":{"line":174,"column":8}},{"start":{"line":174,"column":8},"end":{"line":174,"column":8}}]},"51":{"line":175,"type":"if","locations":[{"start":{"line":175,"column":8},"end":{"line":175,"column":8}},{"start":{"line":175,"column":8},"end":{"line":175,"column":8}}]},"52":{"line":175,"type":"binary-expr","locations":[{"start":{"line":175,"column":12},"end":{"line":175,"column":41}},{"start":{"line":175,"column":45},"end":{"line":175,"column":74}},{"start":{"line":175,"column":78},"end":{"line":175,"column":107}},{"start":{"line":176,"column":10},"end":{"line":176,"column":39}},{"start":{"line":176,"column":43},"end":{"line":176,"column":72}},{"start":{"line":176,"column":76},"end":{"line":176,"column":105}}]},"53":{"line":189,"type":"if","locations":[{"start":{"line":189,"column":6},"end":{"line":189,"column":6}},{"start":{"line":189,"column":6},"end":{"line":189,"column":6}}]},"54":{"line":199,"type":"if","locations":[{"start":{"line":199,"column":2},"end":{"line":199,"column":2}},{"start":{"line":199,"column":2},"end":{"line":199,"column":2}}]},"55":{"line":202,"type":"binary-expr","locations":[{"start":{"line":202,"column":9},"end":{"line":202,"column":33}},{"start":{"line":202,"column":37},"end":{"line":202,"column":61}}]},"56":{"line":207,"type":"if","locations":[{"start":{"line":207,"column":2},"end":{"line":207,"column":2}},{"start":{"line":207,"column":2},"end":{"line":207,"column":2}}]},"57":{"line":210,"type":"binary-expr","locations":[{"start":{"line":210,"column":9},"end":{"line":210,"column":33}},{"start":{"line":210,"column":37},"end":{"line":210,"column":61}},{"start":{"line":210,"column":65},"end":{"line":210,"column":89}}]},"58":{"line":214,"type":"if","locations":[{"start":{"line":214,"column":2},"end":{"line":214,"column":2}},{"start":{"line":214,"column":2},"end":{"line":214,"column":2}}]},"59":{"line":217,"type":"binary-expr","locations":[{"start":{"line":217,"column":9},"end":{"line":217,"column":33}},{"start":{"line":217,"column":37},"end":{"line":217,"column":61}},{"start":{"line":217,"column":65},"end":{"line":217,"column":89}},{"start":{"line":218,"column":4},"end":{"line":218,"column":28}},{"start":{"line":218,"column":32},"end":{"line":218,"column":56}},{"start":{"line":218,"column":60},"end":{"line":218,"column":84}}]},"60":{"line":233,"type":"if","locations":[{"start":{"line":233,"column":2},"end":{"line":233,"column":2}},{"start":{"line":233,"column":2},"end":{"line":233,"column":2}}]},"61":{"line":233,"type":"binary-expr","locations":[{"start":{"line":233,"column":6},"end":{"line":233,"column":22}},{"start":{"line":233,"column":26},"end":{"line":233,"column":53}},{"start":{"line":233,"column":57},"end":{"line":233,"column":84}}]},"62":{"line":235,"type":"if","locations":[{"start":{"line":235,"column":6},"end":{"line":235,"column":6}},{"start":{"line":235,"column":6},"end":{"line":235,"column":6}}]},"63":{"line":235,"type":"binary-expr","locations":[{"start":{"line":235,"column":10},"end":{"line":235,"column":26}},{"start":{"line":235,"column":30},"end":{"line":235,"column":57}},{"start":{"line":235,"column":61},"end":{"line":235,"column":88}}]},"64":{"line":240,"type":"if","locations":[{"start":{"line":240,"column":7},"end":{"line":240,"column":7}},{"start":{"line":240,"column":7},"end":{"line":240,"column":7}}]},"65":{"line":240,"type":"binary-expr","locations":[{"start":{"line":240,"column":11},"end":{"line":240,"column":27}},{"start":{"line":240,"column":31},"end":{"line":240,"column":58}},{"start":{"line":240,"column":62},"end":{"line":240,"column":89}},{"start":{"line":240,"column":93},"end":{"line":240,"column":120}}]},"66":{"line":242,"type":"if","locations":[{"start":{"line":242,"column":6},"end":{"line":242,"column":6}},{"start":{"line":242,"column":6},"end":{"line":242,"column":6}}]},"67":{"line":242,"type":"binary-expr","locations":[{"start":{"line":242,"column":10},"end":{"line":242,"column":26}},{"start":{"line":242,"column":30},"end":{"line":242,"column":57}},{"start":{"line":242,"column":61},"end":{"line":242,"column":88}},{"start":{"line":242,"column":92},"end":{"line":242,"column":119}}]},"68":{"line":289,"type":"if","locations":[{"start":{"line":289,"column":6},"end":{"line":289,"column":6}},{"start":{"line":289,"column":6},"end":{"line":289,"column":6}}]},"69":{"line":292,"type":"if","locations":[{"start":{"line":292,"column":11},"end":{"line":292,"column":11}},{"start":{"line":292,"column":11},"end":{"line":292,"column":11}}]}},"code":["'use strict';","","function factory (type, config, load, typed) {","  var matrix = load(require('../../type/matrix/function/matrix'));","","  /**","    * Calculates:","    *    The eucledian distance between two points in 2 and 3 dimensional spaces.","    *    Distance between point and a line in 2 and 3 dimensional spaces.","    *    Pairwise distance between a set of 2D or 3D points","    * NOTE:","    *    When substituting coefficients of a line(a, b and c), use ax + by + c = 0 instead of ax + by = c","    *    For parametric equation of a 3D line, x0, y0, z0, a, b, c are from: (x−x0, y−y0, z−z0) = t(a, b, c)","    *","    * Syntax:","    *    math.distance([x1, y1], [x2, y2])","    *-   math.distance({pointOneX: 4, pointOneY: 5}, {pointTwoX: 2, pointTwoY: 7})","    *    math.distance([x1, y1, z1], [x2, y2, z2])","    *    math.distance({pointOneX: 4, pointOneY: 5, pointOneZ: 8}, {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})","    *    math.distance([[A], [B], [C]...])","    *    math.distance([x1, y1], [LinePtX1, LinePtY1], [LinePtX2, LinePtY2])","    *    math.distance({pointX: 1, pointY: 4}, {lineOnePtX: 6, lineOnePtY: 3}, {lineTwoPtX: 2, lineTwoPtY: 8})","    *    math.distance([x1, y1, z1], [LinePtX1, LinePtY1, LinePtZ1], [LinePtX2, LinePtY2, LinePtZ2])","    *    math.distance({pointX: 1, pointY: 4, pointZ: 7}, {lineOnePtX: 6, lineOnePtY: 3, lineOnePtZ: 4}, {lineTwoPtX: 2, lineTwoPtY: 8, lineTwoPtZ: 5})","    *    math.distance([x1, y1], [xCoeffLine, yCoeffLine, constant])","    *    math.distance({pointX: 10, pointY: 10}, {xCoeffLine: 8, yCoeffLine: 1, constant: 3})","    *    math.distance([x1, y1, z1], [x0, y0, z0, a-tCoeff, b-tCoeff, c-tCoeff]) point and parametric equation of 3D line","    *    math.distance([x, y, z], [x0, y0, z0, a, b, c])","    *    math.distance({pointX: 2, pointY: 5, pointZ: 9}, {x0: 4, y0: 6, z0: 3, a: 4, b: 2, c: 0})","    *","    * Examples:","    *    math.distance([0,0], [4,4])                     // Returns 5.6569","    *    math.distance(","    *     {pointOneX: 0, pointOneY: 0},","    *     {pointTwoX: 10, pointTwoY: 10})                // Returns 14.142135623730951","    *    math.distance([1, 0, 1], [4, -2, 2])            // Returns 3.74166","    *    math.distance(","    *     {pointOneX: 4, pointOneY: 5, pointOneZ: 8},","    *     {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})    // Returns 3","    *    math.distance([[1, 2], [1, 2], [1, 3]])         // Returns [0, 1, 1]","    *    math.distance([[1,2,4], [1,2,6], [8,1,3]])      // Returns [2, 7.14142842854285, 7.681145747868608]","    *    math.distance([10, 10], [8, 1, 3])              // Returns 11.535230316796387","    *    math.distance([10, 10], [2, 3], [-8, 0])        // Returns 8.759953130362847","    *    math.distance(","    *     {pointX: 1, pointY: 4},","    *     {lineOnePtX: 6, lineOnePtY: 3},","    *     {lineTwoPtX: 2, lineTwoPtY: 8})                // Returns 2.720549372624744","    *    math.distance([2, 3, 1], [1, 1, 2, 5, 0, 1])    // Returns 2.3204774044612857","    *    math.distance(","    *     {pointX: 2, pointY: 3, pointZ: 1},","    *     {x0: 1, y0: 1, z0: 2, a: 5, b: 0, c: 1}        // Returns 2.3204774044612857","    *","    * @param {Array | Matrix | Object} x    Co-ordinates of first point","    * @param {Array | Matrix | Object} y    Co-ordinates of second point","    * @return {Number | BigNumber} Returns the distance from two/three points","  */","","  var distance = typed('distance', {","    'Array, Array, Array': function(x, y, z){","      // Point to Line 2D; (x=Point, y=LinePoint1, z=LinePoint2)","      if (x.length == 2 && y.length == 2 && z.length == 2){","        if (!_2d(x)) { throw new TypeError('Array with 2 numbers expected for first argument'); }","        if (!_2d(y)) { throw new TypeError('Array with 2 numbers expected for second argument'); }","        if (!_2d(z)) { throw new TypeError('Array with 2 numbers expected for third argument'); }","        var m = (z[1]-z[0])/(y[1]-y[0]);","        var xCoeff = m*m*y[0];","        var yCoeff = -1*(m*y[0]);","        var constant = x[1];","","        return _distancePointLine2D(x[0], x[1], xCoeff, yCoeff, constant);","      }","      else{","        throw new TypeError('Invalid Arguments: Try again');","      }","    },","    'Object, Object, Object': function(x, y, z){","      if (Object.keys(x).length == 2 && Object.keys(y).length == 2 && Object.keys(z).length == 2){","        if (!_2d(x)) { throw new TypeError('Values of pointX and pointY should be numbers'); }","        if (!_2d(y)) { throw new TypeError('Values of lineOnePtX and lineOnePtY should be numbers'); }","        if (!_2d(z)) { throw new TypeError('Values of lineTwoPtX and lineTwoPtY should be numbers'); }","        if (x.hasOwnProperty('pointX') && x.hasOwnProperty('pointY') && y.hasOwnProperty('lineOnePtX') &&","          y.hasOwnProperty('lineOnePtY') && z.hasOwnProperty('lineTwoPtX') && z.hasOwnProperty('lineTwoPtY')){","          var m = (z.lineTwoPtY-z.lineTwoPtX)/(y.lineOnePtY-y.lineOnePtX);","          var xCoeff = m*m*y.lineOnePtX;","          var yCoeff = -1*(m*y.lineOnePtX);","          var constant = x.pointX;","","          return _distancePointLine2D(x.pointX, x.pointY, xCoeff, yCoeff, constant);","        }","        else{","          throw new TypeError('Key names do not match');","        }","      }","      else{","        throw new TypeError('Invalid Arguments: Try again');","      }","    },","    'Array, Array': function(x, y){","      // Point to Line 2D; (x=[pointX, pointY], y=[x-coeff, y-coeff, const])","      if (x.length == 2 && y.length == 3){","        if (!_2d(x)) { throw new TypeError('Array with 2 numbers expected for first argument'); }","        if (!_3d(y)) { throw new TypeError('Array with 3 numbers expected for second argument'); }","","        return _distancePointLine2D(x[0], x[1], y[0], y[1], y[2]);","      }","      // Point to Line 3D","      else if (x.length == 3 && y.length == 6){","        if (!_3d(x)) { throw new TypeError('Array with 3 numbers expected for first argument'); }","        if (!_parametricLine(y)) { throw new TypeError('Array with 6 numbers expected for second argument'); }","","        return _distancePointLine3D(x[0], x[1], x[2], y[0], y[1], y[2], y[3], y[4], y[5]);","      }","      // Point to Point 2D","      else if (x.length == 2 && y.length == 2){","        if (!_2d(x)) { throw new TypeError('Array with 2 numbers expected for first argument'); }","        if (!_2d(y)) { throw new TypeError('Array with 2 numbers expected for second argument'); }","","        return _distance2d(x[0], x[1], y[0], y[1]);","      }","      // Point to Point 3D","      else if(x.length == 3 && y.length == 3){","        if (!_3d(x)) { throw new TypeError('Array with 3 numbers expected for first argument'); }","        if (!_3d(y)) { throw new TypeError('Array with 3 numbers expected for second argument'); }","","        return _distance3d(x[0], x[1], x[2], y[0], y[1], y[2]);","      }","      else{","        throw new TypeError('Invalid Arguments: Try again');","      }","    },","    'Object, Object': function(x, y){","      if (Object.keys(x).length == 2 && Object.keys(y).length == 3){","        if (!_2d(x)) { throw new TypeError('Values of pointX and pointY should be numbers'); }","        if (!_3d(y)) { throw new TypeError('Values of xCoeffLine, yCoeffLine and constant should be numbers'); }","        if (x.hasOwnProperty('pointX') && x.hasOwnProperty('pointY') && y.hasOwnProperty('xCoeffLine') &&","          y.hasOwnProperty('yCoeffLine') && y.hasOwnProperty('yCoeffLine')){","","          return _distancePointLine2D(x.pointX, x.pointY, y.xCoeffLine, y.yCoeffLine, y.constant);","        }","        else{","          throw new TypeError('Key names do not match');","        }","      }","      // Point to Line 3D","      else if (Object.keys(x).length == 3 && Object.keys(y).length == 6){","        if (!_3d(x)) { throw new TypeError('Values of pointX, pointY and pointZ should be numbers'); }","        if (!_parametricLine(y)) { throw new TypeError('Values of x0, y0, z0, a, b and c should be numbers'); }","        if (x.hasOwnProperty('pointX') && x.hasOwnProperty('pointY') && y.hasOwnProperty('x0') &&","          y.hasOwnProperty('y0') && y.hasOwnProperty('z0') && y.hasOwnProperty('a') &&","          y.hasOwnProperty('b') && y.hasOwnProperty('c')){","","          return _distancePointLine3D(x.pointX, x.pointY, x.pointZ, y.x0, y.y0, y.z0, y.a, y.b, y.c);","        }","        else{","          throw new TypeError('Key names do not match');","        }","      }","      // Point to Point 2D","      else if (Object.keys(x).length == 2 && Object.keys(y).length == 2){","        if (!_2d(x)) { throw new TypeError('Values of pointOneX and pointOneY should be numbers'); }","        if (!_2d(y)) { throw new TypeError('Values of pointTwoX and pointTwoY should be numbers'); }","        if (x.hasOwnProperty('pointOneX') && x.hasOwnProperty('pointOneY') &&","          y.hasOwnProperty('pointTwoX') && y.hasOwnProperty('pointTwoY')){","","          return _distance2d(x.pointOneX, x.pointOneY, y.pointTwoX, y.pointTwoY);","        }","        else{","          throw new TypeError('Key names do not match');","        }","      }","      // Point to Point 3D","      else if(Object.keys(x).length == 3 && Object.keys(y).length == 3){","        if (!_3d(x)) { throw new TypeError('Values of pointOneX, pointOneY and pointOneZ should be numbers'); }","        if (!_3d(y)) { throw new TypeError('Values of pointTwoX, pointTwoY and pointTwoZ should be numbers'); }","        if (x.hasOwnProperty('pointOneX') && x.hasOwnProperty('pointOneY') && x.hasOwnProperty('pointOneZ') &&","          y.hasOwnProperty('pointTwoX') && y.hasOwnProperty('pointTwoY') && y.hasOwnProperty('pointTwoZ')){","","          return _distance3d(x.pointOneX, x.pointOneY, x.pointOneZ, y.pointTwoX, y.pointTwoY, y.pointTwoZ);","        }","        else {","          throw new TypeError('Key names do not match');","        }","      }","      else{","        throw new TypeError('Invalid Arguments: Try again');","      }","    },","    'Array': function(arr){","      if (!_pairwise(arr)) { throw new TypeError('Incorrect array format entered for pairwise distance calculation'); }","","      return _distancePairwise(arr);","    }","  });","  return distance;","}","","function _2d(a){","  // checks if the number of arguments are correct in count and are valid (should be numbers)","  if (a.constructor !== Array){","    a = _objectToArray(a);","  }","  return typeof a[0] === 'number' && typeof a[1] === 'number';","}","","function _3d(a){","  // checks if the number of arguments are correct in count and are valid (should be numbers)","  if (a.constructor !== Array){","    a = _objectToArray(a);","  }","  return typeof a[0] === 'number' && typeof a[1] === 'number' && typeof a[2] === 'number';","}","","function _parametricLine(a){","  if (a.constructor !== Array){","    a = _objectToArray(a);","  }","  return typeof a[0] === 'number' && typeof a[1] === 'number' && typeof a[2] === 'number' &&","    typeof a[3] === 'number' && typeof a[4] === 'number' && typeof a[5] === 'number';","","}","","function _objectToArray(o){","  var keys = Object.keys(o);","  var a = [];","  for (var i = 0; i < keys.length; i++) {","    a.push(o[keys[i]]);","  }","  return a;","}","","function _pairwise(a){","  //checks for valid arguments passed to _distancePairwise(Array)","  if (a[0].length == 2 && typeof a[0][0] === 'number' && typeof a[0][1] === 'number'){","    for(var i in a){","      if (a[i].length != 2 || typeof a[i][0] !== 'number' || typeof a[i][1] !== 'number'){","        return false;","      }","    }","  }","  else if (a[0].length == 3 && typeof a[0][0] === 'number' && typeof a[0][1] === 'number' && typeof a[0][2] === 'number'){","    for(var i in a){","      if (a[i].length != 3 || typeof a[i][0] !== 'number' || typeof a[i][1] !== 'number' || typeof a[i][2] !== 'number'){","        return false;","      }","    }","  }","  else{","    return false;","  }","  return true;","}","","function _distancePointLine2D(x, y, a, b, c){","  var num =  Math.abs(a*x + b*y + c);","  var den = Math.pow((a*a + b*b), 0.5);","  var result = (num/den);","  return result;","}","","function _distancePointLine3D(x, y, z, x0, y0, z0, a, b, c){","  var num = [((y0-y)*(c))-((z0-z)*(b)), ((z0-z)*(a))-((x0-x)*(c)), ((x0-x)*(b))-((y0-y)*(a))]","  num = Math.pow(num[0]*num[0] + num[1]*num[1] + num[2]*num[2], 0.5);","  var den = Math.pow(a*a + b*b + c*c, 0.5);","  var result = num/den;","  return result;","}","","function _distance2d(x1, y1, x2, y2){","  var yDiff = y2 - y1;","  var xDiff = x2 - x1;","  var radicant = yDiff * yDiff + xDiff * xDiff;","  var result = Math.pow(radicant, 0.5);","  return result;","}","","function _distance3d(x1, y1, z1, x2, y2, z2){","  var zDiff = z2 - z1;","  var yDiff = y2 - y1;","  var xDiff = x2 - x1;","  var radicant = zDiff * zDiff + yDiff * yDiff + xDiff * xDiff;","  var result = Math.pow(radicant, 0.5);","  return result;","}","","function _distancePairwise(a){","  var result = [];","  for(var i = 0; i < a.length-1; i++){","    for(var j = i+1; j < a.length; j++){","      if (a[0].length == 2){","        result.push(_distance2d(a[i][0], a[i][1], a[j][0], a[j][1]));","      }","      else if (a[0].length == 3){","        result.push(_distance3d(a[i][0], a[i][1], a[i][2], a[j][0], a[j][1], a[j][2]));","      }","    }","  }","  return result;","}","","exports.name = 'distance';","exports.factory = factory;",""],"l":{"3":1,"4":0,"58":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"70":0,"73":0,"77":0,"78":0,"79":0,"80":0,"81":0,"83":0,"84":0,"85":0,"86":0,"88":0,"91":0,"95":0,"100":0,"101":0,"102":0,"104":0,"107":0,"108":0,"109":0,"111":0,"114":0,"115":0,"116":0,"118":0,"121":0,"122":0,"123":0,"125":0,"128":0,"132":0,"133":0,"134":0,"135":0,"138":0,"141":0,"145":0,"146":0,"147":0,"148":0,"152":0,"155":0,"159":0,"160":0,"161":0,"162":0,"165":0,"168":0,"172":0,"173":0,"174":0,"175":0,"178":0,"181":0,"185":0,"189":0,"191":0,"194":0,"197":1,"199":0,"200":0,"202":0,"205":1,"207":0,"208":0,"210":0,"213":1,"214":0,"215":0,"217":0,"222":1,"223":0,"224":0,"225":0,"226":0,"228":0,"231":1,"233":0,"234":0,"235":0,"236":0,"240":0,"241":0,"242":0,"243":0,"248":0,"250":0,"253":1,"254":0,"255":0,"256":0,"257":0,"260":1,"261":0,"262":0,"263":0,"264":0,"265":0,"268":1,"269":0,"270":0,"271":0,"272":0,"273":0,"276":1,"277":0,"278":0,"279":0,"280":0,"281":0,"282":0,"285":1,"286":0,"287":0,"288":0,"289":0,"290":0,"292":0,"293":0,"297":0,"300":1,"301":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/logical/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/logical/index.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":6,"column":2}}},"branchMap":{},"code":["module.exports = [","  require('./and'),","  require('./not'),","  require('./or'),","  require('./xor')","];",""],"l":{"1":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/logical/and.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/logical/and.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":1,"58":1},"b":{"1":[0,0],"2":[0,0,0,0],"3":[0,0,0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"fnMap":{"1":{"name":"factory","line":3,"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}}},"2":{"name":"(anonymous_2)","line":47,"loc":{"start":{"line":47,"column":22},"end":{"line":47,"column":38}}},"3":{"name":"(anonymous_3)","line":51,"loc":{"start":{"line":51,"column":24},"end":{"line":51,"column":40}}},"4":{"name":"(anonymous_4)","line":55,"loc":{"start":{"line":55,"column":28},"end":{"line":55,"column":44}}},"5":{"name":"(anonymous_5)","line":59,"loc":{"start":{"line":59,"column":18},"end":{"line":59,"column":34}}},"6":{"name":"(anonymous_6)","line":63,"loc":{"start":{"line":63,"column":22},"end":{"line":63,"column":38}}},"7":{"name":"(anonymous_7)","line":97,"loc":{"start":{"line":97,"column":20},"end":{"line":97,"column":36}}},"8":{"name":"(anonymous_8)","line":102,"loc":{"start":{"line":102,"column":21},"end":{"line":102,"column":37}}},"9":{"name":"(anonymous_9)","line":107,"loc":{"start":{"line":107,"column":21},"end":{"line":107,"column":37}}},"10":{"name":"(anonymous_10)","line":112,"loc":{"start":{"line":112,"column":19},"end":{"line":112,"column":35}}},"11":{"name":"(anonymous_11)","line":132,"loc":{"start":{"line":132,"column":19},"end":{"line":132,"column":35}}},"12":{"name":"(anonymous_12)","line":152,"loc":{"start":{"line":152,"column":18},"end":{"line":152,"column":34}}},"13":{"name":"(anonymous_13)","line":157,"loc":{"start":{"line":157,"column":18},"end":{"line":157,"column":34}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":168,"column":1}},"2":{"start":{"line":4,"column":2},"end":{"line":4,"column":43}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":66}},"4":{"start":{"line":7,"column":2},"end":{"line":7,"column":47}},"5":{"start":{"line":8,"column":2},"end":{"line":8,"column":35}},"6":{"start":{"line":9,"column":2},"end":{"line":9,"column":48}},"7":{"start":{"line":11,"column":2},"end":{"line":11,"column":73}},"8":{"start":{"line":12,"column":2},"end":{"line":12,"column":73}},"9":{"start":{"line":13,"column":2},"end":{"line":13,"column":73}},"10":{"start":{"line":14,"column":2},"end":{"line":14,"column":73}},"11":{"start":{"line":15,"column":2},"end":{"line":15,"column":73}},"12":{"start":{"line":45,"column":2},"end":{"line":161,"column":5}},"13":{"start":{"line":48,"column":6},"end":{"line":48,"column":24}},"14":{"start":{"line":52,"column":6},"end":{"line":52,"column":70}},"15":{"start":{"line":56,"column":6},"end":{"line":56,"column":68}},"16":{"start":{"line":60,"column":6},"end":{"line":60,"column":35}},"17":{"start":{"line":65,"column":6},"end":{"line":65,"column":12}},"18":{"start":{"line":68,"column":6},"end":{"line":93,"column":7}},"19":{"start":{"line":70,"column":10},"end":{"line":79,"column":11}},"20":{"start":{"line":73,"column":14},"end":{"line":73,"column":48}},"21":{"start":{"line":74,"column":14},"end":{"line":74,"column":20}},"22":{"start":{"line":77,"column":14},"end":{"line":77,"column":47}},"23":{"start":{"line":78,"column":14},"end":{"line":78,"column":20}},"24":{"start":{"line":80,"column":10},"end":{"line":80,"column":16}},"25":{"start":{"line":82,"column":10},"end":{"line":91,"column":11}},"26":{"start":{"line":85,"column":14},"end":{"line":85,"column":48}},"27":{"start":{"line":86,"column":14},"end":{"line":86,"column":20}},"28":{"start":{"line":89,"column":14},"end":{"line":89,"column":41}},"29":{"start":{"line":90,"column":14},"end":{"line":90,"column":20}},"30":{"start":{"line":92,"column":10},"end":{"line":92,"column":16}},"31":{"start":{"line":94,"column":6},"end":{"line":94,"column":15}},"32":{"start":{"line":99,"column":6},"end":{"line":99,"column":49}},"33":{"start":{"line":104,"column":6},"end":{"line":104,"column":31}},"34":{"start":{"line":109,"column":6},"end":{"line":109,"column":31}},"35":{"start":{"line":114,"column":6},"end":{"line":117,"column":7}},"36":{"start":{"line":116,"column":8},"end":{"line":116,"column":44}},"37":{"start":{"line":119,"column":6},"end":{"line":119,"column":12}},"38":{"start":{"line":121,"column":6},"end":{"line":128,"column":7}},"39":{"start":{"line":123,"column":10},"end":{"line":123,"column":44}},"40":{"start":{"line":124,"column":10},"end":{"line":124,"column":16}},"41":{"start":{"line":126,"column":10},"end":{"line":126,"column":44}},"42":{"start":{"line":127,"column":10},"end":{"line":127,"column":16}},"43":{"start":{"line":129,"column":6},"end":{"line":129,"column":15}},"44":{"start":{"line":134,"column":6},"end":{"line":137,"column":7}},"45":{"start":{"line":136,"column":8},"end":{"line":136,"column":44}},"46":{"start":{"line":139,"column":6},"end":{"line":139,"column":12}},"47":{"start":{"line":141,"column":6},"end":{"line":148,"column":7}},"48":{"start":{"line":143,"column":10},"end":{"line":143,"column":43}},"49":{"start":{"line":144,"column":10},"end":{"line":144,"column":16}},"50":{"start":{"line":146,"column":10},"end":{"line":146,"column":43}},"51":{"start":{"line":147,"column":10},"end":{"line":147,"column":16}},"52":{"start":{"line":149,"column":6},"end":{"line":149,"column":15}},"53":{"start":{"line":154,"column":6},"end":{"line":154,"column":41}},"54":{"start":{"line":159,"column":6},"end":{"line":159,"column":41}},"55":{"start":{"line":163,"column":2},"end":{"line":165,"column":4}},"56":{"start":{"line":167,"column":2},"end":{"line":167,"column":13}},"57":{"start":{"line":170,"column":0},"end":{"line":170,"column":21}},"58":{"start":{"line":171,"column":0},"end":{"line":171,"column":26}}},"branchMap":{"1":{"line":48,"type":"binary-expr","locations":[{"start":{"line":48,"column":16},"end":{"line":48,"column":17}},{"start":{"line":48,"column":21},"end":{"line":48,"column":22}}]},"2":{"line":52,"type":"binary-expr","locations":[{"start":{"line":52,"column":14},"end":{"line":52,"column":24}},{"start":{"line":52,"column":28},"end":{"line":52,"column":38}},{"start":{"line":52,"column":44},"end":{"line":52,"column":54}},{"start":{"line":52,"column":58},"end":{"line":52,"column":68}}]},"3":{"line":56,"type":"binary-expr","locations":[{"start":{"line":56,"column":13},"end":{"line":56,"column":24}},{"start":{"line":56,"column":28},"end":{"line":56,"column":39}},{"start":{"line":56,"column":43},"end":{"line":56,"column":53}},{"start":{"line":56,"column":57},"end":{"line":56,"column":67}}]},"4":{"line":68,"type":"switch","locations":[{"start":{"line":69,"column":8},"end":{"line":80,"column":16}},{"start":{"line":81,"column":8},"end":{"line":92,"column":16}}]},"5":{"line":70,"type":"switch","locations":[{"start":{"line":71,"column":12},"end":{"line":74,"column":20}},{"start":{"line":75,"column":12},"end":{"line":78,"column":20}}]},"6":{"line":82,"type":"switch","locations":[{"start":{"line":83,"column":12},"end":{"line":86,"column":20}},{"start":{"line":87,"column":12},"end":{"line":90,"column":20}}]},"7":{"line":114,"type":"if","locations":[{"start":{"line":114,"column":6},"end":{"line":114,"column":6}},{"start":{"line":114,"column":6},"end":{"line":114,"column":6}}]},"8":{"line":121,"type":"switch","locations":[{"start":{"line":122,"column":8},"end":{"line":124,"column":16}},{"start":{"line":125,"column":8},"end":{"line":127,"column":16}}]},"9":{"line":134,"type":"if","locations":[{"start":{"line":134,"column":6},"end":{"line":134,"column":6}},{"start":{"line":134,"column":6},"end":{"line":134,"column":6}}]},"10":{"line":141,"type":"switch","locations":[{"start":{"line":142,"column":8},"end":{"line":144,"column":16}},{"start":{"line":145,"column":8},"end":{"line":147,"column":16}}]}},"code":["'use strict';","","function factory (type, config, load, typed) {","  var latex = require('../../utils/latex');","","  var matrix = load(require('../../type/matrix/function/matrix'));","  var zeros = load(require('../matrix/zeros'));","  var not = load(require('./not'));","  var isZero = load(require('../utils/isZero'));","","  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));","  var algorithm06 = load(require('../../type/matrix/utils/algorithm06'));","  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));","  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));","  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));","","  /**","   * Logical `and`. Test whether two values are both defined with a nonzero/nonempty value.","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.and(x, y)","   *","   * Examples:","   *","   *    math.and(2, 4);   // returns true","   *","   *    a = [2, 0, 0];","   *    b = [3, 7, 0];","   *    c = 0;","   *","   *    math.and(a, b);   // returns [true, false, false]","   *    math.and(a, c);   // returns [false, false, false]","   *","   * See also:","   *","   *    not, or, xor","   *","   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check","   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check","   * @return {boolean | Array | Matrix}","   *            Returns true when both inputs are defined with a nonzero/nonempty value.","   */","  var and = typed('and', {","","    'number, number': function (x, y) {","      return !!(x && y);","    },","","    'Complex, Complex': function (x, y) {","      return (x.re !== 0 || x.im !== 0) && (y.re !== 0 || y.im !== 0);","    },","","    'BigNumber, BigNumber': function (x, y) {","      return !x.isZero() && !y.isZero() && !x.isNaN() && !y.isNaN();","    },","","    'Unit, Unit': function (x, y) {","      return and(x.value, y.value);","    },","    ","    'Matrix, Matrix': function (x, y) {","      // result","      var c;","","      // process matrix storage","      switch (x.storage()) {","        case 'sparse':","          switch (y.storage()) {","            case 'sparse':","              // sparse & sparse","              c = algorithm06(x, y, and, false);","              break;","            default:","              // sparse & dense","              c = algorithm02(y, x, and, true);","              break;","          }","          break;","        default:","          switch (y.storage()) {","            case 'sparse':","              // dense & sparse","              c = algorithm02(x, y, and, false);","              break;","            default:","              // dense & dense","              c = algorithm13(x, y, and);","              break;","          }","          break;","      }","      return c;","    },","","    'Array, Array': function (x, y) {","      // use matrix implementation","      return and(matrix(x), matrix(y)).valueOf();","    },","","    'Array, Matrix': function (x, y) {","      // use matrix implementation","      return and(matrix(x), y);","    },","","    'Matrix, Array': function (x, y) {","      // use matrix implementation","      return and(x, matrix(y));","    },","","    'Matrix, any': function (x, y) {","      // check scalar","      if (not(y)) {","        // return zero matrix","        return zeros(x.size(), x.storage());","      }","      // result","      var c;","      // check storage format","      switch (x.storage()) {","        case 'sparse':","          c = algorithm11(x, y, and, false);","          break;","        default:","          c = algorithm14(x, y, and, false);","          break;","      }","      return c;","    },","","    'any, Matrix': function (x, y) {","      // check scalar","      if (not(x)) {","        // return zero matrix","        return zeros(x.size(), x.storage());","      }","      // result","      var c;","      // check storage format","      switch (y.storage()) {","        case 'sparse':","          c = algorithm11(y, x, and, true);","          break;","        default:","          c = algorithm14(y, x, and, true);","          break;","      }","      return c;","    },","","    'Array, any': function (x, y) {","      // use matrix implementation","      return and(matrix(x), y).valueOf();","    },","","    'any, Array': function (x, y) {","      // use matrix implementation","      return and(x, matrix(y)).valueOf();","    }","  });","","  and.toTex = {","    2: '\\\\left(${args[0]}' + latex.operators['and'] + '${args[1]}\\\\right)'","  };","","  return and;","}","","exports.name = 'and';","exports.factory = factory;",""],"l":{"3":1,"4":0,"6":0,"7":0,"8":0,"9":0,"11":0,"12":0,"13":0,"14":0,"15":0,"45":0,"48":0,"52":0,"56":0,"60":0,"65":0,"68":0,"70":0,"73":0,"74":0,"77":0,"78":0,"80":0,"82":0,"85":0,"86":0,"89":0,"90":0,"92":0,"94":0,"99":0,"104":0,"109":0,"114":0,"116":0,"119":0,"121":0,"123":0,"124":0,"126":0,"127":0,"129":0,"134":0,"136":0,"139":0,"141":0,"143":0,"144":0,"146":0,"147":0,"149":0,"154":0,"159":0,"163":0,"167":0,"170":1,"171":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/logical/not.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/logical/not.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1,"13":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":34,"loc":{"start":{"line":34,"column":14},"end":{"line":34,"column":27}}},"3":{"name":"(anonymous_3)","line":38,"loc":{"start":{"line":38,"column":15},"end":{"line":38,"column":28}}},"4":{"name":"(anonymous_4)","line":42,"loc":{"start":{"line":42,"column":17},"end":{"line":42,"column":30}}},"5":{"name":"(anonymous_5)","line":46,"loc":{"start":{"line":46,"column":12},"end":{"line":46,"column":25}}},"6":{"name":"(anonymous_6)","line":50,"loc":{"start":{"line":50,"column":22},"end":{"line":50,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":60,"column":1}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":43}},"4":{"start":{"line":33,"column":2},"end":{"line":53,"column":5}},"5":{"start":{"line":35,"column":6},"end":{"line":35,"column":16}},"6":{"start":{"line":39,"column":6},"end":{"line":39,"column":38}},"7":{"start":{"line":43,"column":6},"end":{"line":43,"column":37}},"8":{"start":{"line":47,"column":6},"end":{"line":47,"column":26}},"9":{"start":{"line":51,"column":6},"end":{"line":51,"column":29}},"10":{"start":{"line":55,"column":2},"end":{"line":57,"column":4}},"11":{"start":{"line":59,"column":2},"end":{"line":59,"column":13}},"12":{"start":{"line":62,"column":0},"end":{"line":62,"column":21}},"13":{"start":{"line":63,"column":0},"end":{"line":63,"column":26}}},"branchMap":{"1":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":13},"end":{"line":39,"column":23}},{"start":{"line":39,"column":27},"end":{"line":39,"column":37}}]},"2":{"line":43,"type":"binary-expr","locations":[{"start":{"line":43,"column":13},"end":{"line":43,"column":23}},{"start":{"line":43,"column":27},"end":{"line":43,"column":36}}]}},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","","function factory (type, config, load, typed) {","  var latex = require('../../utils/latex');","","  /**","   * Logical `not`. Flips boolean value of a given parameter.","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.not(x)","   *","   * Examples:","   *","   *    math.not(2);      // returns false","   *    math.not(0);      // returns true","   *    math.not(true);   // returns false","   *","   *    a = [2, -7, 0];","   *    math.not(a);      // returns [false, false, true]","   *","   * See also:","   *","   *    and, or, xor","   *","   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check","   * @return {boolean | Array | Matrix}","   *            Returns true when input is a zero or empty value.","   */","  var not = typed('not', {","    'number': function (x) {","      return !x;","    },","","    'Complex': function (x) {","      return x.re === 0 && x.im === 0;","    },","","    'BigNumber': function (x) {","      return x.isZero() || x.isNaN();","    },","","    'Unit': function (x) {","      return not(x.value);","    },","","    'Array | Matrix': function (x) {","      return deepMap(x, not);","    }","  });","","  not.toTex = {","    1: latex.operators['not'] + '\\\\left(${args[0]}\\\\right)'","  };","","  return not;","}","","exports.name = 'not';","exports.factory = factory;",""],"l":{"3":1,"5":1,"6":0,"33":0,"35":0,"39":0,"43":0,"47":0,"51":0,"55":0,"59":0,"62":1,"63":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/logical/or.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/logical/or.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":1,"51":1},"b":{"1":[0,0],"2":[0,0,0,0],"3":[0,0,0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"fnMap":{"1":{"name":"factory","line":3,"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}}},"2":{"name":"(anonymous_2)","line":44,"loc":{"start":{"line":44,"column":22},"end":{"line":44,"column":38}}},"3":{"name":"(anonymous_3)","line":48,"loc":{"start":{"line":48,"column":24},"end":{"line":48,"column":40}}},"4":{"name":"(anonymous_4)","line":52,"loc":{"start":{"line":52,"column":28},"end":{"line":52,"column":44}}},"5":{"name":"(anonymous_5)","line":56,"loc":{"start":{"line":56,"column":18},"end":{"line":56,"column":34}}},"6":{"name":"(anonymous_6)","line":60,"loc":{"start":{"line":60,"column":22},"end":{"line":60,"column":38}}},"7":{"name":"(anonymous_7)","line":94,"loc":{"start":{"line":94,"column":20},"end":{"line":94,"column":36}}},"8":{"name":"(anonymous_8)","line":99,"loc":{"start":{"line":99,"column":21},"end":{"line":99,"column":37}}},"9":{"name":"(anonymous_9)","line":104,"loc":{"start":{"line":104,"column":21},"end":{"line":104,"column":37}}},"10":{"name":"(anonymous_10)","line":109,"loc":{"start":{"line":109,"column":19},"end":{"line":109,"column":35}}},"11":{"name":"(anonymous_11)","line":124,"loc":{"start":{"line":124,"column":19},"end":{"line":124,"column":35}}},"12":{"name":"(anonymous_12)","line":139,"loc":{"start":{"line":139,"column":18},"end":{"line":139,"column":34}}},"13":{"name":"(anonymous_13)","line":144,"loc":{"start":{"line":144,"column":18},"end":{"line":144,"column":34}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":155,"column":1}},"2":{"start":{"line":4,"column":2},"end":{"line":4,"column":43}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":66}},"4":{"start":{"line":8,"column":2},"end":{"line":8,"column":73}},"5":{"start":{"line":9,"column":2},"end":{"line":9,"column":73}},"6":{"start":{"line":10,"column":2},"end":{"line":10,"column":73}},"7":{"start":{"line":11,"column":2},"end":{"line":11,"column":73}},"8":{"start":{"line":12,"column":2},"end":{"line":12,"column":73}},"9":{"start":{"line":42,"column":2},"end":{"line":148,"column":5}},"10":{"start":{"line":45,"column":6},"end":{"line":45,"column":24}},"11":{"start":{"line":49,"column":6},"end":{"line":49,"column":70}},"12":{"start":{"line":53,"column":6},"end":{"line":53,"column":72}},"13":{"start":{"line":57,"column":6},"end":{"line":57,"column":34}},"14":{"start":{"line":62,"column":6},"end":{"line":62,"column":12}},"15":{"start":{"line":65,"column":6},"end":{"line":90,"column":7}},"16":{"start":{"line":67,"column":10},"end":{"line":76,"column":11}},"17":{"start":{"line":70,"column":14},"end":{"line":70,"column":40}},"18":{"start":{"line":71,"column":14},"end":{"line":71,"column":20}},"19":{"start":{"line":74,"column":14},"end":{"line":74,"column":46}},"20":{"start":{"line":75,"column":14},"end":{"line":75,"column":20}},"21":{"start":{"line":77,"column":10},"end":{"line":77,"column":16}},"22":{"start":{"line":79,"column":10},"end":{"line":88,"column":11}},"23":{"start":{"line":82,"column":14},"end":{"line":82,"column":47}},"24":{"start":{"line":83,"column":14},"end":{"line":83,"column":20}},"25":{"start":{"line":86,"column":14},"end":{"line":86,"column":40}},"26":{"start":{"line":87,"column":14},"end":{"line":87,"column":20}},"27":{"start":{"line":89,"column":10},"end":{"line":89,"column":16}},"28":{"start":{"line":91,"column":6},"end":{"line":91,"column":15}},"29":{"start":{"line":96,"column":6},"end":{"line":96,"column":48}},"30":{"start":{"line":101,"column":6},"end":{"line":101,"column":30}},"31":{"start":{"line":106,"column":6},"end":{"line":106,"column":30}},"32":{"start":{"line":111,"column":6},"end":{"line":111,"column":12}},"33":{"start":{"line":113,"column":6},"end":{"line":120,"column":7}},"34":{"start":{"line":115,"column":10},"end":{"line":115,"column":43}},"35":{"start":{"line":116,"column":10},"end":{"line":116,"column":16}},"36":{"start":{"line":118,"column":10},"end":{"line":118,"column":43}},"37":{"start":{"line":119,"column":10},"end":{"line":119,"column":16}},"38":{"start":{"line":121,"column":6},"end":{"line":121,"column":15}},"39":{"start":{"line":126,"column":6},"end":{"line":126,"column":12}},"40":{"start":{"line":128,"column":6},"end":{"line":135,"column":7}},"41":{"start":{"line":130,"column":10},"end":{"line":130,"column":42}},"42":{"start":{"line":131,"column":10},"end":{"line":131,"column":16}},"43":{"start":{"line":133,"column":10},"end":{"line":133,"column":42}},"44":{"start":{"line":134,"column":10},"end":{"line":134,"column":16}},"45":{"start":{"line":136,"column":6},"end":{"line":136,"column":15}},"46":{"start":{"line":141,"column":6},"end":{"line":141,"column":60}},"47":{"start":{"line":146,"column":6},"end":{"line":146,"column":59}},"48":{"start":{"line":150,"column":2},"end":{"line":152,"column":4}},"49":{"start":{"line":154,"column":2},"end":{"line":154,"column":12}},"50":{"start":{"line":157,"column":0},"end":{"line":157,"column":20}},"51":{"start":{"line":158,"column":0},"end":{"line":158,"column":26}}},"branchMap":{"1":{"line":45,"type":"binary-expr","locations":[{"start":{"line":45,"column":16},"end":{"line":45,"column":17}},{"start":{"line":45,"column":21},"end":{"line":45,"column":22}}]},"2":{"line":49,"type":"binary-expr","locations":[{"start":{"line":49,"column":14},"end":{"line":49,"column":24}},{"start":{"line":49,"column":28},"end":{"line":49,"column":38}},{"start":{"line":49,"column":44},"end":{"line":49,"column":54}},{"start":{"line":49,"column":58},"end":{"line":49,"column":68}}]},"3":{"line":53,"type":"binary-expr","locations":[{"start":{"line":53,"column":14},"end":{"line":53,"column":25}},{"start":{"line":53,"column":29},"end":{"line":53,"column":39}},{"start":{"line":53,"column":45},"end":{"line":53,"column":56}},{"start":{"line":53,"column":60},"end":{"line":53,"column":70}}]},"4":{"line":65,"type":"switch","locations":[{"start":{"line":66,"column":8},"end":{"line":77,"column":16}},{"start":{"line":78,"column":8},"end":{"line":89,"column":16}}]},"5":{"line":67,"type":"switch","locations":[{"start":{"line":68,"column":12},"end":{"line":71,"column":20}},{"start":{"line":72,"column":12},"end":{"line":75,"column":20}}]},"6":{"line":79,"type":"switch","locations":[{"start":{"line":80,"column":12},"end":{"line":83,"column":20}},{"start":{"line":84,"column":12},"end":{"line":87,"column":20}}]},"7":{"line":113,"type":"switch","locations":[{"start":{"line":114,"column":8},"end":{"line":116,"column":16}},{"start":{"line":117,"column":8},"end":{"line":119,"column":16}}]},"8":{"line":128,"type":"switch","locations":[{"start":{"line":129,"column":8},"end":{"line":131,"column":16}},{"start":{"line":132,"column":8},"end":{"line":134,"column":16}}]}},"code":["'use strict';","","function factory (type, config, load, typed) {","  var latex = require('../../utils/latex');","","  var matrix = load(require('../../type/matrix/function/matrix'));","","  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));","  var algorithm05 = load(require('../../type/matrix/utils/algorithm05'));","  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));","  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));","  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));","  ","  /**","   * Logical `or`. Test if at least one value is defined with a nonzero/nonempty value.","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.or(x, y)","   *","   * Examples:","   *","   *    math.or(2, 4);   // returns true","   *","   *    a = [2, 5, 0];","   *    b = [0, 22, 0];","   *    c = 0;","   *","   *    math.or(a, b);   // returns [true, true, false]","   *    math.or(b, c);   // returns [false, true, false]","   *","   * See also:","   *","   *    and, not, xor","   *","   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check","   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check","   * @return {boolean | Array | Matrix}","   *            Returns true when one of the inputs is defined with a nonzero/nonempty value.","   */","  var or = typed('or', {","","    'number, number': function (x, y) {","      return !!(x || y);","    },","","    'Complex, Complex': function (x, y) {","      return (x.re !== 0 || x.im !== 0) || (y.re !== 0 || y.im !== 0);","    },","","    'BigNumber, BigNumber': function (x, y) {","      return (!x.isZero() && !x.isNaN()) || (!y.isZero() && !y.isNaN());","    },","","    'Unit, Unit': function (x, y) {","      return or(x.value, y.value);","    },","","    'Matrix, Matrix': function (x, y) {","      // result","      var c;","","      // process matrix storage","      switch (x.storage()) {","        case 'sparse':","          switch (y.storage()) {","            case 'sparse':","              // sparse + sparse","              c = algorithm05(x, y, or);","              break;","            default:","              // sparse + dense","              c = algorithm03(y, x, or, true);","              break;","          }","          break;","        default:","          switch (y.storage()) {","            case 'sparse':","              // dense + sparse","              c = algorithm03(x, y, or, false);","              break;","            default:","              // dense + dense","              c = algorithm13(x, y, or);","              break;","          }","          break;","      }","      return c;","    },","","    'Array, Array': function (x, y) {","      // use matrix implementation","      return or(matrix(x), matrix(y)).valueOf();","    },","","    'Array, Matrix': function (x, y) {","      // use matrix implementation","      return or(matrix(x), y);","    },","","    'Matrix, Array': function (x, y) {","      // use matrix implementation","      return or(x, matrix(y));","    },","","    'Matrix, any': function (x, y) {","      // result","      var c;","      // check storage format","      switch (x.storage()) {","        case 'sparse':","          c = algorithm12(x, y, or, false);","          break;","        default:","          c = algorithm14(x, y, or, false);","          break;","      }","      return c;","    },","","    'any, Matrix': function (x, y) {","      // result","      var c;","      // check storage format","      switch (y.storage()) {","        case 'sparse':","          c = algorithm12(y, x, or, true);","          break;","        default:","          c = algorithm14(y, x, or, true);","          break;","      }","      return c;","    },","","    'Array, any': function (x, y) {","      // use matrix implementation","      return algorithm14(matrix(x), y, or, false).valueOf();","    },","","    'any, Array': function (x, y) {","      // use matrix implementation","      return algorithm14(matrix(y), x, or, true).valueOf();","    }","  });","","  or.toTex = {","    2: '\\\\left(${args[0]}' + latex.operators['or'] + '${args[1]}\\\\right)'","  };","","  return or;","}","","exports.name = 'or';","exports.factory = factory;",""],"l":{"3":1,"4":0,"6":0,"8":0,"9":0,"10":0,"11":0,"12":0,"42":0,"45":0,"49":0,"53":0,"57":0,"62":0,"65":0,"67":0,"70":0,"71":0,"74":0,"75":0,"77":0,"79":0,"82":0,"83":0,"86":0,"87":0,"89":0,"91":0,"96":0,"101":0,"106":0,"111":0,"113":0,"115":0,"116":0,"118":0,"119":0,"121":0,"126":0,"128":0,"130":0,"131":0,"133":0,"134":0,"136":0,"141":0,"146":0,"150":0,"154":0,"157":1,"158":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/logical/xor.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/logical/xor.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":1,"51":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"fnMap":{"1":{"name":"factory","line":3,"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}}},"2":{"name":"(anonymous_2)","line":44,"loc":{"start":{"line":44,"column":22},"end":{"line":44,"column":38}}},"3":{"name":"(anonymous_3)","line":48,"loc":{"start":{"line":48,"column":24},"end":{"line":48,"column":40}}},"4":{"name":"(anonymous_4)","line":52,"loc":{"start":{"line":52,"column":28},"end":{"line":52,"column":44}}},"5":{"name":"(anonymous_5)","line":56,"loc":{"start":{"line":56,"column":18},"end":{"line":56,"column":34}}},"6":{"name":"(anonymous_6)","line":60,"loc":{"start":{"line":60,"column":22},"end":{"line":60,"column":38}}},"7":{"name":"(anonymous_7)","line":94,"loc":{"start":{"line":94,"column":20},"end":{"line":94,"column":36}}},"8":{"name":"(anonymous_8)","line":99,"loc":{"start":{"line":99,"column":21},"end":{"line":99,"column":37}}},"9":{"name":"(anonymous_9)","line":104,"loc":{"start":{"line":104,"column":21},"end":{"line":104,"column":37}}},"10":{"name":"(anonymous_10)","line":109,"loc":{"start":{"line":109,"column":19},"end":{"line":109,"column":35}}},"11":{"name":"(anonymous_11)","line":124,"loc":{"start":{"line":124,"column":19},"end":{"line":124,"column":35}}},"12":{"name":"(anonymous_12)","line":139,"loc":{"start":{"line":139,"column":18},"end":{"line":139,"column":34}}},"13":{"name":"(anonymous_13)","line":144,"loc":{"start":{"line":144,"column":18},"end":{"line":144,"column":34}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":155,"column":1}},"2":{"start":{"line":4,"column":2},"end":{"line":4,"column":43}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":66}},"4":{"start":{"line":8,"column":2},"end":{"line":8,"column":73}},"5":{"start":{"line":9,"column":2},"end":{"line":9,"column":73}},"6":{"start":{"line":10,"column":2},"end":{"line":10,"column":73}},"7":{"start":{"line":11,"column":2},"end":{"line":11,"column":73}},"8":{"start":{"line":12,"column":2},"end":{"line":12,"column":73}},"9":{"start":{"line":42,"column":2},"end":{"line":148,"column":5}},"10":{"start":{"line":45,"column":6},"end":{"line":45,"column":27}},"11":{"start":{"line":49,"column":6},"end":{"line":49,"column":73}},"12":{"start":{"line":53,"column":6},"end":{"line":53,"column":75}},"13":{"start":{"line":57,"column":6},"end":{"line":57,"column":35}},"14":{"start":{"line":62,"column":6},"end":{"line":62,"column":12}},"15":{"start":{"line":65,"column":6},"end":{"line":90,"column":7}},"16":{"start":{"line":67,"column":10},"end":{"line":76,"column":11}},"17":{"start":{"line":70,"column":14},"end":{"line":70,"column":41}},"18":{"start":{"line":71,"column":14},"end":{"line":71,"column":20}},"19":{"start":{"line":74,"column":14},"end":{"line":74,"column":47}},"20":{"start":{"line":75,"column":14},"end":{"line":75,"column":20}},"21":{"start":{"line":77,"column":10},"end":{"line":77,"column":16}},"22":{"start":{"line":79,"column":10},"end":{"line":88,"column":11}},"23":{"start":{"line":82,"column":14},"end":{"line":82,"column":48}},"24":{"start":{"line":83,"column":14},"end":{"line":83,"column":20}},"25":{"start":{"line":86,"column":14},"end":{"line":86,"column":41}},"26":{"start":{"line":87,"column":14},"end":{"line":87,"column":20}},"27":{"start":{"line":89,"column":10},"end":{"line":89,"column":16}},"28":{"start":{"line":91,"column":6},"end":{"line":91,"column":15}},"29":{"start":{"line":96,"column":6},"end":{"line":96,"column":49}},"30":{"start":{"line":101,"column":6},"end":{"line":101,"column":31}},"31":{"start":{"line":106,"column":6},"end":{"line":106,"column":31}},"32":{"start":{"line":111,"column":6},"end":{"line":111,"column":12}},"33":{"start":{"line":113,"column":6},"end":{"line":120,"column":7}},"34":{"start":{"line":115,"column":10},"end":{"line":115,"column":44}},"35":{"start":{"line":116,"column":10},"end":{"line":116,"column":16}},"36":{"start":{"line":118,"column":10},"end":{"line":118,"column":44}},"37":{"start":{"line":119,"column":10},"end":{"line":119,"column":16}},"38":{"start":{"line":121,"column":6},"end":{"line":121,"column":15}},"39":{"start":{"line":126,"column":6},"end":{"line":126,"column":12}},"40":{"start":{"line":128,"column":6},"end":{"line":135,"column":7}},"41":{"start":{"line":130,"column":10},"end":{"line":130,"column":43}},"42":{"start":{"line":131,"column":10},"end":{"line":131,"column":16}},"43":{"start":{"line":133,"column":10},"end":{"line":133,"column":43}},"44":{"start":{"line":134,"column":10},"end":{"line":134,"column":16}},"45":{"start":{"line":136,"column":6},"end":{"line":136,"column":15}},"46":{"start":{"line":141,"column":6},"end":{"line":141,"column":61}},"47":{"start":{"line":146,"column":6},"end":{"line":146,"column":60}},"48":{"start":{"line":150,"column":2},"end":{"line":152,"column":4}},"49":{"start":{"line":154,"column":2},"end":{"line":154,"column":13}},"50":{"start":{"line":157,"column":0},"end":{"line":157,"column":21}},"51":{"start":{"line":158,"column":0},"end":{"line":158,"column":26}}},"branchMap":{"1":{"line":49,"type":"binary-expr","locations":[{"start":{"line":49,"column":15},"end":{"line":49,"column":25}},{"start":{"line":49,"column":29},"end":{"line":49,"column":39}}]},"2":{"line":49,"type":"binary-expr","locations":[{"start":{"line":49,"column":46},"end":{"line":49,"column":56}},{"start":{"line":49,"column":60},"end":{"line":49,"column":70}}]},"3":{"line":53,"type":"binary-expr","locations":[{"start":{"line":53,"column":15},"end":{"line":53,"column":26}},{"start":{"line":53,"column":30},"end":{"line":53,"column":40}}]},"4":{"line":53,"type":"binary-expr","locations":[{"start":{"line":53,"column":47},"end":{"line":53,"column":58}},{"start":{"line":53,"column":62},"end":{"line":53,"column":72}}]},"5":{"line":65,"type":"switch","locations":[{"start":{"line":66,"column":8},"end":{"line":77,"column":16}},{"start":{"line":78,"column":8},"end":{"line":89,"column":16}}]},"6":{"line":67,"type":"switch","locations":[{"start":{"line":68,"column":12},"end":{"line":71,"column":20}},{"start":{"line":72,"column":12},"end":{"line":75,"column":20}}]},"7":{"line":79,"type":"switch","locations":[{"start":{"line":80,"column":12},"end":{"line":83,"column":20}},{"start":{"line":84,"column":12},"end":{"line":87,"column":20}}]},"8":{"line":113,"type":"switch","locations":[{"start":{"line":114,"column":8},"end":{"line":116,"column":16}},{"start":{"line":117,"column":8},"end":{"line":119,"column":16}}]},"9":{"line":128,"type":"switch","locations":[{"start":{"line":129,"column":8},"end":{"line":131,"column":16}},{"start":{"line":132,"column":8},"end":{"line":134,"column":16}}]}},"code":["'use strict';","","function factory (type, config, load, typed) {","  var latex = require('../../utils/latex');","","  var matrix = load(require('../../type/matrix/function/matrix'));","","  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));","  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));","  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));","  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));","  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));","  ","  /**","   * Logical `xor`. Test whether one and only one value is defined with a nonzero/nonempty value.","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.xor(x, y)","   *","   * Examples:","   *","   *    math.xor(2, 4);   // returns false","   *","   *    a = [2, 0, 0];","   *    b = [2, 7, 0];","   *    c = 0;","   *","   *    math.xor(a, b);   // returns [false, true, false]","   *    math.xor(a, c);   // returns [true, false, false]","   *","   * See also:","   *","   *    and, not, or","   *","   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check","   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check","   * @return {boolean | Array | Matrix}","   *            Returns true when one and only one input is defined with a nonzero/nonempty value.","   */","  var xor = typed('xor', {"," ","    'number, number': function (x, y) {","      return !!(!!x ^ !!y);","    },","","    'Complex, Complex': function (x, y) {","      return ((x.re !== 0 || x.im !== 0) !== (y.re !== 0 || y.im !== 0));","    },","","    'BigNumber, BigNumber': function (x, y) {","      return ((!x.isZero() && !x.isNaN()) !== (!y.isZero() && !y.isNaN()));","    },","","    'Unit, Unit': function (x, y) {","      return xor(x.value, y.value);","    },","","    'Matrix, Matrix': function (x, y) {","      // result","      var c;","","      // process matrix storage","      switch (x.storage()) {","        case 'sparse':","          switch (y.storage()) {","            case 'sparse':","              // sparse + sparse","              c = algorithm07(x, y, xor);","              break;","            default:","              // sparse + dense","              c = algorithm03(y, x, xor, true);","              break;","          }","          break;","        default:","          switch (y.storage()) {","            case 'sparse':","              // dense + sparse","              c = algorithm03(x, y, xor, false);","              break;","            default:","              // dense + dense","              c = algorithm13(x, y, xor);","              break;","          }","          break;","      }","      return c;","    },","","    'Array, Array': function (x, y) {","      // use matrix implementation","      return xor(matrix(x), matrix(y)).valueOf();","    },","","    'Array, Matrix': function (x, y) {","      // use matrix implementation","      return xor(matrix(x), y);","    },","","    'Matrix, Array': function (x, y) {","      // use matrix implementation","      return xor(x, matrix(y));","    },","","    'Matrix, any': function (x, y) {","      // result","      var c;","      // check storage format","      switch (x.storage()) {","        case 'sparse':","          c = algorithm12(x, y, xor, false);","          break;","        default:","          c = algorithm14(x, y, xor, false);","          break;","      }","      return c;","    },","","    'any, Matrix': function (x, y) {","      // result","      var c;","      // check storage format","      switch (y.storage()) {","        case 'sparse':","          c = algorithm12(y, x, xor, true);","          break;","        default:","          c = algorithm14(y, x, xor, true);","          break;","      }","      return c;","    },","","    'Array, any': function (x, y) {","      // use matrix implementation","      return algorithm14(matrix(x), y, xor, false).valueOf();","    },","","    'any, Array': function (x, y) {","      // use matrix implementation","      return algorithm14(matrix(y), x, xor, true).valueOf();","    }","  });","","  xor.toTex = {","    2: '\\\\left(${args[0]}' + latex.operators['xor'] + '${args[1]}\\\\right)'","  };","","  return xor;","}","","exports.name = 'xor';","exports.factory = factory;",""],"l":{"3":1,"4":0,"6":0,"8":0,"9":0,"10":0,"11":0,"12":0,"42":0,"45":0,"49":0,"53":0,"57":0,"62":0,"65":0,"67":0,"70":0,"71":0,"74":0,"75":0,"77":0,"79":0,"82":0,"83":0,"86":0,"87":0,"89":0,"91":0,"96":0,"101":0,"106":0,"111":0,"113":0,"115":0,"116":0,"118":0,"119":0,"121":0,"126":0,"128":0,"130":0,"131":0,"133":0,"134":0,"136":0,"141":0,"146":0,"150":0,"154":0,"157":1,"158":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/matrix/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/matrix/index.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":26,"column":2}}},"branchMap":{},"code":["module.exports = [","  require('./concat'),","  require('./cross'),","  require('./det'),","  require('./diag'),","  require('./dot'),","  require('./eye'),","  require('./filter'),","  require('./flatten'),","  require('./forEach'),","  require('./inv'),","  require('./kron'),","  require('./map'),","  require('./ones'),","  require('./partitionSelect'),","  require('./range'),","  require('./reshape'),","  require('./resize'),","  require('./size'),","  require('./sort'),","  require('./squeeze'),","  require('./subset'),","  require('./trace'),","  require('./transpose'),","  require('./zeros')","];",""],"l":{"1":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/matrix/concat.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/matrix/concat.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":1,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":1,"54":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"factory","line":9,"loc":{"start":{"line":9,"column":0},"end":{"line":9,"column":45}}},"2":{"name":"(anonymous_2)","line":43,"loc":{"start":{"line":43,"column":46},"end":{"line":43,"column":62}}},"3":{"name":"(anonymous_3)","line":104,"loc":{"start":{"line":104,"column":17},"end":{"line":104,"column":33}}},"4":{"name":"_concat","line":124,"loc":{"start":{"line":124,"column":0},"end":{"line":124,"column":39}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":48}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":56}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":41}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":51}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":59}},"6":{"start":{"line":9,"column":0},"end":{"line":112,"column":1}},"7":{"start":{"line":10,"column":2},"end":{"line":10,"column":66}},"8":{"start":{"line":41,"column":2},"end":{"line":107,"column":5}},"9":{"start":{"line":44,"column":6},"end":{"line":44,"column":12}},"10":{"start":{"line":45,"column":6},"end":{"line":45,"column":28}},"11":{"start":{"line":46,"column":6},"end":{"line":46,"column":19}},"12":{"start":{"line":47,"column":6},"end":{"line":47,"column":18}},"13":{"start":{"line":48,"column":6},"end":{"line":48,"column":27}},"14":{"start":{"line":49,"column":6},"end":{"line":49,"column":24}},"15":{"start":{"line":51,"column":6},"end":{"line":90,"column":7}},"16":{"start":{"line":52,"column":8},"end":{"line":52,"column":26}},"17":{"start":{"line":55,"column":8},"end":{"line":57,"column":9}},"18":{"start":{"line":56,"column":10},"end":{"line":56,"column":26}},"19":{"start":{"line":59,"column":8},"end":{"line":89,"column":9}},"20":{"start":{"line":60,"column":10},"end":{"line":62,"column":11}},"21":{"start":{"line":61,"column":12},"end":{"line":61,"column":76}},"22":{"start":{"line":65,"column":10},"end":{"line":65,"column":24}},"23":{"start":{"line":66,"column":10},"end":{"line":66,"column":30}},"24":{"start":{"line":68,"column":10},"end":{"line":70,"column":11}},"25":{"start":{"line":69,"column":12},"end":{"line":69,"column":73}},"26":{"start":{"line":72,"column":10},"end":{"line":75,"column":11}},"27":{"start":{"line":74,"column":12},"end":{"line":74,"column":51}},"28":{"start":{"line":79,"column":10},"end":{"line":79,"column":39}},"29":{"start":{"line":80,"column":10},"end":{"line":80,"column":35}},"30":{"start":{"line":81,"column":10},"end":{"line":81,"column":26}},"31":{"start":{"line":82,"column":10},"end":{"line":82,"column":24}},"32":{"start":{"line":83,"column":10},"end":{"line":83,"column":32}},"33":{"start":{"line":86,"column":10},"end":{"line":88,"column":11}},"34":{"start":{"line":87,"column":12},"end":{"line":87,"column":59}},"35":{"start":{"line":92,"column":6},"end":{"line":94,"column":7}},"36":{"start":{"line":93,"column":8},"end":{"line":93,"column":62}},"37":{"start":{"line":96,"column":6},"end":{"line":96,"column":33}},"38":{"start":{"line":97,"column":6},"end":{"line":99,"column":7}},"39":{"start":{"line":98,"column":8},"end":{"line":98,"column":53}},"40":{"start":{"line":101,"column":6},"end":{"line":101,"column":42}},"41":{"start":{"line":105,"column":6},"end":{"line":105,"column":27}},"42":{"start":{"line":109,"column":2},"end":{"line":109,"column":27}},"43":{"start":{"line":111,"column":2},"end":{"line":111,"column":16}},"44":{"start":{"line":124,"column":0},"end":{"line":141,"column":1}},"45":{"start":{"line":125,"column":2},"end":{"line":140,"column":3}},"46":{"start":{"line":127,"column":4},"end":{"line":129,"column":5}},"47":{"start":{"line":128,"column":6},"end":{"line":128,"column":51}},"48":{"start":{"line":131,"column":4},"end":{"line":131,"column":15}},"49":{"start":{"line":132,"column":4},"end":{"line":134,"column":5}},"50":{"start":{"line":133,"column":6},"end":{"line":133,"column":53}},"51":{"start":{"line":135,"column":4},"end":{"line":135,"column":13}},"52":{"start":{"line":139,"column":4},"end":{"line":139,"column":23}},"53":{"start":{"line":143,"column":0},"end":{"line":143,"column":24}},"54":{"start":{"line":144,"column":0},"end":{"line":144,"column":26}}},"branchMap":{"1":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":8},"end":{"line":55,"column":8}},{"start":{"line":55,"column":8},"end":{"line":55,"column":8}}]},"2":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":12},"end":{"line":55,"column":15}},{"start":{"line":55,"column":19},"end":{"line":55,"column":40}}]},"3":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":8},"end":{"line":59,"column":8}},{"start":{"line":59,"column":8},"end":{"line":59,"column":8}}]},"4":{"line":59,"type":"binary-expr","locations":[{"start":{"line":59,"column":12},"end":{"line":59,"column":35}},{"start":{"line":59,"column":40},"end":{"line":59,"column":43}},{"start":{"line":59,"column":47},"end":{"line":59,"column":71}}]},"5":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":10},"end":{"line":60,"column":10}},{"start":{"line":60,"column":10},"end":{"line":60,"column":10}}]},"6":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":10},"end":{"line":68,"column":10}},{"start":{"line":68,"column":10},"end":{"line":68,"column":10}}]},"7":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":10},"end":{"line":72,"column":10}},{"start":{"line":72,"column":10},"end":{"line":72,"column":10}}]},"8":{"line":72,"type":"binary-expr","locations":[{"start":{"line":72,"column":14},"end":{"line":72,"column":21}},{"start":{"line":72,"column":26},"end":{"line":72,"column":31}},{"start":{"line":72,"column":35},"end":{"line":72,"column":48}}]},"9":{"line":86,"type":"if","locations":[{"start":{"line":86,"column":10},"end":{"line":86,"column":10}},{"start":{"line":86,"column":10},"end":{"line":86,"column":10}}]},"10":{"line":86,"type":"binary-expr","locations":[{"start":{"line":86,"column":14},"end":{"line":86,"column":19}},{"start":{"line":86,"column":23},"end":{"line":86,"column":37}}]},"11":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":6},"end":{"line":92,"column":6}},{"start":{"line":92,"column":6},"end":{"line":92,"column":6}}]},"12":{"line":101,"type":"cond-expr","locations":[{"start":{"line":101,"column":24},"end":{"line":101,"column":35}},{"start":{"line":101,"column":38},"end":{"line":101,"column":41}}]},"13":{"line":125,"type":"if","locations":[{"start":{"line":125,"column":2},"end":{"line":125,"column":2}},{"start":{"line":125,"column":2},"end":{"line":125,"column":2}}]},"14":{"line":127,"type":"if","locations":[{"start":{"line":127,"column":4},"end":{"line":127,"column":4}},{"start":{"line":127,"column":4},"end":{"line":127,"column":4}}]}},"code":["'use strict';","","var clone = require('../../utils/object').clone;","var isInteger = require('../../utils/number').isInteger;","var array = require('../../utils/array');","var IndexError = require('../../error/IndexError');","var DimensionError = require('../../error/DimensionError');","","function factory (type, config, load, typed) {","  var matrix = load(require('../../type/matrix/function/matrix'));","","  /**","   * Concatenate two or more matrices.","   *","   * Syntax:","   *","   *     math.concat(A, B, C, ...)","   *     math.concat(A, B, C, ..., dim)","   *","   * Where:","   *","   * - `dim: number` is a zero-based dimension over which to concatenate the matrices.","   *   By default the last dimension of the matrices.","   *","   * Examples:","   *","   *    var A = [[1, 2], [5, 6]];","   *    var B = [[3, 4], [7, 8]];","   *","   *    math.concat(A, B);                  // returns [[1, 2, 3, 4], [5, 6, 7, 8]]","   *    math.concat(A, B, 0);               // returns [[1, 2], [5, 6], [3, 4], [7, 8]]","   *    math.concat('hello', ' ', 'world'); // returns 'hello world'","   *","   * See also:","   *","   *    size, squeeze, subset, transpose","   *","   * @param {... Array | Matrix} args     Two or more matrices","   * @return {Array | Matrix} Concatenated matrix","   */","  var concat = typed('concat', {","    // TODO: change signature to '...Array | Matrix, dim?' when supported","    '...Array | Matrix | number | BigNumber': function (args) {","      var i;","      var len = args.length;","      var dim = -1;  // zero-based dimension","      var prevDim;","      var asMatrix = false;","      var matrices = [];  // contains multi dimensional arrays","","      for (i = 0; i < len; i++) {","        var arg = args[i];","","        // test whether we need to return a Matrix (if not we return an Array)","        if (arg && arg.isMatrix === true) {","          asMatrix = true;","        }","","        if (typeof arg === 'number' || (arg && arg.isBigNumber === true)) {","          if (i !== len - 1) {","            throw new Error('Dimension must be specified as last argument');","          }","","          // last argument contains the dimension on which to concatenate","          prevDim = dim;","          dim = arg.valueOf(); // change BigNumber to number","","          if (!isInteger(dim)) {","            throw new TypeError('Integer number expected for dimension');","          }","","          if (dim < 0 || (i > 0 && dim > prevDim)) {","            // TODO: would be more clear when throwing a DimensionError here","            throw new IndexError(dim, prevDim + 1);","          }","        }","        else {","          // this is a matrix or array","          var m = clone(arg).valueOf();","          var size = array.size(m);","          matrices[i] = m;","          prevDim = dim;","          dim = size.length - 1;","","          // verify whether each of the matrices has the same number of dimensions","          if (i > 0 && dim != prevDim) {","            throw new DimensionError(prevDim + 1, dim + 1);","          }","        }","      }","","      if (matrices.length == 0) {","        throw new SyntaxError('At least one matrix expected');","      }","","      var res = matrices.shift();","      while (matrices.length) {","        res = _concat(res, matrices.shift(), dim, 0);","      }","","      return asMatrix ? matrix(res) : res;","    },","","    '...string': function (args) {","      return args.join('');","    }","  });","","  concat.toTex = undefined; // use default template","","  return concat;","}","","/**"," * Recursively concatenate two matrices."," * The contents of the matrices is not cloned."," * @param {Array} a             Multi dimensional array"," * @param {Array} b             Multi dimensional array"," * @param {number} concatDim    The dimension on which to concatenate (zero-based)"," * @param {number} dim          The current dim (zero-based)"," * @return {Array} c            The concatenated matrix"," * @private"," */","function _concat(a, b, concatDim, dim) {","  if (dim < concatDim) {","    // recurse into next dimension","    if (a.length != b.length) {","      throw new DimensionError(a.length, b.length);","    }","","    var c = [];","    for (var i = 0; i < a.length; i++) {","      c[i] = _concat(a[i], b[i], concatDim, dim + 1);","    }","    return c;","  }","  else {","    // concatenate this dimension","    return a.concat(b);","  }","}","","exports.name = 'concat';","exports.factory = factory;",""],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"9":1,"10":0,"41":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"51":0,"52":0,"55":0,"56":0,"59":0,"60":0,"61":0,"65":0,"66":0,"68":0,"69":0,"72":0,"74":0,"79":0,"80":0,"81":0,"82":0,"83":0,"86":0,"87":0,"92":0,"93":0,"96":0,"97":0,"98":0,"101":0,"105":0,"109":0,"111":0,"124":1,"125":0,"127":0,"128":0,"131":0,"132":0,"133":0,"135":0,"139":0,"143":1,"144":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/matrix/cross.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/matrix/cross.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":1,"25":1},"b":{"1":[0,0],"2":[0,0,0,0],"3":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":44,"loc":{"start":{"line":44,"column":22},"end":{"line":44,"column":38}}},"3":{"name":"(anonymous_3)","line":48,"loc":{"start":{"line":48,"column":21},"end":{"line":48,"column":37}}},"4":{"name":"(anonymous_4)","line":52,"loc":{"start":{"line":52,"column":21},"end":{"line":52,"column":37}}},"5":{"name":"_cross","line":72,"loc":{"start":{"line":72,"column":2},"end":{"line":72,"column":24}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":41}},"2":{"start":{"line":5,"column":0},"end":{"line":98,"column":1}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":68}},"4":{"start":{"line":7,"column":2},"end":{"line":7,"column":57}},"5":{"start":{"line":8,"column":2},"end":{"line":8,"column":57}},"6":{"start":{"line":43,"column":2},"end":{"line":57,"column":5}},"7":{"start":{"line":45,"column":6},"end":{"line":45,"column":54}},"8":{"start":{"line":49,"column":6},"end":{"line":49,"column":44}},"9":{"start":{"line":53,"column":6},"end":{"line":53,"column":44}},"10":{"start":{"line":59,"column":2},"end":{"line":61,"column":4}},"11":{"start":{"line":63,"column":2},"end":{"line":63,"column":15}},"12":{"start":{"line":72,"column":2},"end":{"line":97,"column":3}},"13":{"start":{"line":73,"column":4},"end":{"line":73,"column":80}},"14":{"start":{"line":75,"column":4},"end":{"line":75,"column":25}},"15":{"start":{"line":76,"column":4},"end":{"line":76,"column":25}},"16":{"start":{"line":78,"column":4},"end":{"line":78,"column":30}},"17":{"start":{"line":79,"column":4},"end":{"line":79,"column":30}},"18":{"start":{"line":81,"column":4},"end":{"line":84,"column":5}},"19":{"start":{"line":82,"column":6},"end":{"line":83,"column":79}},"20":{"start":{"line":86,"column":4},"end":{"line":90,"column":6}},"21":{"start":{"line":92,"column":4},"end":{"line":96,"column":5}},"22":{"start":{"line":93,"column":6},"end":{"line":93,"column":23}},"23":{"start":{"line":95,"column":6},"end":{"line":95,"column":21}},"24":{"start":{"line":100,"column":0},"end":{"line":100,"column":23}},"25":{"start":{"line":101,"column":0},"end":{"line":101,"column":26}}},"branchMap":{"1":{"line":81,"type":"if","locations":[{"start":{"line":81,"column":4},"end":{"line":81,"column":4}},{"start":{"line":81,"column":4},"end":{"line":81,"column":4}}]},"2":{"line":81,"type":"binary-expr","locations":[{"start":{"line":81,"column":8},"end":{"line":81,"column":25}},{"start":{"line":81,"column":29},"end":{"line":81,"column":46}},{"start":{"line":81,"column":50},"end":{"line":81,"column":63}},{"start":{"line":81,"column":67},"end":{"line":81,"column":80}}]},"3":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":4},"end":{"line":92,"column":4}},{"start":{"line":92,"column":4},"end":{"line":92,"column":4}}]}},"code":["'use strict';","","var array = require('../../utils/array');","","function factory (type, config, load, typed) {","  var matrix   = load(require('../../type/matrix/function/matrix'));","  var subtract = load(require('../arithmetic/subtract'));","  var multiply = load(require('../arithmetic/multiply'));","","  /**","   * Calculate the cross product for two vectors in three dimensional space.","   * The cross product of `A = [a1, a2, a3]` and `B = [b1, b2, b3]` is defined","   * as:","   *","   *    cross(A, B) = [","   *      a2 * b3 - a3 * b2,","   *      a3 * b1 - a1 * b3,","   *      a1 * b2 - a2 * b1","   *    ]","   *","   * If one of the input vectors has a dimension greater than 1, the output","   * vector will be a 1x3 (2-dimensional) matrix.","   *","   * Syntax:","   *","   *    math.cross(x, y)","   *","   * Examples:","   *","   *    math.cross([1, 1, 0],   [0, 1, 1]);       // Returns [1, -1, 1]","   *    math.cross([3, -3, 1],  [4, 9, 2]);       // Returns [-15, -2, 39]","   *    math.cross([2, 3, 4],   [5, 6, 7]);       // Returns [-3, 6, -3]","   *    math.cross([[1, 2, 3]], [[4], [5], [6]]); // Returns [[-3, 6, -3]]","   *","   * See also:","   *","   *    dot, multiply","   *","   * @param  {Array | Matrix} x   First vector","   * @param  {Array | Matrix} y   Second vector","   * @return {Array | Matrix}     Returns the cross product of `x` and `y`","   */","  var cross = typed('cross', {","    'Matrix, Matrix': function (x, y) {","      return matrix(_cross(x.toArray(), y.toArray()));","    },","","    'Matrix, Array': function (x, y) {","      return matrix(_cross(x.toArray(), y));","    },","","    'Array, Matrix': function (x, y) {","      return matrix(_cross(x, y.toArray()));","    },","","    'Array, Array': _cross","  });","","  cross.toTex = {","    2: '\\\\left(${args[0]}\\\\right)\\\\times\\\\left(${args[1]}\\\\right)'","  };","","  return cross;","","  /**","   * Calculate the cross product for two arrays","   * @param {Array} x  First vector","   * @param {Array} y  Second vector","   * @returns {Array} Returns the cross product of x and y","   * @private","   */","  function _cross(x, y) {","    var highestDimension = Math.max(array.size(x).length, array.size(y).length);","","    x = array.squeeze(x);","    y = array.squeeze(y);","","    var xSize = array.size(x);","    var ySize = array.size(y);","","    if (xSize.length != 1 || ySize.length != 1 || xSize[0] != 3 || ySize[0] != 3) {","      throw new RangeError('Vectors with length 3 expected ' +","      '(Size A = [' + xSize.join(', ') + '], B = [' + ySize.join(', ') + '])');","    }","","    var product = [","      subtract(multiply(x[1], y[2]), multiply(x[2], y[1])),","      subtract(multiply(x[2], y[0]), multiply(x[0], y[2])),","      subtract(multiply(x[0], y[1]), multiply(x[1], y[0]))","    ];","","    if (highestDimension > 1) {","      return [product];","    } else {","      return product;","    }","  }","}","","exports.name = 'cross';","exports.factory = factory;",""],"l":{"3":1,"5":1,"6":0,"7":0,"8":0,"43":0,"45":0,"49":0,"53":0,"59":0,"63":0,"72":1,"73":0,"75":0,"76":0,"78":0,"79":0,"81":0,"82":0,"86":0,"92":0,"93":0,"95":0,"100":1,"101":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/matrix/det.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/matrix/det.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":1,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":1,"60":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0,0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"factory","line":7,"loc":{"start":{"line":7,"column":0},"end":{"line":7,"column":45}}},"2":{"name":"(anonymous_2)","line":40,"loc":{"start":{"line":40,"column":11},"end":{"line":40,"column":24}}},"3":{"name":"det","line":44,"loc":{"start":{"line":44,"column":22},"end":{"line":44,"column":39}}},"4":{"name":"_det","line":105,"loc":{"start":{"line":105,"column":2},"end":{"line":105,"column":37}}},"5":{"name":"(anonymous_5)","line":120,"loc":{"start":{"line":120,"column":23},"end":{"line":120,"column":41}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":40}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":25}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":25}},"4":{"start":{"line":7,"column":0},"end":{"line":164,"column":1}},"5":{"start":{"line":8,"column":2},"end":{"line":8,"column":66}},"6":{"start":{"line":9,"column":2},"end":{"line":9,"column":47}},"7":{"start":{"line":10,"column":2},"end":{"line":10,"column":57}},"8":{"start":{"line":11,"column":2},"end":{"line":11,"column":57}},"9":{"start":{"line":12,"column":2},"end":{"line":12,"column":61}},"10":{"start":{"line":39,"column":2},"end":{"line":91,"column":5}},"11":{"start":{"line":41,"column":6},"end":{"line":41,"column":29}},"12":{"start":{"line":45,"column":6},"end":{"line":45,"column":15}},"13":{"start":{"line":46,"column":6},"end":{"line":56,"column":7}},"14":{"start":{"line":47,"column":8},"end":{"line":47,"column":24}},"15":{"start":{"line":49,"column":11},"end":{"line":56,"column":7}},"16":{"start":{"line":50,"column":8},"end":{"line":50,"column":22}},"17":{"start":{"line":51,"column":8},"end":{"line":51,"column":24}},"18":{"start":{"line":55,"column":8},"end":{"line":55,"column":18}},"19":{"start":{"line":58,"column":6},"end":{"line":89,"column":7}},"20":{"start":{"line":61,"column":10},"end":{"line":61,"column":33}},"21":{"start":{"line":65,"column":10},"end":{"line":71,"column":11}},"22":{"start":{"line":66,"column":12},"end":{"line":66,"column":48}},"23":{"start":{"line":69,"column":12},"end":{"line":70,"column":51}},"24":{"start":{"line":75,"column":10},"end":{"line":75,"column":29}},"25":{"start":{"line":76,"column":10},"end":{"line":76,"column":29}},"26":{"start":{"line":77,"column":10},"end":{"line":83,"column":11}},"27":{"start":{"line":78,"column":12},"end":{"line":78,"column":57}},"28":{"start":{"line":81,"column":12},"end":{"line":82,"column":51}},"29":{"start":{"line":87,"column":10},"end":{"line":88,"column":49}},"30":{"start":{"line":93,"column":2},"end":{"line":93,"column":52}},"31":{"start":{"line":95,"column":2},"end":{"line":95,"column":13}},"32":{"start":{"line":105,"column":2},"end":{"line":163,"column":3}},"33":{"start":{"line":106,"column":4},"end":{"line":162,"column":5}},"34":{"start":{"line":108,"column":6},"end":{"line":108,"column":40}},"35":{"start":{"line":110,"column":9},"end":{"line":162,"column":5}},"36":{"start":{"line":113,"column":6},"end":{"line":116,"column":8}},"37":{"start":{"line":120,"column":6},"end":{"line":150,"column":8}},"38":{"start":{"line":121,"column":8},"end":{"line":121,"column":17}},"39":{"start":{"line":126,"column":8},"end":{"line":126,"column":42}},"40":{"start":{"line":127,"column":8},"end":{"line":127,"column":20}},"41":{"start":{"line":128,"column":8},"end":{"line":130,"column":9}},"42":{"start":{"line":129,"column":10},"end":{"line":129,"column":39}},"43":{"start":{"line":132,"column":8},"end":{"line":147,"column":9}},"44":{"start":{"line":133,"column":10},"end":{"line":133,"column":43}},"45":{"start":{"line":134,"column":10},"end":{"line":134,"column":37}},"46":{"start":{"line":136,"column":10},"end":{"line":138,"column":11}},"47":{"start":{"line":137,"column":12},"end":{"line":137,"column":25}},"48":{"start":{"line":140,"column":10},"end":{"line":142,"column":11}},"49":{"start":{"line":141,"column":12},"end":{"line":141,"column":36}},"50":{"start":{"line":144,"column":10},"end":{"line":146,"column":11}},"51":{"start":{"line":145,"column":12},"end":{"line":145,"column":54}},"52":{"start":{"line":149,"column":8},"end":{"line":149,"column":18}},"53":{"start":{"line":152,"column":6},"end":{"line":152,"column":22}},"54":{"start":{"line":153,"column":6},"end":{"line":155,"column":7}},"55":{"start":{"line":154,"column":8},"end":{"line":154,"column":46}},"56":{"start":{"line":157,"column":6},"end":{"line":161,"column":7}},"57":{"start":{"line":158,"column":8},"end":{"line":158,"column":36}},"58":{"start":{"line":160,"column":8},"end":{"line":160,"column":24}},"59":{"start":{"line":166,"column":0},"end":{"line":166,"column":21}},"60":{"start":{"line":167,"column":0},"end":{"line":167,"column":26}}},"branchMap":{"1":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":6},"end":{"line":46,"column":6}},{"start":{"line":46,"column":6},"end":{"line":46,"column":6}}]},"2":{"line":46,"type":"binary-expr","locations":[{"start":{"line":46,"column":10},"end":{"line":46,"column":11}},{"start":{"line":46,"column":15},"end":{"line":46,"column":34}}]},"3":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":11},"end":{"line":49,"column":11}},{"start":{"line":49,"column":11},"end":{"line":49,"column":11}}]},"4":{"line":58,"type":"switch","locations":[{"start":{"line":59,"column":8},"end":{"line":61,"column":33}},{"start":{"line":63,"column":8},"end":{"line":71,"column":11}},{"start":{"line":73,"column":8},"end":{"line":83,"column":11}},{"start":{"line":85,"column":8},"end":{"line":88,"column":49}}]},"5":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":10},"end":{"line":65,"column":10}},{"start":{"line":65,"column":10},"end":{"line":65,"column":10}}]},"6":{"line":77,"type":"if","locations":[{"start":{"line":77,"column":10},"end":{"line":77,"column":10}},{"start":{"line":77,"column":10},"end":{"line":77,"column":10}}]},"7":{"line":106,"type":"if","locations":[{"start":{"line":106,"column":4},"end":{"line":106,"column":4}},{"start":{"line":106,"column":4},"end":{"line":106,"column":4}}]},"8":{"line":110,"type":"if","locations":[{"start":{"line":110,"column":9},"end":{"line":110,"column":9}},{"start":{"line":110,"column":9},"end":{"line":110,"column":9}}]},"9":{"line":144,"type":"if","locations":[{"start":{"line":144,"column":10},"end":{"line":144,"column":10}},{"start":{"line":144,"column":10},"end":{"line":144,"column":10}}]},"10":{"line":157,"type":"if","locations":[{"start":{"line":157,"column":6},"end":{"line":157,"column":6}},{"start":{"line":157,"column":6},"end":{"line":157,"column":6}}]}},"code":["'use strict';","","var util = require('../../utils/index');","var object = util.object;","var string = util.string;","","function factory (type, config, load, typed) {","  var matrix = load(require('../../type/matrix/function/matrix'));","  var add = load(require('../arithmetic/add'));","  var subtract = load(require('../arithmetic/subtract'));","  var multiply = load(require('../arithmetic/multiply'));","  var unaryMinus = load(require('../arithmetic/unaryMinus'));","","  /**","   * Calculate the determinant of a matrix.","   *","   * Syntax:","   *","   *    math.det(x)","   *","   * Examples:","   *","   *    math.det([[1, 2], [3, 4]]); // returns -2","   *","   *    var A = [","   *      [-2, 2, 3],","   *      [-1, 1, 3],","   *      [2, 0, -1]","   *    ]","   *    math.det(A); // returns 6","   *","   * See also:","   *","   *    inv","   *","   * @param {Array | Matrix} x  A matrix","   * @return {number} The determinant of `x`","   */","  var det = typed('det', {","    'any': function (x) {","      return object.clone(x);","    },","","    'Array | Matrix': function det (x) {","      var size;","      if (x && x.isMatrix === true) {","        size = x.size();","      }","      else if (Array.isArray(x)) {","        x = matrix(x);","        size = x.size();","      }","      else {","        // a scalar","        size = [];","      }","","      switch (size.length) {","        case 0:","          // scalar","          return object.clone(x);","","        case 1:","          // vector","          if (size[0] == 1) {","            return object.clone(x.valueOf()[0]);","          }","          else {","            throw new RangeError('Matrix must be square ' +","            '(size: ' + string.format(size) + ')');","          }","","        case 2:","          // two dimensional array","          var rows = size[0];","          var cols = size[1];","          if (rows == cols) {","            return _det(x.clone().valueOf(), rows, cols);","          }","          else {","            throw new RangeError('Matrix must be square ' +","            '(size: ' + string.format(size) + ')');","          }","","        default:","          // multi dimensional array","          throw new RangeError('Matrix must be two dimensional ' +","          '(size: ' + string.format(size) + ')');","      }","    }","  });","","  det.toTex = {1: '\\\\det\\\\left(${args[0]}\\\\right)'};","","  return det;","","  /**","   * Calculate the determinant of a matrix","   * @param {Array[]} matrix  A square, two dimensional matrix","   * @param {number} rows     Number of rows of the matrix (zero-based)","   * @param {number} cols     Number of columns of the matrix (zero-based)","   * @returns {number} det","   * @private","   */","  function _det (matrix, rows, cols) {","    if (rows == 1) {","      // this is a 1 x 1 matrix","      return object.clone(matrix[0][0]);","    }","    else if (rows == 2) {","      // this is a 2 x 2 matrix","      // the determinant of [a11,a12;a21,a22] is det = a11*a22-a21*a12","      return subtract(","          multiply(matrix[0][0], matrix[1][1]),","          multiply(matrix[1][0], matrix[0][1])","      );","    }","    else {","      // this is an n x n matrix","      var compute_mu = function (matrix) {","        var i, j;","","        // Compute the matrix with zero lower triangle, same upper triangle,","        // and diagonals given by the negated sum of the below diagonal","        // elements.","        var mu = new Array(matrix.length);","        var sum = 0;","        for (i = 1; i < matrix.length; i++) {","          sum = add(sum, matrix[i][i]);","        }","","        for (i = 0; i < matrix.length; i++) {","          mu[i] = new Array(matrix.length);","          mu[i][i] = unaryMinus(sum);","","          for (j = 0; j < i; j++) {","            mu[i][j] = 0; // TODO: make bignumber 0 in case of bignumber computation","          }","","          for (j = i + 1; j < matrix.length; j++) {","            mu[i][j] = matrix[i][j];","          }","","          if (i+1 < matrix.length) {","            sum = subtract(sum, matrix[i + 1][i + 1]);","          }","        }","","        return mu;","      };","","      var fa = matrix;","      for (var i = 0; i < rows - 1; i++) {","        fa = multiply(compute_mu(fa), matrix);","      }","","      if (rows % 2 == 0) {","        return unaryMinus(fa[0][0]);","      } else {","        return fa[0][0];","      }","    }","  }","}","","exports.name = 'det';","exports.factory = factory;","",""],"l":{"3":1,"4":1,"5":1,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"39":0,"41":0,"45":0,"46":0,"47":0,"49":0,"50":0,"51":0,"55":0,"58":0,"61":0,"65":0,"66":0,"69":0,"75":0,"76":0,"77":0,"78":0,"81":0,"87":0,"93":0,"95":0,"105":1,"106":0,"108":0,"110":0,"113":0,"120":0,"121":0,"126":0,"127":0,"128":0,"129":0,"132":0,"133":0,"134":0,"136":0,"137":0,"140":0,"141":0,"144":0,"145":0,"149":0,"152":0,"153":0,"154":0,"157":0,"158":0,"160":0,"166":1,"167":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/matrix/diag.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/matrix/diag.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":1,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":1,"31":0,"32":0,"33":0,"34":0,"35":1,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":1,"49":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},"fnMap":{"1":{"name":"factory","line":7,"loc":{"start":{"line":7,"column":0},"end":{"line":7,"column":45}}},"2":{"name":"(anonymous_2)","line":51,"loc":{"start":{"line":51,"column":13},"end":{"line":51,"column":26}}},"3":{"name":"(anonymous_3)","line":55,"loc":{"start":{"line":55,"column":21},"end":{"line":55,"column":37}}},"4":{"name":"(anonymous_4)","line":59,"loc":{"start":{"line":59,"column":24},"end":{"line":59,"column":40}}},"5":{"name":"(anonymous_5)","line":63,"loc":{"start":{"line":63,"column":21},"end":{"line":63,"column":42}}},"6":{"name":"(anonymous_6)","line":67,"loc":{"start":{"line":67,"column":29},"end":{"line":67,"column":53}}},"7":{"name":"(anonymous_7)","line":71,"loc":{"start":{"line":71,"column":32},"end":{"line":71,"column":56}}},"8":{"name":"(anonymous_8)","line":75,"loc":{"start":{"line":75,"column":14},"end":{"line":75,"column":27}}},"9":{"name":"(anonymous_9)","line":79,"loc":{"start":{"line":79,"column":22},"end":{"line":79,"column":38}}},"10":{"name":"(anonymous_10)","line":83,"loc":{"start":{"line":83,"column":25},"end":{"line":83,"column":41}}},"11":{"name":"(anonymous_11)","line":87,"loc":{"start":{"line":87,"column":22},"end":{"line":87,"column":43}}},"12":{"name":"(anonymous_12)","line":91,"loc":{"start":{"line":91,"column":30},"end":{"line":91,"column":54}}},"13":{"name":"(anonymous_13)","line":95,"loc":{"start":{"line":95,"column":33},"end":{"line":95,"column":57}}},"14":{"name":"_diag","line":113,"loc":{"start":{"line":113,"column":2},"end":{"line":113,"column":38}}},"15":{"name":"_createDiagonalMatrix","line":131,"loc":{"start":{"line":131,"column":2},"end":{"line":131,"column":64}}},"16":{"name":"_getDiagonal","line":142,"loc":{"start":{"line":142,"column":2},"end":{"line":142,"column":55}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":52}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":56}},"4":{"start":{"line":7,"column":0},"end":{"line":167,"column":1}},"5":{"start":{"line":9,"column":2},"end":{"line":9,"column":66}},"6":{"start":{"line":48,"column":2},"end":{"line":98,"column":5}},"7":{"start":{"line":52,"column":6},"end":{"line":52,"column":46}},"8":{"start":{"line":56,"column":6},"end":{"line":56,"column":46}},"9":{"start":{"line":60,"column":6},"end":{"line":60,"column":57}},"10":{"start":{"line":64,"column":6},"end":{"line":64,"column":48}},"11":{"start":{"line":68,"column":6},"end":{"line":68,"column":48}},"12":{"start":{"line":72,"column":6},"end":{"line":72,"column":59}},"13":{"start":{"line":76,"column":6},"end":{"line":76,"column":48}},"14":{"start":{"line":80,"column":6},"end":{"line":80,"column":48}},"15":{"start":{"line":84,"column":6},"end":{"line":84,"column":59}},"16":{"start":{"line":88,"column":6},"end":{"line":88,"column":43}},"17":{"start":{"line":92,"column":6},"end":{"line":92,"column":43}},"18":{"start":{"line":96,"column":6},"end":{"line":96,"column":54}},"19":{"start":{"line":100,"column":2},"end":{"line":100,"column":25}},"20":{"start":{"line":102,"column":2},"end":{"line":102,"column":14}},"21":{"start":{"line":113,"column":2},"end":{"line":129,"column":3}},"22":{"start":{"line":114,"column":4},"end":{"line":116,"column":5}},"23":{"start":{"line":115,"column":6},"end":{"line":115,"column":83}},"24":{"start":{"line":118,"column":4},"end":{"line":118,"column":31}},"25":{"start":{"line":119,"column":4},"end":{"line":119,"column":30}},"26":{"start":{"line":122,"column":4},"end":{"line":127,"column":5}},"27":{"start":{"line":124,"column":8},"end":{"line":124,"column":74}},"28":{"start":{"line":126,"column":8},"end":{"line":126,"column":62}},"29":{"start":{"line":128,"column":4},"end":{"line":128,"column":75}},"30":{"start":{"line":131,"column":2},"end":{"line":140,"column":3}},"31":{"start":{"line":133,"column":4},"end":{"line":133,"column":36}},"32":{"start":{"line":135,"column":4},"end":{"line":135,"column":51}},"33":{"start":{"line":137,"column":4},"end":{"line":137,"column":33}},"34":{"start":{"line":139,"column":4},"end":{"line":139,"column":45}},"35":{"start":{"line":142,"column":2},"end":{"line":166,"column":3}},"36":{"start":{"line":144,"column":4},"end":{"line":155,"column":5}},"37":{"start":{"line":146,"column":6},"end":{"line":146,"column":29}},"38":{"start":{"line":148,"column":6},"end":{"line":153,"column":7}},"39":{"start":{"line":150,"column":8},"end":{"line":151,"column":36}},"40":{"start":{"line":151,"column":10},"end":{"line":151,"column":36}},"41":{"start":{"line":152,"column":8},"end":{"line":152,"column":18}},"42":{"start":{"line":154,"column":6},"end":{"line":154,"column":26}},"43":{"start":{"line":157,"column":4},"end":{"line":157,"column":49}},"44":{"start":{"line":159,"column":4},"end":{"line":159,"column":20}},"45":{"start":{"line":161,"column":4},"end":{"line":163,"column":5}},"46":{"start":{"line":162,"column":6},"end":{"line":162,"column":42}},"47":{"start":{"line":165,"column":4},"end":{"line":165,"column":53}},"48":{"start":{"line":169,"column":0},"end":{"line":169,"column":22}},"49":{"start":{"line":170,"column":0},"end":{"line":170,"column":26}}},"branchMap":{"1":{"line":114,"type":"if","locations":[{"start":{"line":114,"column":4},"end":{"line":114,"column":4}},{"start":{"line":114,"column":4},"end":{"line":114,"column":4}}]},"2":{"line":118,"type":"cond-expr","locations":[{"start":{"line":118,"column":25},"end":{"line":118,"column":26}},{"start":{"line":118,"column":29},"end":{"line":118,"column":30}}]},"3":{"line":119,"type":"cond-expr","locations":[{"start":{"line":119,"column":23},"end":{"line":119,"column":25}},{"start":{"line":119,"column":28},"end":{"line":119,"column":29}}]},"4":{"line":122,"type":"switch","locations":[{"start":{"line":123,"column":6},"end":{"line":124,"column":74}},{"start":{"line":125,"column":6},"end":{"line":126,"column":62}}]},"5":{"line":135,"type":"binary-expr","locations":[{"start":{"line":135,"column":32},"end":{"line":135,"column":38}},{"start":{"line":135,"column":42},"end":{"line":135,"column":49}}]},"6":{"line":139,"type":"cond-expr","locations":[{"start":{"line":139,"column":29},"end":{"line":139,"column":30}},{"start":{"line":139,"column":33},"end":{"line":139,"column":44}}]},"7":{"line":144,"type":"if","locations":[{"start":{"line":144,"column":4},"end":{"line":144,"column":4}},{"start":{"line":144,"column":4},"end":{"line":144,"column":4}}]},"8":{"line":144,"type":"binary-expr","locations":[{"start":{"line":144,"column":8},"end":{"line":144,"column":9}},{"start":{"line":144,"column":13},"end":{"line":144,"column":32}}]},"9":{"line":148,"type":"if","locations":[{"start":{"line":148,"column":6},"end":{"line":148,"column":6}},{"start":{"line":148,"column":6},"end":{"line":148,"column":6}}]},"10":{"line":150,"type":"if","locations":[{"start":{"line":150,"column":8},"end":{"line":150,"column":8}},{"start":{"line":150,"column":8},"end":{"line":150,"column":8}}]},"11":{"line":165,"type":"cond-expr","locations":[{"start":{"line":165,"column":29},"end":{"line":165,"column":43}},{"start":{"line":165,"column":46},"end":{"line":165,"column":52}}]}},"code":["'use strict';","","var array     = require('../../utils/array');","var clone     = require('../../utils/object').clone;","var isInteger = require('../../utils/number').isInteger;","","function factory (type, config, load, typed) {","","  var matrix = load(require('../../type/matrix/function/matrix'));","  ","  /**","   * Create a diagonal matrix or retrieve the diagonal of a matrix","   *","   * When `x` is a vector, a matrix with vector `x` on the diagonal will be returned.","   * When `x` is a two dimensional matrix, the matrixes `k`th diagonal will be returned as vector.","   * When k is positive, the values are placed on the super diagonal.","   * When k is negative, the values are placed on the sub diagonal.","   *","   * Syntax:","   *","   *     math.diag(X)","   *     math.diag(X, format)","   *     math.diag(X, k)","   *     math.diag(X, k, format)","   *","   * Examples:","   *","   *     // create a diagonal matrix","   *     math.diag([1, 2, 3]);      // returns [[1, 0, 0], [0, 2, 0], [0, 0, 3]]","   *     math.diag([1, 2, 3], 1);   // returns [[0, 1, 0, 0], [0, 0, 2, 0], [0, 0, 0, 3]]","   *     math.diag([1, 2, 3], -1);  // returns [[0, 0, 0], [1, 0, 0], [0, 2, 0], [0, 0, 3]]","   *","   *    // retrieve the diagonal from a matrix","   *    var a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];","   *    math.diag(a);   // returns [1, 5, 9]","   *","   * See also:","   *","   *     ones, zeros, eye","   *","   * @param {Matrix | Array} x          A two dimensional matrix or a vector","   * @param {number | BigNumber} [k=0]  The diagonal where the vector will be filled","   *                                    in or retrieved.","   * @param {string} [format='dense']   The matrix storage format.","   *","   * @returns {Matrix | Array} Diagonal matrix from input vector, or diagonal from input matrix.","   */","  var diag = typed('diag', {","    // FIXME: simplify this huge amount of signatures as soon as typed-function supports optional arguments","","    'Array': function (x) {","      return _diag(x, 0, array.size(x), null);","    },","","    'Array, number': function (x, k) {","      return _diag(x, k, array.size(x), null);","    },","    ","    'Array, BigNumber': function (x, k) {","      return _diag(x, k.toNumber(), array.size(x), null);","    },","","    'Array, string': function (x, format) {","      return _diag(x, 0, array.size(x), format);","    },","","    'Array, number, string': function (x, k, format) {","      return _diag(x, k, array.size(x), format);","    },","","    'Array, BigNumber, string': function (x, k, format) {","      return _diag(x, k.toNumber(), array.size(x), format);","    },","","    'Matrix': function (x) {","      return _diag(x, 0, x.size(), x.storage());","    },","","    'Matrix, number': function (x, k) {","      return _diag(x, k, x.size(), x.storage());","    },","","    'Matrix, BigNumber': function (x, k) {","      return _diag(x, k.toNumber(), x.size(), x.storage());","    },","","    'Matrix, string': function (x, format) {","      return _diag(x, 0, x.size(), format);","    },","","    'Matrix, number, string': function (x, k, format) {","      return _diag(x, k, x.size(), format);","    },","","    'Matrix, BigNumber, string': function (x, k, format) {","      return _diag(x, k.toNumber(), x.size(), format);","    }","  });","","  diag.toTex = undefined; // use default template","","  return diag;","","  /**","   * Creeate diagonal matrix from a vector or vice versa","   * @param {Array | Matrix} x","   * @param {number} k","   * @param {string} format Storage format for matrix. If null,","   *                          an Array is returned","   * @returns {Array | Matrix}","   * @private","   */","  function _diag (x, k, size, format) {","    if (!isInteger(k)) {","      throw new TypeError ('Second parameter in function diag must be an integer');","    }","    ","    var kSuper = k > 0 ? k : 0;","    var kSub = k < 0 ? -k : 0;","","    // check dimensions","    switch (size.length) {","      case 1:","        return _createDiagonalMatrix(x, k, format, size[0], kSub, kSuper);","      case 2:","        return _getDiagonal(x, k, format, size, kSub, kSuper);","    }","    throw new RangeError('Matrix for function diag must be 2 dimensional');","  }","  ","  function _createDiagonalMatrix(x, k, format, l, kSub, kSuper) {","    // matrix size","    var ms = [l + kSub, l + kSuper];","    // get matrix constructor","    var F = type.Matrix.storage(format || 'dense');","    // create diagonal matrix","    var m = F.diagonal(ms, x, k);","    // check we need to return a matrix","    return format !== null ? m : m.valueOf();","  }","  ","  function _getDiagonal(x, k, format, s, kSub, kSuper) {","    // check x is a Matrix","    if (x && x.isMatrix === true) {","      // get diagonal matrix","      var dm = x.diagonal(k);","      // check we need to return a matrix","      if (format !== null) {","        // check we need to change matrix format","        if (format !== dm.storage())","          return matrix(dm, format);","        return dm;","      }","      return dm.valueOf();","    }","    // vector size","    var n = Math.min(s[0] - kSub, s[1] - kSuper);","    // diagonal values","    var vector = [];","    // loop diagonal","    for (var i = 0; i < n; i++) {","      vector[i] = x[i + kSub][i + kSuper];","    }","    // check we need to return a matrix","    return format !== null ? matrix(vector) : vector;","  }","}","","exports.name = 'diag';","exports.factory = factory;",""],"l":{"3":1,"4":1,"5":1,"7":1,"9":0,"48":0,"52":0,"56":0,"60":0,"64":0,"68":0,"72":0,"76":0,"80":0,"84":0,"88":0,"92":0,"96":0,"100":0,"102":0,"113":1,"114":0,"115":0,"118":0,"119":0,"122":0,"124":0,"126":0,"128":0,"131":1,"133":0,"135":0,"137":0,"139":0,"142":1,"144":0,"146":0,"148":0,"150":0,"151":0,"152":0,"154":0,"157":0,"159":0,"161":0,"162":0,"165":0,"169":1,"170":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/matrix/dot.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/matrix/dot.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":1,"26":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":22},"end":{"line":33,"column":38}}},"3":{"name":"(anonymous_3)","line":37,"loc":{"start":{"line":37,"column":21},"end":{"line":37,"column":37}}},"4":{"name":"(anonymous_4)","line":41,"loc":{"start":{"line":41,"column":21},"end":{"line":41,"column":37}}},"5":{"name":"_dot","line":60,"loc":{"start":{"line":60,"column":2},"end":{"line":60,"column":22}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}},"2":{"start":{"line":5,"column":0},"end":{"line":76,"column":1}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":52}},"4":{"start":{"line":7,"column":2},"end":{"line":7,"column":57}},"5":{"start":{"line":32,"column":2},"end":{"line":46,"column":5}},"6":{"start":{"line":34,"column":6},"end":{"line":34,"column":44}},"7":{"start":{"line":38,"column":6},"end":{"line":38,"column":34}},"8":{"start":{"line":42,"column":6},"end":{"line":42,"column":34}},"9":{"start":{"line":48,"column":2},"end":{"line":48,"column":63}},"10":{"start":{"line":50,"column":2},"end":{"line":50,"column":13}},"11":{"start":{"line":60,"column":2},"end":{"line":75,"column":3}},"12":{"start":{"line":61,"column":4},"end":{"line":61,"column":23}},"13":{"start":{"line":62,"column":4},"end":{"line":62,"column":24}},"14":{"start":{"line":63,"column":4},"end":{"line":63,"column":23}},"15":{"start":{"line":65,"column":4},"end":{"line":65,"column":90}},"16":{"start":{"line":65,"column":50},"end":{"line":65,"column":90}},"17":{"start":{"line":66,"column":4},"end":{"line":66,"column":124}},"18":{"start":{"line":66,"column":30},"end":{"line":66,"column":124}},"19":{"start":{"line":67,"column":4},"end":{"line":67,"column":92}},"20":{"start":{"line":67,"column":18},"end":{"line":67,"column":92}},"21":{"start":{"line":69,"column":4},"end":{"line":69,"column":17}},"22":{"start":{"line":70,"column":4},"end":{"line":72,"column":5}},"23":{"start":{"line":71,"column":6},"end":{"line":71,"column":45}},"24":{"start":{"line":74,"column":4},"end":{"line":74,"column":16}},"25":{"start":{"line":78,"column":0},"end":{"line":78,"column":21}},"26":{"start":{"line":79,"column":0},"end":{"line":79,"column":26}}},"branchMap":{"1":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":4},"end":{"line":65,"column":4}},{"start":{"line":65,"column":4},"end":{"line":65,"column":4}}]},"2":{"line":65,"type":"binary-expr","locations":[{"start":{"line":65,"column":8},"end":{"line":65,"column":26}},{"start":{"line":65,"column":30},"end":{"line":65,"column":48}}]},"3":{"line":66,"type":"if","locations":[{"start":{"line":66,"column":4},"end":{"line":66,"column":4}},{"start":{"line":66,"column":4},"end":{"line":66,"column":4}}]},"4":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":4},"end":{"line":67,"column":4}},{"start":{"line":67,"column":4},"end":{"line":67,"column":4}}]}},"code":["'use strict';","","var size = require('../../utils/array').size;","","function factory (type, config, load, typed) {","  var add      = load(require('../arithmetic/add'));","  var multiply = load(require('../arithmetic/multiply'));","","  /**","   * Calculate the dot product of two vectors. The dot product of","   * `A = [a1, a2, a3, ..., an]` and `B = [b1, b2, b3, ..., bn]` is defined as:","   *","   *    dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn","   *","   * Syntax:","   *","   *    math.dot(x, y)","   *","   * Examples:","   *","   *    math.dot([2, 4, 1], [2, 2, 3]);       // returns number 15","   *    math.multiply([2, 4, 1], [2, 2, 3]);  // returns number 15","   *","   * See also:","   *","   *    multiply, cross","   *","   * @param  {Array | Matrix} x     First vector","   * @param  {Array | Matrix} y     Second vector","   * @return {number}               Returns the dot product of `x` and `y`","   */","  var dot = typed('dot', {","    'Matrix, Matrix': function (x, y) {","      return _dot(x.toArray(), y.toArray());","    },","","    'Matrix, Array': function (x, y) {","      return _dot(x.toArray(), y);","    },","","    'Array, Matrix': function (x, y) {","      return _dot(x, y.toArray());","    },","","    'Array, Array': _dot","  });","  ","  dot.toTex = {2: '\\\\left(${args[0]}\\\\cdot${args[1]}\\\\right)'};","","  return dot;","","  /**","   * Calculate the dot product for two arrays","   * @param {Array} x  First vector","   * @param {Array} y  Second vector","   * @returns {number} Returns the dot product of x and y","   * @private","   */","  // TODO: double code with math.multiply","  function _dot(x, y) {","    var xSize= size(x);","    var ySize = size(y);","    var len = xSize[0];","","    if (xSize.length !== 1 || ySize.length !== 1) throw new RangeError('Vector expected'); // TODO: better error message","    if (xSize[0] != ySize[0]) throw new RangeError('Vectors must have equal length (' + xSize[0] + ' != ' + ySize[0] + ')');","    if (len == 0) throw new RangeError('Cannot calculate the dot product of empty vectors');","","    var prod = 0;","    for (var i = 0; i < len; i++) {","      prod = add(prod, multiply(x[i], y[i]));","    }","","    return prod;","  }","}","","exports.name = 'dot';","exports.factory = factory;",""],"l":{"3":1,"5":1,"6":0,"7":0,"32":0,"34":0,"38":0,"42":0,"48":0,"50":0,"60":1,"61":0,"62":0,"63":0,"65":0,"66":0,"67":0,"69":0,"70":0,"71":0,"74":0,"78":1,"79":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/matrix/eye.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/matrix/eye.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":0,"20":0,"21":0,"22":0,"23":0,"24":1,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":1,"46":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0,0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"fnMap":{"1":{"name":"factory","line":6,"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":45}}},"2":{"name":"(anonymous_2)","line":41,"loc":{"start":{"line":41,"column":8},"end":{"line":41,"column":20}}},"3":{"name":"(anonymous_3)","line":45,"loc":{"start":{"line":45,"column":14},"end":{"line":45,"column":32}}},"4":{"name":"(anonymous_4)","line":49,"loc":{"start":{"line":49,"column":26},"end":{"line":49,"column":42}}},"5":{"name":"(anonymous_5)","line":53,"loc":{"start":{"line":53,"column":34},"end":{"line":53,"column":58}}},"6":{"name":"(anonymous_6)","line":57,"loc":{"start":{"line":57,"column":46},"end":{"line":57,"column":68}}},"7":{"name":"(anonymous_7)","line":61,"loc":{"start":{"line":61,"column":54},"end":{"line":61,"column":84}}},"8":{"name":"(anonymous_8)","line":65,"loc":{"start":{"line":65,"column":14},"end":{"line":65,"column":30}}},"9":{"name":"(anonymous_9)","line":69,"loc":{"start":{"line":69,"column":22},"end":{"line":69,"column":46}}},"10":{"name":"(anonymous_10)","line":73,"loc":{"start":{"line":73,"column":14},"end":{"line":73,"column":30}}},"11":{"name":"(anonymous_11)","line":77,"loc":{"start":{"line":77,"column":22},"end":{"line":77,"column":46}}},"12":{"name":"_eyeVector","line":86,"loc":{"start":{"line":86,"column":2},"end":{"line":86,"column":37}}},"13":{"name":"_eye","line":103,"loc":{"start":{"line":103,"column":2},"end":{"line":103,"column":37}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":41}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":56}},"3":{"start":{"line":6,"column":0},"end":{"line":143,"column":1}},"4":{"start":{"line":8,"column":2},"end":{"line":8,"column":66}},"5":{"start":{"line":40,"column":2},"end":{"line":80,"column":5}},"6":{"start":{"line":42,"column":6},"end":{"line":42,"column":60}},"7":{"start":{"line":46,"column":6},"end":{"line":46,"column":28}},"8":{"start":{"line":50,"column":6},"end":{"line":50,"column":82}},"9":{"start":{"line":54,"column":6},"end":{"line":54,"column":38}},"10":{"start":{"line":58,"column":6},"end":{"line":58,"column":82}},"11":{"start":{"line":62,"column":6},"end":{"line":62,"column":38}},"12":{"start":{"line":66,"column":6},"end":{"line":66,"column":30}},"13":{"start":{"line":70,"column":6},"end":{"line":70,"column":38}},"14":{"start":{"line":74,"column":6},"end":{"line":74,"column":56}},"15":{"start":{"line":78,"column":6},"end":{"line":78,"column":48}},"16":{"start":{"line":82,"column":2},"end":{"line":82,"column":24}},"17":{"start":{"line":84,"column":2},"end":{"line":84,"column":13}},"18":{"start":{"line":86,"column":2},"end":{"line":93,"column":3}},"19":{"start":{"line":87,"column":4},"end":{"line":92,"column":5}},"20":{"start":{"line":88,"column":14},"end":{"line":88,"column":50}},"21":{"start":{"line":89,"column":14},"end":{"line":89,"column":52}},"22":{"start":{"line":90,"column":14},"end":{"line":90,"column":52}},"23":{"start":{"line":91,"column":15},"end":{"line":91,"column":72}},"24":{"start":{"line":103,"column":2},"end":{"line":142,"column":3}},"25":{"start":{"line":105,"column":4},"end":{"line":109,"column":19}},"26":{"start":{"line":111,"column":4},"end":{"line":111,"column":66}},"27":{"start":{"line":111,"column":43},"end":{"line":111,"column":66}},"28":{"start":{"line":112,"column":4},"end":{"line":112,"column":66}},"29":{"start":{"line":112,"column":43},"end":{"line":112,"column":66}},"30":{"start":{"line":114,"column":4},"end":{"line":116,"column":5}},"31":{"start":{"line":115,"column":6},"end":{"line":115,"column":78}},"32":{"start":{"line":117,"column":4},"end":{"line":119,"column":5}},"33":{"start":{"line":118,"column":6},"end":{"line":118,"column":78}},"34":{"start":{"line":121,"column":4},"end":{"line":121,"column":46}},"35":{"start":{"line":122,"column":4},"end":{"line":122,"column":44}},"36":{"start":{"line":123,"column":4},"end":{"line":123,"column":28}},"37":{"start":{"line":126,"column":4},"end":{"line":131,"column":5}},"38":{"start":{"line":128,"column":6},"end":{"line":128,"column":42}},"39":{"start":{"line":130,"column":6},"end":{"line":130,"column":52}},"40":{"start":{"line":134,"column":4},"end":{"line":134,"column":51}},"41":{"start":{"line":136,"column":4},"end":{"line":136,"column":44}},"42":{"start":{"line":138,"column":4},"end":{"line":140,"column":5}},"43":{"start":{"line":139,"column":6},"end":{"line":139,"column":22}},"44":{"start":{"line":141,"column":4},"end":{"line":141,"column":15}},"45":{"start":{"line":145,"column":0},"end":{"line":145,"column":21}},"46":{"start":{"line":146,"column":0},"end":{"line":146,"column":26}}},"branchMap":{"1":{"line":42,"type":"cond-expr","locations":[{"start":{"line":42,"column":44},"end":{"line":42,"column":54}},{"start":{"line":42,"column":57},"end":{"line":42,"column":59}}]},"2":{"line":50,"type":"cond-expr","locations":[{"start":{"line":50,"column":59},"end":{"line":50,"column":68}},{"start":{"line":50,"column":71},"end":{"line":50,"column":80}}]},"3":{"line":58,"type":"cond-expr","locations":[{"start":{"line":58,"column":59},"end":{"line":58,"column":68}},{"start":{"line":58,"column":71},"end":{"line":58,"column":80}}]},"4":{"line":87,"type":"switch","locations":[{"start":{"line":88,"column":6},"end":{"line":88,"column":50}},{"start":{"line":89,"column":6},"end":{"line":89,"column":52}},{"start":{"line":90,"column":6},"end":{"line":90,"column":52}},{"start":{"line":91,"column":6},"end":{"line":91,"column":72}}]},"5":{"line":88,"type":"cond-expr","locations":[{"start":{"line":88,"column":30},"end":{"line":88,"column":44}},{"start":{"line":88,"column":47},"end":{"line":88,"column":49}}]},"6":{"line":105,"type":"cond-expr","locations":[{"start":{"line":106,"column":10},"end":{"line":106,"column":24}},{"start":{"line":107,"column":10},"end":{"line":109,"column":18}}]},"7":{"line":105,"type":"binary-expr","locations":[{"start":{"line":105,"column":15},"end":{"line":105,"column":19}},{"start":{"line":105,"column":23},"end":{"line":105,"column":48}}]},"8":{"line":107,"type":"cond-expr","locations":[{"start":{"line":108,"column":14},"end":{"line":108,"column":28}},{"start":{"line":109,"column":14},"end":{"line":109,"column":18}}]},"9":{"line":107,"type":"binary-expr","locations":[{"start":{"line":107,"column":11},"end":{"line":107,"column":15}},{"start":{"line":107,"column":19},"end":{"line":107,"column":44}}]},"10":{"line":111,"type":"if","locations":[{"start":{"line":111,"column":4},"end":{"line":111,"column":4}},{"start":{"line":111,"column":4},"end":{"line":111,"column":4}}]},"11":{"line":111,"type":"binary-expr","locations":[{"start":{"line":111,"column":8},"end":{"line":111,"column":12}},{"start":{"line":111,"column":16},"end":{"line":111,"column":41}}]},"12":{"line":112,"type":"if","locations":[{"start":{"line":112,"column":4},"end":{"line":112,"column":4}},{"start":{"line":112,"column":4},"end":{"line":112,"column":4}}]},"13":{"line":112,"type":"binary-expr","locations":[{"start":{"line":112,"column":8},"end":{"line":112,"column":12}},{"start":{"line":112,"column":16},"end":{"line":112,"column":41}}]},"14":{"line":114,"type":"if","locations":[{"start":{"line":114,"column":4},"end":{"line":114,"column":4}},{"start":{"line":114,"column":4},"end":{"line":114,"column":4}}]},"15":{"line":114,"type":"binary-expr","locations":[{"start":{"line":114,"column":8},"end":{"line":114,"column":24}},{"start":{"line":114,"column":28},"end":{"line":114,"column":36}}]},"16":{"line":117,"type":"if","locations":[{"start":{"line":117,"column":4},"end":{"line":117,"column":4}},{"start":{"line":117,"column":4},"end":{"line":117,"column":4}}]},"17":{"line":117,"type":"binary-expr","locations":[{"start":{"line":117,"column":8},"end":{"line":117,"column":24}},{"start":{"line":117,"column":28},"end":{"line":117,"column":36}}]},"18":{"line":121,"type":"cond-expr","locations":[{"start":{"line":121,"column":20},"end":{"line":121,"column":41}},{"start":{"line":121,"column":44},"end":{"line":121,"column":45}}]},"19":{"line":122,"type":"cond-expr","locations":[{"start":{"line":122,"column":29},"end":{"line":122,"column":39}},{"start":{"line":122,"column":42},"end":{"line":122,"column":43}}]},"20":{"line":126,"type":"if","locations":[{"start":{"line":126,"column":4},"end":{"line":126,"column":4}},{"start":{"line":126,"column":4},"end":{"line":126,"column":4}}]},"21":{"line":136,"type":"cond-expr","locations":[{"start":{"line":136,"column":32},"end":{"line":136,"column":36}},{"start":{"line":136,"column":39},"end":{"line":136,"column":43}}]}},"code":["'use strict';","","var array = require('../../utils/array');","var isInteger = require('../../utils/number').isInteger;","","function factory (type, config, load, typed) {","  ","  var matrix = load(require('../../type/matrix/function/matrix'));","  ","  /**","   * Create a 2-dimensional identity matrix with size m x n or n x n.","   * The matrix has ones on the diagonal and zeros elsewhere.","   *","   * Syntax:","   *","   *    math.eye(n)","   *    math.eye(n, format)","   *    math.eye(m, n)","   *    math.eye(m, n, format)","   *    math.eye([m, n])","   *    math.eye([m, n], format)","   *","   * Examples:","   *","   *    math.eye(3);                    // returns [[1, 0, 0], [0, 1, 0], [0, 0, 1]]","   *    math.eye(3, 2);                 // returns [[1, 0], [0, 1], [0, 0]]","   *","   *    var A = [[1, 2, 3], [4, 5, 6]];","   *    math.eye(math.size(A));         // returns [[1, 0, 0], [0, 1, 0]]","   *","   * See also:","   *","   *    diag, ones, zeros, size, range","   *","   * @param {...number | Matrix | Array} size   The size for the matrix","   * @param {string} [format]                   The Matrix storage format","   *","   * @return {Matrix | Array | number} A matrix with ones on the diagonal.","   */","  var eye = typed('eye', {","    '': function () {","      return (config.matrix === 'Matrix') ? matrix([]) : [];","    },","","    'string': function (format) {","      return matrix(format);","    },","","    'number | BigNumber': function (rows) {","      return _eye(rows, rows, config.matrix === 'Matrix' ? 'default' : undefined);","    },","    ","    'number | BigNumber, string': function (rows, format) {","      return _eye(rows, rows, format);","    },","","    'number | BigNumber, number | BigNumber': function (rows, cols) {","      return _eye(rows, cols, config.matrix === 'Matrix' ? 'default' : undefined);","    },","    ","    'number | BigNumber, number | BigNumber, string': function (rows, cols, format) {","      return _eye(rows, cols, format);","    },","","    'Array':  function (size) {","      return _eyeVector(size);","    },","    ","    'Array, string':  function (size, format) {","      return _eyeVector(size, format);","    },","","    'Matrix': function (size) {","      return _eyeVector(size.valueOf(), size.storage());","    },","    ","    'Matrix, string': function (size, format) {","      return _eyeVector(size.valueOf(), format);","    }","  });","","  eye.toTex = undefined; // use default template","","  return eye;","","  function _eyeVector (size, format) {","    switch (size.length) {","      case 0: return format ? matrix(format) : [];","      case 1: return _eye(size[0], size[0], format);","      case 2: return _eye(size[0], size[1], format);","      default: throw new Error('Vector containing two values expected');","    }","  }","","  /**","   * Create an identity matrix","   * @param {number | BigNumber} rows","   * @param {number | BigNumber} cols","   * @param {string} [format]","   * @returns {Matrix}","   * @private","   */","  function _eye (rows, cols, format) {","    // BigNumber constructor with the right precision","    var Big = (rows && rows.isBigNumber === true)","        ? type.BigNumber","        : (cols && cols.isBigNumber === true)","            ? type.BigNumber","            : null;","","    if (rows && rows.isBigNumber === true) rows = rows.toNumber();","    if (cols && cols.isBigNumber === true) cols = cols.toNumber();","","    if (!isInteger(rows) || rows < 1) {","      throw new Error('Parameters in function eye must be positive integers');","    }","    if (!isInteger(cols) || cols < 1) {","      throw new Error('Parameters in function eye must be positive integers');","    }","    ","    var one = Big ? new type.BigNumber(1) : 1;","    var defaultValue = Big ? new Big(0) : 0;","    var size = [rows, cols];","    ","    // check we need to return a matrix","    if (format) {","      // get matrix storage constructor","      var F = type.Matrix.storage(format);","      // create diagonal matrix (use optimized implementation for storage format)","      return F.diagonal(size, one, 0, defaultValue);","    }","    ","    // create and resize array","    var res = array.resize([], size, defaultValue);","    // fill in ones on the diagonal","    var minimum = rows < cols ? rows : cols;","    // fill diagonal","    for (var d = 0; d < minimum; d++) {","      res[d][d] = one;","    }","    return res;","  }","}","","exports.name = 'eye';","exports.factory = factory;",""],"l":{"3":1,"4":1,"6":1,"8":0,"40":0,"42":0,"46":0,"50":0,"54":0,"58":0,"62":0,"66":0,"70":0,"74":0,"78":0,"82":0,"84":0,"86":1,"87":0,"88":0,"89":0,"90":0,"91":0,"103":1,"105":0,"111":0,"112":0,"114":0,"115":0,"117":0,"118":0,"121":0,"122":0,"123":0,"126":0,"128":0,"130":0,"134":0,"136":0,"138":0,"139":0,"141":0,"145":1,"146":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/matrix/filter.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/matrix/filter.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":1,"21":0,"22":0,"23":0,"24":0,"25":1,"26":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"factory","line":6,"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":45}}},"2":{"name":"(anonymous_2)","line":43,"loc":{"start":{"line":43,"column":24},"end":{"line":43,"column":43}}},"3":{"name":"(anonymous_3)","line":47,"loc":{"start":{"line":47,"column":22},"end":{"line":47,"column":41}}},"4":{"name":"_filterCallback","line":64,"loc":{"start":{"line":64,"column":0},"end":{"line":64,"column":39}}},"5":{"name":"(anonymous_5)","line":72,"loc":{"start":{"line":72,"column":18},"end":{"line":72,"column":49}}},"6":{"name":"_filterRegExp","line":93,"loc":{"start":{"line":93,"column":0},"end":{"line":93,"column":35}}},"7":{"name":"(anonymous_7)","line":98,"loc":{"start":{"line":98,"column":18},"end":{"line":98,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":72}},"3":{"start":{"line":6,"column":0},"end":{"line":55,"column":1}},"4":{"start":{"line":7,"column":2},"end":{"line":7,"column":66}},"5":{"start":{"line":38,"column":2},"end":{"line":50,"column":5}},"6":{"start":{"line":44,"column":6},"end":{"line":44,"column":56}},"7":{"start":{"line":48,"column":6},"end":{"line":48,"column":54}},"8":{"start":{"line":52,"column":2},"end":{"line":52,"column":27}},"9":{"start":{"line":54,"column":2},"end":{"line":54,"column":16}},"10":{"start":{"line":64,"column":0},"end":{"line":84,"column":1}},"11":{"start":{"line":65,"column":2},"end":{"line":67,"column":3}},"12":{"start":{"line":66,"column":4},"end":{"line":66,"column":63}},"13":{"start":{"line":70,"column":2},"end":{"line":70,"column":40}},"14":{"start":{"line":72,"column":2},"end":{"line":83,"column":5}},"15":{"start":{"line":74,"column":4},"end":{"line":82,"column":5}},"16":{"start":{"line":75,"column":6},"end":{"line":75,"column":29}},"17":{"start":{"line":77,"column":9},"end":{"line":82,"column":5}},"18":{"start":{"line":78,"column":6},"end":{"line":78,"column":38}},"19":{"start":{"line":81,"column":6},"end":{"line":81,"column":45}},"20":{"start":{"line":93,"column":0},"end":{"line":101,"column":1}},"21":{"start":{"line":94,"column":2},"end":{"line":96,"column":3}},"22":{"start":{"line":95,"column":4},"end":{"line":95,"column":63}},"23":{"start":{"line":98,"column":2},"end":{"line":100,"column":5}},"24":{"start":{"line":99,"column":4},"end":{"line":99,"column":30}},"25":{"start":{"line":103,"column":0},"end":{"line":103,"column":24}},"26":{"start":{"line":104,"column":0},"end":{"line":104,"column":26}}},"branchMap":{"1":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":2},"end":{"line":65,"column":2}},{"start":{"line":65,"column":2},"end":{"line":65,"column":2}}]},"2":{"line":74,"type":"if","locations":[{"start":{"line":74,"column":4},"end":{"line":74,"column":4}},{"start":{"line":74,"column":4},"end":{"line":74,"column":4}}]},"3":{"line":77,"type":"if","locations":[{"start":{"line":77,"column":9},"end":{"line":77,"column":9}},{"start":{"line":77,"column":9},"end":{"line":77,"column":9}}]},"4":{"line":94,"type":"if","locations":[{"start":{"line":94,"column":2},"end":{"line":94,"column":2}},{"start":{"line":94,"column":2},"end":{"line":94,"column":2}}]}},"code":["'use strict';","","var size = require('../../utils/array').size;","var maxArgumentCount = require('../../utils/function').maxArgumentCount;","","function factory (type, config, load, typed) {","  var matrix = load(require('../../type/matrix/function/matrix'));","  ","  /**","   * Filter the items in an array or one dimensional matrix.","   *","   * Syntax:","   *","   *    math.filter(x, test)","   *","   * Examples:","   *","   *    function isPositive (x) {","   *      return x > 0;","   *    }","   *    math.filter([6, -2, -1, 4, 3], isPositive); // returns [6, 4, 3]","   *","   *    math.filter([\"23\", \"foo\", \"100\", \"55\", \"bar\"], /[0-9]+/); // returns [\"23\", \"100\", \"55\"]","   *","   * See also:","   *","   *    forEach, map, sort","   *","   * @param {Matrix | Array} x    A one dimensional matrix or array to filter","   * @param {Function | RegExp} test","   *        A function or regular expression to test items.","   *        All entries for which `test` returns true are returned.","   *        When `test` is a function, it is invoked with three parameters:","   *        the value of the element, the index of the element, and the","   *        matrix/array being traversed. The function must return a boolean.","   * @return {Matrix | Array} Returns the filtered matrix.","   */","  var filter = typed('filter', {","    'Array, function': _filterCallback,","","    'Array, RegExp': _filterRegExp,","","    'Matrix, function': function (x, test) {","      return matrix(_filterCallback(x.toArray(), test));","    },","","    'Matrix, RegExp': function (x, test) {","      return matrix(_filterRegExp(x.toArray(), test));","    }","  });","","  filter.toTex = undefined; // use default template","","  return filter;","}","","/**"," * Filter values in a callback given a callback function"," * @param {Array} x"," * @param {Function} callback"," * @return {Array} Returns the filtered array"," * @private"," */","function _filterCallback (x, callback) {","  if (size(x).length !== 1) {","    throw new Error('Only one dimensional matrices supported');","  }","","  // figure out what number of arguments the callback function expects","  var args = maxArgumentCount(callback);","","  return x.filter(function (value, index, array) {","    // invoke the callback function with the right number of arguments","    if (args === 1) {","      return callback(value);","    }","    else if (args === 2) {","      return callback(value, [index]);","    }","    else { // 3 or -1","      return callback(value, [index], array);","    }","  });","}","","/**"," * Filter values in a callback given a regular expression"," * @param {Array} x"," * @param {Function} regexp"," * @return {Array} Returns the filtered array"," * @private"," */","function _filterRegExp (x, regexp) {","  if (size(x).length !== 1) {","    throw new Error('Only one dimensional matrices supported');","  }","","  return x.filter(function (entry) {","    return regexp.test(entry);","  });","}","","exports.name = 'filter';","exports.factory = factory;",""],"l":{"3":1,"4":1,"6":1,"7":0,"38":0,"44":0,"48":0,"52":0,"54":0,"64":1,"65":0,"66":0,"70":0,"72":0,"74":0,"75":0,"77":0,"78":0,"81":0,"93":1,"94":0,"95":0,"98":0,"99":0,"103":1,"104":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/matrix/flatten.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/matrix/flatten.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1,"12":1},"b":{},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"factory","line":6,"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":45}}},"2":{"name":"(anonymous_2)","line":28,"loc":{"start":{"line":28,"column":13},"end":{"line":28,"column":26}}},"3":{"name":"(anonymous_3)","line":32,"loc":{"start":{"line":32,"column":14},"end":{"line":32,"column":27}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":48}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":52}},"3":{"start":{"line":6,"column":0},"end":{"line":42,"column":1}},"4":{"start":{"line":7,"column":2},"end":{"line":7,"column":66}},"5":{"start":{"line":27,"column":2},"end":{"line":37,"column":5}},"6":{"start":{"line":29,"column":6},"end":{"line":29,"column":32}},"7":{"start":{"line":33,"column":6},"end":{"line":33,"column":46}},"8":{"start":{"line":35,"column":6},"end":{"line":35,"column":26}},"9":{"start":{"line":39,"column":2},"end":{"line":39,"column":28}},"10":{"start":{"line":41,"column":2},"end":{"line":41,"column":17}},"11":{"start":{"line":44,"column":0},"end":{"line":44,"column":25}},"12":{"start":{"line":45,"column":0},"end":{"line":45,"column":26}}},"branchMap":{},"code":["'use strict';","","var clone = require('../../utils/object').clone;","var _flatten = require('../../utils/array').flatten;","","function factory (type, config, load, typed) {","  var matrix = load(require('../../type/matrix/function/matrix'));","","  /**","   * Flatten a multi dimensional matrix into a single dimensional matrix.","   *","   * Syntax:","   *","   *    math.flatten(x)","   *","   * Examples:","   *","   *    math.flatten([[1,2], [3,4]]);   // returns [1, 2, 3, 4]","   *","   * See also:","   *","   *    concat, resize, size, squeeze","   *","   * @param {Matrix | Array} x   Matrix to be flattened","   * @return {Matrix | Array} Returns the flattened matrix","   */","  var flatten = typed('flatten', {","    'Array': function (x) {","      return _flatten(clone(x));","    },","","    'Matrix': function (x) {","      var flat = _flatten(clone(x.toArray()));","      // TODO: return the same matrix type as x","      return matrix(flat);","    }","  });","","  flatten.toTex = undefined; // use default template","","  return flatten;","}","","exports.name = 'flatten';","exports.factory = factory;",""],"l":{"3":1,"4":1,"6":1,"7":0,"27":0,"29":0,"33":0,"35":0,"39":0,"41":0,"44":1,"45":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/matrix/forEach.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/matrix/forEach.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":1,"20":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":32,"loc":{"start":{"line":32,"column":24},"end":{"line":32,"column":47}}},"3":{"name":"_forEach","line":48,"loc":{"start":{"line":48,"column":0},"end":{"line":48,"column":36}}},"4":{"name":"(anonymous_4)","line":52,"loc":{"start":{"line":52,"column":16},"end":{"line":52,"column":40}}},"5":{"name":"(anonymous_5)","line":54,"loc":{"start":{"line":54,"column":20},"end":{"line":54,"column":40}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":72}},"2":{"start":{"line":5,"column":0},"end":{"line":40,"column":1}},"3":{"start":{"line":29,"column":2},"end":{"line":35,"column":5}},"4":{"start":{"line":33,"column":6},"end":{"line":33,"column":33}},"5":{"start":{"line":37,"column":2},"end":{"line":37,"column":28}},"6":{"start":{"line":39,"column":2},"end":{"line":39,"column":17}},"7":{"start":{"line":48,"column":0},"end":{"line":73,"column":1}},"8":{"start":{"line":50,"column":2},"end":{"line":50,"column":40}},"9":{"start":{"line":52,"column":2},"end":{"line":71,"column":4}},"10":{"start":{"line":53,"column":4},"end":{"line":70,"column":5}},"11":{"start":{"line":54,"column":6},"end":{"line":57,"column":9}},"12":{"start":{"line":56,"column":8},"end":{"line":56,"column":40}},"13":{"start":{"line":61,"column":6},"end":{"line":69,"column":7}},"14":{"start":{"line":62,"column":8},"end":{"line":62,"column":24}},"15":{"start":{"line":64,"column":11},"end":{"line":69,"column":7}},"16":{"start":{"line":65,"column":8},"end":{"line":65,"column":31}},"17":{"start":{"line":68,"column":8},"end":{"line":68,"column":38}},"18":{"start":{"line":72,"column":2},"end":{"line":72,"column":21}},"19":{"start":{"line":75,"column":0},"end":{"line":75,"column":25}},"20":{"start":{"line":76,"column":0},"end":{"line":76,"column":26}}},"branchMap":{"1":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":4},"end":{"line":53,"column":4}},{"start":{"line":53,"column":4},"end":{"line":53,"column":4}}]},"2":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":6},"end":{"line":61,"column":6}},{"start":{"line":61,"column":6},"end":{"line":61,"column":6}}]},"3":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":11},"end":{"line":64,"column":11}},{"start":{"line":64,"column":11},"end":{"line":64,"column":11}}]}},"code":["'use strict';","","var maxArgumentCount = require('../../utils/function').maxArgumentCount;","","function factory (type, config, load, typed) {","  /**","   * Iterate over all elements of a matrix/array, and executes the given callback function.","   *","   * Syntax:","   *","   *    math.forEach(x, callback)","   *","   * Examples:","   *","   *    math.forEach([1, 2, 3], function(value) {","   *      console.log(value);","   *    });","   *    // outputs 1, 2, 3","   *","   * See also:","   *","   *    filter, map, sort","   *","   * @param {Matrix | Array} x    The matrix to iterate on.","   * @param {Function} callback   The callback function is invoked with three","   *                              parameters: the value of the element, the index","   *                              of the element, and the Matrix/array being traversed.","   */","  var forEach = typed('forEach', {","    'Array, function': _forEach,","","    'Matrix, function': function (x, callback) {","      return x.forEach(callback);","    }","  });","","  forEach.toTex = undefined; // use default template","","  return forEach;","}","","/**"," * forEach for a multi dimensional array"," * @param {Array} array"," * @param {Function} callback"," * @private"," */","function _forEach (array, callback) {","  // figure out what number of arguments the callback function expects","  var args = maxArgumentCount(callback);","","  var recurse = function (value, index) {","    if (Array.isArray(value)) {","      value.forEach(function (child, i) {","        // we create a copy of the index array and append the new index value","        recurse(child, index.concat(i));","      });","    }","    else {","      // invoke the callback function with the right number of arguments","      if (args === 1) {","        callback(value);","      }","      else if (args === 2) {","        callback(value, index);","      }","      else { // 3 or -1","        callback(value, index, array);","      }","    }","  };","  recurse(array, []);","}","","exports.name = 'forEach';","exports.factory = factory;",""],"l":{"3":1,"5":1,"29":0,"33":0,"37":0,"39":0,"48":1,"50":0,"52":0,"53":0,"54":0,"56":0,"61":0,"62":0,"64":0,"65":0,"68":0,"72":0,"75":1,"76":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/matrix/inv.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/matrix/inv.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":1,"75":1},"b":{"1":[0,0],"2":[0,0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":35,"loc":{"start":{"line":35,"column":22},"end":{"line":35,"column":35}}},"3":{"name":"(anonymous_3)","line":85,"loc":{"start":{"line":85,"column":11},"end":{"line":85,"column":24}}},"4":{"name":"_inv","line":99,"loc":{"start":{"line":99,"column":2},"end":{"line":99,"column":33}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":40}},"2":{"start":{"line":5,"column":0},"end":{"line":204,"column":1}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":72}},"4":{"start":{"line":7,"column":2},"end":{"line":7,"column":65}},"5":{"start":{"line":8,"column":2},"end":{"line":8,"column":62}},"6":{"start":{"line":9,"column":2},"end":{"line":9,"column":61}},"7":{"start":{"line":10,"column":2},"end":{"line":10,"column":63}},"8":{"start":{"line":11,"column":2},"end":{"line":11,"column":52}},"9":{"start":{"line":12,"column":2},"end":{"line":12,"column":44}},"10":{"start":{"line":34,"column":2},"end":{"line":89,"column":5}},"11":{"start":{"line":36,"column":6},"end":{"line":36,"column":71}},"12":{"start":{"line":37,"column":6},"end":{"line":82,"column":7}},"13":{"start":{"line":40,"column":10},"end":{"line":55,"column":11}},"14":{"start":{"line":41,"column":12},"end":{"line":50,"column":13}},"15":{"start":{"line":42,"column":14},"end":{"line":44,"column":17}},"16":{"start":{"line":47,"column":14},"end":{"line":49,"column":16}},"17":{"start":{"line":53,"column":12},"end":{"line":54,"column":56}},"18":{"start":{"line":59,"column":10},"end":{"line":59,"column":29}},"19":{"start":{"line":60,"column":10},"end":{"line":60,"column":29}},"20":{"start":{"line":61,"column":10},"end":{"line":76,"column":11}},"21":{"start":{"line":62,"column":12},"end":{"line":71,"column":13}},"22":{"start":{"line":63,"column":14},"end":{"line":66,"column":16}},"23":{"start":{"line":70,"column":14},"end":{"line":70,"column":41}},"24":{"start":{"line":74,"column":12},"end":{"line":75,"column":56}},"25":{"start":{"line":80,"column":10},"end":{"line":81,"column":54}},"26":{"start":{"line":87,"column":6},"end":{"line":87,"column":32}},"27":{"start":{"line":99,"column":2},"end":{"line":199,"column":3}},"28":{"start":{"line":100,"column":4},"end":{"line":100,"column":29}},"29":{"start":{"line":102,"column":4},"end":{"line":198,"column":5}},"30":{"start":{"line":104,"column":6},"end":{"line":104,"column":24}},"31":{"start":{"line":105,"column":6},"end":{"line":107,"column":7}},"32":{"start":{"line":106,"column":8},"end":{"line":106,"column":69}},"33":{"start":{"line":108,"column":6},"end":{"line":110,"column":9}},"34":{"start":{"line":112,"column":9},"end":{"line":198,"column":5}},"35":{"start":{"line":114,"column":6},"end":{"line":114,"column":23}},"36":{"start":{"line":115,"column":6},"end":{"line":117,"column":7}},"37":{"start":{"line":116,"column":8},"end":{"line":116,"column":69}},"38":{"start":{"line":118,"column":6},"end":{"line":127,"column":8}},"39":{"start":{"line":137,"column":6},"end":{"line":137,"column":27}},"40":{"start":{"line":138,"column":6},"end":{"line":140,"column":7}},"41":{"start":{"line":139,"column":8},"end":{"line":139,"column":29}},"42":{"start":{"line":144,"column":6},"end":{"line":144,"column":34}},"43":{"start":{"line":147,"column":6},"end":{"line":196,"column":7}},"44":{"start":{"line":150,"column":8},"end":{"line":150,"column":14}},"45":{"start":{"line":151,"column":8},"end":{"line":153,"column":9}},"46":{"start":{"line":152,"column":10},"end":{"line":152,"column":14}},"47":{"start":{"line":154,"column":8},"end":{"line":157,"column":9}},"48":{"start":{"line":156,"column":10},"end":{"line":156,"column":71}},"49":{"start":{"line":158,"column":8},"end":{"line":161,"column":9}},"50":{"start":{"line":159,"column":10},"end":{"line":159,"column":22}},"51":{"start":{"line":159,"column":23},"end":{"line":159,"column":35}},"52":{"start":{"line":159,"column":36},"end":{"line":159,"column":48}},"53":{"start":{"line":160,"column":10},"end":{"line":160,"column":22}},"54":{"start":{"line":160,"column":23},"end":{"line":160,"column":35}},"55":{"start":{"line":160,"column":36},"end":{"line":160,"column":48}},"56":{"start":{"line":164,"column":8},"end":{"line":165,"column":22}},"57":{"start":{"line":166,"column":8},"end":{"line":195,"column":9}},"58":{"start":{"line":167,"column":10},"end":{"line":168,"column":24}},"59":{"start":{"line":169,"column":10},"end":{"line":194,"column":11}},"60":{"start":{"line":171,"column":12},"end":{"line":182,"column":13}},"61":{"start":{"line":172,"column":14},"end":{"line":172,"column":57}},"62":{"start":{"line":176,"column":14},"end":{"line":178,"column":15}},"63":{"start":{"line":177,"column":16},"end":{"line":177,"column":61}},"64":{"start":{"line":179,"column":14},"end":{"line":181,"column":15}},"65":{"start":{"line":180,"column":16},"end":{"line":180,"column":62}},"66":{"start":{"line":187,"column":12},"end":{"line":187,"column":22}},"67":{"start":{"line":188,"column":12},"end":{"line":190,"column":13}},"68":{"start":{"line":189,"column":14},"end":{"line":189,"column":45}},"69":{"start":{"line":191,"column":12},"end":{"line":193,"column":13}},"70":{"start":{"line":192,"column":14},"end":{"line":192,"column":45}},"71":{"start":{"line":197,"column":6},"end":{"line":197,"column":15}},"72":{"start":{"line":201,"column":2},"end":{"line":201,"column":52}},"73":{"start":{"line":203,"column":2},"end":{"line":203,"column":13}},"74":{"start":{"line":206,"column":0},"end":{"line":206,"column":21}},"75":{"start":{"line":207,"column":0},"end":{"line":207,"column":26}}},"branchMap":{"1":{"line":36,"type":"cond-expr","locations":[{"start":{"line":36,"column":41},"end":{"line":36,"column":49}},{"start":{"line":36,"column":52},"end":{"line":36,"column":70}}]},"2":{"line":37,"type":"switch","locations":[{"start":{"line":38,"column":8},"end":{"line":55,"column":11}},{"start":{"line":57,"column":8},"end":{"line":76,"column":11}},{"start":{"line":78,"column":8},"end":{"line":81,"column":54}}]},"3":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":10},"end":{"line":40,"column":10}},{"start":{"line":40,"column":10},"end":{"line":40,"column":10}}]},"4":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":12},"end":{"line":41,"column":12}},{"start":{"line":41,"column":12},"end":{"line":41,"column":12}}]},"5":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":10},"end":{"line":61,"column":10}},{"start":{"line":61,"column":10},"end":{"line":61,"column":10}}]},"6":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":12},"end":{"line":62,"column":12}},{"start":{"line":62,"column":12},"end":{"line":62,"column":12}}]},"7":{"line":102,"type":"if","locations":[{"start":{"line":102,"column":4},"end":{"line":102,"column":4}},{"start":{"line":102,"column":4},"end":{"line":102,"column":4}}]},"8":{"line":105,"type":"if","locations":[{"start":{"line":105,"column":6},"end":{"line":105,"column":6}},{"start":{"line":105,"column":6},"end":{"line":105,"column":6}}]},"9":{"line":112,"type":"if","locations":[{"start":{"line":112,"column":9},"end":{"line":112,"column":9}},{"start":{"line":112,"column":9},"end":{"line":112,"column":9}}]},"10":{"line":115,"type":"if","locations":[{"start":{"line":115,"column":6},"end":{"line":115,"column":6}},{"start":{"line":115,"column":6},"end":{"line":115,"column":6}}]},"11":{"line":151,"type":"binary-expr","locations":[{"start":{"line":151,"column":15},"end":{"line":151,"column":23}},{"start":{"line":151,"column":27},"end":{"line":151,"column":39}}]},"12":{"line":154,"type":"if","locations":[{"start":{"line":154,"column":8},"end":{"line":154,"column":8}},{"start":{"line":154,"column":8},"end":{"line":154,"column":8}}]},"13":{"line":154,"type":"binary-expr","locations":[{"start":{"line":154,"column":12},"end":{"line":154,"column":21}},{"start":{"line":154,"column":25},"end":{"line":154,"column":37}}]},"14":{"line":158,"type":"if","locations":[{"start":{"line":158,"column":8},"end":{"line":158,"column":8}},{"start":{"line":158,"column":8},"end":{"line":158,"column":8}}]},"15":{"line":169,"type":"if","locations":[{"start":{"line":169,"column":10},"end":{"line":169,"column":10}},{"start":{"line":169,"column":10},"end":{"line":169,"column":10}}]},"16":{"line":171,"type":"if","locations":[{"start":{"line":171,"column":12},"end":{"line":171,"column":12}},{"start":{"line":171,"column":12},"end":{"line":171,"column":12}}]}},"code":["'use strict';","","var util = require('../../utils/index');","","function factory (type, config, load, typed) {","  var matrix       = load(require('../../type/matrix/function/matrix'));","  var divideScalar = load(require('../arithmetic/divideScalar'));","  var addScalar    = load(require('../arithmetic/addScalar'));","  var multiply     = load(require('../arithmetic/multiply'));","  var unaryMinus   = load(require('../arithmetic/unaryMinus'));","  var det          = load(require('../matrix/det'));","  var eye          = load(require('./eye'));","","  /**","   * Calculate the inverse of a square matrix.","   *","   * Syntax:","   *","   *     math.inv(x)","   *","   * Examples:","   *","   *     math.inv([[1, 2], [3, 4]]);  // returns [[-2, 1], [1.5, -0.5]]","   *     math.inv(4);                 // returns 0.25","   *     1 / 4;                       // returns 0.25","   *","   * See also:","   *","   *     det, transpose","   *","   * @param {number | Complex | Array | Matrix} x     Matrix to be inversed","   * @return {number | Complex | Array | Matrix} The inverse of `x`.","   */","  var inv = typed('inv', {","    'Array | Matrix': function (x) {","      var size = (x.isMatrix === true) ? x.size() : util.array.size(x);","      switch (size.length) {","        case 1:","          // vector","          if (size[0] == 1) {","            if (x.isMatrix === true) {","              return matrix([","                divideScalar(1, x.valueOf()[0])","              ]);","            }","            else {","              return [","                divideScalar(1, x[0])","              ];","            }","          }","          else {","            throw new RangeError('Matrix must be square ' +","            '(size: ' + util.string.format(size) + ')');","          }","","        case 2:","          // two dimensional array","          var rows = size[0];","          var cols = size[1];","          if (rows == cols) {","            if (x.isMatrix === true) {","              return matrix(","                  _inv(x.valueOf(), rows, cols),","                  x.storage()","              );","            }","            else {","              // return an Array","              return _inv(x, rows, cols);","            }","          }","          else {","            throw new RangeError('Matrix must be square ' +","            '(size: ' + util.string.format(size) + ')');","          }","","        default:","          // multi dimensional array","          throw new RangeError('Matrix must be two dimensional ' +","          '(size: ' + util.string.format(size) + ')');","      }","    },","","    'any': function (x) {","      // scalar","      return divideScalar(1, x); // FIXME: create a BigNumber one when configured for bignumbers","    }","  });","","  /**","   * Calculate the inverse of a square matrix","   * @param {Array[]} mat     A square matrix","   * @param {number} rows     Number of rows","   * @param {number} cols     Number of columns, must equal rows","   * @return {Array[]} inv    Inverse matrix","   * @private","   */","  function _inv (mat, rows, cols){","    var r, s, f, value, temp;","","    if (rows == 1) {","      // this is a 1 x 1 matrix","      value = mat[0][0];","      if (value == 0) {","        throw Error('Cannot calculate inverse, determinant is zero');","      }","      return [[","        divideScalar(1, value)","      ]];","    }","    else if (rows == 2) {","      // this is a 2 x 2 matrix","      var d = det(mat);","      if (d == 0) {","        throw Error('Cannot calculate inverse, determinant is zero');","      }","      return [","        [","          divideScalar(mat[1][1], d),","          divideScalar(unaryMinus(mat[0][1]), d)","        ],","        [","          divideScalar(unaryMinus(mat[1][0]), d),","          divideScalar(mat[0][0], d)","        ]","      ];","    }","    else {","      // this is a matrix of 3 x 3 or larger","      // calculate inverse using gauss-jordan elimination","      //      http://en.wikipedia.org/wiki/Gaussian_elimination","      //      http://mathworld.wolfram.com/MatrixInverse.html","      //      http://math.uww.edu/~mcfarlat/inverse.htm","","      // make a copy of the matrix (only the arrays, not of the elements)","      var A = mat.concat();","      for (r = 0; r < rows; r++) {","        A[r] = A[r].concat();","      }","","      // create an identity matrix which in the end will contain the","      // matrix inverse","      var B = eye(rows).valueOf();","","      // loop over all columns, and perform row reductions","      for (var c = 0; c < cols; c++) {","        // element Acc should be non zero. if not, swap content","        // with one of the lower rows","        r = c;","        while (r < rows && A[r][c] == 0) {","          r++;","        }","        if (r == rows || A[r][c] == 0) {","          // TODO: in case of zero det, just return a matrix wih Infinity values? (like octave)","          throw Error('Cannot calculate inverse, determinant is zero');","        }","        if (r != c) {","          temp = A[c]; A[c] = A[r]; A[r] = temp;","          temp = B[c]; B[c] = B[r]; B[r] = temp;","        }","","        // eliminate non-zero values on the other rows at column c","        var Ac = A[c],","            Bc = B[c];","        for (r = 0; r < rows; r++) {","          var Ar = A[r],","              Br = B[r];","          if(r != c) {","            // eliminate value at column c and row r","            if (Ar[c] != 0) {","              f = divideScalar(unaryMinus(Ar[c]), Ac[c]);","","              // add (f * row c) to row r to eliminate the value","              // at column c","              for (s = c; s < cols; s++) {","                Ar[s] = addScalar(Ar[s], multiply(f, Ac[s]));","              }","              for (s = 0; s < cols; s++) {","                Br[s] = addScalar(Br[s],  multiply(f, Bc[s]));","              }","            }","          }","          else {","            // normalize value at Acc to 1,","            // divide each value on row r with the value at Acc","            f = Ac[c];","            for (s = c; s < cols; s++) {","              Ar[s] = divideScalar(Ar[s], f);","            }","            for (s = 0; s < cols; s++) {","              Br[s] = divideScalar(Br[s], f);","            }","          }","        }","      }","      return B;","    }","  }","","  inv.toTex = {1: '\\\\left(${args[0]}\\\\right)^{-1}'};","","  return inv;","}","","exports.name = 'inv';","exports.factory = factory;",""],"l":{"3":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"34":0,"36":0,"37":0,"40":0,"41":0,"42":0,"47":0,"53":0,"59":0,"60":0,"61":0,"62":0,"63":0,"70":0,"74":0,"80":0,"87":0,"99":1,"100":0,"102":0,"104":0,"105":0,"106":0,"108":0,"112":0,"114":0,"115":0,"116":0,"118":0,"137":0,"138":0,"139":0,"144":0,"147":0,"150":0,"151":0,"152":0,"154":0,"156":0,"158":0,"159":0,"160":0,"164":0,"166":0,"167":0,"169":0,"171":0,"172":0,"176":0,"177":0,"179":0,"180":0,"187":0,"188":0,"189":0,"191":0,"192":0,"197":0,"201":0,"203":0,"206":1,"207":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/matrix/kron.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/matrix/kron.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":1,"25":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":44}}},"2":{"name":"(anonymous_2)","line":36,"loc":{"start":{"line":36,"column":26},"end":{"line":36,"column":41}}},"3":{"name":"(anonymous_3)","line":40,"loc":{"start":{"line":40,"column":25},"end":{"line":40,"column":40}}},"4":{"name":"(anonymous_4)","line":44,"loc":{"start":{"line":44,"column":25},"end":{"line":44,"column":40}}},"5":{"name":"_kron","line":60,"loc":{"start":{"line":60,"column":4},"end":{"line":60,"column":25}}},"6":{"name":"(anonymous_6)","line":77,"loc":{"start":{"line":77,"column":21},"end":{"line":77,"column":33}}},"7":{"name":"(anonymous_7)","line":78,"loc":{"start":{"line":78,"column":25},"end":{"line":78,"column":37}}},"8":{"name":"(anonymous_8)","line":79,"loc":{"start":{"line":79,"column":29},"end":{"line":79,"column":41}}},"9":{"name":"(anonymous_9)","line":80,"loc":{"start":{"line":80,"column":33},"end":{"line":80,"column":45}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}},"2":{"start":{"line":5,"column":0},"end":{"line":87,"column":1}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":66}},"4":{"start":{"line":7,"column":2},"end":{"line":7,"column":68}},"5":{"start":{"line":35,"column":4},"end":{"line":49,"column":7}},"6":{"start":{"line":37,"column":12},"end":{"line":37,"column":59}},"7":{"start":{"line":41,"column":12},"end":{"line":41,"column":49}},"8":{"start":{"line":45,"column":12},"end":{"line":45,"column":49}},"9":{"start":{"line":51,"column":4},"end":{"line":51,"column":16}},"10":{"start":{"line":60,"column":4},"end":{"line":86,"column":5}},"11":{"start":{"line":62,"column":8},"end":{"line":65,"column":9}},"12":{"start":{"line":64,"column":10},"end":{"line":64,"column":18}},"13":{"start":{"line":66,"column":8},"end":{"line":69,"column":9}},"14":{"start":{"line":68,"column":10},"end":{"line":68,"column":17}},"15":{"start":{"line":70,"column":8},"end":{"line":73,"column":9}},"16":{"start":{"line":71,"column":12},"end":{"line":72,"column":97}},"17":{"start":{"line":74,"column":8},"end":{"line":74,"column":19}},"18":{"start":{"line":75,"column":8},"end":{"line":75,"column":19}},"19":{"start":{"line":77,"column":8},"end":{"line":85,"column":24}},"20":{"start":{"line":78,"column":12},"end":{"line":84,"column":15}},"21":{"start":{"line":79,"column":16},"end":{"line":83,"column":35}},"22":{"start":{"line":80,"column":20},"end":{"line":82,"column":23}},"23":{"start":{"line":81,"column":24},"end":{"line":81,"column":60}},"24":{"start":{"line":89,"column":0},"end":{"line":89,"column":22}},"25":{"start":{"line":90,"column":0},"end":{"line":90,"column":26}}},"branchMap":{"1":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":8},"end":{"line":62,"column":8}},{"start":{"line":62,"column":8},"end":{"line":62,"column":8}}]},"2":{"line":66,"type":"if","locations":[{"start":{"line":66,"column":8},"end":{"line":66,"column":8}},{"start":{"line":66,"column":8},"end":{"line":66,"column":8}}]},"3":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":8},"end":{"line":70,"column":8}},{"start":{"line":70,"column":8},"end":{"line":70,"column":8}}]},"4":{"line":70,"type":"binary-expr","locations":[{"start":{"line":70,"column":12},"end":{"line":70,"column":30}},{"start":{"line":70,"column":34},"end":{"line":70,"column":52}}]},"5":{"line":77,"type":"binary-expr","locations":[{"start":{"line":77,"column":15},"end":{"line":85,"column":18}},{"start":{"line":85,"column":22},"end":{"line":85,"column":23}}]}},"code":["'use strict';","","var size = require('../../utils/array').size;","","function factory(type, config, load, typed) {","  var matrix = load(require('../../type/matrix/function/matrix'));","  var multiplyScalar = load(require('../arithmetic/multiplyScalar'))","    /**","     * Calculates the kronecker product of 2 matrices or vectors.","     *","     * NOTE: If a one dimensional vector / matrix is given, it will be","     * wrapped so its two dimensions.","     * See the examples.","     *","     * Syntax:","     *","     *    math.kron(x, y)","     *","     * Examples:","     *","     *    math.kron([[1, 0], [0, 1]], [[1, 2], [3, 4]]);","     *    // returns [ [ 1, 2, 0, 0 ], [ 3, 4, 0, 0 ], [ 0, 0, 1, 2 ], [ 0, 0, 3, 4 ] ]","     *","     *    math.kron([1,1], [2,3,4]);","     *    // returns [ [ 2, 3, 4, 2, 3, 4 ] ]","     *","     * See also:","     *","     *    multiply, dot, cross","     *","     * @param  {Array | Matrix} x     First vector","     * @param  {Array | Matrix} y     Second vector","     * @return {Array | Matrix}       Returns the kronecker product of `x` and `y`","     */","    var kron = typed('kron', {","        'Matrix, Matrix': function(x, y) {","            return matrix(_kron(x.toArray(), y.toArray()));","        },","","        'Matrix, Array': function(x, y) {","            return matrix(_kron(x.toArray(), y));","        },","","        'Array, Matrix': function(x, y) {","            return matrix(_kron(x, y.toArray()));","        },","","        'Array, Array': _kron","    });","","    return kron;","","    /**","     * Calculate the kronecker product of two matrices / vectors","     * @param {Array} a  First vector","     * @param {Array} b  Second vector","     * @returns {Array} Returns the kronecker product of x and y","     * @private","     */","    function _kron(a, b) {","        // Deal with the dimensions of the matricies.","        if (size(a).length === 1) {","          // Wrap it in a 2D Matrix","          a = [a];","        }","        if (size(b).length === 1) {","          // Wrap it in a 2D Matrix","          b = [b]","        }","        if (size(a).length > 2 || size(b).length > 2) {","            throw new RangeError('Vectors with dimensions greater then 2 are not supported expected ' +","            '(Size x = ' + JSON.stringify(a.length) + ', y = ' + JSON.stringify(b.length) + ')');","        }","        var t = [];","        var r = [];","","        return a.map(function(a) {","            return b.map(function(b) {","                return a.map(function(y) {","                    return b.map(function(x) {","                        return r.push(multiplyScalar(y, x));","                    });","                }, t.push(r = []));","            });","        }, t = []) && t;","    }","}","","exports.name = 'kron';","exports.factory = factory;",""],"l":{"3":1,"5":1,"6":0,"7":0,"35":0,"37":0,"41":0,"45":0,"51":0,"60":1,"62":0,"64":0,"66":0,"68":0,"70":0,"71":0,"74":0,"75":0,"77":0,"78":0,"79":0,"80":0,"81":0,"89":1,"90":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/matrix/map.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/matrix/map.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":1,"20":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":24},"end":{"line":33,"column":47}}},"3":{"name":"_map","line":50,"loc":{"start":{"line":50,"column":0},"end":{"line":50,"column":32}}},"4":{"name":"(anonymous_4)","line":54,"loc":{"start":{"line":54,"column":16},"end":{"line":54,"column":40}}},"5":{"name":"(anonymous_5)","line":56,"loc":{"start":{"line":56,"column":23},"end":{"line":56,"column":43}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":72}},"2":{"start":{"line":5,"column":0},"end":{"line":41,"column":1}},"3":{"start":{"line":30,"column":2},"end":{"line":36,"column":5}},"4":{"start":{"line":34,"column":6},"end":{"line":34,"column":29}},"5":{"start":{"line":38,"column":2},"end":{"line":38,"column":24}},"6":{"start":{"line":40,"column":2},"end":{"line":40,"column":13}},"7":{"start":{"line":50,"column":0},"end":{"line":76,"column":1}},"8":{"start":{"line":52,"column":2},"end":{"line":52,"column":40}},"9":{"start":{"line":54,"column":2},"end":{"line":73,"column":4}},"10":{"start":{"line":55,"column":4},"end":{"line":72,"column":5}},"11":{"start":{"line":56,"column":6},"end":{"line":59,"column":9}},"12":{"start":{"line":58,"column":8},"end":{"line":58,"column":47}},"13":{"start":{"line":63,"column":6},"end":{"line":71,"column":7}},"14":{"start":{"line":64,"column":8},"end":{"line":64,"column":31}},"15":{"start":{"line":66,"column":11},"end":{"line":71,"column":7}},"16":{"start":{"line":67,"column":8},"end":{"line":67,"column":38}},"17":{"start":{"line":70,"column":8},"end":{"line":70,"column":45}},"18":{"start":{"line":75,"column":2},"end":{"line":75,"column":28}},"19":{"start":{"line":78,"column":0},"end":{"line":78,"column":21}},"20":{"start":{"line":79,"column":0},"end":{"line":79,"column":26}}},"branchMap":{"1":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":4},"end":{"line":55,"column":4}},{"start":{"line":55,"column":4},"end":{"line":55,"column":4}}]},"2":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":6},"end":{"line":63,"column":6}},{"start":{"line":63,"column":6},"end":{"line":63,"column":6}}]},"3":{"line":66,"type":"if","locations":[{"start":{"line":66,"column":11},"end":{"line":66,"column":11}},{"start":{"line":66,"column":11},"end":{"line":66,"column":11}}]}},"code":["'use strict';","","var maxArgumentCount = require('../../utils/function').maxArgumentCount;","","function factory (type, config, load, typed) {","  /**","   * Create a new matrix or array with the results of the callback function executed on","   * each entry of the matrix/array.","   *","   * Syntax:","   *","   *    math.map(x, callback)","   *","   * Examples:","   *","   *    math.map([1, 2, 3], function(value) {","   *      return value * value;","   *    });  // returns [1, 4, 9]","   *","   * See also:","   *","   *    filter, forEach, sort","   *","   * @param {Matrix | Array} x    The matrix to iterate on.","   * @param {Function} callback   The callback method is invoked with three","   *                              parameters: the value of the element, the index","   *                              of the element, and the matrix being traversed.","   * @return {Matrix | array}     Transformed map of x","   */","  var map = typed('map', {","    'Array, function': _map,","","    'Matrix, function': function (x, callback) {","      return x.map(callback);","    }","  });","","  map.toTex = undefined; // use default template","","  return map;","}","","/**"," * Map for a multi dimensional array"," * @param {Array} array"," * @param {Function} callback"," * @return {Array}"," * @private"," */","function _map (array, callback) {","  // figure out what number of arguments the callback function expects","  var args = maxArgumentCount(callback);","","  var recurse = function (value, index) {","    if (Array.isArray(value)) {","      return value.map(function (child, i) {","        // we create a copy of the index array and append the new index value","        return recurse(child, index.concat(i));","      });","    }","    else {","      // invoke the callback function with the right number of arguments","      if (args === 1) {","        return callback(value);","      }","      else if (args === 2) {","        return callback(value, index);","      }","      else { // 3 or -1","        return callback(value, index, array);","      }","    }","  };","","  return recurse(array, []);","}","","exports.name = 'map';","exports.factory = factory;",""],"l":{"3":1,"5":1,"30":0,"34":0,"38":0,"40":0,"50":1,"52":0,"54":0,"55":0,"56":0,"58":0,"63":0,"64":0,"66":0,"67":0,"70":0,"75":0,"78":1,"79":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/matrix/ones.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/matrix/ones.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":1,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":1,"40":0,"41":0,"42":0,"43":1,"44":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"fnMap":{"1":{"name":"factory","line":6,"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":45}}},"2":{"name":"(anonymous_2)","line":43,"loc":{"start":{"line":43,"column":8},"end":{"line":43,"column":20}}},"3":{"name":"(anonymous_3)","line":51,"loc":{"start":{"line":51,"column":38},"end":{"line":51,"column":54}}},"4":{"name":"(anonymous_4)","line":67,"loc":{"start":{"line":67,"column":14},"end":{"line":67,"column":30}}},"5":{"name":"(anonymous_5)","line":72,"loc":{"start":{"line":72,"column":30},"end":{"line":72,"column":54}}},"6":{"name":"_ones","line":88,"loc":{"start":{"line":88,"column":2},"end":{"line":88,"column":31}}},"7":{"name":"_normalize","line":112,"loc":{"start":{"line":112,"column":2},"end":{"line":112,"column":28}}},"8":{"name":"(anonymous_8)","line":114,"loc":{"start":{"line":114,"column":17},"end":{"line":114,"column":46}}},"9":{"name":"_validate","line":124,"loc":{"start":{"line":124,"column":2},"end":{"line":124,"column":28}}},"10":{"name":"(anonymous_10)","line":125,"loc":{"start":{"line":125,"column":17},"end":{"line":125,"column":34}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":49}},"3":{"start":{"line":6,"column":0},"end":{"line":131,"column":1}},"4":{"start":{"line":7,"column":2},"end":{"line":7,"column":66}},"5":{"start":{"line":42,"column":2},"end":{"line":75,"column":5}},"6":{"start":{"line":44,"column":6},"end":{"line":46,"column":33}},"7":{"start":{"line":52,"column":6},"end":{"line":52,"column":39}},"8":{"start":{"line":53,"column":6},"end":{"line":62,"column":7}},"9":{"start":{"line":54,"column":8},"end":{"line":54,"column":32}},"10":{"start":{"line":55,"column":8},"end":{"line":55,"column":35}},"11":{"start":{"line":57,"column":11},"end":{"line":62,"column":7}},"12":{"start":{"line":58,"column":8},"end":{"line":58,"column":27}},"13":{"start":{"line":61,"column":8},"end":{"line":61,"column":38}},"14":{"start":{"line":68,"column":6},"end":{"line":68,"column":34}},"15":{"start":{"line":69,"column":6},"end":{"line":69,"column":43}},"16":{"start":{"line":73,"column":6},"end":{"line":73,"column":44}},"17":{"start":{"line":77,"column":2},"end":{"line":77,"column":25}},"18":{"start":{"line":79,"column":2},"end":{"line":79,"column":14}},"19":{"start":{"line":88,"column":2},"end":{"line":109,"column":3}},"20":{"start":{"line":89,"column":4},"end":{"line":89,"column":41}},"21":{"start":{"line":90,"column":4},"end":{"line":90,"column":65}},"22":{"start":{"line":91,"column":4},"end":{"line":91,"column":20}},"23":{"start":{"line":93,"column":4},"end":{"line":108,"column":5}},"24":{"start":{"line":95,"column":6},"end":{"line":95,"column":29}},"25":{"start":{"line":96,"column":6},"end":{"line":98,"column":7}},"26":{"start":{"line":97,"column":8},"end":{"line":97,"column":44}},"27":{"start":{"line":99,"column":6},"end":{"line":99,"column":15}},"28":{"start":{"line":103,"column":6},"end":{"line":103,"column":19}},"29":{"start":{"line":104,"column":6},"end":{"line":106,"column":7}},"30":{"start":{"line":105,"column":8},"end":{"line":105,"column":47}},"31":{"start":{"line":107,"column":6},"end":{"line":107,"column":17}},"32":{"start":{"line":112,"column":2},"end":{"line":121,"column":3}},"33":{"start":{"line":113,"column":4},"end":{"line":113,"column":30}},"34":{"start":{"line":114,"column":4},"end":{"line":119,"column":7}},"35":{"start":{"line":115,"column":6},"end":{"line":118,"column":7}},"36":{"start":{"line":116,"column":8},"end":{"line":116,"column":29}},"37":{"start":{"line":117,"column":8},"end":{"line":117,"column":38}},"38":{"start":{"line":120,"column":4},"end":{"line":120,"column":25}},"39":{"start":{"line":124,"column":2},"end":{"line":130,"column":3}},"40":{"start":{"line":125,"column":4},"end":{"line":129,"column":7}},"41":{"start":{"line":126,"column":6},"end":{"line":128,"column":7}},"42":{"start":{"line":127,"column":8},"end":{"line":127,"column":81}},"43":{"start":{"line":133,"column":0},"end":{"line":133,"column":22}},"44":{"start":{"line":134,"column":0},"end":{"line":134,"column":26}}},"branchMap":{"1":{"line":44,"type":"cond-expr","locations":[{"start":{"line":45,"column":12},"end":{"line":45,"column":21}},{"start":{"line":46,"column":12},"end":{"line":46,"column":32}}]},"2":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":6},"end":{"line":53,"column":6}},{"start":{"line":53,"column":6},"end":{"line":53,"column":6}}]},"3":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":11},"end":{"line":57,"column":11}},{"start":{"line":57,"column":11},"end":{"line":57,"column":11}}]},"4":{"line":90,"type":"cond-expr","locations":[{"start":{"line":90,"column":39},"end":{"line":90,"column":60}},{"start":{"line":90,"column":63},"end":{"line":90,"column":64}}]},"5":{"line":93,"type":"if","locations":[{"start":{"line":93,"column":4},"end":{"line":93,"column":4}},{"start":{"line":93,"column":4},"end":{"line":93,"column":4}}]},"6":{"line":96,"type":"if","locations":[{"start":{"line":96,"column":6},"end":{"line":96,"column":6}},{"start":{"line":96,"column":6},"end":{"line":96,"column":6}}]},"7":{"line":104,"type":"if","locations":[{"start":{"line":104,"column":6},"end":{"line":104,"column":6}},{"start":{"line":104,"column":6},"end":{"line":104,"column":6}}]},"8":{"line":115,"type":"if","locations":[{"start":{"line":115,"column":6},"end":{"line":115,"column":6}},{"start":{"line":115,"column":6},"end":{"line":115,"column":6}}]},"9":{"line":115,"type":"binary-expr","locations":[{"start":{"line":115,"column":10},"end":{"line":115,"column":15}},{"start":{"line":115,"column":19},"end":{"line":115,"column":45}}]},"10":{"line":126,"type":"if","locations":[{"start":{"line":126,"column":6},"end":{"line":126,"column":6}},{"start":{"line":126,"column":6},"end":{"line":126,"column":6}}]},"11":{"line":126,"type":"binary-expr","locations":[{"start":{"line":126,"column":10},"end":{"line":126,"column":35}},{"start":{"line":126,"column":39},"end":{"line":126,"column":56}},{"start":{"line":126,"column":60},"end":{"line":126,"column":69}}]}},"code":["'use strict';","","var isInteger = require('../../utils/number').isInteger;","var resize = require('../../utils/array').resize;","","function factory (type, config, load, typed) {","  var matrix = load(require('../../type/matrix/function/matrix'));","","  /**","   * Create a matrix filled with ones. The created matrix can have one or","   * multiple dimensions.","   *","   * Syntax:","   *","   *    math.ones(m)","   *    math.ones(m, format)","   *    math.ones(m, n)","   *    math.ones(m, n, format)","   *    math.ones([m, n])","   *    math.ones([m, n], format)","   *    math.ones([m, n, p, ...])","   *    math.ones([m, n, p, ...], format)","   *","   * Examples:","   *","   *    math.ones(3);                   // returns [1, 1, 1]","   *    math.ones(3, 2);                // returns [[1, 1], [1, 1], [1, 1]]","   *    math.ones(3, 2, 'dense');       // returns Dense Matrix [[1, 1], [1, 1], [1, 1]]","   *","   *    var A = [[1, 2, 3], [4, 5, 6]];","   *    math.ones(math.size(A));       // returns [[1, 1, 1], [1, 1, 1]]","   *","   * See also:","   *","   *    zeros, eye, size, range","   *","   * @param {...number | Array} size    The size of each dimension of the matrix","   * @param {string} [format]           The Matrix storage format","   *","   * @return {Array | Matrix | number}  A matrix filled with ones","   */","  var ones = typed('ones', {","    '': function () {","      return (config.matrix === 'Array')","          ? _ones([])","          : _ones([], 'default');","    },","","    // math.ones(m, n, p, ..., format)","    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this","    '...number | BigNumber | string': function (size) {","      var last = size[size.length - 1];","      if (typeof last === 'string') {","        var format = size.pop();","        return _ones(size, format);","      }","      else if (config.matrix === 'Array') {","        return _ones(size);","      }","      else {","        return _ones(size, 'default');","      }","    },","","    'Array': _ones,","","    'Matrix': function (size) {","      var format = size.storage();","      return _ones(size.valueOf(), format);","    },","","    'Array | Matrix, string': function (size, format) {","      return _ones (size.valueOf(), format);","    }","  });","","  ones.toTex = undefined; // use default template","","  return ones;","","  /**","   * Create an Array or Matrix with ones","   * @param {Array} size","   * @param {string} [format='default']","   * @return {Array | Matrix}","   * @private","   */","  function _ones(size, format) {","    var hasBigNumbers = _normalize(size);","    var defaultValue = hasBigNumbers ? new type.BigNumber(1) : 1;","    _validate(size);","","    if (format) {","      // return a matrix","      var m = matrix(format);","      if (size.length > 0) {","        return m.resize(size, defaultValue);","      }","      return m;","    }","    else {","      // return an Array","      var arr = [];","      if (size.length > 0) {","        return resize(arr, size, defaultValue);","      }","      return arr;","    }","  }","","  // replace BigNumbers with numbers, returns true if size contained BigNumbers","  function _normalize(size) {","    var hasBigNumbers = false;","    size.forEach(function (value, index, arr) {","      if (value && value.isBigNumber === true) {","        hasBigNumbers = true;","        arr[index] = value.toNumber();","      }","    });","    return hasBigNumbers;","  }","","  // validate arguments","  function _validate (size) {","    size.forEach(function (value) {","      if (typeof value !== 'number' || !isInteger(value) || value < 0) {","        throw new Error('Parameters in function ones must be positive integers');","      }","    });","  }","}","","exports.name = 'ones';","exports.factory = factory;",""],"l":{"3":1,"4":1,"6":1,"7":0,"42":0,"44":0,"52":0,"53":0,"54":0,"55":0,"57":0,"58":0,"61":0,"68":0,"69":0,"73":0,"77":0,"79":0,"88":1,"89":0,"90":0,"91":0,"93":0,"95":0,"96":0,"97":0,"99":0,"103":0,"104":0,"105":0,"107":0,"112":1,"113":0,"114":0,"115":0,"116":0,"117":0,"120":0,"124":1,"125":0,"126":0,"127":0,"133":1,"134":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/matrix/partitionSelect.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/matrix/partitionSelect.js","s":{"1":1,"2":1,"3":0,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":1,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":1,"46":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"desc","line":7,"loc":{"start":{"line":7,"column":2},"end":{"line":7,"column":22}}},"3":{"name":"(anonymous_3)","line":44,"loc":{"start":{"line":44,"column":30},"end":{"line":44,"column":46}}},"4":{"name":"(anonymous_4)","line":48,"loc":{"start":{"line":48,"column":38},"end":{"line":48,"column":63}}},"5":{"name":"_partitionSelect","line":63,"loc":{"start":{"line":63,"column":2},"end":{"line":63,"column":43}}},"6":{"name":"quickSelect","line":91,"loc":{"start":{"line":91,"column":2},"end":{"line":91,"column":40}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":133,"column":1}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":51}},"4":{"start":{"line":7,"column":2},"end":{"line":9,"column":3}},"5":{"start":{"line":8,"column":4},"end":{"line":8,"column":22}},"6":{"start":{"line":43,"column":2},"end":{"line":61,"column":5}},"7":{"start":{"line":45,"column":6},"end":{"line":45,"column":41}},"8":{"start":{"line":49,"column":6},"end":{"line":57,"column":7}},"9":{"start":{"line":50,"column":8},"end":{"line":50,"column":43}},"10":{"start":{"line":52,"column":11},"end":{"line":57,"column":7}},"11":{"start":{"line":53,"column":8},"end":{"line":53,"column":44}},"12":{"start":{"line":56,"column":8},"end":{"line":56,"column":66}},"13":{"start":{"line":63,"column":2},"end":{"line":79,"column":3}},"14":{"start":{"line":64,"column":4},"end":{"line":66,"column":5}},"15":{"start":{"line":65,"column":6},"end":{"line":65,"column":58}},"16":{"start":{"line":68,"column":4},"end":{"line":74,"column":5}},"17":{"start":{"line":69,"column":6},"end":{"line":69,"column":26}},"18":{"start":{"line":70,"column":6},"end":{"line":72,"column":7}},"19":{"start":{"line":71,"column":8},"end":{"line":71,"column":67}},"20":{"start":{"line":73,"column":6},"end":{"line":73,"column":50}},"21":{"start":{"line":76,"column":4},"end":{"line":78,"column":5}},"22":{"start":{"line":77,"column":6},"end":{"line":77,"column":40}},"23":{"start":{"line":91,"column":2},"end":{"line":132,"column":3}},"24":{"start":{"line":92,"column":4},"end":{"line":94,"column":5}},"25":{"start":{"line":93,"column":6},"end":{"line":93,"column":41}},"26":{"start":{"line":96,"column":4},"end":{"line":96,"column":17}},"27":{"start":{"line":97,"column":4},"end":{"line":97,"column":28}},"28":{"start":{"line":100,"column":4},"end":{"line":129,"column":5}},"29":{"start":{"line":101,"column":6},"end":{"line":101,"column":19}},"30":{"start":{"line":102,"column":6},"end":{"line":102,"column":17}},"31":{"start":{"line":103,"column":6},"end":{"line":103,"column":74}},"32":{"start":{"line":106,"column":6},"end":{"line":116,"column":7}},"33":{"start":{"line":108,"column":8},"end":{"line":115,"column":9}},"34":{"start":{"line":109,"column":10},"end":{"line":109,"column":27}},"35":{"start":{"line":110,"column":10},"end":{"line":110,"column":26}},"36":{"start":{"line":111,"column":10},"end":{"line":111,"column":23}},"37":{"start":{"line":112,"column":10},"end":{"line":112,"column":14}},"38":{"start":{"line":114,"column":10},"end":{"line":114,"column":14}},"39":{"start":{"line":119,"column":6},"end":{"line":121,"column":7}},"40":{"start":{"line":120,"column":8},"end":{"line":120,"column":12}},"41":{"start":{"line":124,"column":6},"end":{"line":128,"column":7}},"42":{"start":{"line":125,"column":8},"end":{"line":125,"column":15}},"43":{"start":{"line":127,"column":8},"end":{"line":127,"column":21}},"44":{"start":{"line":131,"column":4},"end":{"line":131,"column":18}},"45":{"start":{"line":135,"column":0},"end":{"line":135,"column":33}},"46":{"start":{"line":136,"column":0},"end":{"line":136,"column":26}}},"branchMap":{"1":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":6},"end":{"line":49,"column":6}},{"start":{"line":49,"column":6},"end":{"line":49,"column":6}}]},"2":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":11},"end":{"line":52,"column":11}},{"start":{"line":52,"column":11},"end":{"line":52,"column":11}}]},"3":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":4},"end":{"line":64,"column":4}},{"start":{"line":64,"column":4},"end":{"line":64,"column":4}}]},"4":{"line":64,"type":"binary-expr","locations":[{"start":{"line":64,"column":8},"end":{"line":64,"column":21}},{"start":{"line":64,"column":25},"end":{"line":64,"column":30}}]},"5":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":4},"end":{"line":68,"column":4}},{"start":{"line":68,"column":4},"end":{"line":68,"column":4}}]},"6":{"line":68,"type":"binary-expr","locations":[{"start":{"line":68,"column":8},"end":{"line":68,"column":9}},{"start":{"line":68,"column":13},"end":{"line":68,"column":23}}]},"7":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":6},"end":{"line":70,"column":6}},{"start":{"line":70,"column":6},"end":{"line":70,"column":6}}]},"8":{"line":76,"type":"if","locations":[{"start":{"line":76,"column":4},"end":{"line":76,"column":4}},{"start":{"line":76,"column":4},"end":{"line":76,"column":4}}]},"9":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":4},"end":{"line":92,"column":4}},{"start":{"line":92,"column":4},"end":{"line":92,"column":4}}]},"10":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":8},"end":{"line":108,"column":8}},{"start":{"line":108,"column":8},"end":{"line":108,"column":8}}]},"11":{"line":119,"type":"if","locations":[{"start":{"line":119,"column":6},"end":{"line":119,"column":6}},{"start":{"line":119,"column":6},"end":{"line":119,"column":6}}]},"12":{"line":124,"type":"if","locations":[{"start":{"line":124,"column":6},"end":{"line":124,"column":6}},{"start":{"line":124,"column":6},"end":{"line":124,"column":6}}]}},"code":["'use strict';","","var isInteger = require('../../utils/number').isInteger;","","function factory (type, config, load, typed) {","  var asc = load(require('../relational/compare'));","  function desc(a, b) {","    return -asc(a, b);","  }","","  /**","   * Partition-based selection of an array or 1D matrix.","   * Will find the kth smallest value, and mutates the input array.","   * Uses Quickselect.","   *","   * Syntax:","   *","   *    math.partitionSelect(x, k)","   *    math.partitionSelect(x, k, compare)","   *","   * Examples:","   *","   *    math.partitionSelect([5, 10, 1], 2);           // returns 10","   *    math.partitionSelect(['C', 'B', 'A', 'D'], 1); // returns 'B'","   *","   *    function sortByLength (a, b) {","   *      return a.length - b.length;","   *    }","   *    math.partitionSelect(['Langdon', 'Tom', 'Sara'], 2, sortByLength); // returns 'Langdon'","   *","   * See also:","   *","   *    sort","   *","   * @param {Matrix | Array} x    A one dimensional matrix or array to sort","   * @param {Number} k            The kth smallest value to be retrieved; zero-based index","   * @param {Function | 'asc' | 'desc'} [compare='asc']","   *        An optional comparator function. The function is called as","   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,","   *        and 0 when a == b.","   * @return {*} Returns the kth lowest value.","   */","  return typed('partitionSelect', {","    'Array | Matrix, number': function (x, k) {","      return _partitionSelect(x, k, asc);","    },","","    'Array | Matrix, number, string': function (x, k, compare) {","      if (compare === 'asc') {","        return _partitionSelect(x, k, asc);","      }","      else if (compare === 'desc') {","        return _partitionSelect(x, k, desc);","      }","      else {","        throw new Error('Compare string must be \"asc\" or \"desc\"');","      }","    },","","    'Array | Matrix, number, function': _partitionSelect","  });","","  function _partitionSelect(x, k, compare) {","    if (!isInteger(k) || k < 0) {","      throw new Error('k must be a non-negative integer');","    }","","    if (x && x.isMatrix) {","      var size = x.size();","      if (size.length > 1) {","        throw new Error('Only one dimensional matrices supported');","      }","      return quickSelect(x.valueOf(), k, compare);","    }","","    if (Array.isArray(x)) {","      return quickSelect(x, k, compare);","    }","  }","","  /**","   * Quickselect algorithm.","   * Code adapted from:","   * http://blog.teamleadnet.com/2012/07/quick-select-algorithm-find-kth-element.html","   *","   * @param {Array} arr","   * @param {Number} k","   * @param {Function} compare","   * @private","   */","  function quickSelect(arr, k, compare) {","    if (k >= arr.length) {","      throw new Error('k out of bounds');","    }","","    var from = 0;","    var to = arr.length - 1;","","    // if from == to we reached the kth element","    while (from < to) {","      var r = from;","      var w = to;","      var pivot = arr[Math.floor(Math.random() * (to - from + 1)) + from];","","      // stop if the reader and writer meets","      while (r < w) {","        // arr[r] >= pivot","        if (compare(arr[r], pivot) >= 0) { // put the large values at the end","          var tmp = arr[w];","          arr[w] = arr[r];","          arr[r] = tmp;","          --w;","        } else { // the value is smaller than the pivot, skip","          ++r;","        }","      }","","      // if we stepped up (r++) we need to step one down (arr[r] > pivot)","      if (compare(arr[r], pivot) > 0) {","        --r;","      }","","      // the r pointer is on the end of the first k elements","      if (k <= r) {","        to = r;","      } else {","        from = r + 1;","      }","    }","","    return arr[k];","  }","}","","exports.name = 'partitionSelect';","exports.factory = factory;",""],"l":{"3":1,"5":1,"6":0,"7":1,"8":0,"43":0,"45":0,"49":0,"50":0,"52":0,"53":0,"56":0,"63":1,"64":0,"65":0,"68":0,"69":0,"70":0,"71":0,"73":0,"76":0,"77":0,"91":1,"92":0,"93":0,"96":0,"97":0,"100":0,"101":0,"102":0,"103":0,"106":0,"108":0,"109":0,"110":0,"111":0,"112":0,"114":0,"119":0,"120":0,"124":0,"125":0,"127":0,"131":0,"135":1,"136":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/matrix/range.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/matrix/range.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1,"17":0,"18":1,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":1,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":1,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":1,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":1,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":1,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":1,"85":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0},"fnMap":{"1":{"name":"factory","line":3,"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}}},"2":{"name":"(anonymous_2)","line":59,"loc":{"start":{"line":59,"column":23},"end":{"line":59,"column":45}}},"3":{"name":"(anonymous_3)","line":62,"loc":{"start":{"line":62,"column":30},"end":{"line":62,"column":58}}},"4":{"name":"(anonymous_4)","line":65,"loc":{"start":{"line":65,"column":31},"end":{"line":65,"column":65}}},"5":{"name":"(anonymous_5)","line":70,"loc":{"start":{"line":70,"column":39},"end":{"line":70,"column":79}}},"6":{"name":"(anonymous_6)","line":76,"loc":{"start":{"line":76,"column":29},"end":{"line":76,"column":51}}},"7":{"name":"(anonymous_7)","line":79,"loc":{"start":{"line":79,"column":39},"end":{"line":79,"column":67}}},"8":{"name":"(anonymous_8)","line":82,"loc":{"start":{"line":82,"column":37},"end":{"line":82,"column":71}}},"9":{"name":"(anonymous_9)","line":87,"loc":{"start":{"line":87,"column":48},"end":{"line":87,"column":88}}},"10":{"name":"_out","line":99,"loc":{"start":{"line":99,"column":2},"end":{"line":99,"column":21}}},"11":{"name":"_strRange","line":103,"loc":{"start":{"line":103,"column":2},"end":{"line":103,"column":39}}},"12":{"name":"_rangeEx","line":131,"loc":{"start":{"line":131,"column":2},"end":{"line":131,"column":39}}},"13":{"name":"_rangeInc","line":158,"loc":{"start":{"line":158,"column":2},"end":{"line":158,"column":40}}},"14":{"name":"_bigRangeEx","line":185,"loc":{"start":{"line":185,"column":2},"end":{"line":185,"column":42}}},"15":{"name":"_bigRangeInc","line":212,"loc":{"start":{"line":212,"column":2},"end":{"line":212,"column":43}}},"16":{"name":"_parse","line":240,"loc":{"start":{"line":240,"column":2},"end":{"line":240,"column":24}}},"17":{"name":"(anonymous_17)","line":244,"loc":{"start":{"line":244,"column":24},"end":{"line":244,"column":39}}},"18":{"name":"(anonymous_18)","line":249,"loc":{"start":{"line":249,"column":28},"end":{"line":249,"column":43}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":276,"column":1}},"2":{"start":{"line":4,"column":2},"end":{"line":4,"column":66}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":35}},"4":{"start":{"line":7,"column":2},"end":{"line":7,"column":34}},"5":{"start":{"line":52,"column":2},"end":{"line":93,"column":5}},"6":{"start":{"line":60,"column":6},"end":{"line":60,"column":43}},"7":{"start":{"line":63,"column":6},"end":{"line":63,"column":46}},"8":{"start":{"line":66,"column":6},"end":{"line":68,"column":42}},"9":{"start":{"line":71,"column":6},"end":{"line":73,"column":45}},"10":{"start":{"line":77,"column":6},"end":{"line":77,"column":48}},"11":{"start":{"line":80,"column":6},"end":{"line":80,"column":49}},"12":{"start":{"line":83,"column":6},"end":{"line":85,"column":47}},"13":{"start":{"line":88,"column":6},"end":{"line":90,"column":48}},"14":{"start":{"line":95,"column":2},"end":{"line":95,"column":26}},"15":{"start":{"line":97,"column":2},"end":{"line":97,"column":15}},"16":{"start":{"line":99,"column":2},"end":{"line":101,"column":3}},"17":{"start":{"line":100,"column":4},"end":{"line":100,"column":57}},"18":{"start":{"line":103,"column":2},"end":{"line":121,"column":3}},"19":{"start":{"line":104,"column":4},"end":{"line":104,"column":24}},"20":{"start":{"line":105,"column":4},"end":{"line":107,"column":5}},"21":{"start":{"line":106,"column":6},"end":{"line":106,"column":70}},"22":{"start":{"line":109,"column":4},"end":{"line":109,"column":11}},"23":{"start":{"line":110,"column":4},"end":{"line":120,"column":5}},"24":{"start":{"line":111,"column":6},"end":{"line":111,"column":51}},"25":{"start":{"line":112,"column":6},"end":{"line":115,"column":39}},"26":{"start":{"line":118,"column":6},"end":{"line":118,"column":45}},"27":{"start":{"line":119,"column":6},"end":{"line":119,"column":46}},"28":{"start":{"line":131,"column":2},"end":{"line":148,"column":3}},"29":{"start":{"line":132,"column":4},"end":{"line":133,"column":18}},"30":{"start":{"line":134,"column":4},"end":{"line":145,"column":5}},"31":{"start":{"line":135,"column":6},"end":{"line":138,"column":7}},"32":{"start":{"line":136,"column":8},"end":{"line":136,"column":22}},"33":{"start":{"line":137,"column":8},"end":{"line":137,"column":18}},"34":{"start":{"line":140,"column":9},"end":{"line":145,"column":5}},"35":{"start":{"line":141,"column":6},"end":{"line":144,"column":7}},"36":{"start":{"line":142,"column":8},"end":{"line":142,"column":22}},"37":{"start":{"line":143,"column":8},"end":{"line":143,"column":18}},"38":{"start":{"line":147,"column":4},"end":{"line":147,"column":17}},"39":{"start":{"line":158,"column":2},"end":{"line":175,"column":3}},"40":{"start":{"line":159,"column":4},"end":{"line":160,"column":18}},"41":{"start":{"line":161,"column":4},"end":{"line":172,"column":5}},"42":{"start":{"line":162,"column":6},"end":{"line":165,"column":7}},"43":{"start":{"line":163,"column":8},"end":{"line":163,"column":22}},"44":{"start":{"line":164,"column":8},"end":{"line":164,"column":18}},"45":{"start":{"line":167,"column":9},"end":{"line":172,"column":5}},"46":{"start":{"line":168,"column":6},"end":{"line":171,"column":7}},"47":{"start":{"line":169,"column":8},"end":{"line":169,"column":22}},"48":{"start":{"line":170,"column":8},"end":{"line":170,"column":18}},"49":{"start":{"line":174,"column":4},"end":{"line":174,"column":17}},"50":{"start":{"line":185,"column":2},"end":{"line":202,"column":3}},"51":{"start":{"line":186,"column":4},"end":{"line":187,"column":18}},"52":{"start":{"line":188,"column":4},"end":{"line":199,"column":5}},"53":{"start":{"line":189,"column":6},"end":{"line":192,"column":7}},"54":{"start":{"line":190,"column":8},"end":{"line":190,"column":22}},"55":{"start":{"line":191,"column":8},"end":{"line":191,"column":25}},"56":{"start":{"line":194,"column":9},"end":{"line":199,"column":5}},"57":{"start":{"line":195,"column":6},"end":{"line":198,"column":7}},"58":{"start":{"line":196,"column":8},"end":{"line":196,"column":22}},"59":{"start":{"line":197,"column":8},"end":{"line":197,"column":25}},"60":{"start":{"line":201,"column":4},"end":{"line":201,"column":17}},"61":{"start":{"line":212,"column":2},"end":{"line":229,"column":3}},"62":{"start":{"line":213,"column":4},"end":{"line":214,"column":18}},"63":{"start":{"line":215,"column":4},"end":{"line":226,"column":5}},"64":{"start":{"line":216,"column":6},"end":{"line":219,"column":7}},"65":{"start":{"line":217,"column":8},"end":{"line":217,"column":22}},"66":{"start":{"line":218,"column":8},"end":{"line":218,"column":25}},"67":{"start":{"line":221,"column":9},"end":{"line":226,"column":5}},"68":{"start":{"line":222,"column":6},"end":{"line":225,"column":7}},"69":{"start":{"line":223,"column":8},"end":{"line":223,"column":22}},"70":{"start":{"line":224,"column":8},"end":{"line":224,"column":25}},"71":{"start":{"line":228,"column":4},"end":{"line":228,"column":17}},"72":{"start":{"line":240,"column":2},"end":{"line":274,"column":3}},"73":{"start":{"line":241,"column":4},"end":{"line":241,"column":30}},"74":{"start":{"line":244,"column":4},"end":{"line":247,"column":7}},"75":{"start":{"line":246,"column":6},"end":{"line":246,"column":25}},"76":{"start":{"line":249,"column":4},"end":{"line":251,"column":7}},"77":{"start":{"line":250,"column":6},"end":{"line":250,"column":24}},"78":{"start":{"line":252,"column":4},"end":{"line":254,"column":5}},"79":{"start":{"line":253,"column":6},"end":{"line":253,"column":18}},"80":{"start":{"line":256,"column":4},"end":{"line":273,"column":5}},"81":{"start":{"line":258,"column":8},"end":{"line":262,"column":10}},"82":{"start":{"line":265,"column":8},"end":{"line":269,"column":10}},"83":{"start":{"line":272,"column":8},"end":{"line":272,"column":20}},"84":{"start":{"line":278,"column":0},"end":{"line":278,"column":23}},"85":{"start":{"line":279,"column":0},"end":{"line":279,"column":26}}},"branchMap":{"1":{"line":66,"type":"cond-expr","locations":[{"start":{"line":67,"column":12},"end":{"line":67,"column":42}},{"start":{"line":68,"column":12},"end":{"line":68,"column":41}}]},"2":{"line":71,"type":"cond-expr","locations":[{"start":{"line":72,"column":12},"end":{"line":72,"column":45}},{"start":{"line":73,"column":12},"end":{"line":73,"column":44}}]},"3":{"line":83,"type":"cond-expr","locations":[{"start":{"line":84,"column":12},"end":{"line":84,"column":47}},{"start":{"line":85,"column":12},"end":{"line":85,"column":46}}]},"4":{"line":88,"type":"cond-expr","locations":[{"start":{"line":89,"column":12},"end":{"line":89,"column":48}},{"start":{"line":90,"column":12},"end":{"line":90,"column":47}}]},"5":{"line":100,"type":"cond-expr","locations":[{"start":{"line":100,"column":39},"end":{"line":100,"column":42}},{"start":{"line":100,"column":45},"end":{"line":100,"column":56}}]},"6":{"line":105,"type":"if","locations":[{"start":{"line":105,"column":4},"end":{"line":105,"column":4}},{"start":{"line":105,"column":4},"end":{"line":105,"column":4}}]},"7":{"line":110,"type":"if","locations":[{"start":{"line":110,"column":4},"end":{"line":110,"column":4}},{"start":{"line":110,"column":4},"end":{"line":110,"column":4}}]},"8":{"line":111,"type":"cond-expr","locations":[{"start":{"line":111,"column":24},"end":{"line":111,"column":36}},{"start":{"line":111,"column":39},"end":{"line":111,"column":50}}]},"9":{"line":118,"type":"cond-expr","locations":[{"start":{"line":118,"column":24},"end":{"line":118,"column":33}},{"start":{"line":118,"column":36},"end":{"line":118,"column":44}}]},"10":{"line":134,"type":"if","locations":[{"start":{"line":134,"column":4},"end":{"line":134,"column":4}},{"start":{"line":134,"column":4},"end":{"line":134,"column":4}}]},"11":{"line":140,"type":"if","locations":[{"start":{"line":140,"column":9},"end":{"line":140,"column":9}},{"start":{"line":140,"column":9},"end":{"line":140,"column":9}}]},"12":{"line":161,"type":"if","locations":[{"start":{"line":161,"column":4},"end":{"line":161,"column":4}},{"start":{"line":161,"column":4},"end":{"line":161,"column":4}}]},"13":{"line":167,"type":"if","locations":[{"start":{"line":167,"column":9},"end":{"line":167,"column":9}},{"start":{"line":167,"column":9},"end":{"line":167,"column":9}}]},"14":{"line":188,"type":"if","locations":[{"start":{"line":188,"column":4},"end":{"line":188,"column":4}},{"start":{"line":188,"column":4},"end":{"line":188,"column":4}}]},"15":{"line":194,"type":"if","locations":[{"start":{"line":194,"column":9},"end":{"line":194,"column":9}},{"start":{"line":194,"column":9},"end":{"line":194,"column":9}}]},"16":{"line":215,"type":"if","locations":[{"start":{"line":215,"column":4},"end":{"line":215,"column":4}},{"start":{"line":215,"column":4},"end":{"line":215,"column":4}}]},"17":{"line":221,"type":"if","locations":[{"start":{"line":221,"column":9},"end":{"line":221,"column":9}},{"start":{"line":221,"column":9},"end":{"line":221,"column":9}}]},"18":{"line":252,"type":"if","locations":[{"start":{"line":252,"column":4},"end":{"line":252,"column":4}},{"start":{"line":252,"column":4},"end":{"line":252,"column":4}}]},"19":{"line":256,"type":"switch","locations":[{"start":{"line":257,"column":6},"end":{"line":262,"column":10}},{"start":{"line":264,"column":6},"end":{"line":269,"column":10}},{"start":{"line":271,"column":6},"end":{"line":272,"column":20}}]}},"code":["'use strict';","","function factory (type, config, load, typed) {","  var matrix = load(require('../../type/matrix/function/matrix'));","","  var ZERO = new type.BigNumber(0);","  var ONE = new type.BigNumber(1);","","  /**","   * Create an array from a range.","   * By default, the range end is excluded. This can be customized by providing","   * an extra parameter `includeEnd`.","   *","   * Syntax:","   *","   *     math.range(str [, includeEnd])               // Create a range from a string,","   *                                                  // where the string contains the","   *                                                  // start, optional step, and end,","   *                                                  // separated by a colon.","   *     math.range(start, end [, includeEnd])        // Create a range with start and","   *                                                  // end and a step size of 1.","   *     math.range(start, end, step [, includeEnd])  // Create a range with start, step,","   *                                                  // and end.","   *","   * Where:","   *","   * - `str: string`","   *   A string 'start:end' or 'start:step:end'","   * - `start: {number | BigNumber}`","   *   Start of the range","   * - `end: number | BigNumber`","   *   End of the range, excluded by default, included when parameter includeEnd=true","   * - `step: number | BigNumber`","   *   Step size. Default value is 1.","   * - `includeEnd: boolean`","   *   Option to specify whether to include the end or not. False by default.","   *","   * Examples:","   *","   *     math.range(2, 6);        // [2, 3, 4, 5]","   *     math.range(2, -3, -1);   // [2, 1, 0, -1, -2]","   *     math.range('2:1:6');     // [2, 3, 4, 5]","   *     math.range(2, 6, true);  // [2, 3, 4, 5, 6]","   *","   * See also:","   *","   *     ones, zeros, size, subset","   *","   * @param {*} args   Parameters describing the ranges `start`, `end`, and optional `step`.","   * @return {Array | Matrix} range","   */","  var range = typed('range', {","    // TODO: simplify signatures when typed-function supports default values and optional arguments","","    // TODO: a number or boolean should not be converted to string here","    'string': _strRange,","    'string, boolean': _strRange,","","    'number, number':  function (start, end) {","      return _out(_rangeEx(start, end, 1));","    },","    'number, number, number': function (start, end, step) {","      return _out(_rangeEx(start, end, step));","    },","    'number, number, boolean': function (start, end, includeEnd) {","      return includeEnd","          ? _out(_rangeInc(start, end, 1))","          : _out(_rangeEx(start, end, 1));","    },","    'number, number, number, boolean': function (start, end, step, includeEnd) {","      return includeEnd","          ? _out(_rangeInc(start, end, step))","          : _out(_rangeEx(start, end, step));","    },","","    'BigNumber, BigNumber':  function (start, end) {","      return _out(_bigRangeEx(start, end, ONE));","    },","    'BigNumber, BigNumber, BigNumber': function (start, end, step) {","      return _out(_bigRangeEx(start, end, step));","    },","    'BigNumber, BigNumber, boolean': function (start, end, includeEnd) {","      return includeEnd","          ? _out(_bigRangeInc(start, end, ONE))","          : _out(_bigRangeEx(start, end, ONE));","    },","    'BigNumber, BigNumber, BigNumber, boolean': function (start, end, step, includeEnd) {","      return includeEnd","          ? _out(_bigRangeInc(start, end, step))","          : _out(_bigRangeEx(start, end, step));","    }","","  });","","  range.toTex = undefined; // use default template","","  return range;","","  function _out(arr) {","    return config.matrix === 'Array' ? arr : matrix(arr);","  }","","  function _strRange (str, includeEnd) {","    var r = _parse(str);","    if (!r){","      throw new SyntaxError('String \"' + str + '\" is no valid range');","    }","","    var fn;","    if (config.number === 'BigNumber') {","      fn = includeEnd ? _bigRangeInc : _bigRangeEx;","      return _out(fn(","          new type.BigNumber(r.start),","          new type.BigNumber(r.end),","          new type.BigNumber(r.step)));","    }","    else {","      fn = includeEnd ? _rangeInc : _rangeEx;","      return _out(fn(r.start, r.end, r.step));","    }","  }","","  /**","   * Create a range with numbers. End is excluded","   * @param {number} start","   * @param {number} end","   * @param {number} step","   * @returns {Array} range","   * @private","   */","  function _rangeEx (start, end, step) {","    var array = [],","        x = start;","    if (step > 0) {","      while (x < end) {","        array.push(x);","        x += step;","      }","    }","    else if (step < 0) {","      while (x > end) {","        array.push(x);","        x += step;","      }","    }","","    return array;","  }","","  /**","   * Create a range with numbers. End is included","   * @param {number} start","   * @param {number} end","   * @param {number} step","   * @returns {Array} range","   * @private","   */","  function _rangeInc (start, end, step) {","    var array = [],","        x = start;","    if (step > 0) {","      while (x <= end) {","        array.push(x);","        x += step;","      }","    }","    else if (step < 0) {","      while (x >= end) {","        array.push(x);","        x += step;","      }","    }","","    return array;","  }","","  /**","   * Create a range with big numbers. End is excluded","   * @param {BigNumber} start","   * @param {BigNumber} end","   * @param {BigNumber} step","   * @returns {Array} range","   * @private","   */","  function _bigRangeEx (start, end, step) {","    var array = [],","        x = start;","    if (step.gt(ZERO)) {","      while (x.lt(end)) {","        array.push(x);","        x = x.plus(step);","      }","    }","    else if (step.lt(ZERO)) {","      while (x.gt(end)) {","        array.push(x);","        x = x.plus(step);","      }","    }","","    return array;","  }","","  /**","   * Create a range with big numbers. End is included","   * @param {BigNumber} start","   * @param {BigNumber} end","   * @param {BigNumber} step","   * @returns {Array} range","   * @private","   */","  function _bigRangeInc (start, end, step) {","    var array = [],","        x = start;","    if (step.gt(ZERO)) {","      while (x.lte(end)) {","        array.push(x);","        x = x.plus(step);","      }","    }","    else if (step.lt(ZERO)) {","      while (x.gte(end)) {","        array.push(x);","        x = x.plus(step);","      }","    }","","    return array;","  }","","  /**","   * Parse a string into a range,","   * The string contains the start, optional step, and end, separated by a colon.","   * If the string does not contain a valid range, null is returned.","   * For example str='0:2:11'.","   * @param {string} str","   * @return {{start: number, end: number, step: number} | null} range Object containing properties start, end, step","   * @private","   */","  function _parse (str) {","    var args = str.split(':');","","    // number","    var nums = args.map(function (arg) {","      // use Number and not parseFloat as Number returns NaN on invalid garbage in the string","      return Number(arg);","    });","","    var invalid = nums.some(function (num) {","      return isNaN(num);","    });","    if(invalid) {","      return null;","    }","","    switch (nums.length) {","      case 2:","        return {","          start: nums[0],","          end: nums[1],","          step: 1","        };","","      case 3:","        return {","          start: nums[0],","          end: nums[2],","          step: nums[1]","        };","","      default:","        return null;","    }","  }","","}","","exports.name = 'range';","exports.factory = factory;",""],"l":{"3":1,"4":0,"6":0,"7":0,"52":0,"60":0,"63":0,"66":0,"71":0,"77":0,"80":0,"83":0,"88":0,"95":0,"97":0,"99":1,"100":0,"103":1,"104":0,"105":0,"106":0,"109":0,"110":0,"111":0,"112":0,"118":0,"119":0,"131":1,"132":0,"134":0,"135":0,"136":0,"137":0,"140":0,"141":0,"142":0,"143":0,"147":0,"158":1,"159":0,"161":0,"162":0,"163":0,"164":0,"167":0,"168":0,"169":0,"170":0,"174":0,"185":1,"186":0,"188":0,"189":0,"190":0,"191":0,"194":0,"195":0,"196":0,"197":0,"201":0,"212":1,"213":0,"215":0,"216":0,"217":0,"218":0,"221":0,"222":0,"223":0,"224":0,"228":0,"240":1,"241":0,"244":0,"246":0,"249":0,"250":0,"252":0,"253":0,"256":0,"258":0,"265":0,"272":0,"278":1,"279":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/matrix/reshape.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/matrix/reshape.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1,"17":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"factory","line":8,"loc":{"start":{"line":8,"column":0},"end":{"line":8,"column":45}}},"2":{"name":"(anonymous_2)","line":49,"loc":{"start":{"line":49,"column":21},"end":{"line":49,"column":41}}},"3":{"name":"(anonymous_3)","line":57,"loc":{"start":{"line":57,"column":20},"end":{"line":57,"column":40}}},"4":{"name":"(anonymous_4)","line":58,"loc":{"start":{"line":58,"column":20},"end":{"line":58,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":59}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":56}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":41}},"4":{"start":{"line":8,"column":0},"end":{"line":71,"column":1}},"5":{"start":{"line":9,"column":2},"end":{"line":9,"column":66}},"6":{"start":{"line":47,"column":2},"end":{"line":66,"column":5}},"7":{"start":{"line":50,"column":6},"end":{"line":54,"column":7}},"8":{"start":{"line":51,"column":8},"end":{"line":51,"column":32}},"9":{"start":{"line":53,"column":8},"end":{"line":53,"column":57}},"10":{"start":{"line":58,"column":6},"end":{"line":62,"column":9}},"11":{"start":{"line":59,"column":8},"end":{"line":61,"column":9}},"12":{"start":{"line":60,"column":10},"end":{"line":60,"column":69}},"13":{"start":{"line":63,"column":6},"end":{"line":63,"column":37}},"14":{"start":{"line":68,"column":2},"end":{"line":68,"column":28}},"15":{"start":{"line":70,"column":2},"end":{"line":70,"column":17}},"16":{"start":{"line":73,"column":0},"end":{"line":73,"column":25}},"17":{"start":{"line":74,"column":0},"end":{"line":74,"column":26}}},"branchMap":{"1":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":6},"end":{"line":50,"column":6}},{"start":{"line":50,"column":6},"end":{"line":50,"column":6}}]},"2":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":8},"end":{"line":59,"column":8}},{"start":{"line":59,"column":8},"end":{"line":59,"column":8}}]}},"code":["'use strict';","","var DimensionError = require('../../error/DimensionError');","","var isInteger = require('../../utils/number').isInteger;","var array = require('../../utils/array');","","function factory (type, config, load, typed) {","  var matrix = load(require('../../type/matrix/function/matrix'));","","  /**","   * Reshape a multi dimensional array to fit the specified dimensions","   *","   * Syntax:","   *","   *     math.reshape(x, sizes)","   *","   * Examples:","   *","   *     math.reshape([1, 2, 3, 4, 5, 6], [2, 3]);","   *     // returns Array  [[1, 2, 3], [4, 5, 6]]","   *","   *     math.reshape([[1, 2], [3, 4]], [1, 4]);","   *     // returns Array  [[1, 2, 3, 4]]","   *","   *     math.reshape([[1, 2], [3, 4]], [4]);","   *     // returns Array [1, 2, 3, 4]","   *","   *     var x = math.matrix([1, 2, 3, 4, 5, 6, 7, 8]);","   *     math.reshape(x, [2, 2, 2]);","   *     // returns Matrix [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]","   *","   * See also:","   *","   *     size, squeeze, resize","   *","   * @param {Array | Matrix | *} x  Matrix to be reshaped","   * @param {number[]} sizes        One dimensional array with integral sizes for","   *                                each dimension","   *","   * @return {* | Array | Matrix}   A reshaped clone of matrix `x`","   *","   * @throws {TypeError}            If `sizes` does not contain solely integers","   * @throws {DimensionError}       If the product of the new dimension sizes does","   *                                not equal that of the old ones","   */","  var reshape = typed('reshape', {","","    'Matrix, Array': function (x, sizes) {","      if(x.reshape) {","        return x.reshape(sizes);","      } else {","        return matrix(array.reshape(x.valueOf(), sizes));","      }","    },","","    'Array, Array': function (x, sizes) {","      sizes.forEach(function (size) {","        if (!isInteger(size)) {","          throw new TypeError('Invalid size for dimension: ' + size);","        }","      });","      return array.reshape(x, sizes);","    }","","  });","","  reshape.toTex = undefined; // use default template","","  return reshape;","}","","exports.name = 'reshape';","exports.factory = factory;",""],"l":{"3":1,"5":1,"6":1,"8":1,"9":0,"47":0,"50":0,"51":0,"53":0,"58":0,"59":0,"60":0,"63":0,"68":0,"70":0,"73":1,"74":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/matrix/resize.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/matrix/resize.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":1,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":1,"52":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"factory","line":11,"loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":45}}},"2":{"name":"resize","line":41,"loc":{"start":{"line":41,"column":15},"end":{"line":41,"column":55}}},"3":{"name":"(anonymous_3)","line":52,"loc":{"start":{"line":52,"column":22},"end":{"line":52,"column":39}}},"4":{"name":"_resizeString","line":102,"loc":{"start":{"line":102,"column":2},"end":{"line":102,"column":49}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":59}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":59}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":56}},"4":{"start":{"line":7,"column":0},"end":{"line":7,"column":50}},"5":{"start":{"line":8,"column":0},"end":{"line":8,"column":48}},"6":{"start":{"line":9,"column":0},"end":{"line":9,"column":41}},"7":{"start":{"line":11,"column":0},"end":{"line":135,"column":1}},"8":{"start":{"line":12,"column":2},"end":{"line":12,"column":66}},"9":{"start":{"line":41,"column":2},"end":{"line":89,"column":4}},"10":{"start":{"line":42,"column":4},"end":{"line":44,"column":5}},"11":{"start":{"line":43,"column":6},"end":{"line":43,"column":65}},"12":{"start":{"line":46,"column":4},"end":{"line":48,"column":5}},"13":{"start":{"line":47,"column":6},"end":{"line":47,"column":28}},"14":{"start":{"line":50,"column":4},"end":{"line":55,"column":5}},"15":{"start":{"line":52,"column":6},"end":{"line":54,"column":9}},"16":{"start":{"line":53,"column":8},"end":{"line":53,"column":80}},"17":{"start":{"line":58,"column":4},"end":{"line":61,"column":5}},"18":{"start":{"line":60,"column":6},"end":{"line":60,"column":48}},"19":{"start":{"line":63,"column":4},"end":{"line":66,"column":5}},"20":{"start":{"line":65,"column":6},"end":{"line":65,"column":50}},"21":{"start":{"line":69,"column":4},"end":{"line":69,"column":74}},"22":{"start":{"line":71,"column":4},"end":{"line":88,"column":5}},"23":{"start":{"line":73,"column":6},"end":{"line":75,"column":7}},"24":{"start":{"line":74,"column":8},"end":{"line":74,"column":17}},"25":{"start":{"line":77,"column":6},"end":{"line":77,"column":22}},"26":{"start":{"line":81,"column":6},"end":{"line":83,"column":7}},"27":{"start":{"line":82,"column":8},"end":{"line":82,"column":16}},"28":{"start":{"line":84,"column":6},"end":{"line":84,"column":19}},"29":{"start":{"line":86,"column":6},"end":{"line":86,"column":52}},"30":{"start":{"line":87,"column":6},"end":{"line":87,"column":42}},"31":{"start":{"line":91,"column":2},"end":{"line":91,"column":27}},"32":{"start":{"line":93,"column":2},"end":{"line":93,"column":16}},"33":{"start":{"line":102,"column":2},"end":{"line":134,"column":3}},"34":{"start":{"line":103,"column":4},"end":{"line":110,"column":5}},"35":{"start":{"line":104,"column":6},"end":{"line":106,"column":7}},"36":{"start":{"line":105,"column":8},"end":{"line":105,"column":73}},"37":{"start":{"line":109,"column":6},"end":{"line":109,"column":24}},"38":{"start":{"line":112,"column":4},"end":{"line":114,"column":5}},"39":{"start":{"line":113,"column":6},"end":{"line":113,"column":47}},"40":{"start":{"line":115,"column":4},"end":{"line":115,"column":22}},"41":{"start":{"line":116,"column":4},"end":{"line":119,"column":5}},"42":{"start":{"line":117,"column":6},"end":{"line":118,"column":42}},"43":{"start":{"line":121,"column":4},"end":{"line":133,"column":5}},"44":{"start":{"line":122,"column":6},"end":{"line":122,"column":35}},"45":{"start":{"line":124,"column":9},"end":{"line":133,"column":5}},"46":{"start":{"line":125,"column":6},"end":{"line":125,"column":20}},"47":{"start":{"line":126,"column":6},"end":{"line":128,"column":7}},"48":{"start":{"line":127,"column":8},"end":{"line":127,"column":27}},"49":{"start":{"line":129,"column":6},"end":{"line":129,"column":17}},"50":{"start":{"line":132,"column":6},"end":{"line":132,"column":17}},"51":{"start":{"line":137,"column":0},"end":{"line":137,"column":24}},"52":{"start":{"line":138,"column":0},"end":{"line":138,"column":26}}},"branchMap":{"1":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":4},"end":{"line":42,"column":4}},{"start":{"line":42,"column":4},"end":{"line":42,"column":4}}]},"2":{"line":42,"type":"binary-expr","locations":[{"start":{"line":42,"column":8},"end":{"line":42,"column":29}},{"start":{"line":42,"column":33},"end":{"line":42,"column":54}}]},"3":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":4},"end":{"line":46,"column":4}},{"start":{"line":46,"column":4},"end":{"line":46,"column":4}}]},"4":{"line":46,"type":"binary-expr","locations":[{"start":{"line":46,"column":8},"end":{"line":46,"column":12}},{"start":{"line":46,"column":16},"end":{"line":46,"column":38}}]},"5":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":4},"end":{"line":50,"column":4}},{"start":{"line":50,"column":4},"end":{"line":50,"column":4}}]},"6":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":8},"end":{"line":50,"column":19}},{"start":{"line":50,"column":23},"end":{"line":50,"column":30}},{"start":{"line":50,"column":34},"end":{"line":50,"column":62}}]},"7":{"line":53,"type":"cond-expr","locations":[{"start":{"line":53,"column":55},"end":{"line":53,"column":71}},{"start":{"line":53,"column":74},"end":{"line":53,"column":79}}]},"8":{"line":53,"type":"binary-expr","locations":[{"start":{"line":53,"column":16},"end":{"line":53,"column":21}},{"start":{"line":53,"column":25},"end":{"line":53,"column":51}}]},"9":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":4},"end":{"line":58,"column":4}},{"start":{"line":58,"column":4},"end":{"line":58,"column":4}}]},"10":{"line":58,"type":"binary-expr","locations":[{"start":{"line":58,"column":8},"end":{"line":58,"column":9}},{"start":{"line":58,"column":13},"end":{"line":58,"column":32}}]},"11":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":4},"end":{"line":63,"column":4}},{"start":{"line":63,"column":4},"end":{"line":63,"column":4}}]},"12":{"line":69,"type":"cond-expr","locations":[{"start":{"line":69,"column":38},"end":{"line":69,"column":43}},{"start":{"line":69,"column":47},"end":{"line":69,"column":72}}]},"13":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":4},"end":{"line":71,"column":4}},{"start":{"line":71,"column":4},"end":{"line":71,"column":4}}]},"14":{"line":81,"type":"if","locations":[{"start":{"line":81,"column":6},"end":{"line":81,"column":6}},{"start":{"line":81,"column":6},"end":{"line":81,"column":6}}]},"15":{"line":87,"type":"cond-expr","locations":[{"start":{"line":87,"column":24},"end":{"line":87,"column":35}},{"start":{"line":87,"column":38},"end":{"line":87,"column":41}}]},"16":{"line":103,"type":"if","locations":[{"start":{"line":103,"column":4},"end":{"line":103,"column":4}},{"start":{"line":103,"column":4},"end":{"line":103,"column":4}}]},"17":{"line":104,"type":"if","locations":[{"start":{"line":104,"column":6},"end":{"line":104,"column":6}},{"start":{"line":104,"column":6},"end":{"line":104,"column":6}}]},"18":{"line":104,"type":"binary-expr","locations":[{"start":{"line":104,"column":10},"end":{"line":104,"column":41}},{"start":{"line":104,"column":45},"end":{"line":104,"column":69}}]},"19":{"line":112,"type":"if","locations":[{"start":{"line":112,"column":4},"end":{"line":112,"column":4}},{"start":{"line":112,"column":4},"end":{"line":112,"column":4}}]},"20":{"line":116,"type":"if","locations":[{"start":{"line":116,"column":4},"end":{"line":116,"column":4}},{"start":{"line":116,"column":4},"end":{"line":116,"column":4}}]},"21":{"line":116,"type":"binary-expr","locations":[{"start":{"line":116,"column":8},"end":{"line":116,"column":31}},{"start":{"line":116,"column":35},"end":{"line":116,"column":50}}]},"22":{"line":121,"type":"if","locations":[{"start":{"line":121,"column":4},"end":{"line":121,"column":4}},{"start":{"line":121,"column":4},"end":{"line":121,"column":4}}]},"23":{"line":124,"type":"if","locations":[{"start":{"line":124,"column":9},"end":{"line":124,"column":9}},{"start":{"line":124,"column":9},"end":{"line":124,"column":9}}]}},"code":["'use strict';","","var DimensionError = require('../../error/DimensionError');","var ArgumentsError = require('../../error/ArgumentsError');","","var isInteger = require('../../utils/number').isInteger;","var format = require('../../utils/string').format;","var clone = require('../../utils/object').clone;","var array = require('../../utils/array');","","function factory (type, config, load, typed) {","  var matrix = load(require('../../type/matrix/function/matrix'));","","  /**","   * Resize a matrix","   *","   * Syntax:","   *","   *     math.resize(x, size)","   *     math.resize(x, size, defaultValue)","   *","   * Examples:","   *","   *     math.resize([1, 2, 3, 4, 5], [3]); // returns Array  [1, 2, 3]","   *     math.resize([1, 2, 3], [5], 0);    // returns Array  [1, 2, 3, 0, 0]","   *     math.resize(2, [2, 3], 0);         // returns Matrix [[2, 0, 0], [0, 0, 0]]","   *     math.resize(\"hello\", [8], \"!\");    // returns string 'hello!!!'","   *","   * See also:","   *","   *     size, squeeze, subset, reshape","   *","   * @param {Array | Matrix | *} x             Matrix to be resized","   * @param {Array | Matrix} size              One dimensional array with numbers","   * @param {number | string} [defaultValue=0] Zero by default, except in","   *                                           case of a string, in that case","   *                                           defaultValue = ' '","   * @return {* | Array | Matrix} A resized clone of matrix `x`","   */","  // TODO: rework resize to a typed-function","  var resize = function resize (x, size, defaultValue) {","    if (arguments.length != 2 && arguments.length != 3) {","      throw new ArgumentsError('resize', arguments.length, 2, 3);","    }","","    if (size && size.isMatrix === true) {","      size = size.valueOf(); // get Array","    }","","    if (size.length && size[0] && size[0].isBigNumber === true) {","      // convert bignumbers to numbers","      size = size.map(function (value) {","        return (value && value.isBigNumber === true) ? value.toNumber() : value;","      });","    }","    ","    // check x is a Matrix","    if (x && x.isMatrix === true) {","      // use optimized matrix implementation, return copy","      return x.resize(size, defaultValue, true);","    }","    ","    if (typeof x === 'string') {","      // resize string","      return _resizeString(x, size, defaultValue);","    }","    ","    // check result should be a matrix","    var asMatrix = Array.isArray(x) ? false : (config.matrix !== 'Array');","","    if (size.length == 0) {","      // output a scalar","      while (Array.isArray(x)) {","        x = x[0];","      }","","      return clone(x);","    }","    else {","      // output an array/matrix","      if (!Array.isArray(x)) {","        x = [x];","      }","      x = clone(x);","","      var res = array.resize(x, size, defaultValue);","      return asMatrix ? matrix(res) : res;","    }","  };","","  resize.toTex = undefined; // use default template","","  return resize;","","  /**","   * Resize a string","   * @param {string} str","   * @param {number[]} size","   * @param {string} [defaultChar=' ']","   * @private","   */","  function _resizeString(str, size, defaultChar) {","    if (defaultChar !== undefined) {","      if (typeof defaultChar !== 'string' || defaultChar.length !== 1) {","        throw new TypeError('Single character expected as defaultValue');","      }","    }","    else {","      defaultChar = ' ';","    }","","    if (size.length !== 1) {","      throw new DimensionError(size.length, 1);","    }","    var len = size[0];","    if (typeof len !== 'number' || !isInteger(len)) {","      throw new TypeError('Invalid size, must contain positive integers ' +","          '(size: ' + format(size) + ')');","    }","","    if (str.length > len) {","      return str.substring(0, len);","    }","    else if (str.length < len) {","      var res = str;","      for (var i = 0, ii = len - str.length; i < ii; i++) {","        res += defaultChar;","      }","      return res;","    }","    else {","      return str;","    }","  }","}","","exports.name = 'resize';","exports.factory = factory;",""],"l":{"3":1,"4":1,"6":1,"7":1,"8":1,"9":1,"11":1,"12":0,"41":0,"42":0,"43":0,"46":0,"47":0,"50":0,"52":0,"53":0,"58":0,"60":0,"63":0,"65":0,"69":0,"71":0,"73":0,"74":0,"77":0,"81":0,"82":0,"84":0,"86":0,"87":0,"91":0,"93":0,"102":1,"103":0,"104":0,"105":0,"109":0,"112":0,"113":0,"115":0,"116":0,"117":0,"121":0,"122":0,"124":0,"125":0,"126":0,"127":0,"129":0,"132":0,"137":1,"138":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/matrix/size.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/matrix/size.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1,"11":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":32,"loc":{"start":{"line":32,"column":14},"end":{"line":32,"column":27}}},"3":{"name":"(anonymous_3)","line":39,"loc":{"start":{"line":39,"column":14},"end":{"line":39,"column":27}}},"4":{"name":"(anonymous_4)","line":43,"loc":{"start":{"line":43,"column":60},"end":{"line":43,"column":73}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":41}},"2":{"start":{"line":5,"column":0},"end":{"line":52,"column":1}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":66}},"4":{"start":{"line":31,"column":2},"end":{"line":47,"column":5}},"5":{"start":{"line":34,"column":6},"end":{"line":34,"column":30}},"6":{"start":{"line":40,"column":6},"end":{"line":40,"column":75}},"7":{"start":{"line":45,"column":6},"end":{"line":45,"column":59}},"8":{"start":{"line":49,"column":2},"end":{"line":49,"column":25}},"9":{"start":{"line":51,"column":2},"end":{"line":51,"column":14}},"10":{"start":{"line":54,"column":0},"end":{"line":54,"column":22}},"11":{"start":{"line":55,"column":0},"end":{"line":55,"column":26}}},"branchMap":{"1":{"line":40,"type":"cond-expr","locations":[{"start":{"line":40,"column":43},"end":{"line":40,"column":53}},{"start":{"line":40,"column":56},"end":{"line":40,"column":74}}]},"2":{"line":45,"type":"cond-expr","locations":[{"start":{"line":45,"column":43},"end":{"line":45,"column":45}},{"start":{"line":45,"column":48},"end":{"line":45,"column":58}}]}},"code":["'use strict';","","var array = require('../../utils/array');","","function factory (type, config, load, typed) {","  var matrix = load(require('../../type/matrix/function/matrix'));","","  /**","   * Calculate the size of a matrix or scalar.","   *","   * Syntax:","   *","   *     math.size(x)","   *","   * Examples:","   *","   *     math.size(2.3);                  // returns []","   *     math.size('hello world');        // returns [11]","   *","   *     var A = [[1, 2, 3], [4, 5, 6]];","   *     math.size(A);                    // returns [2, 3]","   *     math.size(math.range(1,6));      // returns [5]","   *","   * See also:","   *","   *     resize, squeeze, subset","   *","   * @param {boolean | number | Complex | Unit | string | Array | Matrix} x  A matrix","   * @return {Array | Matrix} A vector with size of `x`.","   */","  var size = typed('size', {","    'Matrix': function (x) {","      // TODO: return the same matrix type as the input","      return matrix(x.size());","    },","","    'Array': array.size,","","    'string': function (x) {","      return (config.matrix === 'Array') ? [x.length] : matrix([x.length]);","    },","","    'number | Complex | BigNumber | Unit | boolean | null': function (x) {","      // scalar","      return (config.matrix === 'Array') ? [] : matrix([]);","    }","  });","","  size.toTex = undefined; // use default template","","  return size;","}","","exports.name = 'size';","exports.factory = factory;",""],"l":{"3":1,"5":1,"6":0,"31":0,"34":0,"40":0,"45":0,"49":0,"51":0,"54":1,"55":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/matrix/sort.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/matrix/sort.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":1,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1,"28":0,"29":0,"30":1,"31":0,"32":0,"33":0,"34":1,"35":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":8,"loc":{"start":{"line":8,"column":13},"end":{"line":8,"column":29}}},"3":{"name":"(anonymous_3)","line":42,"loc":{"start":{"line":42,"column":13},"end":{"line":42,"column":26}}},"4":{"name":"(anonymous_4)","line":47,"loc":{"start":{"line":47,"column":14},"end":{"line":47,"column":27}}},"5":{"name":"(anonymous_5)","line":52,"loc":{"start":{"line":52,"column":23},"end":{"line":52,"column":49}}},"6":{"name":"(anonymous_6)","line":57,"loc":{"start":{"line":57,"column":24},"end":{"line":57,"column":50}}},"7":{"name":"(anonymous_7)","line":62,"loc":{"start":{"line":62,"column":21},"end":{"line":62,"column":41}}},"8":{"name":"(anonymous_8)","line":67,"loc":{"start":{"line":67,"column":22},"end":{"line":67,"column":42}}},"9":{"name":"_comparator","line":80,"loc":{"start":{"line":80,"column":2},"end":{"line":80,"column":31}}},"10":{"name":"_arrayIsVector","line":98,"loc":{"start":{"line":98,"column":2},"end":{"line":98,"column":34}}},"11":{"name":"_matrixIsVector","line":110,"loc":{"start":{"line":110,"column":2},"end":{"line":110,"column":36}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}},"2":{"start":{"line":5,"column":0},"end":{"line":117,"column":1}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":66}},"4":{"start":{"line":7,"column":2},"end":{"line":7,"column":51}},"5":{"start":{"line":8,"column":2},"end":{"line":10,"column":4}},"6":{"start":{"line":9,"column":4},"end":{"line":9,"column":22}},"7":{"start":{"line":41,"column":2},"end":{"line":71,"column":5}},"8":{"start":{"line":43,"column":6},"end":{"line":43,"column":24}},"9":{"start":{"line":44,"column":6},"end":{"line":44,"column":25}},"10":{"start":{"line":48,"column":6},"end":{"line":48,"column":25}},"11":{"start":{"line":49,"column":6},"end":{"line":49,"column":56}},"12":{"start":{"line":53,"column":6},"end":{"line":53,"column":24}},"13":{"start":{"line":54,"column":6},"end":{"line":54,"column":33}},"14":{"start":{"line":58,"column":6},"end":{"line":58,"column":25}},"15":{"start":{"line":59,"column":6},"end":{"line":59,"column":64}},"16":{"start":{"line":63,"column":6},"end":{"line":63,"column":24}},"17":{"start":{"line":64,"column":6},"end":{"line":64,"column":40}},"18":{"start":{"line":68,"column":6},"end":{"line":68,"column":25}},"19":{"start":{"line":69,"column":6},"end":{"line":69,"column":71}},"20":{"start":{"line":73,"column":2},"end":{"line":73,"column":25}},"21":{"start":{"line":80,"column":2},"end":{"line":90,"column":3}},"22":{"start":{"line":81,"column":4},"end":{"line":89,"column":5}},"23":{"start":{"line":82,"column":6},"end":{"line":82,"column":17}},"24":{"start":{"line":84,"column":9},"end":{"line":89,"column":5}},"25":{"start":{"line":85,"column":6},"end":{"line":85,"column":18}},"26":{"start":{"line":88,"column":6},"end":{"line":88,"column":57}},"27":{"start":{"line":98,"column":2},"end":{"line":102,"column":3}},"28":{"start":{"line":99,"column":4},"end":{"line":101,"column":5}},"29":{"start":{"line":100,"column":6},"end":{"line":100,"column":56}},"30":{"start":{"line":110,"column":2},"end":{"line":114,"column":3}},"31":{"start":{"line":111,"column":4},"end":{"line":113,"column":5}},"32":{"start":{"line":112,"column":6},"end":{"line":112,"column":57}},"33":{"start":{"line":116,"column":2},"end":{"line":116,"column":14}},"34":{"start":{"line":119,"column":0},"end":{"line":119,"column":22}},"35":{"start":{"line":120,"column":0},"end":{"line":120,"column":26}}},"branchMap":{"1":{"line":81,"type":"if","locations":[{"start":{"line":81,"column":4},"end":{"line":81,"column":4}},{"start":{"line":81,"column":4},"end":{"line":81,"column":4}}]},"2":{"line":84,"type":"if","locations":[{"start":{"line":84,"column":9},"end":{"line":84,"column":9}},{"start":{"line":84,"column":9},"end":{"line":84,"column":9}}]},"3":{"line":99,"type":"if","locations":[{"start":{"line":99,"column":4},"end":{"line":99,"column":4}},{"start":{"line":99,"column":4},"end":{"line":99,"column":4}}]},"4":{"line":111,"type":"if","locations":[{"start":{"line":111,"column":4},"end":{"line":111,"column":4}},{"start":{"line":111,"column":4},"end":{"line":111,"column":4}}]}},"code":["'use strict';","","var size = require('../../utils/array').size;","","function factory (type, config, load, typed) {","  var matrix = load(require('../../type/matrix/function/matrix'));","  var asc = load(require('../relational/compare'));","  var desc = function (a, b) {","    return -asc(a, b);","  };","","  /**","   * Sort the items in a matrix.","   *","   * Syntax:","   *","   *    math.sort(x)","   *    math.sort(x, compare)","   *","   * Examples:","   *","   *    math.sort([5, 10, 1]); // returns [1, 5, 10]","   *    math.sort(['C', 'B', 'A', 'D']); // returns ['A', 'B', 'C', 'D']","   *","   *    function sortByLength (a, b) {","   *      return a.length - b.length;","   *    }","   *    math.sort(['Langdon', 'Tom', 'Sara'], sortByLength); // returns ['Tom', 'Sara', 'Langdon']","   *","   * See also:","   *","   *    filter, forEach, map","   *","   * @param {Matrix | Array} x    A one dimensional matrix or array to sort","   * @param {Function | 'asc' | 'desc'} [compare='asc']","   *        An optional _comparator function. The function is called as","   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,","   *        and 0 when a == b.","   * @return {Matrix | Array} Returns the sorted matrix.","   */","  var sort = typed('sort', {","    'Array': function (x) {","      _arrayIsVector(x);","      return x.sort(asc);","    },","","    'Matrix': function (x) {","      _matrixIsVector(x);","      return matrix(x.toArray().sort(asc), x.storage());","    },","","    'Array, function': function (x, _comparator) {","      _arrayIsVector(x);","      return x.sort(_comparator);","    },","","    'Matrix, function': function (x, _comparator) {","      _matrixIsVector(x);","      return matrix(x.toArray().sort(_comparator), x.storage());","    },","","    'Array, string': function (x, order) {","      _arrayIsVector(x);","      return x.sort(_comparator(order));","    },","","    'Matrix, string': function (x, order) {","      _matrixIsVector(x);","      return matrix(x.toArray().sort(_comparator(order)), x.storage());","    }","  });","","  sort.toTex = undefined; // use default template","","  /**","   * Get the comparator for given order ('asc' or 'desc')","   * @param {'asc' | 'desc'} order","   * @return {Function} Returns a _comparator function","   */","  function _comparator (order) {","    if (order === 'asc') {","      return asc;","    }","    else if (order === 'desc') {","      return desc;","    }","    else {","      throw new Error('String \"asc\" or \"desc\" expected');","    }","  }","","  /**","   * Validate whether an array is one dimensional","   * Throws an error when this is not the case","   * @param {Array} array","   * @private","   */","  function _arrayIsVector (array) {","    if (size(array).length !== 1) {","      throw new Error('One dimensional array expected');","    }","  }","","  /**","   * Validate whether a matrix is one dimensional","   * Throws an error when this is not the case","   * @param {Matrix} matrix","   * @private","   */","  function _matrixIsVector (matrix) {","    if (matrix.size().length !== 1) {","      throw new Error('One dimensional matrix expected');","    }","  }","","  return sort;","}","","exports.name = 'sort';","exports.factory = factory;",""],"l":{"3":1,"5":1,"6":0,"7":0,"8":0,"9":0,"41":0,"43":0,"44":0,"48":0,"49":0,"53":0,"54":0,"58":0,"59":0,"63":0,"64":0,"68":0,"69":0,"73":0,"80":1,"81":0,"82":0,"84":0,"85":0,"88":0,"98":1,"99":0,"100":0,"110":1,"111":0,"112":0,"116":0,"119":1,"120":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/matrix/squeeze.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/matrix/squeeze.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1,"13":1},"b":{"1":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"factory","line":6,"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":45}}},"2":{"name":"(anonymous_2)","line":39,"loc":{"start":{"line":39,"column":13},"end":{"line":39,"column":26}}},"3":{"name":"(anonymous_3)","line":43,"loc":{"start":{"line":43,"column":14},"end":{"line":43,"column":27}}},"4":{"name":"(anonymous_4)","line":49,"loc":{"start":{"line":49,"column":11},"end":{"line":49,"column":24}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":43}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":41}},"3":{"start":{"line":6,"column":0},"end":{"line":58,"column":1}},"4":{"start":{"line":7,"column":2},"end":{"line":7,"column":66}},"5":{"start":{"line":38,"column":2},"end":{"line":53,"column":5}},"6":{"start":{"line":40,"column":6},"end":{"line":40,"column":44}},"7":{"start":{"line":44,"column":6},"end":{"line":44,"column":43}},"8":{"start":{"line":46,"column":6},"end":{"line":46,"column":52}},"9":{"start":{"line":51,"column":6},"end":{"line":51,"column":29}},"10":{"start":{"line":55,"column":2},"end":{"line":55,"column":28}},"11":{"start":{"line":57,"column":2},"end":{"line":57,"column":17}},"12":{"start":{"line":60,"column":0},"end":{"line":60,"column":25}},"13":{"start":{"line":61,"column":0},"end":{"line":61,"column":26}}},"branchMap":{"1":{"line":46,"type":"cond-expr","locations":[{"start":{"line":46,"column":34},"end":{"line":46,"column":45}},{"start":{"line":46,"column":48},"end":{"line":46,"column":51}}]}},"code":["'use strict';","","var object = require('../../utils/object');","var array = require('../../utils/array');","","function factory (type, config, load, typed) {","  var matrix = load(require('../../type/matrix/function/matrix'));","","  /**","   * Squeeze a matrix, remove inner and outer singleton dimensions from a matrix.","   *","   * Syntax:","   *","   *     math.squeeze(x)","   *","   * Examples:","   *","   *     math.squeeze([3]);           // returns 3","   *     math.squeeze([[3]]);         // returns 3","   *","   *     var A = math.zeros(3, 1);    // returns [[0], [0], [0]] (size 3x1)","   *     math.squeeze(A);             // returns [0, 0, 0] (size 3)","   *","   *     var B = math.zeros(1, 3);    // returns [[0, 0, 0]] (size 1x3)","   *     math.squeeze(B);             // returns [0, 0, 0] (size 3)","   *","   *     // only inner and outer dimensions are removed","   *     var C = math.zeros(2, 1, 3); // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)","   *     math.squeeze(C);             // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)","   *","   * See also:","   *","   *     subset","   *","   * @param {Matrix | Array} x      Matrix to be squeezed","   * @return {Matrix | Array} Squeezed matrix","   */","  var squeeze = typed('squeeze', {","    'Array': function (x) {","      return array.squeeze(object.clone(x));","    },","","    'Matrix': function (x) {","      var res = array.squeeze(x.toArray());","      // FIXME: return the same type of matrix as the input","      return Array.isArray(res) ? matrix(res) : res;","    },","","    'any': function (x) {","      // scalar","      return object.clone(x);","    }","  });","","  squeeze.toTex = undefined; // use default template","","  return squeeze;","}","","exports.name = 'squeeze';","exports.factory = factory;",""],"l":{"3":1,"4":1,"6":1,"7":0,"38":0,"40":0,"44":0,"46":0,"51":0,"55":0,"57":0,"60":1,"61":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/matrix/subset.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/matrix/subset.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":1,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":1,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":1,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":1,"73":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"fnMap":{"1":{"name":"factory","line":7,"loc":{"start":{"line":7,"column":0},"end":{"line":7,"column":45}}},"2":{"name":"(anonymous_2)","line":46,"loc":{"start":{"line":46,"column":20},"end":{"line":46,"column":44}}},"3":{"name":"(anonymous_3)","line":52,"loc":{"start":{"line":52,"column":21},"end":{"line":52,"column":45}}},"4":{"name":"(anonymous_4)","line":61,"loc":{"start":{"line":61,"column":25},"end":{"line":61,"column":62}}},"5":{"name":"(anonymous_5)","line":67,"loc":{"start":{"line":67,"column":30},"end":{"line":67,"column":81}}},"6":{"name":"(anonymous_6)","line":73,"loc":{"start":{"line":73,"column":26},"end":{"line":73,"column":63}}},"7":{"name":"(anonymous_7)","line":77,"loc":{"start":{"line":77,"column":31},"end":{"line":77,"column":82}}},"8":{"name":"_getSubstring","line":97,"loc":{"start":{"line":97,"column":2},"end":{"line":97,"column":37}}},"9":{"name":"(anonymous_9)","line":114,"loc":{"start":{"line":114,"column":18},"end":{"line":114,"column":31}}},"10":{"name":"_setSubstring","line":131,"loc":{"start":{"line":131,"column":2},"end":{"line":131,"column":64}}},"11":{"name":"(anonymous_11)","line":166,"loc":{"start":{"line":166,"column":18},"end":{"line":166,"column":34}}},"12":{"name":"_getObjectProperty","line":190,"loc":{"start":{"line":190,"column":0},"end":{"line":190,"column":44}}},"13":{"name":"_setObjectProperty","line":211,"loc":{"start":{"line":211,"column":0},"end":{"line":211,"column":57}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":48}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":63}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":59}},"4":{"start":{"line":7,"column":0},"end":{"line":181,"column":1}},"5":{"start":{"line":8,"column":2},"end":{"line":8,"column":66}},"6":{"start":{"line":44,"column":2},"end":{"line":84,"column":5}},"7":{"start":{"line":47,"column":6},"end":{"line":47,"column":28}},"8":{"start":{"line":48,"column":6},"end":{"line":48,"column":35}},"9":{"start":{"line":49,"column":6},"end":{"line":49,"column":40}},"10":{"start":{"line":53,"column":6},"end":{"line":53,"column":33}},"11":{"start":{"line":62,"column":6},"end":{"line":64,"column":21}},"12":{"start":{"line":68,"column":6},"end":{"line":70,"column":21}},"13":{"start":{"line":74,"column":6},"end":{"line":74,"column":54}},"14":{"start":{"line":78,"column":6},"end":{"line":78,"column":68}},"15":{"start":{"line":86,"column":2},"end":{"line":86,"column":27}},"16":{"start":{"line":88,"column":2},"end":{"line":88,"column":16}},"17":{"start":{"line":97,"column":2},"end":{"line":119,"column":3}},"18":{"start":{"line":98,"column":4},"end":{"line":101,"column":5}},"19":{"start":{"line":100,"column":6},"end":{"line":100,"column":44}},"20":{"start":{"line":102,"column":4},"end":{"line":104,"column":5}},"21":{"start":{"line":103,"column":6},"end":{"line":103,"column":55}},"22":{"start":{"line":107,"column":4},"end":{"line":107,"column":28}},"23":{"start":{"line":108,"column":4},"end":{"line":108,"column":42}},"24":{"start":{"line":109,"column":4},"end":{"line":109,"column":42}},"25":{"start":{"line":111,"column":4},"end":{"line":111,"column":35}},"26":{"start":{"line":113,"column":4},"end":{"line":113,"column":20}},"27":{"start":{"line":114,"column":4},"end":{"line":116,"column":7}},"28":{"start":{"line":115,"column":6},"end":{"line":115,"column":30}},"29":{"start":{"line":118,"column":4},"end":{"line":118,"column":18}},"30":{"start":{"line":131,"column":2},"end":{"line":180,"column":3}},"31":{"start":{"line":132,"column":4},"end":{"line":135,"column":5}},"32":{"start":{"line":134,"column":6},"end":{"line":134,"column":44}},"33":{"start":{"line":136,"column":4},"end":{"line":138,"column":5}},"34":{"start":{"line":137,"column":6},"end":{"line":137,"column":55}},"35":{"start":{"line":139,"column":4},"end":{"line":146,"column":5}},"36":{"start":{"line":140,"column":6},"end":{"line":142,"column":7}},"37":{"start":{"line":141,"column":8},"end":{"line":141,"column":73}},"38":{"start":{"line":145,"column":6},"end":{"line":145,"column":25}},"39":{"start":{"line":148,"column":4},"end":{"line":148,"column":35}},"40":{"start":{"line":149,"column":4},"end":{"line":149,"column":30}},"41":{"start":{"line":151,"column":4},"end":{"line":153,"column":5}},"42":{"start":{"line":152,"column":6},"end":{"line":152,"column":68}},"43":{"start":{"line":156,"column":4},"end":{"line":156,"column":28}},"44":{"start":{"line":157,"column":4},"end":{"line":157,"column":34}},"45":{"start":{"line":158,"column":4},"end":{"line":158,"column":34}},"46":{"start":{"line":161,"column":4},"end":{"line":161,"column":19}},"47":{"start":{"line":162,"column":4},"end":{"line":164,"column":5}},"48":{"start":{"line":163,"column":6},"end":{"line":163,"column":31}},"49":{"start":{"line":166,"column":4},"end":{"line":168,"column":7}},"50":{"start":{"line":167,"column":6},"end":{"line":167,"column":42}},"51":{"start":{"line":171,"column":4},"end":{"line":177,"column":5}},"52":{"start":{"line":172,"column":6},"end":{"line":176,"column":7}},"53":{"start":{"line":173,"column":8},"end":{"line":175,"column":9}},"54":{"start":{"line":174,"column":10},"end":{"line":174,"column":34}},"55":{"start":{"line":179,"column":4},"end":{"line":179,"column":26}},"56":{"start":{"line":190,"column":0},"end":{"line":201,"column":1}},"57":{"start":{"line":191,"column":2},"end":{"line":193,"column":3}},"58":{"start":{"line":192,"column":4},"end":{"line":192,"column":46}},"59":{"start":{"line":195,"column":2},"end":{"line":195,"column":31}},"60":{"start":{"line":196,"column":2},"end":{"line":198,"column":3}},"61":{"start":{"line":197,"column":4},"end":{"line":197,"column":83}},"62":{"start":{"line":200,"column":2},"end":{"line":200,"column":21}},"63":{"start":{"line":211,"column":0},"end":{"line":226,"column":1}},"64":{"start":{"line":212,"column":2},"end":{"line":214,"column":3}},"65":{"start":{"line":213,"column":4},"end":{"line":213,"column":46}},"66":{"start":{"line":216,"column":2},"end":{"line":216,"column":31}},"67":{"start":{"line":217,"column":2},"end":{"line":219,"column":3}},"68":{"start":{"line":218,"column":4},"end":{"line":218,"column":83}},"69":{"start":{"line":222,"column":2},"end":{"line":222,"column":30}},"70":{"start":{"line":223,"column":2},"end":{"line":223,"column":29}},"71":{"start":{"line":225,"column":2},"end":{"line":225,"column":17}},"72":{"start":{"line":228,"column":0},"end":{"line":228,"column":24}},"73":{"start":{"line":229,"column":0},"end":{"line":229,"column":26}}},"branchMap":{"1":{"line":49,"type":"binary-expr","locations":[{"start":{"line":49,"column":13},"end":{"line":49,"column":19}},{"start":{"line":49,"column":23},"end":{"line":49,"column":39}}]},"2":{"line":98,"type":"if","locations":[{"start":{"line":98,"column":4},"end":{"line":98,"column":4}},{"start":{"line":98,"column":4},"end":{"line":98,"column":4}}]},"3":{"line":98,"type":"binary-expr","locations":[{"start":{"line":98,"column":8},"end":{"line":98,"column":14}},{"start":{"line":98,"column":18},"end":{"line":98,"column":40}}]},"4":{"line":102,"type":"if","locations":[{"start":{"line":102,"column":4},"end":{"line":102,"column":4}},{"start":{"line":102,"column":4},"end":{"line":102,"column":4}}]},"5":{"line":132,"type":"if","locations":[{"start":{"line":132,"column":4},"end":{"line":132,"column":4}},{"start":{"line":132,"column":4},"end":{"line":132,"column":4}}]},"6":{"line":132,"type":"binary-expr","locations":[{"start":{"line":132,"column":8},"end":{"line":132,"column":14}},{"start":{"line":132,"column":18},"end":{"line":132,"column":40}}]},"7":{"line":136,"type":"if","locations":[{"start":{"line":136,"column":4},"end":{"line":136,"column":4}},{"start":{"line":136,"column":4},"end":{"line":136,"column":4}}]},"8":{"line":139,"type":"if","locations":[{"start":{"line":139,"column":4},"end":{"line":139,"column":4}},{"start":{"line":139,"column":4},"end":{"line":139,"column":4}}]},"9":{"line":140,"type":"if","locations":[{"start":{"line":140,"column":6},"end":{"line":140,"column":6}},{"start":{"line":140,"column":6},"end":{"line":140,"column":6}}]},"10":{"line":140,"type":"binary-expr","locations":[{"start":{"line":140,"column":10},"end":{"line":140,"column":42}},{"start":{"line":140,"column":46},"end":{"line":140,"column":71}}]},"11":{"line":151,"type":"if","locations":[{"start":{"line":151,"column":4},"end":{"line":151,"column":4}},{"start":{"line":151,"column":4},"end":{"line":151,"column":4}}]},"12":{"line":171,"type":"if","locations":[{"start":{"line":171,"column":4},"end":{"line":171,"column":4}},{"start":{"line":171,"column":4},"end":{"line":171,"column":4}}]},"13":{"line":173,"type":"if","locations":[{"start":{"line":173,"column":8},"end":{"line":173,"column":8}},{"start":{"line":173,"column":8},"end":{"line":173,"column":8}}]},"14":{"line":191,"type":"if","locations":[{"start":{"line":191,"column":2},"end":{"line":191,"column":2}},{"start":{"line":191,"column":2},"end":{"line":191,"column":2}}]},"15":{"line":196,"type":"if","locations":[{"start":{"line":196,"column":2},"end":{"line":196,"column":2}},{"start":{"line":196,"column":2},"end":{"line":196,"column":2}}]},"16":{"line":212,"type":"if","locations":[{"start":{"line":212,"column":2},"end":{"line":212,"column":2}},{"start":{"line":212,"column":2},"end":{"line":212,"column":2}}]},"17":{"line":217,"type":"if","locations":[{"start":{"line":217,"column":2},"end":{"line":217,"column":2}},{"start":{"line":217,"column":2},"end":{"line":217,"column":2}}]}},"code":["'use strict';","","var clone = require('../../utils/object').clone;","var validateIndex = require('../../utils/array').validateIndex;","var DimensionError = require('../../error/DimensionError');","","function factory (type, config, load, typed) {","  var matrix = load(require('../../type/matrix/function/matrix'));","","  /**","   * Get or set a subset of a matrix or string.","   *","   * Syntax:","   *     math.subset(value, index)                                // retrieve a subset","   *     math.subset(value, index, replacement [, defaultValue])  // replace a subset","   *","   * Examples:","   *","   *     // get a subset","   *     var d = [[1, 2], [3, 4]];","   *     math.subset(d, math.index(1, 0));        // returns 3","   *     math.subset(d, math.index([0, 2], 1));   // returns [[2], [4]]","   *","   *     // replace a subset","   *     var e = [];","   *     var f = math.subset(e, math.index(0, [0, 2]), [5, 6]);  // f = [[5, 6]]","   *     var g = math.subset(f, math.index(1, 1), 7, 0);         // g = [[5, 6], [0, 7]]","   *","   * See also:","   *","   *     size, resize, squeeze, index","   *","   * @param {Array | Matrix | string} matrix  An array, matrix, or string","   * @param {Index} index                     An index containing ranges for each","   *                                          dimension","   * @param {*} [replacement]                 An array, matrix, or scalar.","   *                                          If provided, the subset is replaced with replacement.","   *                                          If not provided, the subset is returned","   * @param {*} [defaultValue=undefined]      Default value, filled in on new entries when","   *                                          the matrix is resized. If not provided,","   *                                          math.matrix elements will be left undefined.","   * @return {Array | Matrix | string} Either the retrieved subset or the updated matrix.","   */","  var subset = typed('subset', {","    // get subset","    'Array, Index': function (value, index) {","      var m = matrix(value);","      var subset = m.subset(index);       // returns a Matrix","      return subset && subset.valueOf();  // return an Array (like the input)","    },","","    'Matrix, Index': function (value, index) {","      return value.subset(index);","    },","","    'Object, Index': _getObjectProperty,","","    'string, Index': _getSubstring,","","    // set subset","    'Array, Index, any': function (value, index, replacement) {","      return matrix(clone(value))","          .subset(index, replacement, undefined)","          .valueOf();","    },","","    'Array, Index, any, any': function (value, index, replacement, defaultValue) {","      return matrix(clone(value))","          .subset(index, replacement, defaultValue)","          .valueOf();","    },","","    'Matrix, Index, any': function (value, index, replacement) {","      return value.clone().subset(index, replacement);","    },","","    'Matrix, Index, any, any': function (value, index, replacement, defaultValue) {","      return value.clone().subset(index, replacement, defaultValue);","    },","","    'string, Index, string': _setSubstring,","    'string, Index, string, string': _setSubstring,","    'Object, Index, any': _setObjectProperty","  });","","  subset.toTex = undefined; // use default template","","  return subset;","","  /**","   * Retrieve a subset of a string","   * @param {string} str            string from which to get a substring","   * @param {Index} index           An index containing ranges for each dimension","   * @returns {string} substring","   * @private","   */","  function _getSubstring(str, index) {","    if (!index || index.isIndex !== true) {","      // TODO: better error message","      throw new TypeError('Index expected');","    }","    if (index.size().length != 1) {","      throw new DimensionError(index.size().length, 1);","    }","","    // validate whether the range is out of range","    var strLen = str.length;","    validateIndex(index.min()[0], strLen);","    validateIndex(index.max()[0], strLen);","","    var range = index.dimension(0);","","    var substr = '';","    range.forEach(function (v) {","      substr += str.charAt(v);","    });","","    return substr;","  }","","  /**","   * Replace a substring in a string","   * @param {string} str            string to be replaced","   * @param {Index} index           An index containing ranges for each dimension","   * @param {string} replacement    Replacement string","   * @param {string} [defaultValue] Default value to be uses when resizing","   *                                the string. is ' ' by default","   * @returns {string} result","   * @private","   */","  function _setSubstring(str, index, replacement, defaultValue) {","    if (!index || index.isIndex !== true) {","      // TODO: better error message","      throw new TypeError('Index expected');","    }","    if (index.size().length != 1) {","      throw new DimensionError(index.size().length, 1);","    }","    if (defaultValue !== undefined) {","      if (typeof defaultValue !== 'string' || defaultValue.length !== 1) {","        throw new TypeError('Single character expected as defaultValue');","      }","    }","    else {","      defaultValue = ' ';","    }","","    var range = index.dimension(0);","    var len = range.size()[0];","","    if (len != replacement.length) {","      throw new DimensionError(range.size()[0], replacement.length);","    }","","    // validate whether the range is out of range","    var strLen = str.length;","    validateIndex(index.min()[0]);","    validateIndex(index.max()[0]);","","    // copy the string into an array with characters","    var chars = [];","    for (var i = 0; i < strLen; i++) {","      chars[i] = str.charAt(i);","    }","","    range.forEach(function (v, i) {","      chars[v] = replacement.charAt(i[0]);","    });","","    // initialize undefined characters with a space","    if (chars.length > strLen) {","      for (i = strLen - 1, len = chars.length; i < len; i++) {","        if (!chars[i]) {","          chars[i] = defaultValue;","        }","      }","    }","","    return chars.join('');","  }","}","","/**"," * Retrieve a property from an object"," * @param {Object} object"," * @param {Index} index"," * @return {*} Returns the value of the property"," * @private"," */","function _getObjectProperty (object, index) {","  if (index.size().length !== 1) {","    throw new DimensionError(index.size(), 1);","  }","","  var key = index.dimension(0);","  if (typeof key !== 'string') {","    throw new TypeError('String expected as index to retrieve an object property');","  }","","  return object[key];","}","","/**"," * Set a property on an object"," * @param {Object} object"," * @param {Index} index"," * @param {*} replacement"," * @return {*} Returns the updated object"," * @private"," */","function _setObjectProperty (object, index, replacement) {","  if (index.size().length !== 1) {","    throw new DimensionError(index.size(), 1);","  }","","  var key = index.dimension(0);","  if (typeof key !== 'string') {","    throw new TypeError('String expected as index to retrieve an object property');","  }","","  // clone the object, and apply the property to the clone","  var updated = clone(object);","  updated[key] = replacement;","","  return updated;","}","","exports.name = 'subset';","exports.factory = factory;",""],"l":{"3":1,"4":1,"5":1,"7":1,"8":0,"44":0,"47":0,"48":0,"49":0,"53":0,"62":0,"68":0,"74":0,"78":0,"86":0,"88":0,"97":1,"98":0,"100":0,"102":0,"103":0,"107":0,"108":0,"109":0,"111":0,"113":0,"114":0,"115":0,"118":0,"131":1,"132":0,"134":0,"136":0,"137":0,"139":0,"140":0,"141":0,"145":0,"148":0,"149":0,"151":0,"152":0,"156":0,"157":0,"158":0,"161":0,"162":0,"163":0,"166":0,"167":0,"171":0,"172":0,"173":0,"174":0,"179":0,"190":1,"191":0,"192":0,"195":0,"196":0,"197":0,"200":0,"211":1,"212":0,"213":0,"216":0,"217":0,"218":0,"222":0,"223":0,"225":0,"228":1,"229":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/matrix/trace.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/matrix/trace.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":1,"56":1},"b":{"1":[0,0],"2":[0,0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"factory","line":6,"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":45}}},"2":{"name":"(anonymous_2)","line":40,"loc":{"start":{"line":40,"column":13},"end":{"line":40,"column":26}}},"3":{"name":"(anonymous_3)","line":45,"loc":{"start":{"line":45,"column":14},"end":{"line":45,"column":27}}},"4":{"name":"(anonymous_4)","line":63,"loc":{"start":{"line":63,"column":20},"end":{"line":63,"column":33}}},"5":{"name":"(anonymous_5)","line":97,"loc":{"start":{"line":97,"column":21},"end":{"line":97,"column":34}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":48}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":50}},"3":{"start":{"line":6,"column":0},"end":{"line":144,"column":1}},"4":{"start":{"line":8,"column":2},"end":{"line":8,"column":66}},"5":{"start":{"line":9,"column":2},"end":{"line":9,"column":47}},"6":{"start":{"line":38,"column":2},"end":{"line":61,"column":5}},"7":{"start":{"line":42,"column":6},"end":{"line":42,"column":30}},"8":{"start":{"line":47,"column":6},"end":{"line":47,"column":12}},"9":{"start":{"line":49,"column":6},"end":{"line":56,"column":7}},"10":{"start":{"line":51,"column":10},"end":{"line":51,"column":29}},"11":{"start":{"line":52,"column":10},"end":{"line":52,"column":16}},"12":{"start":{"line":54,"column":10},"end":{"line":54,"column":30}},"13":{"start":{"line":55,"column":10},"end":{"line":55,"column":16}},"14":{"start":{"line":57,"column":6},"end":{"line":57,"column":15}},"15":{"start":{"line":63,"column":2},"end":{"line":95,"column":4}},"16":{"start":{"line":65,"column":4},"end":{"line":65,"column":23}},"17":{"start":{"line":66,"column":4},"end":{"line":66,"column":23}},"18":{"start":{"line":69,"column":4},"end":{"line":94,"column":5}},"19":{"start":{"line":72,"column":8},"end":{"line":75,"column":9}},"20":{"start":{"line":74,"column":10},"end":{"line":74,"column":32}},"21":{"start":{"line":76,"column":8},"end":{"line":76,"column":83}},"22":{"start":{"line":79,"column":8},"end":{"line":79,"column":27}},"23":{"start":{"line":80,"column":8},"end":{"line":80,"column":27}},"24":{"start":{"line":81,"column":8},"end":{"line":89,"column":9}},"25":{"start":{"line":83,"column":10},"end":{"line":83,"column":22}},"26":{"start":{"line":85,"column":10},"end":{"line":86,"column":39}},"27":{"start":{"line":86,"column":12},"end":{"line":86,"column":39}},"28":{"start":{"line":88,"column":10},"end":{"line":88,"column":21}},"29":{"start":{"line":90,"column":8},"end":{"line":90,"column":83}},"30":{"start":{"line":93,"column":8},"end":{"line":93,"column":92}},"31":{"start":{"line":97,"column":2},"end":{"line":139,"column":4}},"32":{"start":{"line":99,"column":4},"end":{"line":99,"column":27}},"33":{"start":{"line":100,"column":4},"end":{"line":100,"column":25}},"34":{"start":{"line":101,"column":4},"end":{"line":101,"column":21}},"35":{"start":{"line":102,"column":4},"end":{"line":102,"column":23}},"36":{"start":{"line":104,"column":4},"end":{"line":104,"column":23}},"37":{"start":{"line":105,"column":4},"end":{"line":105,"column":26}},"38":{"start":{"line":107,"column":4},"end":{"line":137,"column":5}},"39":{"start":{"line":109,"column":6},"end":{"line":109,"column":18}},"40":{"start":{"line":111,"column":6},"end":{"line":134,"column":7}},"41":{"start":{"line":113,"column":8},"end":{"line":133,"column":9}},"42":{"start":{"line":115,"column":10},"end":{"line":115,"column":26}},"43":{"start":{"line":116,"column":10},"end":{"line":116,"column":30}},"44":{"start":{"line":118,"column":10},"end":{"line":132,"column":11}},"45":{"start":{"line":120,"column":12},"end":{"line":120,"column":29}},"46":{"start":{"line":122,"column":12},"end":{"line":127,"column":13}},"47":{"start":{"line":124,"column":14},"end":{"line":124,"column":40}},"48":{"start":{"line":126,"column":14},"end":{"line":126,"column":20}},"49":{"start":{"line":128,"column":12},"end":{"line":131,"column":13}},"50":{"start":{"line":130,"column":14},"end":{"line":130,"column":20}},"51":{"start":{"line":136,"column":6},"end":{"line":136,"column":17}},"52":{"start":{"line":138,"column":4},"end":{"line":138,"column":79}},"53":{"start":{"line":141,"column":2},"end":{"line":141,"column":61}},"54":{"start":{"line":143,"column":2},"end":{"line":143,"column":15}},"55":{"start":{"line":146,"column":0},"end":{"line":146,"column":23}},"56":{"start":{"line":147,"column":0},"end":{"line":147,"column":26}}},"branchMap":{"1":{"line":49,"type":"switch","locations":[{"start":{"line":50,"column":8},"end":{"line":52,"column":16}},{"start":{"line":53,"column":8},"end":{"line":55,"column":16}}]},"2":{"line":69,"type":"switch","locations":[{"start":{"line":70,"column":6},"end":{"line":76,"column":83}},{"start":{"line":77,"column":6},"end":{"line":90,"column":83}},{"start":{"line":91,"column":6},"end":{"line":93,"column":92}}]},"3":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":8},"end":{"line":72,"column":8}},{"start":{"line":72,"column":8},"end":{"line":72,"column":8}}]},"4":{"line":81,"type":"if","locations":[{"start":{"line":81,"column":8},"end":{"line":81,"column":8}},{"start":{"line":81,"column":8},"end":{"line":81,"column":8}}]},"5":{"line":107,"type":"if","locations":[{"start":{"line":107,"column":4},"end":{"line":107,"column":4}},{"start":{"line":107,"column":4},"end":{"line":107,"column":4}}]},"6":{"line":111,"type":"if","locations":[{"start":{"line":111,"column":6},"end":{"line":111,"column":6}},{"start":{"line":111,"column":6},"end":{"line":111,"column":6}}]},"7":{"line":122,"type":"if","locations":[{"start":{"line":122,"column":12},"end":{"line":122,"column":12}},{"start":{"line":122,"column":12},"end":{"line":122,"column":12}}]},"8":{"line":128,"type":"if","locations":[{"start":{"line":128,"column":12},"end":{"line":128,"column":12}},{"start":{"line":128,"column":12},"end":{"line":128,"column":12}}]}},"code":["'use strict';","","var clone = require('../../utils/object').clone;","var format = require('../../utils/string').format;","","function factory (type, config, load, typed) {","  ","  var matrix = load(require('../../type/matrix/function/matrix'));","  var add = load(require('../arithmetic/add'));","","  /**","   * Calculate the trace of a matrix: the sum of the elements on the main","   * diagonal of a square matrix.","   *","   * Syntax:","   *","   *    math.trace(x)","   *","   * Examples:","   *","   *    math.trace([[1, 2], [3, 4]]); // returns 5","   *","   *    var A = [","   *      [1, 2, 3],","   *      [-1, 2, 3],","   *      [2, 0, 3]","   *    ]","   *    math.trace(A); // returns 6","   *","   * See also:","   *","   *    diag","   *","   * @param {Array | Matrix} x  A matrix","   *","   * @return {number} The trace of `x`","   */","  var trace = typed('trace', {","    ","    'Array': function (x) {","      // use dense matrix implementation","      return trace(matrix(x));","    },","","    'Matrix': function (x) {","      // result","      var c;","      // process storage format","      switch (x.storage()) {","        case 'dense':","          c = _denseTrace(x);","          break;","        case 'sparse':","          c = _sparseTrace(x);","          break;","      }","      return c;","    },","    ","    'any': clone","  });","  ","  var _denseTrace = function (m) {","    // matrix size & data","    var size = m._size;","    var data = m._data;","    ","    // process dimensions","    switch (size.length) {","      case 1:","        // vector","        if (size[0] == 1) {","          // return data[0]","          return clone(data[0]);","        }","        throw new RangeError('Matrix must be square (size: ' + format(size) + ')');","      case 2:","        // two dimensional","        var rows = size[0];","        var cols = size[1];","        if (rows === cols) {","          // calulate sum","          var sum = 0;","          // loop diagonal","          for (var i = 0; i < rows; i++)","            sum = add(sum, data[i][i]);","          // return trace","          return sum;","        }","        throw new RangeError('Matrix must be square (size: ' + format(size) + ')');        ","      default:","        // multi dimensional","        throw new RangeError('Matrix must be two dimensional (size: ' + format(size) + ')');","    }","  };","  ","  var _sparseTrace = function (m) {","    // matrix arrays","    var values = m._values;","    var index = m._index;","    var ptr = m._ptr;","    var size = m._size;","    // check dimensions","    var rows = size[0];","    var columns = size[1];","    // matrix must be square","    if (rows === columns) {","      // calulate sum","      var sum = 0;","      // check we have data (avoid looping columns)","      if (values.length > 0) {","        // loop columns","        for (var j = 0; j < columns; j++) {","          // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]","          var k0 = ptr[j];","          var k1 = ptr[j + 1];","          // loop k within [k0, k1[","          for (var k = k0; k < k1; k++) {","            // row index","            var i = index[k];","            // check row","            if (i === j) {","              // accumulate value","              sum = add(sum, values[k]);","              // exit loop","              break;","            }","            if (i > j) {","              // exit loop, no value on the diagonal for column j","              break;","            }","          }","        }","      }","      // return trace","      return sum;","    }","    throw new RangeError('Matrix must be square (size: ' + format(size) + ')');   ","  };","","  trace.toTex = {1: '\\\\mathrm{tr}\\\\left(${args[0]}\\\\right)'};","  ","  return trace;","}","","exports.name = 'trace';","exports.factory = factory;",""],"l":{"3":1,"4":1,"6":1,"8":0,"9":0,"38":0,"42":0,"47":0,"49":0,"51":0,"52":0,"54":0,"55":0,"57":0,"63":0,"65":0,"66":0,"69":0,"72":0,"74":0,"76":0,"79":0,"80":0,"81":0,"83":0,"85":0,"86":0,"88":0,"90":0,"93":0,"97":0,"99":0,"100":0,"101":0,"102":0,"104":0,"105":0,"107":0,"109":0,"111":0,"113":0,"115":0,"116":0,"118":0,"120":0,"122":0,"124":0,"126":0,"128":0,"130":0,"136":0,"138":0,"141":0,"143":0,"146":1,"147":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/matrix/transpose.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/matrix/transpose.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":1,"65":1},"b":{"1":[0,0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"factory","line":6,"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":45}}},"2":{"name":"(anonymous_2)","line":38,"loc":{"start":{"line":38,"column":13},"end":{"line":38,"column":26}}},"3":{"name":"(anonymous_3)","line":43,"loc":{"start":{"line":43,"column":14},"end":{"line":43,"column":27}}},"4":{"name":"(anonymous_4)","line":87,"loc":{"start":{"line":87,"column":11},"end":{"line":87,"column":24}}},"5":{"name":"(anonymous_5)","line":92,"loc":{"start":{"line":92,"column":24},"end":{"line":92,"column":52}}},"6":{"name":"(anonymous_6)","line":116,"loc":{"start":{"line":116,"column":25},"end":{"line":116,"column":53}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":48}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":50}},"3":{"start":{"line":6,"column":0},"end":{"line":175,"column":1}},"4":{"start":{"line":7,"column":2},"end":{"line":7,"column":43}},"5":{"start":{"line":9,"column":2},"end":{"line":9,"column":66}},"6":{"start":{"line":11,"column":2},"end":{"line":12,"column":39}},"7":{"start":{"line":36,"column":2},"end":{"line":90,"column":5}},"8":{"start":{"line":40,"column":6},"end":{"line":40,"column":44}},"9":{"start":{"line":45,"column":6},"end":{"line":45,"column":26}},"10":{"start":{"line":48,"column":6},"end":{"line":48,"column":12}},"11":{"start":{"line":51,"column":6},"end":{"line":82,"column":7}},"12":{"start":{"line":54,"column":10},"end":{"line":54,"column":24}},"13":{"start":{"line":55,"column":10},"end":{"line":55,"column":16}},"14":{"start":{"line":59,"column":10},"end":{"line":59,"column":29}},"15":{"start":{"line":60,"column":10},"end":{"line":60,"column":32}},"16":{"start":{"line":63,"column":10},"end":{"line":66,"column":11}},"17":{"start":{"line":65,"column":12},"end":{"line":65,"column":110}},"18":{"start":{"line":69,"column":10},"end":{"line":76,"column":11}},"19":{"start":{"line":71,"column":14},"end":{"line":71,"column":52}},"20":{"start":{"line":72,"column":14},"end":{"line":72,"column":20}},"21":{"start":{"line":74,"column":14},"end":{"line":74,"column":53}},"22":{"start":{"line":75,"column":14},"end":{"line":75,"column":20}},"23":{"start":{"line":77,"column":10},"end":{"line":77,"column":16}},"24":{"start":{"line":81,"column":10},"end":{"line":81,"column":112}},"25":{"start":{"line":83,"column":6},"end":{"line":83,"column":15}},"26":{"start":{"line":88,"column":6},"end":{"line":88,"column":22}},"27":{"start":{"line":92,"column":2},"end":{"line":114,"column":4}},"28":{"start":{"line":94,"column":4},"end":{"line":94,"column":23}},"29":{"start":{"line":96,"column":4},"end":{"line":96,"column":24}},"30":{"start":{"line":97,"column":4},"end":{"line":97,"column":22}},"31":{"start":{"line":99,"column":4},"end":{"line":107,"column":5}},"32":{"start":{"line":101,"column":6},"end":{"line":101,"column":41}},"33":{"start":{"line":103,"column":6},"end":{"line":106,"column":7}},"34":{"start":{"line":105,"column":8},"end":{"line":105,"column":45}},"35":{"start":{"line":109,"column":4},"end":{"line":113,"column":7}},"36":{"start":{"line":116,"column":2},"end":{"line":170,"column":4}},"37":{"start":{"line":118,"column":4},"end":{"line":118,"column":27}},"38":{"start":{"line":119,"column":4},"end":{"line":119,"column":25}},"39":{"start":{"line":120,"column":4},"end":{"line":120,"column":21}},"40":{"start":{"line":122,"column":4},"end":{"line":122,"column":42}},"41":{"start":{"line":123,"column":4},"end":{"line":123,"column":20}},"42":{"start":{"line":124,"column":4},"end":{"line":124,"column":18}},"43":{"start":{"line":126,"column":4},"end":{"line":126,"column":15}},"44":{"start":{"line":127,"column":4},"end":{"line":128,"column":15}},"45":{"start":{"line":128,"column":6},"end":{"line":128,"column":15}},"46":{"start":{"line":130,"column":4},"end":{"line":130,"column":16}},"47":{"start":{"line":132,"column":4},"end":{"line":135,"column":5}},"48":{"start":{"line":134,"column":6},"end":{"line":134,"column":20}},"49":{"start":{"line":137,"column":4},"end":{"line":137,"column":16}},"50":{"start":{"line":139,"column":4},"end":{"line":146,"column":5}},"51":{"start":{"line":141,"column":6},"end":{"line":141,"column":21}},"52":{"start":{"line":143,"column":6},"end":{"line":143,"column":18}},"53":{"start":{"line":145,"column":6},"end":{"line":145,"column":21}},"54":{"start":{"line":148,"column":4},"end":{"line":148,"column":19}},"55":{"start":{"line":150,"column":4},"end":{"line":161,"column":5}},"56":{"start":{"line":152,"column":6},"end":{"line":160,"column":7}},"57":{"start":{"line":154,"column":8},"end":{"line":154,"column":30}},"58":{"start":{"line":156,"column":8},"end":{"line":156,"column":22}},"59":{"start":{"line":158,"column":8},"end":{"line":159,"column":40}},"60":{"start":{"line":159,"column":10},"end":{"line":159,"column":40}},"61":{"start":{"line":163,"column":4},"end":{"line":169,"column":7}},"62":{"start":{"line":172,"column":2},"end":{"line":172,"column":84}},"63":{"start":{"line":174,"column":2},"end":{"line":174,"column":19}},"64":{"start":{"line":177,"column":0},"end":{"line":177,"column":27}},"65":{"start":{"line":178,"column":0},"end":{"line":178,"column":26}}},"branchMap":{"1":{"line":51,"type":"switch","locations":[{"start":{"line":52,"column":8},"end":{"line":55,"column":16}},{"start":{"line":57,"column":8},"end":{"line":77,"column":16}},{"start":{"line":79,"column":8},"end":{"line":81,"column":112}}]},"2":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":10},"end":{"line":63,"column":10}},{"start":{"line":63,"column":10},"end":{"line":63,"column":10}}]},"3":{"line":69,"type":"switch","locations":[{"start":{"line":70,"column":12},"end":{"line":72,"column":20}},{"start":{"line":73,"column":12},"end":{"line":75,"column":20}}]},"4":{"line":122,"type":"cond-expr","locations":[{"start":{"line":122,"column":27},"end":{"line":122,"column":29}},{"start":{"line":122,"column":32},"end":{"line":122,"column":41}}]},"5":{"line":158,"type":"if","locations":[{"start":{"line":158,"column":8},"end":{"line":158,"column":8}},{"start":{"line":158,"column":8},"end":{"line":158,"column":8}}]}},"code":["'use strict';","","var clone = require('../../utils/object').clone;","var format = require('../../utils/string').format;","","function factory (type, config, load, typed) {","  var latex = require('../../utils/latex');","","  var matrix = load(require('../../type/matrix/function/matrix'));","","  var DenseMatrix = type.DenseMatrix,","      SparseMatrix = type.SparseMatrix;","","  /**","   * Transpose a matrix. All values of the matrix are reflected over its","   * main diagonal. Only applicable to two dimensional matrices containing","   * a vector (i.e. having size `[1,n]` or `[n,1]`). One dimensional","   * vectors and scalars return the input unchanged.","   *","   * Syntax:","   *","   *     math.transpose(x)","   *","   * Examples:","   *","   *     var A = [[1, 2, 3], [4, 5, 6]];","   *     math.transpose(A);               // returns [[1, 4], [2, 5], [3, 6]]","   *","   * See also:","   *","   *     diag, inv, subset, squeeze","   *","   * @param {Array | Matrix} x  Matrix to be transposed","   * @return {Array | Matrix}   The transposed matrix","   */","  var transpose = typed('transpose', {","","    'Array': function (x) {","      // use dense matrix implementation","      return transpose(matrix(x)).valueOf();","    },","","    'Matrix': function (x) {","      // matrix size","      var size = x.size();","","      // result","      var c;","      ","      // process dimensions","      switch (size.length) {","        case 1:","          // vector","          c = x.clone();","          break;","","        case 2:","          // rows and columns","          var rows = size[0];","          var columns = size[1];","","          // check columns","          if (columns === 0) {","            // throw exception","            throw new RangeError('Cannot transpose a 2D matrix with no columns (size: ' + format(size) + ')');","          }","","          // process storage format","          switch (x.storage()) {","            case 'dense':","              c = _denseTranspose(x, rows, columns);","              break;","            case 'sparse':","              c = _sparseTranspose(x, rows, columns);","              break;","          }","          break;","          ","        default:","          // multi dimensional","          throw new RangeError('Matrix must be a vector or two dimensional (size: ' + format(this._size) + ')');","      }","      return c;","    },","","    // scalars","    'any': function (x) {","      return clone(x);","    }","  });","","  var _denseTranspose = function (m, rows, columns) {","    // matrix array","    var data = m._data;","    // transposed matrix data","    var transposed = [];","    var transposedRow;","    // loop columns","    for (var j = 0; j < columns; j++) {","      // initialize row","      transposedRow = transposed[j] = [];","      // loop rows","      for (var i = 0; i < rows; i++) {","        // set data","        transposedRow[i] = clone(data[i][j]);","      }","    }","    // return matrix","    return new DenseMatrix({","      data: transposed,","      size: [columns, rows],","      datatype: m._datatype","    });","  };","","  var _sparseTranspose = function (m, rows, columns) {","    // matrix arrays","    var values = m._values;","    var index = m._index;","    var ptr = m._ptr;","    // result matrices","    var cvalues = values ? [] : undefined;","    var cindex = [];","    var cptr = [];","    // row counts","    var w = [];","    for (var x = 0; x < rows; x++)","      w[x] = 0;","    // vars","    var p, l, j;","    // loop values in matrix","    for (p = 0, l = index.length; p < l; p++) {","      // number of values in row","      w[index[p]]++;","    }","    // cumulative sum","    var sum = 0;","    // initialize cptr with the cummulative sum of row counts","    for (var i = 0; i < rows; i++) {","      // update cptr","      cptr.push(sum);","      // update sum","      sum += w[i];","      // update w","      w[i] = cptr[i];","    }","    // update cptr","    cptr.push(sum);","    // loop columns","    for (j = 0; j < columns; j++) {","      // values & index in column","      for (var k0 = ptr[j], k1 = ptr[j + 1], k = k0; k < k1; k++) {","        // C values & index","        var q = w[index[k]]++;","        // C[j, i] = A[i, j]","        cindex[q] = j;","        // check we need to process values (pattern matrix)","        if (values)","          cvalues[q] = clone(values[k]);","      }","    }","    // return matrix","    return new SparseMatrix({","      values: cvalues,","      index: cindex,","      ptr: cptr,","      size: [columns, rows],","      datatype: m._datatype","    });","  };","","  transpose.toTex = {1: '\\\\left(${args[0]}\\\\right)' + latex.operators['transpose']};","","  return transpose;","}","","exports.name = 'transpose';","exports.factory = factory;",""],"l":{"3":1,"4":1,"6":1,"7":0,"9":0,"11":0,"36":0,"40":0,"45":0,"48":0,"51":0,"54":0,"55":0,"59":0,"60":0,"63":0,"65":0,"69":0,"71":0,"72":0,"74":0,"75":0,"77":0,"81":0,"83":0,"88":0,"92":0,"94":0,"96":0,"97":0,"99":0,"101":0,"103":0,"105":0,"109":0,"116":0,"118":0,"119":0,"120":0,"122":0,"123":0,"124":0,"126":0,"127":0,"128":0,"130":0,"132":0,"134":0,"137":0,"139":0,"141":0,"143":0,"145":0,"148":0,"150":0,"152":0,"154":0,"156":0,"158":0,"159":0,"163":0,"172":0,"174":0,"177":1,"178":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/matrix/zeros.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/matrix/zeros.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":1,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":1,"40":0,"41":0,"42":0,"43":1,"44":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"fnMap":{"1":{"name":"factory","line":6,"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":45}}},"2":{"name":"(anonymous_2)","line":41,"loc":{"start":{"line":41,"column":8},"end":{"line":41,"column":20}}},"3":{"name":"(anonymous_3)","line":49,"loc":{"start":{"line":49,"column":38},"end":{"line":49,"column":54}}},"4":{"name":"(anonymous_4)","line":65,"loc":{"start":{"line":65,"column":14},"end":{"line":65,"column":30}}},"5":{"name":"(anonymous_5)","line":70,"loc":{"start":{"line":70,"column":30},"end":{"line":70,"column":54}}},"6":{"name":"_zeros","line":86,"loc":{"start":{"line":86,"column":2},"end":{"line":86,"column":32}}},"7":{"name":"_normalize","line":110,"loc":{"start":{"line":110,"column":2},"end":{"line":110,"column":28}}},"8":{"name":"(anonymous_8)","line":112,"loc":{"start":{"line":112,"column":17},"end":{"line":112,"column":46}}},"9":{"name":"_validate","line":122,"loc":{"start":{"line":122,"column":2},"end":{"line":122,"column":28}}},"10":{"name":"(anonymous_10)","line":123,"loc":{"start":{"line":123,"column":17},"end":{"line":123,"column":34}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":49}},"3":{"start":{"line":6,"column":0},"end":{"line":129,"column":1}},"4":{"start":{"line":7,"column":2},"end":{"line":7,"column":66}},"5":{"start":{"line":40,"column":2},"end":{"line":73,"column":5}},"6":{"start":{"line":42,"column":6},"end":{"line":44,"column":34}},"7":{"start":{"line":50,"column":6},"end":{"line":50,"column":39}},"8":{"start":{"line":51,"column":6},"end":{"line":60,"column":7}},"9":{"start":{"line":52,"column":8},"end":{"line":52,"column":32}},"10":{"start":{"line":53,"column":8},"end":{"line":53,"column":36}},"11":{"start":{"line":55,"column":11},"end":{"line":60,"column":7}},"12":{"start":{"line":56,"column":8},"end":{"line":56,"column":28}},"13":{"start":{"line":59,"column":8},"end":{"line":59,"column":39}},"14":{"start":{"line":66,"column":6},"end":{"line":66,"column":34}},"15":{"start":{"line":67,"column":6},"end":{"line":67,"column":44}},"16":{"start":{"line":71,"column":6},"end":{"line":71,"column":45}},"17":{"start":{"line":75,"column":2},"end":{"line":75,"column":26}},"18":{"start":{"line":77,"column":2},"end":{"line":77,"column":15}},"19":{"start":{"line":86,"column":2},"end":{"line":107,"column":3}},"20":{"start":{"line":87,"column":4},"end":{"line":87,"column":41}},"21":{"start":{"line":88,"column":4},"end":{"line":88,"column":65}},"22":{"start":{"line":89,"column":4},"end":{"line":89,"column":20}},"23":{"start":{"line":91,"column":4},"end":{"line":106,"column":5}},"24":{"start":{"line":93,"column":6},"end":{"line":93,"column":29}},"25":{"start":{"line":94,"column":6},"end":{"line":96,"column":7}},"26":{"start":{"line":95,"column":8},"end":{"line":95,"column":44}},"27":{"start":{"line":97,"column":6},"end":{"line":97,"column":15}},"28":{"start":{"line":101,"column":6},"end":{"line":101,"column":19}},"29":{"start":{"line":102,"column":6},"end":{"line":104,"column":7}},"30":{"start":{"line":103,"column":8},"end":{"line":103,"column":47}},"31":{"start":{"line":105,"column":6},"end":{"line":105,"column":17}},"32":{"start":{"line":110,"column":2},"end":{"line":119,"column":3}},"33":{"start":{"line":111,"column":4},"end":{"line":111,"column":30}},"34":{"start":{"line":112,"column":4},"end":{"line":117,"column":7}},"35":{"start":{"line":113,"column":6},"end":{"line":116,"column":7}},"36":{"start":{"line":114,"column":8},"end":{"line":114,"column":29}},"37":{"start":{"line":115,"column":8},"end":{"line":115,"column":38}},"38":{"start":{"line":118,"column":4},"end":{"line":118,"column":25}},"39":{"start":{"line":122,"column":2},"end":{"line":128,"column":3}},"40":{"start":{"line":123,"column":4},"end":{"line":127,"column":7}},"41":{"start":{"line":124,"column":6},"end":{"line":126,"column":7}},"42":{"start":{"line":125,"column":8},"end":{"line":125,"column":82}},"43":{"start":{"line":133,"column":0},"end":{"line":133,"column":23}},"44":{"start":{"line":134,"column":0},"end":{"line":134,"column":26}}},"branchMap":{"1":{"line":42,"type":"cond-expr","locations":[{"start":{"line":43,"column":12},"end":{"line":43,"column":22}},{"start":{"line":44,"column":12},"end":{"line":44,"column":33}}]},"2":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":6},"end":{"line":51,"column":6}},{"start":{"line":51,"column":6},"end":{"line":51,"column":6}}]},"3":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":11},"end":{"line":55,"column":11}},{"start":{"line":55,"column":11},"end":{"line":55,"column":11}}]},"4":{"line":88,"type":"cond-expr","locations":[{"start":{"line":88,"column":39},"end":{"line":88,"column":60}},{"start":{"line":88,"column":63},"end":{"line":88,"column":64}}]},"5":{"line":91,"type":"if","locations":[{"start":{"line":91,"column":4},"end":{"line":91,"column":4}},{"start":{"line":91,"column":4},"end":{"line":91,"column":4}}]},"6":{"line":94,"type":"if","locations":[{"start":{"line":94,"column":6},"end":{"line":94,"column":6}},{"start":{"line":94,"column":6},"end":{"line":94,"column":6}}]},"7":{"line":102,"type":"if","locations":[{"start":{"line":102,"column":6},"end":{"line":102,"column":6}},{"start":{"line":102,"column":6},"end":{"line":102,"column":6}}]},"8":{"line":113,"type":"if","locations":[{"start":{"line":113,"column":6},"end":{"line":113,"column":6}},{"start":{"line":113,"column":6},"end":{"line":113,"column":6}}]},"9":{"line":113,"type":"binary-expr","locations":[{"start":{"line":113,"column":10},"end":{"line":113,"column":15}},{"start":{"line":113,"column":19},"end":{"line":113,"column":45}}]},"10":{"line":124,"type":"if","locations":[{"start":{"line":124,"column":6},"end":{"line":124,"column":6}},{"start":{"line":124,"column":6},"end":{"line":124,"column":6}}]},"11":{"line":124,"type":"binary-expr","locations":[{"start":{"line":124,"column":10},"end":{"line":124,"column":35}},{"start":{"line":124,"column":39},"end":{"line":124,"column":56}},{"start":{"line":124,"column":60},"end":{"line":124,"column":69}}]}},"code":["'use strict';","","var isInteger = require('../../utils/number').isInteger;","var resize = require('../../utils/array').resize;","","function factory (type, config, load, typed) {","  var matrix = load(require('../../type/matrix/function/matrix'));","","  /**","   * Create a matrix filled with zeros. The created matrix can have one or","   * multiple dimensions.","   *","   * Syntax:","   *","   *    math.zeros(m)","   *    math.zeros(m, format)","   *    math.zeros(m, n)","   *    math.zeros(m, n, format)","   *    math.zeros([m, n])","   *    math.zeros([m, n], format)","   *","   * Examples:","   *","   *    math.zeros(3);                  // returns [0, 0, 0]","   *    math.zeros(3, 2);               // returns [[0, 0], [0, 0], [0, 0]]","   *    math.zeros(3, 'dense');         // returns [0, 0, 0]","   *","   *    var A = [[1, 2, 3], [4, 5, 6]];","   *    math.zeros(math.size(A));       // returns [[0, 0, 0], [0, 0, 0]]","   *","   * See also:","   *","   *    ones, eye, size, range","   *","   * @param {...number | Array} size    The size of each dimension of the matrix","   * @param {string} [format]           The Matrix storage format","   *","   * @return {Array | Matrix}           A matrix filled with zeros","   */","  var zeros = typed('zeros', {","    '': function () {","      return (config.matrix === 'Array')","          ? _zeros([])","          : _zeros([], 'default');","    },","","    // math.zeros(m, n, p, ..., format)","    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this","    '...number | BigNumber | string': function (size) {","      var last = size[size.length - 1];","      if (typeof last === 'string') {","        var format = size.pop();","        return _zeros(size, format);","      }","      else if (config.matrix === 'Array') {","        return _zeros(size);","      }","      else {","        return _zeros(size, 'default');","      }","    },","","    'Array': _zeros,","","    'Matrix': function (size) {","      var format = size.storage();","      return _zeros(size.valueOf(), format);","    },","","    'Array | Matrix, string': function (size, format) {","      return _zeros (size.valueOf(), format);","    }","  });","","  zeros.toTex = undefined; // use default template","","  return zeros;","","  /**","   * Create an Array or Matrix with zeros","   * @param {Array} size","   * @param {string} [format='default']","   * @return {Array | Matrix}","   * @private","   */","  function _zeros(size, format) {","    var hasBigNumbers = _normalize(size);","    var defaultValue = hasBigNumbers ? new type.BigNumber(0) : 0;","    _validate(size);","","    if (format) {","      // return a matrix","      var m = matrix(format);","      if (size.length > 0) {","        return m.resize(size, defaultValue);","      }","      return m;","    }","    else {","      // return an Array","      var arr = [];","      if (size.length > 0) {","        return resize(arr, size, defaultValue);","      }","      return arr;","    }","  }","","  // replace BigNumbers with numbers, returns true if size contained BigNumbers","  function _normalize(size) {","    var hasBigNumbers = false;","    size.forEach(function (value, index, arr) {","      if (value && value.isBigNumber === true) {","        hasBigNumbers = true;","        arr[index] = value.toNumber();","      }","    });","    return hasBigNumbers;","  }","","  // validate arguments","  function _validate (size) {","    size.forEach(function (value) {","      if (typeof value !== 'number' || !isInteger(value) || value < 0) {","        throw new Error('Parameters in function zeros must be positive integers');","      }","    });","  }","}","","// TODO: zeros contains almost the same code as ones. Reuse this?","","exports.name = 'zeros';","exports.factory = factory;",""],"l":{"3":1,"4":1,"6":1,"7":0,"40":0,"42":0,"50":0,"51":0,"52":0,"53":0,"55":0,"56":0,"59":0,"66":0,"67":0,"71":0,"75":0,"77":0,"86":1,"87":0,"88":0,"89":0,"91":0,"93":0,"94":0,"95":0,"97":0,"101":0,"102":0,"103":0,"105":0,"110":1,"111":0,"112":0,"113":0,"114":0,"115":0,"118":0,"122":1,"123":0,"124":0,"125":0,"133":1,"134":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/probability/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/probability/index.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":12,"column":2}}},"branchMap":{},"code":["module.exports = [","  //require('./distribution'), // TODO: rethink math.distribution","  require('./combinations'),","  require('./factorial'),","  require('./gamma'),","  require('./kldivergence'),","  require('./multinomial'),","  require('./permutations'),","  require('./pickRandom'),","  require('./random'),","  require('./randomInt')","];",""],"l":{"1":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/probability/combinations.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/probability/combinations.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":1,"32":0,"33":1,"34":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":30,"loc":{"start":{"line":30,"column":22},"end":{"line":30,"column":38}}},"3":{"name":"(anonymous_3)","line":52,"loc":{"start":{"line":52,"column":28},"end":{"line":52,"column":44}}},"4":{"name":"isPositiveInteger","line":86,"loc":{"start":{"line":86,"column":0},"end":{"line":86,"column":30}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":79,"column":1}},"3":{"start":{"line":29,"column":2},"end":{"line":74,"column":5}},"4":{"start":{"line":31,"column":6},"end":{"line":31,"column":25}},"5":{"start":{"line":33,"column":6},"end":{"line":35,"column":7}},"6":{"start":{"line":34,"column":8},"end":{"line":34,"column":88}},"7":{"start":{"line":36,"column":6},"end":{"line":38,"column":7}},"8":{"start":{"line":37,"column":8},"end":{"line":37,"column":88}},"9":{"start":{"line":39,"column":6},"end":{"line":41,"column":7}},"10":{"start":{"line":40,"column":8},"end":{"line":40,"column":65}},"11":{"start":{"line":43,"column":6},"end":{"line":43,"column":31}},"12":{"start":{"line":44,"column":6},"end":{"line":44,"column":17}},"13":{"start":{"line":45,"column":6},"end":{"line":47,"column":7}},"14":{"start":{"line":46,"column":8},"end":{"line":46,"column":40}},"15":{"start":{"line":49,"column":6},"end":{"line":49,"column":20}},"16":{"start":{"line":53,"column":6},"end":{"line":53,"column":29}},"17":{"start":{"line":54,"column":6},"end":{"line":54,"column":38}},"18":{"start":{"line":56,"column":6},"end":{"line":58,"column":7}},"19":{"start":{"line":57,"column":8},"end":{"line":57,"column":88}},"20":{"start":{"line":59,"column":6},"end":{"line":61,"column":7}},"21":{"start":{"line":60,"column":8},"end":{"line":60,"column":78}},"22":{"start":{"line":63,"column":6},"end":{"line":63,"column":23}},"23":{"start":{"line":64,"column":6},"end":{"line":64,"column":29}},"24":{"start":{"line":64,"column":21},"end":{"line":64,"column":29}},"25":{"start":{"line":65,"column":6},"end":{"line":65,"column":19}},"26":{"start":{"line":66,"column":6},"end":{"line":68,"column":7}},"27":{"start":{"line":67,"column":8},"end":{"line":67,"column":56}},"28":{"start":{"line":70,"column":6},"end":{"line":70,"column":20}},"29":{"start":{"line":76,"column":2},"end":{"line":76,"column":62}},"30":{"start":{"line":78,"column":2},"end":{"line":78,"column":22}},"31":{"start":{"line":86,"column":0},"end":{"line":88,"column":1}},"32":{"start":{"line":87,"column":2},"end":{"line":87,"column":35}},"33":{"start":{"line":90,"column":0},"end":{"line":90,"column":30}},"34":{"start":{"line":91,"column":0},"end":{"line":91,"column":26}}},"branchMap":{"1":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":6},"end":{"line":33,"column":6}},{"start":{"line":33,"column":6},"end":{"line":33,"column":6}}]},"2":{"line":33,"type":"binary-expr","locations":[{"start":{"line":33,"column":10},"end":{"line":33,"column":23}},{"start":{"line":33,"column":27},"end":{"line":33,"column":32}}]},"3":{"line":36,"type":"if","locations":[{"start":{"line":36,"column":6},"end":{"line":36,"column":6}},{"start":{"line":36,"column":6},"end":{"line":36,"column":6}}]},"4":{"line":36,"type":"binary-expr","locations":[{"start":{"line":36,"column":10},"end":{"line":36,"column":23}},{"start":{"line":36,"column":27},"end":{"line":36,"column":32}}]},"5":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":6},"end":{"line":39,"column":6}},{"start":{"line":39,"column":6},"end":{"line":39,"column":6}}]},"6":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":6},"end":{"line":56,"column":6}},{"start":{"line":56,"column":6},"end":{"line":56,"column":6}}]},"7":{"line":56,"type":"binary-expr","locations":[{"start":{"line":56,"column":10},"end":{"line":56,"column":31}},{"start":{"line":56,"column":35},"end":{"line":56,"column":56}}]},"8":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":6},"end":{"line":59,"column":6}},{"start":{"line":59,"column":6},"end":{"line":59,"column":6}}]},"9":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":6},"end":{"line":64,"column":6}},{"start":{"line":64,"column":6},"end":{"line":64,"column":6}}]},"10":{"line":87,"type":"binary-expr","locations":[{"start":{"line":87,"column":9},"end":{"line":87,"column":22}},{"start":{"line":87,"column":26},"end":{"line":87,"column":34}}]}},"code":["'use strict';","","var isInteger = require('../../utils/number').isInteger;","","function factory (type, config, load, typed) {","  /**","   * Compute the number of ways of picking `k` unordered outcomes from `n`","   * possibilities.","   *","   * Combinations only takes integer arguments.","   * The following condition must be enforced: k <= n.","   *","   * Syntax:","   *","   *     math.combinations(n, k)","   *","   * Examples:","   *","   *    math.combinations(7, 5); // returns 21","   *","   * See also:","   *","   *    permutations, factorial","   *","   * @param {number | BigNumber} n    Total number of objects in the set","   * @param {number | BigNumber} k    Number of objects in the subset","   * @return {number | BigNumber}     Number of possible combinations.","   */","  var combinations = typed('combinations', {","    'number, number': function (n, k) {","      var max, result, i;","","      if (!isInteger(n) || n < 0) {","        throw new TypeError('Positive integer value expected in function combinations');","      }","      if (!isInteger(k) || k < 0) {","        throw new TypeError('Positive integer value expected in function combinations');","      }","      if (k > n) {","        throw new TypeError('k must be less than or equal to n');","      }","","      max = Math.max(k, n - k);","      result = 1;","      for (i = 1; i <= n - max; i++) {","        result = result * (max + i) / i;","      }","","      return result;","    },","","    'BigNumber, BigNumber': function (n, k) {","      var max, result, i, ii;","      var one = new type.BigNumber(1);","","      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {","        throw new TypeError('Positive integer value expected in function combinations');","      }","      if (k.gt(n)) {","        throw new TypeError('k must be less than n in function combinations');","      }","","      max = n.minus(k);","      if (k.lt(max)) max = k;","      result = one;","      for (i = one, ii = n.minus(max); i.lte(ii); i = i.plus(1)) {","        result = result.times(max.plus(i)).dividedBy(i);","      }","","      return result;","    }","","    // TODO: implement support for collection in combinations","  });","","  combinations.toTex = {2: '\\\\binom{${args[0]}}{${args[1]}}'};","","  return combinations;","}","","/**"," * Test whether BigNumber n is a positive integer"," * @param {BigNumber} n"," * @returns {boolean} isPositiveInteger"," */","function isPositiveInteger(n) {","  return n.isInteger() && n.gte(0);","}","","exports.name = 'combinations';","exports.factory = factory;",""],"l":{"3":1,"5":1,"29":0,"31":0,"33":0,"34":0,"36":0,"37":0,"39":0,"40":0,"43":0,"44":0,"45":0,"46":0,"49":0,"53":0,"54":0,"56":0,"57":0,"59":0,"60":0,"63":0,"64":0,"65":0,"66":0,"67":0,"70":0,"76":0,"78":0,"86":1,"87":0,"90":1,"91":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/probability/factorial.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/probability/factorial.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":1,"16":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":32,"loc":{"start":{"line":32,"column":14},"end":{"line":32,"column":27}}},"3":{"name":"(anonymous_3)","line":40,"loc":{"start":{"line":40,"column":17},"end":{"line":40,"column":30}}},"4":{"name":"(anonymous_4)","line":48,"loc":{"start":{"line":48,"column":22},"end":{"line":48,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":58,"column":1}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":39}},"4":{"start":{"line":7,"column":2},"end":{"line":7,"column":43}},"5":{"start":{"line":31,"column":2},"end":{"line":51,"column":5}},"6":{"start":{"line":33,"column":6},"end":{"line":35,"column":7}},"7":{"start":{"line":34,"column":8},"end":{"line":34,"column":54}},"8":{"start":{"line":37,"column":6},"end":{"line":37,"column":26}},"9":{"start":{"line":41,"column":6},"end":{"line":43,"column":7}},"10":{"start":{"line":42,"column":8},"end":{"line":42,"column":54}},"11":{"start":{"line":45,"column":6},"end":{"line":45,"column":30}},"12":{"start":{"line":49,"column":6},"end":{"line":49,"column":35}},"13":{"start":{"line":53,"column":2},"end":{"line":55,"column":4}},"14":{"start":{"line":57,"column":2},"end":{"line":57,"column":19}},"15":{"start":{"line":60,"column":0},"end":{"line":60,"column":27}},"16":{"start":{"line":61,"column":0},"end":{"line":61,"column":26}}},"branchMap":{"1":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":6},"end":{"line":33,"column":6}},{"start":{"line":33,"column":6},"end":{"line":33,"column":6}}]},"2":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":6},"end":{"line":41,"column":6}},{"start":{"line":41,"column":6},"end":{"line":41,"column":6}}]}},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","","function factory (type, config, load, typed) {","  var gamma = load(require('./gamma'));","  var latex = require('../../utils/latex');","","  /**","   * Compute the factorial of a value","   *","   * Factorial only supports an integer value as argument.","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.factorial(n)","   *","   * Examples:","   *","   *    math.factorial(5);    // returns 120","   *    math.factorial(3);    // returns 6","   *","   * See also:","   *","   *    combinations, gamma, permutations","   *","   * @param {number | BigNumber | Array | Matrix} n   An integer number","   * @return {number | BigNumber | Array | Matrix}    The factorial of `n`","   */","  var factorial = typed('factorial', {","    'number': function (n) {","      if (n < 0) {","        throw new Error('Value must be non-negative');","      }","","      return gamma(n + 1);","    },","","    'BigNumber': function (n) {","      if (n.isNegative()) {","        throw new Error('Value must be non-negative');","      }","","      return gamma(n.plus(1));","    },","","    'Array | Matrix': function (n) {","      return deepMap(n, factorial);","    }","  });","","  factorial.toTex = {","    1: '\\\\left(${args[0]}\\\\right)' + latex.operators['factorial']","  };","","  return factorial;","}","","exports.name = 'factorial';","exports.factory = factory;",""],"l":{"3":1,"5":1,"6":0,"7":0,"31":0,"33":0,"34":0,"37":0,"41":0,"42":0,"45":0,"49":0,"53":0,"57":0,"60":1,"61":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/probability/gamma.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/probability/gamma.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":1,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":1,"83":1,"84":1,"85":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"factory","line":6,"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":45}}},"2":{"name":"(anonymous_2)","line":34,"loc":{"start":{"line":34,"column":14},"end":{"line":34,"column":27}}},"3":{"name":"(anonymous_3)","line":89,"loc":{"start":{"line":89,"column":15},"end":{"line":89,"column":28}}},"4":{"name":"(anonymous_4)","line":132,"loc":{"start":{"line":132,"column":17},"end":{"line":132,"column":30}}},"5":{"name":"(anonymous_5)","line":146,"loc":{"start":{"line":146,"column":22},"end":{"line":146,"column":35}}},"6":{"name":"bigFactorial","line":156,"loc":{"start":{"line":156,"column":2},"end":{"line":156,"column":27}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":56}},"3":{"start":{"line":6,"column":0},"end":{"line":177,"column":1}},"4":{"start":{"line":7,"column":2},"end":{"line":7,"column":57}},"5":{"start":{"line":8,"column":2},"end":{"line":8,"column":47}},"6":{"start":{"line":33,"column":2},"end":{"line":149,"column":5}},"7":{"start":{"line":35,"column":6},"end":{"line":35,"column":15}},"8":{"start":{"line":37,"column":6},"end":{"line":58,"column":7}},"9":{"start":{"line":38,"column":8},"end":{"line":40,"column":9}},"10":{"start":{"line":39,"column":10},"end":{"line":39,"column":46}},"11":{"start":{"line":42,"column":8},"end":{"line":44,"column":9}},"12":{"start":{"line":43,"column":10},"end":{"line":43,"column":26}},"13":{"start":{"line":46,"column":8},"end":{"line":46,"column":26}},"14":{"start":{"line":47,"column":8},"end":{"line":47,"column":24}},"15":{"start":{"line":48,"column":8},"end":{"line":51,"column":9}},"16":{"start":{"line":49,"column":10},"end":{"line":49,"column":23}},"17":{"start":{"line":50,"column":10},"end":{"line":50,"column":18}},"18":{"start":{"line":53,"column":8},"end":{"line":55,"column":9}},"19":{"start":{"line":54,"column":10},"end":{"line":54,"column":18}},"20":{"start":{"line":57,"column":8},"end":{"line":57,"column":19}},"21":{"start":{"line":60,"column":6},"end":{"line":62,"column":7}},"22":{"start":{"line":61,"column":8},"end":{"line":61,"column":62}},"23":{"start":{"line":64,"column":6},"end":{"line":66,"column":7}},"24":{"start":{"line":65,"column":8},"end":{"line":65,"column":24}},"25":{"start":{"line":68,"column":6},"end":{"line":77,"column":7}},"26":{"start":{"line":69,"column":8},"end":{"line":69,"column":23}},"27":{"start":{"line":70,"column":8},"end":{"line":70,"column":28}},"28":{"start":{"line":71,"column":8},"end":{"line":71,"column":29}},"29":{"start":{"line":72,"column":8},"end":{"line":72,"column":28}},"30":{"start":{"line":73,"column":8},"end":{"line":76,"column":43}},"31":{"start":{"line":79,"column":6},"end":{"line":79,"column":10}},"32":{"start":{"line":80,"column":6},"end":{"line":80,"column":15}},"33":{"start":{"line":81,"column":6},"end":{"line":83,"column":7}},"34":{"start":{"line":82,"column":8},"end":{"line":82,"column":26}},"35":{"start":{"line":85,"column":6},"end":{"line":85,"column":22}},"36":{"start":{"line":86,"column":6},"end":{"line":86,"column":74}},"37":{"start":{"line":90,"column":6},"end":{"line":90,"column":15}},"38":{"start":{"line":92,"column":6},"end":{"line":94,"column":7}},"39":{"start":{"line":93,"column":8},"end":{"line":93,"column":27}},"40":{"start":{"line":96,"column":6},"end":{"line":96,"column":43}},"41":{"start":{"line":97,"column":6},"end":{"line":97,"column":36}},"42":{"start":{"line":98,"column":6},"end":{"line":109,"column":7}},"43":{"start":{"line":99,"column":8},"end":{"line":99,"column":28}},"44":{"start":{"line":100,"column":8},"end":{"line":100,"column":40}},"45":{"start":{"line":101,"column":8},"end":{"line":108,"column":9}},"46":{"start":{"line":102,"column":10},"end":{"line":102,"column":36}},"47":{"start":{"line":103,"column":10},"end":{"line":103,"column":39}},"48":{"start":{"line":105,"column":10},"end":{"line":107,"column":26}},"49":{"start":{"line":111,"column":6},"end":{"line":111,"column":49}},"50":{"start":{"line":112,"column":6},"end":{"line":112,"column":43}},"51":{"start":{"line":114,"column":6},"end":{"line":114,"column":18}},"52":{"start":{"line":115,"column":6},"end":{"line":115,"column":29}},"53":{"start":{"line":116,"column":6},"end":{"line":123,"column":7}},"54":{"start":{"line":117,"column":8},"end":{"line":117,"column":31}},"55":{"start":{"line":118,"column":13},"end":{"line":123,"column":7}},"56":{"start":{"line":119,"column":8},"end":{"line":119,"column":31}},"57":{"start":{"line":121,"column":8},"end":{"line":121,"column":31}},"58":{"start":{"line":122,"column":8},"end":{"line":122,"column":31}},"59":{"start":{"line":125,"column":6},"end":{"line":125,"column":30}},"60":{"start":{"line":126,"column":6},"end":{"line":126,"column":33}},"61":{"start":{"line":127,"column":6},"end":{"line":127,"column":33}},"62":{"start":{"line":129,"column":6},"end":{"line":129,"column":46}},"63":{"start":{"line":133,"column":6},"end":{"line":137,"column":7}},"64":{"start":{"line":134,"column":8},"end":{"line":136,"column":39}},"65":{"start":{"line":139,"column":6},"end":{"line":141,"column":7}},"66":{"start":{"line":140,"column":8},"end":{"line":140,"column":67}},"67":{"start":{"line":143,"column":6},"end":{"line":143,"column":52}},"68":{"start":{"line":147,"column":6},"end":{"line":147,"column":31}},"69":{"start":{"line":156,"column":2},"end":{"line":172,"column":3}},"70":{"start":{"line":157,"column":4},"end":{"line":159,"column":5}},"71":{"start":{"line":158,"column":6},"end":{"line":158,"column":35}},"72":{"start":{"line":161,"column":4},"end":{"line":161,"column":68}},"73":{"start":{"line":162,"column":4},"end":{"line":162,"column":59}},"74":{"start":{"line":164,"column":4},"end":{"line":164,"column":25}},"75":{"start":{"line":165,"column":4},"end":{"line":165,"column":33}},"76":{"start":{"line":166,"column":4},"end":{"line":169,"column":5}},"77":{"start":{"line":167,"column":6},"end":{"line":167,"column":29}},"78":{"start":{"line":168,"column":6},"end":{"line":168,"column":14}},"79":{"start":{"line":171,"column":4},"end":{"line":171,"column":73}},"80":{"start":{"line":174,"column":2},"end":{"line":174,"column":56}},"81":{"start":{"line":176,"column":2},"end":{"line":176,"column":15}},"82":{"start":{"line":181,"column":0},"end":{"line":181,"column":18}},"83":{"start":{"line":183,"column":0},"end":{"line":199,"column":2}},"84":{"start":{"line":201,"column":0},"end":{"line":201,"column":23}},"85":{"start":{"line":202,"column":0},"end":{"line":202,"column":26}}},"branchMap":{"1":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":6},"end":{"line":37,"column":6}},{"start":{"line":37,"column":6},"end":{"line":37,"column":6}}]},"2":{"line":38,"type":"if","locations":[{"start":{"line":38,"column":8},"end":{"line":38,"column":8}},{"start":{"line":38,"column":8},"end":{"line":38,"column":8}}]},"3":{"line":39,"type":"cond-expr","locations":[{"start":{"line":39,"column":31},"end":{"line":39,"column":39}},{"start":{"line":39,"column":42},"end":{"line":39,"column":45}}]},"4":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":8},"end":{"line":42,"column":8}},{"start":{"line":42,"column":8},"end":{"line":42,"column":8}}]},"5":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":8},"end":{"line":53,"column":8}},{"start":{"line":53,"column":8},"end":{"line":53,"column":8}}]},"6":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":6},"end":{"line":60,"column":6}},{"start":{"line":60,"column":6},"end":{"line":60,"column":6}}]},"7":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":6},"end":{"line":64,"column":6}},{"start":{"line":64,"column":6},"end":{"line":64,"column":6}}]},"8":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":6},"end":{"line":68,"column":6}},{"start":{"line":68,"column":6},"end":{"line":68,"column":6}}]},"9":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":6},"end":{"line":92,"column":6}},{"start":{"line":92,"column":6},"end":{"line":92,"column":6}}]},"10":{"line":101,"type":"if","locations":[{"start":{"line":101,"column":8},"end":{"line":101,"column":8}},{"start":{"line":101,"column":8},"end":{"line":101,"column":8}}]},"11":{"line":105,"type":"cond-expr","locations":[{"start":{"line":106,"column":16},"end":{"line":106,"column":25}},{"start":{"line":107,"column":17},"end":{"line":107,"column":25}}]},"12":{"line":116,"type":"if","locations":[{"start":{"line":116,"column":6},"end":{"line":116,"column":6}},{"start":{"line":116,"column":6},"end":{"line":116,"column":6}}]},"13":{"line":118,"type":"if","locations":[{"start":{"line":118,"column":13},"end":{"line":118,"column":13}},{"start":{"line":118,"column":13},"end":{"line":118,"column":13}}]},"14":{"line":133,"type":"if","locations":[{"start":{"line":133,"column":6},"end":{"line":133,"column":6}},{"start":{"line":133,"column":6},"end":{"line":133,"column":6}}]},"15":{"line":134,"type":"cond-expr","locations":[{"start":{"line":135,"column":14},"end":{"line":135,"column":42}},{"start":{"line":136,"column":14},"end":{"line":136,"column":38}}]},"16":{"line":134,"type":"binary-expr","locations":[{"start":{"line":134,"column":16},"end":{"line":134,"column":30}},{"start":{"line":134,"column":34},"end":{"line":134,"column":44}}]},"17":{"line":139,"type":"if","locations":[{"start":{"line":139,"column":6},"end":{"line":139,"column":6}},{"start":{"line":139,"column":6},"end":{"line":139,"column":6}}]},"18":{"line":140,"type":"cond-expr","locations":[{"start":{"line":140,"column":51},"end":{"line":140,"column":54}},{"start":{"line":140,"column":57},"end":{"line":140,"column":65}}]},"19":{"line":157,"type":"if","locations":[{"start":{"line":157,"column":4},"end":{"line":157,"column":4}},{"start":{"line":157,"column":4},"end":{"line":157,"column":4}}]}},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","var isInteger = require('../../utils/number').isInteger;","","function factory (type, config, load, typed) {","  var multiply = load(require('../arithmetic/multiply'));","  var pow = load(require('../arithmetic/pow'));","","  /**","   * Compute the gamma function of a value using Lanczos approximation for","   * small values, and an extended Stirling approximation for large values.","   *","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.gamma(n)","   *","   * Examples:","   *","   *    math.gamma(5);       // returns 24","   *    math.gamma(-0.5);    // returns -3.5449077018110335","   *    math.gamma(math.i);  // returns -0.15494982830180973 - 0.49801566811835596i","   *","   * See also:","   *","   *    combinations, factorial, permutations","   *","   * @param {number | Array | Matrix} n   A real or complex number","   * @return {number | Array | Matrix}    The gamma of `n`","   */","  var gamma = typed('gamma', {","    'number': function (n) {","      var t, x;","","      if (isInteger(n)) {","        if (n <= 0) {","          return isFinite(n) ? Infinity : NaN;","        }","","        if (n > 171) {","          return Infinity;                  // Will overflow","        }","","        var value = n - 2;","        var res = n - 1;","        while (value > 1) {","          res *= value;","          value--;","        }","","        if (res == 0) {","          res = 1;                          // 0! is per definition 1","        }","","        return res;","      }","","      if (n < 0.5) {","        return Math.PI / (Math.sin(Math.PI * n) * gamma(1-n));","      }","","      if (n >= 171.35) {","        return Infinity;                    // will overflow","      }","","      if (n > 85.0) {                       // Extended Stirling Approx","        var twoN = n*n;","        var threeN = twoN*n;","        var fourN = threeN*n;","        var fiveN = fourN*n;","        return Math.sqrt(2*Math.PI/n) * Math.pow((n/Math.E), n) *","            (1 + 1/(12*n) + 1/(288*twoN) - 139/(51840*threeN) -","            571/(2488320*fourN) + 163879/(209018880*fiveN) +","            5246819/(75246796800*fiveN*n));","      }","","      --n;","      x = p[0];","      for (var i = 1; i < p.length; ++i) {","        x += p[i] / (n+i);","      }","","      t = n + g + 0.5;","      return Math.sqrt(2*Math.PI) * Math.pow(t, n+0.5) * Math.exp(-t) * x;","    },","","    'Complex': function (n) {","      var t, x;","","      if (n.im == 0) {","        return gamma(n.re);","      }","","      n = new type.Complex(n.re - 1, n.im);","      x = new type.Complex(p[0], 0);","      for (var i = 1; i < p.length; ++i) {","        var real = n.re + i;                // x += p[i]/(n+i)","        var den = real*real + n.im*n.im;","        if (den != 0) {","          x.re += p[i] * real / den;","          x.im += -(p[i] * n.im) / den;","        } else {","          x.re = p[i] < 0","              ? -Infinity","              :  Infinity;","        }","      }","","      t = new type.Complex(n.re + g + 0.5, n.im);","      var twoPiSqrt = Math.sqrt(2*Math.PI);","","      n.re += 0.5;","      var result = pow(t, n);","      if (result.im == 0) {                 // sqrt(2*PI)*result","        result.re *= twoPiSqrt;","      } else if (result.re == 0) {","        result.im *= twoPiSqrt;","      } else {","        result.re *= twoPiSqrt;","        result.im *= twoPiSqrt;","      }","","      var r = Math.exp(-t.re);              // exp(-t)","      t.re = r * Math.cos(-t.im);","      t.im = r * Math.sin(-t.im);","","      return multiply(multiply(result, t), x);","    },","","    'BigNumber': function (n) {","      if (n.isInteger()) {","        return (n.isNegative() || n.isZero())","            ? new type.BigNumber(Infinity)","            : bigFactorial(n.minus(1));","      }","","      if (!n.isFinite()) {","        return new type.BigNumber(n.isNegative() ? NaN : Infinity);","      }","","      throw new Error('Integer BigNumber expected');","    },","","    'Array | Matrix': function (n) {","      return deepMap(n, gamma);","    }","  });","","  /**","   * Calculate factorial for a BigNumber","   * @param {BigNumber} n","   * @returns {BigNumber} Returns the factorial of n","   */","  function bigFactorial(n) {","    if (n.isZero()) {","      return new type.BigNumber(1); // 0! is per definition 1","    }","","    var precision = config.precision + (Math.log(n.toNumber()) | 0);","    var Big = type.BigNumber.clone({precision: precision});","","    var res = new Big(n);","    var value = n.toNumber() - 1; // number","    while (value > 1) {","      res = res.times(value);","      value--;","    }","","    return new type.BigNumber(res.toPrecision(type.BigNumber.precision));","  }","","  gamma.toTex = {1: '\\\\Gamma\\\\left(${args[0]}\\\\right)'};","","  return gamma;","}","","// TODO: comment on the variables g and p","","var g = 4.7421875;","","var p = [","  0.99999999999999709182,","  57.156235665862923517,","  -59.597960355475491248,","  14.136097974741747174,","  -0.49191381609762019978,","  0.33994649984811888699e-4,","  0.46523628927048575665e-4,","  -0.98374475304879564677e-4,","  0.15808870322491248884e-3,","  -0.21026444172410488319e-3,","  0.21743961811521264320e-3,","  -0.16431810653676389022e-3,","  0.84418223983852743293e-4,","  -0.26190838401581408670e-4,","  0.36899182659531622704e-5","];","","exports.name = 'gamma';","exports.factory = factory;",""],"l":{"3":1,"4":1,"6":1,"7":0,"8":0,"33":0,"35":0,"37":0,"38":0,"39":0,"42":0,"43":0,"46":0,"47":0,"48":0,"49":0,"50":0,"53":0,"54":0,"57":0,"60":0,"61":0,"64":0,"65":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"79":0,"80":0,"81":0,"82":0,"85":0,"86":0,"90":0,"92":0,"93":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"105":0,"111":0,"112":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"121":0,"122":0,"125":0,"126":0,"127":0,"129":0,"133":0,"134":0,"139":0,"140":0,"143":0,"147":0,"156":1,"157":0,"158":0,"161":0,"162":0,"164":0,"165":0,"166":0,"167":0,"168":0,"171":0,"174":0,"176":0,"181":1,"183":1,"201":1,"202":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/probability/kldivergence.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/probability/kldivergence.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":1,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":1,"37":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"factory","line":4,"loc":{"start":{"line":4,"column":0},"end":{"line":4,"column":44}}},"2":{"name":"(anonymous_2)","line":30,"loc":{"start":{"line":30,"column":24},"end":{"line":30,"column":39}}},"3":{"name":"(anonymous_3)","line":34,"loc":{"start":{"line":34,"column":25},"end":{"line":34,"column":40}}},"4":{"name":"(anonymous_4)","line":38,"loc":{"start":{"line":38,"column":25},"end":{"line":38,"column":39}}},"5":{"name":"(anonymous_5)","line":42,"loc":{"start":{"line":42,"column":26},"end":{"line":42,"column":40}}},"6":{"name":"_kldiv","line":48,"loc":{"start":{"line":48,"column":4},"end":{"line":48,"column":26}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":86,"column":1}},"2":{"start":{"line":5,"column":4},"end":{"line":5,"column":68}},"3":{"start":{"line":6,"column":4},"end":{"line":6,"column":55}},"4":{"start":{"line":7,"column":4},"end":{"line":7,"column":49}},"5":{"start":{"line":8,"column":4},"end":{"line":8,"column":59}},"6":{"start":{"line":9,"column":4},"end":{"line":9,"column":61}},"7":{"start":{"line":10,"column":4},"end":{"line":10,"column":49}},"8":{"start":{"line":11,"column":4},"end":{"line":11,"column":56}},"9":{"start":{"line":29,"column":4},"end":{"line":46,"column":7}},"10":{"start":{"line":31,"column":12},"end":{"line":31,"column":48}},"11":{"start":{"line":35,"column":12},"end":{"line":35,"column":40}},"12":{"start":{"line":39,"column":12},"end":{"line":39,"column":40}},"13":{"start":{"line":43,"column":12},"end":{"line":43,"column":32}},"14":{"start":{"line":48,"column":4},"end":{"line":83,"column":5}},"15":{"start":{"line":49,"column":8},"end":{"line":49,"column":38}},"16":{"start":{"line":50,"column":8},"end":{"line":50,"column":38}},"17":{"start":{"line":51,"column":8},"end":{"line":53,"column":9}},"18":{"start":{"line":52,"column":12},"end":{"line":52,"column":68}},"19":{"start":{"line":55,"column":8},"end":{"line":57,"column":9}},"20":{"start":{"line":56,"column":12},"end":{"line":56,"column":69}},"21":{"start":{"line":59,"column":8},"end":{"line":61,"column":9}},"22":{"start":{"line":60,"column":12},"end":{"line":60,"column":67}},"23":{"start":{"line":64,"column":8},"end":{"line":64,"column":26}},"24":{"start":{"line":65,"column":8},"end":{"line":67,"column":9}},"25":{"start":{"line":66,"column":12},"end":{"line":66,"column":80}},"26":{"start":{"line":69,"column":8},"end":{"line":69,"column":26}},"27":{"start":{"line":70,"column":8},"end":{"line":72,"column":9}},"28":{"start":{"line":71,"column":12},"end":{"line":71,"column":81}},"29":{"start":{"line":73,"column":8},"end":{"line":73,"column":38}},"30":{"start":{"line":74,"column":8},"end":{"line":74,"column":38}},"31":{"start":{"line":76,"column":8},"end":{"line":76,"column":72}},"32":{"start":{"line":77,"column":8},"end":{"line":82,"column":9}},"33":{"start":{"line":78,"column":12},"end":{"line":78,"column":26}},"34":{"start":{"line":81,"column":12},"end":{"line":81,"column":30}},"35":{"start":{"line":85,"column":4},"end":{"line":85,"column":24}},"36":{"start":{"line":89,"column":0},"end":{"line":89,"column":30}},"37":{"start":{"line":90,"column":0},"end":{"line":90,"column":26}}},"branchMap":{"1":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":8},"end":{"line":51,"column":8}},{"start":{"line":51,"column":8},"end":{"line":51,"column":8}}]},"2":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":8},"end":{"line":55,"column":8}},{"start":{"line":55,"column":8},"end":{"line":55,"column":8}}]},"3":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":8},"end":{"line":59,"column":8}},{"start":{"line":59,"column":8},"end":{"line":59,"column":8}}]},"4":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":8},"end":{"line":65,"column":8}},{"start":{"line":65,"column":8},"end":{"line":65,"column":8}}]},"5":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":8},"end":{"line":70,"column":8}},{"start":{"line":70,"column":8},"end":{"line":70,"column":8}}]},"6":{"line":77,"type":"if","locations":[{"start":{"line":77,"column":8},"end":{"line":77,"column":8}},{"start":{"line":77,"column":8},"end":{"line":77,"column":8}}]}},"code":["'use strict';","","","function factory(type, config, load, typed) {","    var matrix = load(require('../../type/matrix/function/matrix'));","    var divide = load(require('../arithmetic/divide'));","    var sum = load(require('../statistics/sum'));","    var multiply = load(require('../arithmetic/multiply'));","    var dotDivide = load(require('../arithmetic/dotDivide'));","    var log = load(require('../arithmetic/log'));","    var isNumeric = load(require('../utils/isNumeric'));","","    /**","     * Calculate the Kullback-Leibler (KL) divergence  between two distributions","     *","     * Syntax:","     *","     *     math.kldivergence(x, y)","     *","     * Examples:","     *","     *     math.kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5]);   //returns 0.24376698773121153","     *","     *","     * @param  {Array | Matrix} q    First vector","     * @param  {Array | Matrix} p    Second vector","     * @return {number}              Returns distance between q and p","     */","    var kldivergence = typed('kldivergence', {","        'Array, Array': function(q, p) {","            return _kldiv(matrix(q), matrix(p));","        },","","        'Matrix, Array': function(q, p) {","            return _kldiv(q, matrix(p));","        },","","        'Array, Matrix': function(q, p){","            return _kldiv(matrix(q), p);","        },","","        'Matrix, Matrix': function(q, p){","            return _kldiv(q, p);","        }","","    });","","    function _kldiv(q, p) {","        var plength = p.size().length;","        var qlength = q.size().length;","        if (plength > 1) {","            throw new Error('first object must be one dimensional');","        }","        ","        if (qlength > 1) {","            throw new Error('second object must be one dimensional');","        }","        ","        if(plength !== qlength){","            throw new Error(\"Length of two vectors must be equal\");","        }","        ","        //Before calculation, apply normalization","        var sumq = sum(q);","        if (sumq === 0) {","            throw new Error(\"Sum of elements in first object must be non zero\");","        }","","        var sump = sum(p);","        if (sump === 0) {","            throw new Error(\"Sum of elements in second object must be non zero\");","        }","        var qnorm = divide(q, sum(q));","        var pnorm = divide(p, sum(p));","","        var result = sum(multiply(qnorm, log(dotDivide(qnorm, pnorm))));","        if (isNumeric(result)) {","            return result;","        }","        else {","            return Number.NaN;","        }","    }","","    return kldivergence;","}","","","exports.name = 'kldivergence';","exports.factory = factory;"," ",""],"l":{"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"29":0,"31":0,"35":0,"39":0,"43":0,"48":1,"49":0,"50":0,"51":0,"52":0,"55":0,"56":0,"59":0,"60":0,"64":0,"65":0,"66":0,"69":0,"70":0,"71":0,"73":0,"74":0,"76":0,"77":0,"78":0,"81":0,"85":0,"89":1,"90":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/probability/multinomial.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/probability/multinomial.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":35,"loc":{"start":{"line":35,"column":22},"end":{"line":35,"column":35}}},"3":{"name":"(anonymous_3)","line":39,"loc":{"start":{"line":39,"column":21},"end":{"line":39,"column":34}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":64}},"2":{"start":{"line":5,"column":0},"end":{"line":50,"column":1}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":47}},"4":{"start":{"line":7,"column":2},"end":{"line":7,"column":57}},"5":{"start":{"line":8,"column":2},"end":{"line":8,"column":53}},"6":{"start":{"line":9,"column":2},"end":{"line":9,"column":60}},"7":{"start":{"line":10,"column":2},"end":{"line":10,"column":54}},"8":{"start":{"line":11,"column":2},"end":{"line":11,"column":56}},"9":{"start":{"line":34,"column":2},"end":{"line":49,"column":5}},"10":{"start":{"line":36,"column":6},"end":{"line":36,"column":18}},"11":{"start":{"line":37,"column":6},"end":{"line":37,"column":20}},"12":{"start":{"line":39,"column":6},"end":{"line":45,"column":9}},"13":{"start":{"line":40,"column":8},"end":{"line":42,"column":9}},"14":{"start":{"line":41,"column":10},"end":{"line":41,"column":89}},"15":{"start":{"line":43,"column":8},"end":{"line":43,"column":27}},"16":{"start":{"line":44,"column":8},"end":{"line":44,"column":47}},"17":{"start":{"line":47,"column":6},"end":{"line":47,"column":43}},"18":{"start":{"line":52,"column":0},"end":{"line":52,"column":29}},"19":{"start":{"line":53,"column":0},"end":{"line":53,"column":26}}},"branchMap":{"1":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":8},"end":{"line":40,"column":8}},{"start":{"line":40,"column":8},"end":{"line":40,"column":8}}]},"2":{"line":40,"type":"binary-expr","locations":[{"start":{"line":40,"column":11},"end":{"line":40,"column":25}},{"start":{"line":40,"column":29},"end":{"line":40,"column":44}}]}},"code":["'use strict';","","var deepForEach = require('../../utils/collection/deepForEach');","","function factory (type, config, load, typed) {","  var add = load(require('../arithmetic/add'));","  var multiply = load(require('../arithmetic/multiply'));","  var divide = load(require('../arithmetic/divide'));","  var factorial = load(require('../probability/factorial'));","  var isInteger = load(require('../utils/isInteger'));","  var isPositive = load(require('../utils/isPositive'));","","  /**","   * Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities.","   *","   * multinomial takes one array of integers as an argument.","   * The following condition must be enforced: every ai <= 0","   *","   * Syntax:","   *","   *     math.multinomial(a) // a is an array type","   *","   * Examples:","   *","   *    math.multinomial([1,2,1]); // returns 12","   *","   * See also:","   *","   *    combinations, factorial","   *","   * @param {number[] | BigNumber[]} a    Integer numbers of objects in the subset","   * @return {Number | BigNumber}         Multinomial coefficient.","   */","  return typed('multinomial', {","    'Array | Matrix': function (a) {","      var sum = 0;","      var denom = 1;","","      deepForEach(a, function(ai) {","        if(!isInteger(ai) || !isPositive(ai)) {","          throw new TypeError('Positive integer value expected in function multinomial');","        }","        sum = add(sum, ai);","        denom = multiply(denom, factorial(ai));","      });","","      return divide(factorial(sum), denom);","    }","  });","}","","exports.name = 'multinomial';","exports.factory = factory;",""],"l":{"3":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"34":0,"36":0,"37":0,"39":0,"40":0,"41":0,"43":0,"44":0,"47":0,"52":1,"53":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/utils/collection/deepForEach.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/utils/collection/deepForEach.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"deepForEach","line":10,"loc":{"start":{"line":10,"column":17},"end":{"line":10,"column":56}}}},"statementMap":{"1":{"start":{"line":10,"column":0},"end":{"line":25,"column":2}},"2":{"start":{"line":11,"column":2},"end":{"line":13,"column":3}},"3":{"start":{"line":12,"column":4},"end":{"line":12,"column":28}},"4":{"start":{"line":15,"column":2},"end":{"line":24,"column":3}},"5":{"start":{"line":16,"column":4},"end":{"line":16,"column":25}},"6":{"start":{"line":18,"column":4},"end":{"line":23,"column":5}},"7":{"start":{"line":19,"column":6},"end":{"line":19,"column":35}},"8":{"start":{"line":22,"column":6},"end":{"line":22,"column":22}}},"branchMap":{"1":{"line":11,"type":"if","locations":[{"start":{"line":11,"column":2},"end":{"line":11,"column":2}},{"start":{"line":11,"column":2},"end":{"line":11,"column":2}}]},"2":{"line":11,"type":"binary-expr","locations":[{"start":{"line":11,"column":6},"end":{"line":11,"column":11}},{"start":{"line":11,"column":15},"end":{"line":11,"column":38}}]},"3":{"line":18,"type":"if","locations":[{"start":{"line":18,"column":4},"end":{"line":18,"column":4}},{"start":{"line":18,"column":4},"end":{"line":18,"column":4}}]}},"code":["'use strict';","","/**"," * Recursively loop over all elements in a given multi dimensional array"," * and invoke the callback on each of the elements."," * @param {Array | Matrix} array"," * @param {Function} callback     The callback method is invoked with one"," *                                parameter: the current element in the array"," */","module.exports = function deepForEach (array, callback) {","  if (array && array.isMatrix === true) {","    array = array.valueOf();","  }","","  for (var i = 0, ii = array.length; i < ii; i++) {","    var value = array[i];","","    if (Array.isArray(value)) {","      deepForEach(value, callback);","    }","    else {","      callback(value);","    }","  }","};",""],"l":{"10":1,"11":0,"12":0,"15":0,"16":0,"18":0,"19":0,"22":0}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/probability/permutations.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/probability/permutations.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1,"28":0,"29":1,"30":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":36,"loc":{"start":{"line":36,"column":22},"end":{"line":36,"column":38}}},"3":{"name":"(anonymous_3)","line":58,"loc":{"start":{"line":58,"column":28},"end":{"line":58,"column":44}}},"4":{"name":"isPositiveInteger","line":89,"loc":{"start":{"line":89,"column":0},"end":{"line":89,"column":30}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":82,"column":1}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":47}},"4":{"start":{"line":33,"column":2},"end":{"line":77,"column":5}},"5":{"start":{"line":37,"column":6},"end":{"line":37,"column":20}},"6":{"start":{"line":39,"column":6},"end":{"line":41,"column":7}},"7":{"start":{"line":40,"column":8},"end":{"line":40,"column":88}},"8":{"start":{"line":42,"column":6},"end":{"line":44,"column":7}},"9":{"start":{"line":43,"column":8},"end":{"line":43,"column":88}},"10":{"start":{"line":45,"column":6},"end":{"line":47,"column":7}},"11":{"start":{"line":46,"column":8},"end":{"line":46,"column":96}},"12":{"start":{"line":50,"column":6},"end":{"line":50,"column":17}},"13":{"start":{"line":51,"column":6},"end":{"line":53,"column":7}},"14":{"start":{"line":52,"column":8},"end":{"line":52,"column":28}},"15":{"start":{"line":55,"column":6},"end":{"line":55,"column":20}},"16":{"start":{"line":59,"column":6},"end":{"line":59,"column":20}},"17":{"start":{"line":61,"column":6},"end":{"line":63,"column":7}},"18":{"start":{"line":62,"column":8},"end":{"line":62,"column":88}},"19":{"start":{"line":64,"column":6},"end":{"line":66,"column":7}},"20":{"start":{"line":65,"column":8},"end":{"line":65,"column":96}},"21":{"start":{"line":68,"column":6},"end":{"line":68,"column":37}},"22":{"start":{"line":69,"column":6},"end":{"line":71,"column":7}},"23":{"start":{"line":70,"column":8},"end":{"line":70,"column":33}},"24":{"start":{"line":73,"column":6},"end":{"line":73,"column":20}},"25":{"start":{"line":79,"column":2},"end":{"line":79,"column":33}},"26":{"start":{"line":81,"column":2},"end":{"line":81,"column":22}},"27":{"start":{"line":89,"column":0},"end":{"line":91,"column":1}},"28":{"start":{"line":90,"column":2},"end":{"line":90,"column":35}},"29":{"start":{"line":93,"column":0},"end":{"line":93,"column":30}},"30":{"start":{"line":94,"column":0},"end":{"line":94,"column":26}}},"branchMap":{"1":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":6},"end":{"line":39,"column":6}},{"start":{"line":39,"column":6},"end":{"line":39,"column":6}}]},"2":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":10},"end":{"line":39,"column":23}},{"start":{"line":39,"column":27},"end":{"line":39,"column":32}}]},"3":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":6},"end":{"line":42,"column":6}},{"start":{"line":42,"column":6},"end":{"line":42,"column":6}}]},"4":{"line":42,"type":"binary-expr","locations":[{"start":{"line":42,"column":10},"end":{"line":42,"column":23}},{"start":{"line":42,"column":27},"end":{"line":42,"column":32}}]},"5":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":6},"end":{"line":45,"column":6}},{"start":{"line":45,"column":6},"end":{"line":45,"column":6}}]},"6":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":6},"end":{"line":61,"column":6}},{"start":{"line":61,"column":6},"end":{"line":61,"column":6}}]},"7":{"line":61,"type":"binary-expr","locations":[{"start":{"line":61,"column":10},"end":{"line":61,"column":31}},{"start":{"line":61,"column":35},"end":{"line":61,"column":56}}]},"8":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":6},"end":{"line":64,"column":6}},{"start":{"line":64,"column":6},"end":{"line":64,"column":6}}]},"9":{"line":90,"type":"binary-expr","locations":[{"start":{"line":90,"column":9},"end":{"line":90,"column":22}},{"start":{"line":90,"column":26},"end":{"line":90,"column":34}}]}},"code":["'use strict';","","var isInteger = require('../../utils/number').isInteger;","","function factory (type, config, load, typed) {","  var factorial = load(require('./factorial'));","","  /**","   * Compute the number of ways of obtaining an ordered subset of `k` elements","   * from a set of `n` elements.","   *","   * Permutations only takes integer arguments.","   * The following condition must be enforced: k <= n.","   *","   * Syntax:","   *","   *     math.permutations(n)","   *     math.permutations(n, k)","   *","   * Examples:","   *","   *    math.permutations(5);     // 120","   *    math.permutations(5, 3);  // 60","   *","   * See also:","   *","   *    combinations, factorial","   *","   * @param {number | BigNumber} n   The number of objects in total","   * @param {number | BigNumber} [k] The number of objects in the subset","   * @return {number | BigNumber}    The number of permutations","   */","  var permutations = typed('permutations', {","    'number | BigNumber': factorial,","","    'number, number': function (n, k) {","      var result, i;","","      if (!isInteger(n) || n < 0) {","        throw new TypeError('Positive integer value expected in function permutations');","      }","      if (!isInteger(k) || k < 0) {","        throw new TypeError('Positive integer value expected in function permutations');","      }","      if (k > n) {","        throw new TypeError('second argument k must be less than or equal to first argument n');","      }","","      // Permute n objects, k at a time","      result = 1;","      for (i = n - k + 1; i <= n; i++) {","        result = result * i;","      }","","      return result;","    },","","    'BigNumber, BigNumber': function (n, k) {","      var result, i;","","      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {","        throw new TypeError('Positive integer value expected in function permutations');","      }","      if (k.gt(n)) {","        throw new TypeError('second argument k must be less than or equal to first argument n');","      }","","      result = new type.BigNumber(1);","      for (i = n.minus(k).plus(1); i.lte(n); i = i.plus(1)) {","        result = result.times(i);","      }","","      return result;","    }","","    // TODO: implement support for collection in permutations","  });","","  permutations.toTex = undefined; // use default template","","  return permutations;","}","","/**"," * Test whether BigNumber n is a positive integer"," * @param {BigNumber} n"," * @returns {boolean} isPositiveInteger"," */","function isPositiveInteger(n) {","  return n.isInteger() && n.gte(0);","}","","exports.name = 'permutations';","exports.factory = factory;",""],"l":{"3":1,"5":1,"6":0,"33":0,"37":0,"39":0,"40":0,"42":0,"43":0,"45":0,"46":0,"50":0,"51":0,"52":0,"55":0,"59":0,"61":0,"62":0,"64":0,"65":0,"68":0,"69":0,"70":0,"73":0,"79":0,"81":0,"89":1,"90":0,"93":1,"94":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/probability/pickRandom.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/probability/pickRandom.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":1,"7":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"factory","line":3,"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":42,"column":1}},"2":{"start":{"line":4,"column":2},"end":{"line":4,"column":53}},"3":{"start":{"line":37,"column":2},"end":{"line":37,"column":55}},"4":{"start":{"line":39,"column":2},"end":{"line":39,"column":31}},"5":{"start":{"line":41,"column":2},"end":{"line":41,"column":20}},"6":{"start":{"line":44,"column":0},"end":{"line":44,"column":28}},"7":{"start":{"line":45,"column":0},"end":{"line":45,"column":26}}},"branchMap":{},"code":["'use strict';","","function factory (type, config, load, typed) {","  var distribution = load(require('./distribution'));","","  /**","   * Random pick one or more values from a one dimensional array.","   * Array elements are picked using a random function with uniform or weighted distribution.","   *","   * Syntax:","   *","   *     math.pickRandom(array)","   *     math.pickRandom(array, number)","   *     math.pickRandom(array, weights)","   *     math.pickRandom(array, number, weights)","   *     math.pickRandom(array, weights, number)","   *","   * Examples:","   *","   *     math.pickRandom([3, 6, 12, 2]);                  // returns one of the values in the array","   *     math.pickRandom([3, 6, 12, 2], 2);               // returns an array of two of the values in the array","   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1]);    // returns one of the values in the array with weighted distribution","   *     math.pickRandom([3, 6, 12, 2], 2, [1, 3, 2, 1]); // returns an array of two of the values in the array with weighted distribution","   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1], 2); // returns an array of two of the values in the array with weighted distribution","   *","   * See also:","   *","   *     random, randomInt","   *","   * @param {Array} array     A one dimensional array","   * @param {Int} number      An int or float","   * @param {Array} weights   An array of ints or floats","   * @return {number} One of the elements of the provided input array","   * @return {array} An array of elements of the provided input array","   */","  // TODO: rework pickRandom to a typed-function","  var pickRandom =  distribution('uniform').pickRandom;","","  pickRandom.toTex = undefined; // use default template","","  return pickRandom;","}","","exports.name = 'pickRandom';","exports.factory = factory;",""],"l":{"3":1,"4":0,"37":0,"39":0,"41":0,"44":1,"45":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/probability/random.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/probability/random.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":1,"7":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"factory","line":3,"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":42,"column":1}},"2":{"start":{"line":4,"column":2},"end":{"line":4,"column":53}},"3":{"start":{"line":37,"column":2},"end":{"line":37,"column":46}},"4":{"start":{"line":39,"column":2},"end":{"line":39,"column":27}},"5":{"start":{"line":41,"column":2},"end":{"line":41,"column":16}},"6":{"start":{"line":44,"column":0},"end":{"line":44,"column":24}},"7":{"start":{"line":45,"column":0},"end":{"line":45,"column":26}}},"branchMap":{},"code":["'use strict';","","function factory (type, config, load, typed) {","  var distribution = load(require('./distribution'));","","  /**","   * Return a random number larger or equal to `min` and smaller than `max`","   * using a uniform distribution.","   *","   * Syntax:","   *","   *     math.random()                // generate a random number between 0 and 1","   *     math.random(max)             // generate a random number between 0 and max","   *     math.random(min, max)        // generate a random number between min and max","   *     math.random(size)            // generate a matrix with random numbers between 0 and 1","   *     math.random(size, max)       // generate a matrix with random numbers between 0 and max","   *     math.random(size, min, max)  // generate a matrix with random numbers between min and max","   *","   * Examples:","   *","   *     math.random();       // returns a random number between 0 and 1","   *     math.random(100);    // returns a random number between 0 and 100","   *     math.random(30, 40); // returns a random number between 30 and 40","   *     math.random([2, 3]); // returns a 2x3 matrix with random numbers between 0 and 1","   *","   * See also:","   *","   *     randomInt, pickRandom","   *","   * @param {Array | Matrix} [size] If provided, an array or matrix with given","   *                                size and filled with random values is returned","   * @param {number} [min]  Minimum boundary for the random value, included","   * @param {number} [max]  Maximum boundary for the random value, excluded","   * @return {number | Array | Matrix} A random number","   */","  // TODO: rework random to a typed-function","  var random = distribution('uniform').random;","","  random.toTex = undefined; // use default template","","  return random;","}","","exports.name = 'random';","exports.factory = factory;",""],"l":{"3":1,"4":0,"37":0,"39":0,"41":0,"44":1,"45":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/probability/randomInt.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/probability/randomInt.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":1,"7":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"factory","line":3,"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":40,"column":1}},"2":{"start":{"line":4,"column":2},"end":{"line":4,"column":53}},"3":{"start":{"line":35,"column":2},"end":{"line":35,"column":52}},"4":{"start":{"line":37,"column":2},"end":{"line":37,"column":30}},"5":{"start":{"line":39,"column":2},"end":{"line":39,"column":19}},"6":{"start":{"line":42,"column":0},"end":{"line":42,"column":27}},"7":{"start":{"line":43,"column":0},"end":{"line":43,"column":26}}},"branchMap":{},"code":["'use strict';","","function factory (type, config, load, typed) {","  var distribution = load(require('./distribution'));","","  /**","   * Return a random integer number larger or equal to `min` and smaller than `max`","   * using a uniform distribution.","   *","   * Syntax:","   *","   *     math.randomInt(max)             // generate a random integer between 0 and max","   *     math.randomInt(min, max)        // generate a random integer between min and max","   *     math.randomInt(size)            // generate a matrix with random integer between 0 and 1","   *     math.randomInt(size, max)       // generate a matrix with random integer between 0 and max","   *     math.randomInt(size, min, max)  // generate a matrix with random integer between min and max","   *","   * Examples:","   *","   *     math.randomInt(100);    // returns a random integer between 0 and 100","   *     math.randomInt(30, 40); // returns a random integer between 30 and 40","   *     math.randomInt([2, 3]); // returns a 2x3 matrix with random integers between 0 and 1","   *","   * See also:","   *","   *     random, pickRandom","   *","   * @param {Array | Matrix} [size] If provided, an array or matrix with given","   *                                size and filled with random values is returned","   * @param {number} [min]  Minimum boundary for the random value, included","   * @param {number} [max]  Maximum boundary for the random value, excluded","   * @return {number | Array | Matrix} A random integer value","   */","  // TODO: rework randomInt to a typed-function","  var randomInt = distribution('uniform').randomInt;","","  randomInt.toTex = undefined; // use default template","","  return randomInt;","}","","exports.name = 'randomInt';","exports.factory = factory;",""],"l":{"3":1,"4":0,"35":0,"37":0,"39":0,"42":1,"43":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/relational/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/relational/index.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":10,"column":2}}},"branchMap":{},"code":["module.exports = [","  require('./compare'),","  require('./deepEqual'),","  require('./equal'),","  require('./larger'),","  require('./largerEq'),","  require('./smaller'),","  require('./smallerEq'),","  require('./unequal')","];",""],"l":{"1":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/relational/compare.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/relational/compare.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":1,"57":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},"fnMap":{"1":{"name":"factory","line":6,"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":45}}},"2":{"name":"(anonymous_2)","line":51,"loc":{"start":{"line":51,"column":24},"end":{"line":51,"column":40}}},"3":{"name":"(anonymous_3)","line":55,"loc":{"start":{"line":55,"column":22},"end":{"line":55,"column":38}}},"4":{"name":"(anonymous_4)","line":61,"loc":{"start":{"line":61,"column":28},"end":{"line":61,"column":44}}},"5":{"name":"(anonymous_5)","line":67,"loc":{"start":{"line":67,"column":26},"end":{"line":67,"column":42}}},"6":{"name":"(anonymous_6)","line":71,"loc":{"start":{"line":71,"column":24},"end":{"line":71,"column":36}}},"7":{"name":"(anonymous_7)","line":75,"loc":{"start":{"line":75,"column":18},"end":{"line":75,"column":34}}},"8":{"name":"(anonymous_8)","line":82,"loc":{"start":{"line":82,"column":22},"end":{"line":82,"column":38}}},"9":{"name":"(anonymous_9)","line":86,"loc":{"start":{"line":86,"column":22},"end":{"line":86,"column":38}}},"10":{"name":"(anonymous_10)","line":120,"loc":{"start":{"line":120,"column":20},"end":{"line":120,"column":36}}},"11":{"name":"(anonymous_11)","line":125,"loc":{"start":{"line":125,"column":21},"end":{"line":125,"column":37}}},"12":{"name":"(anonymous_12)","line":130,"loc":{"start":{"line":130,"column":21},"end":{"line":130,"column":37}}},"13":{"name":"(anonymous_13)","line":135,"loc":{"start":{"line":135,"column":19},"end":{"line":135,"column":35}}},"14":{"name":"(anonymous_14)","line":150,"loc":{"start":{"line":150,"column":19},"end":{"line":150,"column":35}}},"15":{"name":"(anonymous_15)","line":165,"loc":{"start":{"line":165,"column":18},"end":{"line":165,"column":34}}},"16":{"name":"(anonymous_16)","line":170,"loc":{"start":{"line":170,"column":18},"end":{"line":170,"column":34}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":60}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":66}},"3":{"start":{"line":6,"column":0},"end":{"line":179,"column":1}},"4":{"start":{"line":8,"column":2},"end":{"line":8,"column":66}},"5":{"start":{"line":10,"column":2},"end":{"line":10,"column":73}},"6":{"start":{"line":11,"column":2},"end":{"line":11,"column":73}},"7":{"start":{"line":12,"column":2},"end":{"line":12,"column":73}},"8":{"start":{"line":13,"column":2},"end":{"line":13,"column":73}},"9":{"start":{"line":14,"column":2},"end":{"line":14,"column":73}},"10":{"start":{"line":49,"column":2},"end":{"line":174,"column":5}},"11":{"start":{"line":52,"column":6},"end":{"line":52,"column":44}},"12":{"start":{"line":56,"column":6},"end":{"line":58,"column":29}},"13":{"start":{"line":62,"column":6},"end":{"line":64,"column":41}},"14":{"start":{"line":68,"column":6},"end":{"line":68,"column":45}},"15":{"start":{"line":72,"column":6},"end":{"line":72,"column":81}},"16":{"start":{"line":76,"column":6},"end":{"line":78,"column":7}},"17":{"start":{"line":77,"column":8},"end":{"line":77,"column":68}},"18":{"start":{"line":79,"column":6},"end":{"line":79,"column":39}},"19":{"start":{"line":83,"column":6},"end":{"line":83,"column":44}},"20":{"start":{"line":88,"column":6},"end":{"line":88,"column":12}},"21":{"start":{"line":91,"column":6},"end":{"line":116,"column":7}},"22":{"start":{"line":93,"column":10},"end":{"line":102,"column":11}},"23":{"start":{"line":96,"column":14},"end":{"line":96,"column":45}},"24":{"start":{"line":97,"column":14},"end":{"line":97,"column":20}},"25":{"start":{"line":100,"column":14},"end":{"line":100,"column":51}},"26":{"start":{"line":101,"column":14},"end":{"line":101,"column":20}},"27":{"start":{"line":103,"column":10},"end":{"line":103,"column":16}},"28":{"start":{"line":105,"column":10},"end":{"line":114,"column":11}},"29":{"start":{"line":108,"column":14},"end":{"line":108,"column":52}},"30":{"start":{"line":109,"column":14},"end":{"line":109,"column":20}},"31":{"start":{"line":112,"column":14},"end":{"line":112,"column":45}},"32":{"start":{"line":113,"column":14},"end":{"line":113,"column":20}},"33":{"start":{"line":115,"column":10},"end":{"line":115,"column":16}},"34":{"start":{"line":117,"column":6},"end":{"line":117,"column":15}},"35":{"start":{"line":122,"column":6},"end":{"line":122,"column":53}},"36":{"start":{"line":127,"column":6},"end":{"line":127,"column":35}},"37":{"start":{"line":132,"column":6},"end":{"line":132,"column":35}},"38":{"start":{"line":137,"column":6},"end":{"line":137,"column":12}},"39":{"start":{"line":139,"column":6},"end":{"line":146,"column":7}},"40":{"start":{"line":141,"column":10},"end":{"line":141,"column":48}},"41":{"start":{"line":142,"column":10},"end":{"line":142,"column":16}},"42":{"start":{"line":144,"column":10},"end":{"line":144,"column":48}},"43":{"start":{"line":145,"column":10},"end":{"line":145,"column":16}},"44":{"start":{"line":147,"column":6},"end":{"line":147,"column":15}},"45":{"start":{"line":152,"column":6},"end":{"line":152,"column":12}},"46":{"start":{"line":154,"column":6},"end":{"line":161,"column":7}},"47":{"start":{"line":156,"column":10},"end":{"line":156,"column":47}},"48":{"start":{"line":157,"column":10},"end":{"line":157,"column":16}},"49":{"start":{"line":159,"column":10},"end":{"line":159,"column":47}},"50":{"start":{"line":160,"column":10},"end":{"line":160,"column":16}},"51":{"start":{"line":162,"column":6},"end":{"line":162,"column":15}},"52":{"start":{"line":167,"column":6},"end":{"line":167,"column":65}},"53":{"start":{"line":172,"column":6},"end":{"line":172,"column":64}},"54":{"start":{"line":176,"column":2},"end":{"line":176,"column":28}},"55":{"start":{"line":178,"column":2},"end":{"line":178,"column":17}},"56":{"start":{"line":181,"column":0},"end":{"line":181,"column":25}},"57":{"start":{"line":182,"column":0},"end":{"line":182,"column":26}}},"branchMap":{"1":{"line":52,"type":"cond-expr","locations":[{"start":{"line":52,"column":23},"end":{"line":52,"column":24}},{"start":{"line":52,"column":28},"end":{"line":52,"column":42}}]},"2":{"line":52,"type":"cond-expr","locations":[{"start":{"line":52,"column":36},"end":{"line":52,"column":37}},{"start":{"line":52,"column":40},"end":{"line":52,"column":42}}]},"3":{"line":56,"type":"cond-expr","locations":[{"start":{"line":57,"column":12},"end":{"line":57,"column":13}},{"start":{"line":58,"column":13},"end":{"line":58,"column":27}}]},"4":{"line":56,"type":"binary-expr","locations":[{"start":{"line":56,"column":14},"end":{"line":56,"column":21}},{"start":{"line":56,"column":25},"end":{"line":56,"column":58}}]},"5":{"line":58,"type":"cond-expr","locations":[{"start":{"line":58,"column":21},"end":{"line":58,"column":22}},{"start":{"line":58,"column":25},"end":{"line":58,"column":27}}]},"6":{"line":62,"type":"cond-expr","locations":[{"start":{"line":63,"column":12},"end":{"line":63,"column":33}},{"start":{"line":64,"column":12},"end":{"line":64,"column":40}}]},"7":{"line":62,"type":"binary-expr","locations":[{"start":{"line":62,"column":14},"end":{"line":62,"column":21}},{"start":{"line":62,"column":25},"end":{"line":62,"column":61}}]},"8":{"line":76,"type":"if","locations":[{"start":{"line":76,"column":6},"end":{"line":76,"column":6}},{"start":{"line":76,"column":6},"end":{"line":76,"column":6}}]},"9":{"line":83,"type":"cond-expr","locations":[{"start":{"line":83,"column":23},"end":{"line":83,"column":24}},{"start":{"line":83,"column":28},"end":{"line":83,"column":42}}]},"10":{"line":83,"type":"cond-expr","locations":[{"start":{"line":83,"column":36},"end":{"line":83,"column":37}},{"start":{"line":83,"column":40},"end":{"line":83,"column":42}}]},"11":{"line":91,"type":"switch","locations":[{"start":{"line":92,"column":8},"end":{"line":103,"column":16}},{"start":{"line":104,"column":8},"end":{"line":115,"column":16}}]},"12":{"line":93,"type":"switch","locations":[{"start":{"line":94,"column":12},"end":{"line":97,"column":20}},{"start":{"line":98,"column":12},"end":{"line":101,"column":20}}]},"13":{"line":105,"type":"switch","locations":[{"start":{"line":106,"column":12},"end":{"line":109,"column":20}},{"start":{"line":110,"column":12},"end":{"line":113,"column":20}}]},"14":{"line":139,"type":"switch","locations":[{"start":{"line":140,"column":8},"end":{"line":142,"column":16}},{"start":{"line":143,"column":8},"end":{"line":145,"column":16}}]},"15":{"line":154,"type":"switch","locations":[{"start":{"line":155,"column":8},"end":{"line":157,"column":16}},{"start":{"line":158,"column":8},"end":{"line":160,"column":16}}]}},"code":["'use strict';","","var nearlyEqual = require('../../utils/number').nearlyEqual;","var bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');","","function factory (type, config, load, typed) {","","  var matrix = load(require('../../type/matrix/function/matrix'));","","  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));","  var algorithm05 = load(require('../../type/matrix/utils/algorithm05'));","  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));","  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));","  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));","  ","  /**","   * Compare two values. Returns 1 when x > y, -1 when x < y, and 0 when x == y.","   *","   * x and y are considered equal when the relative difference between x and y","   * is smaller than the configured epsilon. The function cannot be used to","   * compare values smaller than approximately 2.22e-16.","   *","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.compare(x, y)","   *","   * Examples:","   *","   *    math.compare(6, 1);           // returns 1","   *    math.compare(2, 3);           // returns -1","   *    math.compare(7, 7);           // returns 0","   *","   *    var a = math.unit('5 cm');","   *    var b = math.unit('40 mm');","   *    math.compare(a, b);           // returns 1","   *","   *    math.compare(2, [1, 2, 3]);   // returns [1, 0, -1]","   *","   * See also:","   *","   *    equal, unequal, smaller, smallerEq, larger, largerEq","   *","   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} x First value to compare","   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} y Second value to compare","   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the result of the comparison: 1, 0 or -1.","   */","  var compare = typed('compare', {","","    'boolean, boolean': function (x, y) {","      return x === y ? 0 : (x > y ? 1 : -1);","    },","","    'number, number': function (x, y) {","      return (x === y || nearlyEqual(x, y, config.epsilon))","          ? 0","          : (x > y ? 1 : -1);","    },","","    'BigNumber, BigNumber': function (x, y) {","      return (x.eq(y) || bigNearlyEqual(x, y, config.epsilon))","          ? new type.BigNumber(0)","          : new type.BigNumber(x.cmp(y));","    },","","    'Fraction, Fraction': function (x, y) {","      return new type.Fraction(x.compare(y));","    },","","    'Complex, Complex': function () {","      throw new TypeError('No ordering relation is defined for complex numbers');","    },","","    'Unit, Unit': function (x, y) {","      if (!x.equalBase(y)) {","        throw new Error('Cannot compare units with different base');","      }","      return compare(x.value, y.value);","    },","","    'string, string': function (x, y) {","      return x === y ? 0 : (x > y ? 1 : -1);","    },","","    'Matrix, Matrix': function (x, y) {","      // result","      var c;","","      // process matrix storage","      switch (x.storage()) {","        case 'sparse':","          switch (y.storage()) {","            case 'sparse':","              // sparse + sparse","              c = algorithm05(x, y, compare);","              break;","            default:","              // sparse + dense","              c = algorithm03(y, x, compare, true);","              break;","          }","          break;","        default:","          switch (y.storage()) {","            case 'sparse':","              // dense + sparse","              c = algorithm03(x, y, compare, false);","              break;","            default:","              // dense + dense","              c = algorithm13(x, y, compare);","              break;","          }","          break;","      }","      return c;","    },","","    'Array, Array': function (x, y) {","      // use matrix implementation","      return compare(matrix(x), matrix(y)).valueOf();","    },","","    'Array, Matrix': function (x, y) {","      // use matrix implementation","      return compare(matrix(x), y);","    },","","    'Matrix, Array': function (x, y) {","      // use matrix implementation","      return compare(x, matrix(y));","    },","","    'Matrix, any': function (x, y) {","      // result","      var c;","      // check storage format","      switch (x.storage()) {","        case 'sparse':","          c = algorithm12(x, y, compare, false);","          break;","        default:","          c = algorithm14(x, y, compare, false);","          break;","      }","      return c;","    },","","    'any, Matrix': function (x, y) {","      // result","      var c;","      // check storage format","      switch (y.storage()) {","        case 'sparse':","          c = algorithm12(y, x, compare, true);","          break;","        default:","          c = algorithm14(y, x, compare, true);","          break;","      }","      return c;","    },","","    'Array, any': function (x, y) {","      // use matrix implementation","      return algorithm14(matrix(x), y, compare, false).valueOf();","    },","","    'any, Array': function (x, y) {","      // use matrix implementation","      return algorithm14(matrix(y), x, compare, true).valueOf();","    }","  });","","  compare.toTex = undefined; // use default template","","  return compare;","}","","exports.name = 'compare';","exports.factory = factory;",""],"l":{"3":1,"4":1,"6":1,"8":0,"10":0,"11":0,"12":0,"13":0,"14":0,"49":0,"52":0,"56":0,"62":0,"68":0,"72":0,"76":0,"77":0,"79":0,"83":0,"88":0,"91":0,"93":0,"96":0,"97":0,"100":0,"101":0,"103":0,"105":0,"108":0,"109":0,"112":0,"113":0,"115":0,"117":0,"122":0,"127":0,"132":0,"137":0,"139":0,"141":0,"142":0,"144":0,"145":0,"147":0,"152":0,"154":0,"156":0,"157":0,"159":0,"160":0,"162":0,"167":0,"172":0,"176":0,"178":0,"181":1,"182":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/utils/bignumber/nearlyEqual.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/utils/bignumber/nearlyEqual.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"nearlyEqual","line":12,"loc":{"start":{"line":12,"column":17},"end":{"line":12,"column":53}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":45,"column":2}},"2":{"start":{"line":14,"column":2},"end":{"line":16,"column":3}},"3":{"start":{"line":15,"column":4},"end":{"line":15,"column":19}},"4":{"start":{"line":20,"column":2},"end":{"line":22,"column":3}},"5":{"start":{"line":21,"column":4},"end":{"line":21,"column":16}},"6":{"start":{"line":25,"column":2},"end":{"line":27,"column":3}},"7":{"start":{"line":26,"column":4},"end":{"line":26,"column":17}},"8":{"start":{"line":30,"column":2},"end":{"line":41,"column":3}},"9":{"start":{"line":32,"column":4},"end":{"line":32,"column":32}},"10":{"start":{"line":33,"column":4},"end":{"line":40,"column":5}},"11":{"start":{"line":34,"column":6},"end":{"line":34,"column":18}},"12":{"start":{"line":38,"column":6},"end":{"line":38,"column":52}},"13":{"start":{"line":39,"column":6},"end":{"line":39,"column":42}},"14":{"start":{"line":44,"column":2},"end":{"line":44,"column":15}}},"branchMap":{"1":{"line":14,"type":"if","locations":[{"start":{"line":14,"column":2},"end":{"line":14,"column":2}},{"start":{"line":14,"column":2},"end":{"line":14,"column":2}}]},"2":{"line":20,"type":"if","locations":[{"start":{"line":20,"column":2},"end":{"line":20,"column":2}},{"start":{"line":20,"column":2},"end":{"line":20,"column":2}}]},"3":{"line":25,"type":"if","locations":[{"start":{"line":25,"column":2},"end":{"line":25,"column":2}},{"start":{"line":25,"column":2},"end":{"line":25,"column":2}}]},"4":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":6},"end":{"line":25,"column":15}},{"start":{"line":25,"column":19},"end":{"line":25,"column":28}}]},"5":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":2},"end":{"line":30,"column":2}},{"start":{"line":30,"column":2},"end":{"line":30,"column":2}}]},"6":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":5},"end":{"line":30,"column":17}},{"start":{"line":30,"column":21},"end":{"line":30,"column":33}}]},"7":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":4},"end":{"line":33,"column":4}},{"start":{"line":33,"column":4},"end":{"line":33,"column":4}}]}},"code":["'use strict';","","/**"," * Compares two BigNumbers."," * @param {BigNumber} x       First value to compare"," * @param {BigNumber} y       Second value to compare"," * @param {number} [epsilon]  The maximum relative difference between x and y"," *                            If epsilon is undefined or null, the function will"," *                            test whether x and y are exactly equal."," * @return {boolean} whether the two numbers are nearly equal"," */","module.exports = function nearlyEqual(x, y, epsilon) {","  // if epsilon is null or undefined, test whether x and y are exactly equal","  if (epsilon == null) {","    return x.eq(y);","  }","","","  // use \"==\" operator, handles infinities","  if (x.eq(y)) {","    return true;","  }","","  // NaN","  if (x.isNaN() || y.isNaN()) {","    return false;","  }","","  // at this point x and y should be finite","  if(x.isFinite() && y.isFinite()) {","    // check numbers are very close, needed when comparing numbers near zero","    var diff = x.minus(y).abs();","    if (diff.isZero()) {","      return true;","    }","    else {","      // use relative error","      var max = x.constructor.max(x.abs(), y.abs());","      return diff.lte(max.times(epsilon));","    }","  }","","  // Infinite and Number or negative Infinite and positive Infinite cases","  return false;","};",""],"l":{"12":1,"14":0,"15":0,"20":0,"21":0,"25":0,"26":0,"30":0,"32":0,"33":0,"34":0,"38":0,"39":0,"44":0}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/relational/deepEqual.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/relational/deepEqual.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":1,"22":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"factory","line":3,"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}}},"2":{"name":"(anonymous_2)","line":34,"loc":{"start":{"line":34,"column":16},"end":{"line":34,"column":32}}},"3":{"name":"_deepEqual","line":49,"loc":{"start":{"line":49,"column":2},"end":{"line":49,"column":28}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":78,"column":1}},"2":{"start":{"line":4,"column":2},"end":{"line":4,"column":39}},"3":{"start":{"line":33,"column":2},"end":{"line":37,"column":5}},"4":{"start":{"line":35,"column":6},"end":{"line":35,"column":50}},"5":{"start":{"line":39,"column":2},"end":{"line":39,"column":30}},"6":{"start":{"line":41,"column":2},"end":{"line":41,"column":19}},"7":{"start":{"line":49,"column":2},"end":{"line":77,"column":3}},"8":{"start":{"line":50,"column":4},"end":{"line":76,"column":5}},"9":{"start":{"line":51,"column":6},"end":{"line":67,"column":7}},"10":{"start":{"line":52,"column":8},"end":{"line":52,"column":27}},"11":{"start":{"line":53,"column":8},"end":{"line":55,"column":9}},"12":{"start":{"line":54,"column":10},"end":{"line":54,"column":23}},"13":{"start":{"line":57,"column":8},"end":{"line":61,"column":9}},"14":{"start":{"line":58,"column":10},"end":{"line":60,"column":11}},"15":{"start":{"line":59,"column":12},"end":{"line":59,"column":25}},"16":{"start":{"line":63,"column":8},"end":{"line":63,"column":20}},"17":{"start":{"line":66,"column":8},"end":{"line":66,"column":21}},"18":{"start":{"line":70,"column":6},"end":{"line":75,"column":7}},"19":{"start":{"line":71,"column":8},"end":{"line":71,"column":21}},"20":{"start":{"line":74,"column":8},"end":{"line":74,"column":27}},"21":{"start":{"line":80,"column":0},"end":{"line":80,"column":27}},"22":{"start":{"line":81,"column":0},"end":{"line":81,"column":26}}},"branchMap":{"1":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":4},"end":{"line":50,"column":4}},{"start":{"line":50,"column":4},"end":{"line":50,"column":4}}]},"2":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":6},"end":{"line":51,"column":6}},{"start":{"line":51,"column":6},"end":{"line":51,"column":6}}]},"3":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":8},"end":{"line":53,"column":8}},{"start":{"line":53,"column":8},"end":{"line":53,"column":8}}]},"4":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":10},"end":{"line":58,"column":10}},{"start":{"line":58,"column":10},"end":{"line":58,"column":10}}]},"5":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":6},"end":{"line":70,"column":6}},{"start":{"line":70,"column":6},"end":{"line":70,"column":6}}]}},"code":["'use strict';","","function factory (type, config, load, typed) {","  var equal = load(require('./equal'));","","  /**","   * Test element wise whether two matrices are equal.","   * The function accepts both matrices and scalar values.","   *","   * Syntax:","   *","   *    math.deepEqual(x, y)","   *","   * Examples:","   *","   *    math.deepEqual(2, 4);   // returns false","   *","   *    a = [2, 5, 1];","   *    b = [2, 7, 1];","   *","   *    math.deepEqual(a, b);   // returns false","   *    math.equal(a, b);       // returns [true, false, true]","   *","   * See also:","   *","   *    equal, unequal","   *","   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First matrix to compare","   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second matrix to compare","   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}","   *            Returns true when the input matrices have the same size and each of their elements is equal.","   */","  var deepEqual = typed('deepEqual', {","    'any, any': function (x, y) {","      return _deepEqual(x.valueOf(), y.valueOf());","    }","  });","","  deepEqual.toTex = undefined; // use default template","","  return deepEqual;","","  /**","   * Test whether two arrays have the same size and all elements are equal","   * @param {Array | *} x","   * @param {Array | *} y","   * @return {boolean} Returns true if both arrays are deep equal","   */","  function _deepEqual(x, y) {","    if (Array.isArray(x)) {","      if (Array.isArray(y)) {","        var len = x.length;","        if (len !== y.length) {","          return false;","        }","","        for (var i = 0; i < len; i++) {","          if (!_deepEqual(x[i], y[i])) {","            return false;","          }","        }","","        return true;","      }","      else {","        return false;","      }","    }","    else {","      if (Array.isArray(y)) {","        return false;","      }","      else {","        return equal(x, y);","      }","    }","  }","}","","exports.name = 'deepEqual';","exports.factory = factory;",""],"l":{"3":1,"4":0,"33":0,"35":0,"39":0,"41":0,"49":1,"50":0,"51":0,"52":0,"53":0,"54":0,"57":0,"58":0,"59":0,"63":0,"66":0,"70":0,"71":0,"74":0,"80":1,"81":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/relational/equal.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/relational/equal.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":1,"57":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"fnMap":{"1":{"name":"factory","line":3,"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}}},"2":{"name":"(anonymous_2)","line":61,"loc":{"start":{"line":61,"column":16},"end":{"line":61,"column":32}}},"3":{"name":"(anonymous_3)","line":71,"loc":{"start":{"line":71,"column":22},"end":{"line":71,"column":38}}},"4":{"name":"(anonymous_4)","line":105,"loc":{"start":{"line":105,"column":20},"end":{"line":105,"column":36}}},"5":{"name":"(anonymous_5)","line":110,"loc":{"start":{"line":110,"column":21},"end":{"line":110,"column":37}}},"6":{"name":"(anonymous_6)","line":115,"loc":{"start":{"line":115,"column":21},"end":{"line":115,"column":37}}},"7":{"name":"(anonymous_7)","line":120,"loc":{"start":{"line":120,"column":19},"end":{"line":120,"column":35}}},"8":{"name":"(anonymous_8)","line":135,"loc":{"start":{"line":135,"column":19},"end":{"line":135,"column":35}}},"9":{"name":"(anonymous_9)","line":150,"loc":{"start":{"line":150,"column":18},"end":{"line":150,"column":34}}},"10":{"name":"(anonymous_10)","line":155,"loc":{"start":{"line":155,"column":18},"end":{"line":155,"column":34}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":166,"column":1}},"2":{"start":{"line":5,"column":2},"end":{"line":5,"column":66}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":51}},"4":{"start":{"line":8,"column":2},"end":{"line":8,"column":73}},"5":{"start":{"line":9,"column":2},"end":{"line":9,"column":73}},"6":{"start":{"line":10,"column":2},"end":{"line":10,"column":73}},"7":{"start":{"line":11,"column":2},"end":{"line":11,"column":73}},"8":{"start":{"line":12,"column":2},"end":{"line":12,"column":73}},"9":{"start":{"line":14,"column":2},"end":{"line":14,"column":43}},"10":{"start":{"line":59,"column":2},"end":{"line":159,"column":5}},"11":{"start":{"line":63,"column":6},"end":{"line":63,"column":44}},"12":{"start":{"line":63,"column":24},"end":{"line":63,"column":42}},"13":{"start":{"line":64,"column":6},"end":{"line":64,"column":44}},"14":{"start":{"line":64,"column":24},"end":{"line":64,"column":42}},"15":{"start":{"line":65,"column":6},"end":{"line":65,"column":54}},"16":{"start":{"line":65,"column":29},"end":{"line":65,"column":52}},"17":{"start":{"line":66,"column":6},"end":{"line":66,"column":54}},"18":{"start":{"line":66,"column":29},"end":{"line":66,"column":52}},"19":{"start":{"line":68,"column":6},"end":{"line":68,"column":31}},"20":{"start":{"line":73,"column":6},"end":{"line":73,"column":12}},"21":{"start":{"line":76,"column":6},"end":{"line":101,"column":7}},"22":{"start":{"line":78,"column":10},"end":{"line":87,"column":11}},"23":{"start":{"line":81,"column":14},"end":{"line":81,"column":49}},"24":{"start":{"line":82,"column":14},"end":{"line":82,"column":20}},"25":{"start":{"line":85,"column":14},"end":{"line":85,"column":55}},"26":{"start":{"line":86,"column":14},"end":{"line":86,"column":20}},"27":{"start":{"line":88,"column":10},"end":{"line":88,"column":16}},"28":{"start":{"line":90,"column":10},"end":{"line":99,"column":11}},"29":{"start":{"line":93,"column":14},"end":{"line":93,"column":56}},"30":{"start":{"line":94,"column":14},"end":{"line":94,"column":20}},"31":{"start":{"line":97,"column":14},"end":{"line":97,"column":49}},"32":{"start":{"line":98,"column":14},"end":{"line":98,"column":20}},"33":{"start":{"line":100,"column":10},"end":{"line":100,"column":16}},"34":{"start":{"line":102,"column":6},"end":{"line":102,"column":15}},"35":{"start":{"line":107,"column":6},"end":{"line":107,"column":51}},"36":{"start":{"line":112,"column":6},"end":{"line":112,"column":33}},"37":{"start":{"line":117,"column":6},"end":{"line":117,"column":33}},"38":{"start":{"line":122,"column":6},"end":{"line":122,"column":12}},"39":{"start":{"line":124,"column":6},"end":{"line":131,"column":7}},"40":{"start":{"line":126,"column":10},"end":{"line":126,"column":52}},"41":{"start":{"line":127,"column":10},"end":{"line":127,"column":16}},"42":{"start":{"line":129,"column":10},"end":{"line":129,"column":52}},"43":{"start":{"line":130,"column":10},"end":{"line":130,"column":16}},"44":{"start":{"line":132,"column":6},"end":{"line":132,"column":15}},"45":{"start":{"line":137,"column":6},"end":{"line":137,"column":12}},"46":{"start":{"line":139,"column":6},"end":{"line":146,"column":7}},"47":{"start":{"line":141,"column":10},"end":{"line":141,"column":51}},"48":{"start":{"line":142,"column":10},"end":{"line":142,"column":16}},"49":{"start":{"line":144,"column":10},"end":{"line":144,"column":51}},"50":{"start":{"line":145,"column":10},"end":{"line":145,"column":16}},"51":{"start":{"line":147,"column":6},"end":{"line":147,"column":15}},"52":{"start":{"line":152,"column":6},"end":{"line":152,"column":69}},"53":{"start":{"line":157,"column":6},"end":{"line":157,"column":68}},"54":{"start":{"line":161,"column":2},"end":{"line":163,"column":4}},"55":{"start":{"line":165,"column":2},"end":{"line":165,"column":15}},"56":{"start":{"line":168,"column":0},"end":{"line":168,"column":23}},"57":{"start":{"line":169,"column":0},"end":{"line":169,"column":26}}},"branchMap":{"1":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":6},"end":{"line":63,"column":6}},{"start":{"line":63,"column":6},"end":{"line":63,"column":6}}]},"2":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":6},"end":{"line":64,"column":6}},{"start":{"line":64,"column":6},"end":{"line":64,"column":6}}]},"3":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":6},"end":{"line":65,"column":6}},{"start":{"line":65,"column":6},"end":{"line":65,"column":6}}]},"4":{"line":66,"type":"if","locations":[{"start":{"line":66,"column":6},"end":{"line":66,"column":6}},{"start":{"line":66,"column":6},"end":{"line":66,"column":6}}]},"5":{"line":76,"type":"switch","locations":[{"start":{"line":77,"column":8},"end":{"line":88,"column":16}},{"start":{"line":89,"column":8},"end":{"line":100,"column":16}}]},"6":{"line":78,"type":"switch","locations":[{"start":{"line":79,"column":12},"end":{"line":82,"column":20}},{"start":{"line":83,"column":12},"end":{"line":86,"column":20}}]},"7":{"line":90,"type":"switch","locations":[{"start":{"line":91,"column":12},"end":{"line":94,"column":20}},{"start":{"line":95,"column":12},"end":{"line":98,"column":20}}]},"8":{"line":124,"type":"switch","locations":[{"start":{"line":125,"column":8},"end":{"line":127,"column":16}},{"start":{"line":128,"column":8},"end":{"line":130,"column":16}}]},"9":{"line":139,"type":"switch","locations":[{"start":{"line":140,"column":8},"end":{"line":142,"column":16}},{"start":{"line":143,"column":8},"end":{"line":145,"column":16}}]}},"code":["'use strict';","","function factory (type, config, load, typed) {","  ","  var matrix = load(require('../../type/matrix/function/matrix'));","  var equalScalar = load(require('./equalScalar'));","","  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));","  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));","  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));","  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));","  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));","","  var latex = require('../../utils/latex');","","  /**","   * Test whether two values are equal.","   *","   * The function tests whether the relative difference between x and y is","   * smaller than the configured epsilon. The function cannot be used to","   * compare values smaller than approximately 2.22e-16.","   *","   * For matrices, the function is evaluated element wise.","   * In case of complex numbers, x.re must equal y.re, and x.im must equal y.im.","   *","   * Values `null` and `undefined` are compared strictly, thus `null` is only","   * equal to `null` and nothing else, and `undefined` is only equal to","   * `undefined` and nothing else.","   *","   * Syntax:","   *","   *    math.equal(x, y)","   *","   * Examples:","   *","   *    math.equal(2 + 2, 3);         // returns false","   *    math.equal(2 + 2, 4);         // returns true","   *","   *    var a = math.unit('50 cm');","   *    var b = math.unit('5 m');","   *    math.equal(a, b);             // returns true","   *","   *    var c = [2, 5, 1];","   *    var d = [2, 7, 1];","   *","   *    math.equal(c, d);             // returns [true, false, true]","   *    math.deepEqual(c, d);         // returns false","   *","   *    math.equal(0, null);          // returns false","   *","   * See also:","   *","   *    unequal, smaller, smallerEq, larger, largerEq, compare, deepEqual","   *","   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} x First value to compare","   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} y Second value to compare","   * @return {boolean | Array | Matrix} Returns true when the compared values are equal, else returns false","   */","  var equal = typed('equal', {","    ","    'any, any': function (x, y) {","      // strict equality for null and undefined?","      if (x === null) { return y === null; }","      if (y === null) { return x === null; }","      if (x === undefined) { return y === undefined; }","      if (y === undefined) { return x === undefined; }","","      return equalScalar(x, y);","    },","","    'Matrix, Matrix': function (x, y) {","      // result","      var c;","","      // process matrix storage","      switch (x.storage()) {","        case 'sparse':","          switch (y.storage()) {","            case 'sparse':","              // sparse + sparse","              c = algorithm07(x, y, equalScalar);","              break;","            default:","              // sparse + dense","              c = algorithm03(y, x, equalScalar, true);","              break;","          }","          break;","        default:","          switch (y.storage()) {","            case 'sparse':","              // dense + sparse","              c = algorithm03(x, y, equalScalar, false);","              break;","            default:","              // dense + dense","              c = algorithm13(x, y, equalScalar);","              break;","          }","          break;","      }","      return c;","    },","    ","    'Array, Array': function (x, y) {","      // use matrix implementation","      return equal(matrix(x), matrix(y)).valueOf();","    },","","    'Array, Matrix': function (x, y) {","      // use matrix implementation","      return equal(matrix(x), y);","    },","","    'Matrix, Array': function (x, y) {","      // use matrix implementation","      return equal(x, matrix(y));","    },","    ","    'Matrix, any': function (x, y) {","      // result","      var c;","      // check storage format","      switch (x.storage()) {","        case 'sparse':","          c = algorithm12(x, y, equalScalar, false);","          break;","        default:","          c = algorithm14(x, y, equalScalar, false);","          break;","      }","      return c;","    },","","    'any, Matrix': function (x, y) {","      // result","      var c;","      // check storage format","      switch (y.storage()) {","        case 'sparse':","          c = algorithm12(y, x, equalScalar, true);","          break;","        default:","          c = algorithm14(y, x, equalScalar, true);","          break;","      }","      return c;","    },","","    'Array, any': function (x, y) {","      // use matrix implementation","      return algorithm14(matrix(x), y, equalScalar, false).valueOf();","    },","","    'any, Array': function (x, y) {","      // use matrix implementation","      return algorithm14(matrix(y), x, equalScalar, true).valueOf();","    }","  });","","  equal.toTex = {","    2: '\\\\left(${args[0]}' + latex.operators['equal'] + '${args[1]}\\\\right)'","  };","","  return equal;","}","","exports.name = 'equal';","exports.factory = factory;",""],"l":{"3":1,"5":0,"6":0,"8":0,"9":0,"10":0,"11":0,"12":0,"14":0,"59":0,"63":0,"64":0,"65":0,"66":0,"68":0,"73":0,"76":0,"78":0,"81":0,"82":0,"85":0,"86":0,"88":0,"90":0,"93":0,"94":0,"97":0,"98":0,"100":0,"102":0,"107":0,"112":0,"117":0,"122":0,"124":0,"126":0,"127":0,"129":0,"130":0,"132":0,"137":0,"139":0,"141":0,"142":0,"144":0,"145":0,"147":0,"152":0,"157":0,"161":0,"165":0,"168":1,"169":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/relational/larger.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/relational/larger.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":1,"58":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},"fnMap":{"1":{"name":"factory","line":6,"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":45}}},"2":{"name":"(anonymous_2)","line":50,"loc":{"start":{"line":50,"column":24},"end":{"line":50,"column":40}}},"3":{"name":"(anonymous_3)","line":54,"loc":{"start":{"line":54,"column":22},"end":{"line":54,"column":38}}},"4":{"name":"(anonymous_4)","line":58,"loc":{"start":{"line":58,"column":28},"end":{"line":58,"column":44}}},"5":{"name":"(anonymous_5)","line":62,"loc":{"start":{"line":62,"column":26},"end":{"line":62,"column":42}}},"6":{"name":"(anonymous_6)","line":66,"loc":{"start":{"line":66,"column":24},"end":{"line":66,"column":36}}},"7":{"name":"(anonymous_7)","line":70,"loc":{"start":{"line":70,"column":18},"end":{"line":70,"column":34}}},"8":{"name":"(anonymous_8)","line":77,"loc":{"start":{"line":77,"column":22},"end":{"line":77,"column":38}}},"9":{"name":"(anonymous_9)","line":81,"loc":{"start":{"line":81,"column":22},"end":{"line":81,"column":38}}},"10":{"name":"(anonymous_10)","line":115,"loc":{"start":{"line":115,"column":20},"end":{"line":115,"column":36}}},"11":{"name":"(anonymous_11)","line":120,"loc":{"start":{"line":120,"column":21},"end":{"line":120,"column":37}}},"12":{"name":"(anonymous_12)","line":125,"loc":{"start":{"line":125,"column":21},"end":{"line":125,"column":37}}},"13":{"name":"(anonymous_13)","line":130,"loc":{"start":{"line":130,"column":19},"end":{"line":130,"column":35}}},"14":{"name":"(anonymous_14)","line":145,"loc":{"start":{"line":145,"column":19},"end":{"line":145,"column":35}}},"15":{"name":"(anonymous_15)","line":160,"loc":{"start":{"line":160,"column":18},"end":{"line":160,"column":34}}},"16":{"name":"(anonymous_16)","line":165,"loc":{"start":{"line":165,"column":18},"end":{"line":165,"column":34}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":60}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":66}},"3":{"start":{"line":6,"column":0},"end":{"line":176,"column":1}},"4":{"start":{"line":8,"column":2},"end":{"line":8,"column":66}},"5":{"start":{"line":10,"column":2},"end":{"line":10,"column":73}},"6":{"start":{"line":11,"column":2},"end":{"line":11,"column":73}},"7":{"start":{"line":12,"column":2},"end":{"line":12,"column":73}},"8":{"start":{"line":13,"column":2},"end":{"line":13,"column":73}},"9":{"start":{"line":14,"column":2},"end":{"line":14,"column":73}},"10":{"start":{"line":16,"column":2},"end":{"line":16,"column":43}},"11":{"start":{"line":48,"column":2},"end":{"line":169,"column":5}},"12":{"start":{"line":51,"column":6},"end":{"line":51,"column":19}},"13":{"start":{"line":55,"column":6},"end":{"line":55,"column":57}},"14":{"start":{"line":59,"column":6},"end":{"line":59,"column":62}},"15":{"start":{"line":63,"column":6},"end":{"line":63,"column":32}},"16":{"start":{"line":67,"column":6},"end":{"line":67,"column":81}},"17":{"start":{"line":71,"column":6},"end":{"line":73,"column":7}},"18":{"start":{"line":72,"column":8},"end":{"line":72,"column":68}},"19":{"start":{"line":74,"column":6},"end":{"line":74,"column":38}},"20":{"start":{"line":78,"column":6},"end":{"line":78,"column":19}},"21":{"start":{"line":83,"column":6},"end":{"line":83,"column":12}},"22":{"start":{"line":86,"column":6},"end":{"line":111,"column":7}},"23":{"start":{"line":88,"column":10},"end":{"line":97,"column":11}},"24":{"start":{"line":91,"column":14},"end":{"line":91,"column":44}},"25":{"start":{"line":92,"column":14},"end":{"line":92,"column":20}},"26":{"start":{"line":95,"column":14},"end":{"line":95,"column":50}},"27":{"start":{"line":96,"column":14},"end":{"line":96,"column":20}},"28":{"start":{"line":98,"column":10},"end":{"line":98,"column":16}},"29":{"start":{"line":100,"column":10},"end":{"line":109,"column":11}},"30":{"start":{"line":103,"column":14},"end":{"line":103,"column":51}},"31":{"start":{"line":104,"column":14},"end":{"line":104,"column":20}},"32":{"start":{"line":107,"column":14},"end":{"line":107,"column":44}},"33":{"start":{"line":108,"column":14},"end":{"line":108,"column":20}},"34":{"start":{"line":110,"column":10},"end":{"line":110,"column":16}},"35":{"start":{"line":112,"column":6},"end":{"line":112,"column":15}},"36":{"start":{"line":117,"column":6},"end":{"line":117,"column":52}},"37":{"start":{"line":122,"column":6},"end":{"line":122,"column":34}},"38":{"start":{"line":127,"column":6},"end":{"line":127,"column":34}},"39":{"start":{"line":132,"column":6},"end":{"line":132,"column":12}},"40":{"start":{"line":134,"column":6},"end":{"line":141,"column":7}},"41":{"start":{"line":136,"column":10},"end":{"line":136,"column":47}},"42":{"start":{"line":137,"column":10},"end":{"line":137,"column":16}},"43":{"start":{"line":139,"column":10},"end":{"line":139,"column":47}},"44":{"start":{"line":140,"column":10},"end":{"line":140,"column":16}},"45":{"start":{"line":142,"column":6},"end":{"line":142,"column":15}},"46":{"start":{"line":147,"column":6},"end":{"line":147,"column":12}},"47":{"start":{"line":149,"column":6},"end":{"line":156,"column":7}},"48":{"start":{"line":151,"column":10},"end":{"line":151,"column":46}},"49":{"start":{"line":152,"column":10},"end":{"line":152,"column":16}},"50":{"start":{"line":154,"column":10},"end":{"line":154,"column":46}},"51":{"start":{"line":155,"column":10},"end":{"line":155,"column":16}},"52":{"start":{"line":157,"column":6},"end":{"line":157,"column":15}},"53":{"start":{"line":162,"column":6},"end":{"line":162,"column":64}},"54":{"start":{"line":167,"column":6},"end":{"line":167,"column":63}},"55":{"start":{"line":171,"column":2},"end":{"line":173,"column":4}},"56":{"start":{"line":175,"column":2},"end":{"line":175,"column":16}},"57":{"start":{"line":178,"column":0},"end":{"line":178,"column":24}},"58":{"start":{"line":179,"column":0},"end":{"line":179,"column":26}}},"branchMap":{"1":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":13},"end":{"line":55,"column":18}},{"start":{"line":55,"column":22},"end":{"line":55,"column":56}}]},"2":{"line":59,"type":"binary-expr","locations":[{"start":{"line":59,"column":13},"end":{"line":59,"column":20}},{"start":{"line":59,"column":24},"end":{"line":59,"column":61}}]},"3":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":6},"end":{"line":71,"column":6}},{"start":{"line":71,"column":6},"end":{"line":71,"column":6}}]},"4":{"line":86,"type":"switch","locations":[{"start":{"line":87,"column":8},"end":{"line":98,"column":16}},{"start":{"line":99,"column":8},"end":{"line":110,"column":16}}]},"5":{"line":88,"type":"switch","locations":[{"start":{"line":89,"column":12},"end":{"line":92,"column":20}},{"start":{"line":93,"column":12},"end":{"line":96,"column":20}}]},"6":{"line":100,"type":"switch","locations":[{"start":{"line":101,"column":12},"end":{"line":104,"column":20}},{"start":{"line":105,"column":12},"end":{"line":108,"column":20}}]},"7":{"line":134,"type":"switch","locations":[{"start":{"line":135,"column":8},"end":{"line":137,"column":16}},{"start":{"line":138,"column":8},"end":{"line":140,"column":16}}]},"8":{"line":149,"type":"switch","locations":[{"start":{"line":150,"column":8},"end":{"line":152,"column":16}},{"start":{"line":153,"column":8},"end":{"line":155,"column":16}}]}},"code":["'use strict';","","var nearlyEqual = require('../../utils/number').nearlyEqual;","var bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');","","function factory (type, config, load, typed) {","  ","  var matrix = load(require('../../type/matrix/function/matrix'));","","  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));","  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));","  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));","  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));","  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));","","  var latex = require('../../utils/latex');","","  /**","   * Test whether value x is larger than y.","   *","   * The function returns true when x is larger than y and the relative","   * difference between x and y is larger than the configured epsilon. The","   * function cannot be used to compare values smaller than approximately 2.22e-16.","   *","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.larger(x, y)","   *","   * Examples:","   *","   *    math.larger(2, 3);             // returns false","   *    math.larger(5, 2 + 2);         // returns true","   *","   *    var a = math.unit('5 cm');","   *    var b = math.unit('2 inch');","   *    math.larger(a, b);             // returns false","   *","   * See also:","   *","   *    equal, unequal, smaller, smallerEq, largerEq, compare","   *","   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare","   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare","   * @return {boolean | Array | Matrix} Returns true when the x is larger than y, else returns false","   */","  var larger = typed('larger', {","","    'boolean, boolean': function (x, y) {","      return x > y;","    },","","    'number, number': function (x, y) {","      return x > y && !nearlyEqual(x, y, config.epsilon);","    },","","    'BigNumber, BigNumber': function (x, y) {","      return x.gt(y) && !bigNearlyEqual(x, y, config.epsilon);","    },","","    'Fraction, Fraction': function (x, y) {","      return x.compare(y) === 1;","    },","","    'Complex, Complex': function () {","      throw new TypeError('No ordering relation is defined for complex numbers');","    },","","    'Unit, Unit': function (x, y) {","      if (!x.equalBase(y)) {","        throw new Error('Cannot compare units with different base');","      }","      return larger(x.value, y.value);","    },","","    'string, string': function (x, y) {","      return x > y;","    },","","    'Matrix, Matrix': function (x, y) {","      // result","      var c;","","      // process matrix storage","      switch (x.storage()) {","        case 'sparse':","          switch (y.storage()) {","            case 'sparse':","              // sparse + sparse","              c = algorithm07(x, y, larger);","              break;","            default:","              // sparse + dense","              c = algorithm03(y, x, larger, true);","              break;","          }","          break;","        default:","          switch (y.storage()) {","            case 'sparse':","              // dense + sparse","              c = algorithm03(x, y, larger, false);","              break;","            default:","              // dense + dense","              c = algorithm13(x, y, larger);","              break;","          }","          break;","      }","      return c;","    },","","    'Array, Array': function (x, y) {","      // use matrix implementation","      return larger(matrix(x), matrix(y)).valueOf();","    },","","    'Array, Matrix': function (x, y) {","      // use matrix implementation","      return larger(matrix(x), y);","    },","","    'Matrix, Array': function (x, y) {","      // use matrix implementation","      return larger(x, matrix(y));","    },","","    'Matrix, any': function (x, y) {","      // result","      var c;","      // check storage format","      switch (x.storage()) {","        case 'sparse':","          c = algorithm12(x, y, larger, false);","          break;","        default:","          c = algorithm14(x, y, larger, false);","          break;","      }","      return c;","    },","","    'any, Matrix': function (x, y) {","      // result","      var c;","      // check storage format","      switch (y.storage()) {","        case 'sparse':","          c = algorithm12(y, x, larger, true);","          break;","        default:","          c = algorithm14(y, x, larger, true);","          break;","      }","      return c;","    },","","    'Array, any': function (x, y) {","      // use matrix implementation","      return algorithm14(matrix(x), y, larger, false).valueOf();","    },","","    'any, Array': function (x, y) {","      // use matrix implementation","      return algorithm14(matrix(y), x, larger, true).valueOf();","    }","  });","","  larger.toTex = {","    2: '\\\\left(${args[0]}' + latex.operators['larger'] + '${args[1]}\\\\right)'","  };","","  return larger;","}","","exports.name = 'larger';","exports.factory = factory;",""],"l":{"3":1,"4":1,"6":1,"8":0,"10":0,"11":0,"12":0,"13":0,"14":0,"16":0,"48":0,"51":0,"55":0,"59":0,"63":0,"67":0,"71":0,"72":0,"74":0,"78":0,"83":0,"86":0,"88":0,"91":0,"92":0,"95":0,"96":0,"98":0,"100":0,"103":0,"104":0,"107":0,"108":0,"110":0,"112":0,"117":0,"122":0,"127":0,"132":0,"134":0,"136":0,"137":0,"139":0,"140":0,"142":0,"147":0,"149":0,"151":0,"152":0,"154":0,"155":0,"157":0,"162":0,"167":0,"171":0,"175":0,"178":1,"179":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/relational/largerEq.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/relational/largerEq.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":1,"58":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},"fnMap":{"1":{"name":"factory","line":6,"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":45}}},"2":{"name":"(anonymous_2)","line":46,"loc":{"start":{"line":46,"column":24},"end":{"line":46,"column":40}}},"3":{"name":"(anonymous_3)","line":50,"loc":{"start":{"line":50,"column":22},"end":{"line":50,"column":38}}},"4":{"name":"(anonymous_4)","line":54,"loc":{"start":{"line":54,"column":28},"end":{"line":54,"column":44}}},"5":{"name":"(anonymous_5)","line":58,"loc":{"start":{"line":58,"column":26},"end":{"line":58,"column":42}}},"6":{"name":"(anonymous_6)","line":62,"loc":{"start":{"line":62,"column":24},"end":{"line":62,"column":36}}},"7":{"name":"(anonymous_7)","line":66,"loc":{"start":{"line":66,"column":18},"end":{"line":66,"column":34}}},"8":{"name":"(anonymous_8)","line":73,"loc":{"start":{"line":73,"column":22},"end":{"line":73,"column":38}}},"9":{"name":"(anonymous_9)","line":77,"loc":{"start":{"line":77,"column":22},"end":{"line":77,"column":38}}},"10":{"name":"(anonymous_10)","line":111,"loc":{"start":{"line":111,"column":20},"end":{"line":111,"column":36}}},"11":{"name":"(anonymous_11)","line":116,"loc":{"start":{"line":116,"column":21},"end":{"line":116,"column":37}}},"12":{"name":"(anonymous_12)","line":121,"loc":{"start":{"line":121,"column":21},"end":{"line":121,"column":37}}},"13":{"name":"(anonymous_13)","line":126,"loc":{"start":{"line":126,"column":19},"end":{"line":126,"column":35}}},"14":{"name":"(anonymous_14)","line":141,"loc":{"start":{"line":141,"column":19},"end":{"line":141,"column":35}}},"15":{"name":"(anonymous_15)","line":156,"loc":{"start":{"line":156,"column":18},"end":{"line":156,"column":34}}},"16":{"name":"(anonymous_16)","line":161,"loc":{"start":{"line":161,"column":18},"end":{"line":161,"column":34}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":60}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":66}},"3":{"start":{"line":6,"column":0},"end":{"line":172,"column":1}},"4":{"start":{"line":8,"column":2},"end":{"line":8,"column":66}},"5":{"start":{"line":10,"column":2},"end":{"line":10,"column":73}},"6":{"start":{"line":11,"column":2},"end":{"line":11,"column":73}},"7":{"start":{"line":12,"column":2},"end":{"line":12,"column":73}},"8":{"start":{"line":13,"column":2},"end":{"line":13,"column":73}},"9":{"start":{"line":14,"column":2},"end":{"line":14,"column":73}},"10":{"start":{"line":16,"column":2},"end":{"line":16,"column":43}},"11":{"start":{"line":44,"column":2},"end":{"line":165,"column":5}},"12":{"start":{"line":47,"column":6},"end":{"line":47,"column":20}},"13":{"start":{"line":51,"column":6},"end":{"line":51,"column":57}},"14":{"start":{"line":55,"column":6},"end":{"line":55,"column":62}},"15":{"start":{"line":59,"column":6},"end":{"line":59,"column":33}},"16":{"start":{"line":63,"column":6},"end":{"line":63,"column":81}},"17":{"start":{"line":67,"column":6},"end":{"line":69,"column":7}},"18":{"start":{"line":68,"column":8},"end":{"line":68,"column":68}},"19":{"start":{"line":70,"column":6},"end":{"line":70,"column":40}},"20":{"start":{"line":74,"column":6},"end":{"line":74,"column":20}},"21":{"start":{"line":79,"column":6},"end":{"line":79,"column":12}},"22":{"start":{"line":82,"column":6},"end":{"line":107,"column":7}},"23":{"start":{"line":84,"column":10},"end":{"line":93,"column":11}},"24":{"start":{"line":87,"column":14},"end":{"line":87,"column":46}},"25":{"start":{"line":88,"column":14},"end":{"line":88,"column":20}},"26":{"start":{"line":91,"column":14},"end":{"line":91,"column":52}},"27":{"start":{"line":92,"column":14},"end":{"line":92,"column":20}},"28":{"start":{"line":94,"column":10},"end":{"line":94,"column":16}},"29":{"start":{"line":96,"column":10},"end":{"line":105,"column":11}},"30":{"start":{"line":99,"column":14},"end":{"line":99,"column":53}},"31":{"start":{"line":100,"column":14},"end":{"line":100,"column":20}},"32":{"start":{"line":103,"column":14},"end":{"line":103,"column":46}},"33":{"start":{"line":104,"column":14},"end":{"line":104,"column":20}},"34":{"start":{"line":106,"column":10},"end":{"line":106,"column":16}},"35":{"start":{"line":108,"column":6},"end":{"line":108,"column":15}},"36":{"start":{"line":113,"column":6},"end":{"line":113,"column":54}},"37":{"start":{"line":118,"column":6},"end":{"line":118,"column":36}},"38":{"start":{"line":123,"column":6},"end":{"line":123,"column":36}},"39":{"start":{"line":128,"column":6},"end":{"line":128,"column":12}},"40":{"start":{"line":130,"column":6},"end":{"line":137,"column":7}},"41":{"start":{"line":132,"column":10},"end":{"line":132,"column":49}},"42":{"start":{"line":133,"column":10},"end":{"line":133,"column":16}},"43":{"start":{"line":135,"column":10},"end":{"line":135,"column":49}},"44":{"start":{"line":136,"column":10},"end":{"line":136,"column":16}},"45":{"start":{"line":138,"column":6},"end":{"line":138,"column":15}},"46":{"start":{"line":143,"column":6},"end":{"line":143,"column":12}},"47":{"start":{"line":145,"column":6},"end":{"line":152,"column":7}},"48":{"start":{"line":147,"column":10},"end":{"line":147,"column":48}},"49":{"start":{"line":148,"column":10},"end":{"line":148,"column":16}},"50":{"start":{"line":150,"column":10},"end":{"line":150,"column":48}},"51":{"start":{"line":151,"column":10},"end":{"line":151,"column":16}},"52":{"start":{"line":153,"column":6},"end":{"line":153,"column":15}},"53":{"start":{"line":158,"column":6},"end":{"line":158,"column":66}},"54":{"start":{"line":163,"column":6},"end":{"line":163,"column":65}},"55":{"start":{"line":167,"column":2},"end":{"line":169,"column":4}},"56":{"start":{"line":171,"column":2},"end":{"line":171,"column":18}},"57":{"start":{"line":174,"column":0},"end":{"line":174,"column":26}},"58":{"start":{"line":175,"column":0},"end":{"line":175,"column":26}}},"branchMap":{"1":{"line":51,"type":"binary-expr","locations":[{"start":{"line":51,"column":13},"end":{"line":51,"column":19}},{"start":{"line":51,"column":23},"end":{"line":51,"column":56}}]},"2":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":13},"end":{"line":55,"column":21}},{"start":{"line":55,"column":25},"end":{"line":55,"column":61}}]},"3":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":6},"end":{"line":67,"column":6}},{"start":{"line":67,"column":6},"end":{"line":67,"column":6}}]},"4":{"line":82,"type":"switch","locations":[{"start":{"line":83,"column":8},"end":{"line":94,"column":16}},{"start":{"line":95,"column":8},"end":{"line":106,"column":16}}]},"5":{"line":84,"type":"switch","locations":[{"start":{"line":85,"column":12},"end":{"line":88,"column":20}},{"start":{"line":89,"column":12},"end":{"line":92,"column":20}}]},"6":{"line":96,"type":"switch","locations":[{"start":{"line":97,"column":12},"end":{"line":100,"column":20}},{"start":{"line":101,"column":12},"end":{"line":104,"column":20}}]},"7":{"line":130,"type":"switch","locations":[{"start":{"line":131,"column":8},"end":{"line":133,"column":16}},{"start":{"line":134,"column":8},"end":{"line":136,"column":16}}]},"8":{"line":145,"type":"switch","locations":[{"start":{"line":146,"column":8},"end":{"line":148,"column":16}},{"start":{"line":149,"column":8},"end":{"line":151,"column":16}}]}},"code":["'use strict';","","var nearlyEqual = require('../../utils/number').nearlyEqual;","var bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');","","function factory (type, config, load, typed) {","  ","  var matrix = load(require('../../type/matrix/function/matrix'));","","  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));","  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));","  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));","  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));","  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));","","  var latex = require('../../utils/latex');","","  /**","   * Test whether value x is larger or equal to y.","   *","   * The function returns true when x is larger than y or the relative","   * difference between x and y is smaller than the configured epsilon. The","   * function cannot be used to compare values smaller than approximately 2.22e-16.","   *","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.largerEq(x, y)","   *","   * Examples:","   *","   *    math.larger(2, 1 + 1);         // returns false","   *    math.largerEq(2, 1 + 1);       // returns true","   *","   * See also:","   *","   *    equal, unequal, smaller, smallerEq, larger, compare","   *","   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare","   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare","   * @return {boolean | Array | Matrix} Returns true when the x is larger or equal to y, else returns false","   */","  var largerEq = typed('largerEq', {","","    'boolean, boolean': function (x, y) {","      return x >= y;","    },","","    'number, number': function (x, y) {","      return x >= y || nearlyEqual(x, y, config.epsilon);","    },","","    'BigNumber, BigNumber': function (x, y) {","      return x.gte(y) || bigNearlyEqual(x, y, config.epsilon);","    },","","    'Fraction, Fraction': function (x, y) {","      return x.compare(y) !== -1;","    },","","    'Complex, Complex': function () {","      throw new TypeError('No ordering relation is defined for complex numbers');","    },","","    'Unit, Unit': function (x, y) {","      if (!x.equalBase(y)) {","        throw new Error('Cannot compare units with different base');","      }","      return largerEq(x.value, y.value);","    },","","    'string, string': function (x, y) {","      return x >= y;","    },","","    'Matrix, Matrix': function (x, y) {","      // result","      var c;","","      // process matrix storage","      switch (x.storage()) {","        case 'sparse':","          switch (y.storage()) {","            case 'sparse':","              // sparse + sparse","              c = algorithm07(x, y, largerEq);","              break;","            default:","              // sparse + dense","              c = algorithm03(y, x, largerEq, true);","              break;","          }","          break;","        default:","          switch (y.storage()) {","            case 'sparse':","              // dense + sparse","              c = algorithm03(x, y, largerEq, false);","              break;","            default:","              // dense + dense","              c = algorithm13(x, y, largerEq);","              break;","          }","          break;","      }","      return c;","    },","","    'Array, Array': function (x, y) {","      // use matrix implementation","      return largerEq(matrix(x), matrix(y)).valueOf();","    },","","    'Array, Matrix': function (x, y) {","      // use matrix implementation","      return largerEq(matrix(x), y);","    },","","    'Matrix, Array': function (x, y) {","      // use matrix implementation","      return largerEq(x, matrix(y));","    },","","    'Matrix, any': function (x, y) {","      // result","      var c;","      // check storage format","      switch (x.storage()) {","        case 'sparse':","          c = algorithm12(x, y, largerEq, false);","          break;","        default:","          c = algorithm14(x, y, largerEq, false);","          break;","      }","      return c;","    },","","    'any, Matrix': function (x, y) {","      // result","      var c;","      // check storage format","      switch (y.storage()) {","        case 'sparse':","          c = algorithm12(y, x, largerEq, true);","          break;","        default:","          c = algorithm14(y, x, largerEq, true);","          break;","      }","      return c;","    },","","    'Array, any': function (x, y) {","      // use matrix implementation","      return algorithm14(matrix(x), y, largerEq, false).valueOf();","    },","","    'any, Array': function (x, y) {","      // use matrix implementation","      return algorithm14(matrix(y), x, largerEq, true).valueOf();","    }","  });","","  largerEq.toTex = {","    2: '\\\\left(${args[0]}' + latex.operators['largerEq'] + '${args[1]}\\\\right)'","  };","","  return largerEq;","}","","exports.name = 'largerEq';","exports.factory = factory;",""],"l":{"3":1,"4":1,"6":1,"8":0,"10":0,"11":0,"12":0,"13":0,"14":0,"16":0,"44":0,"47":0,"51":0,"55":0,"59":0,"63":0,"67":0,"68":0,"70":0,"74":0,"79":0,"82":0,"84":0,"87":0,"88":0,"91":0,"92":0,"94":0,"96":0,"99":0,"100":0,"103":0,"104":0,"106":0,"108":0,"113":0,"118":0,"123":0,"128":0,"130":0,"132":0,"133":0,"135":0,"136":0,"138":0,"143":0,"145":0,"147":0,"148":0,"150":0,"151":0,"153":0,"158":0,"163":0,"167":0,"171":0,"174":1,"175":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/relational/smaller.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/relational/smaller.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":1,"58":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},"fnMap":{"1":{"name":"factory","line":6,"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":45}}},"2":{"name":"(anonymous_2)","line":50,"loc":{"start":{"line":50,"column":24},"end":{"line":50,"column":40}}},"3":{"name":"(anonymous_3)","line":54,"loc":{"start":{"line":54,"column":22},"end":{"line":54,"column":38}}},"4":{"name":"(anonymous_4)","line":58,"loc":{"start":{"line":58,"column":28},"end":{"line":58,"column":44}}},"5":{"name":"(anonymous_5)","line":62,"loc":{"start":{"line":62,"column":26},"end":{"line":62,"column":42}}},"6":{"name":"(anonymous_6)","line":66,"loc":{"start":{"line":66,"column":24},"end":{"line":66,"column":40}}},"7":{"name":"(anonymous_7)","line":70,"loc":{"start":{"line":70,"column":18},"end":{"line":70,"column":34}}},"8":{"name":"(anonymous_8)","line":77,"loc":{"start":{"line":77,"column":22},"end":{"line":77,"column":38}}},"9":{"name":"(anonymous_9)","line":81,"loc":{"start":{"line":81,"column":22},"end":{"line":81,"column":38}}},"10":{"name":"(anonymous_10)","line":115,"loc":{"start":{"line":115,"column":20},"end":{"line":115,"column":36}}},"11":{"name":"(anonymous_11)","line":120,"loc":{"start":{"line":120,"column":21},"end":{"line":120,"column":37}}},"12":{"name":"(anonymous_12)","line":125,"loc":{"start":{"line":125,"column":21},"end":{"line":125,"column":37}}},"13":{"name":"(anonymous_13)","line":130,"loc":{"start":{"line":130,"column":19},"end":{"line":130,"column":35}}},"14":{"name":"(anonymous_14)","line":145,"loc":{"start":{"line":145,"column":19},"end":{"line":145,"column":35}}},"15":{"name":"(anonymous_15)","line":160,"loc":{"start":{"line":160,"column":18},"end":{"line":160,"column":34}}},"16":{"name":"(anonymous_16)","line":165,"loc":{"start":{"line":165,"column":18},"end":{"line":165,"column":34}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":60}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":66}},"3":{"start":{"line":6,"column":0},"end":{"line":176,"column":1}},"4":{"start":{"line":8,"column":2},"end":{"line":8,"column":66}},"5":{"start":{"line":10,"column":2},"end":{"line":10,"column":73}},"6":{"start":{"line":11,"column":2},"end":{"line":11,"column":73}},"7":{"start":{"line":12,"column":2},"end":{"line":12,"column":73}},"8":{"start":{"line":13,"column":2},"end":{"line":13,"column":73}},"9":{"start":{"line":14,"column":2},"end":{"line":14,"column":73}},"10":{"start":{"line":16,"column":2},"end":{"line":16,"column":43}},"11":{"start":{"line":48,"column":2},"end":{"line":169,"column":5}},"12":{"start":{"line":51,"column":6},"end":{"line":51,"column":19}},"13":{"start":{"line":55,"column":6},"end":{"line":55,"column":57}},"14":{"start":{"line":59,"column":6},"end":{"line":59,"column":62}},"15":{"start":{"line":63,"column":6},"end":{"line":63,"column":33}},"16":{"start":{"line":67,"column":6},"end":{"line":67,"column":81}},"17":{"start":{"line":71,"column":6},"end":{"line":73,"column":7}},"18":{"start":{"line":72,"column":8},"end":{"line":72,"column":68}},"19":{"start":{"line":74,"column":6},"end":{"line":74,"column":39}},"20":{"start":{"line":78,"column":6},"end":{"line":78,"column":19}},"21":{"start":{"line":83,"column":6},"end":{"line":83,"column":12}},"22":{"start":{"line":86,"column":6},"end":{"line":111,"column":7}},"23":{"start":{"line":88,"column":10},"end":{"line":97,"column":11}},"24":{"start":{"line":91,"column":14},"end":{"line":91,"column":45}},"25":{"start":{"line":92,"column":14},"end":{"line":92,"column":20}},"26":{"start":{"line":95,"column":14},"end":{"line":95,"column":51}},"27":{"start":{"line":96,"column":14},"end":{"line":96,"column":20}},"28":{"start":{"line":98,"column":10},"end":{"line":98,"column":16}},"29":{"start":{"line":100,"column":10},"end":{"line":109,"column":11}},"30":{"start":{"line":103,"column":14},"end":{"line":103,"column":52}},"31":{"start":{"line":104,"column":14},"end":{"line":104,"column":20}},"32":{"start":{"line":107,"column":14},"end":{"line":107,"column":45}},"33":{"start":{"line":108,"column":14},"end":{"line":108,"column":20}},"34":{"start":{"line":110,"column":10},"end":{"line":110,"column":16}},"35":{"start":{"line":112,"column":6},"end":{"line":112,"column":15}},"36":{"start":{"line":117,"column":6},"end":{"line":117,"column":53}},"37":{"start":{"line":122,"column":6},"end":{"line":122,"column":35}},"38":{"start":{"line":127,"column":6},"end":{"line":127,"column":35}},"39":{"start":{"line":132,"column":6},"end":{"line":132,"column":12}},"40":{"start":{"line":134,"column":6},"end":{"line":141,"column":7}},"41":{"start":{"line":136,"column":10},"end":{"line":136,"column":48}},"42":{"start":{"line":137,"column":10},"end":{"line":137,"column":16}},"43":{"start":{"line":139,"column":10},"end":{"line":139,"column":48}},"44":{"start":{"line":140,"column":10},"end":{"line":140,"column":16}},"45":{"start":{"line":142,"column":6},"end":{"line":142,"column":15}},"46":{"start":{"line":147,"column":6},"end":{"line":147,"column":12}},"47":{"start":{"line":149,"column":6},"end":{"line":156,"column":7}},"48":{"start":{"line":151,"column":10},"end":{"line":151,"column":47}},"49":{"start":{"line":152,"column":10},"end":{"line":152,"column":16}},"50":{"start":{"line":154,"column":10},"end":{"line":154,"column":47}},"51":{"start":{"line":155,"column":10},"end":{"line":155,"column":16}},"52":{"start":{"line":157,"column":6},"end":{"line":157,"column":15}},"53":{"start":{"line":162,"column":6},"end":{"line":162,"column":65}},"54":{"start":{"line":167,"column":6},"end":{"line":167,"column":64}},"55":{"start":{"line":171,"column":2},"end":{"line":173,"column":4}},"56":{"start":{"line":175,"column":2},"end":{"line":175,"column":17}},"57":{"start":{"line":178,"column":0},"end":{"line":178,"column":25}},"58":{"start":{"line":179,"column":0},"end":{"line":179,"column":26}}},"branchMap":{"1":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":13},"end":{"line":55,"column":18}},{"start":{"line":55,"column":22},"end":{"line":55,"column":56}}]},"2":{"line":59,"type":"binary-expr","locations":[{"start":{"line":59,"column":13},"end":{"line":59,"column":20}},{"start":{"line":59,"column":24},"end":{"line":59,"column":61}}]},"3":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":6},"end":{"line":71,"column":6}},{"start":{"line":71,"column":6},"end":{"line":71,"column":6}}]},"4":{"line":86,"type":"switch","locations":[{"start":{"line":87,"column":8},"end":{"line":98,"column":16}},{"start":{"line":99,"column":8},"end":{"line":110,"column":16}}]},"5":{"line":88,"type":"switch","locations":[{"start":{"line":89,"column":12},"end":{"line":92,"column":20}},{"start":{"line":93,"column":12},"end":{"line":96,"column":20}}]},"6":{"line":100,"type":"switch","locations":[{"start":{"line":101,"column":12},"end":{"line":104,"column":20}},{"start":{"line":105,"column":12},"end":{"line":108,"column":20}}]},"7":{"line":134,"type":"switch","locations":[{"start":{"line":135,"column":8},"end":{"line":137,"column":16}},{"start":{"line":138,"column":8},"end":{"line":140,"column":16}}]},"8":{"line":149,"type":"switch","locations":[{"start":{"line":150,"column":8},"end":{"line":152,"column":16}},{"start":{"line":153,"column":8},"end":{"line":155,"column":16}}]}},"code":["'use strict';","","var nearlyEqual = require('../../utils/number').nearlyEqual;","var bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');","","function factory (type, config, load, typed) {","","  var matrix = load(require('../../type/matrix/function/matrix'));","","  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));","  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));","  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));","  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));","  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));","","  var latex = require('../../utils/latex');","","  /**","   * Test whether value x is smaller than y.","   *","   * The function returns true when x is smaller than y and the relative","   * difference between x and y is smaller than the configured epsilon. The","   * function cannot be used to compare values smaller than approximately 2.22e-16.","   *","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.smaller(x, y)","   *","   * Examples:","   *","   *    math.smaller(2, 3);            // returns true","   *    math.smaller(5, 2 * 2);        // returns false","   *","   *    var a = math.unit('5 cm');","   *    var b = math.unit('2 inch');","   *    math.smaller(a, b);            // returns true","   *","   * See also:","   *","   *    equal, unequal, smallerEq, smaller, smallerEq, compare","   *","   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare","   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare","   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false","   */","  var smaller = typed('smaller', {","","    'boolean, boolean': function (x, y) {","      return x < y;","    },","","    'number, number': function (x, y) {","      return x < y && !nearlyEqual(x, y, config.epsilon);","    },","","    'BigNumber, BigNumber': function (x, y) {","      return x.lt(y) && !bigNearlyEqual(x, y, config.epsilon);","    },","","    'Fraction, Fraction': function (x, y) {","      return x.compare(y) === -1;","    },","","    'Complex, Complex': function (x, y) {","      throw new TypeError('No ordering relation is defined for complex numbers');","    },","","    'Unit, Unit': function (x, y) {","      if (!x.equalBase(y)) {","        throw new Error('Cannot compare units with different base');","      }","      return smaller(x.value, y.value);","    },","","    'string, string': function (x, y) {","      return x < y;","    },","","    'Matrix, Matrix': function (x, y) {","      // result","      var c;","","      // process matrix storage","      switch (x.storage()) {","        case 'sparse':","          switch (y.storage()) {","            case 'sparse':","              // sparse + sparse","              c = algorithm07(x, y, smaller);","              break;","            default:","              // sparse + dense","              c = algorithm03(y, x, smaller, true);","              break;","          }","          break;","        default:","          switch (y.storage()) {","            case 'sparse':","              // dense + sparse","              c = algorithm03(x, y, smaller, false);","              break;","            default:","              // dense + dense","              c = algorithm13(x, y, smaller);","              break;","          }","          break;","      }","      return c;","    },","","    'Array, Array': function (x, y) {","      // use matrix implementation","      return smaller(matrix(x), matrix(y)).valueOf();","    },","","    'Array, Matrix': function (x, y) {","      // use matrix implementation","      return smaller(matrix(x), y);","    },","","    'Matrix, Array': function (x, y) {","      // use matrix implementation","      return smaller(x, matrix(y));","    },","","    'Matrix, any': function (x, y) {","      // result","      var c;","      // check storage format","      switch (x.storage()) {","        case 'sparse':","          c = algorithm12(x, y, smaller, false);","          break;","        default:","          c = algorithm14(x, y, smaller, false);","          break;","      }","      return c;","    },","","    'any, Matrix': function (x, y) {","      // result","      var c;","      // check storage format","      switch (y.storage()) {","        case 'sparse':","          c = algorithm12(y, x, smaller, true);","          break;","        default:","          c = algorithm14(y, x, smaller, true);","          break;","      }","      return c;","    },","","    'Array, any': function (x, y) {","      // use matrix implementation","      return algorithm14(matrix(x), y, smaller, false).valueOf();","    },","","    'any, Array': function (x, y) {","      // use matrix implementation","      return algorithm14(matrix(y), x, smaller, true).valueOf();","    }","  });","","  smaller.toTex = {","    2: '\\\\left(${args[0]}' + latex.operators['smaller'] + '${args[1]}\\\\right)'","  };","","  return smaller;","}","","exports.name = 'smaller';","exports.factory = factory;",""],"l":{"3":1,"4":1,"6":1,"8":0,"10":0,"11":0,"12":0,"13":0,"14":0,"16":0,"48":0,"51":0,"55":0,"59":0,"63":0,"67":0,"71":0,"72":0,"74":0,"78":0,"83":0,"86":0,"88":0,"91":0,"92":0,"95":0,"96":0,"98":0,"100":0,"103":0,"104":0,"107":0,"108":0,"110":0,"112":0,"117":0,"122":0,"127":0,"132":0,"134":0,"136":0,"137":0,"139":0,"140":0,"142":0,"147":0,"149":0,"151":0,"152":0,"154":0,"155":0,"157":0,"162":0,"167":0,"171":0,"175":0,"178":1,"179":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/relational/smallerEq.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/relational/smallerEq.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":1,"58":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},"fnMap":{"1":{"name":"factory","line":6,"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":45}}},"2":{"name":"(anonymous_2)","line":45,"loc":{"start":{"line":45,"column":24},"end":{"line":45,"column":40}}},"3":{"name":"(anonymous_3)","line":49,"loc":{"start":{"line":49,"column":22},"end":{"line":49,"column":38}}},"4":{"name":"(anonymous_4)","line":53,"loc":{"start":{"line":53,"column":28},"end":{"line":53,"column":44}}},"5":{"name":"(anonymous_5)","line":57,"loc":{"start":{"line":57,"column":26},"end":{"line":57,"column":42}}},"6":{"name":"(anonymous_6)","line":61,"loc":{"start":{"line":61,"column":24},"end":{"line":61,"column":36}}},"7":{"name":"(anonymous_7)","line":65,"loc":{"start":{"line":65,"column":18},"end":{"line":65,"column":34}}},"8":{"name":"(anonymous_8)","line":72,"loc":{"start":{"line":72,"column":22},"end":{"line":72,"column":38}}},"9":{"name":"(anonymous_9)","line":76,"loc":{"start":{"line":76,"column":22},"end":{"line":76,"column":38}}},"10":{"name":"(anonymous_10)","line":110,"loc":{"start":{"line":110,"column":20},"end":{"line":110,"column":36}}},"11":{"name":"(anonymous_11)","line":115,"loc":{"start":{"line":115,"column":21},"end":{"line":115,"column":37}}},"12":{"name":"(anonymous_12)","line":120,"loc":{"start":{"line":120,"column":21},"end":{"line":120,"column":37}}},"13":{"name":"(anonymous_13)","line":125,"loc":{"start":{"line":125,"column":19},"end":{"line":125,"column":35}}},"14":{"name":"(anonymous_14)","line":140,"loc":{"start":{"line":140,"column":19},"end":{"line":140,"column":35}}},"15":{"name":"(anonymous_15)","line":155,"loc":{"start":{"line":155,"column":18},"end":{"line":155,"column":34}}},"16":{"name":"(anonymous_16)","line":160,"loc":{"start":{"line":160,"column":18},"end":{"line":160,"column":34}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":60}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":66}},"3":{"start":{"line":6,"column":0},"end":{"line":171,"column":1}},"4":{"start":{"line":8,"column":2},"end":{"line":8,"column":66}},"5":{"start":{"line":10,"column":2},"end":{"line":10,"column":73}},"6":{"start":{"line":11,"column":2},"end":{"line":11,"column":73}},"7":{"start":{"line":12,"column":2},"end":{"line":12,"column":73}},"8":{"start":{"line":13,"column":2},"end":{"line":13,"column":73}},"9":{"start":{"line":14,"column":2},"end":{"line":14,"column":73}},"10":{"start":{"line":16,"column":2},"end":{"line":16,"column":43}},"11":{"start":{"line":43,"column":2},"end":{"line":164,"column":5}},"12":{"start":{"line":46,"column":6},"end":{"line":46,"column":20}},"13":{"start":{"line":50,"column":6},"end":{"line":50,"column":57}},"14":{"start":{"line":54,"column":6},"end":{"line":54,"column":62}},"15":{"start":{"line":58,"column":6},"end":{"line":58,"column":32}},"16":{"start":{"line":62,"column":6},"end":{"line":62,"column":81}},"17":{"start":{"line":66,"column":6},"end":{"line":68,"column":7}},"18":{"start":{"line":67,"column":8},"end":{"line":67,"column":68}},"19":{"start":{"line":69,"column":6},"end":{"line":69,"column":41}},"20":{"start":{"line":73,"column":6},"end":{"line":73,"column":20}},"21":{"start":{"line":78,"column":6},"end":{"line":78,"column":12}},"22":{"start":{"line":81,"column":6},"end":{"line":106,"column":7}},"23":{"start":{"line":83,"column":10},"end":{"line":92,"column":11}},"24":{"start":{"line":86,"column":14},"end":{"line":86,"column":47}},"25":{"start":{"line":87,"column":14},"end":{"line":87,"column":20}},"26":{"start":{"line":90,"column":14},"end":{"line":90,"column":53}},"27":{"start":{"line":91,"column":14},"end":{"line":91,"column":20}},"28":{"start":{"line":93,"column":10},"end":{"line":93,"column":16}},"29":{"start":{"line":95,"column":10},"end":{"line":104,"column":11}},"30":{"start":{"line":98,"column":14},"end":{"line":98,"column":54}},"31":{"start":{"line":99,"column":14},"end":{"line":99,"column":20}},"32":{"start":{"line":102,"column":14},"end":{"line":102,"column":47}},"33":{"start":{"line":103,"column":14},"end":{"line":103,"column":20}},"34":{"start":{"line":105,"column":10},"end":{"line":105,"column":16}},"35":{"start":{"line":107,"column":6},"end":{"line":107,"column":15}},"36":{"start":{"line":112,"column":6},"end":{"line":112,"column":55}},"37":{"start":{"line":117,"column":6},"end":{"line":117,"column":37}},"38":{"start":{"line":122,"column":6},"end":{"line":122,"column":37}},"39":{"start":{"line":127,"column":6},"end":{"line":127,"column":12}},"40":{"start":{"line":129,"column":6},"end":{"line":136,"column":7}},"41":{"start":{"line":131,"column":10},"end":{"line":131,"column":50}},"42":{"start":{"line":132,"column":10},"end":{"line":132,"column":16}},"43":{"start":{"line":134,"column":10},"end":{"line":134,"column":50}},"44":{"start":{"line":135,"column":10},"end":{"line":135,"column":16}},"45":{"start":{"line":137,"column":6},"end":{"line":137,"column":15}},"46":{"start":{"line":142,"column":6},"end":{"line":142,"column":12}},"47":{"start":{"line":144,"column":6},"end":{"line":151,"column":7}},"48":{"start":{"line":146,"column":10},"end":{"line":146,"column":49}},"49":{"start":{"line":147,"column":10},"end":{"line":147,"column":16}},"50":{"start":{"line":149,"column":10},"end":{"line":149,"column":49}},"51":{"start":{"line":150,"column":10},"end":{"line":150,"column":16}},"52":{"start":{"line":152,"column":6},"end":{"line":152,"column":15}},"53":{"start":{"line":157,"column":6},"end":{"line":157,"column":67}},"54":{"start":{"line":162,"column":6},"end":{"line":162,"column":66}},"55":{"start":{"line":166,"column":2},"end":{"line":168,"column":4}},"56":{"start":{"line":170,"column":2},"end":{"line":170,"column":19}},"57":{"start":{"line":173,"column":0},"end":{"line":173,"column":27}},"58":{"start":{"line":174,"column":0},"end":{"line":174,"column":26}}},"branchMap":{"1":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":13},"end":{"line":50,"column":19}},{"start":{"line":50,"column":23},"end":{"line":50,"column":56}}]},"2":{"line":54,"type":"binary-expr","locations":[{"start":{"line":54,"column":13},"end":{"line":54,"column":21}},{"start":{"line":54,"column":25},"end":{"line":54,"column":61}}]},"3":{"line":66,"type":"if","locations":[{"start":{"line":66,"column":6},"end":{"line":66,"column":6}},{"start":{"line":66,"column":6},"end":{"line":66,"column":6}}]},"4":{"line":81,"type":"switch","locations":[{"start":{"line":82,"column":8},"end":{"line":93,"column":16}},{"start":{"line":94,"column":8},"end":{"line":105,"column":16}}]},"5":{"line":83,"type":"switch","locations":[{"start":{"line":84,"column":12},"end":{"line":87,"column":20}},{"start":{"line":88,"column":12},"end":{"line":91,"column":20}}]},"6":{"line":95,"type":"switch","locations":[{"start":{"line":96,"column":12},"end":{"line":99,"column":20}},{"start":{"line":100,"column":12},"end":{"line":103,"column":20}}]},"7":{"line":129,"type":"switch","locations":[{"start":{"line":130,"column":8},"end":{"line":132,"column":16}},{"start":{"line":133,"column":8},"end":{"line":135,"column":16}}]},"8":{"line":144,"type":"switch","locations":[{"start":{"line":145,"column":8},"end":{"line":147,"column":16}},{"start":{"line":148,"column":8},"end":{"line":150,"column":16}}]}},"code":["'use strict';","","var nearlyEqual = require('../../utils/number').nearlyEqual;","var bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');","","function factory (type, config, load, typed) {","","  var matrix = load(require('../../type/matrix/function/matrix'));","","  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));","  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));","  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));","  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));","  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));","","  var latex = require('../../utils/latex');","","  /**","   * Test whether value x is smaller or equal to y.","   *","   * The function returns true when x is smaller than y or the relative","   * difference between x and y is smaller than the configured epsilon. The","   * function cannot be used to compare values smaller than approximately 2.22e-16.","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.smallerEq(x, y)","   *","   * Examples:","   *","   *    math.smaller(1 + 2, 3);        // returns false","   *    math.smallerEq(1 + 2, 3);      // returns true","   *","   * See also:","   *","   *    equal, unequal, smaller, larger, largerEq, compare","   *","   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare","   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare","   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false","   */","  var smallerEq = typed('smallerEq', {","","    'boolean, boolean': function (x, y) {","      return x <= y;","    },","","    'number, number': function (x, y) {","      return x <= y || nearlyEqual(x, y, config.epsilon);","    },","","    'BigNumber, BigNumber': function (x, y) {","      return x.lte(y) || bigNearlyEqual(x, y, config.epsilon);","    },","","    'Fraction, Fraction': function (x, y) {","      return x.compare(y) !== 1;","    },","","    'Complex, Complex': function () {","      throw new TypeError('No ordering relation is defined for complex numbers');","    },","","    'Unit, Unit': function (x, y) {","      if (!x.equalBase(y)) {","        throw new Error('Cannot compare units with different base');","      }","      return smallerEq(x.value, y.value);","    },","","    'string, string': function (x, y) {","      return x <= y;","    },","","    'Matrix, Matrix': function (x, y) {","      // result","      var c;","","      // process matrix storage","      switch (x.storage()) {","        case 'sparse':","          switch (y.storage()) {","            case 'sparse':","              // sparse + sparse","              c = algorithm07(x, y, smallerEq);","              break;","            default:","              // sparse + dense","              c = algorithm03(y, x, smallerEq, true);","              break;","          }","          break;","        default:","          switch (y.storage()) {","            case 'sparse':","              // dense + sparse","              c = algorithm03(x, y, smallerEq, false);","              break;","            default:","              // dense + dense","              c = algorithm13(x, y, smallerEq);","              break;","          }","          break;","      }","      return c;","    },","","    'Array, Array': function (x, y) {","      // use matrix implementation","      return smallerEq(matrix(x), matrix(y)).valueOf();","    },","","    'Array, Matrix': function (x, y) {","      // use matrix implementation","      return smallerEq(matrix(x), y);","    },","","    'Matrix, Array': function (x, y) {","      // use matrix implementation","      return smallerEq(x, matrix(y));","    },","","    'Matrix, any': function (x, y) {","      // result","      var c;","      // check storage format","      switch (x.storage()) {","        case 'sparse':","          c = algorithm12(x, y, smallerEq, false);","          break;","        default:","          c = algorithm14(x, y, smallerEq, false);","          break;","      }","      return c;","    },","","    'any, Matrix': function (x, y) {","      // result","      var c;","      // check storage format","      switch (y.storage()) {","        case 'sparse':","          c = algorithm12(y, x, smallerEq, true);","          break;","        default:","          c = algorithm14(y, x, smallerEq, true);","          break;","      }","      return c;","    },","","    'Array, any': function (x, y) {","      // use matrix implementation","      return algorithm14(matrix(x), y, smallerEq, false).valueOf();","    },","","    'any, Array': function (x, y) {","      // use matrix implementation","      return algorithm14(matrix(y), x, smallerEq, true).valueOf();","    }","  });","","  smallerEq.toTex = {","    2: '\\\\left(${args[0]}' + latex.operators['smallerEq'] + '${args[1]}\\\\right)'","  };","","  return smallerEq;","}","","exports.name = 'smallerEq';","exports.factory = factory;",""],"l":{"3":1,"4":1,"6":1,"8":0,"10":0,"11":0,"12":0,"13":0,"14":0,"16":0,"43":0,"46":0,"50":0,"54":0,"58":0,"62":0,"66":0,"67":0,"69":0,"73":0,"78":0,"81":0,"83":0,"86":0,"87":0,"90":0,"91":0,"93":0,"95":0,"98":0,"99":0,"102":0,"103":0,"105":0,"107":0,"112":0,"117":0,"122":0,"127":0,"129":0,"131":0,"132":0,"134":0,"135":0,"137":0,"142":0,"144":0,"146":0,"147":0,"149":0,"150":0,"152":0,"157":0,"162":0,"166":0,"170":0,"173":1,"174":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/relational/unequal.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/relational/unequal.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":1,"68":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},"fnMap":{"1":{"name":"factory","line":6,"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":45}}},"2":{"name":"(anonymous_2)","line":62,"loc":{"start":{"line":62,"column":16},"end":{"line":62,"column":32}}},"3":{"name":"(anonymous_3)","line":72,"loc":{"start":{"line":72,"column":22},"end":{"line":72,"column":38}}},"4":{"name":"(anonymous_4)","line":106,"loc":{"start":{"line":106,"column":20},"end":{"line":106,"column":36}}},"5":{"name":"(anonymous_5)","line":111,"loc":{"start":{"line":111,"column":21},"end":{"line":111,"column":37}}},"6":{"name":"(anonymous_6)","line":116,"loc":{"start":{"line":116,"column":21},"end":{"line":116,"column":37}}},"7":{"name":"(anonymous_7)","line":121,"loc":{"start":{"line":121,"column":19},"end":{"line":121,"column":35}}},"8":{"name":"(anonymous_8)","line":136,"loc":{"start":{"line":136,"column":19},"end":{"line":136,"column":35}}},"9":{"name":"(anonymous_9)","line":151,"loc":{"start":{"line":151,"column":18},"end":{"line":151,"column":34}}},"10":{"name":"(anonymous_10)","line":156,"loc":{"start":{"line":156,"column":18},"end":{"line":156,"column":34}}},"11":{"name":"(anonymous_11)","line":164,"loc":{"start":{"line":164,"column":24},"end":{"line":164,"column":40}}},"12":{"name":"(anonymous_12)","line":168,"loc":{"start":{"line":168,"column":22},"end":{"line":168,"column":38}}},"13":{"name":"(anonymous_13)","line":172,"loc":{"start":{"line":172,"column":28},"end":{"line":172,"column":44}}},"14":{"name":"(anonymous_14)","line":176,"loc":{"start":{"line":176,"column":26},"end":{"line":176,"column":42}}},"15":{"name":"(anonymous_15)","line":180,"loc":{"start":{"line":180,"column":24},"end":{"line":180,"column":40}}},"16":{"name":"(anonymous_16)","line":184,"loc":{"start":{"line":184,"column":18},"end":{"line":184,"column":34}}},"17":{"name":"(anonymous_17)","line":191,"loc":{"start":{"line":191,"column":22},"end":{"line":191,"column":38}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":60}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":66}},"3":{"start":{"line":6,"column":0},"end":{"line":201,"column":1}},"4":{"start":{"line":8,"column":2},"end":{"line":8,"column":66}},"5":{"start":{"line":10,"column":2},"end":{"line":10,"column":73}},"6":{"start":{"line":11,"column":2},"end":{"line":11,"column":73}},"7":{"start":{"line":12,"column":2},"end":{"line":12,"column":73}},"8":{"start":{"line":13,"column":2},"end":{"line":13,"column":73}},"9":{"start":{"line":14,"column":2},"end":{"line":14,"column":73}},"10":{"start":{"line":16,"column":2},"end":{"line":16,"column":43}},"11":{"start":{"line":60,"column":2},"end":{"line":160,"column":5}},"12":{"start":{"line":64,"column":6},"end":{"line":64,"column":44}},"13":{"start":{"line":64,"column":24},"end":{"line":64,"column":42}},"14":{"start":{"line":65,"column":6},"end":{"line":65,"column":44}},"15":{"start":{"line":65,"column":24},"end":{"line":65,"column":42}},"16":{"start":{"line":66,"column":6},"end":{"line":66,"column":54}},"17":{"start":{"line":66,"column":29},"end":{"line":66,"column":52}},"18":{"start":{"line":67,"column":6},"end":{"line":67,"column":54}},"19":{"start":{"line":67,"column":29},"end":{"line":67,"column":52}},"20":{"start":{"line":69,"column":6},"end":{"line":69,"column":28}},"21":{"start":{"line":74,"column":6},"end":{"line":74,"column":12}},"22":{"start":{"line":77,"column":6},"end":{"line":102,"column":7}},"23":{"start":{"line":79,"column":10},"end":{"line":88,"column":11}},"24":{"start":{"line":82,"column":14},"end":{"line":82,"column":46}},"25":{"start":{"line":83,"column":14},"end":{"line":83,"column":20}},"26":{"start":{"line":86,"column":14},"end":{"line":86,"column":52}},"27":{"start":{"line":87,"column":14},"end":{"line":87,"column":20}},"28":{"start":{"line":89,"column":10},"end":{"line":89,"column":16}},"29":{"start":{"line":91,"column":10},"end":{"line":100,"column":11}},"30":{"start":{"line":94,"column":14},"end":{"line":94,"column":53}},"31":{"start":{"line":95,"column":14},"end":{"line":95,"column":20}},"32":{"start":{"line":98,"column":14},"end":{"line":98,"column":46}},"33":{"start":{"line":99,"column":14},"end":{"line":99,"column":20}},"34":{"start":{"line":101,"column":10},"end":{"line":101,"column":16}},"35":{"start":{"line":103,"column":6},"end":{"line":103,"column":15}},"36":{"start":{"line":108,"column":6},"end":{"line":108,"column":53}},"37":{"start":{"line":113,"column":6},"end":{"line":113,"column":35}},"38":{"start":{"line":118,"column":6},"end":{"line":118,"column":35}},"39":{"start":{"line":123,"column":6},"end":{"line":123,"column":12}},"40":{"start":{"line":125,"column":6},"end":{"line":132,"column":7}},"41":{"start":{"line":127,"column":10},"end":{"line":127,"column":49}},"42":{"start":{"line":128,"column":10},"end":{"line":128,"column":16}},"43":{"start":{"line":130,"column":10},"end":{"line":130,"column":49}},"44":{"start":{"line":131,"column":10},"end":{"line":131,"column":16}},"45":{"start":{"line":133,"column":6},"end":{"line":133,"column":15}},"46":{"start":{"line":138,"column":6},"end":{"line":138,"column":12}},"47":{"start":{"line":140,"column":6},"end":{"line":147,"column":7}},"48":{"start":{"line":142,"column":10},"end":{"line":142,"column":48}},"49":{"start":{"line":143,"column":10},"end":{"line":143,"column":16}},"50":{"start":{"line":145,"column":10},"end":{"line":145,"column":48}},"51":{"start":{"line":146,"column":10},"end":{"line":146,"column":16}},"52":{"start":{"line":148,"column":6},"end":{"line":148,"column":15}},"53":{"start":{"line":153,"column":6},"end":{"line":153,"column":66}},"54":{"start":{"line":158,"column":6},"end":{"line":158,"column":65}},"55":{"start":{"line":162,"column":2},"end":{"line":194,"column":5}},"56":{"start":{"line":165,"column":6},"end":{"line":165,"column":21}},"57":{"start":{"line":169,"column":6},"end":{"line":169,"column":48}},"58":{"start":{"line":173,"column":6},"end":{"line":173,"column":51}},"59":{"start":{"line":177,"column":6},"end":{"line":177,"column":26}},"60":{"start":{"line":181,"column":6},"end":{"line":181,"column":26}},"61":{"start":{"line":185,"column":6},"end":{"line":187,"column":7}},"62":{"start":{"line":186,"column":8},"end":{"line":186,"column":68}},"63":{"start":{"line":188,"column":6},"end":{"line":188,"column":39}},"64":{"start":{"line":192,"column":6},"end":{"line":192,"column":21}},"65":{"start":{"line":196,"column":2},"end":{"line":198,"column":4}},"66":{"start":{"line":200,"column":2},"end":{"line":200,"column":17}},"67":{"start":{"line":203,"column":0},"end":{"line":203,"column":25}},"68":{"start":{"line":204,"column":0},"end":{"line":204,"column":26}}},"branchMap":{"1":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":6},"end":{"line":64,"column":6}},{"start":{"line":64,"column":6},"end":{"line":64,"column":6}}]},"2":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":6},"end":{"line":65,"column":6}},{"start":{"line":65,"column":6},"end":{"line":65,"column":6}}]},"3":{"line":66,"type":"if","locations":[{"start":{"line":66,"column":6},"end":{"line":66,"column":6}},{"start":{"line":66,"column":6},"end":{"line":66,"column":6}}]},"4":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":6},"end":{"line":67,"column":6}},{"start":{"line":67,"column":6},"end":{"line":67,"column":6}}]},"5":{"line":77,"type":"switch","locations":[{"start":{"line":78,"column":8},"end":{"line":89,"column":16}},{"start":{"line":90,"column":8},"end":{"line":101,"column":16}}]},"6":{"line":79,"type":"switch","locations":[{"start":{"line":80,"column":12},"end":{"line":83,"column":20}},{"start":{"line":84,"column":12},"end":{"line":87,"column":20}}]},"7":{"line":91,"type":"switch","locations":[{"start":{"line":92,"column":12},"end":{"line":95,"column":20}},{"start":{"line":96,"column":12},"end":{"line":99,"column":20}}]},"8":{"line":125,"type":"switch","locations":[{"start":{"line":126,"column":8},"end":{"line":128,"column":16}},{"start":{"line":129,"column":8},"end":{"line":131,"column":16}}]},"9":{"line":140,"type":"switch","locations":[{"start":{"line":141,"column":8},"end":{"line":143,"column":16}},{"start":{"line":144,"column":8},"end":{"line":146,"column":16}}]},"10":{"line":185,"type":"if","locations":[{"start":{"line":185,"column":6},"end":{"line":185,"column":6}},{"start":{"line":185,"column":6},"end":{"line":185,"column":6}}]}},"code":["'use strict';","","var nearlyEqual = require('../../utils/number').nearlyEqual;","var bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');","","function factory (type, config, load, typed) {","","  var matrix = load(require('../../type/matrix/function/matrix'));","","  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));","  var algorithm07 = load(require('../../type/matrix/utils/algorithm07'));","  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));","  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));","  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));","","  var latex = require('../../utils/latex');","","  /**","   * Test whether two values are unequal.","   *","   * The function tests whether the relative difference between x and y is","   * larger than the configured epsilon. The function cannot be used to compare","   * values smaller than approximately 2.22e-16.","   *","   * For matrices, the function is evaluated element wise.","   * In case of complex numbers, x.re must unequal y.re, or x.im must unequal y.im.","   *","   * Values `null` and `undefined` are compared strictly, thus `null` is unequal","   * with everything except `null`, and `undefined` is unequal with everying","   * except. `undefined`.","   *","   * Syntax:","   *","   *    math.unequal(x, y)","   *","   * Examples:","   *","   *    math.unequal(2 + 2, 3);       // returns true","   *    math.unequal(2 + 2, 4);       // returns false","   *","   *    var a = math.unit('50 cm');","   *    var b = math.unit('5 m');","   *    math.unequal(a, b);           // returns false","   *","   *    var c = [2, 5, 1];","   *    var d = [2, 7, 1];","   *","   *    math.unequal(c, d);           // returns [false, true, false]","   *    math.deepEqual(c, d);         // returns false","   *","   *    math.unequal(0, null);        // returns true","   * See also:","   *","   *    equal, deepEqual, smaller, smallerEq, larger, largerEq, compare","   *","   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} x First value to compare","   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} y Second value to compare","   * @return {boolean | Array | Matrix} Returns true when the compared values are unequal, else returns false","   */","  var unequal = typed('unequal', {","    ","    'any, any': function (x, y) {","      // strict equality for null and undefined?","      if (x === null) { return y !== null; }","      if (y === null) { return x !== null; }","      if (x === undefined) { return y !== undefined; }","      if (y === undefined) { return x !== undefined; }","","      return _unequal(x, y);","    },","","    'Matrix, Matrix': function (x, y) {","      // result","      var c;","","      // process matrix storage","      switch (x.storage()) {","        case 'sparse':","          switch (y.storage()) {","            case 'sparse':","              // sparse + sparse","              c = algorithm07(x, y, _unequal);","              break;","            default:","              // sparse + dense","              c = algorithm03(y, x, _unequal, true);","              break;","          }","          break;","        default:","          switch (y.storage()) {","            case 'sparse':","              // dense + sparse","              c = algorithm03(x, y, _unequal, false);","              break;","            default:","              // dense + dense","              c = algorithm13(x, y, _unequal);","              break;","          }","          break;","      }","      return c;","    },","","    'Array, Array': function (x, y) {","      // use matrix implementation","      return unequal(matrix(x), matrix(y)).valueOf();","    },","","    'Array, Matrix': function (x, y) {","      // use matrix implementation","      return unequal(matrix(x), y);","    },","","    'Matrix, Array': function (x, y) {","      // use matrix implementation","      return unequal(x, matrix(y));","    },","","    'Matrix, any': function (x, y) {","      // result","      var c;","      // check storage format","      switch (x.storage()) {","        case 'sparse':","          c = algorithm12(x, y, _unequal, false);","          break;","        default:","          c = algorithm14(x, y, _unequal, false);","          break;","      }","      return c;","    },","","    'any, Matrix': function (x, y) {","      // result","      var c;","      // check storage format","      switch (y.storage()) {","        case 'sparse':","          c = algorithm12(y, x, _unequal, true);","          break;","        default:","          c = algorithm14(y, x, _unequal, true);","          break;","      }","      return c;","    },","","    'Array, any': function (x, y) {","      // use matrix implementation","      return algorithm14(matrix(x), y, _unequal, false).valueOf();","    },","","    'any, Array': function (x, y) {","      // use matrix implementation","      return algorithm14(matrix(y), x, _unequal, true).valueOf();","    }","  });","","  var _unequal = typed('_unequal', {","","    'boolean, boolean': function (x, y) {","      return x !== y;","    },","","    'number, number': function (x, y) {","      return !nearlyEqual(x, y, config.epsilon);","    },","","    'BigNumber, BigNumber': function (x, y) {","      return !bigNearlyEqual(x, y, config.epsilon);","    },","","    'Fraction, Fraction': function (x, y) {","      return !x.equals(y);","    },","","    'Complex, Complex': function (x, y) {","      return !x.equals(y);","    },","","    'Unit, Unit': function (x, y) {","      if (!x.equalBase(y)) {","        throw new Error('Cannot compare units with different base');","      }","      return unequal(x.value, y.value);","    },","","    'string, string': function (x, y) {","      return x !== y;","    }","  });","","  unequal.toTex = {","    2: '\\\\left(${args[0]}' + latex.operators['unequal'] + '${args[1]}\\\\right)'","  };","","  return unequal;","}","","exports.name = 'unequal';","exports.factory = factory;",""],"l":{"3":1,"4":1,"6":1,"8":0,"10":0,"11":0,"12":0,"13":0,"14":0,"16":0,"60":0,"64":0,"65":0,"66":0,"67":0,"69":0,"74":0,"77":0,"79":0,"82":0,"83":0,"86":0,"87":0,"89":0,"91":0,"94":0,"95":0,"98":0,"99":0,"101":0,"103":0,"108":0,"113":0,"118":0,"123":0,"125":0,"127":0,"128":0,"130":0,"131":0,"133":0,"138":0,"140":0,"142":0,"143":0,"145":0,"146":0,"148":0,"153":0,"158":0,"162":0,"165":0,"169":0,"173":0,"177":0,"181":0,"185":0,"186":0,"188":0,"192":0,"196":0,"200":0,"203":1,"204":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/special/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/special/index.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":3,"column":2}}},"branchMap":{},"code":["module.exports = [","  require('./erf')","];",""],"l":{"1":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/special/erf.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/special/erf.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":1,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":1,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":1,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"factory","line":7,"loc":{"start":{"line":7,"column":0},"end":{"line":7,"column":45}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":14},"end":{"line":33,"column":27}}},"3":{"name":"(anonymous_3)","line":51,"loc":{"start":{"line":51,"column":17},"end":{"line":51,"column":30}}},"4":{"name":"(anonymous_4)","line":55,"loc":{"start":{"line":55,"column":22},"end":{"line":55,"column":35}}},"5":{"name":"erf1","line":70,"loc":{"start":{"line":70,"column":2},"end":{"line":70,"column":19}}},"6":{"name":"erfc2","line":90,"loc":{"start":{"line":90,"column":2},"end":{"line":90,"column":20}}},"7":{"name":"erfc3","line":114,"loc":{"start":{"line":114,"column":2},"end":{"line":114,"column":20}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":46}},"3":{"start":{"line":7,"column":0},"end":{"line":134,"column":1}},"4":{"start":{"line":32,"column":2},"end":{"line":62,"column":5}},"5":{"start":{"line":34,"column":6},"end":{"line":34,"column":26}},"6":{"start":{"line":36,"column":6},"end":{"line":38,"column":7}},"7":{"start":{"line":37,"column":8},"end":{"line":37,"column":23}},"8":{"start":{"line":39,"column":6},"end":{"line":41,"column":7}},"9":{"start":{"line":40,"column":8},"end":{"line":40,"column":33}},"10":{"start":{"line":42,"column":6},"end":{"line":44,"column":7}},"11":{"start":{"line":43,"column":8},"end":{"line":43,"column":40}},"12":{"start":{"line":45,"column":6},"end":{"line":45,"column":38}},"13":{"start":{"line":52,"column":6},"end":{"line":52,"column":51}},"14":{"start":{"line":56,"column":6},"end":{"line":56,"column":29}},"15":{"start":{"line":70,"column":2},"end":{"line":81,"column":3}},"16":{"start":{"line":71,"column":4},"end":{"line":71,"column":20}},"17":{"start":{"line":72,"column":4},"end":{"line":72,"column":27}},"18":{"start":{"line":73,"column":4},"end":{"line":73,"column":19}},"19":{"start":{"line":74,"column":4},"end":{"line":74,"column":10}},"20":{"start":{"line":76,"column":4},"end":{"line":79,"column":5}},"21":{"start":{"line":77,"column":6},"end":{"line":77,"column":36}},"22":{"start":{"line":78,"column":6},"end":{"line":78,"column":36}},"23":{"start":{"line":80,"column":4},"end":{"line":80,"column":51}},"24":{"start":{"line":90,"column":2},"end":{"line":103,"column":3}},"25":{"start":{"line":91,"column":4},"end":{"line":91,"column":27}},"26":{"start":{"line":92,"column":4},"end":{"line":92,"column":17}},"27":{"start":{"line":93,"column":4},"end":{"line":93,"column":10}},"28":{"start":{"line":95,"column":4},"end":{"line":98,"column":5}},"29":{"start":{"line":96,"column":6},"end":{"line":96,"column":34}},"30":{"start":{"line":97,"column":6},"end":{"line":97,"column":34}},"31":{"start":{"line":99,"column":4},"end":{"line":99,"column":53}},"32":{"start":{"line":100,"column":4},"end":{"line":100,"column":36}},"33":{"start":{"line":101,"column":4},"end":{"line":101,"column":36}},"34":{"start":{"line":102,"column":4},"end":{"line":102,"column":56}},"35":{"start":{"line":114,"column":2},"end":{"line":129,"column":3}},"36":{"start":{"line":115,"column":4},"end":{"line":115,"column":26}},"37":{"start":{"line":116,"column":4},"end":{"line":116,"column":29}},"38":{"start":{"line":117,"column":4},"end":{"line":117,"column":19}},"39":{"start":{"line":118,"column":4},"end":{"line":118,"column":10}},"40":{"start":{"line":120,"column":4},"end":{"line":123,"column":5}},"41":{"start":{"line":121,"column":6},"end":{"line":121,"column":36}},"42":{"start":{"line":122,"column":6},"end":{"line":122,"column":36}},"43":{"start":{"line":124,"column":4},"end":{"line":124,"column":59}},"44":{"start":{"line":125,"column":4},"end":{"line":125,"column":34}},"45":{"start":{"line":126,"column":4},"end":{"line":126,"column":32}},"46":{"start":{"line":127,"column":4},"end":{"line":127,"column":36}},"47":{"start":{"line":128,"column":4},"end":{"line":128,"column":56}},"48":{"start":{"line":131,"column":2},"end":{"line":131,"column":50}},"49":{"start":{"line":133,"column":2},"end":{"line":133,"column":13}},"50":{"start":{"line":140,"column":0},"end":{"line":140,"column":21}},"51":{"start":{"line":146,"column":0},"end":{"line":146,"column":37}},"52":{"start":{"line":153,"column":0},"end":{"line":167,"column":3}},"53":{"start":{"line":174,"column":0},"end":{"line":186,"column":3}},"54":{"start":{"line":193,"column":0},"end":{"line":193,"column":30}},"55":{"start":{"line":196,"column":0},"end":{"line":196,"column":21}},"56":{"start":{"line":197,"column":0},"end":{"line":197,"column":26}}},"branchMap":{"1":{"line":36,"type":"if","locations":[{"start":{"line":36,"column":6},"end":{"line":36,"column":6}},{"start":{"line":36,"column":6},"end":{"line":36,"column":6}}]},"2":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":6},"end":{"line":39,"column":6}},{"start":{"line":39,"column":6},"end":{"line":39,"column":6}}]},"3":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":6},"end":{"line":42,"column":6}},{"start":{"line":42,"column":6},"end":{"line":42,"column":6}}]}},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","var sign = require('../../utils/number').sign;","","","function factory (type, config, load, typed) {","  /**","   * Compute the erf function of a value using a rational Chebyshev","   * approximations for different intervals of x.","   *","   * This is a translation of W. J. Cody's Fortran implementation from 1987","   * ( http://www.netlib.org/specfun/erf ). See the AMS publication","   * \"Rational Chebyshev Approximations for the Error Function\" by W. J. Cody","   * for an explanation of this process.","   *","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.erf(x)","   *","   * Examples:","   *","   *    math.erf(0.2);    // returns 0.22270258921047847","   *    math.erf(-0.5);   // returns -0.5204998778130465","   *    math.erf(4);      // returns 0.9999999845827421","   *","   * @param {number | Array | Matrix} x   A real number","   * @return {number | Array | Matrix}    The erf of `x`","   */","  var erf = typed('erf', {","    'number': function (x) {","      var y = Math.abs(x);","","      if (y >= MAX_NUM) {","        return sign(x);","      }","      if (y <= THRESH) {","        return sign(x) * erf1(y);","      }","      if (y <= 4.0) {","        return sign(x) * (1 - erfc2(y));","      }","      return sign(x) * (1 - erfc3(y));","    },","","    // TODO: Not sure if there's a way to guarantee some degree of accuracy here.","    //  Perhaps it would be best to set the precision of the number to that which","    //  is guaranteed by erf()","    'BigNumber': function (n) {","      return new type.BigNumber(erf(n.toNumber()));","    },","","    'Array | Matrix': function (n) {","      return deepMap(n, erf);","    }","","    // TODO: For complex numbers, use the approximation for the Faddeeva function","    //  from \"More Efficient Computation of the Complex Error Function\" (AMS)","","  });","","  /**","   * Approximates the error function erf() for x <= 0.46875 using this function:","   *               n","   * erf(x) = x * sum (p_j * x^(2j)) / (q_j * x^(2j))","   *              j=0","   */","  function erf1(y) {","    var ysq = y * y;","    var xnum = P[0][4]*ysq;","    var xden = ysq;","    var i;","","    for (i = 0; i < 3; i += 1) {","      xnum = (xnum + P[0][i]) * ysq;","      xden = (xden + Q[0][i]) * ysq;","    }","    return y * (xnum + P[0][3]) / (xden + Q[0][3]);","  }","","  /**","   * Approximates the complement of the error function erfc() for","   * 0.46875 <= x <= 4.0 using this function:","   *                       n","   * erfc(x) = e^(-x^2) * sum (p_j * x^j) / (q_j * x^j)","   *                      j=0","   */","  function erfc2(y) {","    var xnum = P[1][8] * y;","    var xden = y;","    var i;","","    for (i = 0; i < 7; i += 1) {","      xnum = (xnum + P[1][i]) * y;","      xden = (xden + Q[1][i]) * y;","    }","    var result = (xnum + P[1][7]) / (xden + Q[1][7]);","    var ysq = parseInt(y * 16) / 16;","    var del = (y - ysq) * (y + ysq);","    return Math.exp(-ysq*ysq) * Math.exp(-del) * result;","  }","","  /**","   * Approximates the complement of the error function erfc() for x > 4.0 using","   * this function:","   *","   * erfc(x) = (e^(-x^2) / x) * [ 1/sqrt(pi) +","   *               n","   *    1/(x^2) * sum (p_j * x^(-2j)) / (q_j * x^(-2j)) ]","   *              j=0","   */","  function erfc3(y) {","    var ysq = 1 / (y * y);","    var xnum = P[2][5] * ysq;","    var xden = ysq;","    var i;","","    for (i = 0; i < 4; i += 1) {","      xnum = (xnum + P[2][i]) * ysq;","      xden = (xden + Q[2][i]) * ysq;","    }","    var result = ysq * (xnum + P[2][4]) / (xden + Q[2][4]);","    result = (SQRPI - result) / y;","    ysq = parseInt(y * 16) / 16;","    var del = (y - ysq) * (y + ysq);","    return Math.exp(-ysq*ysq) * Math.exp(-del) * result;","  }","","  erf.toTex = {1: 'erf\\\\left(${args[0]}\\\\right)'};","","  return erf;","}","","/**"," * Upper bound for the first approximation interval, 0 <= x <= THRESH"," * @constant"," */","var THRESH = 0.46875;","","/**"," * Constant used by W. J. Cody's Fortran77 implementation to denote sqrt(pi)"," * @constant"," */","var SQRPI = 5.6418958354775628695e-1;","","/**"," * Coefficients for each term of the numerator sum (p_j) for each approximation"," * interval (see W. J. Cody's paper for more details)"," * @constant"," */","var P = [[","  3.16112374387056560e00, 1.13864154151050156e02,","  3.77485237685302021e02, 3.20937758913846947e03,","  1.85777706184603153e-1","], [","  5.64188496988670089e-1, 8.88314979438837594e00,","  6.61191906371416295e01, 2.98635138197400131e02,","  8.81952221241769090e02, 1.71204761263407058e03,","  2.05107837782607147e03, 1.23033935479799725e03,","  2.15311535474403846e-8","], [","  3.05326634961232344e-1, 3.60344899949804439e-1,","  1.25781726111229246e-1, 1.60837851487422766e-2,","  6.58749161529837803e-4, 1.63153871373020978e-2","]];","","/**"," * Coefficients for each term of the denominator sum (q_j) for each approximation"," * interval (see W. J. Cody's paper for more details)"," * @constant"," */","var Q = [[","  2.36012909523441209e01, 2.44024637934444173e02,","  1.28261652607737228e03, 2.84423683343917062e03","], [","  1.57449261107098347e01, 1.17693950891312499e02,","  5.37181101862009858e02, 1.62138957456669019e03,","  3.29079923573345963e03, 4.36261909014324716e03,","  3.43936767414372164e03, 1.23033935480374942e03","], [","  2.56852019228982242e00, 1.87295284992346047e00,","  5.27905102951428412e-1, 6.05183413124413191e-2,","  2.33520497626869185e-3","]];","","/**"," * Maximum/minimum safe numbers to input to erf() (in ES6+, this number is"," * Number.[MAX|MIN]_SAFE_INTEGER). erf() for all numbers beyond this limit will"," * return 1"," */","var MAX_NUM = Math.pow(2, 53);","","","exports.name = 'erf';","exports.factory = factory;",""],"l":{"3":1,"4":1,"7":1,"32":0,"34":0,"36":0,"37":0,"39":0,"40":0,"42":0,"43":0,"45":0,"52":0,"56":0,"70":1,"71":0,"72":0,"73":0,"74":0,"76":0,"77":0,"78":0,"80":0,"90":1,"91":0,"92":0,"93":0,"95":0,"96":0,"97":0,"99":0,"100":0,"101":0,"102":0,"114":1,"115":0,"116":0,"117":0,"118":0,"120":0,"121":0,"122":0,"124":0,"125":0,"126":0,"127":0,"128":0,"131":0,"133":0,"140":1,"146":1,"153":1,"174":1,"193":1,"196":1,"197":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/statistics/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/statistics/index.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":13,"column":2}}},"branchMap":{},"code":["module.exports = [","  require('./mad'),","  require('./max'),","  require('./mean'),","  require('./median'),","  require('./min'),","  require('./mode'),","  require('./prod'),","  require('./quantileSeq'),","  require('./std'),","  require('./sum'),","  require('./var')","];",""],"l":{"1":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/statistics/mad.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/statistics/mad.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":1},"b":{"1":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":40,"loc":{"start":{"line":40,"column":11},"end":{"line":40,"column":27}}},"3":{"name":"_mad","line":49,"loc":{"start":{"line":49,"column":2},"end":{"line":49,"column":23}}},"4":{"name":"(anonymous_4)","line":57,"loc":{"start":{"line":57,"column":29},"end":{"line":57,"column":46}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":51}},"2":{"start":{"line":5,"column":0},"end":{"line":61,"column":1}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":52}},"4":{"start":{"line":7,"column":2},"end":{"line":7,"column":48}},"5":{"start":{"line":8,"column":2},"end":{"line":8,"column":55}},"6":{"start":{"line":9,"column":2},"end":{"line":9,"column":57}},"7":{"start":{"line":35,"column":2},"end":{"line":43,"column":5}},"8":{"start":{"line":41,"column":6},"end":{"line":41,"column":24}},"9":{"start":{"line":45,"column":2},"end":{"line":45,"column":24}},"10":{"start":{"line":47,"column":2},"end":{"line":47,"column":13}},"11":{"start":{"line":49,"column":2},"end":{"line":60,"column":3}},"12":{"start":{"line":50,"column":4},"end":{"line":50,"column":37}},"13":{"start":{"line":52,"column":4},"end":{"line":54,"column":5}},"14":{"start":{"line":53,"column":6},"end":{"line":53,"column":86}},"15":{"start":{"line":56,"column":4},"end":{"line":56,"column":28}},"16":{"start":{"line":57,"column":4},"end":{"line":59,"column":8}},"17":{"start":{"line":58,"column":6},"end":{"line":58,"column":39}},"18":{"start":{"line":63,"column":0},"end":{"line":63,"column":21}},"19":{"start":{"line":64,"column":0},"end":{"line":64,"column":26}}},"branchMap":{"1":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":4},"end":{"line":52,"column":4}},{"start":{"line":52,"column":4},"end":{"line":52,"column":4}}]}},"code":["'use strict';","","var flatten = require('../../utils/array').flatten;","","function factory (type, config, load, typed) {","  var abs      = load(require('../arithmetic/abs'));","  var map      = load(require('../matrix/map'));","  var median   = load(require('../statistics/median'));","  var subtract = load(require('../arithmetic/subtract'));","","  /**","   * Compute the median absolute deviation of a matrix or a list with values.","   * The median absolute deviation is defined as the median of the absolute","   * deviations from the median.","   *","   * Syntax:","   *","   *     math.mad(a, b, c, ...)","   *     math.mad(A)","   *","   * Examples:","   *","   *     math.mad(10, 20, 30);             // returns 10","   *     math.mad([1, 2, 3]);              // returns 1","   *     math.mad([[1, 2, 3], [4, 5, 6]]); // returns 1.5","   *","   * See also:","   *","   *     median, mean, std, abs","   *","   * @param {Array | Matrix} array","   *                        A single matrix or multiple scalar values.","   * @return {*} The median absolute deviation.","   */","  var mad = typed('mad', {","    // mad([a, b, c, d, ...])","    'Array | Matrix': _mad,","","    // mad(a, b, c, d, ...)","    '...': function (args) {","      return _mad(args);","    }","  });","","  mad.toTex = undefined; // use default template","","  return mad;","","  function _mad(array) {","    array = flatten(array.valueOf());","","    if (array.length === 0) {","      throw new Error('Cannot calculate median absolute deviation of an empty array');","    }","","    var med = median(array);","    return median(map(array, function (value) {","      return abs(subtract(value, med));","    }));","  }","}","","exports.name = 'mad';","exports.factory = factory;",""],"l":{"3":1,"5":1,"6":0,"7":0,"8":0,"9":0,"35":0,"41":0,"45":0,"47":0,"49":1,"50":0,"52":0,"53":0,"56":0,"57":0,"58":0,"63":1,"64":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/statistics/max.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/statistics/max.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1,"14":0,"15":1,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":1,"24":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"factory","line":7,"loc":{"start":{"line":7,"column":0},"end":{"line":7,"column":45}}},"2":{"name":"(anonymous_2)","line":46,"loc":{"start":{"line":46,"column":42},"end":{"line":46,"column":64}}},"3":{"name":"(anonymous_3)","line":51,"loc":{"start":{"line":51,"column":11},"end":{"line":51,"column":27}}},"4":{"name":"_largest","line":71,"loc":{"start":{"line":71,"column":2},"end":{"line":71,"column":25}}},"5":{"name":"_max","line":81,"loc":{"start":{"line":81,"column":2},"end":{"line":81,"column":23}}},"6":{"name":"(anonymous_6)","line":84,"loc":{"start":{"line":84,"column":23},"end":{"line":84,"column":40}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":64}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":54}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":80}},"4":{"start":{"line":7,"column":0},"end":{"line":96,"column":1}},"5":{"start":{"line":8,"column":2},"end":{"line":8,"column":53}},"6":{"start":{"line":41,"column":2},"end":{"line":58,"column":5}},"7":{"start":{"line":47,"column":6},"end":{"line":47,"column":52}},"8":{"start":{"line":52,"column":6},"end":{"line":54,"column":7}},"9":{"start":{"line":53,"column":8},"end":{"line":53,"column":70}},"10":{"start":{"line":56,"column":6},"end":{"line":56,"column":24}},"11":{"start":{"line":60,"column":2},"end":{"line":60,"column":44}},"12":{"start":{"line":62,"column":2},"end":{"line":62,"column":13}},"13":{"start":{"line":71,"column":2},"end":{"line":73,"column":3}},"14":{"start":{"line":72,"column":4},"end":{"line":72,"column":32}},"15":{"start":{"line":81,"column":2},"end":{"line":95,"column":3}},"16":{"start":{"line":82,"column":4},"end":{"line":82,"column":24}},"17":{"start":{"line":84,"column":4},"end":{"line":88,"column":7}},"18":{"start":{"line":85,"column":6},"end":{"line":87,"column":7}},"19":{"start":{"line":86,"column":8},"end":{"line":86,"column":20}},"20":{"start":{"line":90,"column":4},"end":{"line":92,"column":5}},"21":{"start":{"line":91,"column":6},"end":{"line":91,"column":64}},"22":{"start":{"line":94,"column":4},"end":{"line":94,"column":15}},"23":{"start":{"line":98,"column":0},"end":{"line":98,"column":21}},"24":{"start":{"line":99,"column":0},"end":{"line":99,"column":26}}},"branchMap":{"1":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":6},"end":{"line":52,"column":6}},{"start":{"line":52,"column":6},"end":{"line":52,"column":6}}]},"2":{"line":72,"type":"cond-expr","locations":[{"start":{"line":72,"column":26},"end":{"line":72,"column":27}},{"start":{"line":72,"column":30},"end":{"line":72,"column":31}}]},"3":{"line":85,"type":"if","locations":[{"start":{"line":85,"column":6},"end":{"line":85,"column":6}},{"start":{"line":85,"column":6},"end":{"line":85,"column":6}}]},"4":{"line":85,"type":"binary-expr","locations":[{"start":{"line":85,"column":10},"end":{"line":85,"column":27}},{"start":{"line":85,"column":31},"end":{"line":85,"column":49}}]},"5":{"line":90,"type":"if","locations":[{"start":{"line":90,"column":4},"end":{"line":90,"column":4}},{"start":{"line":90,"column":4},"end":{"line":90,"column":4}}]}},"code":["'use strict';","","var deepForEach = require('../../utils/collection/deepForEach');","var reduce = require('../../utils/collection/reduce');","var containsCollections = require('../../utils/collection/containsCollections');","","function factory (type, config, load, typed) {","  var larger = load(require('../relational/larger'));","","  /**","   * Compute the maximum value of a matrix or a  list with values.","   * In case of a multi dimensional array, the maximum of the flattened array","   * will be calculated. When `dim` is provided, the maximum over the selected","   * dimension will be calculated. Parameter `dim` is zero-based.","   *","   * Syntax:","   *","   *     math.max(a, b, c, ...)","   *     math.max(A)","   *     math.max(A, dim)","   *","   * Examples:","   *","   *     math.max(2, 1, 4, 3);                  // returns 4","   *     math.max([2, 1, 4, 3]);                // returns 4","   *","   *     // maximum over a specified dimension (zero-based)","   *     math.max([[2, 5], [4, 3], [1, 7]], 0); // returns [4, 7]","   *     math.max([[2, 5], [4, 3]], [1, 7], 1); // returns [5, 4, 7]","   *","   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1);    // returns 7.1","   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1);    // returns -4.5","   *","   * See also:","   *","   *    mean, median, min, prod, std, sum, var","   *","   * @param {... *} args  A single matrix or or multiple scalar values","   * @return {*} The maximum value","   */","  var max = typed('max', {","    // max([a, b, c, d, ...])","    'Array | Matrix': _max,","","    // max([a, b, c, d, ...], dim)","    'Array | Matrix, number | BigNumber': function (array, dim) {","      return reduce(array, dim.valueOf(), _largest);","    },","","    // max(a, b, c, d, ...)","    '...': function (args) {","      if (containsCollections(args)) {","        throw new TypeError('Scalar values expected in function max');","      }","","      return _max(args);","    }","  });","","  max.toTex = '\\\\max\\\\left(${args}\\\\right)';","","  return max;","","  /**","   * Return the largest of two values","   * @param {*} x","   * @param {*} y","   * @returns {*} Returns x when x is largest, or y when y is largest","   * @private","   */","  function _largest(x, y){","    return larger(x, y) ? x : y;","  }","","  /**","   * Recursively calculate the maximum value in an n-dimensional array","   * @param {Array} array","   * @return {number} max","   * @private","   */","  function _max(array) {","    var max = undefined;","","    deepForEach(array, function (value) {","      if (max === undefined || larger(value, max)) {","        max = value;","      }","    });","","    if (max === undefined) {","      throw new Error('Cannot calculate max of an empty array');","    }","","    return max;","  }","}","","exports.name = 'max';","exports.factory = factory;",""],"l":{"3":1,"4":1,"5":1,"7":1,"8":0,"41":0,"47":0,"52":0,"53":0,"56":0,"60":0,"62":0,"71":1,"72":0,"81":1,"82":0,"84":0,"85":0,"86":0,"90":0,"91":0,"94":0,"98":1,"99":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/utils/collection/reduce.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/utils/collection/reduce.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":15,"loc":{"start":{"line":15,"column":17},"end":{"line":15,"column":46}}},"2":{"name":"_reduce","line":37,"loc":{"start":{"line":37,"column":0},"end":{"line":37,"column":36}}},"3":{"name":"_switch","line":70,"loc":{"start":{"line":70,"column":0},"end":{"line":70,"column":21}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":41}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":51}},"3":{"start":{"line":15,"column":0},"end":{"line":27,"column":2}},"4":{"start":{"line":16,"column":2},"end":{"line":16,"column":62}},"5":{"start":{"line":17,"column":2},"end":{"line":20,"column":3}},"6":{"start":{"line":19,"column":4},"end":{"line":19,"column":43}},"7":{"start":{"line":22,"column":2},"end":{"line":26,"column":3}},"8":{"start":{"line":23,"column":4},"end":{"line":23,"column":61}},"9":{"start":{"line":25,"column":4},"end":{"line":25,"column":39}},"10":{"start":{"line":37,"column":0},"end":{"line":62,"column":1}},"11":{"start":{"line":38,"column":2},"end":{"line":38,"column":24}},"12":{"start":{"line":40,"column":2},"end":{"line":61,"column":3}},"13":{"start":{"line":41,"column":4},"end":{"line":54,"column":5}},"14":{"start":{"line":42,"column":6},"end":{"line":42,"column":19}},"15":{"start":{"line":43,"column":6},"end":{"line":45,"column":7}},"16":{"start":{"line":44,"column":8},"end":{"line":44,"column":36}},"17":{"start":{"line":46,"column":6},"end":{"line":46,"column":17}},"18":{"start":{"line":48,"column":6},"end":{"line":48,"column":26}},"19":{"start":{"line":49,"column":6},"end":{"line":49,"column":15}},"20":{"start":{"line":50,"column":6},"end":{"line":52,"column":7}},"21":{"start":{"line":51,"column":8},"end":{"line":51,"column":51}},"22":{"start":{"line":53,"column":6},"end":{"line":53,"column":17}},"23":{"start":{"line":56,"column":4},"end":{"line":56,"column":13}},"24":{"start":{"line":57,"column":4},"end":{"line":59,"column":5}},"25":{"start":{"line":58,"column":6},"end":{"line":58,"column":48}},"26":{"start":{"line":60,"column":4},"end":{"line":60,"column":15}},"27":{"start":{"line":70,"column":0},"end":{"line":83,"column":1}},"28":{"start":{"line":71,"column":2},"end":{"line":71,"column":21}},"29":{"start":{"line":72,"column":2},"end":{"line":72,"column":24}},"30":{"start":{"line":73,"column":2},"end":{"line":73,"column":11}},"31":{"start":{"line":74,"column":2},"end":{"line":74,"column":15}},"32":{"start":{"line":75,"column":2},"end":{"line":81,"column":3}},"33":{"start":{"line":76,"column":4},"end":{"line":76,"column":17}},"34":{"start":{"line":77,"column":4},"end":{"line":79,"column":5}},"35":{"start":{"line":78,"column":6},"end":{"line":78,"column":26}},"36":{"start":{"line":80,"column":4},"end":{"line":80,"column":18}},"37":{"start":{"line":82,"column":2},"end":{"line":82,"column":13}}},"branchMap":{"1":{"line":16,"type":"cond-expr","locations":[{"start":{"line":16,"column":34},"end":{"line":16,"column":48}},{"start":{"line":16,"column":51},"end":{"line":16,"column":61}}]},"2":{"line":17,"type":"if","locations":[{"start":{"line":17,"column":2},"end":{"line":17,"column":2}},{"start":{"line":17,"column":2},"end":{"line":17,"column":2}}]},"3":{"line":17,"type":"binary-expr","locations":[{"start":{"line":17,"column":6},"end":{"line":17,"column":13}},{"start":{"line":17,"column":18},"end":{"line":17,"column":36}}]},"4":{"line":22,"type":"if","locations":[{"start":{"line":22,"column":2},"end":{"line":22,"column":2}},{"start":{"line":22,"column":2},"end":{"line":22,"column":2}}]},"5":{"line":22,"type":"binary-expr","locations":[{"start":{"line":22,"column":6},"end":{"line":22,"column":9}},{"start":{"line":22,"column":13},"end":{"line":22,"column":34}}]},"6":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":2},"end":{"line":40,"column":2}},{"start":{"line":40,"column":2},"end":{"line":40,"column":2}}]},"7":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":4},"end":{"line":41,"column":4}},{"start":{"line":41,"column":4},"end":{"line":41,"column":4}}]}},"code":["'use strict';","","var arraySize = require('../array').size;","var IndexError = require('../../error/IndexError');","","/**"," * Reduce a given matrix or array to a new matrix or"," * array with one less dimension, applying the given"," * callback in the selected dimension."," * @param {Array | Matrix} mat"," * @param {number} dim"," * @param {Function} callback"," * @return {Array | Matrix} res"," */","module.exports = function(mat, dim, callback) {","  var size = Array.isArray(mat) ? arraySize(mat) : mat.size();","  if (dim < 0 || (dim >= size.length)) {","    // TODO: would be more clear when throwing a DimensionError here","    throw new IndexError(dim, size.length);","  }","","  if (mat && mat.isMatrix === true) {","    return mat.create(_reduce(mat.valueOf(), dim, callback));","  }else {","    return _reduce(mat, dim, callback);","  }","};","","/**"," * Recursively reduce a matrix"," * @param {Array} mat"," * @param {number} dim"," * @param {Function} callback"," * @returns {Array} ret"," * @private"," */","function _reduce(mat, dim, callback){","  var i, ret, val, tran;","","  if(dim<=0){","    if( !Array.isArray(mat[0]) ){","      val = mat[0];","      for(i=1; i<mat.length; i++){","        val = callback(val, mat[i]);","      }","      return val;","    }else{","      tran = _switch(mat);","      ret = [];","      for(i=0; i<tran.length; i++){","        ret[i] = _reduce(tran[i], dim-1, callback);","      }","      return ret;","    }","  }else{","    ret = [];","    for(i=0; i<mat.length; i++){","      ret[i] = _reduce(mat[i], dim-1, callback);","    }","    return ret;","  }","}","","/**"," * Transpose a matrix"," * @param {Array} mat"," * @returns {Array} ret"," * @private"," */","function _switch(mat){","  var I = mat.length;","  var J = mat[0].length;","  var i, j;","  var ret = [];","  for( j=0; j<J; j++) {","    var tmp = [];","    for( i=0; i<I; i++) {","      tmp.push(mat[i][j]);","    }","    ret.push(tmp);","  }","  return ret;","}",""],"l":{"3":1,"4":1,"15":1,"16":0,"17":0,"19":0,"22":0,"23":0,"25":0,"37":1,"38":0,"40":0,"41":0,"42":0,"43":0,"44":0,"46":0,"48":0,"49":0,"50":0,"51":0,"53":0,"56":0,"57":0,"58":0,"60":0,"70":1,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"80":0,"82":0}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/utils/collection/containsCollections.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/utils/collection/containsCollections.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0},"b":{"1":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"containsCollections","line":11,"loc":{"start":{"line":11,"column":17},"end":{"line":11,"column":54}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}},"2":{"start":{"line":11,"column":0},"end":{"line":18,"column":2}},"3":{"start":{"line":12,"column":2},"end":{"line":16,"column":3}},"4":{"start":{"line":13,"column":4},"end":{"line":15,"column":5}},"5":{"start":{"line":14,"column":6},"end":{"line":14,"column":18}},"6":{"start":{"line":17,"column":2},"end":{"line":17,"column":15}}},"branchMap":{"1":{"line":13,"type":"if","locations":[{"start":{"line":13,"column":4},"end":{"line":13,"column":4}},{"start":{"line":13,"column":4},"end":{"line":13,"column":4}}]}},"code":["'use strict';","","var isCollection = require('./isCollection');","","/**"," * Test whether an array contains collections"," * @param {Array} array"," * @returns {boolean} Returns true when the array contains one or multiple"," *                    collections (Arrays or Matrices). Returns false otherwise."," */","module.exports = function containsCollections (array) {","  for (var i = 0; i < array.length; i++) {","    if (isCollection(array[i])) {","      return true;","    }","  }","  return false;","};",""],"l":{"3":1,"11":1,"12":0,"13":0,"14":0,"17":0}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/statistics/mean.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/statistics/mean.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":1,"15":0,"16":0,"17":0,"18":1,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1,"28":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"factory","line":8,"loc":{"start":{"line":8,"column":0},"end":{"line":8,"column":45}}},"2":{"name":"(anonymous_2)","line":47,"loc":{"start":{"line":47,"column":11},"end":{"line":47,"column":27}}},"3":{"name":"_nmean","line":68,"loc":{"start":{"line":68,"column":2},"end":{"line":68,"column":29}}},"4":{"name":"_mean","line":80,"loc":{"start":{"line":80,"column":2},"end":{"line":80,"column":24}}},"5":{"name":"(anonymous_5)","line":84,"loc":{"start":{"line":84,"column":23},"end":{"line":84,"column":40}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":64}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":54}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":80}},"5":{"start":{"line":8,"column":0},"end":{"line":95,"column":1}},"6":{"start":{"line":9,"column":2},"end":{"line":9,"column":47}},"7":{"start":{"line":10,"column":2},"end":{"line":10,"column":53}},"8":{"start":{"line":39,"column":2},"end":{"line":54,"column":5}},"9":{"start":{"line":48,"column":6},"end":{"line":50,"column":7}},"10":{"start":{"line":49,"column":8},"end":{"line":49,"column":71}},"11":{"start":{"line":52,"column":6},"end":{"line":52,"column":25}},"12":{"start":{"line":56,"column":2},"end":{"line":56,"column":25}},"13":{"start":{"line":58,"column":2},"end":{"line":58,"column":14}},"14":{"start":{"line":68,"column":2},"end":{"line":72,"column":3}},"15":{"start":{"line":69,"column":4},"end":{"line":69,"column":38}},"16":{"start":{"line":70,"column":4},"end":{"line":70,"column":62}},"17":{"start":{"line":71,"column":4},"end":{"line":71,"column":31}},"18":{"start":{"line":80,"column":2},"end":{"line":94,"column":3}},"19":{"start":{"line":81,"column":4},"end":{"line":81,"column":16}},"20":{"start":{"line":82,"column":4},"end":{"line":82,"column":16}},"21":{"start":{"line":84,"column":4},"end":{"line":87,"column":7}},"22":{"start":{"line":85,"column":6},"end":{"line":85,"column":28}},"23":{"start":{"line":86,"column":6},"end":{"line":86,"column":12}},"24":{"start":{"line":89,"column":4},"end":{"line":91,"column":5}},"25":{"start":{"line":90,"column":6},"end":{"line":90,"column":65}},"26":{"start":{"line":93,"column":4},"end":{"line":93,"column":28}},"27":{"start":{"line":97,"column":0},"end":{"line":97,"column":22}},"28":{"start":{"line":98,"column":0},"end":{"line":98,"column":26}}},"branchMap":{"1":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":6},"end":{"line":48,"column":6}},{"start":{"line":48,"column":6},"end":{"line":48,"column":6}}]},"2":{"line":70,"type":"cond-expr","locations":[{"start":{"line":70,"column":35},"end":{"line":70,"column":46}},{"start":{"line":70,"column":49},"end":{"line":70,"column":61}}]},"3":{"line":89,"type":"if","locations":[{"start":{"line":89,"column":4},"end":{"line":89,"column":4}},{"start":{"line":89,"column":4},"end":{"line":89,"column":4}}]}},"code":["'use strict';","","var size = require('../../utils/array').size;","var deepForEach = require('../../utils/collection/deepForEach');","var reduce = require('../../utils/collection/reduce');","var containsCollections = require('../../utils/collection/containsCollections');","","function factory (type, config, load, typed) {","  var add = load(require('../arithmetic/add'));","  var divide = load(require('../arithmetic/divide'));","","  /**","   * Compute the mean value of matrix or a list with values.","   * In case of a multi dimensional array, the mean of the flattened array","   * will be calculated. When `dim` is provided, the maximum over the selected","   * dimension will be calculated. Parameter `dim` is zero-based.","   *","   * Syntax:","   *","   *     math.mean(a, b, c, ...)","   *     math.mean(A)","   *     math.mean(A, dim)","   *","   * Examples:","   *","   *     math.mean(2, 1, 4, 3);                     // returns 2.5","   *     math.mean([1, 2.7, 3.2, 4]);               // returns 2.725","   *","   *     math.mean([[2, 5], [6, 3], [1, 7]], 0);    // returns [3, 5]","   *     math.mean([[2, 5], [6, 3], [1, 7]], 1);    // returns [3.5, 4.5, 4]","   *","   * See also:","   *","   *     median, min, max, sum, prod, std, var","   *","   * @param {... *} args  A single matrix or or multiple scalar values","   * @return {*} The mean of all values","   */","  var mean = typed('mean', {","      // mean([a, b, c, d, ...])","    'Array | Matrix': _mean,","","      // mean([a, b, c, d, ...], dim)","    'Array | Matrix, number | BigNumber': _nmean,","","    // mean(a, b, c, d, ...)","    '...': function (args) {","      if (containsCollections(args)) {","        throw new TypeError('Scalar values expected in function mean');","      }","","      return _mean(args);","    }","  });","","  mean.toTex = undefined; // use default template","","  return mean;","","  /**","   * Calculate the mean value in an n-dimensional array, returning a","   * n-1 dimensional array","   * @param {Array} array","   * @param {number} dim","   * @return {number} mean","   * @private","   */","  function _nmean(array, dim){","    var sum = reduce(array, dim, add);","    var s = Array.isArray(array) ? size(array) : array.size();","    return divide(sum, s[dim]);","  }","","  /**","   * Recursively calculate the mean value in an n-dimensional array","   * @param {Array} array","   * @return {number} mean","   * @private","   */","  function _mean(array) {","    var sum = 0;","    var num = 0;","","    deepForEach(array, function (value) {","      sum = add(sum, value);","      num++;","    });","","    if (num === 0) {","      throw new Error('Cannot calculate mean of an empty array');","    }","","    return divide(sum, num);","  }","}","","exports.name = 'mean';","exports.factory = factory;",""],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"9":0,"10":0,"39":0,"48":0,"49":0,"52":0,"56":0,"58":0,"68":1,"69":0,"70":0,"71":0,"80":1,"81":0,"82":0,"84":0,"85":0,"86":0,"89":0,"90":0,"93":0,"97":1,"98":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/statistics/median.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/statistics/median.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":1,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":1,"36":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"factory","line":7,"loc":{"start":{"line":7,"column":0},"end":{"line":7,"column":45}}},"2":{"name":"(anonymous_2)","line":44,"loc":{"start":{"line":44,"column":42},"end":{"line":44,"column":64}}},"3":{"name":"(anonymous_3)","line":51,"loc":{"start":{"line":51,"column":11},"end":{"line":51,"column":27}}},"4":{"name":"_median","line":67,"loc":{"start":{"line":67,"column":2},"end":{"line":67,"column":26}}},"5":{"name":"(anonymous_5)","line":100,"loc":{"start":{"line":100,"column":33},"end":{"line":100,"column":50}}},"6":{"name":"(anonymous_6)","line":107,"loc":{"start":{"line":107,"column":60},"end":{"line":107,"column":83}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":51}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":54}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":80}},"4":{"start":{"line":7,"column":0},"end":{"line":115,"column":1}},"5":{"start":{"line":8,"column":2},"end":{"line":8,"column":53}},"6":{"start":{"line":9,"column":2},"end":{"line":9,"column":59}},"7":{"start":{"line":10,"column":2},"end":{"line":10,"column":55}},"8":{"start":{"line":11,"column":2},"end":{"line":11,"column":67}},"9":{"start":{"line":39,"column":2},"end":{"line":58,"column":5}},"10":{"start":{"line":46,"column":6},"end":{"line":46,"column":61}},"11":{"start":{"line":52,"column":6},"end":{"line":54,"column":7}},"12":{"start":{"line":53,"column":10},"end":{"line":53,"column":75}},"13":{"start":{"line":56,"column":6},"end":{"line":56,"column":27}},"14":{"start":{"line":67,"column":2},"end":{"line":96,"column":3}},"15":{"start":{"line":68,"column":4},"end":{"line":68,"column":37}},"16":{"start":{"line":70,"column":4},"end":{"line":70,"column":27}},"17":{"start":{"line":71,"column":4},"end":{"line":73,"column":5}},"18":{"start":{"line":72,"column":6},"end":{"line":72,"column":67}},"19":{"start":{"line":75,"column":4},"end":{"line":95,"column":5}},"20":{"start":{"line":77,"column":6},"end":{"line":77,"column":28}},"21":{"start":{"line":78,"column":6},"end":{"line":78,"column":50}},"22":{"start":{"line":81,"column":6},"end":{"line":81,"column":28}},"23":{"start":{"line":82,"column":6},"end":{"line":86,"column":7}},"24":{"start":{"line":83,"column":8},"end":{"line":85,"column":9}},"25":{"start":{"line":84,"column":10},"end":{"line":84,"column":26}},"26":{"start":{"line":88,"column":6},"end":{"line":88,"column":34}},"27":{"start":{"line":92,"column":6},"end":{"line":92,"column":52}},"28":{"start":{"line":94,"column":6},"end":{"line":94,"column":23}},"29":{"start":{"line":99,"column":2},"end":{"line":103,"column":5}},"30":{"start":{"line":101,"column":6},"end":{"line":101,"column":19}},"31":{"start":{"line":106,"column":2},"end":{"line":110,"column":5}},"32":{"start":{"line":108,"column":6},"end":{"line":108,"column":41}},"33":{"start":{"line":112,"column":2},"end":{"line":112,"column":27}},"34":{"start":{"line":114,"column":2},"end":{"line":114,"column":16}},"35":{"start":{"line":117,"column":0},"end":{"line":117,"column":24}},"36":{"start":{"line":118,"column":0},"end":{"line":118,"column":26}}},"branchMap":{"1":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":6},"end":{"line":52,"column":6}},{"start":{"line":52,"column":6},"end":{"line":52,"column":6}}]},"2":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":4},"end":{"line":71,"column":4}},{"start":{"line":71,"column":4},"end":{"line":71,"column":4}}]},"3":{"line":75,"type":"if","locations":[{"start":{"line":75,"column":4},"end":{"line":75,"column":4}},{"start":{"line":75,"column":4},"end":{"line":75,"column":4}}]},"4":{"line":83,"type":"if","locations":[{"start":{"line":83,"column":8},"end":{"line":83,"column":8}},{"start":{"line":83,"column":8},"end":{"line":83,"column":8}}]}},"code":["'use strict';","","var flatten = require('../../utils/array').flatten;","var reduce = require('../../utils/collection/reduce');","var containsCollections = require('../../utils/collection/containsCollections');","","function factory (type, config, load, typed) {","  var add = load(require('../arithmetic/addScalar'));","  var divide = load(require('../arithmetic/divideScalar'));","  var compare = load(require('../relational/compare'));","  var partitionSelect = load(require('../matrix/partitionSelect'));","","  /**","   * Compute the median of a matrix or a list with values. The values are","   * sorted and the middle value is returned. In case of an even number of","   * values, the average of the two middle values is returned.","   * Supported types of values are: Number, BigNumber, Unit","   *","   * In case of a (multi dimensional) array or matrix, the median of all","   * elements will be calculated.","   *","   * Syntax:","   *","   *     math.median(a, b, c, ...)","   *     math.median(A)","   *","   * Examples:","   *","   *     math.median(5, 2, 7);        // returns 5","   *     math.median([3, -1, 5, 7]);  // returns 4","   *","   * See also:","   *","   *     mean, min, max, sum, prod, std, var, quantileSeq","   *","   * @param {... *} args  A single matrix or or multiple scalar values","   * @return {*} The median","   */","  var median = typed('median', {","    // median([a, b, c, d, ...])","    'Array | Matrix': _median,","","    // median([a, b, c, d, ...], dim)","    'Array | Matrix, number | BigNumber': function (array, dim) {","      // TODO: implement median(A, dim)","      throw new Error('median(A, dim) is not yet supported');","      //return reduce(arguments[0], arguments[1], ...);","    },","","    // median(a, b, c, d, ...)","    '...': function (args) {","      if (containsCollections(args)) {","          throw new TypeError('Scalar values expected in function median');","      }","","      return _median(args);","    }","  });","","","  /**","   * Recursively calculate the median of an n-dimensional array","   * @param {Array} array","   * @return {Number} median","   * @private","   */","  function _median(array) {","    array = flatten(array.valueOf());","","    var num = array.length;","    if (num == 0) {","      throw new Error('Cannot calculate median of an empty array');","    }","","    if (num % 2 == 0) {","      // even: return the average of the two middle values","      var mid = num / 2 - 1;","      var right = partitionSelect(array, mid + 1);","","      // array now partitioned at mid + 1, take max of left part","      var left = array[mid];","      for (var i = 0; i < mid; ++i) {","        if (compare(array[i], left) > 0) {","          left = array[i];","        }","      }","","      return middle2(left, right);","    }","    else {","      // odd: return the middle value","      var m = partitionSelect(array, (num - 1) / 2);","","      return middle(m);","    }","  }","","  // helper function to type check the middle value of the array","  var middle = typed({","    'number | BigNumber | Unit': function (value) {","      return value;","    }","  });","","  // helper function to type check the two middle value of the array","  var middle2 = typed({","    'number | BigNumber | Unit, number | BigNumber | Unit': function (left, right) {","      return divide(add(left, right), 2);","    }","  });","","  median.toTex = undefined; // use default template","","  return median;","}","","exports.name = 'median';","exports.factory = factory;",""],"l":{"3":1,"4":1,"5":1,"7":1,"8":0,"9":0,"10":0,"11":0,"39":0,"46":0,"52":0,"53":0,"56":0,"67":1,"68":0,"70":0,"71":0,"72":0,"75":0,"77":0,"78":0,"81":0,"82":0,"83":0,"84":0,"88":0,"92":0,"94":0,"99":0,"101":0,"106":0,"108":0,"112":0,"114":0,"117":1,"118":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/statistics/min.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/statistics/min.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1,"14":0,"15":1,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":1,"24":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"factory","line":7,"loc":{"start":{"line":7,"column":0},"end":{"line":7,"column":45}}},"2":{"name":"(anonymous_2)","line":46,"loc":{"start":{"line":46,"column":42},"end":{"line":46,"column":64}}},"3":{"name":"(anonymous_3)","line":51,"loc":{"start":{"line":51,"column":11},"end":{"line":51,"column":27}}},"4":{"name":"_smallest","line":71,"loc":{"start":{"line":71,"column":2},"end":{"line":71,"column":27}}},"5":{"name":"_min","line":81,"loc":{"start":{"line":81,"column":2},"end":{"line":81,"column":23}}},"6":{"name":"(anonymous_6)","line":84,"loc":{"start":{"line":84,"column":23},"end":{"line":84,"column":40}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":64}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":54}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":80}},"4":{"start":{"line":7,"column":0},"end":{"line":96,"column":1}},"5":{"start":{"line":8,"column":2},"end":{"line":8,"column":55}},"6":{"start":{"line":41,"column":2},"end":{"line":58,"column":5}},"7":{"start":{"line":47,"column":6},"end":{"line":47,"column":53}},"8":{"start":{"line":52,"column":6},"end":{"line":54,"column":7}},"9":{"start":{"line":53,"column":8},"end":{"line":53,"column":70}},"10":{"start":{"line":56,"column":6},"end":{"line":56,"column":24}},"11":{"start":{"line":60,"column":2},"end":{"line":60,"column":44}},"12":{"start":{"line":62,"column":2},"end":{"line":62,"column":13}},"13":{"start":{"line":71,"column":2},"end":{"line":73,"column":3}},"14":{"start":{"line":72,"column":4},"end":{"line":72,"column":33}},"15":{"start":{"line":81,"column":2},"end":{"line":95,"column":3}},"16":{"start":{"line":82,"column":4},"end":{"line":82,"column":24}},"17":{"start":{"line":84,"column":4},"end":{"line":88,"column":7}},"18":{"start":{"line":85,"column":6},"end":{"line":87,"column":7}},"19":{"start":{"line":86,"column":8},"end":{"line":86,"column":20}},"20":{"start":{"line":90,"column":4},"end":{"line":92,"column":5}},"21":{"start":{"line":91,"column":6},"end":{"line":91,"column":64}},"22":{"start":{"line":94,"column":4},"end":{"line":94,"column":15}},"23":{"start":{"line":98,"column":0},"end":{"line":98,"column":21}},"24":{"start":{"line":99,"column":0},"end":{"line":99,"column":26}}},"branchMap":{"1":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":6},"end":{"line":52,"column":6}},{"start":{"line":52,"column":6},"end":{"line":52,"column":6}}]},"2":{"line":72,"type":"cond-expr","locations":[{"start":{"line":72,"column":27},"end":{"line":72,"column":28}},{"start":{"line":72,"column":31},"end":{"line":72,"column":32}}]},"3":{"line":85,"type":"if","locations":[{"start":{"line":85,"column":6},"end":{"line":85,"column":6}},{"start":{"line":85,"column":6},"end":{"line":85,"column":6}}]},"4":{"line":85,"type":"binary-expr","locations":[{"start":{"line":85,"column":10},"end":{"line":85,"column":27}},{"start":{"line":85,"column":31},"end":{"line":85,"column":50}}]},"5":{"line":90,"type":"if","locations":[{"start":{"line":90,"column":4},"end":{"line":90,"column":4}},{"start":{"line":90,"column":4},"end":{"line":90,"column":4}}]}},"code":["'use strict';","","var deepForEach = require('../../utils/collection/deepForEach');","var reduce = require('../../utils/collection/reduce');","var containsCollections = require('../../utils/collection/containsCollections');","","function factory (type, config, load, typed) {","  var smaller = load(require('../relational/smaller'));","  ","  /**","   * Compute the maximum value of a matrix or a  list of values.","   * In case of a multi dimensional array, the maximum of the flattened array","   * will be calculated. When `dim` is provided, the maximum over the selected","   * dimension will be calculated. Parameter `dim` is zero-based.","   *","   * Syntax:","   *","   *     math.min(a, b, c, ...)","   *     math.min(A)","   *     math.min(A, dim)","   *","   * Examples:","   *","   *     math.min(2, 1, 4, 3);                  // returns 1","   *     math.min([2, 1, 4, 3]);                // returns 1","   *","   *     // maximum over a specified dimension (zero-based)","   *     math.min([[2, 5], [4, 3], [1, 7]], 0); // returns [1, 3]","   *     math.min([[2, 5], [4, 3], [1, 7]], 1); // returns [2, 3, 1]","   *","   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1);    // returns 7.1","   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1);    // returns -4.5","   *","   * See also:","   *","   *    mean, median, max, prod, std, sum, var","   *","   * @param {... *} args  A single matrix or or multiple scalar values","   * @return {*} The minimum value","   */","  var min = typed('min', {","    // min([a, b, c, d, ...])","    'Array | Matrix': _min,","","    // min([a, b, c, d, ...], dim)","    'Array | Matrix, number | BigNumber': function (array, dim) {","      return reduce(array, dim.valueOf(), _smallest);","    },","","    // min(a, b, c, d, ...)","    '...': function (args) {","      if (containsCollections(args)) {","        throw new TypeError('Scalar values expected in function min');","      }","","      return _min(args);","    }","  });","","  min.toTex = '\\\\min\\\\left(${args}\\\\right)';","","  return min;","","  /**","   * Return the smallest of two values","   * @param {*} x","   * @param {*} y","   * @returns {*} Returns x when x is smallest, or y when y is smallest","   * @private","   */","  function _smallest(x, y) {","    return smaller(x, y) ? x : y;","  }","","  /**","   * Recursively calculate the minimum value in an n-dimensional array","   * @param {Array} array","   * @return {number} min","   * @private","   */","  function _min(array) {","    var min = undefined;","","    deepForEach(array, function (value) {","      if (min === undefined || smaller(value, min)) {","        min = value;","      }","    });","","    if (min === undefined) {","      throw new Error('Cannot calculate min of an empty array');","    }","","    return min;","  }","}","","exports.name = 'min';","exports.factory = factory;",""],"l":{"3":1,"4":1,"5":1,"7":1,"8":0,"41":0,"47":0,"52":0,"53":0,"56":0,"60":0,"62":0,"71":1,"72":0,"81":1,"82":0,"84":0,"85":0,"86":0,"90":0,"91":0,"94":0,"98":1,"99":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/statistics/mode.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/statistics/mode.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":1,"23":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":36,"loc":{"start":{"line":36,"column":11},"end":{"line":36,"column":27}}},"3":{"name":"_mode","line":49,"loc":{"start":{"line":49,"column":2},"end":{"line":49,"column":25}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":51}},"2":{"start":{"line":5,"column":0},"end":{"line":74,"column":1}},"3":{"start":{"line":33,"column":2},"end":{"line":39,"column":5}},"4":{"start":{"line":37,"column":6},"end":{"line":37,"column":25}},"5":{"start":{"line":41,"column":2},"end":{"line":41,"column":14}},"6":{"start":{"line":49,"column":2},"end":{"line":73,"column":3}},"7":{"start":{"line":50,"column":4},"end":{"line":50,"column":39}},"8":{"start":{"line":51,"column":4},"end":{"line":51,"column":28}},"9":{"start":{"line":52,"column":4},"end":{"line":54,"column":5}},"10":{"start":{"line":53,"column":6},"end":{"line":53,"column":65}},"11":{"start":{"line":56,"column":4},"end":{"line":58,"column":16}},"12":{"start":{"line":59,"column":4},"end":{"line":71,"column":5}},"13":{"start":{"line":60,"column":6},"end":{"line":62,"column":7}},"14":{"start":{"line":61,"column":8},"end":{"line":61,"column":29}},"15":{"start":{"line":63,"column":6},"end":{"line":63,"column":25}},"16":{"start":{"line":64,"column":6},"end":{"line":70,"column":7}},"17":{"start":{"line":65,"column":8},"end":{"line":65,"column":29}},"18":{"start":{"line":67,"column":11},"end":{"line":70,"column":7}},"19":{"start":{"line":68,"column":8},"end":{"line":68,"column":31}},"20":{"start":{"line":69,"column":8},"end":{"line":69,"column":27}},"21":{"start":{"line":72,"column":4},"end":{"line":72,"column":16}},"22":{"start":{"line":76,"column":0},"end":{"line":76,"column":22}},"23":{"start":{"line":77,"column":0},"end":{"line":77,"column":26}}},"branchMap":{"1":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":4},"end":{"line":52,"column":4}},{"start":{"line":52,"column":4},"end":{"line":52,"column":4}}]},"2":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":6},"end":{"line":60,"column":6}},{"start":{"line":60,"column":6},"end":{"line":60,"column":6}}]},"3":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":6},"end":{"line":64,"column":6}},{"start":{"line":64,"column":6},"end":{"line":64,"column":6}}]},"4":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":11},"end":{"line":67,"column":11}},{"start":{"line":67,"column":11},"end":{"line":67,"column":11}}]}},"code":["'use strict';","","var flatten = require('../../utils/array').flatten;","","function factory (type, config, load, typed) {","","  /**","  * Computes the mode of a set of numbers or a list with values(numbers or characters).","  * If there are more than one modes, it returns a list of those values.","  *","  * Syntax:","  *","  *     math.mode(a, b, c, ...)","  *     math.mode(A)","  *","  * Examples:","  *","  *     math.mode(2, 1, 4, 3, 1);                            // returns [1]","  *     math.mode([1, 2.7, 3.2, 4, 2.7]);                    // returns [2.7]","  *     math.mode(1, 4, 6, 1, 6)                             // returns [1, 6]","  *     math.mode('a','a','b','c')                           // returns [\"a\"]","  *     math.mode(1, 1.5, 'abc')                             // returns [1, 1.5, \"abc\"]","  *","  * See also:","  *","  *     median,","  *     mean","  *","  * @param {... *} args  A single matrix","  * @return {*} The mode of all values","  */","","  var mode = typed('mode', {","    'Array | Matrix' : _mode,","    ","    '...': function (args) {","      return _mode(args);","    }","  });","  ","  return mode;","","  /**","   * Calculates the mode in an 1-dimensional array","   * @param {Array} values","   * @return {number} mode","   * @private","   */","  function _mode(values) {","    values = flatten(values.valueOf());","    var num = values.length;","    if (num == 0) {","      throw new Error('Cannot calculate mode of an empty array');","    }","    ","    var count = {},","        mode = [],","        max = 0;","    for (var i in values) {","      if (!(values[i] in count)){","        count[values[i]] = 0;","      }","      count[values[i]]++;","      if (count[values[i]] == max){","        mode.push(values[i]);","      }","      else if (count[values[i]] > max) {","        max = count[values[i]];","        mode = [values[i]];","      }","    }","    return mode; ","  };","}","","exports.name = 'mode';","exports.factory = factory;"],"l":{"3":1,"5":1,"33":0,"37":0,"41":0,"49":1,"50":0,"51":0,"52":0,"53":0,"56":0,"59":0,"60":0,"61":0,"63":0,"64":0,"65":0,"67":0,"68":0,"69":0,"72":0,"76":1,"77":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/statistics/prod.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/statistics/prod.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1,"17":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":38,"loc":{"start":{"line":38,"column":42},"end":{"line":38,"column":64}}},"3":{"name":"(anonymous_3)","line":45,"loc":{"start":{"line":45,"column":11},"end":{"line":45,"column":27}}},"4":{"name":"_prod","line":60,"loc":{"start":{"line":60,"column":2},"end":{"line":60,"column":24}}},"5":{"name":"(anonymous_5)","line":63,"loc":{"start":{"line":63,"column":23},"end":{"line":63,"column":40}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":64}},"2":{"start":{"line":5,"column":0},"end":{"line":73,"column":1}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":63}},"4":{"start":{"line":33,"column":2},"end":{"line":48,"column":5}},"5":{"start":{"line":40,"column":6},"end":{"line":40,"column":59}},"6":{"start":{"line":46,"column":6},"end":{"line":46,"column":25}},"7":{"start":{"line":50,"column":2},"end":{"line":50,"column":25}},"8":{"start":{"line":52,"column":2},"end":{"line":52,"column":14}},"9":{"start":{"line":60,"column":2},"end":{"line":72,"column":3}},"10":{"start":{"line":61,"column":4},"end":{"line":61,"column":25}},"11":{"start":{"line":63,"column":4},"end":{"line":65,"column":7}},"12":{"start":{"line":64,"column":6},"end":{"line":64,"column":66}},"13":{"start":{"line":67,"column":4},"end":{"line":69,"column":5}},"14":{"start":{"line":68,"column":6},"end":{"line":68,"column":65}},"15":{"start":{"line":71,"column":4},"end":{"line":71,"column":16}},"16":{"start":{"line":75,"column":0},"end":{"line":75,"column":22}},"17":{"start":{"line":76,"column":0},"end":{"line":76,"column":26}}},"branchMap":{"1":{"line":64,"type":"cond-expr","locations":[{"start":{"line":64,"column":36},"end":{"line":64,"column":41}},{"start":{"line":64,"column":44},"end":{"line":64,"column":65}}]},"2":{"line":67,"type":"if","locations":[{"start":{"line":67,"column":4},"end":{"line":67,"column":4}},{"start":{"line":67,"column":4},"end":{"line":67,"column":4}}]}},"code":["'use strict';","","var deepForEach = require('../../utils/collection/deepForEach');","","function factory (type, config, load, typed) {","  var multiply = load(require('../arithmetic/multiplyScalar'));","","  /**","   * Compute the product of a matrix or a list with values.","   * In case of a (multi dimensional) array or matrix, the sum of all","   * elements will be calculated.","   *","   * Syntax:","   *","   *     math.prod(a, b, c, ...)","   *     math.prod(A)","   *","   * Examples:","   *","   *     math.multiply(2, 3);           // returns 6","   *     math.prod(2, 3);               // returns 6","   *     math.prod(2, 3, 4);            // returns 24","   *     math.prod([2, 3, 4]);          // returns 24","   *     math.prod([[2, 5], [4, 3]]);   // returns 120","   *","   * See also:","   *","   *    mean, median, min, max, sum, std, var","   *","   * @param {... *} args  A single matrix or or multiple scalar values","   * @return {*} The product of all values","   */","  var prod = typed('prod', {","    // prod([a, b, c, d, ...])","    'Array | Matrix': _prod,","","    // prod([a, b, c, d, ...], dim)","    'Array | Matrix, number | BigNumber': function (array, dim) {","      // TODO: implement prod(A, dim)","      throw new Error('prod(A, dim) is not yet supported');","      //return reduce(arguments[0], arguments[1], math.prod);","    },","","    // prod(a, b, c, d, ...)","    '...': function (args) {","      return _prod(args);","    }","  });","","  prod.toTex = undefined; // use default template","","  return prod;","","  /**","   * Recursively calculate the product of an n-dimensional array","   * @param {Array} array","   * @return {number} prod","   * @private","   */","  function _prod(array) {","    var prod = undefined;","","    deepForEach(array, function (value) {","      prod = (prod === undefined) ? value : multiply(prod, value);","    });","","    if (prod === undefined) {","      throw new Error('Cannot calculate prod of an empty array');","    }","","    return prod;","  }","}","","exports.name = 'prod';","exports.factory = factory;",""],"l":{"3":1,"5":1,"6":0,"33":0,"40":0,"46":0,"50":0,"52":0,"60":1,"61":0,"63":0,"64":0,"67":0,"68":0,"71":0,"75":1,"76":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/statistics/quantileSeq.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/statistics/quantileSeq.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":1,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":1,"116":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"factory","line":8,"loc":{"start":{"line":8,"column":0},"end":{"line":8,"column":45}}},"2":{"name":"quantileSeq","line":48,"loc":{"start":{"line":48,"column":2},"end":{"line":48,"column":46}}},"3":{"name":"_quantileSeq","line":159,"loc":{"start":{"line":159,"column":2},"end":{"line":159,"column":45}}},"4":{"name":"(anonymous_4)","line":248,"loc":{"start":{"line":248,"column":33},"end":{"line":248,"column":46}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":54}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":51}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":66}},"5":{"start":{"line":8,"column":0},"end":{"line":254,"column":1}},"6":{"start":{"line":9,"column":2},"end":{"line":9,"column":47}},"7":{"start":{"line":10,"column":2},"end":{"line":10,"column":57}},"8":{"start":{"line":11,"column":2},"end":{"line":11,"column":67}},"9":{"start":{"line":12,"column":2},"end":{"line":12,"column":55}},"10":{"start":{"line":48,"column":2},"end":{"line":148,"column":3}},"11":{"start":{"line":49,"column":4},"end":{"line":49,"column":30}},"12":{"start":{"line":51,"column":4},"end":{"line":53,"column":5}},"13":{"start":{"line":52,"column":6},"end":{"line":52,"column":85}},"14":{"start":{"line":55,"column":4},"end":{"line":145,"column":5}},"15":{"start":{"line":56,"column":6},"end":{"line":56,"column":31}},"16":{"start":{"line":57,"column":6},"end":{"line":142,"column":7}},"17":{"start":{"line":58,"column":8},"end":{"line":58,"column":33}},"18":{"start":{"line":59,"column":8},"end":{"line":82,"column":9}},"19":{"start":{"line":60,"column":10},"end":{"line":62,"column":11}},"20":{"start":{"line":61,"column":12},"end":{"line":61,"column":59}},"21":{"start":{"line":64,"column":10},"end":{"line":67,"column":11}},"22":{"start":{"line":66,"column":12},"end":{"line":66,"column":58}},"23":{"start":{"line":69,"column":10},"end":{"line":81,"column":11}},"24":{"start":{"line":71,"column":12},"end":{"line":73,"column":13}},"25":{"start":{"line":72,"column":14},"end":{"line":72,"column":62}},"26":{"start":{"line":75,"column":12},"end":{"line":75,"column":39}},"27":{"start":{"line":76,"column":12},"end":{"line":76,"column":41}},"28":{"start":{"line":77,"column":12},"end":{"line":79,"column":13}},"29":{"start":{"line":78,"column":14},"end":{"line":78,"column":75}},"30":{"start":{"line":80,"column":12},"end":{"line":80,"column":27}},"31":{"start":{"line":84,"column":8},"end":{"line":116,"column":9}},"32":{"start":{"line":85,"column":10},"end":{"line":87,"column":11}},"33":{"start":{"line":86,"column":12},"end":{"line":86,"column":59}},"34":{"start":{"line":89,"column":10},"end":{"line":89,"column":43}},"35":{"start":{"line":91,"column":10},"end":{"line":94,"column":11}},"36":{"start":{"line":93,"column":12},"end":{"line":93,"column":58}},"37":{"start":{"line":96,"column":10},"end":{"line":115,"column":11}},"38":{"start":{"line":98,"column":12},"end":{"line":100,"column":13}},"39":{"start":{"line":99,"column":14},"end":{"line":99,"column":62}},"40":{"start":{"line":104,"column":12},"end":{"line":104,"column":42}},"41":{"start":{"line":105,"column":12},"end":{"line":107,"column":13}},"42":{"start":{"line":106,"column":14},"end":{"line":106,"column":115}},"43":{"start":{"line":109,"column":12},"end":{"line":109,"column":56}},"44":{"start":{"line":110,"column":12},"end":{"line":110,"column":38}},"45":{"start":{"line":111,"column":12},"end":{"line":113,"column":13}},"46":{"start":{"line":112,"column":14},"end":{"line":112,"column":96}},"47":{"start":{"line":114,"column":12},"end":{"line":114,"column":27}},"48":{"start":{"line":118,"column":8},"end":{"line":139,"column":9}},"49":{"start":{"line":120,"column":10},"end":{"line":120,"column":46}},"50":{"start":{"line":121,"column":10},"end":{"line":137,"column":11}},"51":{"start":{"line":122,"column":12},"end":{"line":122,"column":38}},"52":{"start":{"line":123,"column":12},"end":{"line":134,"column":13}},"53":{"start":{"line":124,"column":14},"end":{"line":126,"column":15}},"54":{"start":{"line":125,"column":16},"end":{"line":125,"column":82}},"55":{"start":{"line":127,"column":19},"end":{"line":134,"column":13}},"56":{"start":{"line":128,"column":14},"end":{"line":128,"column":48}},"57":{"start":{"line":129,"column":14},"end":{"line":131,"column":15}},"58":{"start":{"line":130,"column":16},"end":{"line":130,"column":82}},"59":{"start":{"line":133,"column":14},"end":{"line":133,"column":89}},"60":{"start":{"line":136,"column":12},"end":{"line":136,"column":65}},"61":{"start":{"line":138,"column":10},"end":{"line":138,"column":25}},"62":{"start":{"line":141,"column":8},"end":{"line":141,"column":83}},"63":{"start":{"line":144,"column":6},"end":{"line":144,"column":81}},"64":{"start":{"line":147,"column":4},"end":{"line":147,"column":79}},"65":{"start":{"line":159,"column":2},"end":{"line":239,"column":3}},"66":{"start":{"line":160,"column":4},"end":{"line":160,"column":30}},"67":{"start":{"line":161,"column":4},"end":{"line":161,"column":26}},"68":{"start":{"line":162,"column":4},"end":{"line":164,"column":5}},"69":{"start":{"line":163,"column":6},"end":{"line":163,"column":72}},"70":{"start":{"line":166,"column":4},"end":{"line":200,"column":5}},"71":{"start":{"line":167,"column":6},"end":{"line":167,"column":33}},"72":{"start":{"line":168,"column":6},"end":{"line":168,"column":31}},"73":{"start":{"line":169,"column":6},"end":{"line":175,"column":7}},"74":{"start":{"line":170,"column":8},"end":{"line":170,"column":72}},"75":{"start":{"line":172,"column":8},"end":{"line":172,"column":24}},"76":{"start":{"line":174,"column":8},"end":{"line":174,"column":21}},"77":{"start":{"line":177,"column":6},"end":{"line":177,"column":42}},"78":{"start":{"line":179,"column":6},"end":{"line":179,"column":22}},"79":{"start":{"line":180,"column":6},"end":{"line":193,"column":7}},"80":{"start":{"line":181,"column":8},"end":{"line":181,"column":33}},"81":{"start":{"line":182,"column":8},"end":{"line":182,"column":36}},"82":{"start":{"line":184,"column":8},"end":{"line":184,"column":53}},"83":{"start":{"line":187,"column":8},"end":{"line":187,"column":33}},"84":{"start":{"line":188,"column":8},"end":{"line":192,"column":9}},"85":{"start":{"line":189,"column":10},"end":{"line":191,"column":11}},"86":{"start":{"line":190,"column":12},"end":{"line":190,"column":27}},"87":{"start":{"line":195,"column":6},"end":{"line":195,"column":21}},"88":{"start":{"line":196,"column":6},"end":{"line":196,"column":22}},"89":{"start":{"line":199,"column":6},"end":{"line":199,"column":74}},"90":{"start":{"line":203,"column":4},"end":{"line":203,"column":34}},"91":{"start":{"line":204,"column":4},"end":{"line":211,"column":5}},"92":{"start":{"line":205,"column":6},"end":{"line":205,"column":31}},"93":{"start":{"line":206,"column":6},"end":{"line":206,"column":70}},"94":{"start":{"line":208,"column":6},"end":{"line":208,"column":22}},"95":{"start":{"line":210,"column":6},"end":{"line":210,"column":19}},"96":{"start":{"line":213,"column":4},"end":{"line":213,"column":36}},"97":{"start":{"line":214,"column":4},"end":{"line":214,"column":44}},"98":{"start":{"line":215,"column":4},"end":{"line":215,"column":51}},"99":{"start":{"line":217,"column":4},"end":{"line":217,"column":20}},"100":{"start":{"line":218,"column":4},"end":{"line":231,"column":5}},"101":{"start":{"line":219,"column":6},"end":{"line":219,"column":37}},"102":{"start":{"line":220,"column":6},"end":{"line":220,"column":40}},"103":{"start":{"line":222,"column":6},"end":{"line":222,"column":57}},"104":{"start":{"line":225,"column":6},"end":{"line":225,"column":37}},"105":{"start":{"line":226,"column":6},"end":{"line":230,"column":7}},"106":{"start":{"line":227,"column":8},"end":{"line":229,"column":9}},"107":{"start":{"line":228,"column":10},"end":{"line":228,"column":25}},"108":{"start":{"line":233,"column":4},"end":{"line":233,"column":19}},"109":{"start":{"line":234,"column":4},"end":{"line":234,"column":20}},"110":{"start":{"line":237,"column":4},"end":{"line":237,"column":42}},"111":{"start":{"line":238,"column":4},"end":{"line":238,"column":79}},"112":{"start":{"line":247,"column":2},"end":{"line":251,"column":5}},"113":{"start":{"line":249,"column":6},"end":{"line":249,"column":15}},"114":{"start":{"line":253,"column":2},"end":{"line":253,"column":21}},"115":{"start":{"line":256,"column":0},"end":{"line":256,"column":29}},"116":{"start":{"line":257,"column":0},"end":{"line":257,"column":26}}},"branchMap":{"1":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":4},"end":{"line":51,"column":4}},{"start":{"line":51,"column":4},"end":{"line":51,"column":4}}]},"2":{"line":51,"type":"binary-expr","locations":[{"start":{"line":51,"column":8},"end":{"line":51,"column":28}},{"start":{"line":51,"column":32},"end":{"line":51,"column":52}}]},"3":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":4},"end":{"line":55,"column":4}},{"start":{"line":55,"column":4},"end":{"line":55,"column":4}}]},"4":{"line":56,"type":"binary-expr","locations":[{"start":{"line":56,"column":15},"end":{"line":56,"column":21}},{"start":{"line":56,"column":25},"end":{"line":56,"column":30}}]},"5":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":6},"end":{"line":57,"column":6}},{"start":{"line":57,"column":6},"end":{"line":57,"column":6}}]},"6":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":8},"end":{"line":59,"column":8}},{"start":{"line":59,"column":8},"end":{"line":59,"column":8}}]},"7":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":10},"end":{"line":60,"column":10}},{"start":{"line":60,"column":10},"end":{"line":60,"column":10}}]},"8":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":10},"end":{"line":64,"column":10}},{"start":{"line":64,"column":10},"end":{"line":64,"column":10}}]},"9":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":10},"end":{"line":69,"column":10}},{"start":{"line":69,"column":10},"end":{"line":69,"column":10}}]},"10":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":12},"end":{"line":71,"column":12}},{"start":{"line":71,"column":12},"end":{"line":71,"column":12}}]},"11":{"line":84,"type":"if","locations":[{"start":{"line":84,"column":8},"end":{"line":84,"column":8}},{"start":{"line":84,"column":8},"end":{"line":84,"column":8}}]},"12":{"line":84,"type":"binary-expr","locations":[{"start":{"line":84,"column":12},"end":{"line":84,"column":19}},{"start":{"line":84,"column":23},"end":{"line":84,"column":42}}]},"13":{"line":85,"type":"if","locations":[{"start":{"line":85,"column":10},"end":{"line":85,"column":10}},{"start":{"line":85,"column":10},"end":{"line":85,"column":10}}]},"14":{"line":91,"type":"if","locations":[{"start":{"line":91,"column":10},"end":{"line":91,"column":10}},{"start":{"line":91,"column":10},"end":{"line":91,"column":10}}]},"15":{"line":96,"type":"if","locations":[{"start":{"line":96,"column":10},"end":{"line":96,"column":10}},{"start":{"line":96,"column":10},"end":{"line":96,"column":10}}]},"16":{"line":98,"type":"if","locations":[{"start":{"line":98,"column":12},"end":{"line":98,"column":12}},{"start":{"line":98,"column":12},"end":{"line":98,"column":12}}]},"17":{"line":105,"type":"if","locations":[{"start":{"line":105,"column":12},"end":{"line":105,"column":12}},{"start":{"line":105,"column":12},"end":{"line":105,"column":12}}]},"18":{"line":118,"type":"if","locations":[{"start":{"line":118,"column":8},"end":{"line":118,"column":8}},{"start":{"line":118,"column":8},"end":{"line":118,"column":8}}]},"19":{"line":123,"type":"if","locations":[{"start":{"line":123,"column":12},"end":{"line":123,"column":12}},{"start":{"line":123,"column":12},"end":{"line":123,"column":12}}]},"20":{"line":124,"type":"if","locations":[{"start":{"line":124,"column":14},"end":{"line":124,"column":14}},{"start":{"line":124,"column":14},"end":{"line":124,"column":14}}]},"21":{"line":124,"type":"binary-expr","locations":[{"start":{"line":124,"column":18},"end":{"line":124,"column":30}},{"start":{"line":124,"column":34},"end":{"line":124,"column":46}}]},"22":{"line":127,"type":"if","locations":[{"start":{"line":127,"column":19},"end":{"line":127,"column":19}},{"start":{"line":127,"column":19},"end":{"line":127,"column":19}}]},"23":{"line":127,"type":"binary-expr","locations":[{"start":{"line":127,"column":23},"end":{"line":127,"column":31}},{"start":{"line":127,"column":35},"end":{"line":127,"column":55}}]},"24":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":14},"end":{"line":129,"column":14}},{"start":{"line":129,"column":14},"end":{"line":129,"column":14}}]},"25":{"line":129,"type":"binary-expr","locations":[{"start":{"line":129,"column":18},"end":{"line":129,"column":39}},{"start":{"line":129,"column":43},"end":{"line":129,"column":59}}]},"26":{"line":162,"type":"if","locations":[{"start":{"line":162,"column":4},"end":{"line":162,"column":4}},{"start":{"line":162,"column":4},"end":{"line":162,"column":4}}]},"27":{"line":166,"type":"if","locations":[{"start":{"line":166,"column":4},"end":{"line":166,"column":4}},{"start":{"line":166,"column":4},"end":{"line":166,"column":4}}]},"28":{"line":169,"type":"if","locations":[{"start":{"line":169,"column":6},"end":{"line":169,"column":6}},{"start":{"line":169,"column":6},"end":{"line":169,"column":6}}]},"29":{"line":170,"type":"cond-expr","locations":[{"start":{"line":170,"column":29},"end":{"line":170,"column":40}},{"start":{"line":170,"column":43},"end":{"line":170,"column":71}}]},"30":{"line":180,"type":"if","locations":[{"start":{"line":180,"column":6},"end":{"line":180,"column":6}},{"start":{"line":180,"column":6},"end":{"line":180,"column":6}}]},"31":{"line":189,"type":"if","locations":[{"start":{"line":189,"column":10},"end":{"line":189,"column":10}},{"start":{"line":189,"column":10},"end":{"line":189,"column":10}}]},"32":{"line":204,"type":"if","locations":[{"start":{"line":204,"column":4},"end":{"line":204,"column":4}},{"start":{"line":204,"column":4},"end":{"line":204,"column":4}}]},"33":{"line":206,"type":"cond-expr","locations":[{"start":{"line":206,"column":27},"end":{"line":206,"column":38}},{"start":{"line":206,"column":41},"end":{"line":206,"column":69}}]},"34":{"line":218,"type":"if","locations":[{"start":{"line":218,"column":4},"end":{"line":218,"column":4}},{"start":{"line":218,"column":4},"end":{"line":218,"column":4}}]},"35":{"line":227,"type":"if","locations":[{"start":{"line":227,"column":8},"end":{"line":227,"column":8}},{"start":{"line":227,"column":8},"end":{"line":227,"column":8}}]}},"code":["'use strict';","","var isInteger = require('../../utils/number').isInteger;","var isNumber = require('../../utils/number').isNumber;","var flatten = require('../../utils/array').flatten;","var isCollection = require('../../utils/collection/isCollection');","","function factory (type, config, load, typed) {","  var add = load(require('../arithmetic/add'));","  var multiply = load(require('../arithmetic/multiply'));","  var partitionSelect = load(require('../matrix/partitionSelect'));","  var compare = load(require('../relational/compare'));","","  /**","   * Compute the prob order quantile of a matrix or a list with values.","   * The sequence is sorted and the middle value is returned.","   * Supported types of sequence values are: Number, BigNumber, Unit","   * Supported types of probability are: Number, BigNumber","   *","   * In case of a (multi dimensional) array or matrix, the prob order quantile","   * of all elements will be calculated.","   *","   * Syntax:","   *","   *     math.quantileSeq(A, prob[, sorted])","   *     math.quantileSeq(A, [prob1, prob2, ...][, sorted])","   *     math.quantileSeq(A, N[, sorted])","   *","   * Examples:","   *","   *     math.quantileSeq([3, -1, 5, 7], 0.5);         // returns 4","   *     math.quantileSeq([3, -1, 5, 7], [1/3, 2/3]);  // returns [3, 5]","   *     math.quantileSeq([3, -1, 5, 7], 2);           // returns [3, 5]","   *     math.quantileSeq([-1, 3, 5, 7], 0.5, true);   // returns 4","   *","   * See also:","   *","   *     median, mean, min, max, sum, prod, std, var","   *","   * @param {Array, Matrix} data                A single matrix or Array","   * @param {Number, BigNumber, Array} probOrN  prob is the order of the quantile, while N is","   *                                            the amount of evenly distributed steps of","   *                                            probabilities; only one of these options can","   *                                            be provided","   * @param {Boolean} sorted=false              is data sorted in ascending order","   * @return {Number, BigNumber, Unit, Array}   Quantile(s)","   */","  function quantileSeq(data, probOrN, sorted) {","    var probArr, dataArr, one;","","    if (arguments.length < 2 || arguments.length > 3) {","      throw new SyntaxError('Function quantileSeq requires two or three parameters');","    }","","    if (isCollection(data)) {","      sorted = sorted || false;","      if (typeof sorted === 'boolean') {","        dataArr = data.valueOf();","        if (isNumber(probOrN)) {","          if (probOrN < 0) {","            throw new Error('N/prob must be non-negative');","          }","","          if (probOrN <= 1) {","            // quantileSeq([a, b, c, d, ...], prob[,sorted])","            return _quantileSeq(dataArr, probOrN, sorted);","          }","","          if (probOrN > 1) {","            // quantileSeq([a, b, c, d, ...], N[,sorted])","            if (!isInteger(probOrN)) {","              throw new Error('N must be a positive integer');","            }","","            var nPlusOne = probOrN + 1;","            probArr = new Array(probOrN);","            for (var i = 0; i < probOrN;) {","              probArr[i] = _quantileSeq(dataArr, (++i) / nPlusOne, sorted);","            }","            return probArr;","          }","        }","","        if (probOrN && probOrN.isBigNumber) {","          if (probOrN.isNegative()) {","            throw new Error('N/prob must be non-negative');","          }","","          one = new probOrN.constructor(1);","","          if (probOrN.lte(one)) {","            // quantileSeq([a, b, c, d, ...], prob[,sorted])","            return _quantileSeq(dataArr, probOrN, sorted);","          }","","          if (probOrN.gt(one)) {","            // quantileSeq([a, b, c, d, ...], N[,sorted])","            if (!probOrN.isInteger()) {","              throw new Error('N must be a positive integer');","            }","","            // largest possible Array length is 2^32-1;","            // 2^32 < 10^15, thus safe conversion guaranteed","            var intN = probOrN.toNumber();","            if (intN > 4294967295) {","              throw new Error('N must be less than or equal to 2^32-1, as that is the maximum length of an Array');","            }","","            var nPlusOne = new type.BigNumber(intN + 1);","            probArr = new Array(intN);","            for (var i = 0; i < intN;) {","              probArr[i] = _quantileSeq(dataArr, new type.BigNumber(++i).div(nPlusOne), sorted);","            }","            return probArr;","          }","        }","","        if (Array.isArray(probOrN)) {","          // quantileSeq([a, b, c, d, ...], [prob1, prob2, ...][,sorted])","          probArr = new Array(probOrN.length);","          for (var i = 0; i < probArr.length; ++i) {","            var currProb = probOrN[i];","            if (isNumber(currProb)) {","              if (currProb < 0 || currProb > 1) {","                throw new Error('Probability must be between 0 and 1, inclusive');","              }","            } else if (currProb && currProb.isBigNumber) {","              one = new currProb.constructor(1);","              if (currProb.isNegative() || currProb.gt(one)) {","                throw new Error('Probability must be between 0 and 1, inclusive');","              }","            } else {","              throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function","            }","","            probArr[i] = _quantileSeq(dataArr, currProb, sorted);","          }","          return probArr;","        }","","        throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function","      }","","      throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function","    }","","    throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function","  }","","  /**","   * Calculate the prob order quantile of an n-dimensional array.","   * ","   * @param {Array} array","   * @param {Number, BigNumber} prob","   * @param {Boolean} sorted","   * @return {Number, BigNumber, Unit} prob order quantile","   * @private","   */","  function _quantileSeq(array, prob, sorted) {","    var flat = flatten(array);","    var len = flat.length;","    if (len === 0) {","      throw new Error('Cannot calculate quantile of an empty sequence');","    }","","    if (isNumber(prob)) {","      var index = prob * (len-1);","      var fracPart = index % 1;","      if (fracPart === 0) {","        var value = sorted ? flat[index] : partitionSelect(flat, index);","","        validate(value);","","        return value;","      }","","      var integerPart = Math.floor(index);","","      var left, right;","      if (sorted) {","        left = flat[integerPart];","        right = flat[integerPart+1];","      } else {","        right = partitionSelect(flat, integerPart+1);","","        // max of partition is kth largest","        left = flat[integerPart];","        for (var i = 0; i < integerPart; ++i) {","          if (compare(flat[i], left) > 0) {","            left = flat[i];","          }","        }","      }","","      validate(left);","      validate(right);","","      // Q(prob) = (1-f)*A[floor(index)] + f*A[floor(index)+1]","      return add(multiply(left, 1 - fracPart), multiply(right, fracPart));","    }","","    // If prob is a BigNumber","    var index = prob.times(len-1);","    if (index.isInteger()) {","      index = index.toNumber();","      var value = sorted ? flat[index] : partitionSelect(flat, index);","","      validate(value);","","      return value;","    }","","    var integerPart = index.floor();","    var fracPart = index.minus(integerPart);","    var integerPartNumber = integerPart.toNumber();","","    var left, right;","    if (sorted) {","      left = flat[integerPartNumber];","      right = flat[integerPartNumber+1];","    } else {","      right = partitionSelect(flat, integerPartNumber+1);","","      // max of partition is kth largest","      left = flat[integerPartNumber];","      for (var i = 0; i < integerPartNumber; ++i) {","        if (compare(flat[i], left) > 0) {","          left = flat[i];","        }","      }","    }","","    validate(left);","    validate(right);","","    // Q(prob) = (1-f)*A[floor(index)] + f*A[floor(index)+1]","    var one = new fracPart.constructor(1);","    return add(multiply(left, one.minus(fracPart)), multiply(right, fracPart));","  }","","  /**","   * Check if array value types are valid, throw error otherwise.","   * @param {number | BigNumber | Unit} x","   * @param {number | BigNumber | Unit} x","   * @private","   */","  var validate = typed({","    'number | BigNumber | Unit': function (x) {","      return x;","    }","  });","","  return quantileSeq;","}","","exports.name = 'quantileSeq';","exports.factory = factory;",""],"l":{"3":1,"4":1,"5":1,"6":1,"8":1,"9":0,"10":0,"11":0,"12":0,"48":1,"49":0,"51":0,"52":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"64":0,"66":0,"69":0,"71":0,"72":0,"75":0,"76":0,"77":0,"78":0,"80":0,"84":0,"85":0,"86":0,"89":0,"91":0,"93":0,"96":0,"98":0,"99":0,"104":0,"105":0,"106":0,"109":0,"110":0,"111":0,"112":0,"114":0,"118":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"127":0,"128":0,"129":0,"130":0,"133":0,"136":0,"138":0,"141":0,"144":0,"147":0,"159":1,"160":0,"161":0,"162":0,"163":0,"166":0,"167":0,"168":0,"169":0,"170":0,"172":0,"174":0,"177":0,"179":0,"180":0,"181":0,"182":0,"184":0,"187":0,"188":0,"189":0,"190":0,"195":0,"196":0,"199":0,"203":0,"204":0,"205":0,"206":0,"208":0,"210":0,"213":0,"214":0,"215":0,"217":0,"218":0,"219":0,"220":0,"222":0,"225":0,"226":0,"227":0,"228":0,"233":0,"234":0,"237":0,"238":0,"247":0,"249":0,"253":0,"256":1,"257":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/statistics/std.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/statistics/std.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":1,"9":0,"10":0,"11":0,"12":1,"13":1},"b":{"1":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"factory","line":3,"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}}},"2":{"name":"(anonymous_2)","line":55,"loc":{"start":{"line":55,"column":11},"end":{"line":55,"column":27}}},"3":{"name":"_std","line":64,"loc":{"start":{"line":64,"column":2},"end":{"line":64,"column":38}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":71,"column":1}},"2":{"start":{"line":4,"column":2},"end":{"line":4,"column":55}},"3":{"start":{"line":5,"column":2},"end":{"line":5,"column":54}},"4":{"start":{"line":47,"column":2},"end":{"line":58,"column":5}},"5":{"start":{"line":56,"column":6},"end":{"line":56,"column":24}},"6":{"start":{"line":60,"column":2},"end":{"line":60,"column":24}},"7":{"start":{"line":62,"column":2},"end":{"line":62,"column":13}},"8":{"start":{"line":64,"column":2},"end":{"line":70,"column":3}},"9":{"start":{"line":65,"column":4},"end":{"line":67,"column":5}},"10":{"start":{"line":66,"column":6},"end":{"line":66,"column":89}},"11":{"start":{"line":69,"column":4},"end":{"line":69,"column":49}},"12":{"start":{"line":73,"column":0},"end":{"line":73,"column":21}},"13":{"start":{"line":74,"column":0},"end":{"line":74,"column":26}}},"branchMap":{"1":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":4},"end":{"line":65,"column":4}},{"start":{"line":65,"column":4},"end":{"line":65,"column":4}}]}},"code":["'use strict';","","function factory (type, config, load, typed) {","  var sqrt       = load(require('../arithmetic/sqrt'));","  var variance   = load(require('../statistics/var'));","","  /**","   * Compute the standard deviation of a matrix or a  list with values.","   * The standard deviations is defined as the square root of the variance:","   * `std(A) = sqrt(var(A))`.","   * In case of a (multi dimensional) array or matrix, the standard deviation","   * over all elements will be calculated.","   *","   * Optionally, the type of normalization can be specified as second","   * parameter. The parameter `normalization` can be one of the following values:","   *","   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)","   * - 'uncorrected'        The sum of squared errors is divided by n","   * - 'biased'             The sum of squared errors is divided by (n + 1)","   *","   * Syntax:","   *","   *     math.std(a, b, c, ...)","   *     math.std(A)","   *     math.std(A, normalization)","   *","   * Examples:","   *","   *     math.std(2, 4, 6);                     // returns 2","   *     math.std([2, 4, 6, 8]);                // returns 2.581988897471611","   *     math.std([2, 4, 6, 8], 'uncorrected'); // returns 2.23606797749979","   *     math.std([2, 4, 6, 8], 'biased');      // returns 2","   *","   *     math.std([[1, 2, 3], [4, 5, 6]]);      // returns 1.8708286933869707","   *","   * See also:","   *","   *    mean, median, max, min, prod, sum, var","   *","   * @param {Array | Matrix} array","   *                        A single matrix or or multiple scalar values","   * @param {string} [normalization='unbiased']","   *                        Determines how to normalize the variance.","   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.","   * @return {*} The standard deviation","   */","  var std = typed('std', {","    // std([a, b, c, d, ...])","    'Array | Matrix': _std,","","    // std([a, b, c, d, ...], normalization)","    'Array | Matrix, string': _std,","","    // std(a, b, c, d, ...)","    '...': function (args) {","      return _std(args);","    }","  });","  ","  std.toTex = undefined; // use default template","","  return std;","","  function _std(array, normalization) {","    if (array.length == 0) {","      throw new SyntaxError('Function std requires one or more parameters (0 provided)');","    }","","    return sqrt(variance.apply(null, arguments));","  }","}","","exports.name = 'std';","exports.factory = factory;",""],"l":{"3":1,"4":0,"5":0,"47":0,"56":0,"60":0,"62":0,"64":1,"65":0,"66":0,"69":0,"73":1,"74":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/statistics/sum.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/statistics/sum.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":1,"22":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":32,"loc":{"start":{"line":32,"column":22},"end":{"line":32,"column":38}}},"3":{"name":"(anonymous_3)","line":37,"loc":{"start":{"line":37,"column":42},"end":{"line":37,"column":54}}},"4":{"name":"(anonymous_4)","line":43,"loc":{"start":{"line":43,"column":11},"end":{"line":43,"column":27}}},"5":{"name":"_sum","line":59,"loc":{"start":{"line":59,"column":2},"end":{"line":59,"column":23}}},"6":{"name":"(anonymous_6)","line":62,"loc":{"start":{"line":62,"column":23},"end":{"line":62,"column":40}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":64}},"2":{"start":{"line":5,"column":0},"end":{"line":81,"column":1}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":53}},"4":{"start":{"line":31,"column":2},"end":{"line":47,"column":5}},"5":{"start":{"line":34,"column":6},"end":{"line":34,"column":24}},"6":{"start":{"line":40,"column":6},"end":{"line":40,"column":58}},"7":{"start":{"line":45,"column":6},"end":{"line":45,"column":24}},"8":{"start":{"line":49,"column":2},"end":{"line":49,"column":24}},"9":{"start":{"line":51,"column":2},"end":{"line":51,"column":13}},"10":{"start":{"line":59,"column":2},"end":{"line":80,"column":3}},"11":{"start":{"line":60,"column":4},"end":{"line":60,"column":24}},"12":{"start":{"line":62,"column":4},"end":{"line":64,"column":7}},"13":{"start":{"line":63,"column":6},"end":{"line":63,"column":58}},"14":{"start":{"line":66,"column":4},"end":{"line":77,"column":5}},"15":{"start":{"line":67,"column":6},"end":{"line":76,"column":7}},"16":{"start":{"line":69,"column":10},"end":{"line":69,"column":19}},"17":{"start":{"line":71,"column":10},"end":{"line":71,"column":39}},"18":{"start":{"line":73,"column":10},"end":{"line":73,"column":38}},"19":{"start":{"line":75,"column":10},"end":{"line":75,"column":19}},"20":{"start":{"line":79,"column":4},"end":{"line":79,"column":15}},"21":{"start":{"line":83,"column":0},"end":{"line":83,"column":21}},"22":{"start":{"line":84,"column":0},"end":{"line":84,"column":26}}},"branchMap":{"1":{"line":63,"type":"cond-expr","locations":[{"start":{"line":63,"column":34},"end":{"line":63,"column":39}},{"start":{"line":63,"column":42},"end":{"line":63,"column":57}}]},"2":{"line":66,"type":"if","locations":[{"start":{"line":66,"column":4},"end":{"line":66,"column":4}},{"start":{"line":66,"column":4},"end":{"line":66,"column":4}}]},"3":{"line":67,"type":"switch","locations":[{"start":{"line":68,"column":8},"end":{"line":69,"column":19}},{"start":{"line":70,"column":8},"end":{"line":71,"column":39}},{"start":{"line":72,"column":8},"end":{"line":73,"column":38}},{"start":{"line":74,"column":8},"end":{"line":75,"column":19}}]}},"code":["'use strict';","","var deepForEach = require('../../utils/collection/deepForEach');","","function factory (type, config, load, typed) {","  var add = load(require('../arithmetic/addScalar'));","","  /**","   * Compute the sum of a matrix or a list with values.","   * In case of a (multi dimensional) array or matrix, the sum of all","   * elements will be calculated.","   *","   * Syntax:","   *","   *     math.sum(a, b, c, ...)","   *     math.sum(A)","   *","   * Examples:","   *","   *     math.sum(2, 1, 4, 3);               // returns 10","   *     math.sum([2, 1, 4, 3]);             // returns 10","   *     math.sum([[2, 5], [4, 3], [1, 7]]); // returns 22","   *","   * See also:","   *","   *    mean, median, min, max, prod, std, var","   *","   * @param {... *} args  A single matrix or or multiple scalar values","   * @return {*} The sum of all values","   */","  var sum = typed('sum', {","    'Array | Matrix': function (args) {","      // sum([a, b, c, d, ...])","      return _sum(args);","    },","","    'Array | Matrix, number | BigNumber': function () {","      // sum([a, b, c, d, ...], dim)","      // TODO: implement sum(A, dim)","      throw new Error('sum(A, dim) is not yet supported');","    },","","    '...': function (args) {","      // sum(a, b, c, d, ...)","      return _sum(args);","    }","  });","","  sum.toTex = undefined; // use default template","","  return sum;","","  /**","   * Recursively calculate the sum of an n-dimensional array","   * @param {Array} array","   * @return {number} sum","   * @private","   */","  function _sum(array) {","    var sum = undefined;","","    deepForEach(array, function (value) {","      sum = (sum === undefined) ? value : add(sum, value);","    });","","    if (sum === undefined) {","      switch (config.number) {","        case 'number':","          return 0;","        case 'BigNumber':","          return new type.BigNumber(0);","        case 'Fraction':","          return new type.Fraction(0);","        default:","          return 0;","      }","    }","","    return sum;","  }","}","","exports.name = 'sum';","exports.factory = factory;",""],"l":{"3":1,"5":1,"6":0,"31":0,"34":0,"40":0,"45":0,"49":0,"51":0,"59":1,"60":0,"62":0,"63":0,"66":0,"67":0,"69":0,"71":0,"73":0,"75":0,"79":0,"83":1,"84":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/statistics/var.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/statistics/var.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":1,"35":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"factory","line":7,"loc":{"start":{"line":7,"column":0},"end":{"line":7,"column":45}}},"2":{"name":"(anonymous_2)","line":57,"loc":{"start":{"line":57,"column":22},"end":{"line":57,"column":39}}},"3":{"name":"(anonymous_3)","line":65,"loc":{"start":{"line":65,"column":11},"end":{"line":65,"column":27}}},"4":{"name":"_var","line":85,"loc":{"start":{"line":85,"column":2},"end":{"line":85,"column":38}}},"5":{"name":"(anonymous_5)","line":94,"loc":{"start":{"line":94,"column":23},"end":{"line":94,"column":40}}},"6":{"name":"(anonymous_6)","line":104,"loc":{"start":{"line":104,"column":23},"end":{"line":104,"column":40}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":39}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":64}},"3":{"start":{"line":7,"column":0},"end":{"line":125,"column":1}},"4":{"start":{"line":8,"column":2},"end":{"line":8,"column":53}},"5":{"start":{"line":9,"column":2},"end":{"line":9,"column":57}},"6":{"start":{"line":10,"column":2},"end":{"line":10,"column":63}},"7":{"start":{"line":11,"column":2},"end":{"line":11,"column":59}},"8":{"start":{"line":55,"column":2},"end":{"line":68,"column":5}},"9":{"start":{"line":58,"column":6},"end":{"line":58,"column":48}},"10":{"start":{"line":66,"column":6},"end":{"line":66,"column":47}},"11":{"start":{"line":70,"column":2},"end":{"line":70,"column":57}},"12":{"start":{"line":72,"column":2},"end":{"line":72,"column":18}},"13":{"start":{"line":85,"column":2},"end":{"line":124,"column":3}},"14":{"start":{"line":86,"column":4},"end":{"line":86,"column":16}},"15":{"start":{"line":87,"column":4},"end":{"line":87,"column":16}},"16":{"start":{"line":89,"column":4},"end":{"line":91,"column":5}},"17":{"start":{"line":90,"column":6},"end":{"line":90,"column":89}},"18":{"start":{"line":94,"column":4},"end":{"line":97,"column":7}},"19":{"start":{"line":95,"column":6},"end":{"line":95,"column":28}},"20":{"start":{"line":96,"column":6},"end":{"line":96,"column":12}},"21":{"start":{"line":98,"column":4},"end":{"line":98,"column":77}},"22":{"start":{"line":98,"column":19},"end":{"line":98,"column":77}},"23":{"start":{"line":100,"column":4},"end":{"line":100,"column":32}},"24":{"start":{"line":103,"column":4},"end":{"line":103,"column":12}},"25":{"start":{"line":104,"column":4},"end":{"line":107,"column":7}},"26":{"start":{"line":105,"column":6},"end":{"line":105,"column":39}},"27":{"start":{"line":106,"column":6},"end":{"line":106,"column":43}},"28":{"start":{"line":109,"column":4},"end":{"line":123,"column":5}},"29":{"start":{"line":111,"column":8},"end":{"line":111,"column":32}},"30":{"start":{"line":114,"column":8},"end":{"line":114,"column":36}},"31":{"start":{"line":117,"column":8},"end":{"line":117,"column":81}},"32":{"start":{"line":118,"column":8},"end":{"line":118,"column":56}},"33":{"start":{"line":121,"column":8},"end":{"line":122,"column":68}},"34":{"start":{"line":127,"column":0},"end":{"line":127,"column":21}},"35":{"start":{"line":128,"column":0},"end":{"line":128,"column":26}}},"branchMap":{"1":{"line":89,"type":"if","locations":[{"start":{"line":89,"column":4},"end":{"line":89,"column":4}},{"start":{"line":89,"column":4},"end":{"line":89,"column":4}}]},"2":{"line":98,"type":"if","locations":[{"start":{"line":98,"column":4},"end":{"line":98,"column":4}},{"start":{"line":98,"column":4},"end":{"line":98,"column":4}}]},"3":{"line":109,"type":"switch","locations":[{"start":{"line":110,"column":6},"end":{"line":111,"column":32}},{"start":{"line":113,"column":6},"end":{"line":114,"column":36}},{"start":{"line":116,"column":6},"end":{"line":118,"column":56}},{"start":{"line":120,"column":6},"end":{"line":122,"column":68}}]},"4":{"line":117,"type":"cond-expr","locations":[{"start":{"line":117,"column":55},"end":{"line":117,"column":76}},{"start":{"line":117,"column":79},"end":{"line":117,"column":80}}]},"5":{"line":117,"type":"binary-expr","locations":[{"start":{"line":117,"column":20},"end":{"line":117,"column":23}},{"start":{"line":117,"column":27},"end":{"line":117,"column":51}}]},"6":{"line":118,"type":"cond-expr","locations":[{"start":{"line":118,"column":28},"end":{"line":118,"column":32}},{"start":{"line":118,"column":35},"end":{"line":118,"column":55}}]}},"code":["'use strict';","","var DEFAULT_NORMALIZATION = 'unbiased';","","var deepForEach = require('../../utils/collection/deepForEach');","","function factory (type, config, load, typed) {","  var add = load(require('../arithmetic/addScalar'));","  var subtract = load(require('../arithmetic/subtract'));","  var multiply = load(require('../arithmetic/multiplyScalar'));","  var divide = load(require('../arithmetic/divideScalar'));","","  /**","   * Compute the variance of a matrix or a  list with values.","   * In case of a (multi dimensional) array or matrix, the variance over all","   * elements will be calculated.","   *","   * Optionally, the type of normalization can be specified as second","   * parameter. The parameter `normalization` can be one of the following values:","   *","   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)","   * - 'uncorrected'        The sum of squared errors is divided by n","   * - 'biased'             The sum of squared errors is divided by (n + 1)","   *","   * Note that older browser may not like the variable name `var`. In that","   * case, the function can be called as `math['var'](...)` instead of","   * `math.var(...)`.","   *","   * Syntax:","   *","   *     math.var(a, b, c, ...)","   *     math.var(A)","   *     math.var(A, normalization)","   *","   * Examples:","   *","   *     math.var(2, 4, 6);                     // returns 4","   *     math.var([2, 4, 6, 8]);                // returns 6.666666666666667","   *     math.var([2, 4, 6, 8], 'uncorrected'); // returns 5","   *     math.var([2, 4, 6, 8], 'biased');      // returns 4","   *","   *     math.var([[1, 2, 3], [4, 5, 6]]);      // returns 3.5","   *","   * See also:","   *","   *    mean, median, max, min, prod, std, sum","   *","   * @param {Array | Matrix} array","   *                        A single matrix or or multiple scalar values","   * @param {string} [normalization='unbiased']","   *                        Determines how to normalize the variance.","   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.","   * @return {*} The variance","   */","  var variance = typed('variance', {","    // var([a, b, c, d, ...])","    'Array | Matrix': function (array) {","      return _var(array, DEFAULT_NORMALIZATION);","    },","","    // var([a, b, c, d, ...], normalization)","    'Array | Matrix, string': _var,","","    // var(a, b, c, d, ...)","    '...': function (args) {","      return _var(args, DEFAULT_NORMALIZATION);","    }","  });","","  variance.toTex = '\\\\mathrm{Var}\\\\left(${args}\\\\right)';","","  return variance;","","  /**","   * Recursively calculate the variance of an n-dimensional array","   * @param {Array} array","   * @param {string} normalization","   *                        Determines how to normalize the variance:","   *                        - 'unbiased'    The sum of squared errors is divided by (n - 1)","   *                        - 'uncorrected' The sum of squared errors is divided by n","   *                        - 'biased'      The sum of squared errors is divided by (n + 1)","   * @return {number | BigNumber} variance","   * @private","   */","  function _var(array, normalization) {","    var sum = 0;","    var num = 0;","","    if (array.length == 0) {","      throw new SyntaxError('Function var requires one or more parameters (0 provided)');","    }","","    // calculate the mean and number of elements","    deepForEach(array, function (value) {","      sum = add(sum, value);","      num++;","    });","    if (num === 0) throw new Error('Cannot calculate var of an empty array');","","    var mean = divide(sum, num);","","    // calculate the variance","    sum = 0;","    deepForEach(array, function (value) {","      var diff = subtract(value, mean);","      sum = add(sum, multiply(diff, diff));","    });","","    switch (normalization) {","      case 'uncorrected':","        return divide(sum, num);","","      case 'biased':","        return divide(sum, num + 1);","","      case 'unbiased':","        var zero = (sum && sum.isBigNumber === true) ? new type.BigNumber(0) : 0;","        return (num == 1) ? zero : divide(sum, num - 1);","","      default:","        throw new Error('Unknown normalization \"' + normalization + '\". ' +","        'Choose \"unbiased\" (default), \"uncorrected\", or \"biased\".');","    }","  }","}","","exports.name = 'var';","exports.factory = factory;",""],"l":{"3":1,"5":1,"7":1,"8":0,"9":0,"10":0,"11":0,"55":0,"58":0,"66":0,"70":0,"72":0,"85":1,"86":0,"87":0,"89":0,"90":0,"94":0,"95":0,"96":0,"98":0,"100":0,"103":0,"104":0,"105":0,"106":0,"109":0,"111":0,"114":0,"117":0,"118":0,"121":0,"127":1,"128":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/string/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/string/index.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":4,"column":2}}},"branchMap":{},"code":["module.exports = [","  require('./format'),","  require('./print')","];",""],"l":{"1":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/string/format.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/string/format.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1,"7":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":43}},"2":{"start":{"line":5,"column":0},"end":{"line":111,"column":1}},"3":{"start":{"line":103,"column":2},"end":{"line":106,"column":5}},"4":{"start":{"line":108,"column":2},"end":{"line":108,"column":27}},"5":{"start":{"line":110,"column":2},"end":{"line":110,"column":16}},"6":{"start":{"line":113,"column":0},"end":{"line":113,"column":24}},"7":{"start":{"line":114,"column":0},"end":{"line":114,"column":26}}},"branchMap":{},"code":["'use strict';","","var string = require('../../utils/string');","","function factory (type, config, load, typed) {","  /**","   * Format a value of any type into a string.","   *","   * Syntax:","   *","   *    math.format(value)","   *    math.format(value, options)","   *    math.format(value, precision)","   *    math.format(value, callback)","   *","   * Where:","   *","   *  - `value: *`","   *    The value to be formatted","   *  - `options: Object`","   *    An object with formatting options. Available options:","   *    - `notation: string`","   *      Number notation. Choose from:","   *      - 'fixed'","   *        Always use regular number notation.","   *        For example '123.40' and '14000000'","   *      - 'exponential'","   *        Always use exponential notation.","   *        For example '1.234e+2' and '1.4e+7'","   *      - 'engineering'","   *        Always use engineering notation.","   *        For example '123.4e+0' and '14.0e+6'","   *      - 'auto' (default)","   *        Regular number notation for numbers having an absolute value between","   *        `lower` and `upper` bounds, and uses exponential notation elsewhere.","   *        Lower bound is included, upper bound is excluded.","   *        For example '123.4' and '1.4e7'.","   *    - `precision: number`","   *      A number between 0 and 16 to round the digits of the number. In case","   *      of notations 'exponential' and 'auto', `precision` defines the total","   *      number of significant digits returned and is undefined by default.","   *      In case of notation 'fixed', `precision` defines the number of","   *      significant digits after the decimal point, and is 0 by default.","   *    - `exponential: Object`","   *      An object containing two parameters, {number} lower and {number} upper,","   *      used by notation 'auto' to determine when to return exponential","   *      notation. Default values are `lower=1e-3` and `upper=1e5`. Only","   *      applicable for notation `auto`.","   *    - `fraction: string`. Available values: 'ratio' (default) or 'decimal'.","   *      For example `format(fraction(1, 3))` will output '1/3' when 'ratio' is","   *      configured, and will output `0.(3)` when 'decimal' is configured.","   * - `callback: function`","   *   A custom formatting function, invoked for all numeric elements in `value`,","   *   for example all elements of a matrix, or the real and imaginary","   *   parts of a complex number. This callback can be used to override the","   *   built-in numeric notation with any type of formatting. Function `callback`","   *   is called with `value` as parameter and must return a string.","   *","   * When `value` is an Object:","   *","   * - When the object contains a property `format` being a function, this function","   *   is invoked as `value.format(options)` and the result is returned.","   * - When the object has its own `toString` method, this method is invoked","   *   and the result is returned.","   * - In other cases the function will loop over all object properties and","   *   return JSON object notation like '{\"a\": 2, \"b\": 3}'.","   *","   * When value is a function:","   *","   * - When the function has a property `syntax`, it returns this","   *   syntax description.","   * - In other cases, a string `'function'` is returned.","   *","   * Examples:","   *","   *    math.format(6.4);                                        // returns '6.4'","   *    math.format(1240000);                                    // returns '1.24e6'","   *    math.format(1/3);                                        // returns '0.3333333333333333'","   *    math.format(1/3, 3);                                     // returns '0.333'","   *    math.format(21385, 2);                                   // returns '21000'","   *    math.format(12.071, {notation: 'fixed'});                // returns '12'","   *    math.format(2.3,    {notation: 'fixed', precision: 2});  // returns '2.30'","   *    math.format(52.8,   {notation: 'exponential'});          // returns '5.28e+1'","   *    math.format(12400,  {notation: 'engineering'});         // returns '12.400e+3'","   *","   *    function formatCurrency(value) {","   *      // return currency notation with two digits:","   *      return '$' + value.toFixed(2);","   *","   *      // you could also use math.format inside the callback:","   *      // return '$' + math.format(value, {notation: 'fixed', precision: 2});","   *    }","   *    math.format([2.1, 3, 0.016], formatCurrency};            // returns '[$2.10, $3.00, $0.02]'","   *","   * See also:","   *","   *    print","   *","   * @param {*} value                               Value to be stringified","   * @param {Object | Function | number} [options]  Formatting options","   * @return {string} The formatted value","   */","  var format = typed('format', {","    'any': string.format,","    'any, Object | function | number': string.format","  });","","  format.toTex = undefined; // use default template","","  return format;","}","","exports.name = 'format';","exports.factory = factory;",""],"l":{"3":1,"5":1,"103":0,"108":0,"110":0,"113":1,"114":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/string/print.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/string/print.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":1,"20":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"factory","line":6,"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":45}}},"2":{"name":"_print","line":63,"loc":{"start":{"line":63,"column":0},"end":{"line":63,"column":43}}},"3":{"name":"(anonymous_3)","line":64,"loc":{"start":{"line":64,"column":42},"end":{"line":64,"column":67}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":54}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":50}},"3":{"start":{"line":6,"column":0},"end":{"line":53,"column":1}},"4":{"start":{"line":45,"column":2},"end":{"line":48,"column":5}},"5":{"start":{"line":50,"column":2},"end":{"line":50,"column":26}},"6":{"start":{"line":52,"column":2},"end":{"line":52,"column":15}},"7":{"start":{"line":63,"column":0},"end":{"line":84,"column":1}},"8":{"start":{"line":64,"column":2},"end":{"line":83,"column":4}},"9":{"start":{"line":65,"column":8},"end":{"line":65,"column":34}},"10":{"start":{"line":66,"column":8},"end":{"line":66,"column":41}},"11":{"start":{"line":67,"column":8},"end":{"line":70,"column":9}},"12":{"start":{"line":68,"column":10},"end":{"line":68,"column":31}},"13":{"start":{"line":69,"column":10},"end":{"line":69,"column":45}},"14":{"start":{"line":72,"column":8},"end":{"line":79,"column":9}},"15":{"start":{"line":73,"column":10},"end":{"line":78,"column":11}},"16":{"start":{"line":74,"column":12},"end":{"line":74,"column":42}},"17":{"start":{"line":77,"column":12},"end":{"line":77,"column":25}},"18":{"start":{"line":81,"column":8},"end":{"line":81,"column":24}},"19":{"start":{"line":86,"column":0},"end":{"line":86,"column":23}},"20":{"start":{"line":87,"column":0},"end":{"line":87,"column":26}}},"branchMap":{"1":{"line":67,"type":"binary-expr","locations":[{"start":{"line":67,"column":15},"end":{"line":67,"column":26}},{"start":{"line":67,"column":30},"end":{"line":67,"column":49}}]},"2":{"line":69,"type":"cond-expr","locations":[{"start":{"line":69,"column":22},"end":{"line":69,"column":30}},{"start":{"line":69,"column":33},"end":{"line":69,"column":44}}]},"3":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":8},"end":{"line":72,"column":8}},{"start":{"line":72,"column":8},"end":{"line":72,"column":8}}]},"4":{"line":73,"type":"if","locations":[{"start":{"line":73,"column":10},"end":{"line":73,"column":10}},{"start":{"line":73,"column":10},"end":{"line":73,"column":10}}]}},"code":["'use strict';","","var isString = require('../../utils/string').isString;","var format = require('../../utils/string').format;","","function factory (type, config, load, typed) {","  /**","   * Interpolate values into a string template.","   *","   * Syntax:","   *","   *     math.print(template, values)","   *     math.print(template, values, precision)","   *     math.print(template, values, options)","   *","   * Example usage:","   *","   *     // the following outputs: 'Lucy is 5 years old'","   *     math.print('Lucy is $age years old', {age: 5});","   *","   *     // the following outputs: 'The value of pi is 3.141592654'","   *     math.print('The value of pi is $pi', {pi: math.pi}, 10);","   *","   *     // the following outputs: 'hello Mary! The date is 2013-03-23'","   *     math.print('Hello $user.name! The date is $date', {","   *       user: {","   *         name: 'Mary',","   *       },","   *       date: new Date(2013, 2, 23).toISOString().substring(0, 10)","   *     });","   *","   * See also:","   *","   *     format","   *","   * @param {string} template     A string containing variable placeholders.","   * @param {Object} values       An object containing variables which will","   *                              be filled in in the template.","   * @param {number | Object} [options]  Formatting options,","   *                              or the number of digits to format numbers.","   *                              See function math.format for a description","   *                              of all options.","   * @return {string} Interpolated string","   */","  var print = typed ('print', {","    'string, Object': _print,","    'string, Object, number | Object': _print","  });","","  print.toTex = undefined; // use default template","","  return print;","}","","/**"," * Interpolate values into a string template."," * @param {string} template"," * @param {Object} values"," * @param {number | Object} [options]"," * @returns {string} Interpolated string"," * @private"," */","function _print(template, values, options) {","  return template.replace(/\\$([\\w\\.]+)/g, function (original, key) {","        var keys = key.split('.');","        var value = values[keys.shift()];","        while (keys.length && value !== undefined) {","          var k = keys.shift();","          value = k ? value[k] : value + '.';","        }","","        if (value !== undefined) {","          if (!isString(value)) {","            return format(value, options);","          }","          else {","            return value;","          }","        }","","        return original;","      }","  );","}","","exports.name = 'print';","exports.factory = factory;",""],"l":{"3":1,"4":1,"6":1,"45":0,"50":0,"52":0,"63":1,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"72":0,"73":0,"74":0,"77":0,"81":0,"86":1,"87":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/index.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":27,"column":2}}},"branchMap":{},"code":["module.exports = [","  require('./acos'),","  require('./acosh'),","  require('./acot'),","  require('./acoth'),","  require('./acsc'),","  require('./acsch'),","  require('./asec'),","  require('./asech'),","  require('./asin'),","  require('./asinh'),","  require('./atan'),","  require('./atan2'),","  require('./atanh'),","  require('./cos'),","  require('./cosh'),","  require('./cot'),","  require('./coth'),","  require('./csc'),","  require('./csch'),","  require('./sec'),","  require('./sech'),","  require('./sin'),","  require('./sinh'),","  require('./tan'),","  require('./tanh')","];",""],"l":{"1":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/acos.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/acos.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1,"13":1},"b":{"1":[0,0],"2":[0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":31,"loc":{"start":{"line":31,"column":14},"end":{"line":31,"column":27}}},"3":{"name":"(anonymous_3)","line":40,"loc":{"start":{"line":40,"column":15},"end":{"line":40,"column":28}}},"4":{"name":"(anonymous_4)","line":44,"loc":{"start":{"line":44,"column":17},"end":{"line":44,"column":30}}},"5":{"name":"(anonymous_5)","line":48,"loc":{"start":{"line":48,"column":22},"end":{"line":48,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":56,"column":1}},"3":{"start":{"line":30,"column":2},"end":{"line":51,"column":5}},"4":{"start":{"line":32,"column":6},"end":{"line":37,"column":7}},"5":{"start":{"line":33,"column":8},"end":{"line":33,"column":28}},"6":{"start":{"line":36,"column":8},"end":{"line":36,"column":45}},"7":{"start":{"line":41,"column":6},"end":{"line":41,"column":22}},"8":{"start":{"line":45,"column":6},"end":{"line":45,"column":22}},"9":{"start":{"line":49,"column":6},"end":{"line":49,"column":30}},"10":{"start":{"line":53,"column":2},"end":{"line":53,"column":58}},"11":{"start":{"line":55,"column":2},"end":{"line":55,"column":14}},"12":{"start":{"line":58,"column":0},"end":{"line":58,"column":22}},"13":{"start":{"line":59,"column":0},"end":{"line":59,"column":26}}},"branchMap":{"1":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":6},"end":{"line":32,"column":6}},{"start":{"line":32,"column":6},"end":{"line":32,"column":6}}]},"2":{"line":32,"type":"binary-expr","locations":[{"start":{"line":32,"column":11},"end":{"line":32,"column":18}},{"start":{"line":32,"column":22},"end":{"line":32,"column":28}},{"start":{"line":32,"column":33},"end":{"line":32,"column":51}}]}},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","","function factory (type, config, load, typed) {","","  /**","   * Calculate the inverse cosine of a value.","   *","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.acos(x)","   *","   * Examples:","   *","   *    math.acos(0.5);           // returns number 1.0471975511965979","   *    math.acos(math.cos(1.5)); // returns number 1.5","   *","   *    math.acos(2);             // returns Complex 0 + 1.3169578969248166 i","   *","   * See also:","   *","   *    cos, atan, asin","   *","   * @param {number | BigNumber | Complex | Array | Matrix} x  Function input","   * @return {number | BigNumber | Complex | Array | Matrix} The arc cosine of x","   */","  var acos = typed('acos', {","    'number': function (x) {","      if ((x >= -1 && x <= 1) || config.predictable) {","        return Math.acos(x);","      }","      else {","        return new type.Complex(x, 0).acos();","      }","    },","","    'Complex': function (x) {","      return x.acos();","    },","","    'BigNumber': function (x) {","      return x.acos();","    },","","    'Array | Matrix': function (x) {","      return deepMap(x, acos);","    }","  });","","  acos.toTex = {1: '\\\\cos^{-1}\\\\left(${args[0]}\\\\right)'};","","  return acos;","}","","exports.name = 'acos';","exports.factory = factory;",""],"l":{"3":1,"5":1,"30":0,"32":0,"33":0,"36":0,"41":0,"45":0,"49":0,"53":0,"55":0,"58":1,"59":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/acosh.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/acosh.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":1,"15":0,"16":1,"17":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[1,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":29,"loc":{"start":{"line":29,"column":14},"end":{"line":29,"column":27}}},"3":{"name":"(anonymous_3)","line":39,"loc":{"start":{"line":39,"column":15},"end":{"line":39,"column":28}}},"4":{"name":"(anonymous_4)","line":43,"loc":{"start":{"line":43,"column":17},"end":{"line":43,"column":30}}},"5":{"name":"(anonymous_5)","line":47,"loc":{"start":{"line":47,"column":22},"end":{"line":47,"column":35}}},"6":{"name":"(anonymous_6)","line":63,"loc":{"start":{"line":63,"column":27},"end":{"line":63,"column":40}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":55,"column":1}},"3":{"start":{"line":28,"column":2},"end":{"line":50,"column":5}},"4":{"start":{"line":30,"column":6},"end":{"line":32,"column":7}},"5":{"start":{"line":31,"column":8},"end":{"line":31,"column":25}},"6":{"start":{"line":33,"column":6},"end":{"line":35,"column":7}},"7":{"start":{"line":34,"column":8},"end":{"line":34,"column":75}},"8":{"start":{"line":36,"column":6},"end":{"line":36,"column":44}},"9":{"start":{"line":40,"column":6},"end":{"line":40,"column":23}},"10":{"start":{"line":44,"column":6},"end":{"line":44,"column":23}},"11":{"start":{"line":48,"column":6},"end":{"line":48,"column":31}},"12":{"start":{"line":52,"column":2},"end":{"line":52,"column":60}},"13":{"start":{"line":54,"column":2},"end":{"line":54,"column":15}},"14":{"start":{"line":63,"column":0},"end":{"line":65,"column":2}},"15":{"start":{"line":64,"column":2},"end":{"line":64,"column":41}},"16":{"start":{"line":67,"column":0},"end":{"line":67,"column":23}},"17":{"start":{"line":68,"column":0},"end":{"line":68,"column":26}}},"branchMap":{"1":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":6},"end":{"line":30,"column":6}},{"start":{"line":30,"column":6},"end":{"line":30,"column":6}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":10},"end":{"line":30,"column":16}},{"start":{"line":30,"column":20},"end":{"line":30,"column":38}}]},"3":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":6},"end":{"line":33,"column":6}},{"start":{"line":33,"column":6},"end":{"line":33,"column":6}}]},"4":{"line":63,"type":"binary-expr","locations":[{"start":{"line":63,"column":13},"end":{"line":63,"column":23}},{"start":{"line":63,"column":27},"end":{"line":65,"column":1}}]}},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","","function factory (type, config, load, typed) {","","  /**","   * Calculate the hyperbolic arccos of a value,","   * defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.","   *","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.acosh(x)","   *","   * Examples:","   *","   *    math.acosh(1.5);       // returns 0.9624236501192069","   *","   * See also:","   *","   *    cosh, asinh, atanh","   *","   * @param {number | Complex | Unit | Array | Matrix} x  Function input","   * @return {number | Complex | Array | Matrix} Hyperbolic arccosine of x","   */","  var acosh = typed('acosh', {","    'number': function (x) {","      if (x >= 1 || config.predictable) {","        return _acosh(x);","      }","      if (x <= -1) {","        return new type.Complex(Math.log(Math.sqrt(x*x - 1) - x), Math.PI);","      }","      return new type.Complex(x, 0).acosh();","    },","","    'Complex': function (x) {","      return x.acosh();","    },","","    'BigNumber': function (x) {","      return x.acosh();","    },","","    'Array | Matrix': function (x) {","      return deepMap(x, acosh);","    }","  });","","  acosh.toTex = {1: '\\\\cosh^{-1}\\\\left(${args[0]}\\\\right)'};","","  return acosh;","}","","/**"," * Calculate the hyperbolic arccos of a number"," * @param {number} x"," * @return {number}"," * @private"," */","var _acosh = Math.acosh || function (x) {","  return Math.log(Math.sqrt(x*x - 1) + x)","};","","exports.name = 'acosh';","exports.factory = factory;",""],"l":{"3":1,"5":1,"28":0,"30":0,"31":0,"33":0,"34":0,"36":0,"40":0,"44":0,"48":0,"52":0,"54":0,"63":1,"64":0,"67":1,"68":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/acot.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/acot.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1,"11":1},"b":{},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":31,"loc":{"start":{"line":31,"column":14},"end":{"line":31,"column":27}}},"3":{"name":"(anonymous_3)","line":35,"loc":{"start":{"line":35,"column":15},"end":{"line":35,"column":28}}},"4":{"name":"(anonymous_4)","line":39,"loc":{"start":{"line":39,"column":17},"end":{"line":39,"column":30}}},"5":{"name":"(anonymous_5)","line":43,"loc":{"start":{"line":43,"column":22},"end":{"line":43,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":51,"column":1}},"3":{"start":{"line":30,"column":2},"end":{"line":46,"column":5}},"4":{"start":{"line":32,"column":6},"end":{"line":32,"column":30}},"5":{"start":{"line":36,"column":6},"end":{"line":36,"column":22}},"6":{"start":{"line":40,"column":6},"end":{"line":40,"column":49}},"7":{"start":{"line":44,"column":6},"end":{"line":44,"column":30}},"8":{"start":{"line":48,"column":2},"end":{"line":48,"column":58}},"9":{"start":{"line":50,"column":2},"end":{"line":50,"column":14}},"10":{"start":{"line":53,"column":0},"end":{"line":53,"column":22}},"11":{"start":{"line":54,"column":0},"end":{"line":54,"column":26}}},"branchMap":{},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","","function factory (type, config, load, typed) {","","  /**","   * Calculate the inverse cotangent of a value, defined as `acot(x) = atan(1/x)`.","   *","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.acot(x)","   *","   * Examples:","   *","   *    math.acot(0.5);           // returns number 0.4636476090008061","   *    math.acot(math.cot(1.5)); // returns number 1.5","   *","   *    math.acot(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i","   *","   * See also:","   *","   *    cot, atan","   *","   * @param {number | Complex | Array | Matrix} x   Function input","   * @return {number | Complex | Array | Matrix} The arc cotangent of x","   */","  var acot = typed('acot', {","    'number': function (x) {","      return Math.atan(1 / x);","    },","","    'Complex': function (x) {","      return x.acot();","    },","","    'BigNumber': function (x) {","      return new type.BigNumber(1).div(x).atan();","    },","","    'Array | Matrix': function (x) {","      return deepMap(x, acot);","    }","  });","","  acot.toTex = {1: '\\\\cot^{-1}\\\\left(${args[0]}\\\\right)'};","","  return acot;","}","","exports.name = 'acot';","exports.factory = factory;",""],"l":{"3":1,"5":1,"30":0,"32":0,"36":0,"40":0,"44":0,"48":0,"50":0,"53":1,"54":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/acoth.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/acoth.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1,"13":1},"b":{"1":[0,0],"2":[0,0,0],"3":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":29,"loc":{"start":{"line":29,"column":14},"end":{"line":29,"column":27}}},"3":{"name":"(anonymous_3)","line":36,"loc":{"start":{"line":36,"column":15},"end":{"line":36,"column":28}}},"4":{"name":"(anonymous_4)","line":40,"loc":{"start":{"line":40,"column":17},"end":{"line":40,"column":30}}},"5":{"name":"(anonymous_5)","line":44,"loc":{"start":{"line":44,"column":22},"end":{"line":44,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":52,"column":1}},"3":{"start":{"line":28,"column":2},"end":{"line":47,"column":5}},"4":{"start":{"line":30,"column":6},"end":{"line":32,"column":7}},"5":{"start":{"line":31,"column":8},"end":{"line":31,"column":77}},"6":{"start":{"line":33,"column":6},"end":{"line":33,"column":44}},"7":{"start":{"line":37,"column":6},"end":{"line":37,"column":23}},"8":{"start":{"line":41,"column":6},"end":{"line":41,"column":50}},"9":{"start":{"line":45,"column":6},"end":{"line":45,"column":31}},"10":{"start":{"line":49,"column":2},"end":{"line":49,"column":60}},"11":{"start":{"line":51,"column":2},"end":{"line":51,"column":15}},"12":{"start":{"line":54,"column":0},"end":{"line":54,"column":23}},"13":{"start":{"line":55,"column":0},"end":{"line":55,"column":26}}},"branchMap":{"1":{"line":30,"type":"if","locations":[{"start":{"line":30,"column":6},"end":{"line":30,"column":6}},{"start":{"line":30,"column":6},"end":{"line":30,"column":6}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":10},"end":{"line":30,"column":16}},{"start":{"line":30,"column":20},"end":{"line":30,"column":27}},{"start":{"line":30,"column":31},"end":{"line":30,"column":49}}]},"3":{"line":31,"type":"cond-expr","locations":[{"start":{"line":31,"column":29},"end":{"line":31,"column":72}},{"start":{"line":31,"column":75},"end":{"line":31,"column":76}}]}},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","","function factory (type, config, load, typed) {","","  /**","   * Calculate the hyperbolic arccotangent of a value,","   * defined as `acoth(x) = atanh(1/x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.","   *","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.acoth(x)","   *","   * Examples:","   *","   *    math.acoth(0.5);       // returns 0.8047189562170503","   *","   * See also:","   *","   *    acsch, asech","   *","   * @param {number | Complex | Array | Matrix} x  Function input","   * @return {number | Complex | Array | Matrix} Hyperbolic arccotangent of x","   */","  var acoth = typed('acoth', {","    'number': function (x) {","      if (x >= 1 || x <= -1 || config.predictable) {","        return isFinite(x) ? (Math.log((x+1)/x) + Math.log(x/(x-1))) / 2 : 0;","      }","      return new type.Complex(x, 0).acoth();","    },","","    'Complex': function (x) {","      return x.acoth();","    },","","    'BigNumber': function (x) {","      return new type.BigNumber(1).div(x).atanh();","    },","","    'Array | Matrix': function (x) {","      return deepMap(x, acoth);","    }","  });","","  acoth.toTex = {1: '\\\\coth^{-1}\\\\left(${args[0]}\\\\right)'};","","  return acoth;","}","","exports.name = 'acoth';","exports.factory = factory;",""],"l":{"3":1,"5":1,"28":0,"30":0,"31":0,"33":0,"37":0,"41":0,"45":0,"49":0,"51":0,"54":1,"55":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/acsc.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/acsc.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1,"13":1},"b":{"1":[0,0],"2":[0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"factory","line":6,"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":45}}},"2":{"name":"(anonymous_2)","line":32,"loc":{"start":{"line":32,"column":14},"end":{"line":32,"column":27}}},"3":{"name":"(anonymous_3)","line":39,"loc":{"start":{"line":39,"column":15},"end":{"line":39,"column":28}}},"4":{"name":"(anonymous_4)","line":43,"loc":{"start":{"line":43,"column":17},"end":{"line":43,"column":30}}},"5":{"name":"(anonymous_5)","line":47,"loc":{"start":{"line":47,"column":22},"end":{"line":47,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":6,"column":0},"end":{"line":55,"column":1}},"3":{"start":{"line":31,"column":2},"end":{"line":50,"column":5}},"4":{"start":{"line":33,"column":6},"end":{"line":35,"column":7}},"5":{"start":{"line":34,"column":8},"end":{"line":34,"column":32}},"6":{"start":{"line":36,"column":6},"end":{"line":36,"column":43}},"7":{"start":{"line":40,"column":6},"end":{"line":40,"column":22}},"8":{"start":{"line":44,"column":6},"end":{"line":44,"column":49}},"9":{"start":{"line":48,"column":6},"end":{"line":48,"column":30}},"10":{"start":{"line":52,"column":2},"end":{"line":52,"column":58}},"11":{"start":{"line":54,"column":2},"end":{"line":54,"column":14}},"12":{"start":{"line":57,"column":0},"end":{"line":57,"column":22}},"13":{"start":{"line":58,"column":0},"end":{"line":58,"column":26}}},"branchMap":{"1":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":6},"end":{"line":33,"column":6}},{"start":{"line":33,"column":6},"end":{"line":33,"column":6}}]},"2":{"line":33,"type":"binary-expr","locations":[{"start":{"line":33,"column":10},"end":{"line":33,"column":17}},{"start":{"line":33,"column":21},"end":{"line":33,"column":27}},{"start":{"line":33,"column":31},"end":{"line":33,"column":49}}]}},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","","","function factory (type, config, load, typed) {","","  /**","   * Calculate the inverse cosecant of a value, defined as `acsc(x) = asin(1/x)`.","   *","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.acsc(x)","   *","   * Examples:","   *","   *    math.acsc(0.5);           // returns number 0.5235987755982989","   *    math.acsc(math.csc(1.5)); // returns number ~1.5","   *","   *    math.acsc(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i","   *","   * See also:","   *","   *    csc, asin, asec","   *","   * @param {number | Complex | Array | Matrix} x   Function input","   * @return {number | Complex | Array | Matrix} The arc cosecant of x","   */","  var acsc = typed('acsc', {","    'number': function (x) {","      if (x <= -1 || x >= 1 || config.predictable) {","        return Math.asin(1 / x);","      }","      return new type.Complex(x, 0).acsc();","    },","","    'Complex': function (x) {","      return x.acsc();","    },","","    'BigNumber': function (x) {","      return new type.BigNumber(1).div(x).asin();","    },","","    'Array | Matrix': function (x) {","      return deepMap(x, acsc);","    }","  });","","  acsc.toTex = {1: '\\\\csc^{-1}\\\\left(${args[0]}\\\\right)'};","","  return acsc;","}","","exports.name = 'acsc';","exports.factory = factory;",""],"l":{"3":1,"6":1,"31":0,"33":0,"34":0,"36":0,"40":0,"44":0,"48":0,"52":0,"54":0,"57":1,"58":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/acsch.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/acsch.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1,"12":1},"b":{},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":29,"loc":{"start":{"line":29,"column":14},"end":{"line":29,"column":27}}},"3":{"name":"(anonymous_3)","line":34,"loc":{"start":{"line":34,"column":15},"end":{"line":34,"column":28}}},"4":{"name":"(anonymous_4)","line":38,"loc":{"start":{"line":38,"column":17},"end":{"line":38,"column":30}}},"5":{"name":"(anonymous_5)","line":42,"loc":{"start":{"line":42,"column":22},"end":{"line":42,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":50,"column":1}},"3":{"start":{"line":28,"column":2},"end":{"line":45,"column":5}},"4":{"start":{"line":30,"column":6},"end":{"line":30,"column":16}},"5":{"start":{"line":31,"column":6},"end":{"line":31,"column":46}},"6":{"start":{"line":35,"column":6},"end":{"line":35,"column":23}},"7":{"start":{"line":39,"column":6},"end":{"line":39,"column":50}},"8":{"start":{"line":43,"column":6},"end":{"line":43,"column":31}},"9":{"start":{"line":47,"column":2},"end":{"line":47,"column":68}},"10":{"start":{"line":49,"column":2},"end":{"line":49,"column":15}},"11":{"start":{"line":52,"column":0},"end":{"line":52,"column":23}},"12":{"start":{"line":53,"column":0},"end":{"line":53,"column":26}}},"branchMap":{},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","","function factory (type, config, load, typed) {","","  /**","   * Calculate the hyperbolic arccosecant of a value,","   * defined as `acsch(x) = asinh(1/x) = ln(1/x + sqrt(1/x^2 + 1))`.","   *","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.acsch(x)","   *","   * Examples:","   *","   *    math.acsch(0.5);       // returns 1.4436354751788103","   *","   * See also:","   *","   *    asech, acoth","   *","   * @param {number | Complex | Array | Matrix} x  Function input","   * @return {number | Complex | Array | Matrix} Hyperbolic arccosecant of x","   */","  var acsch = typed('acsch', {","    'number': function (x) {","      x = 1 / x;","      return Math.log(x + Math.sqrt(x*x + 1));","    },","","    'Complex': function (x) {","      return x.acsch();","    },","","    'BigNumber': function (x) {","      return new type.BigNumber(1).div(x).asinh();","    },","","    'Array | Matrix': function (x) {","      return deepMap(x, acsch);","    }","  });","","  acsch.toTex = {1: '\\\\mathrm{csch}^{-1}\\\\left(${args[0]}\\\\right)'};","","  return acsch;","}","","exports.name = 'acsch';","exports.factory = factory;",""],"l":{"3":1,"5":1,"28":0,"30":0,"31":0,"35":0,"39":0,"43":0,"47":0,"49":0,"52":1,"53":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/asec.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/asec.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1,"13":1},"b":{"1":[0,0],"2":[0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":31,"loc":{"start":{"line":31,"column":14},"end":{"line":31,"column":27}}},"3":{"name":"(anonymous_3)","line":38,"loc":{"start":{"line":38,"column":15},"end":{"line":38,"column":28}}},"4":{"name":"(anonymous_4)","line":42,"loc":{"start":{"line":42,"column":17},"end":{"line":42,"column":30}}},"5":{"name":"(anonymous_5)","line":46,"loc":{"start":{"line":46,"column":22},"end":{"line":46,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":54,"column":1}},"3":{"start":{"line":30,"column":2},"end":{"line":49,"column":5}},"4":{"start":{"line":32,"column":6},"end":{"line":34,"column":7}},"5":{"start":{"line":33,"column":8},"end":{"line":33,"column":32}},"6":{"start":{"line":35,"column":6},"end":{"line":35,"column":43}},"7":{"start":{"line":39,"column":6},"end":{"line":39,"column":22}},"8":{"start":{"line":43,"column":6},"end":{"line":43,"column":49}},"9":{"start":{"line":47,"column":6},"end":{"line":47,"column":30}},"10":{"start":{"line":51,"column":2},"end":{"line":51,"column":58}},"11":{"start":{"line":53,"column":2},"end":{"line":53,"column":14}},"12":{"start":{"line":56,"column":0},"end":{"line":56,"column":22}},"13":{"start":{"line":57,"column":0},"end":{"line":57,"column":26}}},"branchMap":{"1":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":6},"end":{"line":32,"column":6}},{"start":{"line":32,"column":6},"end":{"line":32,"column":6}}]},"2":{"line":32,"type":"binary-expr","locations":[{"start":{"line":32,"column":10},"end":{"line":32,"column":17}},{"start":{"line":32,"column":21},"end":{"line":32,"column":27}},{"start":{"line":32,"column":31},"end":{"line":32,"column":49}}]}},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","","function factory (type, config, load, typed) {","","  /**","   * Calculate the inverse secant of a value. Defined as `asec(x) = acos(1/x)`.","   *","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.asec(x)","   *","   * Examples:","   *","   *    math.asec(0.5);           // returns 1.0471975511965979","   *    math.asec(math.sec(1.5)); // returns 1.5","   *","   *    math.asec(2);             // returns 0 + 1.3169578969248166 i","   *","   * See also:","   *","   *    acos, acot, acsc","   *","   * @param {number | Complex | Array | Matrix} x  Function input","   * @return {number | Complex | Array | Matrix} The arc secant of x","   */","  var asec = typed('asec', {","    'number': function (x) {","      if (x <= -1 || x >= 1 || config.predictable) {","        return Math.acos(1 / x);","      }","      return new type.Complex(x, 0).asec();","    },","","    'Complex': function (x) {","      return x.asec();","    },","","    'BigNumber': function (x) {","      return new type.BigNumber(1).div(x).acos();","    },","","    'Array | Matrix': function (x) {","      return deepMap(x, asec);","    }","  });","","  asec.toTex = {1: '\\\\sec^{-1}\\\\left(${args[0]}\\\\right)'};","","  return asec;","}","","exports.name = 'asec';","exports.factory = factory;",""],"l":{"3":1,"5":1,"30":0,"32":0,"33":0,"35":0,"39":0,"43":0,"47":0,"51":0,"53":0,"56":1,"57":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/asech.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/asech.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":1,"18":1},"b":{"1":[0,0],"2":[0,0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":30,"loc":{"start":{"line":30,"column":14},"end":{"line":30,"column":27}}},"3":{"name":"(anonymous_3)","line":45,"loc":{"start":{"line":45,"column":15},"end":{"line":45,"column":28}}},"4":{"name":"(anonymous_4)","line":49,"loc":{"start":{"line":49,"column":17},"end":{"line":49,"column":30}}},"5":{"name":"(anonymous_5)","line":53,"loc":{"start":{"line":53,"column":22},"end":{"line":53,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":61,"column":1}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":64}},"4":{"start":{"line":29,"column":2},"end":{"line":56,"column":5}},"5":{"start":{"line":31,"column":6},"end":{"line":40,"column":7}},"6":{"start":{"line":32,"column":8},"end":{"line":32,"column":18}},"7":{"start":{"line":34,"column":8},"end":{"line":34,"column":37}},"8":{"start":{"line":35,"column":8},"end":{"line":37,"column":9}},"9":{"start":{"line":36,"column":10},"end":{"line":36,"column":35}},"10":{"start":{"line":39,"column":8},"end":{"line":39,"column":60}},"11":{"start":{"line":42,"column":6},"end":{"line":42,"column":44}},"12":{"start":{"line":46,"column":6},"end":{"line":46,"column":22}},"13":{"start":{"line":50,"column":6},"end":{"line":50,"column":50}},"14":{"start":{"line":54,"column":6},"end":{"line":54,"column":31}},"15":{"start":{"line":58,"column":2},"end":{"line":58,"column":68}},"16":{"start":{"line":60,"column":2},"end":{"line":60,"column":15}},"17":{"start":{"line":63,"column":0},"end":{"line":63,"column":23}},"18":{"start":{"line":64,"column":0},"end":{"line":64,"column":26}}},"branchMap":{"1":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":6},"end":{"line":31,"column":6}},{"start":{"line":31,"column":6},"end":{"line":31,"column":6}}]},"2":{"line":31,"type":"binary-expr","locations":[{"start":{"line":31,"column":11},"end":{"line":31,"column":17}},{"start":{"line":31,"column":21},"end":{"line":31,"column":28}},{"start":{"line":31,"column":33},"end":{"line":31,"column":51}}]},"3":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":8},"end":{"line":35,"column":8}},{"start":{"line":35,"column":8},"end":{"line":35,"column":8}}]},"4":{"line":35,"type":"binary-expr","locations":[{"start":{"line":35,"column":12},"end":{"line":35,"column":17}},{"start":{"line":35,"column":21},"end":{"line":35,"column":39}}]}},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","","function factory (type, config, load, typed) {","  var acosh = typed.find(load(require('./acosh')), ['Complex']);","","  /**","   * Calculate the hyperbolic arcsecant of a value,","   * defined as `asech(x) = acosh(1/x) = ln(sqrt(1/x^2 - 1) + 1/x)`.","   *","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.asech(x)","   *","   * Examples:","   *","   *    math.asech(0.5);       // returns 1.3169578969248166","   *","   * See also:","   *","   *    acsch, acoth","   *","   * @param {number | Complex | Array | Matrix} x  Function input","   * @return {number | Complex | Array | Matrix} Hyperbolic arcsecant of x","   */","  var asech = typed('asech', {","    'number': function (x) {","      if ((x <= 1 && x >= -1) || config.predictable) {","        x = 1 / x;","","        var ret = Math.sqrt(x*x - 1);","        if (x > 0 || config.predictable) {","          return Math.log(ret + x);","        }","","        return new type.Complex(Math.log(ret - x), Math.PI);","      }","","      return new type.Complex(x, 0).asech();","    },","","    'Complex': function (x) {","      return x.asech()","    },","","    'BigNumber': function (x) {","      return new type.BigNumber(1).div(x).acosh();","    },","","    'Array | Matrix': function (x) {","      return deepMap(x, asech);","    }","  });","","  asech.toTex = {1: '\\\\mathrm{sech}^{-1}\\\\left(${args[0]}\\\\right)'};","","  return asech;","}","","exports.name = 'asech';","exports.factory = factory;",""],"l":{"3":1,"5":1,"6":0,"29":0,"31":0,"32":0,"34":0,"35":0,"36":0,"39":0,"42":0,"46":0,"50":0,"54":0,"58":0,"60":0,"63":1,"64":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/asin.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/asin.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1,"13":1},"b":{"1":[0,0],"2":[0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":31,"loc":{"start":{"line":31,"column":14},"end":{"line":31,"column":27}}},"3":{"name":"(anonymous_3)","line":40,"loc":{"start":{"line":40,"column":15},"end":{"line":40,"column":28}}},"4":{"name":"(anonymous_4)","line":44,"loc":{"start":{"line":44,"column":17},"end":{"line":44,"column":30}}},"5":{"name":"(anonymous_5)","line":48,"loc":{"start":{"line":48,"column":22},"end":{"line":48,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":57,"column":1}},"3":{"start":{"line":30,"column":2},"end":{"line":52,"column":5}},"4":{"start":{"line":32,"column":6},"end":{"line":37,"column":7}},"5":{"start":{"line":33,"column":8},"end":{"line":33,"column":28}},"6":{"start":{"line":36,"column":8},"end":{"line":36,"column":45}},"7":{"start":{"line":41,"column":6},"end":{"line":41,"column":22}},"8":{"start":{"line":45,"column":6},"end":{"line":45,"column":22}},"9":{"start":{"line":50,"column":6},"end":{"line":50,"column":36}},"10":{"start":{"line":54,"column":2},"end":{"line":54,"column":58}},"11":{"start":{"line":56,"column":2},"end":{"line":56,"column":14}},"12":{"start":{"line":59,"column":0},"end":{"line":59,"column":22}},"13":{"start":{"line":60,"column":0},"end":{"line":60,"column":26}}},"branchMap":{"1":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":6},"end":{"line":32,"column":6}},{"start":{"line":32,"column":6},"end":{"line":32,"column":6}}]},"2":{"line":32,"type":"binary-expr","locations":[{"start":{"line":32,"column":11},"end":{"line":32,"column":18}},{"start":{"line":32,"column":22},"end":{"line":32,"column":28}},{"start":{"line":32,"column":33},"end":{"line":32,"column":51}}]}},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","","function factory (type, config, load, typed) {","","  /**","   * Calculate the inverse sine of a value.","   *","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.asin(x)","   *","   * Examples:","   *","   *    math.asin(0.5);           // returns number 0.5235987755982989","   *    math.asin(math.sin(1.5)); // returns number ~1.5","   *","   *    math.asin(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i","   *","   * See also:","   *","   *    sin, atan, acos","   *","   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input","   * @return {number | BigNumber | Complex | Array | Matrix} The arc sine of x","   */","  var asin = typed('asin', {","    'number': function (x) {","      if ((x >= -1 && x <= 1) || config.predictable) {","        return Math.asin(x);","      }","      else {","        return new type.Complex(x, 0).asin();","      }","    },","","    'Complex': function (x) {","      return x.asin();","    },","","    'BigNumber': function (x) {","      return x.asin();","    },","","    'Array | Matrix': function (x) {","      // deep map collection, skip zeros since asin(0) = 0","      return deepMap(x, asin, true);","    }","  });","","  asin.toTex = {1: '\\\\sin^{-1}\\\\left(${args[0]}\\\\right)'};","","  return asin;","}","","exports.name = 'asin';","exports.factory = factory;",""],"l":{"3":1,"5":1,"30":0,"32":0,"33":0,"36":0,"41":0,"45":0,"50":0,"54":0,"56":0,"59":1,"60":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/asinh.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/asinh.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1,"11":1},"b":{"1":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":29,"loc":{"start":{"line":29,"column":28},"end":{"line":29,"column":41}}},"3":{"name":"(anonymous_3)","line":33,"loc":{"start":{"line":33,"column":15},"end":{"line":33,"column":28}}},"4":{"name":"(anonymous_4)","line":37,"loc":{"start":{"line":37,"column":17},"end":{"line":37,"column":30}}},"5":{"name":"(anonymous_5)","line":41,"loc":{"start":{"line":41,"column":22},"end":{"line":41,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":50,"column":1}},"3":{"start":{"line":28,"column":2},"end":{"line":45,"column":5}},"4":{"start":{"line":30,"column":6},"end":{"line":30,"column":46}},"5":{"start":{"line":34,"column":8},"end":{"line":34,"column":25}},"6":{"start":{"line":38,"column":6},"end":{"line":38,"column":23}},"7":{"start":{"line":43,"column":6},"end":{"line":43,"column":37}},"8":{"start":{"line":47,"column":2},"end":{"line":47,"column":60}},"9":{"start":{"line":49,"column":2},"end":{"line":49,"column":15}},"10":{"start":{"line":52,"column":0},"end":{"line":52,"column":23}},"11":{"start":{"line":53,"column":0},"end":{"line":53,"column":26}}},"branchMap":{"1":{"line":29,"type":"binary-expr","locations":[{"start":{"line":29,"column":14},"end":{"line":29,"column":24}},{"start":{"line":29,"column":28},"end":{"line":31,"column":5}}]}},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","","function factory (type, config, load, typed) {","","  /**","   * Calculate the hyperbolic arcsine of a value,","   * defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.","   *","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.asinh(x)","   *","   * Examples:","   *","   *    math.asinh(0.5);       // returns 0.48121182505960347","   *","   * See also:","   *","   *    acosh, atanh","   *","   * @param {number | Complex | Array | Matrix} x  Function input","   * @return {number | Complex | Array | Matrix} Hyperbolic arcsine of x","   */","  var asinh = typed('asinh', {","    'number': Math.asinh || function (x) {","      return Math.log(Math.sqrt(x*x + 1) + x);","    },","","    'Complex': function (x) {","        return x.asinh();","    },","","    'BigNumber': function (x) {","      return x.asinh();","    },","","    'Array | Matrix': function (x) {","      // deep map collection, skip zeros since asinh(0) = 0","      return deepMap(x, asinh, true);","    }","  });","","  asinh.toTex = {1: '\\\\sinh^{-1}\\\\left(${args[0]}\\\\right)'};","","  return asinh;","}","","exports.name = 'asinh';","exports.factory = factory;",""],"l":{"3":1,"5":1,"28":0,"30":0,"34":0,"38":0,"43":0,"47":0,"49":0,"52":1,"53":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/atan.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/atan.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1,"11":1},"b":{},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":31,"loc":{"start":{"line":31,"column":14},"end":{"line":31,"column":27}}},"3":{"name":"(anonymous_3)","line":35,"loc":{"start":{"line":35,"column":15},"end":{"line":35,"column":28}}},"4":{"name":"(anonymous_4)","line":39,"loc":{"start":{"line":39,"column":17},"end":{"line":39,"column":30}}},"5":{"name":"(anonymous_5)","line":43,"loc":{"start":{"line":43,"column":22},"end":{"line":43,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":52,"column":1}},"3":{"start":{"line":30,"column":2},"end":{"line":47,"column":5}},"4":{"start":{"line":32,"column":6},"end":{"line":32,"column":26}},"5":{"start":{"line":36,"column":6},"end":{"line":36,"column":22}},"6":{"start":{"line":40,"column":6},"end":{"line":40,"column":22}},"7":{"start":{"line":45,"column":6},"end":{"line":45,"column":36}},"8":{"start":{"line":49,"column":2},"end":{"line":49,"column":58}},"9":{"start":{"line":51,"column":2},"end":{"line":51,"column":14}},"10":{"start":{"line":54,"column":0},"end":{"line":54,"column":22}},"11":{"start":{"line":55,"column":0},"end":{"line":55,"column":26}}},"branchMap":{},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","","function factory (type, config, load, typed) {","","  /**","   * Calculate the inverse tangent of a value.","   *","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.atan(x)","   *","   * Examples:","   *","   *    math.atan(0.5);           // returns number 0.4636476090008061","   *    math.atan(math.tan(1.5)); // returns number 1.5","   *","   *    math.atan(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i","   *","   * See also:","   *","   *    tan, asin, acos","   *","   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input","   * @return {number | BigNumber | Complex | Array | Matrix} The arc tangent of x","   */","  var atan = typed('atan', {","    'number': function (x) {","      return Math.atan(x);","    },","","    'Complex': function (x) {","      return x.atan();","    },","","    'BigNumber': function (x) {","      return x.atan();","    },","","    'Array | Matrix': function (x) {","      // deep map collection, skip zeros since atan(0) = 0","      return deepMap(x, atan, true);","    }","  });","","  atan.toTex = {1: '\\\\tan^{-1}\\\\left(${args[0]}\\\\right)'};","","  return atan;","}","","exports.name = 'atan';","exports.factory = factory;",""],"l":{"3":1,"5":1,"30":0,"32":0,"36":0,"40":0,"45":0,"49":0,"51":0,"54":1,"55":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/atan2.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/atan2.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":1,"49":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"fnMap":{"1":{"name":"factory","line":3,"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}}},"2":{"name":"(anonymous_2)","line":52,"loc":{"start":{"line":52,"column":28},"end":{"line":52,"column":44}}},"3":{"name":"(anonymous_3)","line":56,"loc":{"start":{"line":56,"column":22},"end":{"line":56,"column":38}}},"4":{"name":"(anonymous_4)","line":90,"loc":{"start":{"line":90,"column":20},"end":{"line":90,"column":36}}},"5":{"name":"(anonymous_5)","line":95,"loc":{"start":{"line":95,"column":21},"end":{"line":95,"column":37}}},"6":{"name":"(anonymous_6)","line":100,"loc":{"start":{"line":100,"column":21},"end":{"line":100,"column":37}}},"7":{"name":"(anonymous_7)","line":105,"loc":{"start":{"line":105,"column":34},"end":{"line":105,"column":50}}},"8":{"name":"(anonymous_8)","line":120,"loc":{"start":{"line":120,"column":34},"end":{"line":120,"column":50}}},"9":{"name":"(anonymous_9)","line":135,"loc":{"start":{"line":135,"column":33},"end":{"line":135,"column":49}}},"10":{"name":"(anonymous_10)","line":140,"loc":{"start":{"line":140,"column":33},"end":{"line":140,"column":49}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":149,"column":1}},"2":{"start":{"line":5,"column":2},"end":{"line":5,"column":66}},"3":{"start":{"line":7,"column":2},"end":{"line":7,"column":73}},"4":{"start":{"line":8,"column":2},"end":{"line":8,"column":73}},"5":{"start":{"line":9,"column":2},"end":{"line":9,"column":73}},"6":{"start":{"line":10,"column":2},"end":{"line":10,"column":73}},"7":{"start":{"line":11,"column":2},"end":{"line":11,"column":73}},"8":{"start":{"line":12,"column":2},"end":{"line":12,"column":73}},"9":{"start":{"line":13,"column":2},"end":{"line":13,"column":73}},"10":{"start":{"line":44,"column":2},"end":{"line":144,"column":5}},"11":{"start":{"line":53,"column":6},"end":{"line":53,"column":40}},"12":{"start":{"line":58,"column":6},"end":{"line":58,"column":12}},"13":{"start":{"line":61,"column":6},"end":{"line":86,"column":7}},"14":{"start":{"line":63,"column":10},"end":{"line":72,"column":11}},"15":{"start":{"line":66,"column":14},"end":{"line":66,"column":50}},"16":{"start":{"line":67,"column":14},"end":{"line":67,"column":20}},"17":{"start":{"line":70,"column":14},"end":{"line":70,"column":49}},"18":{"start":{"line":71,"column":14},"end":{"line":71,"column":20}},"19":{"start":{"line":73,"column":10},"end":{"line":73,"column":16}},"20":{"start":{"line":75,"column":10},"end":{"line":84,"column":11}},"21":{"start":{"line":78,"column":14},"end":{"line":78,"column":50}},"22":{"start":{"line":79,"column":14},"end":{"line":79,"column":20}},"23":{"start":{"line":82,"column":14},"end":{"line":82,"column":43}},"24":{"start":{"line":83,"column":14},"end":{"line":83,"column":20}},"25":{"start":{"line":85,"column":10},"end":{"line":85,"column":16}},"26":{"start":{"line":87,"column":6},"end":{"line":87,"column":15}},"27":{"start":{"line":92,"column":6},"end":{"line":92,"column":51}},"28":{"start":{"line":97,"column":6},"end":{"line":97,"column":33}},"29":{"start":{"line":102,"column":6},"end":{"line":102,"column":33}},"30":{"start":{"line":107,"column":6},"end":{"line":107,"column":12}},"31":{"start":{"line":109,"column":6},"end":{"line":116,"column":7}},"32":{"start":{"line":111,"column":10},"end":{"line":111,"column":46}},"33":{"start":{"line":112,"column":10},"end":{"line":112,"column":16}},"34":{"start":{"line":114,"column":10},"end":{"line":114,"column":46}},"35":{"start":{"line":115,"column":10},"end":{"line":115,"column":16}},"36":{"start":{"line":117,"column":6},"end":{"line":117,"column":15}},"37":{"start":{"line":122,"column":6},"end":{"line":122,"column":12}},"38":{"start":{"line":124,"column":6},"end":{"line":131,"column":7}},"39":{"start":{"line":126,"column":10},"end":{"line":126,"column":45}},"40":{"start":{"line":127,"column":10},"end":{"line":127,"column":16}},"41":{"start":{"line":129,"column":10},"end":{"line":129,"column":45}},"42":{"start":{"line":130,"column":10},"end":{"line":130,"column":16}},"43":{"start":{"line":132,"column":6},"end":{"line":132,"column":15}},"44":{"start":{"line":137,"column":6},"end":{"line":137,"column":63}},"45":{"start":{"line":142,"column":6},"end":{"line":142,"column":62}},"46":{"start":{"line":146,"column":2},"end":{"line":146,"column":61}},"47":{"start":{"line":148,"column":2},"end":{"line":148,"column":15}},"48":{"start":{"line":151,"column":0},"end":{"line":151,"column":23}},"49":{"start":{"line":152,"column":0},"end":{"line":152,"column":26}}},"branchMap":{"1":{"line":61,"type":"switch","locations":[{"start":{"line":62,"column":8},"end":{"line":73,"column":16}},{"start":{"line":74,"column":8},"end":{"line":85,"column":16}}]},"2":{"line":63,"type":"switch","locations":[{"start":{"line":64,"column":12},"end":{"line":67,"column":20}},{"start":{"line":68,"column":12},"end":{"line":71,"column":20}}]},"3":{"line":75,"type":"switch","locations":[{"start":{"line":76,"column":12},"end":{"line":79,"column":20}},{"start":{"line":80,"column":12},"end":{"line":83,"column":20}}]},"4":{"line":109,"type":"switch","locations":[{"start":{"line":110,"column":8},"end":{"line":112,"column":16}},{"start":{"line":113,"column":8},"end":{"line":115,"column":16}}]},"5":{"line":124,"type":"switch","locations":[{"start":{"line":125,"column":8},"end":{"line":127,"column":16}},{"start":{"line":128,"column":8},"end":{"line":130,"column":16}}]}},"code":["'use strict';","","function factory (type, config, load, typed) {","","  var matrix = load(require('../../type/matrix/function/matrix'));","","  var algorithm02 = load(require('../../type/matrix/utils/algorithm02'));","  var algorithm03 = load(require('../../type/matrix/utils/algorithm03'));","  var algorithm09 = load(require('../../type/matrix/utils/algorithm09'));","  var algorithm11 = load(require('../../type/matrix/utils/algorithm11'));","  var algorithm12 = load(require('../../type/matrix/utils/algorithm12'));","  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));","  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));","","  /**","   * Calculate the inverse tangent function with two arguments, y/x.","   * By providing two arguments, the right quadrant of the computed angle can be","   * determined.","   *","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.atan2(y, x)","   *","   * Examples:","   *","   *    math.atan2(2, 2) / math.pi;       // returns number 0.25","   *","   *    var angle = math.unit(60, 'deg'); // returns Unit 60 deg","   *    var x = math.cos(angle);","   *    var y = math.sin(angle);","   *","   *    math.atan(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i","   *","   * See also:","   *","   *    tan, atan, sin, cos","   *","   * @param {number | Array | Matrix} y  Second dimension","   * @param {number | Array | Matrix} x  First dimension","   * @return {number | Array | Matrix} Four-quadrant inverse tangent","   */","  var atan2 = typed('atan2', {","","    'number, number': Math.atan2,","","    // Complex numbers doesn't seem to have a reasonable implementation of","    // atan2(). Even Matlab removed the support, after they only calculated","    // the atan only on base of the real part of the numbers and ignored the imaginary.","","    'BigNumber, BigNumber': function (y, x) {","      return type.BigNumber.atan2(y, x);","    },","","    'Matrix, Matrix': function (x, y) {","      // result","      var c;","","      // process matrix storage","      switch (x.storage()) {","        case 'sparse':","          switch (y.storage()) {","            case 'sparse':","              // sparse .* sparse","              c = algorithm09(x, y, atan2, false);","              break;","            default:","              // sparse .* dense","              c = algorithm02(y, x, atan2, true);","              break;","          }","          break;","        default:","          switch (y.storage()) {","            case 'sparse':","              // dense .* sparse","              c = algorithm03(x, y, atan2, false);","              break;","            default:","              // dense .* dense","              c = algorithm13(x, y, atan2);","              break;","          }","          break;","      }","      return c;","    },","","    'Array, Array': function (x, y) {","      // use matrix implementation","      return atan2(matrix(x), matrix(y)).valueOf();","    },","","    'Array, Matrix': function (x, y) {","      // use matrix implementation","      return atan2(matrix(x), y);","    },","","    'Matrix, Array': function (x, y) {","      // use matrix implementation","      return atan2(x, matrix(y));","    },","","    'Matrix, number | BigNumber': function (x, y) {","      // result","      var c;","      // check storage format","      switch (x.storage()) {","        case 'sparse':","          c = algorithm11(x, y, atan2, false);","          break;","        default:","          c = algorithm14(x, y, atan2, false);","          break;","      }","      return c;","    },","","    'number | BigNumber, Matrix': function (x, y) {","      // result","      var c;","      // check storage format","      switch (y.storage()) {","        case 'sparse':","          c = algorithm12(y, x, atan2, true);","          break;","        default:","          c = algorithm14(y, x, atan2, true);","          break;","      }","      return c;","    },","","    'Array, number | BigNumber': function (x, y) {","      // use matrix implementation","      return algorithm14(matrix(x), y, atan2, false).valueOf();","    },","","    'number | BigNumber, Array': function (x, y) {","      // use matrix implementation","      return algorithm14(matrix(y), x, atan2, true).valueOf();","    }","  });","","  atan2.toTex = {2: '\\\\mathrm{atan2}\\\\left(${args}\\\\right)'};","","  return atan2;","}","","exports.name = 'atan2';","exports.factory = factory;",""],"l":{"3":1,"5":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"44":0,"53":0,"58":0,"61":0,"63":0,"66":0,"67":0,"70":0,"71":0,"73":0,"75":0,"78":0,"79":0,"82":0,"83":0,"85":0,"87":0,"92":0,"97":0,"102":0,"107":0,"109":0,"111":0,"112":0,"114":0,"115":0,"117":0,"122":0,"124":0,"126":0,"127":0,"129":0,"130":0,"132":0,"137":0,"142":0,"146":0,"148":0,"151":1,"152":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/atanh.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/atanh.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1,"13":0,"14":1,"15":1},"b":{"1":[0,0],"2":[0,0,0],"3":[1,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":28,"loc":{"start":{"line":28,"column":14},"end":{"line":28,"column":27}}},"3":{"name":"(anonymous_3)","line":35,"loc":{"start":{"line":35,"column":15},"end":{"line":35,"column":28}}},"4":{"name":"(anonymous_4)","line":39,"loc":{"start":{"line":39,"column":17},"end":{"line":39,"column":30}}},"5":{"name":"(anonymous_5)","line":43,"loc":{"start":{"line":43,"column":22},"end":{"line":43,"column":35}}},"6":{"name":"(anonymous_6)","line":60,"loc":{"start":{"line":60,"column":27},"end":{"line":60,"column":40}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":52,"column":1}},"3":{"start":{"line":27,"column":2},"end":{"line":47,"column":5}},"4":{"start":{"line":29,"column":6},"end":{"line":31,"column":7}},"5":{"start":{"line":30,"column":8},"end":{"line":30,"column":25}},"6":{"start":{"line":32,"column":6},"end":{"line":32,"column":44}},"7":{"start":{"line":36,"column":6},"end":{"line":36,"column":23}},"8":{"start":{"line":40,"column":6},"end":{"line":40,"column":23}},"9":{"start":{"line":45,"column":6},"end":{"line":45,"column":37}},"10":{"start":{"line":49,"column":2},"end":{"line":49,"column":60}},"11":{"start":{"line":51,"column":2},"end":{"line":51,"column":15}},"12":{"start":{"line":60,"column":0},"end":{"line":62,"column":2}},"13":{"start":{"line":61,"column":2},"end":{"line":61,"column":38}},"14":{"start":{"line":64,"column":0},"end":{"line":64,"column":23}},"15":{"start":{"line":65,"column":0},"end":{"line":65,"column":26}}},"branchMap":{"1":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":6},"end":{"line":29,"column":6}},{"start":{"line":29,"column":6},"end":{"line":29,"column":6}}]},"2":{"line":29,"type":"binary-expr","locations":[{"start":{"line":29,"column":11},"end":{"line":29,"column":17}},{"start":{"line":29,"column":21},"end":{"line":29,"column":28}},{"start":{"line":29,"column":33},"end":{"line":29,"column":51}}]},"3":{"line":60,"type":"binary-expr","locations":[{"start":{"line":60,"column":13},"end":{"line":60,"column":23}},{"start":{"line":60,"column":27},"end":{"line":62,"column":1}}]}},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","","function factory (type, config, load, typed) {","  /**","   * Calculate the hyperbolic arctangent of a value,","   * defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.","   *","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.atanh(x)","   *","   * Examples:","   *","   *    math.atanh(0.5);       // returns 0.5493061443340549","   *","   * See also:","   *","   *    acosh, asinh","   *","   * @param {number | Complex | Array | Matrix} x  Function input","   * @return {number | Complex | Array | Matrix} Hyperbolic arctangent of x","   */","  var atanh = typed('atanh', {","    'number': function (x) {","      if ((x <= 1 && x >= -1) || config.predictable) {","        return _atanh(x);","      }","      return new type.Complex(x, 0).atanh();","    },","","    'Complex': function (x) {","      return x.atanh();","    },","","    'BigNumber': function (x) {","      return x.atanh();","    },","","    'Array | Matrix': function (x) {","      // deep map collection, skip zeros since atanh(0) = 0","      return deepMap(x, atanh, true);","    }","  });","","  atanh.toTex = {1: '\\\\tanh^{-1}\\\\left(${args[0]}\\\\right)'};","","  return atanh;","}","","/**"," * Calculate the hyperbolic arctangent of a number"," * @param {number} x"," * @return {number}"," * @private"," */","var _atanh = Math.atanh || function (x) {","  return Math.log((1 + x)/(1 - x)) / 2","};","","exports.name = 'atanh';","exports.factory = factory;",""],"l":{"3":1,"5":1,"27":0,"29":0,"30":0,"32":0,"36":0,"40":0,"45":0,"49":0,"51":0,"60":1,"61":0,"64":1,"65":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/cos.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/cos.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1,"13":1},"b":{"1":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":36,"loc":{"start":{"line":36,"column":15},"end":{"line":36,"column":28}}},"3":{"name":"(anonymous_3)","line":40,"loc":{"start":{"line":40,"column":17},"end":{"line":40,"column":30}}},"4":{"name":"(anonymous_4)","line":44,"loc":{"start":{"line":44,"column":12},"end":{"line":44,"column":25}}},"5":{"name":"(anonymous_5)","line":51,"loc":{"start":{"line":51,"column":22},"end":{"line":51,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":59,"column":1}},"3":{"start":{"line":33,"column":2},"end":{"line":54,"column":5}},"4":{"start":{"line":37,"column":6},"end":{"line":37,"column":21}},"5":{"start":{"line":41,"column":6},"end":{"line":41,"column":21}},"6":{"start":{"line":45,"column":6},"end":{"line":47,"column":7}},"7":{"start":{"line":46,"column":8},"end":{"line":46,"column":65}},"8":{"start":{"line":48,"column":6},"end":{"line":48,"column":26}},"9":{"start":{"line":52,"column":6},"end":{"line":52,"column":29}},"10":{"start":{"line":56,"column":2},"end":{"line":56,"column":52}},"11":{"start":{"line":58,"column":2},"end":{"line":58,"column":13}},"12":{"start":{"line":61,"column":0},"end":{"line":61,"column":21}},"13":{"start":{"line":62,"column":0},"end":{"line":62,"column":26}}},"branchMap":{"1":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":6},"end":{"line":45,"column":6}},{"start":{"line":45,"column":6},"end":{"line":45,"column":6}}]}},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","","function factory (type, config, load, typed) {","","  /**","   * Calculate the cosine of a value.","   *","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.cos(x)","   *","   * Examples:","   *","   *    math.cos(2);                      // returns number -0.4161468365471422","   *    math.cos(math.pi / 4);            // returns number  0.7071067811865475","   *    math.cos(math.unit(180, 'deg'));  // returns number -1","   *    math.cos(math.unit(60, 'deg'));   // returns number  0.5","   *","   *    var angle = 0.2;","   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2); // returns number ~1","   *","   * See also:","   *","   *    cos, tan","   *","   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input","   * @return {number | BigNumber | Complex | Array | Matrix} Cosine of x","   */","  var cos = typed('cos', {","    'number': Math.cos,","","    'Complex': function (x) {","      return x.cos();","    },","","    'BigNumber': function (x) {","      return x.cos();","    },","","    'Unit': function (x) {","      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {","        throw new TypeError ('Unit in function cos is no angle');","      }","      return cos(x.value);","    },","","    'Array | Matrix': function (x) {","      return deepMap(x, cos);","    }","  });","","  cos.toTex = {1: '\\\\cos\\\\left(${args[0]}\\\\right)'};","","  return cos;","}","","exports.name = 'cos';","exports.factory = factory;",""],"l":{"3":1,"5":1,"33":0,"37":0,"41":0,"45":0,"46":0,"48":0,"52":0,"56":0,"58":0,"61":1,"62":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/cosh.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/cosh.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1,"13":0,"14":1,"15":1},"b":{"1":[0,0],"2":[1,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":30,"loc":{"start":{"line":30,"column":15},"end":{"line":30,"column":28}}},"3":{"name":"(anonymous_3)","line":34,"loc":{"start":{"line":34,"column":17},"end":{"line":34,"column":30}}},"4":{"name":"(anonymous_4)","line":38,"loc":{"start":{"line":38,"column":12},"end":{"line":38,"column":25}}},"5":{"name":"(anonymous_5)","line":45,"loc":{"start":{"line":45,"column":22},"end":{"line":45,"column":35}}},"6":{"name":"(anonymous_6)","line":61,"loc":{"start":{"line":61,"column":25},"end":{"line":61,"column":38}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":53,"column":1}},"3":{"start":{"line":27,"column":2},"end":{"line":48,"column":5}},"4":{"start":{"line":31,"column":6},"end":{"line":31,"column":22}},"5":{"start":{"line":35,"column":6},"end":{"line":35,"column":22}},"6":{"start":{"line":39,"column":6},"end":{"line":41,"column":7}},"7":{"start":{"line":40,"column":8},"end":{"line":40,"column":66}},"8":{"start":{"line":42,"column":6},"end":{"line":42,"column":27}},"9":{"start":{"line":46,"column":6},"end":{"line":46,"column":30}},"10":{"start":{"line":50,"column":2},"end":{"line":50,"column":54}},"11":{"start":{"line":52,"column":2},"end":{"line":52,"column":14}},"12":{"start":{"line":61,"column":0},"end":{"line":63,"column":2}},"13":{"start":{"line":62,"column":2},"end":{"line":62,"column":42}},"14":{"start":{"line":65,"column":0},"end":{"line":65,"column":22}},"15":{"start":{"line":66,"column":0},"end":{"line":66,"column":26}}},"branchMap":{"1":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":6},"end":{"line":39,"column":6}},{"start":{"line":39,"column":6},"end":{"line":39,"column":6}}]},"2":{"line":61,"type":"binary-expr","locations":[{"start":{"line":61,"column":12},"end":{"line":61,"column":21}},{"start":{"line":61,"column":25},"end":{"line":63,"column":1}}]}},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","","function factory (type, config, load, typed) {","  /**","   * Calculate the hyperbolic cosine of a value,","   * defined as `cosh(x) = 1/2 * (exp(x) + exp(-x))`.","   *","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.cosh(x)","   *","   * Examples:","   *","   *    math.cosh(0.5);       // returns number 1.1276259652063807","   *","   * See also:","   *","   *    sinh, tanh","   *","   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input","   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic cosine of x","   */","  var cosh = typed('cosh', {","    'number': _cosh,","","    'Complex': function (x) {","      return x.cosh();","    },","","    'BigNumber': function (x) {","      return x.cosh();","    },","","    'Unit': function (x) {","      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {","        throw new TypeError ('Unit in function cosh is no angle');","      }","      return cosh(x.value);","    },","","    'Array | Matrix': function (x) {","      return deepMap(x, cosh);","    }","  });","","  cosh.toTex = {1: '\\\\cosh\\\\left(${args[0]}\\\\right)'};","","  return cosh;","}","","/**"," * Calculate the hyperbolic cosine of a number"," * @param {number} x"," * @returns {number}"," * @private"," */","var _cosh = Math.cosh || function (x) {","  return (Math.exp(x) + Math.exp(-x)) / 2;","};","","exports.name = 'cosh';","exports.factory = factory;",""],"l":{"3":1,"5":1,"27":0,"31":0,"35":0,"39":0,"40":0,"42":0,"46":0,"50":0,"52":0,"61":1,"62":0,"65":1,"66":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/cot.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/cot.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1,"14":1},"b":{"1":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":28,"loc":{"start":{"line":28,"column":14},"end":{"line":28,"column":27}}},"3":{"name":"(anonymous_3)","line":32,"loc":{"start":{"line":32,"column":15},"end":{"line":32,"column":28}}},"4":{"name":"(anonymous_4)","line":36,"loc":{"start":{"line":36,"column":17},"end":{"line":36,"column":30}}},"5":{"name":"(anonymous_5)","line":40,"loc":{"start":{"line":40,"column":12},"end":{"line":40,"column":25}}},"6":{"name":"(anonymous_6)","line":47,"loc":{"start":{"line":47,"column":22},"end":{"line":47,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":55,"column":1}},"3":{"start":{"line":27,"column":2},"end":{"line":50,"column":5}},"4":{"start":{"line":29,"column":6},"end":{"line":29,"column":29}},"5":{"start":{"line":33,"column":6},"end":{"line":33,"column":21}},"6":{"start":{"line":37,"column":6},"end":{"line":37,"column":48}},"7":{"start":{"line":41,"column":6},"end":{"line":43,"column":7}},"8":{"start":{"line":42,"column":8},"end":{"line":42,"column":65}},"9":{"start":{"line":44,"column":6},"end":{"line":44,"column":26}},"10":{"start":{"line":48,"column":6},"end":{"line":48,"column":29}},"11":{"start":{"line":52,"column":2},"end":{"line":52,"column":52}},"12":{"start":{"line":54,"column":2},"end":{"line":54,"column":13}},"13":{"start":{"line":57,"column":0},"end":{"line":57,"column":21}},"14":{"start":{"line":58,"column":0},"end":{"line":58,"column":26}}},"branchMap":{"1":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":6},"end":{"line":41,"column":6}},{"start":{"line":41,"column":6},"end":{"line":41,"column":6}}]}},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","","function factory (type, config, load, typed) {","  /**","   * Calculate the cotangent of a value. Defined as `cot(x) = 1 / tan(x)`.","   *","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.cot(x)","   *","   * Examples:","   *","   *    math.cot(2);      // returns number -0.45765755436028577","   *    1 / math.tan(2);  // returns number -0.45765755436028577","   *","   * See also:","   *","   *    tan, sec, csc","   *","   * @param {number | Complex | Unit | Array | Matrix} x  Function input","   * @return {number | Complex | Array | Matrix} Cotangent of x","   */","  var cot = typed('cot', {","    'number': function (x) {","      return 1 / Math.tan(x);","    },","","    'Complex': function (x) {","      return x.cot();","    },","","    'BigNumber': function (x) {","      return new type.BigNumber(1).div(x.tan());","    },","","    'Unit': function (x) {","      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {","        throw new TypeError ('Unit in function cot is no angle');","      }","      return cot(x.value);","    },","","    'Array | Matrix': function (x) {","      return deepMap(x, cot);","    }","  });","","  cot.toTex = {1: '\\\\cot\\\\left(${args[0]}\\\\right)'};","","  return cot;","}","","exports.name = 'cot';","exports.factory = factory;",""],"l":{"3":1,"5":1,"27":0,"29":0,"33":0,"37":0,"41":0,"42":0,"44":0,"48":0,"52":0,"54":0,"57":1,"58":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/coth.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/coth.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1,"13":0,"14":0,"15":1,"16":1},"b":{"1":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":32,"loc":{"start":{"line":32,"column":15},"end":{"line":32,"column":28}}},"3":{"name":"(anonymous_3)","line":36,"loc":{"start":{"line":36,"column":17},"end":{"line":36,"column":30}}},"4":{"name":"(anonymous_4)","line":40,"loc":{"start":{"line":40,"column":12},"end":{"line":40,"column":25}}},"5":{"name":"(anonymous_5)","line":47,"loc":{"start":{"line":47,"column":22},"end":{"line":47,"column":35}}},"6":{"name":"_coth","line":63,"loc":{"start":{"line":63,"column":0},"end":{"line":63,"column":18}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":55,"column":1}},"3":{"start":{"line":29,"column":2},"end":{"line":50,"column":5}},"4":{"start":{"line":33,"column":6},"end":{"line":33,"column":22}},"5":{"start":{"line":37,"column":6},"end":{"line":37,"column":49}},"6":{"start":{"line":41,"column":6},"end":{"line":43,"column":7}},"7":{"start":{"line":42,"column":8},"end":{"line":42,"column":66}},"8":{"start":{"line":44,"column":6},"end":{"line":44,"column":27}},"9":{"start":{"line":48,"column":6},"end":{"line":48,"column":30}},"10":{"start":{"line":52,"column":2},"end":{"line":52,"column":54}},"11":{"start":{"line":54,"column":2},"end":{"line":54,"column":14}},"12":{"start":{"line":63,"column":0},"end":{"line":66,"column":1}},"13":{"start":{"line":64,"column":2},"end":{"line":64,"column":26}},"14":{"start":{"line":65,"column":2},"end":{"line":65,"column":27}},"15":{"start":{"line":68,"column":0},"end":{"line":68,"column":22}},"16":{"start":{"line":69,"column":0},"end":{"line":69,"column":26}}},"branchMap":{"1":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":6},"end":{"line":41,"column":6}},{"start":{"line":41,"column":6},"end":{"line":41,"column":6}}]}},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","","function factory (type, config, load, typed) {","  /**","   * Calculate the hyperbolic cotangent of a value,","   * defined as `coth(x) = 1 / tanh(x)`.","   *","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.coth(x)","   *","   * Examples:","   *","   *    // coth(x) = 1 / tanh(x)","   *    math.coth(2);         // returns 1.0373147207275482","   *    1 / math.tanh(2);     // returns 1.0373147207275482","   *","   * See also:","   *","   *    sinh, tanh, cosh","   *","   * @param {number | Complex | Unit | Array | Matrix} x  Function input","   * @return {number | Complex | Array | Matrix} Hyperbolic cotangent of x","   */","  var coth = typed('coth', {","    'number': _coth,","","    'Complex': function (x) {","      return x.coth();","    },","","    'BigNumber': function (x) {","      return new type.BigNumber(1).div(x.tanh());","    },","","    'Unit': function (x) {","      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {","        throw new TypeError ('Unit in function coth is no angle');","      }","      return coth(x.value);","    },","","    'Array | Matrix': function (x) {","      return deepMap(x, coth);","    }","  });","","  coth.toTex = {1: '\\\\coth\\\\left(${args[0]}\\\\right)'};","","  return coth;","}","","/**"," * Calculate the hyperbolic cosine of a number"," * @param {number} x"," * @returns {number}"," * @private"," */","function _coth(x) {","  var e = Math.exp(2 * x);","  return (e + 1) / (e - 1);","}","","exports.name = 'coth';","exports.factory = factory;",""],"l":{"3":1,"5":1,"29":0,"33":0,"37":0,"41":0,"42":0,"44":0,"48":0,"52":0,"54":0,"63":1,"64":0,"65":0,"68":1,"69":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/csc.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/csc.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1,"14":1},"b":{"1":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":28,"loc":{"start":{"line":28,"column":14},"end":{"line":28,"column":27}}},"3":{"name":"(anonymous_3)","line":32,"loc":{"start":{"line":32,"column":15},"end":{"line":32,"column":28}}},"4":{"name":"(anonymous_4)","line":36,"loc":{"start":{"line":36,"column":17},"end":{"line":36,"column":30}}},"5":{"name":"(anonymous_5)","line":40,"loc":{"start":{"line":40,"column":12},"end":{"line":40,"column":25}}},"6":{"name":"(anonymous_6)","line":47,"loc":{"start":{"line":47,"column":22},"end":{"line":47,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":55,"column":1}},"3":{"start":{"line":27,"column":2},"end":{"line":50,"column":5}},"4":{"start":{"line":29,"column":6},"end":{"line":29,"column":29}},"5":{"start":{"line":33,"column":6},"end":{"line":33,"column":21}},"6":{"start":{"line":37,"column":6},"end":{"line":37,"column":48}},"7":{"start":{"line":41,"column":6},"end":{"line":43,"column":7}},"8":{"start":{"line":42,"column":8},"end":{"line":42,"column":65}},"9":{"start":{"line":44,"column":6},"end":{"line":44,"column":26}},"10":{"start":{"line":48,"column":6},"end":{"line":48,"column":29}},"11":{"start":{"line":52,"column":2},"end":{"line":52,"column":52}},"12":{"start":{"line":54,"column":2},"end":{"line":54,"column":13}},"13":{"start":{"line":57,"column":0},"end":{"line":57,"column":21}},"14":{"start":{"line":58,"column":0},"end":{"line":58,"column":26}}},"branchMap":{"1":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":6},"end":{"line":41,"column":6}},{"start":{"line":41,"column":6},"end":{"line":41,"column":6}}]}},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","","function factory (type, config, load, typed) {","  /**","   * Calculate the cosecant of a value, defined as `csc(x) = 1/sin(x)`.","   *","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.csc(x)","   *","   * Examples:","   *","   *    math.csc(2);      // returns number 1.099750170294617","   *    1 / math.sin(2);  // returns number 1.099750170294617","   *","   * See also:","   *","   *    sin, sec, cot","   *","   * @param {number | Complex | Unit | Array | Matrix} x  Function input","   * @return {number | Complex | Array | Matrix} Cosecant of x","   */","  var csc = typed('csc', {","    'number': function (x) {","      return 1 / Math.sin(x);","    },","","    'Complex': function (x) {","      return x.csc();","    },","","    'BigNumber': function (x) {","      return new type.BigNumber(1).div(x.sin());","    },","","    'Unit': function (x) {","      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {","        throw new TypeError ('Unit in function csc is no angle');","      }","      return csc(x.value);","    },","","    'Array | Matrix': function (x) {","      return deepMap(x, csc);","    }","  });","","  csc.toTex = {1: '\\\\csc\\\\left(${args[0]}\\\\right)'};","","  return csc;","}","","exports.name = 'csc';","exports.factory = factory;",""],"l":{"3":1,"5":1,"27":0,"29":0,"33":0,"37":0,"41":0,"42":0,"44":0,"48":0,"52":0,"54":0,"57":1,"58":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/csch.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/csch.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1,"14":0,"15":0,"16":0,"17":1,"18":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"factory","line":6,"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":45}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":15},"end":{"line":33,"column":28}}},"3":{"name":"(anonymous_3)","line":37,"loc":{"start":{"line":37,"column":17},"end":{"line":37,"column":30}}},"4":{"name":"(anonymous_4)","line":41,"loc":{"start":{"line":41,"column":12},"end":{"line":41,"column":25}}},"5":{"name":"(anonymous_5)","line":48,"loc":{"start":{"line":48,"column":22},"end":{"line":48,"column":35}}},"6":{"name":"_csch","line":64,"loc":{"start":{"line":64,"column":0},"end":{"line":64,"column":18}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":46}},"3":{"start":{"line":6,"column":0},"end":{"line":56,"column":1}},"4":{"start":{"line":30,"column":2},"end":{"line":51,"column":5}},"5":{"start":{"line":34,"column":6},"end":{"line":34,"column":22}},"6":{"start":{"line":38,"column":6},"end":{"line":38,"column":49}},"7":{"start":{"line":42,"column":6},"end":{"line":44,"column":7}},"8":{"start":{"line":43,"column":8},"end":{"line":43,"column":66}},"9":{"start":{"line":45,"column":6},"end":{"line":45,"column":27}},"10":{"start":{"line":49,"column":6},"end":{"line":49,"column":30}},"11":{"start":{"line":53,"column":2},"end":{"line":53,"column":62}},"12":{"start":{"line":55,"column":2},"end":{"line":55,"column":14}},"13":{"start":{"line":64,"column":0},"end":{"line":72,"column":1}},"14":{"start":{"line":66,"column":2},"end":{"line":71,"column":3}},"15":{"start":{"line":67,"column":4},"end":{"line":67,"column":36}},"16":{"start":{"line":70,"column":4},"end":{"line":70,"column":64}},"17":{"start":{"line":74,"column":0},"end":{"line":74,"column":22}},"18":{"start":{"line":75,"column":0},"end":{"line":75,"column":26}}},"branchMap":{"1":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":6},"end":{"line":42,"column":6}},{"start":{"line":42,"column":6},"end":{"line":42,"column":6}}]},"2":{"line":66,"type":"if","locations":[{"start":{"line":66,"column":2},"end":{"line":66,"column":2}},{"start":{"line":66,"column":2},"end":{"line":66,"column":2}}]}},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","var sign = require('../../utils/number').sign;","","function factory (type, config, load, typed) {","  /**","   * Calculate the hyperbolic cosecant of a value,","   * defined as `csch(x) = 1 / sinh(x)`.","   *","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.csch(x)","   *","   * Examples:","   *","   *    // csch(x) = 1/ sinh(x)","   *    math.csch(0.5);       // returns 1.9190347513349437","   *    1 / math.sinh(0.5);   // returns 1.9190347513349437","   *","   * See also:","   *","   *    sinh, sech, coth","   *","   * @param {number | Complex | Unit | Array | Matrix} x  Function input","   * @return {number | Complex | Array | Matrix} Hyperbolic cosecant of x","   */","  var csch = typed('csch', {","    'number': _csch,","","    'Complex': function (x) {","      return x.csch();","    },","","    'BigNumber': function (x) {","      return new type.BigNumber(1).div(x.sinh());","    },","","    'Unit': function (x) {","      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {","        throw new TypeError ('Unit in function csch is no angle');","      }","      return csch(x.value);","    },","","    'Array | Matrix': function (x) {","      return deepMap(x, csch);","    }","  });","","  csch.toTex = {1: '\\\\mathrm{csch}\\\\left(${args[0]}\\\\right)'};","","  return csch;","}","","/**"," * Calculate the hyperbolic cosecant of a number"," * @param {number} x"," * @returns {number}"," * @private"," */","function _csch(x) {","  // consider values close to zero (+/-)","  if (x == 0) {","    return Number.POSITIVE_INFINITY;","  }","  else {","    return Math.abs(2 / (Math.exp(x) - Math.exp(-x))) * sign(x);","  }","}","","exports.name = 'csch';","exports.factory = factory;",""],"l":{"3":1,"4":1,"6":1,"30":0,"34":0,"38":0,"42":0,"43":0,"45":0,"49":0,"53":0,"55":0,"64":1,"66":0,"67":0,"70":0,"74":1,"75":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/sec.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/sec.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1,"14":1},"b":{"1":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":28,"loc":{"start":{"line":28,"column":14},"end":{"line":28,"column":27}}},"3":{"name":"(anonymous_3)","line":32,"loc":{"start":{"line":32,"column":15},"end":{"line":32,"column":28}}},"4":{"name":"(anonymous_4)","line":36,"loc":{"start":{"line":36,"column":17},"end":{"line":36,"column":30}}},"5":{"name":"(anonymous_5)","line":40,"loc":{"start":{"line":40,"column":12},"end":{"line":40,"column":25}}},"6":{"name":"(anonymous_6)","line":47,"loc":{"start":{"line":47,"column":22},"end":{"line":47,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":55,"column":1}},"3":{"start":{"line":27,"column":2},"end":{"line":50,"column":5}},"4":{"start":{"line":29,"column":6},"end":{"line":29,"column":29}},"5":{"start":{"line":33,"column":6},"end":{"line":33,"column":21}},"6":{"start":{"line":37,"column":6},"end":{"line":37,"column":48}},"7":{"start":{"line":41,"column":6},"end":{"line":43,"column":7}},"8":{"start":{"line":42,"column":8},"end":{"line":42,"column":65}},"9":{"start":{"line":44,"column":6},"end":{"line":44,"column":26}},"10":{"start":{"line":48,"column":6},"end":{"line":48,"column":29}},"11":{"start":{"line":52,"column":2},"end":{"line":52,"column":52}},"12":{"start":{"line":54,"column":2},"end":{"line":54,"column":13}},"13":{"start":{"line":57,"column":0},"end":{"line":57,"column":21}},"14":{"start":{"line":58,"column":0},"end":{"line":58,"column":26}}},"branchMap":{"1":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":6},"end":{"line":41,"column":6}},{"start":{"line":41,"column":6},"end":{"line":41,"column":6}}]}},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","","function factory (type, config, load, typed) {","  /**","   * Calculate the secant of a value, defined as `sec(x) = 1/cos(x)`.","   *","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.sec(x)","   *","   * Examples:","   *","   *    math.sec(2);      // returns number -2.4029979617223822","   *    1 / math.cos(2);  // returns number -2.4029979617223822","   *","   * See also:","   *","   *    cos, csc, cot","   *","   * @param {number | Complex | Unit | Array | Matrix} x  Function input","   * @return {number | Complex | Array | Matrix} Secant of x","   */","  var sec = typed('sec', {","    'number': function (x) {","      return 1 / Math.cos(x);","    },","","    'Complex': function (x) {","      return x.sec();","    },","","    'BigNumber': function (x) {","      return new type.BigNumber(1).div(x.cos());","    },","","    'Unit': function (x) {","      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {","        throw new TypeError ('Unit in function sec is no angle');","      }","      return sec(x.value);","    },","","    'Array | Matrix': function (x) {","      return deepMap(x, sec);","    }","  });","","  sec.toTex = {1: '\\\\sec\\\\left(${args[0]}\\\\right)'};","","  return sec;","}","","exports.name = 'sec';","exports.factory = factory;",""],"l":{"3":1,"5":1,"27":0,"29":0,"33":0,"37":0,"41":0,"42":0,"44":0,"48":0,"52":0,"54":0,"57":1,"58":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/sech.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/sech.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1,"13":0,"14":1,"15":1},"b":{"1":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":32,"loc":{"start":{"line":32,"column":15},"end":{"line":32,"column":28}}},"3":{"name":"(anonymous_3)","line":36,"loc":{"start":{"line":36,"column":17},"end":{"line":36,"column":30}}},"4":{"name":"(anonymous_4)","line":40,"loc":{"start":{"line":40,"column":12},"end":{"line":40,"column":25}}},"5":{"name":"(anonymous_5)","line":47,"loc":{"start":{"line":47,"column":22},"end":{"line":47,"column":35}}},"6":{"name":"_sech","line":63,"loc":{"start":{"line":63,"column":0},"end":{"line":63,"column":18}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":55,"column":1}},"3":{"start":{"line":29,"column":2},"end":{"line":50,"column":5}},"4":{"start":{"line":33,"column":6},"end":{"line":33,"column":22}},"5":{"start":{"line":37,"column":6},"end":{"line":37,"column":49}},"6":{"start":{"line":41,"column":6},"end":{"line":43,"column":7}},"7":{"start":{"line":42,"column":8},"end":{"line":42,"column":66}},"8":{"start":{"line":44,"column":6},"end":{"line":44,"column":27}},"9":{"start":{"line":48,"column":6},"end":{"line":48,"column":30}},"10":{"start":{"line":52,"column":2},"end":{"line":52,"column":62}},"11":{"start":{"line":54,"column":2},"end":{"line":54,"column":14}},"12":{"start":{"line":63,"column":0},"end":{"line":65,"column":1}},"13":{"start":{"line":64,"column":2},"end":{"line":64,"column":42}},"14":{"start":{"line":67,"column":0},"end":{"line":67,"column":22}},"15":{"start":{"line":68,"column":0},"end":{"line":68,"column":26}}},"branchMap":{"1":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":6},"end":{"line":41,"column":6}},{"start":{"line":41,"column":6},"end":{"line":41,"column":6}}]}},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","","function factory (type, config, load, typed) {","  /**","   * Calculate the hyperbolic secant of a value,","   * defined as `sech(x) = 1 / cosh(x)`.","   *","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.sech(x)","   *","   * Examples:","   *","   *    // sech(x) = 1/ cosh(x)","   *    math.sech(0.5);       // returns 0.886818883970074","   *    1 / math.cosh(0.5);   // returns 0.886818883970074","   *","   * See also:","   *","   *    cosh, csch, coth","   *","   * @param {number | Complex | Unit | Array | Matrix} x  Function input","   * @return {number | Complex | Array | Matrix} Hyperbolic secant of x","   */","  var sech = typed('sech', {","    'number': _sech,","","    'Complex': function (x) {","      return x.sech();","    },","","    'BigNumber': function (x) {","      return new type.BigNumber(1).div(x.cosh());","    },","","    'Unit': function (x) {","      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {","        throw new TypeError ('Unit in function sech is no angle');","      }","      return sech(x.value);","    },","","    'Array | Matrix': function (x) {","      return deepMap(x, sech);","    }","  });","","  sech.toTex = {1: '\\\\mathrm{sech}\\\\left(${args[0]}\\\\right)'};","","  return sech;","}","","/**"," * Calculate the hyperbolic secant of a number"," * @param {number} x"," * @returns {number}"," * @private"," */","function _sech(x) {","  return 2 / (Math.exp(x) + Math.exp(-x));","}","","exports.name = 'sech';","exports.factory = factory;",""],"l":{"3":1,"5":1,"29":0,"33":0,"37":0,"41":0,"42":0,"44":0,"48":0,"52":0,"54":0,"63":1,"64":0,"67":1,"68":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/sin.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/sin.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1,"13":1},"b":{"1":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":36,"loc":{"start":{"line":36,"column":15},"end":{"line":36,"column":28}}},"3":{"name":"(anonymous_3)","line":40,"loc":{"start":{"line":40,"column":17},"end":{"line":40,"column":30}}},"4":{"name":"(anonymous_4)","line":44,"loc":{"start":{"line":44,"column":12},"end":{"line":44,"column":25}}},"5":{"name":"(anonymous_5)","line":51,"loc":{"start":{"line":51,"column":22},"end":{"line":51,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":60,"column":1}},"3":{"start":{"line":33,"column":2},"end":{"line":55,"column":5}},"4":{"start":{"line":37,"column":6},"end":{"line":37,"column":21}},"5":{"start":{"line":41,"column":6},"end":{"line":41,"column":21}},"6":{"start":{"line":45,"column":6},"end":{"line":47,"column":7}},"7":{"start":{"line":46,"column":8},"end":{"line":46,"column":65}},"8":{"start":{"line":48,"column":6},"end":{"line":48,"column":26}},"9":{"start":{"line":53,"column":6},"end":{"line":53,"column":35}},"10":{"start":{"line":57,"column":2},"end":{"line":57,"column":52}},"11":{"start":{"line":59,"column":2},"end":{"line":59,"column":13}},"12":{"start":{"line":62,"column":0},"end":{"line":62,"column":21}},"13":{"start":{"line":63,"column":0},"end":{"line":63,"column":26}}},"branchMap":{"1":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":6},"end":{"line":45,"column":6}},{"start":{"line":45,"column":6},"end":{"line":45,"column":6}}]}},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","","function factory (type, config, load, typed) {","","  /**","   * Calculate the sine of a value.","   *","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.sin(x)","   *","   * Examples:","   *","   *    math.sin(2);                      // returns number 0.9092974268256813","   *    math.sin(math.pi / 4);            // returns number 0.7071067811865475","   *    math.sin(math.unit(90, 'deg'));   // returns number 1","   *    math.sin(math.unit(30, 'deg'));   // returns number 0.5","   *","   *    var angle = 0.2;","   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2); // returns number ~1","   *","   * See also:","   *","   *    cos, tan","   *","   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input","   * @return {number | BigNumber | Complex | Array | Matrix} Sine of x","   */","  var sin = typed('sin', {","    'number': Math.sin,","","    'Complex': function (x) {","      return x.sin();","    },","","    'BigNumber': function (x) {","      return x.sin();","    },","","    'Unit': function (x) {","      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {","        throw new TypeError ('Unit in function sin is no angle');","      }","      return sin(x.value);","    },","","    'Array | Matrix': function (x) {","      // deep map collection, skip zeros since sin(0) = 0","      return deepMap(x, sin, true);","    }","  });","","  sin.toTex = {1: '\\\\sin\\\\left(${args[0]}\\\\right)'};","","  return sin;","}","","exports.name = 'sin';","exports.factory = factory;",""],"l":{"3":1,"5":1,"33":0,"37":0,"41":0,"45":0,"46":0,"48":0,"53":0,"57":0,"59":0,"62":1,"63":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/sinh.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/sinh.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1,"13":0,"14":1,"15":1},"b":{"1":[0,0],"2":[1,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":30,"loc":{"start":{"line":30,"column":15},"end":{"line":30,"column":28}}},"3":{"name":"(anonymous_3)","line":34,"loc":{"start":{"line":34,"column":17},"end":{"line":34,"column":30}}},"4":{"name":"(anonymous_4)","line":38,"loc":{"start":{"line":38,"column":12},"end":{"line":38,"column":25}}},"5":{"name":"(anonymous_5)","line":45,"loc":{"start":{"line":45,"column":22},"end":{"line":45,"column":35}}},"6":{"name":"(anonymous_6)","line":62,"loc":{"start":{"line":62,"column":25},"end":{"line":62,"column":38}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":54,"column":1}},"3":{"start":{"line":27,"column":2},"end":{"line":49,"column":5}},"4":{"start":{"line":31,"column":6},"end":{"line":31,"column":22}},"5":{"start":{"line":35,"column":6},"end":{"line":35,"column":22}},"6":{"start":{"line":39,"column":6},"end":{"line":41,"column":7}},"7":{"start":{"line":40,"column":8},"end":{"line":40,"column":66}},"8":{"start":{"line":42,"column":6},"end":{"line":42,"column":27}},"9":{"start":{"line":47,"column":6},"end":{"line":47,"column":36}},"10":{"start":{"line":51,"column":2},"end":{"line":51,"column":54}},"11":{"start":{"line":53,"column":2},"end":{"line":53,"column":14}},"12":{"start":{"line":62,"column":0},"end":{"line":64,"column":2}},"13":{"start":{"line":63,"column":2},"end":{"line":63,"column":42}},"14":{"start":{"line":66,"column":0},"end":{"line":66,"column":22}},"15":{"start":{"line":67,"column":0},"end":{"line":67,"column":26}}},"branchMap":{"1":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":6},"end":{"line":39,"column":6}},{"start":{"line":39,"column":6},"end":{"line":39,"column":6}}]},"2":{"line":62,"type":"binary-expr","locations":[{"start":{"line":62,"column":12},"end":{"line":62,"column":21}},{"start":{"line":62,"column":25},"end":{"line":64,"column":1}}]}},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","","function factory (type, config, load, typed) {","  /**","   * Calculate the hyperbolic sine of a value,","   * defined as `sinh(x) = 1/2 * (exp(x) - exp(-x))`.","   *","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.sinh(x)","   *","   * Examples:","   *","   *    math.sinh(0.5);       // returns number 0.5210953054937474","   *","   * See also:","   *","   *    cosh, tanh","   *","   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input","   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic sine of x","   */","  var sinh = typed('sinh', {","    'number': _sinh,","","    'Complex': function (x) {","      return x.sinh();","    },","","    'BigNumber': function (x) {","      return x.sinh();","    },","","    'Unit': function (x) {","      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {","        throw new TypeError ('Unit in function sinh is no angle');","      }","      return sinh(x.value);","    },","","    'Array | Matrix': function (x) {","      // deep map collection, skip zeros since sinh(0) = 0","      return deepMap(x, sinh, true);","    }","  });","","  sinh.toTex = {1: '\\\\sinh\\\\left(${args[0]}\\\\right)'};","","  return sinh;","}","","/**"," * Calculate the hyperbolic sine of a number"," * @param {number} x"," * @returns {number}"," * @private"," */","var _sinh = Math.sinh || function (x) {","  return (Math.exp(x) - Math.exp(-x)) / 2;","};","","exports.name = 'sinh';","exports.factory = factory;",""],"l":{"3":1,"5":1,"27":0,"31":0,"35":0,"39":0,"40":0,"42":0,"47":0,"51":0,"53":0,"62":1,"63":0,"66":1,"67":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/tan.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/tan.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1,"13":1},"b":{"1":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":32,"loc":{"start":{"line":32,"column":15},"end":{"line":32,"column":28}}},"3":{"name":"(anonymous_3)","line":36,"loc":{"start":{"line":36,"column":17},"end":{"line":36,"column":30}}},"4":{"name":"(anonymous_4)","line":40,"loc":{"start":{"line":40,"column":12},"end":{"line":40,"column":25}}},"5":{"name":"(anonymous_5)","line":47,"loc":{"start":{"line":47,"column":22},"end":{"line":47,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":56,"column":1}},"3":{"start":{"line":29,"column":2},"end":{"line":51,"column":5}},"4":{"start":{"line":33,"column":8},"end":{"line":33,"column":23}},"5":{"start":{"line":37,"column":6},"end":{"line":37,"column":21}},"6":{"start":{"line":41,"column":6},"end":{"line":43,"column":7}},"7":{"start":{"line":42,"column":8},"end":{"line":42,"column":65}},"8":{"start":{"line":44,"column":6},"end":{"line":44,"column":26}},"9":{"start":{"line":49,"column":6},"end":{"line":49,"column":35}},"10":{"start":{"line":53,"column":2},"end":{"line":53,"column":52}},"11":{"start":{"line":55,"column":2},"end":{"line":55,"column":13}},"12":{"start":{"line":58,"column":0},"end":{"line":58,"column":21}},"13":{"start":{"line":59,"column":0},"end":{"line":59,"column":26}}},"branchMap":{"1":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":6},"end":{"line":41,"column":6}},{"start":{"line":41,"column":6},"end":{"line":41,"column":6}}]}},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","","function factory (type, config, load, typed) {","  /**","   * Calculate the tangent of a value. `tan(x)` is equal to `sin(x) / cos(x)`.","   *","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.tan(x)","   *","   * Examples:","   *","   *    math.tan(0.5);                    // returns number 0.5463024898437905","   *    math.sin(0.5) / math.cos(0.5);    // returns number 0.5463024898437905","   *    math.tan(math.pi / 4);            // returns number 1","   *    math.tan(math.unit(45, 'deg'));   // returns number 1","   *","   * See also:","   *","   *    atan, sin, cos","   *","   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input","   * @return {number | BigNumber | Complex | Array | Matrix} Tangent of x","   */","  var tan = typed('tan', {","    'number': Math.tan,","","    'Complex': function (x) {","        return x.tan();","    },","","    'BigNumber': function (x) {","      return x.tan();","    },","","    'Unit': function (x) {","      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {","        throw new TypeError ('Unit in function tan is no angle');","      }","      return tan(x.value);","    },","","    'Array | Matrix': function (x) {","      // deep map collection, skip zeros since tan(0) = 0","      return deepMap(x, tan, true);","    }","  });","","  tan.toTex = {1: '\\\\tan\\\\left(${args[0]}\\\\right)'};","","  return tan;","}","","exports.name = 'tan';","exports.factory = factory;",""],"l":{"3":1,"5":1,"29":0,"33":0,"37":0,"41":0,"42":0,"44":0,"49":0,"53":0,"55":0,"58":1,"59":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/tanh.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/trigonometry/tanh.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1,"13":0,"14":0,"15":1,"16":1},"b":{"1":[0,0],"2":[1,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":15},"end":{"line":33,"column":28}}},"3":{"name":"(anonymous_3)","line":37,"loc":{"start":{"line":37,"column":17},"end":{"line":37,"column":30}}},"4":{"name":"(anonymous_4)","line":41,"loc":{"start":{"line":41,"column":12},"end":{"line":41,"column":25}}},"5":{"name":"(anonymous_5)","line":48,"loc":{"start":{"line":48,"column":22},"end":{"line":48,"column":35}}},"6":{"name":"(anonymous_6)","line":65,"loc":{"start":{"line":65,"column":25},"end":{"line":65,"column":38}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":0},"end":{"line":57,"column":1}},"3":{"start":{"line":30,"column":2},"end":{"line":52,"column":5}},"4":{"start":{"line":34,"column":8},"end":{"line":34,"column":24}},"5":{"start":{"line":38,"column":6},"end":{"line":38,"column":22}},"6":{"start":{"line":42,"column":6},"end":{"line":44,"column":7}},"7":{"start":{"line":43,"column":8},"end":{"line":43,"column":66}},"8":{"start":{"line":45,"column":6},"end":{"line":45,"column":27}},"9":{"start":{"line":50,"column":6},"end":{"line":50,"column":36}},"10":{"start":{"line":54,"column":2},"end":{"line":54,"column":54}},"11":{"start":{"line":56,"column":2},"end":{"line":56,"column":14}},"12":{"start":{"line":65,"column":0},"end":{"line":68,"column":2}},"13":{"start":{"line":66,"column":2},"end":{"line":66,"column":26}},"14":{"start":{"line":67,"column":2},"end":{"line":67,"column":27}},"15":{"start":{"line":70,"column":0},"end":{"line":70,"column":22}},"16":{"start":{"line":71,"column":0},"end":{"line":71,"column":26}}},"branchMap":{"1":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":6},"end":{"line":42,"column":6}},{"start":{"line":42,"column":6},"end":{"line":42,"column":6}}]},"2":{"line":65,"type":"binary-expr","locations":[{"start":{"line":65,"column":12},"end":{"line":65,"column":21}},{"start":{"line":65,"column":25},"end":{"line":68,"column":1}}]}},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","","function factory (type, config, load, typed) {","  /**","   * Calculate the hyperbolic tangent of a value,","   * defined as `tanh(x) = (exp(2 * x) - 1) / (exp(2 * x) + 1)`.","   *","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.tanh(x)","   *","   * Examples:","   *","   *    // tanh(x) = sinh(x) / cosh(x) = 1 / coth(x)","   *    math.tanh(0.5);                   // returns 0.46211715726000974","   *    math.sinh(0.5) / math.cosh(0.5);  // returns 0.46211715726000974","   *    1 / math.coth(0.5);               // returns 0.46211715726000974","   *","   * See also:","   *","   *    sinh, cosh, coth","   *","   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input","   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic tangent of x","   */","  var tanh = typed('tanh', {","    'number': _tanh,","","    'Complex': function (x) {","        return x.tanh();","    },","","    'BigNumber': function (x) {","      return x.tanh();","    },","","    'Unit': function (x) {","      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {","        throw new TypeError ('Unit in function tanh is no angle');","      }","      return tanh(x.value);","    },","","    'Array | Matrix': function (x) {","      // deep map collection, skip zeros since tanh(0) = 0","      return deepMap(x, tanh, true);","    }","  });","","  tanh.toTex = {1: '\\\\tanh\\\\left(${args[0]}\\\\right)'};","","  return tanh;","}","","/**"," * Calculate the hyperbolic tangent of a number"," * @param {number} x"," * @returns {number}"," * @private"," */","var _tanh = Math.tanh || function (x) {","  var e = Math.exp(2 * x);","  return (e - 1) / (e + 1);","};","","exports.name = 'tanh';","exports.factory = factory;",""],"l":{"3":1,"5":1,"30":0,"34":0,"38":0,"42":0,"43":0,"45":0,"50":0,"54":0,"56":0,"65":1,"66":0,"67":0,"70":1,"71":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/unit/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/unit/index.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":3,"column":2}}},"branchMap":{},"code":["module.exports = [","  require('./to')","];"],"l":{"1":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/unit/to.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/unit/to.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":1},"b":{},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"fnMap":{"1":{"name":"factory","line":3,"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}}},"2":{"name":"(anonymous_2)","line":37,"loc":{"start":{"line":37,"column":27},"end":{"line":37,"column":46}}},"3":{"name":"(anonymous_3)","line":41,"loc":{"start":{"line":41,"column":22},"end":{"line":41,"column":38}}},"4":{"name":"(anonymous_4)","line":46,"loc":{"start":{"line":46,"column":20},"end":{"line":46,"column":36}}},"5":{"name":"(anonymous_5)","line":51,"loc":{"start":{"line":51,"column":21},"end":{"line":51,"column":37}}},"6":{"name":"(anonymous_6)","line":56,"loc":{"start":{"line":56,"column":21},"end":{"line":56,"column":37}}},"7":{"name":"(anonymous_7)","line":61,"loc":{"start":{"line":61,"column":19},"end":{"line":61,"column":35}}},"8":{"name":"(anonymous_8)","line":66,"loc":{"start":{"line":66,"column":19},"end":{"line":66,"column":35}}},"9":{"name":"(anonymous_9)","line":71,"loc":{"start":{"line":71,"column":18},"end":{"line":71,"column":34}}},"10":{"name":"(anonymous_10)","line":76,"loc":{"start":{"line":76,"column":18},"end":{"line":76,"column":34}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":87,"column":1}},"2":{"start":{"line":4,"column":2},"end":{"line":4,"column":43}},"3":{"start":{"line":6,"column":2},"end":{"line":6,"column":66}},"4":{"start":{"line":8,"column":2},"end":{"line":8,"column":73}},"5":{"start":{"line":9,"column":2},"end":{"line":9,"column":73}},"6":{"start":{"line":35,"column":2},"end":{"line":80,"column":5}},"7":{"start":{"line":38,"column":6},"end":{"line":38,"column":24}},"8":{"start":{"line":43,"column":6},"end":{"line":43,"column":35}},"9":{"start":{"line":48,"column":6},"end":{"line":48,"column":48}},"10":{"start":{"line":53,"column":6},"end":{"line":53,"column":30}},"11":{"start":{"line":58,"column":6},"end":{"line":58,"column":30}},"12":{"start":{"line":63,"column":6},"end":{"line":63,"column":42}},"13":{"start":{"line":68,"column":6},"end":{"line":68,"column":41}},"14":{"start":{"line":73,"column":6},"end":{"line":73,"column":60}},"15":{"start":{"line":78,"column":6},"end":{"line":78,"column":59}},"16":{"start":{"line":82,"column":2},"end":{"line":84,"column":4}},"17":{"start":{"line":86,"column":2},"end":{"line":86,"column":12}},"18":{"start":{"line":89,"column":0},"end":{"line":89,"column":20}},"19":{"start":{"line":90,"column":0},"end":{"line":90,"column":26}}},"branchMap":{},"code":["'use strict';","","function factory (type, config, load, typed) {","  var latex = require('../../utils/latex');","","  var matrix = load(require('../../type/matrix/function/matrix'));","","  var algorithm13 = load(require('../../type/matrix/utils/algorithm13'));","  var algorithm14 = load(require('../../type/matrix/utils/algorithm14'));","","  /**","   * Change the unit of a value.","   *","   * For matrices, the function is evaluated element wise.","   *","   * Syntax:","   *","   *    math.to(x, unit)","   *","   * Examples:","   *","   *    math.to(math.unit('2 inch'), 'cm');                   // returns Unit 5.08 cm","   *    math.to(math.unit('2 inch'), math.unit(null, 'cm'));  // returns Unit 5.08 cm","   *    math.to(math.unit(16, 'bytes'), 'bits');              // returns Unit 128 bits","   *","   * See also:","   *","   *    unit","   *","   * @param {Unit | Array | Matrix} x     The unit to be converted.","   * @param {Unit | Array | Matrix} unit  New unit. Can be a string like \"cm\"","   *                                      or a unit without value.","   * @return {Unit | Array | Matrix} value with changed, fixed unit.","   */","  var to = typed('to', {","","    'Unit, Unit | string': function (x, unit) {","      return x.to(unit);","    },","","    'Matrix, Matrix': function (x, y) {","      // SparseMatrix does not support Units","      return algorithm13(x, y, to);","    },","","    'Array, Array': function (x, y) {","      // use matrix implementation","      return to(matrix(x), matrix(y)).valueOf();","    },","","    'Array, Matrix': function (x, y) {","      // use matrix implementation","      return to(matrix(x), y);","    },","","    'Matrix, Array': function (x, y) {","      // use matrix implementation","      return to(x, matrix(y));","    },","","    'Matrix, any': function (x, y) {","      // SparseMatrix does not support Units","      return algorithm14(x, y, to, false);","    },","","    'any, Matrix': function (x, y) {","      // SparseMatrix does not support Units","      return algorithm14(y, x, to, true);","    },","","    'Array, any': function (x, y) {","      // use matrix implementation","      return algorithm14(matrix(x), y, to, false).valueOf();","    },","","    'any, Array': function (x, y) {","      // use matrix implementation","      return algorithm14(matrix(y), x, to, true).valueOf();","    }","  });","","  to.toTex = {","    2: '\\\\left(${args[0]}' + latex.operators['to'] + '${args[1]}\\\\right)'","  };","","  return to;","}","","exports.name = 'to';","exports.factory = factory;",""],"l":{"3":1,"4":0,"6":0,"8":0,"9":0,"35":0,"38":0,"43":0,"48":0,"53":0,"58":0,"63":0,"68":0,"73":0,"78":0,"82":0,"86":0,"89":1,"90":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/utils/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/utils/index.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":11,"column":2}}},"branchMap":{},"code":["module.exports = [","  require('./clone'),","  require('./isInteger'),","  require('./isNegative'),","  require('./isNumeric'),","  require('./isPositive'),","  require('./isPrime'),","  require('./isZero'),","  require('./isNaN'),","  require('./typeof')","];",""],"l":{"1":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/utils/clone.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/utils/clone.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":1,"7":1},"b":{},"f":{"1":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":42}},"2":{"start":{"line":5,"column":0},"end":{"line":31,"column":1}},"3":{"start":{"line":24,"column":2},"end":{"line":26,"column":5}},"4":{"start":{"line":28,"column":2},"end":{"line":28,"column":26}},"5":{"start":{"line":30,"column":2},"end":{"line":30,"column":15}},"6":{"start":{"line":33,"column":0},"end":{"line":33,"column":23}},"7":{"start":{"line":34,"column":0},"end":{"line":34,"column":26}}},"branchMap":{},"code":["'use strict';","","var object= require('../../utils/object');","","function factory (type, config, load, typed) {","  /**","   * Clone an object.","   *","   * Syntax:","   *","   *     math.clone(x)","   *","   * Examples:","   *","   *    math.clone(3.5);                   // returns number 3.5","   *    math.clone(math.complex('2-4i'); // returns Complex 2 - 4i","   *    math.clone(math.unit(45, 'deg'));  // returns Unit 45 deg","   *    math.clone([[1, 2], [3, 4]]);      // returns Array [[1, 2], [3, 4]]","   *    math.clone(\"hello world\");         // returns string \"hello world\"","   *","   * @param {*} x   Object to be cloned","   * @return {*} A clone of object x","   */","  var clone = typed('clone', {","    'any': object.clone","  });","","  clone.toTex = undefined; // use default template","","  return clone;","}","","exports.name = 'clone';","exports.factory = factory;",""],"l":{"3":1,"5":1,"24":0,"28":0,"30":0,"33":1,"34":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/utils/isInteger.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/utils/isInteger.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1,"10":1},"b":{"1":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"factory","line":6,"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":45}}},"2":{"name":"(anonymous_2)","line":39,"loc":{"start":{"line":39,"column":17},"end":{"line":39,"column":30}}},"3":{"name":"(anonymous_3)","line":43,"loc":{"start":{"line":43,"column":16},"end":{"line":43,"column":29}}},"4":{"name":"(anonymous_4)","line":47,"loc":{"start":{"line":47,"column":22},"end":{"line":47,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":43}},"3":{"start":{"line":6,"column":0},"end":{"line":53,"column":1}},"4":{"start":{"line":36,"column":2},"end":{"line":50,"column":5}},"5":{"start":{"line":40,"column":6},"end":{"line":40,"column":23}},"6":{"start":{"line":44,"column":6},"end":{"line":44,"column":40}},"7":{"start":{"line":48,"column":6},"end":{"line":48,"column":35}},"8":{"start":{"line":52,"column":2},"end":{"line":52,"column":19}},"9":{"start":{"line":55,"column":0},"end":{"line":55,"column":27}},"10":{"start":{"line":56,"column":0},"end":{"line":56,"column":26}}},"branchMap":{"1":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":13},"end":{"line":44,"column":22}},{"start":{"line":44,"column":26},"end":{"line":44,"column":39}}]}},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","var number = require('../../utils/number');","","function factory (type, config, load, typed) {","  /**","   * Test whether a value is an integer number.","   * The function supports `number`, `BigNumber`, and `Fraction`.","   *","   * The function is evaluated element-wise in case of Array or Matrix input.","   *","   * Syntax:","   *","   *     math.isInteger(x)","   *","   * Examples:","   *","   *    math.isInteger(2);                     // returns true","   *    math.isInteger(0);                     // returns true","   *    math.isInteger(0.5);                   // returns false","   *    math.isInteger(math.bignumber(500));   // returns true","   *    math.isInteger(math.fraction(4));      // returns true","   *    math.isInteger('3');                   // returns true","   *    math.isInteger([3, 0.5, -2]);          // returns [true, false, true]","   *    math.isInteger(math.complex('2-4i');   // throws an error","   *","   * See also:","   *","   *    isNumeric, isPositive, isNegative, isZero","   *","   * @param {number | BigNumber | Fraction | Array | Matrix} x   Value to be tested","   * @return {boolean}  Returns true when `x` contains a numeric, integer value.","   *                    Throws an error in case of an unknown data type.","   */","  var isInteger = typed('isInteger', {","    'number': number.isInteger, // TODO: what to do with isInteger(add(0.1, 0.2))  ?","","    'BigNumber': function (x) {","      return x.isInt();","    },","","    'Fraction': function (x) {","      return x.d === 1 && isFinite(x.n);","    },","","    'Array | Matrix': function (x) {","      return deepMap(x, isInteger);","    }","  });","","  return isInteger;","}","","exports.name = 'isInteger';","exports.factory = factory;",""],"l":{"3":1,"4":1,"6":1,"36":0,"40":0,"44":0,"48":0,"52":0,"55":1,"56":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/utils/isNegative.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/utils/isNegative.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1,"12":1},"b":{"1":[0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"factory","line":6,"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":45}}},"2":{"name":"(anonymous_2)","line":37,"loc":{"start":{"line":37,"column":14},"end":{"line":37,"column":27}}},"3":{"name":"(anonymous_3)","line":41,"loc":{"start":{"line":41,"column":17},"end":{"line":41,"column":30}}},"4":{"name":"(anonymous_4)","line":45,"loc":{"start":{"line":45,"column":16},"end":{"line":45,"column":29}}},"5":{"name":"(anonymous_5)","line":49,"loc":{"start":{"line":49,"column":12},"end":{"line":49,"column":25}}},"6":{"name":"(anonymous_6)","line":53,"loc":{"start":{"line":53,"column":22},"end":{"line":53,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":43}},"3":{"start":{"line":6,"column":0},"end":{"line":59,"column":1}},"4":{"start":{"line":36,"column":2},"end":{"line":56,"column":5}},"5":{"start":{"line":38,"column":6},"end":{"line":38,"column":19}},"6":{"start":{"line":42,"column":6},"end":{"line":42,"column":52}},"7":{"start":{"line":46,"column":6},"end":{"line":46,"column":21}},"8":{"start":{"line":50,"column":6},"end":{"line":50,"column":33}},"9":{"start":{"line":54,"column":6},"end":{"line":54,"column":36}},"10":{"start":{"line":58,"column":2},"end":{"line":58,"column":20}},"11":{"start":{"line":61,"column":0},"end":{"line":61,"column":28}},"12":{"start":{"line":62,"column":0},"end":{"line":62,"column":26}}},"branchMap":{"1":{"line":42,"type":"binary-expr","locations":[{"start":{"line":42,"column":13},"end":{"line":42,"column":22}},{"start":{"line":42,"column":26},"end":{"line":42,"column":37}},{"start":{"line":42,"column":41},"end":{"line":42,"column":51}}]}},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","var number = require('../../utils/number');","","function factory (type, config, load, typed) {","  /**","   * Test whether a value is negative: smaller than zero.","   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.","   *","   * The function is evaluated element-wise in case of Array or Matrix input.","   *","   * Syntax:","   *","   *     math.isNegative(x)","   *","   * Examples:","   *","   *    math.isNegative(3);                     // returns false","   *    math.isNegative(-2);                    // returns true","   *    math.isNegative(0);                     // returns false","   *    math.isNegative(-0);                    // returns false","   *    math.isNegative(math.bignumber(2));     // returns false","   *    math.isNegative(math.fraction(-2, 5));  // returns true","   *    math.isNegative('-2');                  // returns true","   *    math.isNegative([2, 0, -3]');           // returns [false, false, true]","   *","   * See also:","   *","   *    isNumeric, isPositive, isZero, isInteger","   *","   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested","   * @return {boolean}  Returns true when `x` is larger than zero.","   *                    Throws an error in case of an unknown data type.","   */","  var isNegative = typed('isNegative', {","    'number': function (x) {","      return x < 0;","    },","","    'BigNumber': function (x) {","      return x.isNeg() && !x.isZero() && !x.isNaN();","    },","","    'Fraction': function (x) {","      return x.s < 0; // It's enough to decide on the sign","    },","","    'Unit': function (x) {","      return isNegative(x.value);","    },","","    'Array | Matrix': function (x) {","      return deepMap(x, isNegative);","    }","  });","","  return isNegative;","}","","exports.name = 'isNegative';","exports.factory = factory;",""],"l":{"3":1,"4":1,"6":1,"36":0,"38":0,"42":0,"46":0,"50":0,"54":0,"58":0,"61":1,"62":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/utils/isNumeric.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/utils/isNumeric.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1,"10":1},"b":{},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"factory","line":6,"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":45}}},"2":{"name":"(anonymous_2)","line":36,"loc":{"start":{"line":36,"column":47},"end":{"line":36,"column":59}}},"3":{"name":"(anonymous_3)","line":40,"loc":{"start":{"line":40,"column":31},"end":{"line":40,"column":43}}},"4":{"name":"(anonymous_4)","line":44,"loc":{"start":{"line":44,"column":22},"end":{"line":44,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":43}},"3":{"start":{"line":6,"column":0},"end":{"line":50,"column":1}},"4":{"start":{"line":35,"column":2},"end":{"line":47,"column":5}},"5":{"start":{"line":37,"column":6},"end":{"line":37,"column":18}},"6":{"start":{"line":41,"column":6},"end":{"line":41,"column":19}},"7":{"start":{"line":45,"column":6},"end":{"line":45,"column":35}},"8":{"start":{"line":49,"column":2},"end":{"line":49,"column":19}},"9":{"start":{"line":52,"column":0},"end":{"line":52,"column":27}},"10":{"start":{"line":53,"column":0},"end":{"line":53,"column":26}}},"branchMap":{},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","var number = require('../../utils/number');","","function factory (type, config, load, typed) {","  /**","   * Test whether a value is an numeric value.","   *","   * The function is evaluated element-wise in case of Array or Matrix input.","   *","   * Syntax:","   *","   *     math.isNumeric(x)","   *","   * Examples:","   *","   *    math.isNumeric(2);                     // returns true","   *    math.isNumeric(0);                     // returns true","   *    math.isNumeric(math.bignumber(500));   // returns true","   *    math.isNumeric(math.fraction(4));      // returns true","   *    math.isNumeric(math.complex('2-4i');   // returns false","   *    math.isNumeric('3');                   // returns false","   *    math.isNumeric([2.3, 'foo', false]);   // returns [true, false, true]","   *","   * See also:","   *","   *    isZero, isPositive, isNegative, isInteger","   *","   * @param {*} x       Value to be tested","   * @return {boolean}  Returns true when `x` is a `number`, `BigNumber`,","   *                    `Fraction`, or `boolean`. Returns false for other types.","   *                    Throws an error in case of unknown types.","   */","  var isNumeric = typed('isNumeric', {","    'number | BigNumber | Fraction | boolean': function () {","      return true;","    },","","    'Complex | Unit | string': function () {","      return false;","    },","","    'Array | Matrix': function (x) {","      return deepMap(x, isNumeric);","    }","  });","","  return isNumeric;","}","","exports.name = 'isNumeric';","exports.factory = factory;",""],"l":{"3":1,"4":1,"6":1,"35":0,"37":0,"41":0,"45":0,"49":0,"52":1,"53":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/utils/isPositive.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/utils/isPositive.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1,"12":1},"b":{"1":[0,0,0],"2":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"factory","line":6,"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":45}}},"2":{"name":"(anonymous_2)","line":39,"loc":{"start":{"line":39,"column":14},"end":{"line":39,"column":27}}},"3":{"name":"(anonymous_3)","line":43,"loc":{"start":{"line":43,"column":17},"end":{"line":43,"column":30}}},"4":{"name":"(anonymous_4)","line":47,"loc":{"start":{"line":47,"column":16},"end":{"line":47,"column":29}}},"5":{"name":"(anonymous_5)","line":51,"loc":{"start":{"line":51,"column":12},"end":{"line":51,"column":25}}},"6":{"name":"(anonymous_6)","line":55,"loc":{"start":{"line":55,"column":22},"end":{"line":55,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":43}},"3":{"start":{"line":6,"column":0},"end":{"line":61,"column":1}},"4":{"start":{"line":38,"column":2},"end":{"line":58,"column":5}},"5":{"start":{"line":40,"column":6},"end":{"line":40,"column":19}},"6":{"start":{"line":44,"column":6},"end":{"line":44,"column":53}},"7":{"start":{"line":48,"column":6},"end":{"line":48,"column":32}},"8":{"start":{"line":52,"column":6},"end":{"line":52,"column":33}},"9":{"start":{"line":56,"column":6},"end":{"line":56,"column":36}},"10":{"start":{"line":60,"column":2},"end":{"line":60,"column":20}},"11":{"start":{"line":63,"column":0},"end":{"line":63,"column":28}},"12":{"start":{"line":64,"column":0},"end":{"line":64,"column":26}}},"branchMap":{"1":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":13},"end":{"line":44,"column":23}},{"start":{"line":44,"column":27},"end":{"line":44,"column":38}},{"start":{"line":44,"column":42},"end":{"line":44,"column":52}}]},"2":{"line":48,"type":"binary-expr","locations":[{"start":{"line":48,"column":13},"end":{"line":48,"column":20}},{"start":{"line":48,"column":24},"end":{"line":48,"column":31}}]}},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","var number = require('../../utils/number');","","function factory (type, config, load, typed) {","  /**","   * Test whether a value is positive: larger than zero.","   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.","   *","   * The function is evaluated element-wise in case of Array or Matrix input.","   *","   * Syntax:","   *","   *     math.isPositive(x)","   *","   * Examples:","   *","   *    math.isPositive(3);                     // returns true","   *    math.isPositive(-2);                    // returns false","   *    math.isPositive(0);                     // returns false","   *    math.isPositive(-0);                    // returns false","   *    math.isPositive(0.5);                   // returns true","   *    math.isPositive(math.bignumber(2));     // returns true","   *    math.isPositive(math.fraction(-2, 5));  // returns false","   *    math.isPositive(math.fraction(1,3));    // returns false","   *    math.isPositive('2');                   // returns true","   *    math.isPositive([2, 0, -3]');           // returns [true, false, false]","   *","   * See also:","   *","   *    isNumeric, isZero, isNegative, isInteger","   *","   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested","   * @return {boolean}  Returns true when `x` is larger than zero.","   *                    Throws an error in case of an unknown data type.","   */","  var isPositive = typed('isPositive', {","    'number': function (x) {","      return x > 0;","    },","","    'BigNumber': function (x) {","      return !x.isNeg() && !x.isZero() && !x.isNaN();","    },","","    'Fraction': function (x) {","      return x.s > 0 && x.n > 0;","    },","","    'Unit': function (x) {","      return isPositive(x.value);","    },","","    'Array | Matrix': function (x) {","      return deepMap(x, isPositive);","    }","  });","","  return isPositive;","}","","exports.name = 'isPositive';","exports.factory = factory;",""],"l":{"3":1,"4":1,"6":1,"38":0,"40":0,"44":0,"48":0,"52":0,"56":0,"60":0,"63":1,"64":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/utils/isPrime.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/utils/isPrime.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":1,"27":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"factory","line":6,"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":45}}},"2":{"name":"(anonymous_2)","line":36,"loc":{"start":{"line":36,"column":14},"end":{"line":36,"column":27}}},"3":{"name":"(anonymous_3)","line":54,"loc":{"start":{"line":54,"column":17},"end":{"line":54,"column":30}}},"4":{"name":"(anonymous_4)","line":72,"loc":{"start":{"line":72,"column":22},"end":{"line":72,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":6,"column":0},"end":{"line":78,"column":1}},"3":{"start":{"line":35,"column":2},"end":{"line":75,"column":5}},"4":{"start":{"line":37,"column":6},"end":{"line":39,"column":7}},"5":{"start":{"line":38,"column":8},"end":{"line":38,"column":21}},"6":{"start":{"line":40,"column":6},"end":{"line":42,"column":7}},"7":{"start":{"line":41,"column":8},"end":{"line":41,"column":20}},"8":{"start":{"line":43,"column":6},"end":{"line":45,"column":7}},"9":{"start":{"line":44,"column":8},"end":{"line":44,"column":21}},"10":{"start":{"line":46,"column":6},"end":{"line":50,"column":7}},"11":{"start":{"line":47,"column":8},"end":{"line":49,"column":9}},"12":{"start":{"line":48,"column":10},"end":{"line":48,"column":23}},"13":{"start":{"line":51,"column":6},"end":{"line":51,"column":18}},"14":{"start":{"line":55,"column":6},"end":{"line":57,"column":7}},"15":{"start":{"line":56,"column":8},"end":{"line":56,"column":21}},"16":{"start":{"line":58,"column":6},"end":{"line":60,"column":7}},"17":{"start":{"line":59,"column":8},"end":{"line":59,"column":20}},"18":{"start":{"line":61,"column":6},"end":{"line":63,"column":7}},"19":{"start":{"line":62,"column":8},"end":{"line":62,"column":21}},"20":{"start":{"line":64,"column":6},"end":{"line":68,"column":7}},"21":{"start":{"line":65,"column":8},"end":{"line":67,"column":9}},"22":{"start":{"line":66,"column":10},"end":{"line":66,"column":23}},"23":{"start":{"line":69,"column":6},"end":{"line":69,"column":18}},"24":{"start":{"line":73,"column":6},"end":{"line":73,"column":33}},"25":{"start":{"line":77,"column":2},"end":{"line":77,"column":17}},"26":{"start":{"line":80,"column":0},"end":{"line":80,"column":25}},"27":{"start":{"line":81,"column":0},"end":{"line":81,"column":26}}},"branchMap":{"1":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":6},"end":{"line":37,"column":6}},{"start":{"line":37,"column":6},"end":{"line":37,"column":6}}]},"2":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":6},"end":{"line":40,"column":6}},{"start":{"line":40,"column":6},"end":{"line":40,"column":6}}]},"3":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":6},"end":{"line":43,"column":6}},{"start":{"line":43,"column":6},"end":{"line":43,"column":6}}]},"4":{"line":47,"type":"if","locations":[{"start":{"line":47,"column":8},"end":{"line":47,"column":8}},{"start":{"line":47,"column":8},"end":{"line":47,"column":8}}]},"5":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":6},"end":{"line":55,"column":6}},{"start":{"line":55,"column":6},"end":{"line":55,"column":6}}]},"6":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":6},"end":{"line":58,"column":6}},{"start":{"line":58,"column":6},"end":{"line":58,"column":6}}]},"7":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":6},"end":{"line":61,"column":6}},{"start":{"line":61,"column":6},"end":{"line":61,"column":6}}]},"8":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":8},"end":{"line":65,"column":8}},{"start":{"line":65,"column":8},"end":{"line":65,"column":8}}]}},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","","","function factory (type, config, load, typed) {","  /**","   * Test whether a value is prime: has no divisors other than itself and one.","   * The function supports type `number`, `bignumber`.","   *","   * The function is evaluated element-wise in case of Array or Matrix input.","   *","   * Syntax:","   *","   *     math.isPrime(x)","   *","   * Examples:","   *","   *    math.isPrime(3);                     // returns true","   *    math.isPrime(-2);                    // returns false","   *    math.isPrime(0);                     // returns false","   *    math.isPrime(-0);                    // returns false","   *    math.isPrime(0.5);                   // returns false","   *    math.isPrime('2');                   // returns true","   *    math.isPrime([2, 17, 100]');           // returns [true, true, false]","   *","   * See also:","   *","   *    isNumeric, isZero, isNegative, isInteger","   *","   * @param {number | BigNumber | Array | Matrix} x  Value to be tested","   * @return {boolean}  Returns true when `x` is larger than zero.","   *                    Throws an error in case of an unknown data type.","   */","  var isPrime = typed('isPrime', {","    'number': function (x) {","      if (x < 2){","        return false;","      }","      if (x == 2){","        return true;","      }","      if (x % 2 == 0){ ","        return false;","      }","      for (var i = 3; i * i <= x; i += 2){","        if (x % i == 0){","          return false;","        }","      }","      return true;","    },","","    'BigNumber': function (x) {","      if (x.lt(2)){","        return false;","      }","      if (x.equals(2)){","        return true;","      }","      if (x.mod(2).isZero()){","        return false;","      }","      for(var i = type.BigNumber(3); i.times(i).lte(x); i = i.plus(1)){","        if (x.mod(i).isZero()){","          return false;","        }","      }","      return true;","    },","","    'Array | Matrix': function (x) {","      return deepMap(x, isPrime);","    }","  });","","  return isPrime;","}","","exports.name = 'isPrime';","exports.factory = factory;",""],"l":{"3":1,"6":1,"35":0,"37":0,"38":0,"40":0,"41":0,"43":0,"44":0,"46":0,"47":0,"48":0,"51":0,"55":0,"56":0,"58":0,"59":0,"61":0,"62":0,"64":0,"65":0,"66":0,"69":0,"73":0,"77":0,"80":1,"81":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/utils/isZero.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/utils/isZero.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1,"13":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"factory","line":6,"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":45}}},"2":{"name":"(anonymous_2)","line":41,"loc":{"start":{"line":41,"column":14},"end":{"line":41,"column":27}}},"3":{"name":"(anonymous_3)","line":45,"loc":{"start":{"line":45,"column":17},"end":{"line":45,"column":30}}},"4":{"name":"(anonymous_4)","line":49,"loc":{"start":{"line":49,"column":15},"end":{"line":49,"column":28}}},"5":{"name":"(anonymous_5)","line":53,"loc":{"start":{"line":53,"column":16},"end":{"line":53,"column":29}}},"6":{"name":"(anonymous_6)","line":57,"loc":{"start":{"line":57,"column":12},"end":{"line":57,"column":25}}},"7":{"name":"(anonymous_7)","line":61,"loc":{"start":{"line":61,"column":22},"end":{"line":61,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":43}},"3":{"start":{"line":6,"column":0},"end":{"line":67,"column":1}},"4":{"start":{"line":40,"column":2},"end":{"line":64,"column":5}},"5":{"start":{"line":42,"column":6},"end":{"line":42,"column":21}},"6":{"start":{"line":46,"column":6},"end":{"line":46,"column":24}},"7":{"start":{"line":50,"column":6},"end":{"line":50,"column":38}},"8":{"start":{"line":54,"column":6},"end":{"line":54,"column":36}},"9":{"start":{"line":58,"column":6},"end":{"line":58,"column":29}},"10":{"start":{"line":62,"column":6},"end":{"line":62,"column":32}},"11":{"start":{"line":66,"column":2},"end":{"line":66,"column":16}},"12":{"start":{"line":69,"column":0},"end":{"line":69,"column":24}},"13":{"start":{"line":70,"column":0},"end":{"line":70,"column":26}}},"branchMap":{"1":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":13},"end":{"line":50,"column":23}},{"start":{"line":50,"column":27},"end":{"line":50,"column":37}}]},"2":{"line":54,"type":"binary-expr","locations":[{"start":{"line":54,"column":13},"end":{"line":54,"column":22}},{"start":{"line":54,"column":26},"end":{"line":54,"column":35}}]}},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","var number = require('../../utils/number');","","function factory (type, config, load, typed) {","  /**","   * Test whether a value is zero.","   * The function can check for zero for types `number`, `BigNumber`, `Fraction`,","   * `Complex`, and `Unit`.","   *","   * The function is evaluated element-wise in case of Array or Matrix input.","   *","   * Syntax:","   *","   *     math.isZero(x)","   *","   * Examples:","   *","   *    math.isZero(0);                     // returns true","   *    math.isZero(2);                     // returns false","   *    math.isZero(0.5);                   // returns false","   *    math.isZero(math.bignumber(0));     // returns true","   *    math.isZero(math.fraction(0));      // returns true","   *    math.isZero(math.fraction(1,3));    // returns false","   *    math.isZero(math.complex('2 - 4i'); // returns false","   *    math.isZero(math.complex('0i');     // returns true","   *    math.isZero('0');                   // returns true","   *    math.isZero('2');                   // returns false","   *    math.isZero([2, 0, -3]');           // returns [false, true, false]","   *","   * See also:","   *","   *    isNumeric, isPositive, isNegative, isInteger","   *","   * @param {number | BigNumber | Complex | Fraction | Unit | Array | Matrix} x       Value to be tested","   * @return {boolean}  Returns true when `x` is zero.","   *                    Throws an error in case of an unknown data type.","   */","  var isZero = typed('isZero', {","    'number': function (x) {","      return x === 0;","    },","","    'BigNumber': function (x) {","      return x.isZero();","    },","","    'Complex': function (x) {","      return x.re === 0 && x.im === 0;","    },","","    'Fraction': function (x) {","      return x.d === 1 && x.n === 0;","    },","","    'Unit': function (x) {","      return isZero(x.value);","    },","","    'Array | Matrix': function (x) {","      return deepMap(x, isZero);","    }","  });","","  return isZero;","}","","exports.name = 'isZero';","exports.factory = factory;",""],"l":{"3":1,"4":1,"6":1,"40":0,"42":0,"46":0,"50":0,"54":0,"58":0,"62":0,"66":0,"69":1,"70":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/utils/isNaN.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/utils/isNaN.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1,"13":1},"b":{"1":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"factory","line":6,"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":45}}},"2":{"name":"(anonymous_2)","line":37,"loc":{"start":{"line":37,"column":14},"end":{"line":37,"column":27}}},"3":{"name":"(anonymous_3)","line":41,"loc":{"start":{"line":41,"column":17},"end":{"line":41,"column":30}}},"4":{"name":"(anonymous_4)","line":45,"loc":{"start":{"line":45,"column":16},"end":{"line":45,"column":29}}},"5":{"name":"(anonymous_5)","line":49,"loc":{"start":{"line":49,"column":15},"end":{"line":49,"column":28}}},"6":{"name":"(anonymous_6)","line":53,"loc":{"start":{"line":53,"column":12},"end":{"line":53,"column":25}}},"7":{"name":"(anonymous_7)","line":57,"loc":{"start":{"line":57,"column":22},"end":{"line":57,"column":35}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":43}},"3":{"start":{"line":6,"column":0},"end":{"line":63,"column":1}},"4":{"start":{"line":36,"column":2},"end":{"line":60,"column":5}},"5":{"start":{"line":38,"column":6},"end":{"line":38,"column":29}},"6":{"start":{"line":42,"column":6},"end":{"line":42,"column":23}},"7":{"start":{"line":46,"column":6},"end":{"line":46,"column":19}},"8":{"start":{"line":50,"column":6},"end":{"line":50,"column":54}},"9":{"start":{"line":54,"column":6},"end":{"line":54,"column":35}},"10":{"start":{"line":58,"column":6},"end":{"line":58,"column":38}},"11":{"start":{"line":62,"column":2},"end":{"line":62,"column":15}},"12":{"start":{"line":65,"column":0},"end":{"line":65,"column":23}},"13":{"start":{"line":66,"column":0},"end":{"line":66,"column":26}}},"branchMap":{"1":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":13},"end":{"line":50,"column":31}},{"start":{"line":50,"column":35},"end":{"line":50,"column":53}}]}},"code":["'use strict';","","var deepMap = require('../../utils/collection/deepMap');","var number = require('../../utils/number');","","function factory (type, config, load, typed) {","  /**","   * Test whether a value is NaN (not a number).","   * The function supports types `number`, `BigNumber`, `Fraction`, `Unit` and `Complex`.","   *","   * The function is evaluated element-wise in case of Array or Matrix input.","   *","   * Syntax:","   *","   *     math.isNaN(x)","   *","   * Examples:","   *","   *    math.isNaN(3);                     // returns false","   *    math.isNaN(NaN);                   // returns true","   *    math.isNaN(0);                     // returns false","   *    math.isNaN(math.bignumber(NaN));   // returns true","   *    math.isNaN(math.bignumber(0));     // returns false","   *    math.isNaN(math.fraction(-2, 5));  // returns false","   *    math.isNaN('-2');                  // returns false","   *    math.isNaN([2, 0, -3, NaN]');      // returns [false, false, false, true]","   *","   * See also:","   *","   *    isNumeric, isNegative, isPositive, isZero, isInteger","   *","   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested","   * @return {boolean}  Returns true when `x` is NaN.","   *                    Throws an error in case of an unknown data type.","   */","  var isNaN = typed('isNaN', {","    'number': function (x) {","      return Number.isNaN(x);","    },","","    'BigNumber': function (x) {","      return x.isNaN();","    },","","    'Fraction': function (x) {","      return false;","    },","","    'Complex': function (x) {","      return Number.isNaN(x.re) && Number.isNaN(x.im);","    },","","    'Unit': function (x) {","      return Number.isNaN(x.value);","    },","","    'Array | Matrix': function (x) {","      return deepMap(x, Number.isNaN);","    }","  });","","  return isNaN;","}","","exports.name = 'isNaN';","exports.factory = factory;",""],"l":{"3":1,"4":1,"6":1,"36":0,"38":0,"42":0,"46":0,"50":0,"54":0,"58":0,"62":0,"65":1,"66":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/utils/typeof.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/utils/typeof.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1,"28":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"factory","line":5,"loc":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}}},"2":{"name":"(anonymous_2)","line":50,"loc":{"start":{"line":50,"column":11},"end":{"line":50,"column":24}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":41}},"2":{"start":{"line":5,"column":0},"end":{"line":74,"column":1}},"3":{"start":{"line":49,"column":2},"end":{"line":69,"column":5}},"4":{"start":{"line":52,"column":6},"end":{"line":52,"column":28}},"5":{"start":{"line":55,"column":6},"end":{"line":65,"column":7}},"6":{"start":{"line":56,"column":8},"end":{"line":56,"column":55}},"7":{"start":{"line":56,"column":36},"end":{"line":56,"column":55}},"8":{"start":{"line":57,"column":8},"end":{"line":57,"column":53}},"9":{"start":{"line":57,"column":36},"end":{"line":57,"column":53}},"10":{"start":{"line":58,"column":8},"end":{"line":58,"column":54}},"11":{"start":{"line":58,"column":36},"end":{"line":58,"column":54}},"12":{"start":{"line":59,"column":8},"end":{"line":59,"column":52}},"13":{"start":{"line":59,"column":36},"end":{"line":59,"column":52}},"14":{"start":{"line":60,"column":8},"end":{"line":60,"column":50}},"15":{"start":{"line":60,"column":36},"end":{"line":60,"column":50}},"16":{"start":{"line":61,"column":8},"end":{"line":61,"column":51}},"17":{"start":{"line":61,"column":36},"end":{"line":61,"column":51}},"18":{"start":{"line":62,"column":8},"end":{"line":62,"column":51}},"19":{"start":{"line":62,"column":36},"end":{"line":62,"column":51}},"20":{"start":{"line":63,"column":8},"end":{"line":63,"column":51}},"21":{"start":{"line":63,"column":36},"end":{"line":63,"column":51}},"22":{"start":{"line":64,"column":8},"end":{"line":64,"column":50}},"23":{"start":{"line":64,"column":36},"end":{"line":64,"column":50}},"24":{"start":{"line":67,"column":6},"end":{"line":67,"column":15}},"25":{"start":{"line":71,"column":2},"end":{"line":71,"column":28}},"26":{"start":{"line":73,"column":2},"end":{"line":73,"column":17}},"27":{"start":{"line":76,"column":0},"end":{"line":76,"column":24}},"28":{"start":{"line":77,"column":0},"end":{"line":77,"column":26}}},"branchMap":{"1":{"line":55,"type":"if","locations":[{"start":{"line":55,"column":6},"end":{"line":55,"column":6}},{"start":{"line":55,"column":6},"end":{"line":55,"column":6}}]},"2":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":8},"end":{"line":56,"column":8}},{"start":{"line":56,"column":8},"end":{"line":56,"column":8}}]},"3":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":8},"end":{"line":57,"column":8}},{"start":{"line":57,"column":8},"end":{"line":57,"column":8}}]},"4":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":8},"end":{"line":58,"column":8}},{"start":{"line":58,"column":8},"end":{"line":58,"column":8}}]},"5":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":8},"end":{"line":59,"column":8}},{"start":{"line":59,"column":8},"end":{"line":59,"column":8}}]},"6":{"line":60,"type":"if","locations":[{"start":{"line":60,"column":8},"end":{"line":60,"column":8}},{"start":{"line":60,"column":8},"end":{"line":60,"column":8}}]},"7":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":8},"end":{"line":61,"column":8}},{"start":{"line":61,"column":8},"end":{"line":61,"column":8}}]},"8":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":8},"end":{"line":62,"column":8}},{"start":{"line":62,"column":8},"end":{"line":62,"column":8}}]},"9":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":8},"end":{"line":63,"column":8}},{"start":{"line":63,"column":8},"end":{"line":63,"column":8}}]},"10":{"line":64,"type":"if","locations":[{"start":{"line":64,"column":8},"end":{"line":64,"column":8}},{"start":{"line":64,"column":8},"end":{"line":64,"column":8}}]}},"code":["'use strict';","","var types = require('../../utils/types');","","function factory (type, config, load, typed) {","  /**","   * Determine the type of a variable.","   *","   * Function `typeof` recognizes the following types of objects:","   *","   * Object                 | Returns       | Example","   * ---------------------- | ------------- | ------------------------------------------","   * null                   | `'null'`      | `math.typeof(null)`","   * number                 | `'number'`    | `math.typeof(3.5)`","   * boolean                | `'boolean'`   | `math.typeof (true)`","   * string                 | `'string'`    | `math.typeof ('hello world')`","   * Array                  | `'Array'`     | `math.typeof ([1, 2, 3])`","   * Date                   | `'Date'`      | `math.typeof (new Date())`","   * Function               | `'Function'`  | `math.typeof (function () {})`","   * Object                 | `'Object'`    | `math.typeof ({a: 2, b: 3})`","   * RegExp                 | `'RegExp'`    | `math.typeof (/a regexp/)`","   * undefined              | `'undefined'` | `math.typeof(undefined)`","   * math.type.BigNumber    | `'BigNumber'` | `math.typeof (math.bignumber('2.3e500'))`","   * math.type.Chain        | `'Chain'`     | `math.typeof (math.chain(2))`","   * math.type.Complex      | `'Complex'`   | `math.typeof (math.complex(2, 3))`","   * math.type.Fraction     | `'Fraction'`  | `math.typeof (math.fraction(1, 3))`","   * math.type.Help         | `'Help'`      | `math.typeof (math.help('sqrt'))`","   * math.type.Index        | `'Index'`     | `math.typeof (math.index(1, 3))`","   * math.type.Matrix       | `'Matrix'`    | `math.typeof (math.matrix([[1,2], [3, 4]]))`","   * math.type.Range        | `'Range'`     | `math.typeof (math.range(0, 10))`","   * math.type.Unit         | `'Unit'`      | `math.typeof (math.unit('45 deg'))`","   *","   * Syntax:","   *","   *    math.typeof(x)","   *","   * Examples:","   *","   *    math.typeof(3.5);                     // returns 'number'","   *    math.typeof(math.complex('2-4i'));    // returns 'Complex'","   *    math.typeof(math.unit('45 deg'));     // returns 'Unit'","   *    math.typeof('hello world');           // returns 'string'","   *","   * @param {*} x     The variable for which to test the type.","   * @return {string} Returns the name of the type. Primitive types are lower case,","   *                  non-primitive types are upper-camel-case.","   *                  For example 'number', 'string', 'Array', 'Date'.","   */","  var _typeof = typed('_typeof', {","    'any': function (x) {","      // JavaScript types","      var t = types.type(x);","","      // math.js types","      if (t === 'Object') {","        if (x.isBigNumber === true) return 'BigNumber';","        if (x.isComplex === true)   return 'Complex';","        if (x.isFraction === true)  return 'Fraction';","        if (x.isMatrix === true)    return 'Matrix';","        if (x.isUnit === true)      return 'Unit';","        if (x.isIndex === true)     return 'Index';","        if (x.isRange === true)     return 'Range';","        if (x.isChain === true)     return 'Chain';","        if (x.isHelp === true)      return 'Help';","      }","","      return t;","    }","  });","","  _typeof.toTex = undefined; // use default template","","  return _typeof;","}","","exports.name = 'typeof';","exports.factory = factory;",""],"l":{"3":1,"5":1,"49":0,"52":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"67":0,"71":0,"73":0,"76":1,"77":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/json/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/json/index.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":3,"column":2}}},"branchMap":{},"code":["module.exports = [","  require('./reviver')","];",""],"l":{"1":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/json/reviver.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/json/reviver.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":1,"8":1,"9":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"factory","line":3,"loc":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}}},"2":{"name":"reviver","line":10,"loc":{"start":{"line":10,"column":9},"end":{"line":10,"column":38}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":18,"column":1}},"2":{"start":{"line":10,"column":2},"end":{"line":17,"column":3}},"3":{"start":{"line":11,"column":4},"end":{"line":11,"column":50}},"4":{"start":{"line":12,"column":4},"end":{"line":14,"column":5}},"5":{"start":{"line":13,"column":6},"end":{"line":13,"column":41}},"6":{"start":{"line":16,"column":4},"end":{"line":16,"column":17}},"7":{"start":{"line":20,"column":0},"end":{"line":20,"column":25}},"8":{"start":{"line":21,"column":0},"end":{"line":21,"column":22}},"9":{"start":{"line":22,"column":0},"end":{"line":22,"column":26}}},"branchMap":{"1":{"line":11,"type":"binary-expr","locations":[{"start":{"line":11,"column":27},"end":{"line":11,"column":32}},{"start":{"line":11,"column":36},"end":{"line":11,"column":48}}]},"2":{"line":12,"type":"if","locations":[{"start":{"line":12,"column":4},"end":{"line":12,"column":4}},{"start":{"line":12,"column":4},"end":{"line":12,"column":4}}]},"3":{"line":12,"type":"binary-expr","locations":[{"start":{"line":12,"column":8},"end":{"line":12,"column":19}},{"start":{"line":12,"column":23},"end":{"line":12,"column":65}}]}},"code":["'use strict';","","function factory (type, config, load, typed) {","  /**","   * Instantiate mathjs data types from their JSON representation","   * @param {string} key","   * @param {*} value","   * @returns {*} Returns the revived object","   */","  return function reviver(key, value) {","    var constructor = type[value && value.mathjs];","    if (constructor && typeof constructor.fromJSON === 'function') {","      return constructor.fromJSON(value);","    }","","    return value;","  }","}","","exports.name = 'reviver';","exports.path = 'json';","exports.factory = factory;",""],"l":{"3":1,"10":0,"11":0,"12":0,"13":0,"16":0,"20":1,"21":1,"22":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/error/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/error/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0},"b":{},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"(anonymous_1)","line":10,"loc":{"start":{"line":10,"column":13},"end":{"line":10,"column":25}}},"2":{"name":"(anonymous_2)","line":17,"loc":{"start":{"line":17,"column":13},"end":{"line":17,"column":25}}},"3":{"name":"(anonymous_3)","line":24,"loc":{"start":{"line":24,"column":13},"end":{"line":24,"column":25}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":49}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":49}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":41}},"4":{"start":{"line":7,"column":0},"end":{"line":28,"column":2}},"5":{"start":{"line":11,"column":6},"end":{"line":11,"column":28}},"6":{"start":{"line":18,"column":6},"end":{"line":18,"column":28}},"7":{"start":{"line":25,"column":6},"end":{"line":25,"column":24}}},"branchMap":{},"code":["'use strict';","","var ArgumentsError = require('./ArgumentsError');","var DimensionError = require('./DimensionError');","var IndexError = require('./IndexError');","","module.exports = [","  {","    name: 'ArgumentsError', path: 'error',","    factory: function () {","      return ArgumentsError;","    }","  },","  {","    name: 'DimensionError',","    path: 'error',","    factory: function () {","      return DimensionError;","    }","  },","  {","    name: 'IndexError',","    path: 'error',","    factory: function () {","      return IndexError;","    }","  }","];","","// TODO: implement an InvalidValueError?",""],"l":{"3":1,"4":1,"5":1,"7":1,"11":0,"18":0,"25":0}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/relational/equalScalar.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/function/relational/equalScalar.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":1,"15":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"fnMap":{"1":{"name":"factory","line":6,"loc":{"start":{"line":6,"column":0},"end":{"line":6,"column":45}}},"2":{"name":"(anonymous_2)","line":18,"loc":{"start":{"line":18,"column":24},"end":{"line":18,"column":40}}},"3":{"name":"(anonymous_3)","line":22,"loc":{"start":{"line":22,"column":22},"end":{"line":22,"column":38}}},"4":{"name":"(anonymous_4)","line":26,"loc":{"start":{"line":26,"column":28},"end":{"line":26,"column":44}}},"5":{"name":"(anonymous_5)","line":30,"loc":{"start":{"line":30,"column":26},"end":{"line":30,"column":42}}},"6":{"name":"(anonymous_6)","line":34,"loc":{"start":{"line":34,"column":24},"end":{"line":34,"column":40}}},"7":{"name":"(anonymous_7)","line":38,"loc":{"start":{"line":38,"column":18},"end":{"line":38,"column":34}}},"8":{"name":"(anonymous_8)","line":45,"loc":{"start":{"line":45,"column":22},"end":{"line":45,"column":38}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":60}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":66}},"3":{"start":{"line":6,"column":0},"end":{"line":51,"column":1}},"4":{"start":{"line":16,"column":2},"end":{"line":48,"column":5}},"5":{"start":{"line":19,"column":6},"end":{"line":19,"column":21}},"6":{"start":{"line":23,"column":6},"end":{"line":23,"column":58}},"7":{"start":{"line":27,"column":6},"end":{"line":27,"column":61}},"8":{"start":{"line":31,"column":6},"end":{"line":31,"column":25}},"9":{"start":{"line":35,"column":6},"end":{"line":35,"column":25}},"10":{"start":{"line":39,"column":6},"end":{"line":41,"column":7}},"11":{"start":{"line":40,"column":8},"end":{"line":40,"column":68}},"12":{"start":{"line":42,"column":6},"end":{"line":42,"column":43}},"13":{"start":{"line":46,"column":6},"end":{"line":46,"column":21}},"14":{"start":{"line":50,"column":2},"end":{"line":50,"column":21}},"15":{"start":{"line":53,"column":0},"end":{"line":53,"column":26}}},"branchMap":{"1":{"line":23,"type":"binary-expr","locations":[{"start":{"line":23,"column":13},"end":{"line":23,"column":20}},{"start":{"line":23,"column":24},"end":{"line":23,"column":57}}]},"2":{"line":27,"type":"binary-expr","locations":[{"start":{"line":27,"column":13},"end":{"line":27,"column":20}},{"start":{"line":27,"column":24},"end":{"line":27,"column":60}}]},"3":{"line":39,"type":"if","locations":[{"start":{"line":39,"column":6},"end":{"line":39,"column":6}},{"start":{"line":39,"column":6},"end":{"line":39,"column":6}}]}},"code":["'use strict';","","var nearlyEqual = require('../../utils/number').nearlyEqual;","var bigNearlyEqual = require('../../utils/bignumber/nearlyEqual');","","function factory (type, config, load, typed) {","  ","  /**","   * Test whether two values are equal.","   *","   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit} x   First value to compare","   * @param  {number | BigNumber | Fraction | boolean | Complex} y          Second value to compare","   * @return {boolean}                                                  Returns true when the compared values are equal, else returns false","   * @private","   */","  var equalScalar = typed('equalScalar', {","","    'boolean, boolean': function (x, y) {","      return x === y;","    },","","    'number, number': function (x, y) {","      return x === y || nearlyEqual(x, y, config.epsilon);","    },","","    'BigNumber, BigNumber': function (x, y) {","      return x.eq(y) || bigNearlyEqual(x, y, config.epsilon);","    },","","    'Fraction, Fraction': function (x, y) {","      return x.equals(y);","    },","","    'Complex, Complex': function (x, y) {","      return x.equals(y);","    },","","    'Unit, Unit': function (x, y) {","      if (!x.equalBase(y)) {","        throw new Error('Cannot compare units with different base');","      }","      return equalScalar(x.value, y.value);","    },","","    'string, string': function (x, y) {","      return x === y;","    }","  });","  ","  return equalScalar;","}","","exports.factory = factory;",""],"l":{"3":1,"4":1,"6":1,"16":1,"19":0,"23":0,"27":0,"31":0,"35":0,"39":0,"40":0,"42":0,"46":0,"50":1,"53":1}},"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/version.js":{"path":"/home/travis/build/npmtest/node-npmtest-mathjs/mathjs/lib/version.js","s":{"1":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":26}}},"branchMap":{},"code":["module.exports = '3.11.5';","// Note: This file is automatically generated when building math.js.","// Changes made in this file will be overwritten.",""],"l":{"1":1}}}